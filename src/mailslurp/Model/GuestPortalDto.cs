// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// GuestPortalDto
    /// </summary>
    public partial class GuestPortalDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GuestPortalDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="loginUrl">loginUrl</param>
        /// <param name="domainId">domainId</param>
        /// <param name="name">name</param>
        /// <param name="description">description</param>
        /// <param name="linkHelp">linkHelp</param>
        [JsonConstructor]
        public GuestPortalDto(Guid id, Guid userId, DateTime createdAt, DateTime updatedAt, string loginUrl, Option<Guid?> domainId = default, Option<string> name = default, Option<string> description = default, Option<string> linkHelp = default)
        {
            Id = id;
            UserId = userId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            LoginUrl = loginUrl;
            DomainIdOption = domainId;
            NameOption = name;
            DescriptionOption = description;
            LinkHelpOption = linkHelp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets LoginUrl
        /// </summary>
        [JsonPropertyName("loginUrl")]
        public string LoginUrl { get; set; }

        /// <summary>
        /// Used to track the state of DomainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DomainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets DomainId
        /// </summary>
        [JsonPropertyName("domainId")]
        public Guid? DomainId { get { return this.DomainIdOption; } set { this.DomainIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LinkHelp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LinkHelpOption { get; private set; }

        /// <summary>
        /// Gets or Sets LinkHelp
        /// </summary>
        [JsonPropertyName("linkHelp")]
        public string LinkHelp { get { return this.LinkHelpOption; } set { this.LinkHelpOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GuestPortalDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  LoginUrl: ").Append(LoginUrl).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LinkHelp: ").Append(LinkHelp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GuestPortalDto" />
    /// </summary>
    public class GuestPortalDtoJsonConverter : JsonConverter<GuestPortalDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GuestPortalDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GuestPortalDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string> loginUrl = default;
            Option<Guid?> domainId = default;
            Option<string> name = default;
            Option<string> description = default;
            Option<string> linkHelp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "loginUrl":
                            loginUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "domainId":
                            domainId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "linkHelp":
                            linkHelp = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalDto.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalDto.", nameof(userId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalDto.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalDto.", nameof(updatedAt));

            if (!loginUrl.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalDto.", nameof(loginUrl));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GuestPortalDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class GuestPortalDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GuestPortalDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class GuestPortalDto.");

            if (loginUrl.IsSet && loginUrl.Value == null)
                throw new ArgumentNullException(nameof(loginUrl), "Property is not nullable for class GuestPortalDto.");

            if (domainId.IsSet && domainId.Value == null)
                throw new ArgumentNullException(nameof(domainId), "Property is not nullable for class GuestPortalDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GuestPortalDto.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class GuestPortalDto.");

            if (linkHelp.IsSet && linkHelp.Value == null)
                throw new ArgumentNullException(nameof(linkHelp), "Property is not nullable for class GuestPortalDto.");

            return new GuestPortalDto(id.Value.Value, userId.Value.Value, createdAt.Value.Value, updatedAt.Value.Value, loginUrl.Value, domainId, name, description, linkHelp);
        }

        /// <summary>
        /// Serializes a <see cref="GuestPortalDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guestPortalDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GuestPortalDto guestPortalDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, guestPortalDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GuestPortalDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guestPortalDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GuestPortalDto guestPortalDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (guestPortalDto.LoginUrl == null)
                throw new ArgumentNullException(nameof(guestPortalDto.LoginUrl), "Property is required for class GuestPortalDto.");

            if (guestPortalDto.NameOption.IsSet && guestPortalDto.Name == null)
                throw new ArgumentNullException(nameof(guestPortalDto.Name), "Property is required for class GuestPortalDto.");

            if (guestPortalDto.DescriptionOption.IsSet && guestPortalDto.Description == null)
                throw new ArgumentNullException(nameof(guestPortalDto.Description), "Property is required for class GuestPortalDto.");

            if (guestPortalDto.LinkHelpOption.IsSet && guestPortalDto.LinkHelp == null)
                throw new ArgumentNullException(nameof(guestPortalDto.LinkHelp), "Property is required for class GuestPortalDto.");

            writer.WriteString("id", guestPortalDto.Id);

            writer.WriteString("userId", guestPortalDto.UserId);

            writer.WriteString("createdAt", guestPortalDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", guestPortalDto.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("loginUrl", guestPortalDto.LoginUrl);

            if (guestPortalDto.DomainIdOption.IsSet)
                writer.WriteString("domainId", guestPortalDto.DomainIdOption.Value.Value);

            if (guestPortalDto.NameOption.IsSet)
                writer.WriteString("name", guestPortalDto.Name);

            if (guestPortalDto.DescriptionOption.IsSet)
                writer.WriteString("description", guestPortalDto.Description);

            if (guestPortalDto.LinkHelpOption.IsSet)
                writer.WriteString("linkHelp", guestPortalDto.LinkHelp);
        }
    }
}
