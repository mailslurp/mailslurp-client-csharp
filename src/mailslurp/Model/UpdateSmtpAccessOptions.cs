// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Edit access details for inbox using SMTP
    /// </summary>
    public partial class UpdateSmtpAccessOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSmtpAccessOptions" /> class.
        /// </summary>
        /// <param name="smtpUsername">SMTP username for login</param>
        /// <param name="smtpPassword">SMTP password for login</param>
        [JsonConstructor]
        public UpdateSmtpAccessOptions(Option<string> smtpUsername = default, Option<string> smtpPassword = default)
        {
            SmtpUsernameOption = smtpUsername;
            SmtpPasswordOption = smtpPassword;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SmtpUsername
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SmtpUsernameOption { get; private set; }

        /// <summary>
        /// SMTP username for login
        /// </summary>
        /// <value>SMTP username for login</value>
        [JsonPropertyName("smtpUsername")]
        public string SmtpUsername { get { return this.SmtpUsernameOption; } set { this.SmtpUsernameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SmtpPassword
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SmtpPasswordOption { get; private set; }

        /// <summary>
        /// SMTP password for login
        /// </summary>
        /// <value>SMTP password for login</value>
        [JsonPropertyName("smtpPassword")]
        public string SmtpPassword { get { return this.SmtpPasswordOption; } set { this.SmtpPasswordOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateSmtpAccessOptions {\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateSmtpAccessOptions" />
    /// </summary>
    public class UpdateSmtpAccessOptionsJsonConverter : JsonConverter<UpdateSmtpAccessOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateSmtpAccessOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateSmtpAccessOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> smtpUsername = default;
            Option<string> smtpPassword = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "smtpUsername":
                            smtpUsername = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "smtpPassword":
                            smtpPassword = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new UpdateSmtpAccessOptions(smtpUsername, smtpPassword);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateSmtpAccessOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateSmtpAccessOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateSmtpAccessOptions updateSmtpAccessOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateSmtpAccessOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateSmtpAccessOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateSmtpAccessOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateSmtpAccessOptions updateSmtpAccessOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateSmtpAccessOptions.SmtpUsernameOption.IsSet)
                if (updateSmtpAccessOptions.SmtpUsernameOption.Value != null)
                    writer.WriteString("smtpUsername", updateSmtpAccessOptions.SmtpUsername);
                else
                    writer.WriteNull("smtpUsername");

            if (updateSmtpAccessOptions.SmtpPasswordOption.IsSet)
                if (updateSmtpAccessOptions.SmtpPasswordOption.Value != null)
                    writer.WriteString("smtpPassword", updateSmtpAccessOptions.SmtpPassword);
                else
                    writer.WriteNull("smtpPassword");
        }
    }
}
