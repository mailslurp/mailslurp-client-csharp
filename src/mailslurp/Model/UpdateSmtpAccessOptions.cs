/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Edit access details for inbox using SMTP
    /// </summary>
    [DataContract(Name = "UpdateSmtpAccessOptions")]
    public partial class UpdateSmtpAccessOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSmtpAccessOptions" /> class.
        /// </summary>
        /// <param name="smtpUsername">SMTP username for login.</param>
        /// <param name="smtpPassword">SMTP password for login.</param>
        public UpdateSmtpAccessOptions(string smtpUsername = default, string smtpPassword = default)
        {
            this.SmtpUsername = smtpUsername;
            this.SmtpPassword = smtpPassword;
        }

        /// <summary>
        /// SMTP username for login
        /// </summary>
        /// <value>SMTP username for login</value>
        [DataMember(Name = "smtpUsername", EmitDefaultValue = true)]
        public string SmtpUsername { get; set; }

        /// <summary>
        /// SMTP password for login
        /// </summary>
        /// <value>SMTP password for login</value>
        [DataMember(Name = "smtpPassword", EmitDefaultValue = true)]
        public string SmtpPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateSmtpAccessOptions {\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
