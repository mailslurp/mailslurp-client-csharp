/* 
 * MailSlurp API
 *
 * For full documentation and a list of available SDK clients please see the [developer guide](https://www.mailslurp.com/developers). [Create an account](https://app.mailslurp.com) in the MailSlurp Dashboard to [view your API Key](https://app.mailslurp.com). For all bugs, feature requests, or help please [see support](https://www.mailslurp.com/support/). 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for uploading files for attachments
    /// </summary>
    [DataContract]
    public partial class UploadAttachmentOptions :  IEquatable<UploadAttachmentOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadAttachmentOptions" /> class.
        /// </summary>
        /// <param name="base64Contents">Base64 encoded string of file contents.</param>
        /// <param name="contentType">Optional contentType for file. For instance application/pdf.</param>
        /// <param name="filename">Optional filename to save upload with.</param>
        public UploadAttachmentOptions(string base64Contents = default(string), string contentType = default(string), string filename = default(string))
        {
            this.Base64Contents = base64Contents;
            this.ContentType = contentType;
            this.Filename = filename;
        }
        
        /// <summary>
        /// Base64 encoded string of file contents
        /// </summary>
        /// <value>Base64 encoded string of file contents</value>
        [DataMember(Name="base64Contents", EmitDefaultValue=false)]
        public string Base64Contents { get; set; }

        /// <summary>
        /// Optional contentType for file. For instance application/pdf
        /// </summary>
        /// <value>Optional contentType for file. For instance application/pdf</value>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Optional filename to save upload with
        /// </summary>
        /// <value>Optional filename to save upload with</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadAttachmentOptions {\n");
            sb.Append("  Base64Contents: ").Append(Base64Contents).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadAttachmentOptions);
        }

        /// <summary>
        /// Returns true if UploadAttachmentOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadAttachmentOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadAttachmentOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Base64Contents == input.Base64Contents ||
                    (this.Base64Contents != null &&
                    this.Base64Contents.Equals(input.Base64Contents))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Base64Contents != null)
                    hashCode = hashCode * 59 + this.Base64Contents.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                return hashCode;
            }
        }
    }

}
