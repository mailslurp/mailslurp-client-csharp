// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for uploading files for attachments. When sending emails with the API that require attachments first upload each attachment. Then use the returned attachment ID in your &#x60;SendEmailOptions&#x60; when sending an email. This way you can use attachments multiple times once they have been uploaded.
    /// </summary>
    public partial class UploadAttachmentOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadAttachmentOptions" /> class.
        /// </summary>
        /// <param name="base64Contents">Base64 encoded string of file contents. Typically this means reading the bytes or string content of a file and then converting that to a base64 encoded string. For examples of how to do this see https://www.mailslurp.com/guides/base64-file-uploads/</param>
        /// <param name="contentId">Optional contentId for file.</param>
        /// <param name="contentType">Optional contentType for file. For instance &#x60;application/pdf&#x60;</param>
        /// <param name="filename">Optional filename to save upload with. Will be the name that is shown in email clients</param>
        [JsonConstructor]
        public UploadAttachmentOptions(string base64Contents, Option<string> contentId = default, Option<string> contentType = default, Option<string> filename = default)
        {
            Base64Contents = base64Contents;
            ContentIdOption = contentId;
            ContentTypeOption = contentType;
            FilenameOption = filename;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Base64 encoded string of file contents. Typically this means reading the bytes or string content of a file and then converting that to a base64 encoded string. For examples of how to do this see https://www.mailslurp.com/guides/base64-file-uploads/
        /// </summary>
        /// <value>Base64 encoded string of file contents. Typically this means reading the bytes or string content of a file and then converting that to a base64 encoded string. For examples of how to do this see https://www.mailslurp.com/guides/base64-file-uploads/</value>
        [JsonPropertyName("base64Contents")]
        public string Base64Contents { get; set; }

        /// <summary>
        /// Used to track the state of ContentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContentIdOption { get; private set; }

        /// <summary>
        /// Optional contentId for file.
        /// </summary>
        /// <value>Optional contentId for file.</value>
        [JsonPropertyName("contentId")]
        public string ContentId { get { return this.ContentIdOption; } set { this.ContentIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContentTypeOption { get; private set; }

        /// <summary>
        /// Optional contentType for file. For instance &#x60;application/pdf&#x60;
        /// </summary>
        /// <value>Optional contentType for file. For instance &#x60;application/pdf&#x60;</value>
        [JsonPropertyName("contentType")]
        public string ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Filename
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FilenameOption { get; private set; }

        /// <summary>
        /// Optional filename to save upload with. Will be the name that is shown in email clients
        /// </summary>
        /// <value>Optional filename to save upload with. Will be the name that is shown in email clients</value>
        [JsonPropertyName("filename")]
        public string Filename { get { return this.FilenameOption; } set { this.FilenameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadAttachmentOptions {\n");
            sb.Append("  Base64Contents: ").Append(Base64Contents).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UploadAttachmentOptions" />
    /// </summary>
    public class UploadAttachmentOptionsJsonConverter : JsonConverter<UploadAttachmentOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="UploadAttachmentOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UploadAttachmentOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> base64Contents = default;
            Option<string> contentId = default;
            Option<string> contentType = default;
            Option<string> filename = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "base64Contents":
                            base64Contents = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contentId":
                            contentId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contentType":
                            contentType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "filename":
                            filename = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!base64Contents.IsSet)
                throw new ArgumentException("Property is required for class UploadAttachmentOptions.", nameof(base64Contents));

            if (base64Contents.IsSet && base64Contents.Value == null)
                throw new ArgumentNullException(nameof(base64Contents), "Property is not nullable for class UploadAttachmentOptions.");

            return new UploadAttachmentOptions(base64Contents.Value, contentId, contentType, filename);
        }

        /// <summary>
        /// Serializes a <see cref="UploadAttachmentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="uploadAttachmentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UploadAttachmentOptions uploadAttachmentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, uploadAttachmentOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UploadAttachmentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="uploadAttachmentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UploadAttachmentOptions uploadAttachmentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (uploadAttachmentOptions.Base64Contents == null)
                throw new ArgumentNullException(nameof(uploadAttachmentOptions.Base64Contents), "Property is required for class UploadAttachmentOptions.");

            writer.WriteString("base64Contents", uploadAttachmentOptions.Base64Contents);

            if (uploadAttachmentOptions.ContentIdOption.IsSet)
                if (uploadAttachmentOptions.ContentIdOption.Value != null)
                    writer.WriteString("contentId", uploadAttachmentOptions.ContentId);
                else
                    writer.WriteNull("contentId");

            if (uploadAttachmentOptions.ContentTypeOption.IsSet)
                if (uploadAttachmentOptions.ContentTypeOption.Value != null)
                    writer.WriteString("contentType", uploadAttachmentOptions.ContentType);
                else
                    writer.WriteNull("contentType");

            if (uploadAttachmentOptions.FilenameOption.IsSet)
                if (uploadAttachmentOptions.FilenameOption.Value != null)
                    writer.WriteString("filename", uploadAttachmentOptions.Filename);
                else
                    writer.WriteNull("filename");
        }
    }
}
