// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EmailFeatureSupportFlags
    /// </summary>
    public partial class EmailFeatureSupportFlags : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailFeatureSupportFlags" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="notes">notes</param>
        [JsonConstructor]
        public EmailFeatureSupportFlags(StatusEnum status, Option<List<string>> notes = default)
        {
            Status = status;
            NotesOption = notes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SUPPORTED for value: SUPPORTED
            /// </summary>
            SUPPORTED = 1,

            /// <summary>
            /// Enum PARTIAL for value: PARTIAL
            /// </summary>
            PARTIAL = 2,

            /// <summary>
            /// Enum NOTSUPPORTED for value: NOT_SUPPORTED
            /// </summary>
            NOTSUPPORTED = 3,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            UNKNOWN = 4
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("SUPPORTED"))
                return StatusEnum.SUPPORTED;

            if (value.Equals("PARTIAL"))
                return StatusEnum.PARTIAL;

            if (value.Equals("NOT_SUPPORTED"))
                return StatusEnum.NOTSUPPORTED;

            if (value.Equals("UNKNOWN"))
                return StatusEnum.UNKNOWN;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SUPPORTED"))
                return StatusEnum.SUPPORTED;

            if (value.Equals("PARTIAL"))
                return StatusEnum.PARTIAL;

            if (value.Equals("NOT_SUPPORTED"))
                return StatusEnum.NOTSUPPORTED;

            if (value.Equals("UNKNOWN"))
                return StatusEnum.UNKNOWN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.SUPPORTED)
                return "SUPPORTED";

            if (value == StatusEnum.PARTIAL)
                return "PARTIAL";

            if (value == StatusEnum.NOTSUPPORTED)
                return "NOT_SUPPORTED";

            if (value == StatusEnum.UNKNOWN)
                return "UNKNOWN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [JsonPropertyName("notes")]
        public List<string> Notes { get { return this.NotesOption; } set { this.NotesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailFeatureSupportFlags {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailFeatureSupportFlags" />
    /// </summary>
    public class EmailFeatureSupportFlagsJsonConverter : JsonConverter<EmailFeatureSupportFlags>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailFeatureSupportFlags" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailFeatureSupportFlags Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EmailFeatureSupportFlags.StatusEnum?> status = default;
            Option<List<string>> notes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<EmailFeatureSupportFlags.StatusEnum?>(EmailFeatureSupportFlags.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "notes":
                            notes = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class EmailFeatureSupportFlags.", nameof(status));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class EmailFeatureSupportFlags.");

            if (notes.IsSet && notes.Value == null)
                throw new ArgumentNullException(nameof(notes), "Property is not nullable for class EmailFeatureSupportFlags.");

            return new EmailFeatureSupportFlags(status.Value.Value, notes);
        }

        /// <summary>
        /// Serializes a <see cref="EmailFeatureSupportFlags" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailFeatureSupportFlags"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailFeatureSupportFlags emailFeatureSupportFlags, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailFeatureSupportFlags, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailFeatureSupportFlags" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailFeatureSupportFlags"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailFeatureSupportFlags emailFeatureSupportFlags, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailFeatureSupportFlags.NotesOption.IsSet && emailFeatureSupportFlags.Notes == null)
                throw new ArgumentNullException(nameof(emailFeatureSupportFlags.Notes), "Property is required for class EmailFeatureSupportFlags.");

            var statusRawValue = EmailFeatureSupportFlags.StatusEnumToJsonValue(emailFeatureSupportFlags.Status);
            writer.WriteString("status", statusRawValue);
            if (emailFeatureSupportFlags.NotesOption.IsSet)
            {
                writer.WritePropertyName("notes");
                JsonSerializer.Serialize(writer, emailFeatureSupportFlags.Notes, jsonSerializerOptions);
            }
        }
    }
}
