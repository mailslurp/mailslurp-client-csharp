// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// DomainGroup
    /// </summary>
    public partial class DomainGroup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainGroup" /> class.
        /// </summary>
        /// <param name="label">label</param>
        /// <param name="domains">domains</param>
        [JsonConstructor]
        public DomainGroup(LabelEnum label, List<DomainInformation> domains)
        {
            Label = label;
            Domains = domains;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Label
        /// </summary>
        public enum LabelEnum
        {
            /// <summary>
            /// Enum DEFAULT for value: DEFAULT
            /// </summary>
            DEFAULT = 1,

            /// <summary>
            /// Enum DOMAINPOOL for value: DOMAIN_POOL
            /// </summary>
            DOMAINPOOL = 2,

            /// <summary>
            /// Enum CUSTOM for value: CUSTOM
            /// </summary>
            CUSTOM = 3
        }

        /// <summary>
        /// Returns a <see cref="LabelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LabelEnum LabelEnumFromString(string value)
        {
            if (value.Equals("DEFAULT"))
                return LabelEnum.DEFAULT;

            if (value.Equals("DOMAIN_POOL"))
                return LabelEnum.DOMAINPOOL;

            if (value.Equals("CUSTOM"))
                return LabelEnum.CUSTOM;

            throw new NotImplementedException($"Could not convert value to type LabelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LabelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LabelEnum? LabelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("DEFAULT"))
                return LabelEnum.DEFAULT;

            if (value.Equals("DOMAIN_POOL"))
                return LabelEnum.DOMAINPOOL;

            if (value.Equals("CUSTOM"))
                return LabelEnum.CUSTOM;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LabelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string LabelEnumToJsonValue(LabelEnum value)
        {
            if (value == LabelEnum.DEFAULT)
                return "DEFAULT";

            if (value == LabelEnum.DOMAINPOOL)
                return "DOMAIN_POOL";

            if (value == LabelEnum.CUSTOM)
                return "CUSTOM";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [JsonPropertyName("label")]
        public LabelEnum Label { get; set; }

        /// <summary>
        /// Gets or Sets Domains
        /// </summary>
        [JsonPropertyName("domains")]
        public List<DomainInformation> Domains { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainGroup {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Domains: ").Append(Domains).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainGroup" />
    /// </summary>
    public class DomainGroupJsonConverter : JsonConverter<DomainGroup>
    {
        /// <summary>
        /// Deserializes json to <see cref="DomainGroup" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DomainGroup Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DomainGroup.LabelEnum?> label = default;
            Option<List<DomainInformation>> domains = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "label":
                            string labelRawValue = utf8JsonReader.GetString();
                            if (labelRawValue != null)
                                label = new Option<DomainGroup.LabelEnum?>(DomainGroup.LabelEnumFromStringOrDefault(labelRawValue));
                            break;
                        case "domains":
                            domains = new Option<List<DomainInformation>>(JsonSerializer.Deserialize<List<DomainInformation>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!label.IsSet)
                throw new ArgumentException("Property is required for class DomainGroup.", nameof(label));

            if (!domains.IsSet)
                throw new ArgumentException("Property is required for class DomainGroup.", nameof(domains));

            if (label.IsSet && label.Value == null)
                throw new ArgumentNullException(nameof(label), "Property is not nullable for class DomainGroup.");

            if (domains.IsSet && domains.Value == null)
                throw new ArgumentNullException(nameof(domains), "Property is not nullable for class DomainGroup.");

            return new DomainGroup(label.Value.Value, domains.Value);
        }

        /// <summary>
        /// Serializes a <see cref="DomainGroup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainGroup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DomainGroup domainGroup, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, domainGroup, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DomainGroup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainGroup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DomainGroup domainGroup, JsonSerializerOptions jsonSerializerOptions)
        {
            if (domainGroup.Domains == null)
                throw new ArgumentNullException(nameof(domainGroup.Domains), "Property is required for class DomainGroup.");

            var labelRawValue = DomainGroup.LabelEnumToJsonValue(domainGroup.Label);
            writer.WriteString("label", labelRawValue);
            writer.WritePropertyName("domains");
            JsonSerializer.Serialize(writer, domainGroup.Domains, jsonSerializerOptions);
        }
    }
}
