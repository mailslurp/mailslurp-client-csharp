// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Name Server Record
    /// </summary>
    public partial class NameServerRecord : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NameServerRecord" /> class.
        /// </summary>
        /// <param name="raw">raw</param>
        /// <param name="recordType">recordType</param>
        /// <param name="priority">priority</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public NameServerRecord(string raw, string recordType, string priority, string value)
        {
            Raw = raw;
            RecordType = recordType;
            Priority = priority;
            Value = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Raw
        /// </summary>
        [JsonPropertyName("raw")]
        public string Raw { get; set; }

        /// <summary>
        /// Gets or Sets RecordType
        /// </summary>
        [JsonPropertyName("recordType")]
        public string RecordType { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonPropertyName("priority")]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NameServerRecord {\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NameServerRecord" />
    /// </summary>
    public class NameServerRecordJsonConverter : JsonConverter<NameServerRecord>
    {
        /// <summary>
        /// Deserializes json to <see cref="NameServerRecord" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override NameServerRecord Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> raw = default;
            Option<string> recordType = default;
            Option<string> priority = default;
            Option<string> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "raw":
                            raw = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recordType":
                            recordType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "priority":
                            priority = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "value":
                            value = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!raw.IsSet)
                throw new ArgumentException("Property is required for class NameServerRecord.", nameof(raw));

            if (!recordType.IsSet)
                throw new ArgumentException("Property is required for class NameServerRecord.", nameof(recordType));

            if (!priority.IsSet)
                throw new ArgumentException("Property is required for class NameServerRecord.", nameof(priority));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class NameServerRecord.", nameof(value));

            if (raw.IsSet && raw.Value == null)
                throw new ArgumentNullException(nameof(raw), "Property is not nullable for class NameServerRecord.");

            if (recordType.IsSet && recordType.Value == null)
                throw new ArgumentNullException(nameof(recordType), "Property is not nullable for class NameServerRecord.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class NameServerRecord.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class NameServerRecord.");

            return new NameServerRecord(raw.Value, recordType.Value, priority.Value, value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="NameServerRecord" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="nameServerRecord"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, NameServerRecord nameServerRecord, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, nameServerRecord, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="NameServerRecord" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="nameServerRecord"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, NameServerRecord nameServerRecord, JsonSerializerOptions jsonSerializerOptions)
        {
            if (nameServerRecord.Raw == null)
                throw new ArgumentNullException(nameof(nameServerRecord.Raw), "Property is required for class NameServerRecord.");

            if (nameServerRecord.RecordType == null)
                throw new ArgumentNullException(nameof(nameServerRecord.RecordType), "Property is required for class NameServerRecord.");

            if (nameServerRecord.Priority == null)
                throw new ArgumentNullException(nameof(nameServerRecord.Priority), "Property is required for class NameServerRecord.");

            if (nameServerRecord.Value == null)
                throw new ArgumentNullException(nameof(nameServerRecord.Value), "Property is required for class NameServerRecord.");

            writer.WriteString("raw", nameServerRecord.Raw);

            writer.WriteString("recordType", nameServerRecord.RecordType);

            writer.WriteString("priority", nameServerRecord.Priority);

            writer.WriteString("value", nameServerRecord.Value);
        }
    }
}
