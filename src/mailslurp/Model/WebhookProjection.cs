// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Representation of a webhook
    /// </summary>
    public partial class WebhookProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookProjection" /> class.
        /// </summary>
        /// <param name="url">url</param>
        /// <param name="userId">userId</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="password">password</param>
        /// <param name="username">username</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="eventName">eventName</param>
        /// <param name="healthStatus">healthStatus</param>
        /// <param name="phoneNumberId">phoneNumberId</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public WebhookProjection(string url, Guid userId, DateTime updatedAt, DateTime createdAt, Guid id, Option<string> password = default, Option<string> username = default, Option<Guid?> inboxId = default, Option<EventNameEnum?> eventName = default, Option<HealthStatusEnum?> healthStatus = default, Option<Guid?> phoneNumberId = default, Option<string> name = default)
        {
            Url = url;
            UserId = userId;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            Id = id;
            PasswordOption = password;
            UsernameOption = username;
            InboxIdOption = inboxId;
            EventNameOption = eventName;
            HealthStatusOption = healthStatus;
            PhoneNumberIdOption = phoneNumberId;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines EventName
        /// </summary>
        public enum EventNameEnum
        {
            /// <summary>
            /// Enum EMAILRECEIVED for value: EMAIL_RECEIVED
            /// </summary>
            EMAILRECEIVED = 1,

            /// <summary>
            /// Enum NEWEMAIL for value: NEW_EMAIL
            /// </summary>
            NEWEMAIL = 2,

            /// <summary>
            /// Enum NEWCONTACT for value: NEW_CONTACT
            /// </summary>
            NEWCONTACT = 3,

            /// <summary>
            /// Enum NEWATTACHMENT for value: NEW_ATTACHMENT
            /// </summary>
            NEWATTACHMENT = 4,

            /// <summary>
            /// Enum EMAILOPENED for value: EMAIL_OPENED
            /// </summary>
            EMAILOPENED = 5,

            /// <summary>
            /// Enum EMAILREAD for value: EMAIL_READ
            /// </summary>
            EMAILREAD = 6,

            /// <summary>
            /// Enum DELIVERYSTATUS for value: DELIVERY_STATUS
            /// </summary>
            DELIVERYSTATUS = 7,

            /// <summary>
            /// Enum BOUNCE for value: BOUNCE
            /// </summary>
            BOUNCE = 8,

            /// <summary>
            /// Enum BOUNCERECIPIENT for value: BOUNCE_RECIPIENT
            /// </summary>
            BOUNCERECIPIENT = 9,

            /// <summary>
            /// Enum NEWSMS for value: NEW_SMS
            /// </summary>
            NEWSMS = 10,

            /// <summary>
            /// Enum NEWGUESTUSER for value: NEW_GUEST_USER
            /// </summary>
            NEWGUESTUSER = 11
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventNameEnum EventNameEnumFromString(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            throw new NotImplementedException($"Could not convert value to type EventNameEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventNameEnum? EventNameEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventNameEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventNameEnumToJsonValue(EventNameEnum? value)
        {
            if (value == EventNameEnum.EMAILRECEIVED)
                return "EMAIL_RECEIVED";

            if (value == EventNameEnum.NEWEMAIL)
                return "NEW_EMAIL";

            if (value == EventNameEnum.NEWCONTACT)
                return "NEW_CONTACT";

            if (value == EventNameEnum.NEWATTACHMENT)
                return "NEW_ATTACHMENT";

            if (value == EventNameEnum.EMAILOPENED)
                return "EMAIL_OPENED";

            if (value == EventNameEnum.EMAILREAD)
                return "EMAIL_READ";

            if (value == EventNameEnum.DELIVERYSTATUS)
                return "DELIVERY_STATUS";

            if (value == EventNameEnum.BOUNCE)
                return "BOUNCE";

            if (value == EventNameEnum.BOUNCERECIPIENT)
                return "BOUNCE_RECIPIENT";

            if (value == EventNameEnum.NEWSMS)
                return "NEW_SMS";

            if (value == EventNameEnum.NEWGUESTUSER)
                return "NEW_GUEST_USER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of EventName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EventNameEnum?> EventNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [JsonPropertyName("eventName")]
        public EventNameEnum? EventName { get { return this.EventNameOption; } set { this.EventNameOption = new Option<EventNameEnum?>(value); } }

        /// <summary>
        /// Defines HealthStatus
        /// </summary>
        public enum HealthStatusEnum
        {
            /// <summary>
            /// Enum HEALTHY for value: HEALTHY
            /// </summary>
            HEALTHY = 1,

            /// <summary>
            /// Enum UNHEALTHY for value: UNHEALTHY
            /// </summary>
            UNHEALTHY = 2
        }

        /// <summary>
        /// Returns a <see cref="HealthStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static HealthStatusEnum HealthStatusEnumFromString(string value)
        {
            if (value.Equals("HEALTHY"))
                return HealthStatusEnum.HEALTHY;

            if (value.Equals("UNHEALTHY"))
                return HealthStatusEnum.UNHEALTHY;

            throw new NotImplementedException($"Could not convert value to type HealthStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="HealthStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static HealthStatusEnum? HealthStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("HEALTHY"))
                return HealthStatusEnum.HEALTHY;

            if (value.Equals("UNHEALTHY"))
                return HealthStatusEnum.UNHEALTHY;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="HealthStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string HealthStatusEnumToJsonValue(HealthStatusEnum? value)
        {
            if (value == HealthStatusEnum.HEALTHY)
                return "HEALTHY";

            if (value == HealthStatusEnum.UNHEALTHY)
                return "UNHEALTHY";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of HealthStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HealthStatusEnum?> HealthStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets HealthStatus
        /// </summary>
        [JsonPropertyName("healthStatus")]
        public HealthStatusEnum? HealthStatus { get { return this.HealthStatusOption; } set { this.HealthStatusOption = new Option<HealthStatusEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of Password
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string Password { get { return this.PasswordOption; } set { this.PasswordOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [JsonPropertyName("username")]
        public string Username { get { return this.UsernameOption; } set { this.UsernameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumberId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> PhoneNumberIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhoneNumberId
        /// </summary>
        [JsonPropertyName("phoneNumberId")]
        public Guid? PhoneNumberId { get { return this.PhoneNumberIdOption; } set { this.PhoneNumberIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookProjection {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  HealthStatus: ").Append(HealthStatus).Append("\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookProjection" />
    /// </summary>
    public class WebhookProjectionJsonConverter : JsonConverter<WebhookProjection>
    {
        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WebhookProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> url = default;
            Option<Guid?> userId = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> createdAt = default;
            Option<Guid?> id = default;
            Option<string> password = default;
            Option<string> username = default;
            Option<Guid?> inboxId = default;
            Option<WebhookProjection.EventNameEnum?> eventName = default;
            Option<WebhookProjection.HealthStatusEnum?> healthStatus = default;
            Option<Guid?> phoneNumberId = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "password":
                            password = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "username":
                            username = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "eventName":
                            string eventNameRawValue = utf8JsonReader.GetString();
                            if (eventNameRawValue != null)
                                eventName = new Option<WebhookProjection.EventNameEnum?>(WebhookProjection.EventNameEnumFromStringOrDefault(eventNameRawValue));
                            break;
                        case "healthStatus":
                            string healthStatusRawValue = utf8JsonReader.GetString();
                            if (healthStatusRawValue != null)
                                healthStatus = new Option<WebhookProjection.HealthStatusEnum?>(WebhookProjection.HealthStatusEnumFromStringOrDefault(healthStatusRawValue));
                            break;
                        case "phoneNumberId":
                            phoneNumberId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class WebhookProjection.", nameof(url));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class WebhookProjection.", nameof(userId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class WebhookProjection.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class WebhookProjection.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class WebhookProjection.", nameof(id));

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class WebhookProjection.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class WebhookProjection.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebhookProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebhookProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebhookProjection.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class WebhookProjection.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class WebhookProjection.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class WebhookProjection.");

            if (eventName.IsSet && eventName.Value == null)
                throw new ArgumentNullException(nameof(eventName), "Property is not nullable for class WebhookProjection.");

            if (healthStatus.IsSet && healthStatus.Value == null)
                throw new ArgumentNullException(nameof(healthStatus), "Property is not nullable for class WebhookProjection.");

            if (phoneNumberId.IsSet && phoneNumberId.Value == null)
                throw new ArgumentNullException(nameof(phoneNumberId), "Property is not nullable for class WebhookProjection.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebhookProjection.");

            return new WebhookProjection(url.Value, userId.Value.Value, updatedAt.Value.Value, createdAt.Value.Value, id.Value.Value, password, username, inboxId, eventName, healthStatus, phoneNumberId, name);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookProjection webhookProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookProjection webhookProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookProjection.Url == null)
                throw new ArgumentNullException(nameof(webhookProjection.Url), "Property is required for class WebhookProjection.");

            if (webhookProjection.PasswordOption.IsSet && webhookProjection.Password == null)
                throw new ArgumentNullException(nameof(webhookProjection.Password), "Property is required for class WebhookProjection.");

            if (webhookProjection.UsernameOption.IsSet && webhookProjection.Username == null)
                throw new ArgumentNullException(nameof(webhookProjection.Username), "Property is required for class WebhookProjection.");

            if (webhookProjection.NameOption.IsSet && webhookProjection.Name == null)
                throw new ArgumentNullException(nameof(webhookProjection.Name), "Property is required for class WebhookProjection.");

            writer.WriteString("url", webhookProjection.Url);

            writer.WriteString("userId", webhookProjection.UserId);

            writer.WriteString("updatedAt", webhookProjection.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("createdAt", webhookProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", webhookProjection.Id);

            if (webhookProjection.PasswordOption.IsSet)
                writer.WriteString("password", webhookProjection.Password);

            if (webhookProjection.UsernameOption.IsSet)
                writer.WriteString("username", webhookProjection.Username);

            if (webhookProjection.InboxIdOption.IsSet)
                writer.WriteString("inboxId", webhookProjection.InboxIdOption.Value.Value);

            var eventNameRawValue = WebhookProjection.EventNameEnumToJsonValue(webhookProjection.EventNameOption.Value.Value);
            writer.WriteString("eventName", eventNameRawValue);
            var healthStatusRawValue = WebhookProjection.HealthStatusEnumToJsonValue(webhookProjection.HealthStatusOption.Value.Value);
            writer.WriteString("healthStatus", healthStatusRawValue);
            if (webhookProjection.PhoneNumberIdOption.IsSet)
                writer.WriteString("phoneNumberId", webhookProjection.PhoneNumberIdOption.Value.Value);

            if (webhookProjection.NameOption.IsSet)
                writer.WriteString("name", webhookProjection.Name);
        }
    }
}
