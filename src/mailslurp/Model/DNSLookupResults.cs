// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Results of query on domain name servers
    /// </summary>
    public partial class DNSLookupResults : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DNSLookupResults" /> class.
        /// </summary>
        /// <param name="results">results</param>
        [JsonConstructor]
        public DNSLookupResults(List<DNSLookupResult> results)
        {
            Results = results;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [JsonPropertyName("results")]
        public List<DNSLookupResult> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DNSLookupResults {\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DNSLookupResults" />
    /// </summary>
    public class DNSLookupResultsJsonConverter : JsonConverter<DNSLookupResults>
    {
        /// <summary>
        /// Deserializes json to <see cref="DNSLookupResults" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DNSLookupResults Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DNSLookupResult>> results = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "results":
                            results = new Option<List<DNSLookupResult>>(JsonSerializer.Deserialize<List<DNSLookupResult>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!results.IsSet)
                throw new ArgumentException("Property is required for class DNSLookupResults.", nameof(results));

            if (results.IsSet && results.Value == null)
                throw new ArgumentNullException(nameof(results), "Property is not nullable for class DNSLookupResults.");

            return new DNSLookupResults(results.Value);
        }

        /// <summary>
        /// Serializes a <see cref="DNSLookupResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dNSLookupResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DNSLookupResults dNSLookupResults, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dNSLookupResults, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DNSLookupResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dNSLookupResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DNSLookupResults dNSLookupResults, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dNSLookupResults.Results == null)
                throw new ArgumentNullException(nameof(dNSLookupResults.Results), "Property is required for class DNSLookupResults.");

            writer.WritePropertyName("results");
            JsonSerializer.Serialize(writer, dNSLookupResults.Results, jsonSerializerOptions);
        }
    }
}
