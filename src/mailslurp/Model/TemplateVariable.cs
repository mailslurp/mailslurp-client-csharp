/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Variable for use with email template
    /// </summary>
    [DataContract(Name = "TemplateVariable")]
    public partial class TemplateVariable : IValidatableObject
    {
        /// <summary>
        /// The type of variable
        /// </summary>
        /// <value>The type of variable</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VariableTypeEnum
        {
            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRING = 1
        }


        /// <summary>
        /// The type of variable
        /// </summary>
        /// <value>The type of variable</value>
        [DataMember(Name = "variableType", IsRequired = true, EmitDefaultValue = true)]
        public VariableTypeEnum VariableType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateVariable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemplateVariable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateVariable" /> class.
        /// </summary>
        /// <param name="name">Name of variable. This can be used in a template as {{name}} (required).</param>
        /// <param name="variableType">The type of variable (required).</param>
        public TemplateVariable(string name = default, VariableTypeEnum variableType = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TemplateVariable and cannot be null");
            }
            this.Name = name;
            this.VariableType = variableType;
        }

        /// <summary>
        /// Name of variable. This can be used in a template as {{name}}
        /// </summary>
        /// <value>Name of variable. This can be used in a template as {{name}}</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateVariable {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VariableType: ").Append(VariableType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
