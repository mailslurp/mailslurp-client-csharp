/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// TemplateVariable
    /// </summary>
    [DataContract]
    public partial class TemplateVariable :  IEquatable<TemplateVariable>, IValidatableObject
    {
        /// <summary>
        /// Defines VariableType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VariableTypeEnum
        {
            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRING = 1

        }

        /// <summary>
        /// Gets or Sets VariableType
        /// </summary>
        [DataMember(Name="variableType", EmitDefaultValue=false)]
        public VariableTypeEnum VariableType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateVariable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemplateVariable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateVariable" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="variableType">variableType (required).</param>
        public TemplateVariable(string name = default(string), VariableTypeEnum variableType = default(VariableTypeEnum))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for TemplateVariable and cannot be null");
            this.VariableType = variableType;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplateVariable {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VariableType: ").Append(VariableType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateVariable);
        }

        /// <summary>
        /// Returns true if TemplateVariable instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateVariable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateVariable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VariableType == input.VariableType ||
                    this.VariableType.Equals(input.VariableType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.VariableType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
