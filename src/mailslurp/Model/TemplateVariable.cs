// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Variable for use with email template
    /// </summary>
    public partial class TemplateVariable : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateVariable" /> class.
        /// </summary>
        /// <param name="name">Name of variable. This can be used in a template as {{name}}</param>
        /// <param name="variableType">The type of variable</param>
        [JsonConstructor]
        public TemplateVariable(string name, VariableTypeEnum variableType)
        {
            Name = name;
            VariableType = variableType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of variable
        /// </summary>
        /// <value>The type of variable</value>
        public enum VariableTypeEnum
        {
            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            STRING = 1
        }

        /// <summary>
        /// Returns a <see cref="VariableTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VariableTypeEnum VariableTypeEnumFromString(string value)
        {
            if (value.Equals("STRING"))
                return VariableTypeEnum.STRING;

            throw new NotImplementedException($"Could not convert value to type VariableTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VariableTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VariableTypeEnum? VariableTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("STRING"))
                return VariableTypeEnum.STRING;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VariableTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VariableTypeEnumToJsonValue(VariableTypeEnum value)
        {
            if (value == VariableTypeEnum.STRING)
                return "STRING";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of variable
        /// </summary>
        /// <value>The type of variable</value>
        [JsonPropertyName("variableType")]
        public VariableTypeEnum VariableType { get; set; }

        /// <summary>
        /// Name of variable. This can be used in a template as {{name}}
        /// </summary>
        /// <value>Name of variable. This can be used in a template as {{name}}</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateVariable {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VariableType: ").Append(VariableType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TemplateVariable" />
    /// </summary>
    public class TemplateVariableJsonConverter : JsonConverter<TemplateVariable>
    {
        /// <summary>
        /// Deserializes json to <see cref="TemplateVariable" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TemplateVariable Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<TemplateVariable.VariableTypeEnum?> variableType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "variableType":
                            string variableTypeRawValue = utf8JsonReader.GetString();
                            if (variableTypeRawValue != null)
                                variableType = new Option<TemplateVariable.VariableTypeEnum?>(TemplateVariable.VariableTypeEnumFromStringOrDefault(variableTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class TemplateVariable.", nameof(name));

            if (!variableType.IsSet)
                throw new ArgumentException("Property is required for class TemplateVariable.", nameof(variableType));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class TemplateVariable.");

            if (variableType.IsSet && variableType.Value == null)
                throw new ArgumentNullException(nameof(variableType), "Property is not nullable for class TemplateVariable.");

            return new TemplateVariable(name.Value, variableType.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="TemplateVariable" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templateVariable"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TemplateVariable templateVariable, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, templateVariable, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TemplateVariable" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templateVariable"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TemplateVariable templateVariable, JsonSerializerOptions jsonSerializerOptions)
        {
            if (templateVariable.Name == null)
                throw new ArgumentNullException(nameof(templateVariable.Name), "Property is required for class TemplateVariable.");

            writer.WriteString("name", templateVariable.Name);

            var variableTypeRawValue = TemplateVariable.VariableTypeEnumToJsonValue(templateVariable.VariableType);
            writer.WriteString("variableType", variableTypeRawValue);
        }
    }
}
