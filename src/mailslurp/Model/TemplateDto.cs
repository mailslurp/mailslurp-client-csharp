// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Email template
    /// </summary>
    public partial class TemplateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDto" /> class.
        /// </summary>
        /// <param name="id">ID of template</param>
        /// <param name="name">Template name</param>
        /// <param name="variables">Variables available in template that can be replaced with values</param>
        /// <param name="content">Content of the template</param>
        /// <param name="createdAt">Created at time</param>
        [JsonConstructor]
        public TemplateDto(Guid id, string name, List<TemplateVariable> variables, string content, DateTime createdAt)
        {
            Id = id;
            Name = name;
            Variables = variables;
            Content = content;
            CreatedAt = createdAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of template
        /// </summary>
        /// <value>ID of template</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Template name
        /// </summary>
        /// <value>Template name</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Variables available in template that can be replaced with values
        /// </summary>
        /// <value>Variables available in template that can be replaced with values</value>
        [JsonPropertyName("variables")]
        public List<TemplateVariable> Variables { get; set; }

        /// <summary>
        /// Content of the template
        /// </summary>
        /// <value>Content of the template</value>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Created at time
        /// </summary>
        /// <value>Created at time</value>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TemplateDto" />
    /// </summary>
    public class TemplateDtoJsonConverter : JsonConverter<TemplateDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TemplateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TemplateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> name = default;
            Option<List<TemplateVariable>> variables = default;
            Option<string> content = default;
            Option<DateTime?> createdAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "variables":
                            variables = new Option<List<TemplateVariable>>(JsonSerializer.Deserialize<List<TemplateVariable>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "content":
                            content = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class TemplateDto.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class TemplateDto.", nameof(name));

            if (!variables.IsSet)
                throw new ArgumentException("Property is required for class TemplateDto.", nameof(variables));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class TemplateDto.", nameof(content));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class TemplateDto.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TemplateDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class TemplateDto.");

            if (variables.IsSet && variables.Value == null)
                throw new ArgumentNullException(nameof(variables), "Property is not nullable for class TemplateDto.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class TemplateDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class TemplateDto.");

            return new TemplateDto(id.Value.Value, name.Value, variables.Value, content.Value, createdAt.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="TemplateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TemplateDto templateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, templateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TemplateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TemplateDto templateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (templateDto.Name == null)
                throw new ArgumentNullException(nameof(templateDto.Name), "Property is required for class TemplateDto.");

            if (templateDto.Variables == null)
                throw new ArgumentNullException(nameof(templateDto.Variables), "Property is required for class TemplateDto.");

            if (templateDto.Content == null)
                throw new ArgumentNullException(nameof(templateDto.Content), "Property is required for class TemplateDto.");

            writer.WriteString("id", templateDto.Id);

            writer.WriteString("name", templateDto.Name);

            writer.WritePropertyName("variables");
            JsonSerializer.Serialize(writer, templateDto.Variables, jsonSerializerOptions);
            writer.WriteString("content", templateDto.Content);

            writer.WriteString("createdAt", templateDto.CreatedAt.ToString(CreatedAtFormat));
        }
    }
}
