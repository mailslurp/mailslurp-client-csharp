// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// The &#x60;To&#x60;,&#x60;CC&#x60;,&#x60;BCC&#x60; recipients stored in object form with email address and name accessible.
    /// </summary>
    public partial class EmailRecipients : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailRecipients" /> class.
        /// </summary>
        /// <param name="to">to</param>
        /// <param name="cc">cc</param>
        /// <param name="bcc">bcc</param>
        [JsonConstructor]
        public EmailRecipients(Option<List<Recipient>> to = default, Option<List<Recipient>> cc = default, Option<List<Recipient>> bcc = default)
        {
            ToOption = to;
            CcOption = cc;
            BccOption = bcc;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of To
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Recipient>> ToOption { get; private set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [JsonPropertyName("to")]
        public List<Recipient> To { get { return this.ToOption; } set { this.ToOption = new Option<List<Recipient>>(value); } }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Recipient>> CcOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [JsonPropertyName("cc")]
        public List<Recipient> Cc { get { return this.CcOption; } set { this.CcOption = new Option<List<Recipient>>(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Recipient>> BccOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [JsonPropertyName("bcc")]
        public List<Recipient> Bcc { get { return this.BccOption; } set { this.BccOption = new Option<List<Recipient>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailRecipients {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailRecipients" />
    /// </summary>
    public class EmailRecipientsJsonConverter : JsonConverter<EmailRecipients>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailRecipients" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailRecipients Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Recipient>> to = default;
            Option<List<Recipient>> cc = default;
            Option<List<Recipient>> bcc = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "to":
                            to = new Option<List<Recipient>>(JsonSerializer.Deserialize<List<Recipient>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cc":
                            cc = new Option<List<Recipient>>(JsonSerializer.Deserialize<List<Recipient>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bcc":
                            bcc = new Option<List<Recipient>>(JsonSerializer.Deserialize<List<Recipient>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class EmailRecipients.");

            if (cc.IsSet && cc.Value == null)
                throw new ArgumentNullException(nameof(cc), "Property is not nullable for class EmailRecipients.");

            if (bcc.IsSet && bcc.Value == null)
                throw new ArgumentNullException(nameof(bcc), "Property is not nullable for class EmailRecipients.");

            return new EmailRecipients(to, cc, bcc);
        }

        /// <summary>
        /// Serializes a <see cref="EmailRecipients" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailRecipients"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailRecipients emailRecipients, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailRecipients, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailRecipients" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailRecipients"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailRecipients emailRecipients, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailRecipients.ToOption.IsSet && emailRecipients.To == null)
                throw new ArgumentNullException(nameof(emailRecipients.To), "Property is required for class EmailRecipients.");

            if (emailRecipients.CcOption.IsSet && emailRecipients.Cc == null)
                throw new ArgumentNullException(nameof(emailRecipients.Cc), "Property is required for class EmailRecipients.");

            if (emailRecipients.BccOption.IsSet && emailRecipients.Bcc == null)
                throw new ArgumentNullException(nameof(emailRecipients.Bcc), "Property is required for class EmailRecipients.");

            if (emailRecipients.ToOption.IsSet)
            {
                writer.WritePropertyName("to");
                JsonSerializer.Serialize(writer, emailRecipients.To, jsonSerializerOptions);
            }
            if (emailRecipients.CcOption.IsSet)
            {
                writer.WritePropertyName("cc");
                JsonSerializer.Serialize(writer, emailRecipients.Cc, jsonSerializerOptions);
            }
            if (emailRecipients.BccOption.IsSet)
            {
                writer.WritePropertyName("bcc");
                JsonSerializer.Serialize(writer, emailRecipients.Bcc, jsonSerializerOptions);
            }
        }
    }
}
