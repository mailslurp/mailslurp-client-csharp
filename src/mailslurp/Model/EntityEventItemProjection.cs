// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EntityEventItemProjection
    /// </summary>
    public partial class EntityEventItemProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityEventItemProjection" /> class.
        /// </summary>
        /// <param name="eventType">eventType</param>
        /// <param name="id">id</param>
        /// <param name="severity">severity</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="phoneId">phoneId</param>
        [JsonConstructor]
        public EntityEventItemProjection(EventTypeEnum eventType, Guid id, SeverityEnum severity, Option<Guid?> inboxId = default, Option<Guid?> phoneId = default)
        {
            EventType = eventType;
            Id = id;
            Severity = severity;
            InboxIdOption = inboxId;
            PhoneIdOption = phoneId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines EventType
        /// </summary>
        public enum EventTypeEnum
        {
            /// <summary>
            /// Enum WEBHOOKEVENT for value: WEBHOOK_EVENT
            /// </summary>
            WEBHOOKEVENT = 1,

            /// <summary>
            /// Enum INBOXFORWARDEREVENT for value: INBOX_FORWARDER_EVENT
            /// </summary>
            INBOXFORWARDEREVENT = 2,

            /// <summary>
            /// Enum INBOXREPLIEREVENT for value: INBOX_REPLIER_EVENT
            /// </summary>
            INBOXREPLIEREVENT = 3,

            /// <summary>
            /// Enum INBOXRULESETEVENT for value: INBOX_RULESET_EVENT
            /// </summary>
            INBOXRULESETEVENT = 4,

            /// <summary>
            /// Enum ALIASEVENT for value: ALIAS_EVENT
            /// </summary>
            ALIASEVENT = 5
        }

        /// <summary>
        /// Returns a <see cref="EventTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventTypeEnum EventTypeEnumFromString(string value)
        {
            if (value.Equals("WEBHOOK_EVENT"))
                return EventTypeEnum.WEBHOOKEVENT;

            if (value.Equals("INBOX_FORWARDER_EVENT"))
                return EventTypeEnum.INBOXFORWARDEREVENT;

            if (value.Equals("INBOX_REPLIER_EVENT"))
                return EventTypeEnum.INBOXREPLIEREVENT;

            if (value.Equals("INBOX_RULESET_EVENT"))
                return EventTypeEnum.INBOXRULESETEVENT;

            if (value.Equals("ALIAS_EVENT"))
                return EventTypeEnum.ALIASEVENT;

            throw new NotImplementedException($"Could not convert value to type EventTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventTypeEnum? EventTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("WEBHOOK_EVENT"))
                return EventTypeEnum.WEBHOOKEVENT;

            if (value.Equals("INBOX_FORWARDER_EVENT"))
                return EventTypeEnum.INBOXFORWARDEREVENT;

            if (value.Equals("INBOX_REPLIER_EVENT"))
                return EventTypeEnum.INBOXREPLIEREVENT;

            if (value.Equals("INBOX_RULESET_EVENT"))
                return EventTypeEnum.INBOXRULESETEVENT;

            if (value.Equals("ALIAS_EVENT"))
                return EventTypeEnum.ALIASEVENT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventTypeEnumToJsonValue(EventTypeEnum value)
        {
            if (value == EventTypeEnum.WEBHOOKEVENT)
                return "WEBHOOK_EVENT";

            if (value == EventTypeEnum.INBOXFORWARDEREVENT)
                return "INBOX_FORWARDER_EVENT";

            if (value == EventTypeEnum.INBOXREPLIEREVENT)
                return "INBOX_REPLIER_EVENT";

            if (value == EventTypeEnum.INBOXRULESETEVENT)
                return "INBOX_RULESET_EVENT";

            if (value == EventTypeEnum.ALIASEVENT)
                return "ALIAS_EVENT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [JsonPropertyName("eventType")]
        public EventTypeEnum EventType { get; set; }

        /// <summary>
        /// Defines Severity
        /// </summary>
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum INFO for value: INFO
            /// </summary>
            INFO = 1,

            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            SUCCESS = 2,

            /// <summary>
            /// Enum WARNING for value: WARNING
            /// </summary>
            WARNING = 3,

            /// <summary>
            /// Enum DANGER for value: DANGER
            /// </summary>
            DANGER = 4
        }

        /// <summary>
        /// Returns a <see cref="SeverityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SeverityEnum SeverityEnumFromString(string value)
        {
            if (value.Equals("INFO"))
                return SeverityEnum.INFO;

            if (value.Equals("SUCCESS"))
                return SeverityEnum.SUCCESS;

            if (value.Equals("WARNING"))
                return SeverityEnum.WARNING;

            if (value.Equals("DANGER"))
                return SeverityEnum.DANGER;

            throw new NotImplementedException($"Could not convert value to type SeverityEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SeverityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SeverityEnum? SeverityEnumFromStringOrDefault(string value)
        {
            if (value.Equals("INFO"))
                return SeverityEnum.INFO;

            if (value.Equals("SUCCESS"))
                return SeverityEnum.SUCCESS;

            if (value.Equals("WARNING"))
                return SeverityEnum.WARNING;

            if (value.Equals("DANGER"))
                return SeverityEnum.DANGER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SeverityEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SeverityEnumToJsonValue(SeverityEnum value)
        {
            if (value == SeverityEnum.INFO)
                return "INFO";

            if (value == SeverityEnum.SUCCESS)
                return "SUCCESS";

            if (value == SeverityEnum.WARNING)
                return "WARNING";

            if (value == SeverityEnum.DANGER)
                return "DANGER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [JsonPropertyName("severity")]
        public SeverityEnum Severity { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of PhoneId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> PhoneIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhoneId
        /// </summary>
        [JsonPropertyName("phoneId")]
        public Guid? PhoneId { get { return this.PhoneIdOption; } set { this.PhoneIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityEventItemProjection {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  PhoneId: ").Append(PhoneId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EntityEventItemProjection" />
    /// </summary>
    public class EntityEventItemProjectionJsonConverter : JsonConverter<EntityEventItemProjection>
    {
        /// <summary>
        /// Deserializes json to <see cref="EntityEventItemProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EntityEventItemProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EntityEventItemProjection.EventTypeEnum?> eventType = default;
            Option<Guid?> id = default;
            Option<EntityEventItemProjection.SeverityEnum?> severity = default;
            Option<Guid?> inboxId = default;
            Option<Guid?> phoneId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "eventType":
                            string eventTypeRawValue = utf8JsonReader.GetString();
                            if (eventTypeRawValue != null)
                                eventType = new Option<EntityEventItemProjection.EventTypeEnum?>(EntityEventItemProjection.EventTypeEnumFromStringOrDefault(eventTypeRawValue));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "severity":
                            string severityRawValue = utf8JsonReader.GetString();
                            if (severityRawValue != null)
                                severity = new Option<EntityEventItemProjection.SeverityEnum?>(EntityEventItemProjection.SeverityEnumFromStringOrDefault(severityRawValue));
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "phoneId":
                            phoneId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!eventType.IsSet)
                throw new ArgumentException("Property is required for class EntityEventItemProjection.", nameof(eventType));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class EntityEventItemProjection.", nameof(id));

            if (!severity.IsSet)
                throw new ArgumentException("Property is required for class EntityEventItemProjection.", nameof(severity));

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType), "Property is not nullable for class EntityEventItemProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EntityEventItemProjection.");

            if (severity.IsSet && severity.Value == null)
                throw new ArgumentNullException(nameof(severity), "Property is not nullable for class EntityEventItemProjection.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class EntityEventItemProjection.");

            if (phoneId.IsSet && phoneId.Value == null)
                throw new ArgumentNullException(nameof(phoneId), "Property is not nullable for class EntityEventItemProjection.");

            return new EntityEventItemProjection(eventType.Value.Value, id.Value.Value, severity.Value.Value, inboxId, phoneId);
        }

        /// <summary>
        /// Serializes a <see cref="EntityEventItemProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityEventItemProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EntityEventItemProjection entityEventItemProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, entityEventItemProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EntityEventItemProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityEventItemProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EntityEventItemProjection entityEventItemProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            var eventTypeRawValue = EntityEventItemProjection.EventTypeEnumToJsonValue(entityEventItemProjection.EventType);
            writer.WriteString("eventType", eventTypeRawValue);
            writer.WriteString("id", entityEventItemProjection.Id);

            var severityRawValue = EntityEventItemProjection.SeverityEnumToJsonValue(entityEventItemProjection.Severity);
            writer.WriteString("severity", severityRawValue);
            if (entityEventItemProjection.InboxIdOption.IsSet)
                writer.WriteString("inboxId", entityEventItemProjection.InboxIdOption.Value.Value);

            if (entityEventItemProjection.PhoneIdOption.IsSet)
                writer.WriteString("phoneId", entityEventItemProjection.PhoneIdOption.Value.Value);
        }
    }
}
