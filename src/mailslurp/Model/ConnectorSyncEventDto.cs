/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorSyncEventDto
    /// </summary>
    [DataContract(Name = "ConnectorSyncEventDto")]
    public partial class ConnectorSyncEventDto : IEquatable<ConnectorSyncEventDto>, IValidatableObject
    {
        /// <summary>
        /// Defines SyncStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SyncStatusEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 1,

            /// <summary>
            /// Enum INTERNALERROR for value: INTERNAL_ERROR
            /// </summary>
            [EnumMember(Value = "INTERNAL_ERROR")]
            INTERNALERROR = 2,

            /// <summary>
            /// Enum SUBSCRIPTIONERROR for value: SUBSCRIPTION_ERROR
            /// </summary>
            [EnumMember(Value = "SUBSCRIPTION_ERROR")]
            SUBSCRIPTIONERROR = 3,

            /// <summary>
            /// Enum CONNECTIONERROR for value: CONNECTION_ERROR
            /// </summary>
            [EnumMember(Value = "CONNECTION_ERROR")]
            CONNECTIONERROR = 4,

            /// <summary>
            /// Enum NOTFOUND for value: NOT_FOUND
            /// </summary>
            [EnumMember(Value = "NOT_FOUND")]
            NOTFOUND = 5

        }


        /// <summary>
        /// Gets or Sets SyncStatus
        /// </summary>
        [DataMember(Name = "syncStatus", IsRequired = true, EmitDefaultValue = true)]
        public SyncStatusEnum SyncStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorSyncEventDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectorSyncEventDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorSyncEventDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="connectorId">connectorId (required).</param>
        /// <param name="syncStatus">syncStatus (required).</param>
        /// <param name="syncCount">syncCount (required).</param>
        /// <param name="message">message.</param>
        /// <param name="createdAt">createdAt (required).</param>
        public ConnectorSyncEventDto(Guid id = default(Guid), Guid connectorId = default(Guid), SyncStatusEnum syncStatus = default(SyncStatusEnum), long syncCount = default(long), string message = default(string), DateTime createdAt = default(DateTime))
        {
            this.Id = id;
            this.ConnectorId = connectorId;
            this.SyncStatus = syncStatus;
            this.SyncCount = syncCount;
            this.CreatedAt = createdAt;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorId
        /// </summary>
        [DataMember(Name = "connectorId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ConnectorId { get; set; }

        /// <summary>
        /// Gets or Sets SyncCount
        /// </summary>
        [DataMember(Name = "syncCount", IsRequired = true, EmitDefaultValue = true)]
        public long SyncCount { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorSyncEventDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConnectorId: ").Append(ConnectorId).Append("\n");
            sb.Append("  SyncStatus: ").Append(SyncStatus).Append("\n");
            sb.Append("  SyncCount: ").Append(SyncCount).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectorSyncEventDto);
        }

        /// <summary>
        /// Returns true if ConnectorSyncEventDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectorSyncEventDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorSyncEventDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ConnectorId == input.ConnectorId ||
                    (this.ConnectorId != null &&
                    this.ConnectorId.Equals(input.ConnectorId))
                ) && 
                (
                    this.SyncStatus == input.SyncStatus ||
                    this.SyncStatus.Equals(input.SyncStatus)
                ) && 
                (
                    this.SyncCount == input.SyncCount ||
                    this.SyncCount.Equals(input.SyncCount)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ConnectorId != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectorId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SyncStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.SyncCount.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
