// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// SearchInboxesOptions
    /// </summary>
    public partial class SearchInboxesOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchInboxesOptions" /> class.
        /// </summary>
        /// <param name="pageIndex">Optional page index in list pagination</param>
        /// <param name="pageSize">Optional page size in list pagination</param>
        /// <param name="sortDirection">Optional createdAt sort direction ASC or DESC</param>
        /// <param name="favourite">Optionally filter results for favourites only</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address</param>
        /// <param name="tag">Optionally filter by tags. Will return inboxes that include given tags</param>
        /// <param name="since">Optional filter by created after given date time</param>
        /// <param name="before">Optional filter by created before given date time</param>
        /// <param name="inboxType">Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send).</param>
        /// <param name="inboxFunction">Optional filter by inbox function</param>
        /// <param name="domainId">Optional domain ID filter</param>
        [JsonConstructor]
        public SearchInboxesOptions(Option<int?> pageIndex = default, Option<int?> pageSize = default, Option<SortDirectionEnum?> sortDirection = default, Option<bool?> favourite = default, Option<string> search = default, Option<string> tag = default, Option<DateTime?> since = default, Option<DateTime?> before = default, Option<InboxTypeEnum?> inboxType = default, Option<InboxFunctionEnum?> inboxFunction = default, Option<Guid?> domainId = default)
        {
            PageIndexOption = pageIndex;
            PageSizeOption = pageSize;
            SortDirectionOption = sortDirection;
            FavouriteOption = favourite;
            SearchOption = search;
            TagOption = tag;
            SinceOption = since;
            BeforeOption = before;
            InboxTypeOption = inboxType;
            InboxFunctionOption = inboxFunction;
            DomainIdOption = domainId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Optional createdAt sort direction ASC or DESC
        /// </summary>
        /// <value>Optional createdAt sort direction ASC or DESC</value>
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="SortDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SortDirectionEnum SortDirectionEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return SortDirectionEnum.ASC;

            if (value.Equals("DESC"))
                return SortDirectionEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type SortDirectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SortDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SortDirectionEnum? SortDirectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return SortDirectionEnum.ASC;

            if (value.Equals("DESC"))
                return SortDirectionEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SortDirectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SortDirectionEnumToJsonValue(SortDirectionEnum? value)
        {
            if (value == null)
                return null;

            if (value == SortDirectionEnum.ASC)
                return "ASC";

            if (value == SortDirectionEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SortDirection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SortDirectionEnum?> SortDirectionOption { get; private set; }

        /// <summary>
        /// Optional createdAt sort direction ASC or DESC
        /// </summary>
        /// <value>Optional createdAt sort direction ASC or DESC</value>
        [JsonPropertyName("sortDirection")]
        public SortDirectionEnum? SortDirection { get { return this.SortDirectionOption; } set { this.SortDirectionOption = new Option<SortDirectionEnum?>(value); } }

        /// <summary>
        /// Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send).
        /// </summary>
        /// <value>Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send).</value>
        public enum InboxTypeEnum
        {
            /// <summary>
            /// Enum HTTPINBOX for value: HTTP_INBOX
            /// </summary>
            HTTPINBOX = 1,

            /// <summary>
            /// Enum SMTPINBOX for value: SMTP_INBOX
            /// </summary>
            SMTPINBOX = 2
        }

        /// <summary>
        /// Returns a <see cref="InboxTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static InboxTypeEnum InboxTypeEnumFromString(string value)
        {
            if (value.Equals("HTTP_INBOX"))
                return InboxTypeEnum.HTTPINBOX;

            if (value.Equals("SMTP_INBOX"))
                return InboxTypeEnum.SMTPINBOX;

            throw new NotImplementedException($"Could not convert value to type InboxTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="InboxTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static InboxTypeEnum? InboxTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("HTTP_INBOX"))
                return InboxTypeEnum.HTTPINBOX;

            if (value.Equals("SMTP_INBOX"))
                return InboxTypeEnum.SMTPINBOX;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="InboxTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string InboxTypeEnumToJsonValue(InboxTypeEnum? value)
        {
            if (value == null)
                return null;

            if (value == InboxTypeEnum.HTTPINBOX)
                return "HTTP_INBOX";

            if (value == InboxTypeEnum.SMTPINBOX)
                return "SMTP_INBOX";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of InboxType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InboxTypeEnum?> InboxTypeOption { get; private set; }

        /// <summary>
        /// Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send).
        /// </summary>
        /// <value>Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send).</value>
        [JsonPropertyName("inboxType")]
        public InboxTypeEnum? InboxType { get { return this.InboxTypeOption; } set { this.InboxTypeOption = new Option<InboxTypeEnum?>(value); } }

        /// <summary>
        /// Optional filter by inbox function
        /// </summary>
        /// <value>Optional filter by inbox function</value>
        public enum InboxFunctionEnum
        {
            /// <summary>
            /// Enum ALIAS for value: ALIAS
            /// </summary>
            ALIAS = 1,

            /// <summary>
            /// Enum THREAD for value: THREAD
            /// </summary>
            THREAD = 2,

            /// <summary>
            /// Enum CATCHALL for value: CATCH_ALL
            /// </summary>
            CATCHALL = 3,

            /// <summary>
            /// Enum CONNECTOR for value: CONNECTOR
            /// </summary>
            CONNECTOR = 4,

            /// <summary>
            /// Enum ACCOUNT for value: ACCOUNT
            /// </summary>
            ACCOUNT = 5,

            /// <summary>
            /// Enum GUEST for value: GUEST
            /// </summary>
            GUEST = 6,

            /// <summary>
            /// Enum OAUTHCONNECTIONGMAIL for value: OAUTH_CONNECTION_GMAIL
            /// </summary>
            OAUTHCONNECTIONGMAIL = 7
        }

        /// <summary>
        /// Returns a <see cref="InboxFunctionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static InboxFunctionEnum InboxFunctionEnumFromString(string value)
        {
            if (value.Equals("ALIAS"))
                return InboxFunctionEnum.ALIAS;

            if (value.Equals("THREAD"))
                return InboxFunctionEnum.THREAD;

            if (value.Equals("CATCH_ALL"))
                return InboxFunctionEnum.CATCHALL;

            if (value.Equals("CONNECTOR"))
                return InboxFunctionEnum.CONNECTOR;

            if (value.Equals("ACCOUNT"))
                return InboxFunctionEnum.ACCOUNT;

            if (value.Equals("GUEST"))
                return InboxFunctionEnum.GUEST;

            if (value.Equals("OAUTH_CONNECTION_GMAIL"))
                return InboxFunctionEnum.OAUTHCONNECTIONGMAIL;

            throw new NotImplementedException($"Could not convert value to type InboxFunctionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="InboxFunctionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static InboxFunctionEnum? InboxFunctionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ALIAS"))
                return InboxFunctionEnum.ALIAS;

            if (value.Equals("THREAD"))
                return InboxFunctionEnum.THREAD;

            if (value.Equals("CATCH_ALL"))
                return InboxFunctionEnum.CATCHALL;

            if (value.Equals("CONNECTOR"))
                return InboxFunctionEnum.CONNECTOR;

            if (value.Equals("ACCOUNT"))
                return InboxFunctionEnum.ACCOUNT;

            if (value.Equals("GUEST"))
                return InboxFunctionEnum.GUEST;

            if (value.Equals("OAUTH_CONNECTION_GMAIL"))
                return InboxFunctionEnum.OAUTHCONNECTIONGMAIL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="InboxFunctionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string InboxFunctionEnumToJsonValue(InboxFunctionEnum? value)
        {
            if (value == null)
                return null;

            if (value == InboxFunctionEnum.ALIAS)
                return "ALIAS";

            if (value == InboxFunctionEnum.THREAD)
                return "THREAD";

            if (value == InboxFunctionEnum.CATCHALL)
                return "CATCH_ALL";

            if (value == InboxFunctionEnum.CONNECTOR)
                return "CONNECTOR";

            if (value == InboxFunctionEnum.ACCOUNT)
                return "ACCOUNT";

            if (value == InboxFunctionEnum.GUEST)
                return "GUEST";

            if (value == InboxFunctionEnum.OAUTHCONNECTIONGMAIL)
                return "OAUTH_CONNECTION_GMAIL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of InboxFunction
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InboxFunctionEnum?> InboxFunctionOption { get; private set; }

        /// <summary>
        /// Optional filter by inbox function
        /// </summary>
        /// <value>Optional filter by inbox function</value>
        [JsonPropertyName("inboxFunction")]
        public InboxFunctionEnum? InboxFunction { get { return this.InboxFunctionOption; } set { this.InboxFunctionOption = new Option<InboxFunctionEnum?>(value); } }

        /// <summary>
        /// Used to track the state of PageIndex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageIndexOption { get; private set; }

        /// <summary>
        /// Optional page index in list pagination
        /// </summary>
        /// <value>Optional page index in list pagination</value>
        [JsonPropertyName("pageIndex")]
        public int? PageIndex { get { return this.PageIndexOption; } set { this.PageIndexOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of PageSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageSizeOption { get; private set; }

        /// <summary>
        /// Optional page size in list pagination
        /// </summary>
        /// <value>Optional page size in list pagination</value>
        [JsonPropertyName("pageSize")]
        public int? PageSize { get { return this.PageSizeOption; } set { this.PageSizeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Favourite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FavouriteOption { get; private set; }

        /// <summary>
        /// Optionally filter results for favourites only
        /// </summary>
        /// <value>Optionally filter results for favourites only</value>
        [JsonPropertyName("favourite")]
        public bool? Favourite { get { return this.FavouriteOption; } set { this.FavouriteOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Search
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SearchOption { get; private set; }

        /// <summary>
        /// Optionally filter by search words partial matching ID, tags, name, and email address
        /// </summary>
        /// <value>Optionally filter by search words partial matching ID, tags, name, and email address</value>
        [JsonPropertyName("search")]
        public string Search { get { return this.SearchOption; } set { this.SearchOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TagOption { get; private set; }

        /// <summary>
        /// Optionally filter by tags. Will return inboxes that include given tags
        /// </summary>
        /// <value>Optionally filter by tags. Will return inboxes that include given tags</value>
        [JsonPropertyName("tag")]
        public string Tag { get { return this.TagOption; } set { this.TagOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Since
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SinceOption { get; private set; }

        /// <summary>
        /// Optional filter by created after given date time
        /// </summary>
        /// <value>Optional filter by created after given date time</value>
        [JsonPropertyName("since")]
        public DateTime? Since { get { return this.SinceOption; } set { this.SinceOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Before
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BeforeOption { get; private set; }

        /// <summary>
        /// Optional filter by created before given date time
        /// </summary>
        /// <value>Optional filter by created before given date time</value>
        [JsonPropertyName("before")]
        public DateTime? Before { get { return this.BeforeOption; } set { this.BeforeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DomainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DomainIdOption { get; private set; }

        /// <summary>
        /// Optional domain ID filter
        /// </summary>
        /// <value>Optional domain ID filter</value>
        [JsonPropertyName("domainId")]
        public Guid? DomainId { get { return this.DomainIdOption; } set { this.DomainIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchInboxesOptions {\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  Favourite: ").Append(Favourite).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  InboxType: ").Append(InboxType).Append("\n");
            sb.Append("  InboxFunction: ").Append(InboxFunction).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchInboxesOptions" />
    /// </summary>
    public class SearchInboxesOptionsJsonConverter : JsonConverter<SearchInboxesOptions>
    {
        /// <summary>
        /// The format to use to serialize Since
        /// </summary>
        public static string SinceFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Before
        /// </summary>
        public static string BeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SearchInboxesOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchInboxesOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> pageIndex = default;
            Option<int?> pageSize = default;
            Option<SearchInboxesOptions.SortDirectionEnum?> sortDirection = default;
            Option<bool?> favourite = default;
            Option<string> search = default;
            Option<string> tag = default;
            Option<DateTime?> since = default;
            Option<DateTime?> before = default;
            Option<SearchInboxesOptions.InboxTypeEnum?> inboxType = default;
            Option<SearchInboxesOptions.InboxFunctionEnum?> inboxFunction = default;
            Option<Guid?> domainId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "pageIndex":
                            pageIndex = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pageSize":
                            pageSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sortDirection":
                            string sortDirectionRawValue = utf8JsonReader.GetString();
                            if (sortDirectionRawValue != null)
                                sortDirection = new Option<SearchInboxesOptions.SortDirectionEnum?>(SearchInboxesOptions.SortDirectionEnumFromStringOrDefault(sortDirectionRawValue));
                            break;
                        case "favourite":
                            favourite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "search":
                            search = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tag":
                            tag = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "since":
                            since = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "before":
                            before = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "inboxType":
                            string inboxTypeRawValue = utf8JsonReader.GetString();
                            if (inboxTypeRawValue != null)
                                inboxType = new Option<SearchInboxesOptions.InboxTypeEnum?>(SearchInboxesOptions.InboxTypeEnumFromStringOrDefault(inboxTypeRawValue));
                            break;
                        case "inboxFunction":
                            string inboxFunctionRawValue = utf8JsonReader.GetString();
                            if (inboxFunctionRawValue != null)
                                inboxFunction = new Option<SearchInboxesOptions.InboxFunctionEnum?>(SearchInboxesOptions.InboxFunctionEnumFromStringOrDefault(inboxFunctionRawValue));
                            break;
                        case "domainId":
                            domainId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new SearchInboxesOptions(pageIndex, pageSize, sortDirection, favourite, search, tag, since, before, inboxType, inboxFunction, domainId);
        }

        /// <summary>
        /// Serializes a <see cref="SearchInboxesOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchInboxesOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchInboxesOptions searchInboxesOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, searchInboxesOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SearchInboxesOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchInboxesOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchInboxesOptions searchInboxesOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchInboxesOptions.PageIndexOption.IsSet)
                if (searchInboxesOptions.PageIndexOption.Value != null)
                    writer.WriteNumber("pageIndex", searchInboxesOptions.PageIndexOption.Value.Value);
                else
                    writer.WriteNull("pageIndex");

            if (searchInboxesOptions.PageSizeOption.IsSet)
                if (searchInboxesOptions.PageSizeOption.Value != null)
                    writer.WriteNumber("pageSize", searchInboxesOptions.PageSizeOption.Value.Value);
                else
                    writer.WriteNull("pageSize");

            var sortDirectionRawValue = SearchInboxesOptions.SortDirectionEnumToJsonValue(searchInboxesOptions.SortDirectionOption.Value.Value);
            if (sortDirectionRawValue != null)
                writer.WriteString("sortDirection", sortDirectionRawValue);
            else
                writer.WriteNull("sortDirection");

            if (searchInboxesOptions.FavouriteOption.IsSet)
                if (searchInboxesOptions.FavouriteOption.Value != null)
                    writer.WriteBoolean("favourite", searchInboxesOptions.FavouriteOption.Value.Value);
                else
                    writer.WriteNull("favourite");

            if (searchInboxesOptions.SearchOption.IsSet)
                if (searchInboxesOptions.SearchOption.Value != null)
                    writer.WriteString("search", searchInboxesOptions.Search);
                else
                    writer.WriteNull("search");

            if (searchInboxesOptions.TagOption.IsSet)
                if (searchInboxesOptions.TagOption.Value != null)
                    writer.WriteString("tag", searchInboxesOptions.Tag);
                else
                    writer.WriteNull("tag");

            if (searchInboxesOptions.SinceOption.IsSet)
                if (searchInboxesOptions.SinceOption.Value != null)
                    writer.WriteString("since", searchInboxesOptions.SinceOption.Value.Value.ToString(SinceFormat));
                else
                    writer.WriteNull("since");

            if (searchInboxesOptions.BeforeOption.IsSet)
                if (searchInboxesOptions.BeforeOption.Value != null)
                    writer.WriteString("before", searchInboxesOptions.BeforeOption.Value.Value.ToString(BeforeFormat));
                else
                    writer.WriteNull("before");

            var inboxTypeRawValue = SearchInboxesOptions.InboxTypeEnumToJsonValue(searchInboxesOptions.InboxTypeOption.Value.Value);
            if (inboxTypeRawValue != null)
                writer.WriteString("inboxType", inboxTypeRawValue);
            else
                writer.WriteNull("inboxType");

            var inboxFunctionRawValue = SearchInboxesOptions.InboxFunctionEnumToJsonValue(searchInboxesOptions.InboxFunctionOption.Value.Value);
            if (inboxFunctionRawValue != null)
                writer.WriteString("inboxFunction", inboxFunctionRawValue);
            else
                writer.WriteNull("inboxFunction");

            if (searchInboxesOptions.DomainIdOption.IsSet)
                if (searchInboxesOptions.DomainIdOption.Value != null)
                    writer.WriteString("domainId", searchInboxesOptions.DomainIdOption.Value.Value);
                else
                    writer.WriteNull("domainId");
        }
    }
}
