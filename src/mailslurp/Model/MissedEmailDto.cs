// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Missed email
    /// </summary>
    public partial class MissedEmailDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MissedEmailDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="attachmentCount">attachmentCount</param>
        /// <param name="to">to</param>
        /// <param name="cc">cc</param>
        /// <param name="bcc">bcc</param>
        /// <param name="inboxIds">inboxIds</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="userId">userId</param>
        /// <param name="subject">subject</param>
        /// <param name="bodyExcerpt">bodyExcerpt</param>
        /// <param name="from">from</param>
        /// <param name="rawUrl">rawUrl</param>
        /// <param name="rawKey">rawKey</param>
        /// <param name="rawBucket">rawBucket</param>
        /// <param name="canRestore">canRestore</param>
        [JsonConstructor]
        public MissedEmailDto(Guid id, int attachmentCount, List<string> to, List<string> cc, List<string> bcc, List<Guid> inboxIds, DateTime createdAt, DateTime updatedAt, Option<Guid?> userId = default, Option<string> subject = default, Option<string> bodyExcerpt = default, Option<string> from = default, Option<string> rawUrl = default, Option<string> rawKey = default, Option<string> rawBucket = default, Option<bool?> canRestore = default)
        {
            Id = id;
            AttachmentCount = attachmentCount;
            To = to;
            Cc = cc;
            Bcc = bcc;
            InboxIds = inboxIds;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            UserIdOption = userId;
            SubjectOption = subject;
            BodyExcerptOption = bodyExcerpt;
            FromOption = from;
            RawUrlOption = rawUrl;
            RawKeyOption = rawKey;
            RawBucketOption = rawBucket;
            CanRestoreOption = canRestore;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentCount
        /// </summary>
        [JsonPropertyName("attachmentCount")]
        public int AttachmentCount { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [JsonPropertyName("to")]
        public List<string> To { get; set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [JsonPropertyName("cc")]
        public List<string> Cc { get; set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get; set; }

        /// <summary>
        /// Gets or Sets InboxIds
        /// </summary>
        [JsonPropertyName("inboxIds")]
        public List<Guid> InboxIds { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BodyExcerpt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyExcerptOption { get; private set; }

        /// <summary>
        /// Gets or Sets BodyExcerpt
        /// </summary>
        [JsonPropertyName("bodyExcerpt")]
        public string BodyExcerpt { get { return this.BodyExcerptOption; } set { this.BodyExcerptOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RawUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RawUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets RawUrl
        /// </summary>
        [JsonPropertyName("rawUrl")]
        public string RawUrl { get { return this.RawUrlOption; } set { this.RawUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RawKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RawKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets RawKey
        /// </summary>
        [JsonPropertyName("rawKey")]
        public string RawKey { get { return this.RawKeyOption; } set { this.RawKeyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RawBucket
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RawBucketOption { get; private set; }

        /// <summary>
        /// Gets or Sets RawBucket
        /// </summary>
        [JsonPropertyName("rawBucket")]
        public string RawBucket { get { return this.RawBucketOption; } set { this.RawBucketOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CanRestore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CanRestoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets CanRestore
        /// </summary>
        [JsonPropertyName("canRestore")]
        public bool? CanRestore { get { return this.CanRestoreOption; } set { this.CanRestoreOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MissedEmailDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttachmentCount: ").Append(AttachmentCount).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  InboxIds: ").Append(InboxIds).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  BodyExcerpt: ").Append(BodyExcerpt).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  RawUrl: ").Append(RawUrl).Append("\n");
            sb.Append("  RawKey: ").Append(RawKey).Append("\n");
            sb.Append("  RawBucket: ").Append(RawBucket).Append("\n");
            sb.Append("  CanRestore: ").Append(CanRestore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MissedEmailDto" />
    /// </summary>
    public class MissedEmailDtoJsonConverter : JsonConverter<MissedEmailDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="MissedEmailDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MissedEmailDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<int?> attachmentCount = default;
            Option<List<string>> to = default;
            Option<List<string>> cc = default;
            Option<List<string>> bcc = default;
            Option<List<Guid>> inboxIds = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<Guid?> userId = default;
            Option<string> subject = default;
            Option<string> bodyExcerpt = default;
            Option<string> from = default;
            Option<string> rawUrl = default;
            Option<string> rawKey = default;
            Option<string> rawBucket = default;
            Option<bool?> canRestore = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "attachmentCount":
                            attachmentCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "inboxIds":
                            inboxIds = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bodyExcerpt":
                            bodyExcerpt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rawUrl":
                            rawUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rawKey":
                            rawKey = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rawBucket":
                            rawBucket = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "canRestore":
                            canRestore = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class MissedEmailDto.", nameof(id));

            if (!attachmentCount.IsSet)
                throw new ArgumentException("Property is required for class MissedEmailDto.", nameof(attachmentCount));

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class MissedEmailDto.", nameof(to));

            if (!cc.IsSet)
                throw new ArgumentException("Property is required for class MissedEmailDto.", nameof(cc));

            if (!bcc.IsSet)
                throw new ArgumentException("Property is required for class MissedEmailDto.", nameof(bcc));

            if (!inboxIds.IsSet)
                throw new ArgumentException("Property is required for class MissedEmailDto.", nameof(inboxIds));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class MissedEmailDto.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class MissedEmailDto.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class MissedEmailDto.");

            if (attachmentCount.IsSet && attachmentCount.Value == null)
                throw new ArgumentNullException(nameof(attachmentCount), "Property is not nullable for class MissedEmailDto.");

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class MissedEmailDto.");

            if (cc.IsSet && cc.Value == null)
                throw new ArgumentNullException(nameof(cc), "Property is not nullable for class MissedEmailDto.");

            if (bcc.IsSet && bcc.Value == null)
                throw new ArgumentNullException(nameof(bcc), "Property is not nullable for class MissedEmailDto.");

            if (inboxIds.IsSet && inboxIds.Value == null)
                throw new ArgumentNullException(nameof(inboxIds), "Property is not nullable for class MissedEmailDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class MissedEmailDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class MissedEmailDto.");

            return new MissedEmailDto(id.Value.Value, attachmentCount.Value.Value, to.Value, cc.Value, bcc.Value, inboxIds.Value, createdAt.Value.Value, updatedAt.Value.Value, userId, subject, bodyExcerpt, from, rawUrl, rawKey, rawBucket, canRestore);
        }

        /// <summary>
        /// Serializes a <see cref="MissedEmailDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="missedEmailDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MissedEmailDto missedEmailDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, missedEmailDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MissedEmailDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="missedEmailDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MissedEmailDto missedEmailDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (missedEmailDto.To == null)
                throw new ArgumentNullException(nameof(missedEmailDto.To), "Property is required for class MissedEmailDto.");

            if (missedEmailDto.Cc == null)
                throw new ArgumentNullException(nameof(missedEmailDto.Cc), "Property is required for class MissedEmailDto.");

            if (missedEmailDto.Bcc == null)
                throw new ArgumentNullException(nameof(missedEmailDto.Bcc), "Property is required for class MissedEmailDto.");

            if (missedEmailDto.InboxIds == null)
                throw new ArgumentNullException(nameof(missedEmailDto.InboxIds), "Property is required for class MissedEmailDto.");

            writer.WriteString("id", missedEmailDto.Id);

            writer.WriteNumber("attachmentCount", missedEmailDto.AttachmentCount);

            writer.WritePropertyName("to");
            JsonSerializer.Serialize(writer, missedEmailDto.To, jsonSerializerOptions);
            writer.WritePropertyName("cc");
            JsonSerializer.Serialize(writer, missedEmailDto.Cc, jsonSerializerOptions);
            writer.WritePropertyName("bcc");
            JsonSerializer.Serialize(writer, missedEmailDto.Bcc, jsonSerializerOptions);
            writer.WritePropertyName("inboxIds");
            JsonSerializer.Serialize(writer, missedEmailDto.InboxIds, jsonSerializerOptions);
            writer.WriteString("createdAt", missedEmailDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", missedEmailDto.UpdatedAt.ToString(UpdatedAtFormat));

            if (missedEmailDto.UserIdOption.IsSet)
                if (missedEmailDto.UserIdOption.Value != null)
                    writer.WriteString("userId", missedEmailDto.UserIdOption.Value.Value);
                else
                    writer.WriteNull("userId");

            if (missedEmailDto.SubjectOption.IsSet)
                if (missedEmailDto.SubjectOption.Value != null)
                    writer.WriteString("subject", missedEmailDto.Subject);
                else
                    writer.WriteNull("subject");

            if (missedEmailDto.BodyExcerptOption.IsSet)
                if (missedEmailDto.BodyExcerptOption.Value != null)
                    writer.WriteString("bodyExcerpt", missedEmailDto.BodyExcerpt);
                else
                    writer.WriteNull("bodyExcerpt");

            if (missedEmailDto.FromOption.IsSet)
                if (missedEmailDto.FromOption.Value != null)
                    writer.WriteString("from", missedEmailDto.From);
                else
                    writer.WriteNull("from");

            if (missedEmailDto.RawUrlOption.IsSet)
                if (missedEmailDto.RawUrlOption.Value != null)
                    writer.WriteString("rawUrl", missedEmailDto.RawUrl);
                else
                    writer.WriteNull("rawUrl");

            if (missedEmailDto.RawKeyOption.IsSet)
                if (missedEmailDto.RawKeyOption.Value != null)
                    writer.WriteString("rawKey", missedEmailDto.RawKey);
                else
                    writer.WriteNull("rawKey");

            if (missedEmailDto.RawBucketOption.IsSet)
                if (missedEmailDto.RawBucketOption.Value != null)
                    writer.WriteString("rawBucket", missedEmailDto.RawBucket);
                else
                    writer.WriteNull("rawBucket");

            if (missedEmailDto.CanRestoreOption.IsSet)
                if (missedEmailDto.CanRestoreOption.Value != null)
                    writer.WriteBoolean("canRestore", missedEmailDto.CanRestoreOption.Value.Value);
                else
                    writer.WriteNull("canRestore");
        }
    }
}
