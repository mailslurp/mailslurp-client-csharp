// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ReputationItemProjection
    /// </summary>
    public partial class ReputationItemProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReputationItemProjection" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="reputationType">reputationType</param>
        /// <param name="id">id</param>
        /// <param name="severity">severity</param>
        /// <param name="recipient">recipient</param>
        /// <param name="source">source</param>
        [JsonConstructor]
        public ReputationItemProjection(DateTime createdAt, ReputationTypeEnum reputationType, Guid id, SeverityEnum severity, Option<string> recipient = default, Option<string> source = default)
        {
            CreatedAt = createdAt;
            ReputationType = reputationType;
            Id = id;
            Severity = severity;
            RecipientOption = recipient;
            SourceOption = source;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines ReputationType
        /// </summary>
        public enum ReputationTypeEnum
        {
            /// <summary>
            /// Enum COMPLAINT for value: COMPLAINT
            /// </summary>
            COMPLAINT = 1,

            /// <summary>
            /// Enum BOUNCE for value: BOUNCE
            /// </summary>
            BOUNCE = 2
        }

        /// <summary>
        /// Returns a <see cref="ReputationTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ReputationTypeEnum ReputationTypeEnumFromString(string value)
        {
            if (value.Equals("COMPLAINT"))
                return ReputationTypeEnum.COMPLAINT;

            if (value.Equals("BOUNCE"))
                return ReputationTypeEnum.BOUNCE;

            throw new NotImplementedException($"Could not convert value to type ReputationTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ReputationTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReputationTypeEnum? ReputationTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("COMPLAINT"))
                return ReputationTypeEnum.COMPLAINT;

            if (value.Equals("BOUNCE"))
                return ReputationTypeEnum.BOUNCE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReputationTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ReputationTypeEnumToJsonValue(ReputationTypeEnum value)
        {
            if (value == ReputationTypeEnum.COMPLAINT)
                return "COMPLAINT";

            if (value == ReputationTypeEnum.BOUNCE)
                return "BOUNCE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets ReputationType
        /// </summary>
        [JsonPropertyName("reputationType")]
        public ReputationTypeEnum ReputationType { get; set; }

        /// <summary>
        /// Defines Severity
        /// </summary>
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum INFO for value: INFO
            /// </summary>
            INFO = 1,

            /// <summary>
            /// Enum WARNING for value: WARNING
            /// </summary>
            WARNING = 2,

            /// <summary>
            /// Enum DANGER for value: DANGER
            /// </summary>
            DANGER = 3
        }

        /// <summary>
        /// Returns a <see cref="SeverityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SeverityEnum SeverityEnumFromString(string value)
        {
            if (value.Equals("INFO"))
                return SeverityEnum.INFO;

            if (value.Equals("WARNING"))
                return SeverityEnum.WARNING;

            if (value.Equals("DANGER"))
                return SeverityEnum.DANGER;

            throw new NotImplementedException($"Could not convert value to type SeverityEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SeverityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SeverityEnum? SeverityEnumFromStringOrDefault(string value)
        {
            if (value.Equals("INFO"))
                return SeverityEnum.INFO;

            if (value.Equals("WARNING"))
                return SeverityEnum.WARNING;

            if (value.Equals("DANGER"))
                return SeverityEnum.DANGER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SeverityEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SeverityEnumToJsonValue(SeverityEnum value)
        {
            if (value == SeverityEnum.INFO)
                return "INFO";

            if (value == SeverityEnum.WARNING)
                return "WARNING";

            if (value == SeverityEnum.DANGER)
                return "DANGER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [JsonPropertyName("severity")]
        public SeverityEnum Severity { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of Recipient
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecipientOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [JsonPropertyName("recipient")]
        public string Recipient { get { return this.RecipientOption; } set { this.RecipientOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Source
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [JsonPropertyName("source")]
        public string Source { get { return this.SourceOption; } set { this.SourceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReputationItemProjection {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ReputationType: ").Append(ReputationType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReputationItemProjection" />
    /// </summary>
    public class ReputationItemProjectionJsonConverter : JsonConverter<ReputationItemProjection>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ReputationItemProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReputationItemProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<ReputationItemProjection.ReputationTypeEnum?> reputationType = default;
            Option<Guid?> id = default;
            Option<ReputationItemProjection.SeverityEnum?> severity = default;
            Option<string> recipient = default;
            Option<string> source = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "reputationType":
                            string reputationTypeRawValue = utf8JsonReader.GetString();
                            if (reputationTypeRawValue != null)
                                reputationType = new Option<ReputationItemProjection.ReputationTypeEnum?>(ReputationItemProjection.ReputationTypeEnumFromStringOrDefault(reputationTypeRawValue));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "severity":
                            string severityRawValue = utf8JsonReader.GetString();
                            if (severityRawValue != null)
                                severity = new Option<ReputationItemProjection.SeverityEnum?>(ReputationItemProjection.SeverityEnumFromStringOrDefault(severityRawValue));
                            break;
                        case "recipient":
                            recipient = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "source":
                            source = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class ReputationItemProjection.", nameof(createdAt));

            if (!reputationType.IsSet)
                throw new ArgumentException("Property is required for class ReputationItemProjection.", nameof(reputationType));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ReputationItemProjection.", nameof(id));

            if (!severity.IsSet)
                throw new ArgumentException("Property is required for class ReputationItemProjection.", nameof(severity));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ReputationItemProjection.");

            if (reputationType.IsSet && reputationType.Value == null)
                throw new ArgumentNullException(nameof(reputationType), "Property is not nullable for class ReputationItemProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ReputationItemProjection.");

            if (severity.IsSet && severity.Value == null)
                throw new ArgumentNullException(nameof(severity), "Property is not nullable for class ReputationItemProjection.");

            if (recipient.IsSet && recipient.Value == null)
                throw new ArgumentNullException(nameof(recipient), "Property is not nullable for class ReputationItemProjection.");

            if (source.IsSet && source.Value == null)
                throw new ArgumentNullException(nameof(source), "Property is not nullable for class ReputationItemProjection.");

            return new ReputationItemProjection(createdAt.Value.Value, reputationType.Value.Value, id.Value.Value, severity.Value.Value, recipient, source);
        }

        /// <summary>
        /// Serializes a <see cref="ReputationItemProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reputationItemProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReputationItemProjection reputationItemProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, reputationItemProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReputationItemProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reputationItemProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReputationItemProjection reputationItemProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (reputationItemProjection.RecipientOption.IsSet && reputationItemProjection.Recipient == null)
                throw new ArgumentNullException(nameof(reputationItemProjection.Recipient), "Property is required for class ReputationItemProjection.");

            if (reputationItemProjection.SourceOption.IsSet && reputationItemProjection.Source == null)
                throw new ArgumentNullException(nameof(reputationItemProjection.Source), "Property is required for class ReputationItemProjection.");

            writer.WriteString("createdAt", reputationItemProjection.CreatedAt.ToString(CreatedAtFormat));

            var reputationTypeRawValue = ReputationItemProjection.ReputationTypeEnumToJsonValue(reputationItemProjection.ReputationType);
            writer.WriteString("reputationType", reputationTypeRawValue);
            writer.WriteString("id", reputationItemProjection.Id);

            var severityRawValue = ReputationItemProjection.SeverityEnumToJsonValue(reputationItemProjection.Severity);
            writer.WriteString("severity", severityRawValue);
            if (reputationItemProjection.RecipientOption.IsSet)
                writer.WriteString("recipient", reputationItemProjection.Recipient);

            if (reputationItemProjection.SourceOption.IsSet)
                writer.WriteString("source", reputationItemProjection.Source);
        }
    }
}
