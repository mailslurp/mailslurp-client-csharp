// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Bounced recipient
    /// </summary>
    public partial class BouncedRecipientDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BouncedRecipientDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="recipient">recipient</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="userId">userId</param>
        /// <param name="sentEmailId">sentEmailId</param>
        /// <param name="diagnosticCode">diagnosticCode</param>
        /// <param name="action">action</param>
        /// <param name="bounceType">bounceType</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public BouncedRecipientDto(Guid id, string recipient, DateTime createdAt, Option<Guid?> userId = default, Option<Guid?> sentEmailId = default, Option<string> diagnosticCode = default, Option<string> action = default, Option<string> bounceType = default, Option<string> status = default)
        {
            Id = id;
            Recipient = recipient;
            CreatedAt = createdAt;
            UserIdOption = userId;
            SentEmailIdOption = sentEmailId;
            DiagnosticCodeOption = diagnosticCode;
            ActionOption = action;
            BounceTypeOption = bounceType;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [JsonPropertyName("recipient")]
        public string Recipient { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of SentEmailId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> SentEmailIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SentEmailId
        /// </summary>
        [JsonPropertyName("sentEmailId")]
        public Guid? SentEmailId { get { return this.SentEmailIdOption; } set { this.SentEmailIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of DiagnosticCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DiagnosticCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DiagnosticCode
        /// </summary>
        [JsonPropertyName("diagnosticCode")]
        public string DiagnosticCode { get { return this.DiagnosticCodeOption; } set { this.DiagnosticCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Action
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ActionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonPropertyName("action")]
        public string Action { get { return this.ActionOption; } set { this.ActionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BounceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BounceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BounceType
        /// </summary>
        [JsonPropertyName("bounceType")]
        public string BounceType { get { return this.BounceTypeOption; } set { this.BounceTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string Status { get { return this.StatusOption; } set { this.StatusOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BouncedRecipientDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  SentEmailId: ").Append(SentEmailId).Append("\n");
            sb.Append("  DiagnosticCode: ").Append(DiagnosticCode).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  BounceType: ").Append(BounceType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BouncedRecipientDto" />
    /// </summary>
    public class BouncedRecipientDtoJsonConverter : JsonConverter<BouncedRecipientDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BouncedRecipientDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BouncedRecipientDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> recipient = default;
            Option<DateTime?> createdAt = default;
            Option<Guid?> userId = default;
            Option<Guid?> sentEmailId = default;
            Option<string> diagnosticCode = default;
            Option<string> action = default;
            Option<string> bounceType = default;
            Option<string> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "recipient":
                            recipient = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sentEmailId":
                            sentEmailId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "diagnosticCode":
                            diagnosticCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "action":
                            action = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bounceType":
                            bounceType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            status = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class BouncedRecipientDto.", nameof(id));

            if (!recipient.IsSet)
                throw new ArgumentException("Property is required for class BouncedRecipientDto.", nameof(recipient));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class BouncedRecipientDto.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BouncedRecipientDto.");

            if (recipient.IsSet && recipient.Value == null)
                throw new ArgumentNullException(nameof(recipient), "Property is not nullable for class BouncedRecipientDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class BouncedRecipientDto.");

            return new BouncedRecipientDto(id.Value.Value, recipient.Value, createdAt.Value.Value, userId, sentEmailId, diagnosticCode, action, bounceType, status);
        }

        /// <summary>
        /// Serializes a <see cref="BouncedRecipientDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bouncedRecipientDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BouncedRecipientDto bouncedRecipientDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bouncedRecipientDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BouncedRecipientDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bouncedRecipientDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BouncedRecipientDto bouncedRecipientDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bouncedRecipientDto.Recipient == null)
                throw new ArgumentNullException(nameof(bouncedRecipientDto.Recipient), "Property is required for class BouncedRecipientDto.");

            writer.WriteString("id", bouncedRecipientDto.Id);

            writer.WriteString("recipient", bouncedRecipientDto.Recipient);

            writer.WriteString("createdAt", bouncedRecipientDto.CreatedAt.ToString(CreatedAtFormat));

            if (bouncedRecipientDto.UserIdOption.IsSet)
                if (bouncedRecipientDto.UserIdOption.Value != null)
                    writer.WriteString("userId", bouncedRecipientDto.UserIdOption.Value.Value);
                else
                    writer.WriteNull("userId");

            if (bouncedRecipientDto.SentEmailIdOption.IsSet)
                if (bouncedRecipientDto.SentEmailIdOption.Value != null)
                    writer.WriteString("sentEmailId", bouncedRecipientDto.SentEmailIdOption.Value.Value);
                else
                    writer.WriteNull("sentEmailId");

            if (bouncedRecipientDto.DiagnosticCodeOption.IsSet)
                if (bouncedRecipientDto.DiagnosticCodeOption.Value != null)
                    writer.WriteString("diagnosticCode", bouncedRecipientDto.DiagnosticCode);
                else
                    writer.WriteNull("diagnosticCode");

            if (bouncedRecipientDto.ActionOption.IsSet)
                if (bouncedRecipientDto.ActionOption.Value != null)
                    writer.WriteString("action", bouncedRecipientDto.Action);
                else
                    writer.WriteNull("action");

            if (bouncedRecipientDto.BounceTypeOption.IsSet)
                if (bouncedRecipientDto.BounceTypeOption.Value != null)
                    writer.WriteString("bounceType", bouncedRecipientDto.BounceType);
                else
                    writer.WriteNull("bounceType");

            if (bouncedRecipientDto.StatusOption.IsSet)
                if (bouncedRecipientDto.StatusOption.Value != null)
                    writer.WriteString("status", bouncedRecipientDto.Status);
                else
                    writer.WriteNull("status");
        }
    }
}
