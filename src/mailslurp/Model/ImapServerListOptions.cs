// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ImapServerListOptions
    /// </summary>
    public partial class ImapServerListOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapServerListOptions" /> class.
        /// </summary>
        /// <param name="uidSet">uidSet</param>
        /// <param name="seqSet">seqSet</param>
        [JsonConstructor]
        public ImapServerListOptions(Option<string> uidSet = default, Option<string> seqSet = default)
        {
            UidSetOption = uidSet;
            SeqSetOption = seqSet;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of UidSet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UidSetOption { get; private set; }

        /// <summary>
        /// Gets or Sets UidSet
        /// </summary>
        [JsonPropertyName("uidSet")]
        public string UidSet { get { return this.UidSetOption; } set { this.UidSetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SeqSet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SeqSetOption { get; private set; }

        /// <summary>
        /// Gets or Sets SeqSet
        /// </summary>
        [JsonPropertyName("seqSet")]
        public string SeqSet { get { return this.SeqSetOption; } set { this.SeqSetOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImapServerListOptions {\n");
            sb.Append("  UidSet: ").Append(UidSet).Append("\n");
            sb.Append("  SeqSet: ").Append(SeqSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImapServerListOptions" />
    /// </summary>
    public class ImapServerListOptionsJsonConverter : JsonConverter<ImapServerListOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImapServerListOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImapServerListOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> uidSet = default;
            Option<string> seqSet = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "uidSet":
                            uidSet = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "seqSet":
                            seqSet = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ImapServerListOptions(uidSet, seqSet);
        }

        /// <summary>
        /// Serializes a <see cref="ImapServerListOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapServerListOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImapServerListOptions imapServerListOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imapServerListOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImapServerListOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapServerListOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImapServerListOptions imapServerListOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imapServerListOptions.UidSetOption.IsSet)
                if (imapServerListOptions.UidSetOption.Value != null)
                    writer.WriteString("uidSet", imapServerListOptions.UidSet);
                else
                    writer.WriteNull("uidSet");

            if (imapServerListOptions.SeqSetOption.IsSet)
                if (imapServerListOptions.SeqSetOption.Value != null)
                    writer.WriteString("seqSet", imapServerListOptions.SeqSet);
                else
                    writer.WriteNull("seqSet");
        }
    }
}
