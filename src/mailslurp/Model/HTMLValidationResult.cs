/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// HTML Validation Results
    /// </summary>
    [DataContract(Name = "HTMLValidationResult")]
    public partial class HTMLValidationResult : IEquatable<HTMLValidationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HTMLValidationResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HTMLValidationResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HTMLValidationResult" /> class.
        /// </summary>
        /// <param name="isValid">Is HTML validation result valid (required).</param>
        /// <param name="infos">Optional infos resulting from HTML validation (required).</param>
        /// <param name="errors">Optional errors resulting from HTML validation (required).</param>
        /// <param name="warnings">Optional warnings resulting from HTML validation (required).</param>
        public HTMLValidationResult(bool isValid = default(bool), List<ValidationMessage> infos = default(List<ValidationMessage>), List<ValidationMessage> errors = default(List<ValidationMessage>), List<ValidationMessage> warnings = default(List<ValidationMessage>))
        {
            this.IsValid = isValid;
            // to ensure "infos" is required (not null)
            if (infos == null)
            {
                throw new ArgumentNullException("infos is a required property for HTMLValidationResult and cannot be null");
            }
            this.Infos = infos;
            // to ensure "errors" is required (not null)
            if (errors == null)
            {
                throw new ArgumentNullException("errors is a required property for HTMLValidationResult and cannot be null");
            }
            this.Errors = errors;
            // to ensure "warnings" is required (not null)
            if (warnings == null)
            {
                throw new ArgumentNullException("warnings is a required property for HTMLValidationResult and cannot be null");
            }
            this.Warnings = warnings;
        }

        /// <summary>
        /// Is HTML validation result valid
        /// </summary>
        /// <value>Is HTML validation result valid</value>
        [DataMember(Name = "isValid", IsRequired = true, EmitDefaultValue = true)]
        public bool IsValid { get; set; }

        /// <summary>
        /// Optional infos resulting from HTML validation
        /// </summary>
        /// <value>Optional infos resulting from HTML validation</value>
        [DataMember(Name = "infos", IsRequired = true, EmitDefaultValue = true)]
        public List<ValidationMessage> Infos { get; set; }

        /// <summary>
        /// Optional errors resulting from HTML validation
        /// </summary>
        /// <value>Optional errors resulting from HTML validation</value>
        [DataMember(Name = "errors", IsRequired = true, EmitDefaultValue = true)]
        public List<ValidationMessage> Errors { get; set; }

        /// <summary>
        /// Optional warnings resulting from HTML validation
        /// </summary>
        /// <value>Optional warnings resulting from HTML validation</value>
        [DataMember(Name = "warnings", IsRequired = true, EmitDefaultValue = true)]
        public List<ValidationMessage> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HTMLValidationResult {\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Infos: ").Append(Infos).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HTMLValidationResult);
        }

        /// <summary>
        /// Returns true if HTMLValidationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of HTMLValidationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HTMLValidationResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsValid == input.IsValid ||
                    this.IsValid.Equals(input.IsValid)
                ) && 
                (
                    this.Infos == input.Infos ||
                    this.Infos != null &&
                    input.Infos != null &&
                    this.Infos.SequenceEqual(input.Infos)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsValid.GetHashCode();
                if (this.Infos != null)
                {
                    hashCode = (hashCode * 59) + this.Infos.GetHashCode();
                }
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                if (this.Warnings != null)
                {
                    hashCode = (hashCode * 59) + this.Warnings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
