// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// HTML Validation Results
    /// </summary>
    public partial class HTMLValidationResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HTMLValidationResult" /> class.
        /// </summary>
        /// <param name="isValid">Is HTML validation result valid</param>
        /// <param name="infos">Optional infos resulting from HTML validation</param>
        /// <param name="errors">Optional errors resulting from HTML validation</param>
        /// <param name="warnings">Optional warnings resulting from HTML validation</param>
        [JsonConstructor]
        public HTMLValidationResult(bool isValid, List<ValidationMessage> infos, List<ValidationMessage> errors, List<ValidationMessage> warnings)
        {
            IsValid = isValid;
            Infos = infos;
            Errors = errors;
            Warnings = warnings;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Is HTML validation result valid
        /// </summary>
        /// <value>Is HTML validation result valid</value>
        [JsonPropertyName("isValid")]
        public bool IsValid { get; set; }

        /// <summary>
        /// Optional infos resulting from HTML validation
        /// </summary>
        /// <value>Optional infos resulting from HTML validation</value>
        [JsonPropertyName("infos")]
        public List<ValidationMessage> Infos { get; set; }

        /// <summary>
        /// Optional errors resulting from HTML validation
        /// </summary>
        /// <value>Optional errors resulting from HTML validation</value>
        [JsonPropertyName("errors")]
        public List<ValidationMessage> Errors { get; set; }

        /// <summary>
        /// Optional warnings resulting from HTML validation
        /// </summary>
        /// <value>Optional warnings resulting from HTML validation</value>
        [JsonPropertyName("warnings")]
        public List<ValidationMessage> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HTMLValidationResult {\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Infos: ").Append(Infos).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HTMLValidationResult" />
    /// </summary>
    public class HTMLValidationResultJsonConverter : JsonConverter<HTMLValidationResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="HTMLValidationResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HTMLValidationResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isValid = default;
            Option<List<ValidationMessage>> infos = default;
            Option<List<ValidationMessage>> errors = default;
            Option<List<ValidationMessage>> warnings = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "isValid":
                            isValid = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "infos":
                            infos = new Option<List<ValidationMessage>>(JsonSerializer.Deserialize<List<ValidationMessage>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "errors":
                            errors = new Option<List<ValidationMessage>>(JsonSerializer.Deserialize<List<ValidationMessage>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "warnings":
                            warnings = new Option<List<ValidationMessage>>(JsonSerializer.Deserialize<List<ValidationMessage>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!isValid.IsSet)
                throw new ArgumentException("Property is required for class HTMLValidationResult.", nameof(isValid));

            if (!infos.IsSet)
                throw new ArgumentException("Property is required for class HTMLValidationResult.", nameof(infos));

            if (!errors.IsSet)
                throw new ArgumentException("Property is required for class HTMLValidationResult.", nameof(errors));

            if (!warnings.IsSet)
                throw new ArgumentException("Property is required for class HTMLValidationResult.", nameof(warnings));

            if (isValid.IsSet && isValid.Value == null)
                throw new ArgumentNullException(nameof(isValid), "Property is not nullable for class HTMLValidationResult.");

            if (infos.IsSet && infos.Value == null)
                throw new ArgumentNullException(nameof(infos), "Property is not nullable for class HTMLValidationResult.");

            if (errors.IsSet && errors.Value == null)
                throw new ArgumentNullException(nameof(errors), "Property is not nullable for class HTMLValidationResult.");

            if (warnings.IsSet && warnings.Value == null)
                throw new ArgumentNullException(nameof(warnings), "Property is not nullable for class HTMLValidationResult.");

            return new HTMLValidationResult(isValid.Value.Value, infos.Value, errors.Value, warnings.Value);
        }

        /// <summary>
        /// Serializes a <see cref="HTMLValidationResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hTMLValidationResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HTMLValidationResult hTMLValidationResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, hTMLValidationResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HTMLValidationResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hTMLValidationResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HTMLValidationResult hTMLValidationResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (hTMLValidationResult.Infos == null)
                throw new ArgumentNullException(nameof(hTMLValidationResult.Infos), "Property is required for class HTMLValidationResult.");

            if (hTMLValidationResult.Errors == null)
                throw new ArgumentNullException(nameof(hTMLValidationResult.Errors), "Property is required for class HTMLValidationResult.");

            if (hTMLValidationResult.Warnings == null)
                throw new ArgumentNullException(nameof(hTMLValidationResult.Warnings), "Property is required for class HTMLValidationResult.");

            writer.WriteBoolean("isValid", hTMLValidationResult.IsValid);

            writer.WritePropertyName("infos");
            JsonSerializer.Serialize(writer, hTMLValidationResult.Infos, jsonSerializerOptions);
            writer.WritePropertyName("errors");
            JsonSerializer.Serialize(writer, hTMLValidationResult.Errors, jsonSerializerOptions);
            writer.WritePropertyName("warnings");
            JsonSerializer.Serialize(writer, hTMLValidationResult.Warnings, jsonSerializerOptions);
        }
    }
}
