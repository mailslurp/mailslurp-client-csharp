// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// CreatePortalUserOptions
    /// </summary>
    public partial class CreatePortalUserOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePortalUserOptions" /> class.
        /// </summary>
        /// <param name="password">password</param>
        /// <param name="name">name</param>
        /// <param name="username">username</param>
        /// <param name="skipInboxCreation">skipInboxCreation</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createInboxOptions">createInboxOptions</param>
        [JsonConstructor]
        public CreatePortalUserOptions(Option<string> password = default, Option<string> name = default, Option<string> username = default, Option<bool?> skipInboxCreation = default, Option<Guid?> inboxId = default, Option<CreateInboxDto> createInboxOptions = default)
        {
            PasswordOption = password;
            NameOption = name;
            UsernameOption = username;
            SkipInboxCreationOption = skipInboxCreation;
            InboxIdOption = inboxId;
            CreateInboxOptionsOption = createInboxOptions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Password
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string Password { get { return this.PasswordOption; } set { this.PasswordOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [JsonPropertyName("username")]
        public string Username { get { return this.UsernameOption; } set { this.UsernameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SkipInboxCreation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SkipInboxCreationOption { get; private set; }

        /// <summary>
        /// Gets or Sets SkipInboxCreation
        /// </summary>
        [JsonPropertyName("skipInboxCreation")]
        public bool? SkipInboxCreation { get { return this.SkipInboxCreationOption; } set { this.SkipInboxCreationOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of CreateInboxOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateInboxDto> CreateInboxOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateInboxOptions
        /// </summary>
        [JsonPropertyName("createInboxOptions")]
        public CreateInboxDto CreateInboxOptions { get { return this.CreateInboxOptionsOption; } set { this.CreateInboxOptionsOption = new Option<CreateInboxDto>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePortalUserOptions {\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  SkipInboxCreation: ").Append(SkipInboxCreation).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  CreateInboxOptions: ").Append(CreateInboxOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreatePortalUserOptions" />
    /// </summary>
    public class CreatePortalUserOptionsJsonConverter : JsonConverter<CreatePortalUserOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreatePortalUserOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreatePortalUserOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> password = default;
            Option<string> name = default;
            Option<string> username = default;
            Option<bool?> skipInboxCreation = default;
            Option<Guid?> inboxId = default;
            Option<CreateInboxDto> createInboxOptions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "password":
                            password = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "username":
                            username = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "skipInboxCreation":
                            skipInboxCreation = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createInboxOptions":
                            createInboxOptions = new Option<CreateInboxDto>(JsonSerializer.Deserialize<CreateInboxDto>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class CreatePortalUserOptions.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreatePortalUserOptions.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class CreatePortalUserOptions.");

            if (skipInboxCreation.IsSet && skipInboxCreation.Value == null)
                throw new ArgumentNullException(nameof(skipInboxCreation), "Property is not nullable for class CreatePortalUserOptions.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class CreatePortalUserOptions.");

            if (createInboxOptions.IsSet && createInboxOptions.Value == null)
                throw new ArgumentNullException(nameof(createInboxOptions), "Property is not nullable for class CreatePortalUserOptions.");

            return new CreatePortalUserOptions(password, name, username, skipInboxCreation, inboxId, createInboxOptions);
        }

        /// <summary>
        /// Serializes a <see cref="CreatePortalUserOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreatePortalUserOptions createPortalUserOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createPortalUserOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreatePortalUserOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreatePortalUserOptions createPortalUserOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createPortalUserOptions.PasswordOption.IsSet && createPortalUserOptions.Password == null)
                throw new ArgumentNullException(nameof(createPortalUserOptions.Password), "Property is required for class CreatePortalUserOptions.");

            if (createPortalUserOptions.NameOption.IsSet && createPortalUserOptions.Name == null)
                throw new ArgumentNullException(nameof(createPortalUserOptions.Name), "Property is required for class CreatePortalUserOptions.");

            if (createPortalUserOptions.UsernameOption.IsSet && createPortalUserOptions.Username == null)
                throw new ArgumentNullException(nameof(createPortalUserOptions.Username), "Property is required for class CreatePortalUserOptions.");

            if (createPortalUserOptions.CreateInboxOptionsOption.IsSet && createPortalUserOptions.CreateInboxOptions == null)
                throw new ArgumentNullException(nameof(createPortalUserOptions.CreateInboxOptions), "Property is required for class CreatePortalUserOptions.");

            if (createPortalUserOptions.PasswordOption.IsSet)
                writer.WriteString("password", createPortalUserOptions.Password);

            if (createPortalUserOptions.NameOption.IsSet)
                writer.WriteString("name", createPortalUserOptions.Name);

            if (createPortalUserOptions.UsernameOption.IsSet)
                writer.WriteString("username", createPortalUserOptions.Username);

            if (createPortalUserOptions.SkipInboxCreationOption.IsSet)
                writer.WriteBoolean("skipInboxCreation", createPortalUserOptions.SkipInboxCreationOption.Value.Value);

            if (createPortalUserOptions.InboxIdOption.IsSet)
                writer.WriteString("inboxId", createPortalUserOptions.InboxIdOption.Value.Value);

            if (createPortalUserOptions.CreateInboxOptionsOption.IsSet)
            {
                writer.WritePropertyName("createInboxOptions");
                JsonSerializer.Serialize(writer, createPortalUserOptions.CreateInboxOptions, jsonSerializerOptions);
            }
        }
    }
}
