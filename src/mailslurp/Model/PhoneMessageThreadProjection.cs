/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// PhoneMessageThreadProjection
    /// </summary>
    [DataContract(Name = "PhoneMessageThreadProjection")]
    public partial class PhoneMessageThreadProjection : IValidatableObject
    {
        /// <summary>
        /// Defines LastMessageDirection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LastMessageDirectionEnum
        {
            /// <summary>
            /// Enum OUTBOUND for value: OUTBOUND
            /// </summary>
            [EnumMember(Value = "OUTBOUND")]
            OUTBOUND = 1,

            /// <summary>
            /// Enum INBOUND for value: INBOUND
            /// </summary>
            [EnumMember(Value = "INBOUND")]
            INBOUND = 2
        }


        /// <summary>
        /// Gets or Sets LastMessageDirection
        /// </summary>
        [DataMember(Name = "lastMessageDirection", IsRequired = true, EmitDefaultValue = true)]
        public LastMessageDirectionEnum LastMessageDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneMessageThreadProjection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhoneMessageThreadProjection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneMessageThreadProjection" /> class.
        /// </summary>
        /// <param name="lastBody">lastBody (required).</param>
        /// <param name="phoneNumber">phoneNumber (required).</param>
        /// <param name="phoneNumberId">phoneNumberId (required).</param>
        /// <param name="otherPhoneNumber">otherPhoneNumber (required).</param>
        /// <param name="lastMessageDirection">lastMessageDirection (required).</param>
        /// <param name="lastCreated">lastCreated (required).</param>
        public PhoneMessageThreadProjection(string lastBody = default, string phoneNumber = default, Guid phoneNumberId = default, string otherPhoneNumber = default, LastMessageDirectionEnum lastMessageDirection = default, DateTime lastCreated = default)
        {
            // to ensure "lastBody" is required (not null)
            if (lastBody == null)
            {
                throw new ArgumentNullException("lastBody is a required property for PhoneMessageThreadProjection and cannot be null");
            }
            this.LastBody = lastBody;
            // to ensure "phoneNumber" is required (not null)
            if (phoneNumber == null)
            {
                throw new ArgumentNullException("phoneNumber is a required property for PhoneMessageThreadProjection and cannot be null");
            }
            this.PhoneNumber = phoneNumber;
            this.PhoneNumberId = phoneNumberId;
            // to ensure "otherPhoneNumber" is required (not null)
            if (otherPhoneNumber == null)
            {
                throw new ArgumentNullException("otherPhoneNumber is a required property for PhoneMessageThreadProjection and cannot be null");
            }
            this.OtherPhoneNumber = otherPhoneNumber;
            this.LastMessageDirection = lastMessageDirection;
            this.LastCreated = lastCreated;
        }

        /// <summary>
        /// Gets or Sets LastBody
        /// </summary>
        [DataMember(Name = "lastBody", IsRequired = true, EmitDefaultValue = true)]
        public string LastBody { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", IsRequired = true, EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberId
        /// </summary>
        [DataMember(Name = "phoneNumberId", IsRequired = true, EmitDefaultValue = true)]
        public Guid PhoneNumberId { get; set; }

        /// <summary>
        /// Gets or Sets OtherPhoneNumber
        /// </summary>
        [DataMember(Name = "otherPhoneNumber", IsRequired = true, EmitDefaultValue = true)]
        public string OtherPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets LastCreated
        /// </summary>
        [DataMember(Name = "lastCreated", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastCreated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhoneMessageThreadProjection {\n");
            sb.Append("  LastBody: ").Append(LastBody).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  OtherPhoneNumber: ").Append(OtherPhoneNumber).Append("\n");
            sb.Append("  LastMessageDirection: ").Append(LastMessageDirection).Append("\n");
            sb.Append("  LastCreated: ").Append(LastCreated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
