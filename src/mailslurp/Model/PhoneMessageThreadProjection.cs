// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// PhoneMessageThreadProjection
    /// </summary>
    public partial class PhoneMessageThreadProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneMessageThreadProjection" /> class.
        /// </summary>
        /// <param name="phoneNumber">phoneNumber</param>
        /// <param name="phoneNumberId">phoneNumberId</param>
        /// <param name="otherPhoneNumber">otherPhoneNumber</param>
        /// <param name="lastMessageDirection">lastMessageDirection</param>
        /// <param name="lastBody">lastBody</param>
        /// <param name="lastCreated">lastCreated</param>
        [JsonConstructor]
        public PhoneMessageThreadProjection(string phoneNumber, Guid phoneNumberId, string otherPhoneNumber, LastMessageDirectionEnum lastMessageDirection, string lastBody, DateTime lastCreated)
        {
            PhoneNumber = phoneNumber;
            PhoneNumberId = phoneNumberId;
            OtherPhoneNumber = otherPhoneNumber;
            LastMessageDirection = lastMessageDirection;
            LastBody = lastBody;
            LastCreated = lastCreated;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines LastMessageDirection
        /// </summary>
        public enum LastMessageDirectionEnum
        {
            /// <summary>
            /// Enum OUTBOUND for value: OUTBOUND
            /// </summary>
            OUTBOUND = 1,

            /// <summary>
            /// Enum INBOUND for value: INBOUND
            /// </summary>
            INBOUND = 2
        }

        /// <summary>
        /// Returns a <see cref="LastMessageDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LastMessageDirectionEnum LastMessageDirectionEnumFromString(string value)
        {
            if (value.Equals("OUTBOUND"))
                return LastMessageDirectionEnum.OUTBOUND;

            if (value.Equals("INBOUND"))
                return LastMessageDirectionEnum.INBOUND;

            throw new NotImplementedException($"Could not convert value to type LastMessageDirectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LastMessageDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LastMessageDirectionEnum? LastMessageDirectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("OUTBOUND"))
                return LastMessageDirectionEnum.OUTBOUND;

            if (value.Equals("INBOUND"))
                return LastMessageDirectionEnum.INBOUND;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LastMessageDirectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string LastMessageDirectionEnumToJsonValue(LastMessageDirectionEnum value)
        {
            if (value == LastMessageDirectionEnum.OUTBOUND)
                return "OUTBOUND";

            if (value == LastMessageDirectionEnum.INBOUND)
                return "INBOUND";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets LastMessageDirection
        /// </summary>
        [JsonPropertyName("lastMessageDirection")]
        public LastMessageDirectionEnum LastMessageDirection { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberId
        /// </summary>
        [JsonPropertyName("phoneNumberId")]
        public Guid PhoneNumberId { get; set; }

        /// <summary>
        /// Gets or Sets OtherPhoneNumber
        /// </summary>
        [JsonPropertyName("otherPhoneNumber")]
        public string OtherPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets LastBody
        /// </summary>
        [JsonPropertyName("lastBody")]
        public string LastBody { get; set; }

        /// <summary>
        /// Gets or Sets LastCreated
        /// </summary>
        [JsonPropertyName("lastCreated")]
        public DateTime LastCreated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhoneMessageThreadProjection {\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  OtherPhoneNumber: ").Append(OtherPhoneNumber).Append("\n");
            sb.Append("  LastMessageDirection: ").Append(LastMessageDirection).Append("\n");
            sb.Append("  LastBody: ").Append(LastBody).Append("\n");
            sb.Append("  LastCreated: ").Append(LastCreated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PhoneMessageThreadProjection" />
    /// </summary>
    public class PhoneMessageThreadProjectionJsonConverter : JsonConverter<PhoneMessageThreadProjection>
    {
        /// <summary>
        /// The format to use to serialize LastCreated
        /// </summary>
        public static string LastCreatedFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PhoneMessageThreadProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PhoneMessageThreadProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> phoneNumber = default;
            Option<Guid?> phoneNumberId = default;
            Option<string> otherPhoneNumber = default;
            Option<PhoneMessageThreadProjection.LastMessageDirectionEnum?> lastMessageDirection = default;
            Option<string> lastBody = default;
            Option<DateTime?> lastCreated = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "phoneNumber":
                            phoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneNumberId":
                            phoneNumberId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "otherPhoneNumber":
                            otherPhoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastMessageDirection":
                            string lastMessageDirectionRawValue = utf8JsonReader.GetString();
                            if (lastMessageDirectionRawValue != null)
                                lastMessageDirection = new Option<PhoneMessageThreadProjection.LastMessageDirectionEnum?>(PhoneMessageThreadProjection.LastMessageDirectionEnumFromStringOrDefault(lastMessageDirectionRawValue));
                            break;
                        case "lastBody":
                            lastBody = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastCreated":
                            lastCreated = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!phoneNumber.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadProjection.", nameof(phoneNumber));

            if (!phoneNumberId.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadProjection.", nameof(phoneNumberId));

            if (!otherPhoneNumber.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadProjection.", nameof(otherPhoneNumber));

            if (!lastMessageDirection.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadProjection.", nameof(lastMessageDirection));

            if (!lastBody.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadProjection.", nameof(lastBody));

            if (!lastCreated.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadProjection.", nameof(lastCreated));

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class PhoneMessageThreadProjection.");

            if (phoneNumberId.IsSet && phoneNumberId.Value == null)
                throw new ArgumentNullException(nameof(phoneNumberId), "Property is not nullable for class PhoneMessageThreadProjection.");

            if (otherPhoneNumber.IsSet && otherPhoneNumber.Value == null)
                throw new ArgumentNullException(nameof(otherPhoneNumber), "Property is not nullable for class PhoneMessageThreadProjection.");

            if (lastMessageDirection.IsSet && lastMessageDirection.Value == null)
                throw new ArgumentNullException(nameof(lastMessageDirection), "Property is not nullable for class PhoneMessageThreadProjection.");

            if (lastBody.IsSet && lastBody.Value == null)
                throw new ArgumentNullException(nameof(lastBody), "Property is not nullable for class PhoneMessageThreadProjection.");

            if (lastCreated.IsSet && lastCreated.Value == null)
                throw new ArgumentNullException(nameof(lastCreated), "Property is not nullable for class PhoneMessageThreadProjection.");

            return new PhoneMessageThreadProjection(phoneNumber.Value, phoneNumberId.Value.Value, otherPhoneNumber.Value, lastMessageDirection.Value.Value, lastBody.Value, lastCreated.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="PhoneMessageThreadProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="phoneMessageThreadProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PhoneMessageThreadProjection phoneMessageThreadProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, phoneMessageThreadProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PhoneMessageThreadProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="phoneMessageThreadProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PhoneMessageThreadProjection phoneMessageThreadProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (phoneMessageThreadProjection.PhoneNumber == null)
                throw new ArgumentNullException(nameof(phoneMessageThreadProjection.PhoneNumber), "Property is required for class PhoneMessageThreadProjection.");

            if (phoneMessageThreadProjection.OtherPhoneNumber == null)
                throw new ArgumentNullException(nameof(phoneMessageThreadProjection.OtherPhoneNumber), "Property is required for class PhoneMessageThreadProjection.");

            if (phoneMessageThreadProjection.LastBody == null)
                throw new ArgumentNullException(nameof(phoneMessageThreadProjection.LastBody), "Property is required for class PhoneMessageThreadProjection.");

            writer.WriteString("phoneNumber", phoneMessageThreadProjection.PhoneNumber);

            writer.WriteString("phoneNumberId", phoneMessageThreadProjection.PhoneNumberId);

            writer.WriteString("otherPhoneNumber", phoneMessageThreadProjection.OtherPhoneNumber);

            var lastMessageDirectionRawValue = PhoneMessageThreadProjection.LastMessageDirectionEnumToJsonValue(phoneMessageThreadProjection.LastMessageDirection);
            writer.WriteString("lastMessageDirection", lastMessageDirectionRawValue);
            writer.WriteString("lastBody", phoneMessageThreadProjection.LastBody);

            writer.WriteString("lastCreated", phoneMessageThreadProjection.LastCreated.ToString(LastCreatedFormat));
        }
    }
}
