/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Sort
    /// </summary>
    [DataContract]
    public partial class Sort :  IEquatable<Sort>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sort" /> class.
        /// </summary>
        /// <param name="empty">empty.</param>
        /// <param name="sorted">sorted.</param>
        /// <param name="unsorted">unsorted.</param>
        public Sort(bool empty = default(bool), bool sorted = default(bool), bool unsorted = default(bool))
        {
            this.Empty = empty;
            this.Sorted = sorted;
            this.Unsorted = unsorted;
        }
        
        /// <summary>
        /// Gets or Sets Empty
        /// </summary>
        [DataMember(Name="empty", EmitDefaultValue=false)]
        public bool Empty { get; set; }

        /// <summary>
        /// Gets or Sets Sorted
        /// </summary>
        [DataMember(Name="sorted", EmitDefaultValue=false)]
        public bool Sorted { get; set; }

        /// <summary>
        /// Gets or Sets Unsorted
        /// </summary>
        [DataMember(Name="unsorted", EmitDefaultValue=false)]
        public bool Unsorted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sort {\n");
            sb.Append("  Empty: ").Append(Empty).Append("\n");
            sb.Append("  Sorted: ").Append(Sorted).Append("\n");
            sb.Append("  Unsorted: ").Append(Unsorted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sort);
        }

        /// <summary>
        /// Returns true if Sort instances are equal
        /// </summary>
        /// <param name="input">Instance of Sort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sort input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Empty == input.Empty ||
                    this.Empty.Equals(input.Empty)
                ) && 
                (
                    this.Sorted == input.Sorted ||
                    this.Sorted.Equals(input.Sorted)
                ) && 
                (
                    this.Unsorted == input.Unsorted ||
                    this.Unsorted.Equals(input.Unsorted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Empty.GetHashCode();
                hashCode = hashCode * 59 + this.Sorted.GetHashCode();
                hashCode = hashCode * 59 + this.Unsorted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
