/* 
 * MailSlurp API
 *
 * For documentation see [developer guide](https://www.mailslurp.com/developers). [Create an account](https://app.mailslurp.com) in the MailSlurp Dashboard to [view your API Key](https://app). For all bugs, feature requests, or help please [see support](https://www.mailslurp.com/support/).
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Sort
    /// </summary>
    [DataContract]
    public partial class Sort :  IEquatable<Sort>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sort" /> class.
        /// </summary>
        /// <param name="sorted">sorted.</param>
        /// <param name="unsorted">unsorted.</param>
        public Sort(bool? sorted = default(bool?), bool? unsorted = default(bool?))
        {
            this.Sorted = sorted;
            this.Unsorted = unsorted;
        }
        
        /// <summary>
        /// Gets or Sets Sorted
        /// </summary>
        [DataMember(Name="sorted", EmitDefaultValue=false)]
        public bool? Sorted { get; set; }

        /// <summary>
        /// Gets or Sets Unsorted
        /// </summary>
        [DataMember(Name="unsorted", EmitDefaultValue=false)]
        public bool? Unsorted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sort {\n");
            sb.Append("  Sorted: ").Append(Sorted).Append("\n");
            sb.Append("  Unsorted: ").Append(Unsorted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sort);
        }

        /// <summary>
        /// Returns true if Sort instances are equal
        /// </summary>
        /// <param name="input">Instance of Sort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sort input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sorted == input.Sorted ||
                    (this.Sorted != null &&
                    this.Sorted.Equals(input.Sorted))
                ) && 
                (
                    this.Unsorted == input.Unsorted ||
                    (this.Unsorted != null &&
                    this.Unsorted.Equals(input.Unsorted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sorted != null)
                    hashCode = hashCode * 59 + this.Sorted.GetHashCode();
                if (this.Unsorted != null)
                    hashCode = hashCode * 59 + this.Unsorted.GetHashCode();
                return hashCode;
            }
        }
    }

}
