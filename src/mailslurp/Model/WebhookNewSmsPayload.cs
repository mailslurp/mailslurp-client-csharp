// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// NEW_SMS webhook payload. Sent to your webhook url endpoint via HTTP POST when an sms is received by the phone number that your webhook is attached to. Use the SMS ID to fetch the full SMS details.
    /// </summary>
    public partial class WebhookNewSmsPayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookNewSmsPayload" /> class.
        /// </summary>
        /// <param name="messageId">Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</param>
        /// <param name="webhookId">ID of webhook entity being triggered</param>
        /// <param name="eventName">Name of the event type webhook is being triggered for.</param>
        /// <param name="smsId">ID of SMS message</param>
        /// <param name="userId">User ID of event</param>
        /// <param name="phoneNumber">ID of phone number receiving SMS</param>
        /// <param name="toNumber">Recipient phone number</param>
        /// <param name="fromNumber">Sender phone number</param>
        /// <param name="body">SMS message body</param>
        /// <param name="read">SMS has been read</param>
        /// <param name="webhookName">Name of the webhook being triggered</param>
        [JsonConstructor]
        public WebhookNewSmsPayload(string messageId, Guid webhookId, EventNameEnum eventName, Guid smsId, Guid userId, Guid phoneNumber, string toNumber, string fromNumber, string body, bool read, Option<string> webhookName = default)
        {
            MessageId = messageId;
            WebhookId = webhookId;
            EventName = eventName;
            SmsId = smsId;
            UserId = userId;
            PhoneNumber = phoneNumber;
            ToNumber = toNumber;
            FromNumber = fromNumber;
            Body = body;
            Read = read;
            WebhookNameOption = webhookName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the event type webhook is being triggered for.
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for.</value>
        public enum EventNameEnum
        {
            /// <summary>
            /// Enum EMAILRECEIVED for value: EMAIL_RECEIVED
            /// </summary>
            EMAILRECEIVED = 1,

            /// <summary>
            /// Enum NEWEMAIL for value: NEW_EMAIL
            /// </summary>
            NEWEMAIL = 2,

            /// <summary>
            /// Enum NEWCONTACT for value: NEW_CONTACT
            /// </summary>
            NEWCONTACT = 3,

            /// <summary>
            /// Enum NEWATTACHMENT for value: NEW_ATTACHMENT
            /// </summary>
            NEWATTACHMENT = 4,

            /// <summary>
            /// Enum EMAILOPENED for value: EMAIL_OPENED
            /// </summary>
            EMAILOPENED = 5,

            /// <summary>
            /// Enum EMAILREAD for value: EMAIL_READ
            /// </summary>
            EMAILREAD = 6,

            /// <summary>
            /// Enum DELIVERYSTATUS for value: DELIVERY_STATUS
            /// </summary>
            DELIVERYSTATUS = 7,

            /// <summary>
            /// Enum BOUNCE for value: BOUNCE
            /// </summary>
            BOUNCE = 8,

            /// <summary>
            /// Enum BOUNCERECIPIENT for value: BOUNCE_RECIPIENT
            /// </summary>
            BOUNCERECIPIENT = 9,

            /// <summary>
            /// Enum NEWSMS for value: NEW_SMS
            /// </summary>
            NEWSMS = 10,

            /// <summary>
            /// Enum NEWGUESTUSER for value: NEW_GUEST_USER
            /// </summary>
            NEWGUESTUSER = 11
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventNameEnum EventNameEnumFromString(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            throw new NotImplementedException($"Could not convert value to type EventNameEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventNameEnum? EventNameEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventNameEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventNameEnumToJsonValue(EventNameEnum value)
        {
            if (value == EventNameEnum.EMAILRECEIVED)
                return "EMAIL_RECEIVED";

            if (value == EventNameEnum.NEWEMAIL)
                return "NEW_EMAIL";

            if (value == EventNameEnum.NEWCONTACT)
                return "NEW_CONTACT";

            if (value == EventNameEnum.NEWATTACHMENT)
                return "NEW_ATTACHMENT";

            if (value == EventNameEnum.EMAILOPENED)
                return "EMAIL_OPENED";

            if (value == EventNameEnum.EMAILREAD)
                return "EMAIL_READ";

            if (value == EventNameEnum.DELIVERYSTATUS)
                return "DELIVERY_STATUS";

            if (value == EventNameEnum.BOUNCE)
                return "BOUNCE";

            if (value == EventNameEnum.BOUNCERECIPIENT)
                return "BOUNCE_RECIPIENT";

            if (value == EventNameEnum.NEWSMS)
                return "NEW_SMS";

            if (value == EventNameEnum.NEWGUESTUSER)
                return "NEW_GUEST_USER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Name of the event type webhook is being triggered for.
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for.</value>
        [JsonPropertyName("eventName")]
        public EventNameEnum EventName { get; set; }

        /// <summary>
        /// Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
        /// </summary>
        /// <value>Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</value>
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// ID of webhook entity being triggered
        /// </summary>
        /// <value>ID of webhook entity being triggered</value>
        [JsonPropertyName("webhookId")]
        public Guid WebhookId { get; set; }

        /// <summary>
        /// ID of SMS message
        /// </summary>
        /// <value>ID of SMS message</value>
        [JsonPropertyName("smsId")]
        public Guid SmsId { get; set; }

        /// <summary>
        /// User ID of event
        /// </summary>
        /// <value>User ID of event</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// ID of phone number receiving SMS
        /// </summary>
        /// <value>ID of phone number receiving SMS</value>
        [JsonPropertyName("phoneNumber")]
        public Guid PhoneNumber { get; set; }

        /// <summary>
        /// Recipient phone number
        /// </summary>
        /// <value>Recipient phone number</value>
        [JsonPropertyName("toNumber")]
        public string ToNumber { get; set; }

        /// <summary>
        /// Sender phone number
        /// </summary>
        /// <value>Sender phone number</value>
        [JsonPropertyName("fromNumber")]
        public string FromNumber { get; set; }

        /// <summary>
        /// SMS message body
        /// </summary>
        /// <value>SMS message body</value>
        [JsonPropertyName("body")]
        public string Body { get; set; }

        /// <summary>
        /// SMS has been read
        /// </summary>
        /// <value>SMS has been read</value>
        [JsonPropertyName("read")]
        public bool Read { get; set; }

        /// <summary>
        /// Used to track the state of WebhookName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WebhookNameOption { get; private set; }

        /// <summary>
        /// Name of the webhook being triggered
        /// </summary>
        /// <value>Name of the webhook being triggered</value>
        [JsonPropertyName("webhookName")]
        public string WebhookName { get { return this.WebhookNameOption; } set { this.WebhookNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookNewSmsPayload {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  SmsId: ").Append(SmsId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  ToNumber: ").Append(ToNumber).Append("\n");
            sb.Append("  FromNumber: ").Append(FromNumber).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  WebhookName: ").Append(WebhookName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookNewSmsPayload" />
    /// </summary>
    public class WebhookNewSmsPayloadJsonConverter : JsonConverter<WebhookNewSmsPayload>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebhookNewSmsPayload" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookNewSmsPayload Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> messageId = default;
            Option<Guid?> webhookId = default;
            Option<WebhookNewSmsPayload.EventNameEnum?> eventName = default;
            Option<Guid?> smsId = default;
            Option<Guid?> userId = default;
            Option<Guid?> phoneNumber = default;
            Option<string> toNumber = default;
            Option<string> fromNumber = default;
            Option<string> body = default;
            Option<bool?> read = default;
            Option<string> webhookName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "messageId":
                            messageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "webhookId":
                            webhookId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "eventName":
                            string eventNameRawValue = utf8JsonReader.GetString();
                            if (eventNameRawValue != null)
                                eventName = new Option<WebhookNewSmsPayload.EventNameEnum?>(WebhookNewSmsPayload.EventNameEnumFromStringOrDefault(eventNameRawValue));
                            break;
                        case "smsId":
                            smsId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "phoneNumber":
                            phoneNumber = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "toNumber":
                            toNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fromNumber":
                            fromNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "read":
                            read = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "webhookName":
                            webhookName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewSmsPayload.", nameof(messageId));

            if (!webhookId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewSmsPayload.", nameof(webhookId));

            if (!eventName.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewSmsPayload.", nameof(eventName));

            if (!smsId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewSmsPayload.", nameof(smsId));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewSmsPayload.", nameof(userId));

            if (!phoneNumber.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewSmsPayload.", nameof(phoneNumber));

            if (!toNumber.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewSmsPayload.", nameof(toNumber));

            if (!fromNumber.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewSmsPayload.", nameof(fromNumber));

            if (!body.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewSmsPayload.", nameof(body));

            if (!read.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewSmsPayload.", nameof(read));

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class WebhookNewSmsPayload.");

            if (webhookId.IsSet && webhookId.Value == null)
                throw new ArgumentNullException(nameof(webhookId), "Property is not nullable for class WebhookNewSmsPayload.");

            if (eventName.IsSet && eventName.Value == null)
                throw new ArgumentNullException(nameof(eventName), "Property is not nullable for class WebhookNewSmsPayload.");

            if (smsId.IsSet && smsId.Value == null)
                throw new ArgumentNullException(nameof(smsId), "Property is not nullable for class WebhookNewSmsPayload.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class WebhookNewSmsPayload.");

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class WebhookNewSmsPayload.");

            if (toNumber.IsSet && toNumber.Value == null)
                throw new ArgumentNullException(nameof(toNumber), "Property is not nullable for class WebhookNewSmsPayload.");

            if (fromNumber.IsSet && fromNumber.Value == null)
                throw new ArgumentNullException(nameof(fromNumber), "Property is not nullable for class WebhookNewSmsPayload.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class WebhookNewSmsPayload.");

            if (read.IsSet && read.Value == null)
                throw new ArgumentNullException(nameof(read), "Property is not nullable for class WebhookNewSmsPayload.");

            return new WebhookNewSmsPayload(messageId.Value, webhookId.Value.Value, eventName.Value.Value, smsId.Value.Value, userId.Value.Value, phoneNumber.Value.Value, toNumber.Value, fromNumber.Value, body.Value, read.Value.Value, webhookName);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookNewSmsPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookNewSmsPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookNewSmsPayload webhookNewSmsPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookNewSmsPayload, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookNewSmsPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookNewSmsPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookNewSmsPayload webhookNewSmsPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookNewSmsPayload.MessageId == null)
                throw new ArgumentNullException(nameof(webhookNewSmsPayload.MessageId), "Property is required for class WebhookNewSmsPayload.");

            if (webhookNewSmsPayload.ToNumber == null)
                throw new ArgumentNullException(nameof(webhookNewSmsPayload.ToNumber), "Property is required for class WebhookNewSmsPayload.");

            if (webhookNewSmsPayload.FromNumber == null)
                throw new ArgumentNullException(nameof(webhookNewSmsPayload.FromNumber), "Property is required for class WebhookNewSmsPayload.");

            if (webhookNewSmsPayload.Body == null)
                throw new ArgumentNullException(nameof(webhookNewSmsPayload.Body), "Property is required for class WebhookNewSmsPayload.");

            writer.WriteString("messageId", webhookNewSmsPayload.MessageId);

            writer.WriteString("webhookId", webhookNewSmsPayload.WebhookId);

            var eventNameRawValue = WebhookNewSmsPayload.EventNameEnumToJsonValue(webhookNewSmsPayload.EventName);
            writer.WriteString("eventName", eventNameRawValue);
            writer.WriteString("smsId", webhookNewSmsPayload.SmsId);

            writer.WriteString("userId", webhookNewSmsPayload.UserId);

            writer.WriteString("phoneNumber", webhookNewSmsPayload.PhoneNumber);

            writer.WriteString("toNumber", webhookNewSmsPayload.ToNumber);

            writer.WriteString("fromNumber", webhookNewSmsPayload.FromNumber);

            writer.WriteString("body", webhookNewSmsPayload.Body);

            writer.WriteBoolean("read", webhookNewSmsPayload.Read);

            if (webhookNewSmsPayload.WebhookNameOption.IsSet)
                if (webhookNewSmsPayload.WebhookNameOption.Value != null)
                    writer.WriteString("webhookName", webhookNewSmsPayload.WebhookName);
                else
                    writer.WriteNull("webhookName");
        }
    }
}
