/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// DTO representation of an attachment.
    /// </summary>
    [DataContract(Name = "AttachmentEntityDto")]
    public partial class AttachmentEntityDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentEntityDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttachmentEntityDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentEntityDto" /> class.
        /// </summary>
        /// <param name="id">The unique identifier for this attachment. (required).</param>
        /// <param name="attachmentId">The identifier of the attachment file (required).</param>
        /// <param name="userId">The user identifier associated with this attachment. (required).</param>
        /// <param name="contentType">The content type of the attachment..</param>
        /// <param name="contentLength">The content length of the attachment in bytes..</param>
        /// <param name="contentId">The content identifier, which is a unique ID for the content part of the email..</param>
        /// <param name="name">The name of the attachment file..</param>
        /// <param name="inboxId">The inbox identifier associated with this attachment..</param>
        /// <param name="createdAt">The timestamp when this attachment was created. (required).</param>
        /// <param name="updatedAt">The timestamp when this attachment was last updated. (required).</param>
        public AttachmentEntityDto(Guid id = default, string attachmentId = default, Guid userId = default, string contentType = default, long? contentLength = default, string contentId = default, string name = default, Guid? inboxId = default, DateTime createdAt = default, DateTime updatedAt = default)
        {
            this.Id = id;
            // to ensure "attachmentId" is required (not null)
            if (attachmentId == null)
            {
                throw new ArgumentNullException("attachmentId is a required property for AttachmentEntityDto and cannot be null");
            }
            this.AttachmentId = attachmentId;
            this.UserId = userId;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.ContentType = contentType;
            this.ContentLength = contentLength;
            this.ContentId = contentId;
            this.Name = name;
            this.InboxId = inboxId;
        }

        /// <summary>
        /// The unique identifier for this attachment.
        /// </summary>
        /// <value>The unique identifier for this attachment.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// The identifier of the attachment file
        /// </summary>
        /// <value>The identifier of the attachment file</value>
        [DataMember(Name = "attachmentId", IsRequired = true, EmitDefaultValue = true)]
        public string AttachmentId { get; set; }

        /// <summary>
        /// The user identifier associated with this attachment.
        /// </summary>
        /// <value>The user identifier associated with this attachment.</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// The content type of the attachment.
        /// </summary>
        /// <value>The content type of the attachment.</value>
        [DataMember(Name = "contentType", EmitDefaultValue = true)]
        public string ContentType { get; set; }

        /// <summary>
        /// The content length of the attachment in bytes.
        /// </summary>
        /// <value>The content length of the attachment in bytes.</value>
        [DataMember(Name = "contentLength", EmitDefaultValue = true)]
        public long? ContentLength { get; set; }

        /// <summary>
        /// The content identifier, which is a unique ID for the content part of the email.
        /// </summary>
        /// <value>The content identifier, which is a unique ID for the content part of the email.</value>
        [DataMember(Name = "contentId", EmitDefaultValue = true)]
        public string ContentId { get; set; }

        /// <summary>
        /// The name of the attachment file.
        /// </summary>
        /// <value>The name of the attachment file.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The inbox identifier associated with this attachment.
        /// </summary>
        /// <value>The inbox identifier associated with this attachment.</value>
        [DataMember(Name = "inboxId", EmitDefaultValue = true)]
        public Guid? InboxId { get; set; }

        /// <summary>
        /// The timestamp when this attachment was created.
        /// </summary>
        /// <value>The timestamp when this attachment was created.</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The timestamp when this attachment was last updated.
        /// </summary>
        /// <value>The timestamp when this attachment was last updated.</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentEntityDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ContentLength: ").Append(ContentLength).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
