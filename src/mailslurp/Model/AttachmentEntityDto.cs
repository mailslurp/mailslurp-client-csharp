// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// DTO representation of an attachment.
    /// </summary>
    public partial class AttachmentEntityDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentEntityDto" /> class.
        /// </summary>
        /// <param name="id">The unique identifier for this attachment.</param>
        /// <param name="attachmentId">The identifier of the attachment file</param>
        /// <param name="userId">The user identifier associated with this attachment.</param>
        /// <param name="createdAt">The timestamp when this attachment was created.</param>
        /// <param name="updatedAt">The timestamp when this attachment was last updated.</param>
        /// <param name="contentType">The content type of the attachment.</param>
        /// <param name="contentLength">The content length of the attachment in bytes.</param>
        /// <param name="contentId">The content identifier, which is a unique ID for the content part of the email.</param>
        /// <param name="name">The name of the attachment file.</param>
        /// <param name="inboxId">The inbox identifier associated with this attachment.</param>
        [JsonConstructor]
        public AttachmentEntityDto(Guid id, string attachmentId, Guid userId, DateTime createdAt, DateTime updatedAt, Option<string> contentType = default, Option<long?> contentLength = default, Option<string> contentId = default, Option<string> name = default, Option<Guid?> inboxId = default)
        {
            Id = id;
            AttachmentId = attachmentId;
            UserId = userId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            ContentTypeOption = contentType;
            ContentLengthOption = contentLength;
            ContentIdOption = contentId;
            NameOption = name;
            InboxIdOption = inboxId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The unique identifier for this attachment.
        /// </summary>
        /// <value>The unique identifier for this attachment.</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// The identifier of the attachment file
        /// </summary>
        /// <value>The identifier of the attachment file</value>
        [JsonPropertyName("attachmentId")]
        public string AttachmentId { get; set; }

        /// <summary>
        /// The user identifier associated with this attachment.
        /// </summary>
        /// <value>The user identifier associated with this attachment.</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// The timestamp when this attachment was created.
        /// </summary>
        /// <value>The timestamp when this attachment was created.</value>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The timestamp when this attachment was last updated.
        /// </summary>
        /// <value>The timestamp when this attachment was last updated.</value>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContentTypeOption { get; private set; }

        /// <summary>
        /// The content type of the attachment.
        /// </summary>
        /// <value>The content type of the attachment.</value>
        [JsonPropertyName("contentType")]
        public string ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContentLength
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ContentLengthOption { get; private set; }

        /// <summary>
        /// The content length of the attachment in bytes.
        /// </summary>
        /// <value>The content length of the attachment in bytes.</value>
        [JsonPropertyName("contentLength")]
        public long? ContentLength { get { return this.ContentLengthOption; } set { this.ContentLengthOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of ContentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContentIdOption { get; private set; }

        /// <summary>
        /// The content identifier, which is a unique ID for the content part of the email.
        /// </summary>
        /// <value>The content identifier, which is a unique ID for the content part of the email.</value>
        [JsonPropertyName("contentId")]
        public string ContentId { get { return this.ContentIdOption; } set { this.ContentIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// The name of the attachment file.
        /// </summary>
        /// <value>The name of the attachment file.</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// The inbox identifier associated with this attachment.
        /// </summary>
        /// <value>The inbox identifier associated with this attachment.</value>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentEntityDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ContentLength: ").Append(ContentLength).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AttachmentEntityDto" />
    /// </summary>
    public class AttachmentEntityDtoJsonConverter : JsonConverter<AttachmentEntityDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AttachmentEntityDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AttachmentEntityDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> attachmentId = default;
            Option<Guid?> userId = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string> contentType = default;
            Option<long?> contentLength = default;
            Option<string> contentId = default;
            Option<string> name = default;
            Option<Guid?> inboxId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "attachmentId":
                            attachmentId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "contentType":
                            contentType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contentLength":
                            contentLength = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "contentId":
                            contentId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AttachmentEntityDto.", nameof(id));

            if (!attachmentId.IsSet)
                throw new ArgumentException("Property is required for class AttachmentEntityDto.", nameof(attachmentId));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class AttachmentEntityDto.", nameof(userId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class AttachmentEntityDto.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class AttachmentEntityDto.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AttachmentEntityDto.");

            if (attachmentId.IsSet && attachmentId.Value == null)
                throw new ArgumentNullException(nameof(attachmentId), "Property is not nullable for class AttachmentEntityDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class AttachmentEntityDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class AttachmentEntityDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class AttachmentEntityDto.");

            return new AttachmentEntityDto(id.Value.Value, attachmentId.Value, userId.Value.Value, createdAt.Value.Value, updatedAt.Value.Value, contentType, contentLength, contentId, name, inboxId);
        }

        /// <summary>
        /// Serializes a <see cref="AttachmentEntityDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentEntityDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AttachmentEntityDto attachmentEntityDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, attachmentEntityDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AttachmentEntityDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentEntityDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AttachmentEntityDto attachmentEntityDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (attachmentEntityDto.AttachmentId == null)
                throw new ArgumentNullException(nameof(attachmentEntityDto.AttachmentId), "Property is required for class AttachmentEntityDto.");

            writer.WriteString("id", attachmentEntityDto.Id);

            writer.WriteString("attachmentId", attachmentEntityDto.AttachmentId);

            writer.WriteString("userId", attachmentEntityDto.UserId);

            writer.WriteString("createdAt", attachmentEntityDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", attachmentEntityDto.UpdatedAt.ToString(UpdatedAtFormat));

            if (attachmentEntityDto.ContentTypeOption.IsSet)
                if (attachmentEntityDto.ContentTypeOption.Value != null)
                    writer.WriteString("contentType", attachmentEntityDto.ContentType);
                else
                    writer.WriteNull("contentType");

            if (attachmentEntityDto.ContentLengthOption.IsSet)
                if (attachmentEntityDto.ContentLengthOption.Value != null)
                    writer.WriteNumber("contentLength", attachmentEntityDto.ContentLengthOption.Value.Value);
                else
                    writer.WriteNull("contentLength");

            if (attachmentEntityDto.ContentIdOption.IsSet)
                if (attachmentEntityDto.ContentIdOption.Value != null)
                    writer.WriteString("contentId", attachmentEntityDto.ContentId);
                else
                    writer.WriteNull("contentId");

            if (attachmentEntityDto.NameOption.IsSet)
                if (attachmentEntityDto.NameOption.Value != null)
                    writer.WriteString("name", attachmentEntityDto.Name);
                else
                    writer.WriteNull("name");

            if (attachmentEntityDto.InboxIdOption.IsSet)
                if (attachmentEntityDto.InboxIdOption.Value != null)
                    writer.WriteString("inboxId", attachmentEntityDto.InboxIdOption.Value.Value);
                else
                    writer.WriteNull("inboxId");
        }
    }
}
