// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// List unsubscribe recipient
    /// </summary>
    public partial class ListUnsubscribeRecipientProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListUnsubscribeRecipientProjection" /> class.
        /// </summary>
        /// <param name="emailAddress">emailAddress</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="domainId">domainId</param>
        [JsonConstructor]
        public ListUnsubscribeRecipientProjection(string emailAddress, DateTime createdAt, Guid id, Option<Guid?> domainId = default)
        {
            EmailAddress = emailAddress;
            CreatedAt = createdAt;
            Id = id;
            DomainIdOption = domainId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of DomainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DomainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets DomainId
        /// </summary>
        [JsonPropertyName("domainId")]
        public Guid? DomainId { get { return this.DomainIdOption; } set { this.DomainIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListUnsubscribeRecipientProjection {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ListUnsubscribeRecipientProjection" />
    /// </summary>
    public class ListUnsubscribeRecipientProjectionJsonConverter : JsonConverter<ListUnsubscribeRecipientProjection>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ListUnsubscribeRecipientProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListUnsubscribeRecipientProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> emailAddress = default;
            Option<DateTime?> createdAt = default;
            Option<Guid?> id = default;
            Option<Guid?> domainId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "domainId":
                            domainId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class ListUnsubscribeRecipientProjection.", nameof(emailAddress));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class ListUnsubscribeRecipientProjection.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ListUnsubscribeRecipientProjection.", nameof(id));

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class ListUnsubscribeRecipientProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ListUnsubscribeRecipientProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ListUnsubscribeRecipientProjection.");

            return new ListUnsubscribeRecipientProjection(emailAddress.Value, createdAt.Value.Value, id.Value.Value, domainId);
        }

        /// <summary>
        /// Serializes a <see cref="ListUnsubscribeRecipientProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listUnsubscribeRecipientProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListUnsubscribeRecipientProjection listUnsubscribeRecipientProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listUnsubscribeRecipientProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListUnsubscribeRecipientProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listUnsubscribeRecipientProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListUnsubscribeRecipientProjection listUnsubscribeRecipientProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listUnsubscribeRecipientProjection.EmailAddress == null)
                throw new ArgumentNullException(nameof(listUnsubscribeRecipientProjection.EmailAddress), "Property is required for class ListUnsubscribeRecipientProjection.");

            writer.WriteString("emailAddress", listUnsubscribeRecipientProjection.EmailAddress);

            writer.WriteString("createdAt", listUnsubscribeRecipientProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", listUnsubscribeRecipientProjection.Id);

            if (listUnsubscribeRecipientProjection.DomainIdOption.IsSet)
                if (listUnsubscribeRecipientProjection.DomainIdOption.Value != null)
                    writer.WriteString("domainId", listUnsubscribeRecipientProjection.DomainIdOption.Value.Value);
                else
                    writer.WriteNull("domainId");
        }
    }
}
