// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for exporting user data
    /// </summary>
    public partial class ExportOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportOptions" /> class.
        /// </summary>
        /// <param name="outputFormat">outputFormat</param>
        /// <param name="excludePreviouslyExported">excludePreviouslyExported</param>
        /// <param name="createdEarliestTime">createdEarliestTime</param>
        /// <param name="createdOldestTime">createdOldestTime</param>
        /// <param name="filter">filter</param>
        /// <param name="listSeparatorToken">listSeparatorToken</param>
        [JsonConstructor]
        public ExportOptions(OutputFormatEnum outputFormat, Option<bool?> excludePreviouslyExported = default, Option<DateTime?> createdEarliestTime = default, Option<DateTime?> createdOldestTime = default, Option<string> filter = default, Option<string> listSeparatorToken = default)
        {
            OutputFormat = outputFormat;
            ExcludePreviouslyExportedOption = excludePreviouslyExported;
            CreatedEarliestTimeOption = createdEarliestTime;
            CreatedOldestTimeOption = createdOldestTime;
            FilterOption = filter;
            ListSeparatorTokenOption = listSeparatorToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines OutputFormat
        /// </summary>
        public enum OutputFormatEnum
        {
            /// <summary>
            /// Enum CSVDEFAULT for value: CSV_DEFAULT
            /// </summary>
            CSVDEFAULT = 1,

            /// <summary>
            /// Enum CSVEXCEL for value: CSV_EXCEL
            /// </summary>
            CSVEXCEL = 2
        }

        /// <summary>
        /// Returns a <see cref="OutputFormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static OutputFormatEnum OutputFormatEnumFromString(string value)
        {
            if (value.Equals("CSV_DEFAULT"))
                return OutputFormatEnum.CSVDEFAULT;

            if (value.Equals("CSV_EXCEL"))
                return OutputFormatEnum.CSVEXCEL;

            throw new NotImplementedException($"Could not convert value to type OutputFormatEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="OutputFormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OutputFormatEnum? OutputFormatEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CSV_DEFAULT"))
                return OutputFormatEnum.CSVDEFAULT;

            if (value.Equals("CSV_EXCEL"))
                return OutputFormatEnum.CSVEXCEL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OutputFormatEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string OutputFormatEnumToJsonValue(OutputFormatEnum value)
        {
            if (value == OutputFormatEnum.CSVDEFAULT)
                return "CSV_DEFAULT";

            if (value == OutputFormatEnum.CSVEXCEL)
                return "CSV_EXCEL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets OutputFormat
        /// </summary>
        [JsonPropertyName("outputFormat")]
        public OutputFormatEnum OutputFormat { get; set; }

        /// <summary>
        /// Used to track the state of ExcludePreviouslyExported
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ExcludePreviouslyExportedOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExcludePreviouslyExported
        /// </summary>
        [JsonPropertyName("excludePreviouslyExported")]
        public bool? ExcludePreviouslyExported { get { return this.ExcludePreviouslyExportedOption; } set { this.ExcludePreviouslyExportedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedEarliestTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedEarliestTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedEarliestTime
        /// </summary>
        [JsonPropertyName("createdEarliestTime")]
        public DateTime? CreatedEarliestTime { get { return this.CreatedEarliestTimeOption; } set { this.CreatedEarliestTimeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedOldestTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedOldestTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedOldestTime
        /// </summary>
        [JsonPropertyName("createdOldestTime")]
        public DateTime? CreatedOldestTime { get { return this.CreatedOldestTimeOption; } set { this.CreatedOldestTimeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Filter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FilterOption { get; private set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [JsonPropertyName("filter")]
        public string Filter { get { return this.FilterOption; } set { this.FilterOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ListSeparatorToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ListSeparatorTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets ListSeparatorToken
        /// </summary>
        [JsonPropertyName("listSeparatorToken")]
        public string ListSeparatorToken { get { return this.ListSeparatorTokenOption; } set { this.ListSeparatorTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExportOptions {\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  ExcludePreviouslyExported: ").Append(ExcludePreviouslyExported).Append("\n");
            sb.Append("  CreatedEarliestTime: ").Append(CreatedEarliestTime).Append("\n");
            sb.Append("  CreatedOldestTime: ").Append(CreatedOldestTime).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  ListSeparatorToken: ").Append(ListSeparatorToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExportOptions" />
    /// </summary>
    public class ExportOptionsJsonConverter : JsonConverter<ExportOptions>
    {
        /// <summary>
        /// The format to use to serialize CreatedEarliestTime
        /// </summary>
        public static string CreatedEarliestTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedOldestTime
        /// </summary>
        public static string CreatedOldestTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ExportOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExportOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ExportOptions.OutputFormatEnum?> outputFormat = default;
            Option<bool?> excludePreviouslyExported = default;
            Option<DateTime?> createdEarliestTime = default;
            Option<DateTime?> createdOldestTime = default;
            Option<string> filter = default;
            Option<string> listSeparatorToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "outputFormat":
                            string outputFormatRawValue = utf8JsonReader.GetString();
                            if (outputFormatRawValue != null)
                                outputFormat = new Option<ExportOptions.OutputFormatEnum?>(ExportOptions.OutputFormatEnumFromStringOrDefault(outputFormatRawValue));
                            break;
                        case "excludePreviouslyExported":
                            excludePreviouslyExported = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "createdEarliestTime":
                            createdEarliestTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdOldestTime":
                            createdOldestTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "filter":
                            filter = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "listSeparatorToken":
                            listSeparatorToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!outputFormat.IsSet)
                throw new ArgumentException("Property is required for class ExportOptions.", nameof(outputFormat));

            if (outputFormat.IsSet && outputFormat.Value == null)
                throw new ArgumentNullException(nameof(outputFormat), "Property is not nullable for class ExportOptions.");

            return new ExportOptions(outputFormat.Value.Value, excludePreviouslyExported, createdEarliestTime, createdOldestTime, filter, listSeparatorToken);
        }

        /// <summary>
        /// Serializes a <see cref="ExportOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exportOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExportOptions exportOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, exportOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExportOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exportOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExportOptions exportOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            var outputFormatRawValue = ExportOptions.OutputFormatEnumToJsonValue(exportOptions.OutputFormat);
            writer.WriteString("outputFormat", outputFormatRawValue);
            if (exportOptions.ExcludePreviouslyExportedOption.IsSet)
                if (exportOptions.ExcludePreviouslyExportedOption.Value != null)
                    writer.WriteBoolean("excludePreviouslyExported", exportOptions.ExcludePreviouslyExportedOption.Value.Value);
                else
                    writer.WriteNull("excludePreviouslyExported");

            if (exportOptions.CreatedEarliestTimeOption.IsSet)
                if (exportOptions.CreatedEarliestTimeOption.Value != null)
                    writer.WriteString("createdEarliestTime", exportOptions.CreatedEarliestTimeOption.Value.Value.ToString(CreatedEarliestTimeFormat));
                else
                    writer.WriteNull("createdEarliestTime");

            if (exportOptions.CreatedOldestTimeOption.IsSet)
                if (exportOptions.CreatedOldestTimeOption.Value != null)
                    writer.WriteString("createdOldestTime", exportOptions.CreatedOldestTimeOption.Value.Value.ToString(CreatedOldestTimeFormat));
                else
                    writer.WriteNull("createdOldestTime");

            if (exportOptions.FilterOption.IsSet)
                if (exportOptions.FilterOption.Value != null)
                    writer.WriteString("filter", exportOptions.Filter);
                else
                    writer.WriteNull("filter");

            if (exportOptions.ListSeparatorTokenOption.IsSet)
                if (exportOptions.ListSeparatorTokenOption.Value != null)
                    writer.WriteString("listSeparatorToken", exportOptions.ListSeparatorToken);
                else
                    writer.WriteNull("listSeparatorToken");
        }
    }
}
