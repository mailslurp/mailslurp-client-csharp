/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for exporting user data
    /// </summary>
    [DataContract(Name = "ExportOptions")]
    public partial class ExportOptions : IEquatable<ExportOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines OutputFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputFormatEnum
        {
            /// <summary>
            /// Enum DEFAULT for value: CSV_DEFAULT
            /// </summary>
            [EnumMember(Value = "CSV_DEFAULT")]
            DEFAULT = 1,

            /// <summary>
            /// Enum EXCEL for value: CSV_EXCEL
            /// </summary>
            [EnumMember(Value = "CSV_EXCEL")]
            EXCEL = 2

        }


        /// <summary>
        /// Gets or Sets OutputFormat
        /// </summary>
        [DataMember(Name = "outputFormat", IsRequired = true, EmitDefaultValue = true)]
        public OutputFormatEnum OutputFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExportOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportOptions" /> class.
        /// </summary>
        /// <param name="outputFormat">outputFormat (required).</param>
        /// <param name="excludePreviouslyExported">excludePreviouslyExported.</param>
        /// <param name="createdEarliestTime">createdEarliestTime.</param>
        /// <param name="createdOldestTime">createdOldestTime.</param>
        /// <param name="filter">filter.</param>
        /// <param name="listSeparatorToken">listSeparatorToken.</param>
        public ExportOptions(OutputFormatEnum outputFormat = default(OutputFormatEnum), bool? excludePreviouslyExported = default(bool?), DateTime? createdEarliestTime = default(DateTime?), DateTime? createdOldestTime = default(DateTime?), string filter = default(string), string listSeparatorToken = default(string))
        {
            this.OutputFormat = outputFormat;
            this.ExcludePreviouslyExported = excludePreviouslyExported;
            this.CreatedEarliestTime = createdEarliestTime;
            this.CreatedOldestTime = createdOldestTime;
            this.Filter = filter;
            this.ListSeparatorToken = listSeparatorToken;
        }

        /// <summary>
        /// Gets or Sets ExcludePreviouslyExported
        /// </summary>
        [DataMember(Name = "excludePreviouslyExported", EmitDefaultValue = true)]
        public bool? ExcludePreviouslyExported { get; set; }

        /// <summary>
        /// Gets or Sets CreatedEarliestTime
        /// </summary>
        [DataMember(Name = "createdEarliestTime", EmitDefaultValue = true)]
        public DateTime? CreatedEarliestTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOldestTime
        /// </summary>
        [DataMember(Name = "createdOldestTime", EmitDefaultValue = true)]
        public DateTime? CreatedOldestTime { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// Gets or Sets ListSeparatorToken
        /// </summary>
        [DataMember(Name = "listSeparatorToken", EmitDefaultValue = true)]
        public string ListSeparatorToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExportOptions {\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  ExcludePreviouslyExported: ").Append(ExcludePreviouslyExported).Append("\n");
            sb.Append("  CreatedEarliestTime: ").Append(CreatedEarliestTime).Append("\n");
            sb.Append("  CreatedOldestTime: ").Append(CreatedOldestTime).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  ListSeparatorToken: ").Append(ListSeparatorToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportOptions);
        }

        /// <summary>
        /// Returns true if ExportOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OutputFormat == input.OutputFormat ||
                    this.OutputFormat.Equals(input.OutputFormat)
                ) && 
                (
                    this.ExcludePreviouslyExported == input.ExcludePreviouslyExported ||
                    (this.ExcludePreviouslyExported != null &&
                    this.ExcludePreviouslyExported.Equals(input.ExcludePreviouslyExported))
                ) && 
                (
                    this.CreatedEarliestTime == input.CreatedEarliestTime ||
                    (this.CreatedEarliestTime != null &&
                    this.CreatedEarliestTime.Equals(input.CreatedEarliestTime))
                ) && 
                (
                    this.CreatedOldestTime == input.CreatedOldestTime ||
                    (this.CreatedOldestTime != null &&
                    this.CreatedOldestTime.Equals(input.CreatedOldestTime))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.ListSeparatorToken == input.ListSeparatorToken ||
                    (this.ListSeparatorToken != null &&
                    this.ListSeparatorToken.Equals(input.ListSeparatorToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                if (this.ExcludePreviouslyExported != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludePreviouslyExported.GetHashCode();
                }
                if (this.CreatedEarliestTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedEarliestTime.GetHashCode();
                }
                if (this.CreatedOldestTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedOldestTime.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.ListSeparatorToken != null)
                {
                    hashCode = (hashCode * 59) + this.ListSeparatorToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
