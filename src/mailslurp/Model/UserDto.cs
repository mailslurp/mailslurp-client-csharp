/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Representation a user&#39;s account
    /// </summary>
    [DataContract]
    public partial class UserDto :  IEquatable<UserDto>, IValidatableObject
    {
        /// <summary>
        /// Defines UserType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserTypeEnum
        {
            /// <summary>
            /// Enum SOLO for value: SOLO
            /// </summary>
            [EnumMember(Value = "SOLO")]
            SOLO = 1,

            /// <summary>
            /// Enum CHILDSOLO for value: CHILD_SOLO
            /// </summary>
            [EnumMember(Value = "CHILD_SOLO")]
            CHILDSOLO = 2,

            /// <summary>
            /// Enum CHILDTEAM for value: CHILD_TEAM
            /// </summary>
            [EnumMember(Value = "CHILD_TEAM")]
            CHILDTEAM = 3

        }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="userType", EmitDefaultValue=false)]
        public UserTypeEnum? UserType { get; set; }
        /// <summary>
        /// Has user accepted an organization invite
        /// </summary>
        /// <value>Has user accepted an organization invite</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerifiedEnum
        {
            /// <summary>
            /// Enum VERIFIED for value: VERIFIED
            /// </summary>
            [EnumMember(Value = "VERIFIED")]
            VERIFIED = 1,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 2

        }

        /// <summary>
        /// Has user accepted an organization invite
        /// </summary>
        /// <value>Has user accepted an organization invite</value>
        [DataMember(Name="verified", EmitDefaultValue=false)]
        public VerifiedEnum? Verified { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="apiKey">apiKey (required).</param>
        /// <param name="emailAddress">emailAddress (required).</param>
        /// <param name="emailAddressMd5">emailAddressMd5 (required).</param>
        /// <param name="created">created.</param>
        /// <param name="userType">userType.</param>
        /// <param name="organization">Does user belong to an organization.</param>
        /// <param name="verified">Has user accepted an organization invite.</param>
        /// <param name="hasPassword">hasPassword (required).</param>
        /// <param name="isFrozen">isFrozen (required).</param>
        /// <param name="addNewContacts">addNewContacts.</param>
        /// <param name="ssoProvider">ssoProvider.</param>
        /// <param name="customerId">customerId.</param>
        /// <param name="hasOnboarded">hasOnboarded.</param>
        /// <param name="imapUsername">imapUsername.</param>
        /// <param name="imapPassword">imapPassword.</param>
        /// <param name="smtpUsername">smtpUsername.</param>
        /// <param name="smtpPassword">smtpPassword.</param>
        public UserDto(Guid id = default(Guid), string apiKey = default(string), string emailAddress = default(string), string emailAddressMd5 = default(string), DateTime created = default(DateTime), UserTypeEnum? userType = default(UserTypeEnum?), Guid organization = default(Guid), VerifiedEnum? verified = default(VerifiedEnum?), bool hasPassword = default(bool), bool isFrozen = default(bool), bool addNewContacts = default(bool), string ssoProvider = default(string), string customerId = default(string), bool hasOnboarded = default(bool), string imapUsername = default(string), string imapPassword = default(string), string smtpUsername = default(string), string smtpPassword = default(string))
        {
            this.Id = id;
            // to ensure "apiKey" is required (not null)
            this.ApiKey = apiKey ?? throw new ArgumentNullException("apiKey is a required property for UserDto and cannot be null");
            // to ensure "emailAddress" is required (not null)
            this.EmailAddress = emailAddress ?? throw new ArgumentNullException("emailAddress is a required property for UserDto and cannot be null");
            // to ensure "emailAddressMd5" is required (not null)
            this.EmailAddressMd5 = emailAddressMd5 ?? throw new ArgumentNullException("emailAddressMd5 is a required property for UserDto and cannot be null");
            this.HasPassword = hasPassword;
            this.IsFrozen = isFrozen;
            this.Created = created;
            this.UserType = userType;
            this.Organization = organization;
            this.Verified = verified;
            this.AddNewContacts = addNewContacts;
            this.SsoProvider = ssoProvider;
            this.CustomerId = customerId;
            this.HasOnboarded = hasOnboarded;
            this.ImapUsername = imapUsername;
            this.ImapPassword = imapPassword;
            this.SmtpUsername = smtpUsername;
            this.SmtpPassword = smtpPassword;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="apiKey", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddressMd5
        /// </summary>
        [DataMember(Name="emailAddressMd5", EmitDefaultValue=false)]
        public string EmailAddressMd5 { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Does user belong to an organization
        /// </summary>
        /// <value>Does user belong to an organization</value>
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public Guid Organization { get; set; }

        /// <summary>
        /// Gets or Sets HasPassword
        /// </summary>
        [DataMember(Name="hasPassword", EmitDefaultValue=false)]
        public bool HasPassword { get; set; }

        /// <summary>
        /// Gets or Sets IsFrozen
        /// </summary>
        [DataMember(Name="isFrozen", EmitDefaultValue=false)]
        public bool IsFrozen { get; set; }

        /// <summary>
        /// Gets or Sets AddNewContacts
        /// </summary>
        [DataMember(Name="addNewContacts", EmitDefaultValue=false)]
        public bool AddNewContacts { get; set; }

        /// <summary>
        /// Gets or Sets SsoProvider
        /// </summary>
        [DataMember(Name="ssoProvider", EmitDefaultValue=false)]
        public string SsoProvider { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets HasOnboarded
        /// </summary>
        [DataMember(Name="hasOnboarded", EmitDefaultValue=false)]
        public bool HasOnboarded { get; set; }

        /// <summary>
        /// Gets or Sets ImapUsername
        /// </summary>
        [DataMember(Name="imapUsername", EmitDefaultValue=false)]
        public string ImapUsername { get; set; }

        /// <summary>
        /// Gets or Sets ImapPassword
        /// </summary>
        [DataMember(Name="imapPassword", EmitDefaultValue=false)]
        public string ImapPassword { get; set; }

        /// <summary>
        /// Gets or Sets SmtpUsername
        /// </summary>
        [DataMember(Name="smtpUsername", EmitDefaultValue=false)]
        public string SmtpUsername { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPassword
        /// </summary>
        [DataMember(Name="smtpPassword", EmitDefaultValue=false)]
        public string SmtpPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  EmailAddressMd5: ").Append(EmailAddressMd5).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  IsFrozen: ").Append(IsFrozen).Append("\n");
            sb.Append("  AddNewContacts: ").Append(AddNewContacts).Append("\n");
            sb.Append("  SsoProvider: ").Append(SsoProvider).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  HasOnboarded: ").Append(HasOnboarded).Append("\n");
            sb.Append("  ImapUsername: ").Append(ImapUsername).Append("\n");
            sb.Append("  ImapPassword: ").Append(ImapPassword).Append("\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserDto);
        }

        /// <summary>
        /// Returns true if UserDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UserDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.EmailAddressMd5 == input.EmailAddressMd5 ||
                    (this.EmailAddressMd5 != null &&
                    this.EmailAddressMd5.Equals(input.EmailAddressMd5))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.UserType == input.UserType ||
                    this.UserType.Equals(input.UserType)
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.Verified == input.Verified ||
                    this.Verified.Equals(input.Verified)
                ) && 
                (
                    this.HasPassword == input.HasPassword ||
                    this.HasPassword.Equals(input.HasPassword)
                ) && 
                (
                    this.IsFrozen == input.IsFrozen ||
                    this.IsFrozen.Equals(input.IsFrozen)
                ) && 
                (
                    this.AddNewContacts == input.AddNewContacts ||
                    this.AddNewContacts.Equals(input.AddNewContacts)
                ) && 
                (
                    this.SsoProvider == input.SsoProvider ||
                    (this.SsoProvider != null &&
                    this.SsoProvider.Equals(input.SsoProvider))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.HasOnboarded == input.HasOnboarded ||
                    this.HasOnboarded.Equals(input.HasOnboarded)
                ) && 
                (
                    this.ImapUsername == input.ImapUsername ||
                    (this.ImapUsername != null &&
                    this.ImapUsername.Equals(input.ImapUsername))
                ) && 
                (
                    this.ImapPassword == input.ImapPassword ||
                    (this.ImapPassword != null &&
                    this.ImapPassword.Equals(input.ImapPassword))
                ) && 
                (
                    this.SmtpUsername == input.SmtpUsername ||
                    (this.SmtpUsername != null &&
                    this.SmtpUsername.Equals(input.SmtpUsername))
                ) && 
                (
                    this.SmtpPassword == input.SmtpPassword ||
                    (this.SmtpPassword != null &&
                    this.SmtpPassword.Equals(input.SmtpPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.EmailAddressMd5 != null)
                    hashCode = hashCode * 59 + this.EmailAddressMd5.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.Organization != null)
                    hashCode = hashCode * 59 + this.Organization.GetHashCode();
                hashCode = hashCode * 59 + this.Verified.GetHashCode();
                hashCode = hashCode * 59 + this.HasPassword.GetHashCode();
                hashCode = hashCode * 59 + this.IsFrozen.GetHashCode();
                hashCode = hashCode * 59 + this.AddNewContacts.GetHashCode();
                if (this.SsoProvider != null)
                    hashCode = hashCode * 59 + this.SsoProvider.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                hashCode = hashCode * 59 + this.HasOnboarded.GetHashCode();
                if (this.ImapUsername != null)
                    hashCode = hashCode * 59 + this.ImapUsername.GetHashCode();
                if (this.ImapPassword != null)
                    hashCode = hashCode * 59 + this.ImapPassword.GetHashCode();
                if (this.SmtpUsername != null)
                    hashCode = hashCode * 59 + this.SmtpUsername.GetHashCode();
                if (this.SmtpPassword != null)
                    hashCode = hashCode * 59 + this.SmtpPassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
