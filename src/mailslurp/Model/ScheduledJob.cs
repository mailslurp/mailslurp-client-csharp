// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ScheduledJob
    /// </summary>
    public partial class ScheduledJob : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledJob" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="jobId">jobId</param>
        /// <param name="groupId">groupId</param>
        /// <param name="triggerId">triggerId</param>
        /// <param name="status">status</param>
        /// <param name="sendAtTimestamp">sendAtTimestamp</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public ScheduledJob(Guid id, Guid userId, Guid inboxId, string jobId, string groupId, string triggerId, StatusEnum status, DateTime sendAtTimestamp, DateTime createdAt, DateTime updatedAt)
        {
            Id = id;
            UserId = userId;
            InboxId = inboxId;
            JobId = jobId;
            GroupId = groupId;
            TriggerId = triggerId;
            Status = status;
            SendAtTimestamp = sendAtTimestamp;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SUBMITTED for value: SUBMITTED
            /// </summary>
            SUBMITTED = 1,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            COMPLETED = 2,

            /// <summary>
            /// Enum ABORTED for value: ABORTED
            /// </summary>
            ABORTED = 3,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            FAILED = 4,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            CANCELLED = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("SUBMITTED"))
                return StatusEnum.SUBMITTED;

            if (value.Equals("COMPLETED"))
                return StatusEnum.COMPLETED;

            if (value.Equals("ABORTED"))
                return StatusEnum.ABORTED;

            if (value.Equals("FAILED"))
                return StatusEnum.FAILED;

            if (value.Equals("CANCELLED"))
                return StatusEnum.CANCELLED;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SUBMITTED"))
                return StatusEnum.SUBMITTED;

            if (value.Equals("COMPLETED"))
                return StatusEnum.COMPLETED;

            if (value.Equals("ABORTED"))
                return StatusEnum.ABORTED;

            if (value.Equals("FAILED"))
                return StatusEnum.FAILED;

            if (value.Equals("CANCELLED"))
                return StatusEnum.CANCELLED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.SUBMITTED)
                return "SUBMITTED";

            if (value == StatusEnum.COMPLETED)
                return "COMPLETED";

            if (value == StatusEnum.ABORTED)
                return "ABORTED";

            if (value == StatusEnum.FAILED)
                return "FAILED";

            if (value == StatusEnum.CANCELLED)
                return "CANCELLED";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [JsonPropertyName("jobId")]
        public string JobId { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [JsonPropertyName("groupId")]
        public string GroupId { get; set; }

        /// <summary>
        /// Gets or Sets TriggerId
        /// </summary>
        [JsonPropertyName("triggerId")]
        public string TriggerId { get; set; }

        /// <summary>
        /// Gets or Sets SendAtTimestamp
        /// </summary>
        [JsonPropertyName("sendAtTimestamp")]
        public DateTime SendAtTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduledJob {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  TriggerId: ").Append(TriggerId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SendAtTimestamp: ").Append(SendAtTimestamp).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ScheduledJob" />
    /// </summary>
    public class ScheduledJobJsonConverter : JsonConverter<ScheduledJob>
    {
        /// <summary>
        /// The format to use to serialize SendAtTimestamp
        /// </summary>
        public static string SendAtTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ScheduledJob" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ScheduledJob Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<Guid?> inboxId = default;
            Option<string> jobId = default;
            Option<string> groupId = default;
            Option<string> triggerId = default;
            Option<ScheduledJob.StatusEnum?> status = default;
            Option<DateTime?> sendAtTimestamp = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "jobId":
                            jobId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "groupId":
                            groupId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "triggerId":
                            triggerId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ScheduledJob.StatusEnum?>(ScheduledJob.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "sendAtTimestamp":
                            sendAtTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ScheduledJob.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class ScheduledJob.", nameof(userId));

            if (!inboxId.IsSet)
                throw new ArgumentException("Property is required for class ScheduledJob.", nameof(inboxId));

            if (!jobId.IsSet)
                throw new ArgumentException("Property is required for class ScheduledJob.", nameof(jobId));

            if (!groupId.IsSet)
                throw new ArgumentException("Property is required for class ScheduledJob.", nameof(groupId));

            if (!triggerId.IsSet)
                throw new ArgumentException("Property is required for class ScheduledJob.", nameof(triggerId));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class ScheduledJob.", nameof(status));

            if (!sendAtTimestamp.IsSet)
                throw new ArgumentException("Property is required for class ScheduledJob.", nameof(sendAtTimestamp));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class ScheduledJob.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class ScheduledJob.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ScheduledJob.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class ScheduledJob.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class ScheduledJob.");

            if (jobId.IsSet && jobId.Value == null)
                throw new ArgumentNullException(nameof(jobId), "Property is not nullable for class ScheduledJob.");

            if (groupId.IsSet && groupId.Value == null)
                throw new ArgumentNullException(nameof(groupId), "Property is not nullable for class ScheduledJob.");

            if (triggerId.IsSet && triggerId.Value == null)
                throw new ArgumentNullException(nameof(triggerId), "Property is not nullable for class ScheduledJob.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ScheduledJob.");

            if (sendAtTimestamp.IsSet && sendAtTimestamp.Value == null)
                throw new ArgumentNullException(nameof(sendAtTimestamp), "Property is not nullable for class ScheduledJob.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ScheduledJob.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class ScheduledJob.");

            return new ScheduledJob(id.Value.Value, userId.Value.Value, inboxId.Value.Value, jobId.Value, groupId.Value, triggerId.Value, status.Value.Value, sendAtTimestamp.Value.Value, createdAt.Value.Value, updatedAt.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="ScheduledJob" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scheduledJob"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ScheduledJob scheduledJob, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, scheduledJob, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ScheduledJob" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scheduledJob"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ScheduledJob scheduledJob, JsonSerializerOptions jsonSerializerOptions)
        {
            if (scheduledJob.JobId == null)
                throw new ArgumentNullException(nameof(scheduledJob.JobId), "Property is required for class ScheduledJob.");

            if (scheduledJob.GroupId == null)
                throw new ArgumentNullException(nameof(scheduledJob.GroupId), "Property is required for class ScheduledJob.");

            if (scheduledJob.TriggerId == null)
                throw new ArgumentNullException(nameof(scheduledJob.TriggerId), "Property is required for class ScheduledJob.");

            writer.WriteString("id", scheduledJob.Id);

            writer.WriteString("userId", scheduledJob.UserId);

            writer.WriteString("inboxId", scheduledJob.InboxId);

            writer.WriteString("jobId", scheduledJob.JobId);

            writer.WriteString("groupId", scheduledJob.GroupId);

            writer.WriteString("triggerId", scheduledJob.TriggerId);

            var statusRawValue = ScheduledJob.StatusEnumToJsonValue(scheduledJob.Status);
            writer.WriteString("status", statusRawValue);
            writer.WriteString("sendAtTimestamp", scheduledJob.SendAtTimestamp.ToString(SendAtTimestampFormat));

            writer.WriteString("createdAt", scheduledJob.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", scheduledJob.UpdatedAt.ToString(UpdatedAtFormat));
        }
    }
}
