// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// OptInSendingConsentDto
    /// </summary>
    public partial class OptInSendingConsentDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptInSendingConsentDto" /> class.
        /// </summary>
        /// <param name="verificationCodeSent">verificationCodeSent</param>
        /// <param name="userHasConsented">userHasConsented</param>
        /// <param name="canSend">canSend</param>
        [JsonConstructor]
        public OptInSendingConsentDto(bool verificationCodeSent, bool userHasConsented, bool canSend)
        {
            VerificationCodeSent = verificationCodeSent;
            UserHasConsented = userHasConsented;
            CanSend = canSend;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets VerificationCodeSent
        /// </summary>
        [JsonPropertyName("verificationCodeSent")]
        public bool VerificationCodeSent { get; set; }

        /// <summary>
        /// Gets or Sets UserHasConsented
        /// </summary>
        [JsonPropertyName("userHasConsented")]
        public bool UserHasConsented { get; set; }

        /// <summary>
        /// Gets or Sets CanSend
        /// </summary>
        [JsonPropertyName("canSend")]
        public bool CanSend { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptInSendingConsentDto {\n");
            sb.Append("  VerificationCodeSent: ").Append(VerificationCodeSent).Append("\n");
            sb.Append("  UserHasConsented: ").Append(UserHasConsented).Append("\n");
            sb.Append("  CanSend: ").Append(CanSend).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OptInSendingConsentDto" />
    /// </summary>
    public class OptInSendingConsentDtoJsonConverter : JsonConverter<OptInSendingConsentDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="OptInSendingConsentDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OptInSendingConsentDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> verificationCodeSent = default;
            Option<bool?> userHasConsented = default;
            Option<bool?> canSend = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "verificationCodeSent":
                            verificationCodeSent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "userHasConsented":
                            userHasConsented = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "canSend":
                            canSend = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!verificationCodeSent.IsSet)
                throw new ArgumentException("Property is required for class OptInSendingConsentDto.", nameof(verificationCodeSent));

            if (!userHasConsented.IsSet)
                throw new ArgumentException("Property is required for class OptInSendingConsentDto.", nameof(userHasConsented));

            if (!canSend.IsSet)
                throw new ArgumentException("Property is required for class OptInSendingConsentDto.", nameof(canSend));

            if (verificationCodeSent.IsSet && verificationCodeSent.Value == null)
                throw new ArgumentNullException(nameof(verificationCodeSent), "Property is not nullable for class OptInSendingConsentDto.");

            if (userHasConsented.IsSet && userHasConsented.Value == null)
                throw new ArgumentNullException(nameof(userHasConsented), "Property is not nullable for class OptInSendingConsentDto.");

            if (canSend.IsSet && canSend.Value == null)
                throw new ArgumentNullException(nameof(canSend), "Property is not nullable for class OptInSendingConsentDto.");

            return new OptInSendingConsentDto(verificationCodeSent.Value.Value, userHasConsented.Value.Value, canSend.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="OptInSendingConsentDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="optInSendingConsentDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OptInSendingConsentDto optInSendingConsentDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, optInSendingConsentDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OptInSendingConsentDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="optInSendingConsentDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OptInSendingConsentDto optInSendingConsentDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteBoolean("verificationCodeSent", optInSendingConsentDto.VerificationCodeSent);

            writer.WriteBoolean("userHasConsented", optInSendingConsentDto.UserHasConsented);

            writer.WriteBoolean("canSend", optInSendingConsentDto.CanSend);
        }
    }
}
