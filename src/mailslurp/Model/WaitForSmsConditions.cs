// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Conditions to apply to emails that you are waiting for
    /// </summary>
    public partial class WaitForSmsConditions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WaitForSmsConditions" /> class.
        /// </summary>
        /// <param name="phoneNumberId">ID of phone number to search within and apply conditions to. Essentially filtering the SMS found to give a count.</param>
        /// <param name="count">Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation.</param>
        /// <param name="timeout">Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met.</param>
        /// <param name="limit">Limit results</param>
        /// <param name="delayTimeout">Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified.</param>
        /// <param name="unreadOnly">Apply conditions only to **unread** SMS. All SMS messages begin with &#x60;read&#x3D;false&#x60;. An SMS is marked &#x60;read&#x3D;true&#x60; when an &#x60;SMS&#x60; has been returned to the user at least once. For example you have called &#x60;getSms&#x60;, or you have viewed the SMS in the dashboard.</param>
        /// <param name="countType">How result size should be compared with the expected size. Exactly or at-least matching result?</param>
        /// <param name="matches">Conditions that should be matched for an SMS to qualify for results. Each condition will be applied in order to each SMS within a phone number to filter a result list of matching SMSs you are waiting for.</param>
        /// <param name="sortDirection">Direction to sort matching SMSs by created time</param>
        /// <param name="since">ISO Date Time earliest time of SMS to consider. Filter for matching SMSs that were received after this date</param>
        /// <param name="before">ISO Date Time latest time of SMS to consider. Filter for matching SMSs that were received before this date</param>
        [JsonConstructor]
        public WaitForSmsConditions(Guid phoneNumberId, long count, long timeout, Option<int?> limit = default, Option<long?> delayTimeout = default, Option<bool?> unreadOnly = default, Option<CountTypeEnum?> countType = default, Option<List<SmsMatchOption>> matches = default, Option<SortDirectionEnum?> sortDirection = default, Option<DateTime?> since = default, Option<DateTime?> before = default)
        {
            PhoneNumberId = phoneNumberId;
            Count = count;
            Timeout = timeout;
            LimitOption = limit;
            DelayTimeoutOption = delayTimeout;
            UnreadOnlyOption = unreadOnly;
            CountTypeOption = countType;
            MatchesOption = matches;
            SortDirectionOption = sortDirection;
            SinceOption = since;
            BeforeOption = before;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// How result size should be compared with the expected size. Exactly or at-least matching result?
        /// </summary>
        /// <value>How result size should be compared with the expected size. Exactly or at-least matching result?</value>
        public enum CountTypeEnum
        {
            /// <summary>
            /// Enum EXACTLY for value: EXACTLY
            /// </summary>
            EXACTLY = 1,

            /// <summary>
            /// Enum ATLEAST for value: ATLEAST
            /// </summary>
            ATLEAST = 2
        }

        /// <summary>
        /// Returns a <see cref="CountTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CountTypeEnum CountTypeEnumFromString(string value)
        {
            if (value.Equals("EXACTLY"))
                return CountTypeEnum.EXACTLY;

            if (value.Equals("ATLEAST"))
                return CountTypeEnum.ATLEAST;

            throw new NotImplementedException($"Could not convert value to type CountTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CountTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CountTypeEnum? CountTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EXACTLY"))
                return CountTypeEnum.EXACTLY;

            if (value.Equals("ATLEAST"))
                return CountTypeEnum.ATLEAST;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CountTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CountTypeEnumToJsonValue(CountTypeEnum? value)
        {
            if (value == null)
                return null;

            if (value == CountTypeEnum.EXACTLY)
                return "EXACTLY";

            if (value == CountTypeEnum.ATLEAST)
                return "ATLEAST";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of CountType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CountTypeEnum?> CountTypeOption { get; private set; }

        /// <summary>
        /// How result size should be compared with the expected size. Exactly or at-least matching result?
        /// </summary>
        /// <value>How result size should be compared with the expected size. Exactly or at-least matching result?</value>
        [JsonPropertyName("countType")]
        public CountTypeEnum? CountType { get { return this.CountTypeOption; } set { this.CountTypeOption = new Option<CountTypeEnum?>(value); } }

        /// <summary>
        /// Direction to sort matching SMSs by created time
        /// </summary>
        /// <value>Direction to sort matching SMSs by created time</value>
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="SortDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SortDirectionEnum SortDirectionEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return SortDirectionEnum.ASC;

            if (value.Equals("DESC"))
                return SortDirectionEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type SortDirectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SortDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SortDirectionEnum? SortDirectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return SortDirectionEnum.ASC;

            if (value.Equals("DESC"))
                return SortDirectionEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SortDirectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SortDirectionEnumToJsonValue(SortDirectionEnum? value)
        {
            if (value == null)
                return null;

            if (value == SortDirectionEnum.ASC)
                return "ASC";

            if (value == SortDirectionEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SortDirection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SortDirectionEnum?> SortDirectionOption { get; private set; }

        /// <summary>
        /// Direction to sort matching SMSs by created time
        /// </summary>
        /// <value>Direction to sort matching SMSs by created time</value>
        [JsonPropertyName("sortDirection")]
        public SortDirectionEnum? SortDirection { get { return this.SortDirectionOption; } set { this.SortDirectionOption = new Option<SortDirectionEnum?>(value); } }

        /// <summary>
        /// ID of phone number to search within and apply conditions to. Essentially filtering the SMS found to give a count.
        /// </summary>
        /// <value>ID of phone number to search within and apply conditions to. Essentially filtering the SMS found to give a count.</value>
        [JsonPropertyName("phoneNumberId")]
        public Guid PhoneNumberId { get; set; }

        /// <summary>
        /// Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation.
        /// </summary>
        /// <value>Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation.</value>
        [JsonPropertyName("count")]
        public long Count { get; set; }

        /// <summary>
        /// Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met.
        /// </summary>
        /// <value>Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met.</value>
        [JsonPropertyName("timeout")]
        public long Timeout { get; set; }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LimitOption { get; private set; }

        /// <summary>
        /// Limit results
        /// </summary>
        /// <value>Limit results</value>
        [JsonPropertyName("limit")]
        public int? Limit { get { return this.LimitOption; } set { this.LimitOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of DelayTimeout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DelayTimeoutOption { get; private set; }

        /// <summary>
        /// Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified.
        /// </summary>
        /// <value>Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified.</value>
        [JsonPropertyName("delayTimeout")]
        public long? DelayTimeout { get { return this.DelayTimeoutOption; } set { this.DelayTimeoutOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of UnreadOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UnreadOnlyOption { get; private set; }

        /// <summary>
        /// Apply conditions only to **unread** SMS. All SMS messages begin with &#x60;read&#x3D;false&#x60;. An SMS is marked &#x60;read&#x3D;true&#x60; when an &#x60;SMS&#x60; has been returned to the user at least once. For example you have called &#x60;getSms&#x60;, or you have viewed the SMS in the dashboard.
        /// </summary>
        /// <value>Apply conditions only to **unread** SMS. All SMS messages begin with &#x60;read&#x3D;false&#x60;. An SMS is marked &#x60;read&#x3D;true&#x60; when an &#x60;SMS&#x60; has been returned to the user at least once. For example you have called &#x60;getSms&#x60;, or you have viewed the SMS in the dashboard.</value>
        [JsonPropertyName("unreadOnly")]
        public bool? UnreadOnly { get { return this.UnreadOnlyOption; } set { this.UnreadOnlyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Matches
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SmsMatchOption>> MatchesOption { get; private set; }

        /// <summary>
        /// Conditions that should be matched for an SMS to qualify for results. Each condition will be applied in order to each SMS within a phone number to filter a result list of matching SMSs you are waiting for.
        /// </summary>
        /// <value>Conditions that should be matched for an SMS to qualify for results. Each condition will be applied in order to each SMS within a phone number to filter a result list of matching SMSs you are waiting for.</value>
        [JsonPropertyName("matches")]
        public List<SmsMatchOption> Matches { get { return this.MatchesOption; } set { this.MatchesOption = new Option<List<SmsMatchOption>>(value); } }

        /// <summary>
        /// Used to track the state of Since
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SinceOption { get; private set; }

        /// <summary>
        /// ISO Date Time earliest time of SMS to consider. Filter for matching SMSs that were received after this date
        /// </summary>
        /// <value>ISO Date Time earliest time of SMS to consider. Filter for matching SMSs that were received after this date</value>
        [JsonPropertyName("since")]
        public DateTime? Since { get { return this.SinceOption; } set { this.SinceOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Before
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BeforeOption { get; private set; }

        /// <summary>
        /// ISO Date Time latest time of SMS to consider. Filter for matching SMSs that were received before this date
        /// </summary>
        /// <value>ISO Date Time latest time of SMS to consider. Filter for matching SMSs that were received before this date</value>
        [JsonPropertyName("before")]
        public DateTime? Before { get { return this.BeforeOption; } set { this.BeforeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WaitForSmsConditions {\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  DelayTimeout: ").Append(DelayTimeout).Append("\n");
            sb.Append("  UnreadOnly: ").Append(UnreadOnly).Append("\n");
            sb.Append("  CountType: ").Append(CountType).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WaitForSmsConditions" />
    /// </summary>
    public class WaitForSmsConditionsJsonConverter : JsonConverter<WaitForSmsConditions>
    {
        /// <summary>
        /// The format to use to serialize Since
        /// </summary>
        public static string SinceFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Before
        /// </summary>
        public static string BeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WaitForSmsConditions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WaitForSmsConditions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> phoneNumberId = default;
            Option<long?> count = default;
            Option<long?> timeout = default;
            Option<int?> limit = default;
            Option<long?> delayTimeout = default;
            Option<bool?> unreadOnly = default;
            Option<WaitForSmsConditions.CountTypeEnum?> countType = default;
            Option<List<SmsMatchOption>> matches = default;
            Option<WaitForSmsConditions.SortDirectionEnum?> sortDirection = default;
            Option<DateTime?> since = default;
            Option<DateTime?> before = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "phoneNumberId":
                            phoneNumberId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "count":
                            count = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "timeout":
                            timeout = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "limit":
                            limit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "delayTimeout":
                            delayTimeout = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "unreadOnly":
                            unreadOnly = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "countType":
                            string countTypeRawValue = utf8JsonReader.GetString();
                            if (countTypeRawValue != null)
                                countType = new Option<WaitForSmsConditions.CountTypeEnum?>(WaitForSmsConditions.CountTypeEnumFromStringOrDefault(countTypeRawValue));
                            break;
                        case "matches":
                            matches = new Option<List<SmsMatchOption>>(JsonSerializer.Deserialize<List<SmsMatchOption>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sortDirection":
                            string sortDirectionRawValue = utf8JsonReader.GetString();
                            if (sortDirectionRawValue != null)
                                sortDirection = new Option<WaitForSmsConditions.SortDirectionEnum?>(WaitForSmsConditions.SortDirectionEnumFromStringOrDefault(sortDirectionRawValue));
                            break;
                        case "since":
                            since = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "before":
                            before = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!phoneNumberId.IsSet)
                throw new ArgumentException("Property is required for class WaitForSmsConditions.", nameof(phoneNumberId));

            if (!count.IsSet)
                throw new ArgumentException("Property is required for class WaitForSmsConditions.", nameof(count));

            if (!timeout.IsSet)
                throw new ArgumentException("Property is required for class WaitForSmsConditions.", nameof(timeout));

            if (phoneNumberId.IsSet && phoneNumberId.Value == null)
                throw new ArgumentNullException(nameof(phoneNumberId), "Property is not nullable for class WaitForSmsConditions.");

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class WaitForSmsConditions.");

            if (timeout.IsSet && timeout.Value == null)
                throw new ArgumentNullException(nameof(timeout), "Property is not nullable for class WaitForSmsConditions.");

            return new WaitForSmsConditions(phoneNumberId.Value.Value, count.Value.Value, timeout.Value.Value, limit, delayTimeout, unreadOnly, countType, matches, sortDirection, since, before);
        }

        /// <summary>
        /// Serializes a <see cref="WaitForSmsConditions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="waitForSmsConditions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WaitForSmsConditions waitForSmsConditions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, waitForSmsConditions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WaitForSmsConditions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="waitForSmsConditions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WaitForSmsConditions waitForSmsConditions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("phoneNumberId", waitForSmsConditions.PhoneNumberId);

            writer.WriteNumber("count", waitForSmsConditions.Count);

            writer.WriteNumber("timeout", waitForSmsConditions.Timeout);

            if (waitForSmsConditions.LimitOption.IsSet)
                if (waitForSmsConditions.LimitOption.Value != null)
                    writer.WriteNumber("limit", waitForSmsConditions.LimitOption.Value.Value);
                else
                    writer.WriteNull("limit");

            if (waitForSmsConditions.DelayTimeoutOption.IsSet)
                if (waitForSmsConditions.DelayTimeoutOption.Value != null)
                    writer.WriteNumber("delayTimeout", waitForSmsConditions.DelayTimeoutOption.Value.Value);
                else
                    writer.WriteNull("delayTimeout");

            if (waitForSmsConditions.UnreadOnlyOption.IsSet)
                if (waitForSmsConditions.UnreadOnlyOption.Value != null)
                    writer.WriteBoolean("unreadOnly", waitForSmsConditions.UnreadOnlyOption.Value.Value);
                else
                    writer.WriteNull("unreadOnly");

            var countTypeRawValue = WaitForSmsConditions.CountTypeEnumToJsonValue(waitForSmsConditions.CountTypeOption.Value.Value);
            if (countTypeRawValue != null)
                writer.WriteString("countType", countTypeRawValue);
            else
                writer.WriteNull("countType");

            if (waitForSmsConditions.MatchesOption.IsSet)
                if (waitForSmsConditions.MatchesOption.Value != null)
                {
                    writer.WritePropertyName("matches");
                    JsonSerializer.Serialize(writer, waitForSmsConditions.Matches, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("matches");
            var sortDirectionRawValue = WaitForSmsConditions.SortDirectionEnumToJsonValue(waitForSmsConditions.SortDirectionOption.Value.Value);
            if (sortDirectionRawValue != null)
                writer.WriteString("sortDirection", sortDirectionRawValue);
            else
                writer.WriteNull("sortDirection");

            if (waitForSmsConditions.SinceOption.IsSet)
                if (waitForSmsConditions.SinceOption.Value != null)
                    writer.WriteString("since", waitForSmsConditions.SinceOption.Value.Value.ToString(SinceFormat));
                else
                    writer.WriteNull("since");

            if (waitForSmsConditions.BeforeOption.IsSet)
                if (waitForSmsConditions.BeforeOption.Value != null)
                    writer.WriteString("before", waitForSmsConditions.BeforeOption.Value.Value.ToString(BeforeFormat));
                else
                    writer.WriteNull("before");
        }
    }
}
