// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for the email envelope
    /// </summary>
    public partial class SendSMTPEnvelopeOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSMTPEnvelopeOptions" /> class.
        /// </summary>
        /// <param name="rcptTo">rcptTo</param>
        /// <param name="mailFrom">mailFrom</param>
        /// <param name="data">data</param>
        [JsonConstructor]
        public SendSMTPEnvelopeOptions(List<string> rcptTo, string mailFrom, string data)
        {
            RcptTo = rcptTo;
            MailFrom = mailFrom;
            Data = data;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RcptTo
        /// </summary>
        [JsonPropertyName("rcptTo")]
        public List<string> RcptTo { get; set; }

        /// <summary>
        /// Gets or Sets MailFrom
        /// </summary>
        [JsonPropertyName("mailFrom")]
        public string MailFrom { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public string Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendSMTPEnvelopeOptions {\n");
            sb.Append("  RcptTo: ").Append(RcptTo).Append("\n");
            sb.Append("  MailFrom: ").Append(MailFrom).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendSMTPEnvelopeOptions" />
    /// </summary>
    public class SendSMTPEnvelopeOptionsJsonConverter : JsonConverter<SendSMTPEnvelopeOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendSMTPEnvelopeOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendSMTPEnvelopeOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>> rcptTo = default;
            Option<string> mailFrom = default;
            Option<string> data = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rcptTo":
                            rcptTo = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mailFrom":
                            mailFrom = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!rcptTo.IsSet)
                throw new ArgumentException("Property is required for class SendSMTPEnvelopeOptions.", nameof(rcptTo));

            if (!mailFrom.IsSet)
                throw new ArgumentException("Property is required for class SendSMTPEnvelopeOptions.", nameof(mailFrom));

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class SendSMTPEnvelopeOptions.", nameof(data));

            if (rcptTo.IsSet && rcptTo.Value == null)
                throw new ArgumentNullException(nameof(rcptTo), "Property is not nullable for class SendSMTPEnvelopeOptions.");

            if (mailFrom.IsSet && mailFrom.Value == null)
                throw new ArgumentNullException(nameof(mailFrom), "Property is not nullable for class SendSMTPEnvelopeOptions.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class SendSMTPEnvelopeOptions.");

            return new SendSMTPEnvelopeOptions(rcptTo.Value, mailFrom.Value, data.Value);
        }

        /// <summary>
        /// Serializes a <see cref="SendSMTPEnvelopeOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendSMTPEnvelopeOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendSMTPEnvelopeOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendSMTPEnvelopeOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendSMTPEnvelopeOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendSMTPEnvelopeOptions.RcptTo == null)
                throw new ArgumentNullException(nameof(sendSMTPEnvelopeOptions.RcptTo), "Property is required for class SendSMTPEnvelopeOptions.");

            if (sendSMTPEnvelopeOptions.MailFrom == null)
                throw new ArgumentNullException(nameof(sendSMTPEnvelopeOptions.MailFrom), "Property is required for class SendSMTPEnvelopeOptions.");

            if (sendSMTPEnvelopeOptions.Data == null)
                throw new ArgumentNullException(nameof(sendSMTPEnvelopeOptions.Data), "Property is required for class SendSMTPEnvelopeOptions.");

            writer.WritePropertyName("rcptTo");
            JsonSerializer.Serialize(writer, sendSMTPEnvelopeOptions.RcptTo, jsonSerializerOptions);
            writer.WriteString("mailFrom", sendSMTPEnvelopeOptions.MailFrom);

            writer.WriteString("data", sendSMTPEnvelopeOptions.Data);
        }
    }
}
