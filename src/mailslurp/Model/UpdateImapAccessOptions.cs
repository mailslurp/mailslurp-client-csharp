// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Edit access details for inbox using IMAP
    /// </summary>
    public partial class UpdateImapAccessOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateImapAccessOptions" /> class.
        /// </summary>
        /// <param name="imapUsername">IMAP username for login</param>
        /// <param name="imapPassword">IMAP password for login</param>
        [JsonConstructor]
        public UpdateImapAccessOptions(Option<string> imapUsername = default, Option<string> imapPassword = default)
        {
            ImapUsernameOption = imapUsername;
            ImapPasswordOption = imapPassword;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ImapUsername
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ImapUsernameOption { get; private set; }

        /// <summary>
        /// IMAP username for login
        /// </summary>
        /// <value>IMAP username for login</value>
        [JsonPropertyName("imapUsername")]
        public string ImapUsername { get { return this.ImapUsernameOption; } set { this.ImapUsernameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ImapPassword
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ImapPasswordOption { get; private set; }

        /// <summary>
        /// IMAP password for login
        /// </summary>
        /// <value>IMAP password for login</value>
        [JsonPropertyName("imapPassword")]
        public string ImapPassword { get { return this.ImapPasswordOption; } set { this.ImapPasswordOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateImapAccessOptions {\n");
            sb.Append("  ImapUsername: ").Append(ImapUsername).Append("\n");
            sb.Append("  ImapPassword: ").Append(ImapPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateImapAccessOptions" />
    /// </summary>
    public class UpdateImapAccessOptionsJsonConverter : JsonConverter<UpdateImapAccessOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateImapAccessOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateImapAccessOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> imapUsername = default;
            Option<string> imapPassword = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "imapUsername":
                            imapUsername = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "imapPassword":
                            imapPassword = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new UpdateImapAccessOptions(imapUsername, imapPassword);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateImapAccessOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateImapAccessOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateImapAccessOptions updateImapAccessOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateImapAccessOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateImapAccessOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateImapAccessOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateImapAccessOptions updateImapAccessOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateImapAccessOptions.ImapUsernameOption.IsSet)
                if (updateImapAccessOptions.ImapUsernameOption.Value != null)
                    writer.WriteString("imapUsername", updateImapAccessOptions.ImapUsername);
                else
                    writer.WriteNull("imapUsername");

            if (updateImapAccessOptions.ImapPasswordOption.IsSet)
                if (updateImapAccessOptions.ImapPasswordOption.Value != null)
                    writer.WriteString("imapPassword", updateImapAccessOptions.ImapPassword);
                else
                    writer.WriteNull("imapPassword");
        }
    }
}
