// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// PhonePlanAvailabilityItem
    /// </summary>
    public partial class PhonePlanAvailabilityItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhonePlanAvailabilityItem" /> class.
        /// </summary>
        /// <param name="phoneCountry">phoneCountry</param>
        /// <param name="availabilityStatus">availabilityStatus</param>
        [JsonConstructor]
        public PhonePlanAvailabilityItem(PhoneCountryEnum phoneCountry, AvailabilityStatusEnum availabilityStatus)
        {
            PhoneCountry = phoneCountry;
            AvailabilityStatus = availabilityStatus;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines PhoneCountry
        /// </summary>
        public enum PhoneCountryEnum
        {
            /// <summary>
            /// Enum US for value: US
            /// </summary>
            US = 1,

            /// <summary>
            /// Enum GB for value: GB
            /// </summary>
            GB = 2,

            /// <summary>
            /// Enum AU for value: AU
            /// </summary>
            AU = 3,

            /// <summary>
            /// Enum CA for value: CA
            /// </summary>
            CA = 4,

            /// <summary>
            /// Enum EE for value: EE
            /// </summary>
            EE = 5,

            /// <summary>
            /// Enum HK for value: HK
            /// </summary>
            HK = 6,

            /// <summary>
            /// Enum PL for value: PL
            /// </summary>
            PL = 7,

            /// <summary>
            /// Enum CH for value: CH
            /// </summary>
            CH = 8,

            /// <summary>
            /// Enum PT for value: PT
            /// </summary>
            PT = 9,

            /// <summary>
            /// Enum NL for value: NL
            /// </summary>
            NL = 10,

            /// <summary>
            /// Enum IL for value: IL
            /// </summary>
            IL = 11,

            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            SE = 12
        }

        /// <summary>
        /// Returns a <see cref="PhoneCountryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PhoneCountryEnum PhoneCountryEnumFromString(string value)
        {
            if (value.Equals("US"))
                return PhoneCountryEnum.US;

            if (value.Equals("GB"))
                return PhoneCountryEnum.GB;

            if (value.Equals("AU"))
                return PhoneCountryEnum.AU;

            if (value.Equals("CA"))
                return PhoneCountryEnum.CA;

            if (value.Equals("EE"))
                return PhoneCountryEnum.EE;

            if (value.Equals("HK"))
                return PhoneCountryEnum.HK;

            if (value.Equals("PL"))
                return PhoneCountryEnum.PL;

            if (value.Equals("CH"))
                return PhoneCountryEnum.CH;

            if (value.Equals("PT"))
                return PhoneCountryEnum.PT;

            if (value.Equals("NL"))
                return PhoneCountryEnum.NL;

            if (value.Equals("IL"))
                return PhoneCountryEnum.IL;

            if (value.Equals("SE"))
                return PhoneCountryEnum.SE;

            throw new NotImplementedException($"Could not convert value to type PhoneCountryEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PhoneCountryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PhoneCountryEnum? PhoneCountryEnumFromStringOrDefault(string value)
        {
            if (value.Equals("US"))
                return PhoneCountryEnum.US;

            if (value.Equals("GB"))
                return PhoneCountryEnum.GB;

            if (value.Equals("AU"))
                return PhoneCountryEnum.AU;

            if (value.Equals("CA"))
                return PhoneCountryEnum.CA;

            if (value.Equals("EE"))
                return PhoneCountryEnum.EE;

            if (value.Equals("HK"))
                return PhoneCountryEnum.HK;

            if (value.Equals("PL"))
                return PhoneCountryEnum.PL;

            if (value.Equals("CH"))
                return PhoneCountryEnum.CH;

            if (value.Equals("PT"))
                return PhoneCountryEnum.PT;

            if (value.Equals("NL"))
                return PhoneCountryEnum.NL;

            if (value.Equals("IL"))
                return PhoneCountryEnum.IL;

            if (value.Equals("SE"))
                return PhoneCountryEnum.SE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PhoneCountryEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PhoneCountryEnumToJsonValue(PhoneCountryEnum value)
        {
            if (value == PhoneCountryEnum.US)
                return "US";

            if (value == PhoneCountryEnum.GB)
                return "GB";

            if (value == PhoneCountryEnum.AU)
                return "AU";

            if (value == PhoneCountryEnum.CA)
                return "CA";

            if (value == PhoneCountryEnum.EE)
                return "EE";

            if (value == PhoneCountryEnum.HK)
                return "HK";

            if (value == PhoneCountryEnum.PL)
                return "PL";

            if (value == PhoneCountryEnum.CH)
                return "CH";

            if (value == PhoneCountryEnum.PT)
                return "PT";

            if (value == PhoneCountryEnum.NL)
                return "NL";

            if (value == PhoneCountryEnum.IL)
                return "IL";

            if (value == PhoneCountryEnum.SE)
                return "SE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets PhoneCountry
        /// </summary>
        [JsonPropertyName("phoneCountry")]
        public PhoneCountryEnum PhoneCountry { get; set; }

        /// <summary>
        /// Defines AvailabilityStatus
        /// </summary>
        public enum AvailabilityStatusEnum
        {
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            AVAILABLE = 1,

            /// <summary>
            /// Enum NONMATCHINGSUBSCRIPTIONCURRENCY for value: NON_MATCHING_SUBSCRIPTION_CURRENCY
            /// </summary>
            NONMATCHINGSUBSCRIPTIONCURRENCY = 2,

            /// <summary>
            /// Enum NONMATCHINGSUBSCRIPTIONTYPE for value: NON_MATCHING_SUBSCRIPTION_TYPE
            /// </summary>
            NONMATCHINGSUBSCRIPTIONTYPE = 3,

            /// <summary>
            /// Enum ALREADYASSIGNED for value: ALREADY_ASSIGNED
            /// </summary>
            ALREADYASSIGNED = 4
        }

        /// <summary>
        /// Returns a <see cref="AvailabilityStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AvailabilityStatusEnum AvailabilityStatusEnumFromString(string value)
        {
            if (value.Equals("AVAILABLE"))
                return AvailabilityStatusEnum.AVAILABLE;

            if (value.Equals("NON_MATCHING_SUBSCRIPTION_CURRENCY"))
                return AvailabilityStatusEnum.NONMATCHINGSUBSCRIPTIONCURRENCY;

            if (value.Equals("NON_MATCHING_SUBSCRIPTION_TYPE"))
                return AvailabilityStatusEnum.NONMATCHINGSUBSCRIPTIONTYPE;

            if (value.Equals("ALREADY_ASSIGNED"))
                return AvailabilityStatusEnum.ALREADYASSIGNED;

            throw new NotImplementedException($"Could not convert value to type AvailabilityStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AvailabilityStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AvailabilityStatusEnum? AvailabilityStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("AVAILABLE"))
                return AvailabilityStatusEnum.AVAILABLE;

            if (value.Equals("NON_MATCHING_SUBSCRIPTION_CURRENCY"))
                return AvailabilityStatusEnum.NONMATCHINGSUBSCRIPTIONCURRENCY;

            if (value.Equals("NON_MATCHING_SUBSCRIPTION_TYPE"))
                return AvailabilityStatusEnum.NONMATCHINGSUBSCRIPTIONTYPE;

            if (value.Equals("ALREADY_ASSIGNED"))
                return AvailabilityStatusEnum.ALREADYASSIGNED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AvailabilityStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AvailabilityStatusEnumToJsonValue(AvailabilityStatusEnum value)
        {
            if (value == AvailabilityStatusEnum.AVAILABLE)
                return "AVAILABLE";

            if (value == AvailabilityStatusEnum.NONMATCHINGSUBSCRIPTIONCURRENCY)
                return "NON_MATCHING_SUBSCRIPTION_CURRENCY";

            if (value == AvailabilityStatusEnum.NONMATCHINGSUBSCRIPTIONTYPE)
                return "NON_MATCHING_SUBSCRIPTION_TYPE";

            if (value == AvailabilityStatusEnum.ALREADYASSIGNED)
                return "ALREADY_ASSIGNED";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets AvailabilityStatus
        /// </summary>
        [JsonPropertyName("availabilityStatus")]
        public AvailabilityStatusEnum AvailabilityStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhonePlanAvailabilityItem {\n");
            sb.Append("  PhoneCountry: ").Append(PhoneCountry).Append("\n");
            sb.Append("  AvailabilityStatus: ").Append(AvailabilityStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PhonePlanAvailabilityItem" />
    /// </summary>
    public class PhonePlanAvailabilityItemJsonConverter : JsonConverter<PhonePlanAvailabilityItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="PhonePlanAvailabilityItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PhonePlanAvailabilityItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PhonePlanAvailabilityItem.PhoneCountryEnum?> phoneCountry = default;
            Option<PhonePlanAvailabilityItem.AvailabilityStatusEnum?> availabilityStatus = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "phoneCountry":
                            string phoneCountryRawValue = utf8JsonReader.GetString();
                            if (phoneCountryRawValue != null)
                                phoneCountry = new Option<PhonePlanAvailabilityItem.PhoneCountryEnum?>(PhonePlanAvailabilityItem.PhoneCountryEnumFromStringOrDefault(phoneCountryRawValue));
                            break;
                        case "availabilityStatus":
                            string availabilityStatusRawValue = utf8JsonReader.GetString();
                            if (availabilityStatusRawValue != null)
                                availabilityStatus = new Option<PhonePlanAvailabilityItem.AvailabilityStatusEnum?>(PhonePlanAvailabilityItem.AvailabilityStatusEnumFromStringOrDefault(availabilityStatusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!phoneCountry.IsSet)
                throw new ArgumentException("Property is required for class PhonePlanAvailabilityItem.", nameof(phoneCountry));

            if (!availabilityStatus.IsSet)
                throw new ArgumentException("Property is required for class PhonePlanAvailabilityItem.", nameof(availabilityStatus));

            if (phoneCountry.IsSet && phoneCountry.Value == null)
                throw new ArgumentNullException(nameof(phoneCountry), "Property is not nullable for class PhonePlanAvailabilityItem.");

            if (availabilityStatus.IsSet && availabilityStatus.Value == null)
                throw new ArgumentNullException(nameof(availabilityStatus), "Property is not nullable for class PhonePlanAvailabilityItem.");

            return new PhonePlanAvailabilityItem(phoneCountry.Value.Value, availabilityStatus.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="PhonePlanAvailabilityItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="phonePlanAvailabilityItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PhonePlanAvailabilityItem phonePlanAvailabilityItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, phonePlanAvailabilityItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PhonePlanAvailabilityItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="phonePlanAvailabilityItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PhonePlanAvailabilityItem phonePlanAvailabilityItem, JsonSerializerOptions jsonSerializerOptions)
        {
            var phoneCountryRawValue = PhonePlanAvailabilityItem.PhoneCountryEnumToJsonValue(phonePlanAvailabilityItem.PhoneCountry);
            writer.WriteString("phoneCountry", phoneCountryRawValue);
            var availabilityStatusRawValue = PhonePlanAvailabilityItem.AvailabilityStatusEnumToJsonValue(phonePlanAvailabilityItem.AvailabilityStatus);
            writer.WriteString("availabilityStatus", availabilityStatusRawValue);
        }
    }
}
