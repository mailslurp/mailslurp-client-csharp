/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// PhonePlanAvailabilityItem
    /// </summary>
    [DataContract(Name = "PhonePlanAvailabilityItem")]
    public partial class PhonePlanAvailabilityItem : IValidatableObject
    {
        /// <summary>
        /// Defines PhoneCountry
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PhoneCountryEnum
        {
            /// <summary>
            /// Enum US for value: US
            /// </summary>
            [EnumMember(Value = "US")]
            US = 1,

            /// <summary>
            /// Enum GB for value: GB
            /// </summary>
            [EnumMember(Value = "GB")]
            GB = 2,

            /// <summary>
            /// Enum AU for value: AU
            /// </summary>
            [EnumMember(Value = "AU")]
            AU = 3,

            /// <summary>
            /// Enum CA for value: CA
            /// </summary>
            [EnumMember(Value = "CA")]
            CA = 4,

            /// <summary>
            /// Enum EE for value: EE
            /// </summary>
            [EnumMember(Value = "EE")]
            EE = 5,

            /// <summary>
            /// Enum HK for value: HK
            /// </summary>
            [EnumMember(Value = "HK")]
            HK = 6,

            /// <summary>
            /// Enum PL for value: PL
            /// </summary>
            [EnumMember(Value = "PL")]
            PL = 7,

            /// <summary>
            /// Enum CH for value: CH
            /// </summary>
            [EnumMember(Value = "CH")]
            CH = 8,

            /// <summary>
            /// Enum PT for value: PT
            /// </summary>
            [EnumMember(Value = "PT")]
            PT = 9,

            /// <summary>
            /// Enum NL for value: NL
            /// </summary>
            [EnumMember(Value = "NL")]
            NL = 10,

            /// <summary>
            /// Enum IL for value: IL
            /// </summary>
            [EnumMember(Value = "IL")]
            IL = 11,

            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            [EnumMember(Value = "SE")]
            SE = 12
        }


        /// <summary>
        /// Gets or Sets PhoneCountry
        /// </summary>
        [DataMember(Name = "phoneCountry", IsRequired = true, EmitDefaultValue = true)]
        public PhoneCountryEnum PhoneCountry { get; set; }
        /// <summary>
        /// Defines AvailabilityStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityStatusEnum
        {
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 1,

            /// <summary>
            /// Enum NONMATCHINGSUBSCRIPTIONCURRENCY for value: NON_MATCHING_SUBSCRIPTION_CURRENCY
            /// </summary>
            [EnumMember(Value = "NON_MATCHING_SUBSCRIPTION_CURRENCY")]
            NONMATCHINGSUBSCRIPTIONCURRENCY = 2,

            /// <summary>
            /// Enum NONMATCHINGSUBSCRIPTIONTYPE for value: NON_MATCHING_SUBSCRIPTION_TYPE
            /// </summary>
            [EnumMember(Value = "NON_MATCHING_SUBSCRIPTION_TYPE")]
            NONMATCHINGSUBSCRIPTIONTYPE = 3,

            /// <summary>
            /// Enum ALREADYASSIGNED for value: ALREADY_ASSIGNED
            /// </summary>
            [EnumMember(Value = "ALREADY_ASSIGNED")]
            ALREADYASSIGNED = 4
        }


        /// <summary>
        /// Gets or Sets AvailabilityStatus
        /// </summary>
        [DataMember(Name = "availabilityStatus", IsRequired = true, EmitDefaultValue = true)]
        public AvailabilityStatusEnum AvailabilityStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhonePlanAvailabilityItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhonePlanAvailabilityItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhonePlanAvailabilityItem" /> class.
        /// </summary>
        /// <param name="phoneCountry">phoneCountry (required).</param>
        /// <param name="availabilityStatus">availabilityStatus (required).</param>
        public PhonePlanAvailabilityItem(PhoneCountryEnum phoneCountry = default, AvailabilityStatusEnum availabilityStatus = default)
        {
            this.PhoneCountry = phoneCountry;
            this.AvailabilityStatus = availabilityStatus;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhonePlanAvailabilityItem {\n");
            sb.Append("  PhoneCountry: ").Append(PhoneCountry).Append("\n");
            sb.Append("  AvailabilityStatus: ").Append(AvailabilityStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
