// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Sent email details
    /// </summary>
    public partial class SentEmailDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SentEmailDto" /> class.
        /// </summary>
        /// <param name="id">ID of sent email</param>
        /// <param name="userId">User ID</param>
        /// <param name="inboxId">Inbox ID email was sent from</param>
        /// <param name="sentAt">sentAt</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="domainId">Domain ID</param>
        /// <param name="to">Recipients email was sent to</param>
        /// <param name="from">Sent from address</param>
        /// <param name="sender">sender</param>
        /// <param name="recipients">recipients</param>
        /// <param name="replyTo">replyTo</param>
        /// <param name="cc">cc</param>
        /// <param name="bcc">bcc</param>
        /// <param name="attachments">Array of IDs of attachments that were sent with this email</param>
        /// <param name="subject">subject</param>
        /// <param name="bodyMD5Hash">MD5 Hash</param>
        /// <param name="body">Sent email body</param>
        /// <param name="toContacts">toContacts</param>
        /// <param name="toGroup">toGroup</param>
        /// <param name="charset">charset</param>
        /// <param name="isHTML">isHTML</param>
        /// <param name="pixelIds">pixelIds</param>
        /// <param name="messageId">RFC 5322 Message-ID header value without angle brackets.</param>
        /// <param name="messageIds">messageIds</param>
        /// <param name="virtualSend">virtualSend</param>
        /// <param name="templateId">templateId</param>
        /// <param name="templateVariables">templateVariables</param>
        /// <param name="headers">headers</param>
        /// <param name="threadId">MailSlurp thread ID for email chain that enables lookup for In-Reply-To and References fields.</param>
        /// <param name="bodyExcerpt">An excerpt of the body of the email message for quick preview. Takes HTML content part if exists falls back to TEXT content part if not</param>
        /// <param name="textExcerpt">An excerpt of the body of the email message for quick preview. Takes TEXT content part if exists</param>
        /// <param name="inReplyTo">Parsed value of In-Reply-To header. A Message-ID in a thread.</param>
        /// <param name="favourite">Is email favourited</param>
        /// <param name="sizeBytes">Size of raw email message in bytes</param>
        /// <param name="html">html</param>
        [JsonConstructor]
        public SentEmailDto(Guid id, Guid userId, Guid inboxId, DateTime sentAt, DateTime createdAt, Option<Guid?> domainId = default, Option<List<string>> to = default, Option<string> from = default, Option<Sender> sender = default, Option<EmailRecipients> recipients = default, Option<string> replyTo = default, Option<List<string>> cc = default, Option<List<string>> bcc = default, Option<List<string>> attachments = default, Option<string> subject = default, Option<string> bodyMD5Hash = default, Option<string> body = default, Option<List<Guid>> toContacts = default, Option<Guid?> toGroup = default, Option<string> charset = default, Option<bool?> isHTML = default, Option<List<Guid>> pixelIds = default, Option<string> messageId = default, Option<List<string>> messageIds = default, Option<bool?> virtualSend = default, Option<Guid?> templateId = default, Option<Dictionary<string, Object>> templateVariables = default, Option<Dictionary<string, string>> headers = default, Option<Guid?> threadId = default, Option<string> bodyExcerpt = default, Option<string> textExcerpt = default, Option<string> inReplyTo = default, Option<bool?> favourite = default, Option<long?> sizeBytes = default, Option<bool?> html = default)
        {
            Id = id;
            UserId = userId;
            InboxId = inboxId;
            SentAt = sentAt;
            CreatedAt = createdAt;
            DomainIdOption = domainId;
            ToOption = to;
            FromOption = from;
            SenderOption = sender;
            RecipientsOption = recipients;
            ReplyToOption = replyTo;
            CcOption = cc;
            BccOption = bcc;
            AttachmentsOption = attachments;
            SubjectOption = subject;
            BodyMD5HashOption = bodyMD5Hash;
            BodyOption = body;
            ToContactsOption = toContacts;
            ToGroupOption = toGroup;
            CharsetOption = charset;
            IsHTMLOption = isHTML;
            PixelIdsOption = pixelIds;
            MessageIdOption = messageId;
            MessageIdsOption = messageIds;
            VirtualSendOption = virtualSend;
            TemplateIdOption = templateId;
            TemplateVariablesOption = templateVariables;
            HeadersOption = headers;
            ThreadIdOption = threadId;
            BodyExcerptOption = bodyExcerpt;
            TextExcerptOption = textExcerpt;
            InReplyToOption = inReplyTo;
            FavouriteOption = favourite;
            SizeBytesOption = sizeBytes;
            HtmlOption = html;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of sent email
        /// </summary>
        /// <value>ID of sent email</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Inbox ID email was sent from
        /// </summary>
        /// <value>Inbox ID email was sent from</value>
        [JsonPropertyName("inboxId")]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets SentAt
        /// </summary>
        [JsonPropertyName("sentAt")]
        public DateTime SentAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of DomainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DomainIdOption { get; private set; }

        /// <summary>
        /// Domain ID
        /// </summary>
        /// <value>Domain ID</value>
        [JsonPropertyName("domainId")]
        public Guid? DomainId { get { return this.DomainIdOption; } set { this.DomainIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of To
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> ToOption { get; private set; }

        /// <summary>
        /// Recipients email was sent to
        /// </summary>
        /// <value>Recipients email was sent to</value>
        [JsonPropertyName("to")]
        public List<string> To { get { return this.ToOption; } set { this.ToOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// Sent from address
        /// </summary>
        /// <value>Sent from address</value>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Sender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Sender> SenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public Sender Sender { get { return this.SenderOption; } set { this.SenderOption = new Option<Sender>(value); } }

        /// <summary>
        /// Used to track the state of Recipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailRecipients> RecipientsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [JsonPropertyName("recipients")]
        public EmailRecipients Recipients { get { return this.RecipientsOption; } set { this.RecipientsOption = new Option<EmailRecipients>(value); } }

        /// <summary>
        /// Used to track the state of ReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReplyToOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReplyTo
        /// </summary>
        [JsonPropertyName("replyTo")]
        public string ReplyTo { get { return this.ReplyToOption; } set { this.ReplyToOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CcOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [JsonPropertyName("cc")]
        public List<string> Cc { get { return this.CcOption; } set { this.CcOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BccOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get { return this.BccOption; } set { this.BccOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> AttachmentsOption { get; private set; }

        /// <summary>
        /// Array of IDs of attachments that were sent with this email
        /// </summary>
        /// <value>Array of IDs of attachments that were sent with this email</value>
        [JsonPropertyName("attachments")]
        public List<string> Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BodyMD5Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyMD5HashOption { get; private set; }

        /// <summary>
        /// MD5 Hash
        /// </summary>
        /// <value>MD5 Hash</value>
        [JsonPropertyName("bodyMD5Hash")]
        public string BodyMD5Hash { get { return this.BodyMD5HashOption; } set { this.BodyMD5HashOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyOption { get; private set; }

        /// <summary>
        /// Sent email body
        /// </summary>
        /// <value>Sent email body</value>
        [JsonPropertyName("body")]
        public string Body { get { return this.BodyOption; } set { this.BodyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ToContacts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>> ToContactsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ToContacts
        /// </summary>
        [JsonPropertyName("toContacts")]
        public List<Guid> ToContacts { get { return this.ToContactsOption; } set { this.ToContactsOption = new Option<List<Guid>>(value); } }

        /// <summary>
        /// Used to track the state of ToGroup
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ToGroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets ToGroup
        /// </summary>
        [JsonPropertyName("toGroup")]
        public Guid? ToGroup { get { return this.ToGroupOption; } set { this.ToGroupOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Charset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CharsetOption { get; private set; }

        /// <summary>
        /// Gets or Sets Charset
        /// </summary>
        [JsonPropertyName("charset")]
        public string Charset { get { return this.CharsetOption; } set { this.CharsetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsHTML
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsHTMLOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsHTML
        /// </summary>
        [JsonPropertyName("isHTML")]
        public bool? IsHTML { get { return this.IsHTMLOption; } set { this.IsHTMLOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of PixelIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>> PixelIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PixelIds
        /// </summary>
        [JsonPropertyName("pixelIds")]
        public List<Guid> PixelIds { get { return this.PixelIdsOption; } set { this.PixelIdsOption = new Option<List<Guid>>(value); } }

        /// <summary>
        /// Used to track the state of MessageId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageIdOption { get; private set; }

        /// <summary>
        /// RFC 5322 Message-ID header value without angle brackets.
        /// </summary>
        /// <value>RFC 5322 Message-ID header value without angle brackets.</value>
        [JsonPropertyName("messageId")]
        public string MessageId { get { return this.MessageIdOption; } set { this.MessageIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MessageIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> MessageIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets MessageIds
        /// </summary>
        [JsonPropertyName("messageIds")]
        public List<string> MessageIds { get { return this.MessageIdsOption; } set { this.MessageIdsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of VirtualSend
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VirtualSendOption { get; private set; }

        /// <summary>
        /// Gets or Sets VirtualSend
        /// </summary>
        [JsonPropertyName("virtualSend")]
        public bool? VirtualSend { get { return this.VirtualSendOption; } set { this.VirtualSendOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TemplateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> TemplateIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [JsonPropertyName("templateId")]
        public Guid? TemplateId { get { return this.TemplateIdOption; } set { this.TemplateIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of TemplateVariables
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>> TemplateVariablesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TemplateVariables
        /// </summary>
        [JsonPropertyName("templateVariables")]
        public Dictionary<string, Object> TemplateVariables { get { return this.TemplateVariablesOption; } set { this.TemplateVariablesOption = new Option<Dictionary<string, Object>>(value); } }

        /// <summary>
        /// Used to track the state of Headers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> HeadersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [JsonPropertyName("headers")]
        public Dictionary<string, string> Headers { get { return this.HeadersOption; } set { this.HeadersOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of ThreadId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ThreadIdOption { get; private set; }

        /// <summary>
        /// MailSlurp thread ID for email chain that enables lookup for In-Reply-To and References fields.
        /// </summary>
        /// <value>MailSlurp thread ID for email chain that enables lookup for In-Reply-To and References fields.</value>
        [JsonPropertyName("threadId")]
        public Guid? ThreadId { get { return this.ThreadIdOption; } set { this.ThreadIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of BodyExcerpt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyExcerptOption { get; private set; }

        /// <summary>
        /// An excerpt of the body of the email message for quick preview. Takes HTML content part if exists falls back to TEXT content part if not
        /// </summary>
        /// <value>An excerpt of the body of the email message for quick preview. Takes HTML content part if exists falls back to TEXT content part if not</value>
        [JsonPropertyName("bodyExcerpt")]
        public string BodyExcerpt { get { return this.BodyExcerptOption; } set { this.BodyExcerptOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TextExcerpt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TextExcerptOption { get; private set; }

        /// <summary>
        /// An excerpt of the body of the email message for quick preview. Takes TEXT content part if exists
        /// </summary>
        /// <value>An excerpt of the body of the email message for quick preview. Takes TEXT content part if exists</value>
        [JsonPropertyName("textExcerpt")]
        public string TextExcerpt { get { return this.TextExcerptOption; } set { this.TextExcerptOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InReplyToOption { get; private set; }

        /// <summary>
        /// Parsed value of In-Reply-To header. A Message-ID in a thread.
        /// </summary>
        /// <value>Parsed value of In-Reply-To header. A Message-ID in a thread.</value>
        [JsonPropertyName("inReplyTo")]
        public string InReplyTo { get { return this.InReplyToOption; } set { this.InReplyToOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Favourite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FavouriteOption { get; private set; }

        /// <summary>
        /// Is email favourited
        /// </summary>
        /// <value>Is email favourited</value>
        [JsonPropertyName("favourite")]
        public bool? Favourite { get { return this.FavouriteOption; } set { this.FavouriteOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SizeBytes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SizeBytesOption { get; private set; }

        /// <summary>
        /// Size of raw email message in bytes
        /// </summary>
        /// <value>Size of raw email message in bytes</value>
        [JsonPropertyName("sizeBytes")]
        public long? SizeBytes { get { return this.SizeBytesOption; } set { this.SizeBytesOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Html
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HtmlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [JsonPropertyName("html")]
        public bool? Html { get { return this.HtmlOption; } set { this.HtmlOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SentEmailDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  SentAt: ").Append(SentAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  BodyMD5Hash: ").Append(BodyMD5Hash).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ToContacts: ").Append(ToContacts).Append("\n");
            sb.Append("  ToGroup: ").Append(ToGroup).Append("\n");
            sb.Append("  Charset: ").Append(Charset).Append("\n");
            sb.Append("  IsHTML: ").Append(IsHTML).Append("\n");
            sb.Append("  PixelIds: ").Append(PixelIds).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  MessageIds: ").Append(MessageIds).Append("\n");
            sb.Append("  VirtualSend: ").Append(VirtualSend).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateVariables: ").Append(TemplateVariables).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  BodyExcerpt: ").Append(BodyExcerpt).Append("\n");
            sb.Append("  TextExcerpt: ").Append(TextExcerpt).Append("\n");
            sb.Append("  InReplyTo: ").Append(InReplyTo).Append("\n");
            sb.Append("  Favourite: ").Append(Favourite).Append("\n");
            sb.Append("  SizeBytes: ").Append(SizeBytes).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SentEmailDto" />
    /// </summary>
    public class SentEmailDtoJsonConverter : JsonConverter<SentEmailDto>
    {
        /// <summary>
        /// The format to use to serialize SentAt
        /// </summary>
        public static string SentAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SentEmailDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SentEmailDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<Guid?> inboxId = default;
            Option<DateTime?> sentAt = default;
            Option<DateTime?> createdAt = default;
            Option<Guid?> domainId = default;
            Option<List<string>> to = default;
            Option<string> from = default;
            Option<Sender> sender = default;
            Option<EmailRecipients> recipients = default;
            Option<string> replyTo = default;
            Option<List<string>> cc = default;
            Option<List<string>> bcc = default;
            Option<List<string>> attachments = default;
            Option<string> subject = default;
            Option<string> bodyMD5Hash = default;
            Option<string> body = default;
            Option<List<Guid>> toContacts = default;
            Option<Guid?> toGroup = default;
            Option<string> charset = default;
            Option<bool?> isHTML = default;
            Option<List<Guid>> pixelIds = default;
            Option<string> messageId = default;
            Option<List<string>> messageIds = default;
            Option<bool?> virtualSend = default;
            Option<Guid?> templateId = default;
            Option<Dictionary<string, Object>> templateVariables = default;
            Option<Dictionary<string, string>> headers = default;
            Option<Guid?> threadId = default;
            Option<string> bodyExcerpt = default;
            Option<string> textExcerpt = default;
            Option<string> inReplyTo = default;
            Option<bool?> favourite = default;
            Option<long?> sizeBytes = default;
            Option<bool?> html = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sentAt":
                            sentAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "domainId":
                            domainId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sender":
                            sender = new Option<Sender>(JsonSerializer.Deserialize<Sender>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recipients":
                            recipients = new Option<EmailRecipients>(JsonSerializer.Deserialize<EmailRecipients>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "replyTo":
                            replyTo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachments":
                            attachments = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bodyMD5Hash":
                            bodyMD5Hash = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "toContacts":
                            toContacts = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "toGroup":
                            toGroup = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "charset":
                            charset = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isHTML":
                            isHTML = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "pixelIds":
                            pixelIds = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "messageId":
                            messageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "messageIds":
                            messageIds = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "virtualSend":
                            virtualSend = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "templateId":
                            templateId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "templateVariables":
                            templateVariables = new Option<Dictionary<string, Object>>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "headers":
                            headers = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "threadId":
                            threadId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "bodyExcerpt":
                            bodyExcerpt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "textExcerpt":
                            textExcerpt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "inReplyTo":
                            inReplyTo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "favourite":
                            favourite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sizeBytes":
                            sizeBytes = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "html":
                            html = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SentEmailDto.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class SentEmailDto.", nameof(userId));

            if (!inboxId.IsSet)
                throw new ArgumentException("Property is required for class SentEmailDto.", nameof(inboxId));

            if (!sentAt.IsSet)
                throw new ArgumentException("Property is required for class SentEmailDto.", nameof(sentAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class SentEmailDto.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SentEmailDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class SentEmailDto.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class SentEmailDto.");

            if (sentAt.IsSet && sentAt.Value == null)
                throw new ArgumentNullException(nameof(sentAt), "Property is not nullable for class SentEmailDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SentEmailDto.");

            if (html.IsSet && html.Value == null)
                throw new ArgumentNullException(nameof(html), "Property is not nullable for class SentEmailDto.");

            return new SentEmailDto(id.Value.Value, userId.Value.Value, inboxId.Value.Value, sentAt.Value.Value, createdAt.Value.Value, domainId, to, from, sender, recipients, replyTo, cc, bcc, attachments, subject, bodyMD5Hash, body, toContacts, toGroup, charset, isHTML, pixelIds, messageId, messageIds, virtualSend, templateId, templateVariables, headers, threadId, bodyExcerpt, textExcerpt, inReplyTo, favourite, sizeBytes, html);
        }

        /// <summary>
        /// Serializes a <see cref="SentEmailDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sentEmailDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SentEmailDto sentEmailDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sentEmailDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SentEmailDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sentEmailDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SentEmailDto sentEmailDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("id", sentEmailDto.Id);

            writer.WriteString("userId", sentEmailDto.UserId);

            writer.WriteString("inboxId", sentEmailDto.InboxId);

            writer.WriteString("sentAt", sentEmailDto.SentAt.ToString(SentAtFormat));

            writer.WriteString("createdAt", sentEmailDto.CreatedAt.ToString(CreatedAtFormat));

            if (sentEmailDto.DomainIdOption.IsSet)
                if (sentEmailDto.DomainIdOption.Value != null)
                    writer.WriteString("domainId", sentEmailDto.DomainIdOption.Value.Value);
                else
                    writer.WriteNull("domainId");

            if (sentEmailDto.ToOption.IsSet)
                if (sentEmailDto.ToOption.Value != null)
                {
                    writer.WritePropertyName("to");
                    JsonSerializer.Serialize(writer, sentEmailDto.To, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("to");
            if (sentEmailDto.FromOption.IsSet)
                if (sentEmailDto.FromOption.Value != null)
                    writer.WriteString("from", sentEmailDto.From);
                else
                    writer.WriteNull("from");

            if (sentEmailDto.SenderOption.IsSet)
                if (sentEmailDto.SenderOption.Value != null)
                {
                    writer.WritePropertyName("sender");
                    JsonSerializer.Serialize(writer, sentEmailDto.Sender, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sender");
            if (sentEmailDto.RecipientsOption.IsSet)
                if (sentEmailDto.RecipientsOption.Value != null)
                {
                    writer.WritePropertyName("recipients");
                    JsonSerializer.Serialize(writer, sentEmailDto.Recipients, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("recipients");
            if (sentEmailDto.ReplyToOption.IsSet)
                if (sentEmailDto.ReplyToOption.Value != null)
                    writer.WriteString("replyTo", sentEmailDto.ReplyTo);
                else
                    writer.WriteNull("replyTo");

            if (sentEmailDto.CcOption.IsSet)
                if (sentEmailDto.CcOption.Value != null)
                {
                    writer.WritePropertyName("cc");
                    JsonSerializer.Serialize(writer, sentEmailDto.Cc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("cc");
            if (sentEmailDto.BccOption.IsSet)
                if (sentEmailDto.BccOption.Value != null)
                {
                    writer.WritePropertyName("bcc");
                    JsonSerializer.Serialize(writer, sentEmailDto.Bcc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("bcc");
            if (sentEmailDto.AttachmentsOption.IsSet)
                if (sentEmailDto.AttachmentsOption.Value != null)
                {
                    writer.WritePropertyName("attachments");
                    JsonSerializer.Serialize(writer, sentEmailDto.Attachments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachments");
            if (sentEmailDto.SubjectOption.IsSet)
                if (sentEmailDto.SubjectOption.Value != null)
                    writer.WriteString("subject", sentEmailDto.Subject);
                else
                    writer.WriteNull("subject");

            if (sentEmailDto.BodyMD5HashOption.IsSet)
                if (sentEmailDto.BodyMD5HashOption.Value != null)
                    writer.WriteString("bodyMD5Hash", sentEmailDto.BodyMD5Hash);
                else
                    writer.WriteNull("bodyMD5Hash");

            if (sentEmailDto.BodyOption.IsSet)
                if (sentEmailDto.BodyOption.Value != null)
                    writer.WriteString("body", sentEmailDto.Body);
                else
                    writer.WriteNull("body");

            if (sentEmailDto.ToContactsOption.IsSet)
                if (sentEmailDto.ToContactsOption.Value != null)
                {
                    writer.WritePropertyName("toContacts");
                    JsonSerializer.Serialize(writer, sentEmailDto.ToContacts, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("toContacts");
            if (sentEmailDto.ToGroupOption.IsSet)
                if (sentEmailDto.ToGroupOption.Value != null)
                    writer.WriteString("toGroup", sentEmailDto.ToGroupOption.Value.Value);
                else
                    writer.WriteNull("toGroup");

            if (sentEmailDto.CharsetOption.IsSet)
                if (sentEmailDto.CharsetOption.Value != null)
                    writer.WriteString("charset", sentEmailDto.Charset);
                else
                    writer.WriteNull("charset");

            if (sentEmailDto.IsHTMLOption.IsSet)
                if (sentEmailDto.IsHTMLOption.Value != null)
                    writer.WriteBoolean("isHTML", sentEmailDto.IsHTMLOption.Value.Value);
                else
                    writer.WriteNull("isHTML");

            if (sentEmailDto.PixelIdsOption.IsSet)
                if (sentEmailDto.PixelIdsOption.Value != null)
                {
                    writer.WritePropertyName("pixelIds");
                    JsonSerializer.Serialize(writer, sentEmailDto.PixelIds, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("pixelIds");
            if (sentEmailDto.MessageIdOption.IsSet)
                if (sentEmailDto.MessageIdOption.Value != null)
                    writer.WriteString("messageId", sentEmailDto.MessageId);
                else
                    writer.WriteNull("messageId");

            if (sentEmailDto.MessageIdsOption.IsSet)
                if (sentEmailDto.MessageIdsOption.Value != null)
                {
                    writer.WritePropertyName("messageIds");
                    JsonSerializer.Serialize(writer, sentEmailDto.MessageIds, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("messageIds");
            if (sentEmailDto.VirtualSendOption.IsSet)
                if (sentEmailDto.VirtualSendOption.Value != null)
                    writer.WriteBoolean("virtualSend", sentEmailDto.VirtualSendOption.Value.Value);
                else
                    writer.WriteNull("virtualSend");

            if (sentEmailDto.TemplateIdOption.IsSet)
                if (sentEmailDto.TemplateIdOption.Value != null)
                    writer.WriteString("templateId", sentEmailDto.TemplateIdOption.Value.Value);
                else
                    writer.WriteNull("templateId");

            if (sentEmailDto.TemplateVariablesOption.IsSet)
                if (sentEmailDto.TemplateVariablesOption.Value != null)
                {
                    writer.WritePropertyName("templateVariables");
                    JsonSerializer.Serialize(writer, sentEmailDto.TemplateVariables, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("templateVariables");
            if (sentEmailDto.HeadersOption.IsSet)
                if (sentEmailDto.HeadersOption.Value != null)
                {
                    writer.WritePropertyName("headers");
                    JsonSerializer.Serialize(writer, sentEmailDto.Headers, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("headers");
            if (sentEmailDto.ThreadIdOption.IsSet)
                if (sentEmailDto.ThreadIdOption.Value != null)
                    writer.WriteString("threadId", sentEmailDto.ThreadIdOption.Value.Value);
                else
                    writer.WriteNull("threadId");

            if (sentEmailDto.BodyExcerptOption.IsSet)
                if (sentEmailDto.BodyExcerptOption.Value != null)
                    writer.WriteString("bodyExcerpt", sentEmailDto.BodyExcerpt);
                else
                    writer.WriteNull("bodyExcerpt");

            if (sentEmailDto.TextExcerptOption.IsSet)
                if (sentEmailDto.TextExcerptOption.Value != null)
                    writer.WriteString("textExcerpt", sentEmailDto.TextExcerpt);
                else
                    writer.WriteNull("textExcerpt");

            if (sentEmailDto.InReplyToOption.IsSet)
                if (sentEmailDto.InReplyToOption.Value != null)
                    writer.WriteString("inReplyTo", sentEmailDto.InReplyTo);
                else
                    writer.WriteNull("inReplyTo");

            if (sentEmailDto.FavouriteOption.IsSet)
                if (sentEmailDto.FavouriteOption.Value != null)
                    writer.WriteBoolean("favourite", sentEmailDto.FavouriteOption.Value.Value);
                else
                    writer.WriteNull("favourite");

            if (sentEmailDto.SizeBytesOption.IsSet)
                if (sentEmailDto.SizeBytesOption.Value != null)
                    writer.WriteNumber("sizeBytes", sentEmailDto.SizeBytesOption.Value.Value);
                else
                    writer.WriteNull("sizeBytes");

            if (sentEmailDto.HtmlOption.IsSet)
                writer.WriteBoolean("html", sentEmailDto.HtmlOption.Value.Value);
        }
    }
}
