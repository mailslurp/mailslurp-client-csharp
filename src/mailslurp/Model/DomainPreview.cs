// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Preview object for domain entity
    /// </summary>
    public partial class DomainPreview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainPreview" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="domain">domain</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="domainType">Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.</param>
        /// <param name="isVerified">isVerified</param>
        /// <param name="hasMissingRecords">hasMissingRecords</param>
        /// <param name="catchAllInboxId">catchAllInboxId</param>
        [JsonConstructor]
        public DomainPreview(Guid id, string domain, DateTime createdAt, DomainTypeEnum domainType, bool isVerified, bool hasMissingRecords, Option<Guid?> catchAllInboxId = default)
        {
            Id = id;
            Domain = domain;
            CreatedAt = createdAt;
            DomainType = domainType;
            IsVerified = isVerified;
            HasMissingRecords = hasMissingRecords;
            CatchAllInboxIdOption = catchAllInboxId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
        /// </summary>
        /// <value>Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.</value>
        public enum DomainTypeEnum
        {
            /// <summary>
            /// Enum HTTPINBOX for value: HTTP_INBOX
            /// </summary>
            HTTPINBOX = 1,

            /// <summary>
            /// Enum SMTPDOMAIN for value: SMTP_DOMAIN
            /// </summary>
            SMTPDOMAIN = 2
        }

        /// <summary>
        /// Returns a <see cref="DomainTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DomainTypeEnum DomainTypeEnumFromString(string value)
        {
            if (value.Equals("HTTP_INBOX"))
                return DomainTypeEnum.HTTPINBOX;

            if (value.Equals("SMTP_DOMAIN"))
                return DomainTypeEnum.SMTPDOMAIN;

            throw new NotImplementedException($"Could not convert value to type DomainTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DomainTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DomainTypeEnum? DomainTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("HTTP_INBOX"))
                return DomainTypeEnum.HTTPINBOX;

            if (value.Equals("SMTP_DOMAIN"))
                return DomainTypeEnum.SMTPDOMAIN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DomainTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DomainTypeEnumToJsonValue(DomainTypeEnum value)
        {
            if (value == DomainTypeEnum.HTTPINBOX)
                return "HTTP_INBOX";

            if (value == DomainTypeEnum.SMTPDOMAIN)
                return "SMTP_DOMAIN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
        /// </summary>
        /// <value>Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.</value>
        [JsonPropertyName("domainType")]
        public DomainTypeEnum DomainType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [JsonPropertyName("domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets IsVerified
        /// </summary>
        [JsonPropertyName("isVerified")]
        public bool IsVerified { get; set; }

        /// <summary>
        /// Gets or Sets HasMissingRecords
        /// </summary>
        [JsonPropertyName("hasMissingRecords")]
        public bool HasMissingRecords { get; set; }

        /// <summary>
        /// Used to track the state of CatchAllInboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CatchAllInboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CatchAllInboxId
        /// </summary>
        [JsonPropertyName("catchAllInboxId")]
        public Guid? CatchAllInboxId { get { return this.CatchAllInboxIdOption; } set { this.CatchAllInboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainPreview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DomainType: ").Append(DomainType).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  HasMissingRecords: ").Append(HasMissingRecords).Append("\n");
            sb.Append("  CatchAllInboxId: ").Append(CatchAllInboxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainPreview" />
    /// </summary>
    public class DomainPreviewJsonConverter : JsonConverter<DomainPreview>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DomainPreview" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DomainPreview Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> domain = default;
            Option<DateTime?> createdAt = default;
            Option<DomainPreview.DomainTypeEnum?> domainType = default;
            Option<bool?> isVerified = default;
            Option<bool?> hasMissingRecords = default;
            Option<Guid?> catchAllInboxId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "domain":
                            domain = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "domainType":
                            string domainTypeRawValue = utf8JsonReader.GetString();
                            if (domainTypeRawValue != null)
                                domainType = new Option<DomainPreview.DomainTypeEnum?>(DomainPreview.DomainTypeEnumFromStringOrDefault(domainTypeRawValue));
                            break;
                        case "isVerified":
                            isVerified = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "hasMissingRecords":
                            hasMissingRecords = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "catchAllInboxId":
                            catchAllInboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class DomainPreview.", nameof(id));

            if (!domain.IsSet)
                throw new ArgumentException("Property is required for class DomainPreview.", nameof(domain));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class DomainPreview.", nameof(createdAt));

            if (!domainType.IsSet)
                throw new ArgumentException("Property is required for class DomainPreview.", nameof(domainType));

            if (!isVerified.IsSet)
                throw new ArgumentException("Property is required for class DomainPreview.", nameof(isVerified));

            if (!hasMissingRecords.IsSet)
                throw new ArgumentException("Property is required for class DomainPreview.", nameof(hasMissingRecords));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DomainPreview.");

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class DomainPreview.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DomainPreview.");

            if (domainType.IsSet && domainType.Value == null)
                throw new ArgumentNullException(nameof(domainType), "Property is not nullable for class DomainPreview.");

            if (isVerified.IsSet && isVerified.Value == null)
                throw new ArgumentNullException(nameof(isVerified), "Property is not nullable for class DomainPreview.");

            if (hasMissingRecords.IsSet && hasMissingRecords.Value == null)
                throw new ArgumentNullException(nameof(hasMissingRecords), "Property is not nullable for class DomainPreview.");

            return new DomainPreview(id.Value.Value, domain.Value, createdAt.Value.Value, domainType.Value.Value, isVerified.Value.Value, hasMissingRecords.Value.Value, catchAllInboxId);
        }

        /// <summary>
        /// Serializes a <see cref="DomainPreview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainPreview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DomainPreview domainPreview, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, domainPreview, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DomainPreview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainPreview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DomainPreview domainPreview, JsonSerializerOptions jsonSerializerOptions)
        {
            if (domainPreview.Domain == null)
                throw new ArgumentNullException(nameof(domainPreview.Domain), "Property is required for class DomainPreview.");

            writer.WriteString("id", domainPreview.Id);

            writer.WriteString("domain", domainPreview.Domain);

            writer.WriteString("createdAt", domainPreview.CreatedAt.ToString(CreatedAtFormat));

            var domainTypeRawValue = DomainPreview.DomainTypeEnumToJsonValue(domainPreview.DomainType);
            writer.WriteString("domainType", domainTypeRawValue);
            writer.WriteBoolean("isVerified", domainPreview.IsVerified);

            writer.WriteBoolean("hasMissingRecords", domainPreview.HasMissingRecords);

            if (domainPreview.CatchAllInboxIdOption.IsSet)
                if (domainPreview.CatchAllInboxIdOption.Value != null)
                    writer.WriteString("catchAllInboxId", domainPreview.CatchAllInboxIdOption.Value.Value);
                else
                    writer.WriteNull("catchAllInboxId");
        }
    }
}
