// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// GuestPortalUserDto
    /// </summary>
    public partial class GuestPortalUserDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GuestPortalUserDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="portalId">portalId</param>
        /// <param name="username">username</param>
        /// <param name="loginUrl">loginUrl</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="name">name</param>
        /// <param name="emailAddress">emailAddress</param>
        /// <param name="inboxId">inboxId</param>
        [JsonConstructor]
        public GuestPortalUserDto(Guid id, Guid userId, Guid portalId, string username, string loginUrl, DateTime createdAt, DateTime updatedAt, Option<string> name = default, Option<string> emailAddress = default, Option<Guid?> inboxId = default)
        {
            Id = id;
            UserId = userId;
            PortalId = portalId;
            Username = username;
            LoginUrl = loginUrl;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            NameOption = name;
            EmailAddressOption = emailAddress;
            InboxIdOption = inboxId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets PortalId
        /// </summary>
        [JsonPropertyName("portalId")]
        public Guid PortalId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets LoginUrl
        /// </summary>
        [JsonPropertyName("loginUrl")]
        public string LoginUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get { return this.EmailAddressOption; } set { this.EmailAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GuestPortalUserDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  PortalId: ").Append(PortalId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  LoginUrl: ").Append(LoginUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GuestPortalUserDto" />
    /// </summary>
    public class GuestPortalUserDtoJsonConverter : JsonConverter<GuestPortalUserDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GuestPortalUserDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GuestPortalUserDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<Guid?> portalId = default;
            Option<string> username = default;
            Option<string> loginUrl = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string> name = default;
            Option<string> emailAddress = default;
            Option<Guid?> inboxId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "portalId":
                            portalId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "username":
                            username = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "loginUrl":
                            loginUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalUserDto.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalUserDto.", nameof(userId));

            if (!portalId.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalUserDto.", nameof(portalId));

            if (!username.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalUserDto.", nameof(username));

            if (!loginUrl.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalUserDto.", nameof(loginUrl));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalUserDto.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class GuestPortalUserDto.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GuestPortalUserDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class GuestPortalUserDto.");

            if (portalId.IsSet && portalId.Value == null)
                throw new ArgumentNullException(nameof(portalId), "Property is not nullable for class GuestPortalUserDto.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class GuestPortalUserDto.");

            if (loginUrl.IsSet && loginUrl.Value == null)
                throw new ArgumentNullException(nameof(loginUrl), "Property is not nullable for class GuestPortalUserDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GuestPortalUserDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class GuestPortalUserDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GuestPortalUserDto.");

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class GuestPortalUserDto.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class GuestPortalUserDto.");

            return new GuestPortalUserDto(id.Value.Value, userId.Value.Value, portalId.Value.Value, username.Value, loginUrl.Value, createdAt.Value.Value, updatedAt.Value.Value, name, emailAddress, inboxId);
        }

        /// <summary>
        /// Serializes a <see cref="GuestPortalUserDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guestPortalUserDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GuestPortalUserDto guestPortalUserDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, guestPortalUserDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GuestPortalUserDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guestPortalUserDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GuestPortalUserDto guestPortalUserDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (guestPortalUserDto.Username == null)
                throw new ArgumentNullException(nameof(guestPortalUserDto.Username), "Property is required for class GuestPortalUserDto.");

            if (guestPortalUserDto.LoginUrl == null)
                throw new ArgumentNullException(nameof(guestPortalUserDto.LoginUrl), "Property is required for class GuestPortalUserDto.");

            if (guestPortalUserDto.NameOption.IsSet && guestPortalUserDto.Name == null)
                throw new ArgumentNullException(nameof(guestPortalUserDto.Name), "Property is required for class GuestPortalUserDto.");

            if (guestPortalUserDto.EmailAddressOption.IsSet && guestPortalUserDto.EmailAddress == null)
                throw new ArgumentNullException(nameof(guestPortalUserDto.EmailAddress), "Property is required for class GuestPortalUserDto.");

            writer.WriteString("id", guestPortalUserDto.Id);

            writer.WriteString("userId", guestPortalUserDto.UserId);

            writer.WriteString("portalId", guestPortalUserDto.PortalId);

            writer.WriteString("username", guestPortalUserDto.Username);

            writer.WriteString("loginUrl", guestPortalUserDto.LoginUrl);

            writer.WriteString("createdAt", guestPortalUserDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", guestPortalUserDto.UpdatedAt.ToString(UpdatedAtFormat));

            if (guestPortalUserDto.NameOption.IsSet)
                writer.WriteString("name", guestPortalUserDto.Name);

            if (guestPortalUserDto.EmailAddressOption.IsSet)
                writer.WriteString("emailAddress", guestPortalUserDto.EmailAddress);

            if (guestPortalUserDto.InboxIdOption.IsSet)
                writer.WriteString("inboxId", guestPortalUserDto.InboxIdOption.Value.Value);
        }
    }
}
