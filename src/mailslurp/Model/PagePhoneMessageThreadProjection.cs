// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Paginated phone message threads. Page index starts at zero. Projection results may omit larger entity fields. For fetching a full entity use the projection ID with individual method calls.
    /// </summary>
    public partial class PagePhoneMessageThreadProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PagePhoneMessageThreadProjection" /> class.
        /// </summary>
        /// <param name="totalElements">totalElements</param>
        /// <param name="totalPages">totalPages</param>
        /// <param name="content">content</param>
        /// <param name="pageable">pageable</param>
        /// <param name="last">last</param>
        /// <param name="numberOfElements">numberOfElements</param>
        /// <param name="first">first</param>
        /// <param name="size">size</param>
        /// <param name="number">number</param>
        /// <param name="sort">sort</param>
        /// <param name="empty">empty</param>
        [JsonConstructor]
        public PagePhoneMessageThreadProjection(long totalElements, int totalPages, Option<List<PhoneMessageThreadProjection>> content = default, Option<PageableObject> pageable = default, Option<bool?> last = default, Option<int?> numberOfElements = default, Option<bool?> first = default, Option<int?> size = default, Option<int?> number = default, Option<SortObject> sort = default, Option<bool?> empty = default)
        {
            TotalElements = totalElements;
            TotalPages = totalPages;
            ContentOption = content;
            PageableOption = pageable;
            LastOption = last;
            NumberOfElementsOption = numberOfElements;
            FirstOption = first;
            SizeOption = size;
            NumberOption = number;
            SortOption = sort;
            EmptyOption = empty;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets TotalElements
        /// </summary>
        [JsonPropertyName("totalElements")]
        public long TotalElements { get; set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        [JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        /// <summary>
        /// Used to track the state of Content
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PhoneMessageThreadProjection>> ContentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public List<PhoneMessageThreadProjection> Content { get { return this.ContentOption; } set { this.ContentOption = new Option<List<PhoneMessageThreadProjection>>(value); } }

        /// <summary>
        /// Used to track the state of Pageable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PageableObject> PageableOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pageable
        /// </summary>
        [JsonPropertyName("pageable")]
        public PageableObject Pageable { get { return this.PageableOption; } set { this.PageableOption = new Option<PageableObject>(value); } }

        /// <summary>
        /// Used to track the state of Last
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LastOption { get; private set; }

        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [JsonPropertyName("last")]
        public bool? Last { get { return this.LastOption; } set { this.LastOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of NumberOfElements
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOfElementsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumberOfElements
        /// </summary>
        [JsonPropertyName("numberOfElements")]
        public int? NumberOfElements { get { return this.NumberOfElementsOption; } set { this.NumberOfElementsOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of First
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FirstOption { get; private set; }

        /// <summary>
        /// Gets or Sets First
        /// </summary>
        [JsonPropertyName("first")]
        public bool? First { get { return this.FirstOption; } set { this.FirstOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public int? Number { get { return this.NumberOption; } set { this.NumberOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Sort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SortObject> SortOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [JsonPropertyName("sort")]
        public SortObject Sort { get { return this.SortOption; } set { this.SortOption = new Option<SortObject>(value); } }

        /// <summary>
        /// Used to track the state of Empty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmptyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Empty
        /// </summary>
        [JsonPropertyName("empty")]
        public bool? Empty { get { return this.EmptyOption; } set { this.EmptyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PagePhoneMessageThreadProjection {\n");
            sb.Append("  TotalElements: ").Append(TotalElements).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Pageable: ").Append(Pageable).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  NumberOfElements: ").Append(NumberOfElements).Append("\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Empty: ").Append(Empty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PagePhoneMessageThreadProjection" />
    /// </summary>
    public class PagePhoneMessageThreadProjectionJsonConverter : JsonConverter<PagePhoneMessageThreadProjection>
    {
        /// <summary>
        /// Deserializes json to <see cref="PagePhoneMessageThreadProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PagePhoneMessageThreadProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> totalElements = default;
            Option<int?> totalPages = default;
            Option<List<PhoneMessageThreadProjection>> content = default;
            Option<PageableObject> pageable = default;
            Option<bool?> last = default;
            Option<int?> numberOfElements = default;
            Option<bool?> first = default;
            Option<int?> size = default;
            Option<int?> number = default;
            Option<SortObject> sort = default;
            Option<bool?> empty = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "totalElements":
                            totalElements = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "totalPages":
                            totalPages = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "content":
                            content = new Option<List<PhoneMessageThreadProjection>>(JsonSerializer.Deserialize<List<PhoneMessageThreadProjection>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pageable":
                            pageable = new Option<PageableObject>(JsonSerializer.Deserialize<PageableObject>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "last":
                            last = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "numberOfElements":
                            numberOfElements = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "first":
                            first = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "number":
                            number = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sort":
                            sort = new Option<SortObject>(JsonSerializer.Deserialize<SortObject>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "empty":
                            empty = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!totalElements.IsSet)
                throw new ArgumentException("Property is required for class PagePhoneMessageThreadProjection.", nameof(totalElements));

            if (!totalPages.IsSet)
                throw new ArgumentException("Property is required for class PagePhoneMessageThreadProjection.", nameof(totalPages));

            if (totalElements.IsSet && totalElements.Value == null)
                throw new ArgumentNullException(nameof(totalElements), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            if (totalPages.IsSet && totalPages.Value == null)
                throw new ArgumentNullException(nameof(totalPages), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            if (pageable.IsSet && pageable.Value == null)
                throw new ArgumentNullException(nameof(pageable), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            if (last.IsSet && last.Value == null)
                throw new ArgumentNullException(nameof(last), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            if (numberOfElements.IsSet && numberOfElements.Value == null)
                throw new ArgumentNullException(nameof(numberOfElements), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            if (first.IsSet && first.Value == null)
                throw new ArgumentNullException(nameof(first), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            if (empty.IsSet && empty.Value == null)
                throw new ArgumentNullException(nameof(empty), "Property is not nullable for class PagePhoneMessageThreadProjection.");

            return new PagePhoneMessageThreadProjection(totalElements.Value.Value, totalPages.Value.Value, content, pageable, last, numberOfElements, first, size, number, sort, empty);
        }

        /// <summary>
        /// Serializes a <see cref="PagePhoneMessageThreadProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pagePhoneMessageThreadProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PagePhoneMessageThreadProjection pagePhoneMessageThreadProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pagePhoneMessageThreadProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PagePhoneMessageThreadProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pagePhoneMessageThreadProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PagePhoneMessageThreadProjection pagePhoneMessageThreadProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pagePhoneMessageThreadProjection.ContentOption.IsSet && pagePhoneMessageThreadProjection.Content == null)
                throw new ArgumentNullException(nameof(pagePhoneMessageThreadProjection.Content), "Property is required for class PagePhoneMessageThreadProjection.");

            if (pagePhoneMessageThreadProjection.PageableOption.IsSet && pagePhoneMessageThreadProjection.Pageable == null)
                throw new ArgumentNullException(nameof(pagePhoneMessageThreadProjection.Pageable), "Property is required for class PagePhoneMessageThreadProjection.");

            if (pagePhoneMessageThreadProjection.SortOption.IsSet && pagePhoneMessageThreadProjection.Sort == null)
                throw new ArgumentNullException(nameof(pagePhoneMessageThreadProjection.Sort), "Property is required for class PagePhoneMessageThreadProjection.");

            writer.WriteNumber("totalElements", pagePhoneMessageThreadProjection.TotalElements);

            writer.WriteNumber("totalPages", pagePhoneMessageThreadProjection.TotalPages);

            if (pagePhoneMessageThreadProjection.ContentOption.IsSet)
            {
                writer.WritePropertyName("content");
                JsonSerializer.Serialize(writer, pagePhoneMessageThreadProjection.Content, jsonSerializerOptions);
            }
            if (pagePhoneMessageThreadProjection.PageableOption.IsSet)
            {
                writer.WritePropertyName("pageable");
                JsonSerializer.Serialize(writer, pagePhoneMessageThreadProjection.Pageable, jsonSerializerOptions);
            }
            if (pagePhoneMessageThreadProjection.LastOption.IsSet)
                writer.WriteBoolean("last", pagePhoneMessageThreadProjection.LastOption.Value.Value);

            if (pagePhoneMessageThreadProjection.NumberOfElementsOption.IsSet)
                writer.WriteNumber("numberOfElements", pagePhoneMessageThreadProjection.NumberOfElementsOption.Value.Value);

            if (pagePhoneMessageThreadProjection.FirstOption.IsSet)
                writer.WriteBoolean("first", pagePhoneMessageThreadProjection.FirstOption.Value.Value);

            if (pagePhoneMessageThreadProjection.SizeOption.IsSet)
                writer.WriteNumber("size", pagePhoneMessageThreadProjection.SizeOption.Value.Value);

            if (pagePhoneMessageThreadProjection.NumberOption.IsSet)
                writer.WriteNumber("number", pagePhoneMessageThreadProjection.NumberOption.Value.Value);

            if (pagePhoneMessageThreadProjection.SortOption.IsSet)
            {
                writer.WritePropertyName("sort");
                JsonSerializer.Serialize(writer, pagePhoneMessageThreadProjection.Sort, jsonSerializerOptions);
            }
            if (pagePhoneMessageThreadProjection.EmptyOption.IsSet)
                writer.WriteBoolean("empty", pagePhoneMessageThreadProjection.EmptyOption.Value.Value);
        }
    }
}
