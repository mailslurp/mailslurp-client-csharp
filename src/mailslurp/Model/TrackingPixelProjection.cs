// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Tracking pixel data
    /// </summary>
    public partial class TrackingPixelProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingPixelProjection" /> class.
        /// </summary>
        /// <param name="userId">userId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="seen">seen</param>
        /// <param name="id">id</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="sentEmailId">sentEmailId</param>
        /// <param name="recipient">recipient</param>
        /// <param name="seenAt">seenAt</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public TrackingPixelProjection(Guid userId, DateTime createdAt, bool seen, Guid id, Option<Guid?> inboxId = default, Option<Guid?> sentEmailId = default, Option<string> recipient = default, Option<DateTime?> seenAt = default, Option<string> name = default)
        {
            UserId = userId;
            CreatedAt = createdAt;
            Seen = seen;
            Id = id;
            InboxIdOption = inboxId;
            SentEmailIdOption = sentEmailId;
            RecipientOption = recipient;
            SeenAtOption = seenAt;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Seen
        /// </summary>
        [JsonPropertyName("seen")]
        public bool Seen { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of SentEmailId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> SentEmailIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SentEmailId
        /// </summary>
        [JsonPropertyName("sentEmailId")]
        public Guid? SentEmailId { get { return this.SentEmailIdOption; } set { this.SentEmailIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Recipient
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecipientOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [JsonPropertyName("recipient")]
        public string Recipient { get { return this.RecipientOption; } set { this.RecipientOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SeenAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SeenAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets SeenAt
        /// </summary>
        [JsonPropertyName("seenAt")]
        public DateTime? SeenAt { get { return this.SeenAtOption; } set { this.SeenAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackingPixelProjection {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Seen: ").Append(Seen).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  SentEmailId: ").Append(SentEmailId).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  SeenAt: ").Append(SeenAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackingPixelProjection" />
    /// </summary>
    public class TrackingPixelProjectionJsonConverter : JsonConverter<TrackingPixelProjection>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize SeenAt
        /// </summary>
        public static string SeenAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TrackingPixelProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackingPixelProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> userId = default;
            Option<DateTime?> createdAt = default;
            Option<bool?> seen = default;
            Option<Guid?> id = default;
            Option<Guid?> inboxId = default;
            Option<Guid?> sentEmailId = default;
            Option<string> recipient = default;
            Option<DateTime?> seenAt = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "seen":
                            seen = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sentEmailId":
                            sentEmailId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "recipient":
                            recipient = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "seenAt":
                            seenAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class TrackingPixelProjection.", nameof(userId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class TrackingPixelProjection.", nameof(createdAt));

            if (!seen.IsSet)
                throw new ArgumentException("Property is required for class TrackingPixelProjection.", nameof(seen));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class TrackingPixelProjection.", nameof(id));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class TrackingPixelProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class TrackingPixelProjection.");

            if (seen.IsSet && seen.Value == null)
                throw new ArgumentNullException(nameof(seen), "Property is not nullable for class TrackingPixelProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TrackingPixelProjection.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class TrackingPixelProjection.");

            if (sentEmailId.IsSet && sentEmailId.Value == null)
                throw new ArgumentNullException(nameof(sentEmailId), "Property is not nullable for class TrackingPixelProjection.");

            if (recipient.IsSet && recipient.Value == null)
                throw new ArgumentNullException(nameof(recipient), "Property is not nullable for class TrackingPixelProjection.");

            if (seenAt.IsSet && seenAt.Value == null)
                throw new ArgumentNullException(nameof(seenAt), "Property is not nullable for class TrackingPixelProjection.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class TrackingPixelProjection.");

            return new TrackingPixelProjection(userId.Value.Value, createdAt.Value.Value, seen.Value.Value, id.Value.Value, inboxId, sentEmailId, recipient, seenAt, name);
        }

        /// <summary>
        /// Serializes a <see cref="TrackingPixelProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackingPixelProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackingPixelProjection trackingPixelProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackingPixelProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackingPixelProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackingPixelProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackingPixelProjection trackingPixelProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackingPixelProjection.RecipientOption.IsSet && trackingPixelProjection.Recipient == null)
                throw new ArgumentNullException(nameof(trackingPixelProjection.Recipient), "Property is required for class TrackingPixelProjection.");

            if (trackingPixelProjection.NameOption.IsSet && trackingPixelProjection.Name == null)
                throw new ArgumentNullException(nameof(trackingPixelProjection.Name), "Property is required for class TrackingPixelProjection.");

            writer.WriteString("userId", trackingPixelProjection.UserId);

            writer.WriteString("createdAt", trackingPixelProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteBoolean("seen", trackingPixelProjection.Seen);

            writer.WriteString("id", trackingPixelProjection.Id);

            if (trackingPixelProjection.InboxIdOption.IsSet)
                writer.WriteString("inboxId", trackingPixelProjection.InboxIdOption.Value.Value);

            if (trackingPixelProjection.SentEmailIdOption.IsSet)
                writer.WriteString("sentEmailId", trackingPixelProjection.SentEmailIdOption.Value.Value);

            if (trackingPixelProjection.RecipientOption.IsSet)
                writer.WriteString("recipient", trackingPixelProjection.Recipient);

            if (trackingPixelProjection.SeenAtOption.IsSet)
                writer.WriteString("seenAt", trackingPixelProjection.SeenAtOption.Value.Value.ToString(SeenAtFormat));

            if (trackingPixelProjection.NameOption.IsSet)
                writer.WriteString("name", trackingPixelProjection.Name);
        }
    }
}
