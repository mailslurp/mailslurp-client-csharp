/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// ProviderSettings
    /// </summary>
    [DataContract(Name = "ProviderSettings")]
    public partial class ProviderSettings : IValidatableObject
    {
        /// <summary>
        /// Defines MailProvider
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MailProviderEnum
        {
            /// <summary>
            /// Enum GOOGLE for value: GOOGLE
            /// </summary>
            [EnumMember(Value = "GOOGLE")]
            GOOGLE = 1,

            /// <summary>
            /// Enum MICROSOFT for value: MICROSOFT
            /// </summary>
            [EnumMember(Value = "MICROSOFT")]
            MICROSOFT = 2
        }


        /// <summary>
        /// Gets or Sets MailProvider
        /// </summary>
        [DataMember(Name = "mailProvider", IsRequired = true, EmitDefaultValue = true)]
        public MailProviderEnum MailProvider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProviderSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderSettings" /> class.
        /// </summary>
        /// <param name="mailProvider">mailProvider (required).</param>
        /// <param name="imapHost">imapHost (required).</param>
        /// <param name="imapPort">imapPort (required).</param>
        /// <param name="imapSsl">imapSsl (required).</param>
        /// <param name="imapStartTls">imapStartTls.</param>
        /// <param name="smtpHost">smtpHost (required).</param>
        /// <param name="smtpPort">smtpPort (required).</param>
        /// <param name="smtpSsl">smtpSsl (required).</param>
        /// <param name="smtpStartTls">smtpStartTls.</param>
        public ProviderSettings(MailProviderEnum mailProvider = default, string imapHost = default, int imapPort = default, bool imapSsl = default, bool imapStartTls = default, string smtpHost = default, int smtpPort = default, bool smtpSsl = default, bool smtpStartTls = default)
        {
            this.MailProvider = mailProvider;
            // to ensure "imapHost" is required (not null)
            if (imapHost == null)
            {
                throw new ArgumentNullException("imapHost is a required property for ProviderSettings and cannot be null");
            }
            this.ImapHost = imapHost;
            this.ImapPort = imapPort;
            this.ImapSsl = imapSsl;
            // to ensure "smtpHost" is required (not null)
            if (smtpHost == null)
            {
                throw new ArgumentNullException("smtpHost is a required property for ProviderSettings and cannot be null");
            }
            this.SmtpHost = smtpHost;
            this.SmtpPort = smtpPort;
            this.SmtpSsl = smtpSsl;
            this.ImapStartTls = imapStartTls;
            this.SmtpStartTls = smtpStartTls;
        }

        /// <summary>
        /// Gets or Sets ImapHost
        /// </summary>
        [DataMember(Name = "imapHost", IsRequired = true, EmitDefaultValue = true)]
        public string ImapHost { get; set; }

        /// <summary>
        /// Gets or Sets ImapPort
        /// </summary>
        [DataMember(Name = "imapPort", IsRequired = true, EmitDefaultValue = true)]
        public int ImapPort { get; set; }

        /// <summary>
        /// Gets or Sets ImapSsl
        /// </summary>
        [DataMember(Name = "imapSsl", IsRequired = true, EmitDefaultValue = true)]
        public bool ImapSsl { get; set; }

        /// <summary>
        /// Gets or Sets ImapStartTls
        /// </summary>
        [DataMember(Name = "imapStartTls", EmitDefaultValue = true)]
        public bool ImapStartTls { get; set; }

        /// <summary>
        /// Gets or Sets SmtpHost
        /// </summary>
        [DataMember(Name = "smtpHost", IsRequired = true, EmitDefaultValue = true)]
        public string SmtpHost { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPort
        /// </summary>
        [DataMember(Name = "smtpPort", IsRequired = true, EmitDefaultValue = true)]
        public int SmtpPort { get; set; }

        /// <summary>
        /// Gets or Sets SmtpSsl
        /// </summary>
        [DataMember(Name = "smtpSsl", IsRequired = true, EmitDefaultValue = true)]
        public bool SmtpSsl { get; set; }

        /// <summary>
        /// Gets or Sets SmtpStartTls
        /// </summary>
        [DataMember(Name = "smtpStartTls", EmitDefaultValue = true)]
        public bool SmtpStartTls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProviderSettings {\n");
            sb.Append("  MailProvider: ").Append(MailProvider).Append("\n");
            sb.Append("  ImapHost: ").Append(ImapHost).Append("\n");
            sb.Append("  ImapPort: ").Append(ImapPort).Append("\n");
            sb.Append("  ImapSsl: ").Append(ImapSsl).Append("\n");
            sb.Append("  ImapStartTls: ").Append(ImapStartTls).Append("\n");
            sb.Append("  SmtpHost: ").Append(SmtpHost).Append("\n");
            sb.Append("  SmtpPort: ").Append(SmtpPort).Append("\n");
            sb.Append("  SmtpSsl: ").Append(SmtpSsl).Append("\n");
            sb.Append("  SmtpStartTls: ").Append(SmtpStartTls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
