// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ProviderSettings
    /// </summary>
    public partial class ProviderSettings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderSettings" /> class.
        /// </summary>
        /// <param name="mailProvider">mailProvider</param>
        /// <param name="imapHost">imapHost</param>
        /// <param name="imapPort">imapPort</param>
        /// <param name="imapSsl">imapSsl</param>
        /// <param name="smtpHost">smtpHost</param>
        /// <param name="smtpPort">smtpPort</param>
        /// <param name="smtpSsl">smtpSsl</param>
        /// <param name="imapStartTls">imapStartTls</param>
        /// <param name="smtpStartTls">smtpStartTls</param>
        [JsonConstructor]
        public ProviderSettings(MailProviderEnum mailProvider, string imapHost, int imapPort, bool imapSsl, string smtpHost, int smtpPort, bool smtpSsl, Option<bool?> imapStartTls = default, Option<bool?> smtpStartTls = default)
        {
            MailProvider = mailProvider;
            ImapHost = imapHost;
            ImapPort = imapPort;
            ImapSsl = imapSsl;
            SmtpHost = smtpHost;
            SmtpPort = smtpPort;
            SmtpSsl = smtpSsl;
            ImapStartTlsOption = imapStartTls;
            SmtpStartTlsOption = smtpStartTls;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines MailProvider
        /// </summary>
        public enum MailProviderEnum
        {
            /// <summary>
            /// Enum GOOGLE for value: GOOGLE
            /// </summary>
            GOOGLE = 1,

            /// <summary>
            /// Enum MICROSOFT for value: MICROSOFT
            /// </summary>
            MICROSOFT = 2
        }

        /// <summary>
        /// Returns a <see cref="MailProviderEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MailProviderEnum MailProviderEnumFromString(string value)
        {
            if (value.Equals("GOOGLE"))
                return MailProviderEnum.GOOGLE;

            if (value.Equals("MICROSOFT"))
                return MailProviderEnum.MICROSOFT;

            throw new NotImplementedException($"Could not convert value to type MailProviderEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MailProviderEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MailProviderEnum? MailProviderEnumFromStringOrDefault(string value)
        {
            if (value.Equals("GOOGLE"))
                return MailProviderEnum.GOOGLE;

            if (value.Equals("MICROSOFT"))
                return MailProviderEnum.MICROSOFT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MailProviderEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MailProviderEnumToJsonValue(MailProviderEnum value)
        {
            if (value == MailProviderEnum.GOOGLE)
                return "GOOGLE";

            if (value == MailProviderEnum.MICROSOFT)
                return "MICROSOFT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets MailProvider
        /// </summary>
        [JsonPropertyName("mailProvider")]
        public MailProviderEnum MailProvider { get; set; }

        /// <summary>
        /// Gets or Sets ImapHost
        /// </summary>
        [JsonPropertyName("imapHost")]
        public string ImapHost { get; set; }

        /// <summary>
        /// Gets or Sets ImapPort
        /// </summary>
        [JsonPropertyName("imapPort")]
        public int ImapPort { get; set; }

        /// <summary>
        /// Gets or Sets ImapSsl
        /// </summary>
        [JsonPropertyName("imapSsl")]
        public bool ImapSsl { get; set; }

        /// <summary>
        /// Gets or Sets SmtpHost
        /// </summary>
        [JsonPropertyName("smtpHost")]
        public string SmtpHost { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPort
        /// </summary>
        [JsonPropertyName("smtpPort")]
        public int SmtpPort { get; set; }

        /// <summary>
        /// Gets or Sets SmtpSsl
        /// </summary>
        [JsonPropertyName("smtpSsl")]
        public bool SmtpSsl { get; set; }

        /// <summary>
        /// Used to track the state of ImapStartTls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ImapStartTlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImapStartTls
        /// </summary>
        [JsonPropertyName("imapStartTls")]
        public bool? ImapStartTls { get { return this.ImapStartTlsOption; } set { this.ImapStartTlsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SmtpStartTls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SmtpStartTlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SmtpStartTls
        /// </summary>
        [JsonPropertyName("smtpStartTls")]
        public bool? SmtpStartTls { get { return this.SmtpStartTlsOption; } set { this.SmtpStartTlsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProviderSettings {\n");
            sb.Append("  MailProvider: ").Append(MailProvider).Append("\n");
            sb.Append("  ImapHost: ").Append(ImapHost).Append("\n");
            sb.Append("  ImapPort: ").Append(ImapPort).Append("\n");
            sb.Append("  ImapSsl: ").Append(ImapSsl).Append("\n");
            sb.Append("  SmtpHost: ").Append(SmtpHost).Append("\n");
            sb.Append("  SmtpPort: ").Append(SmtpPort).Append("\n");
            sb.Append("  SmtpSsl: ").Append(SmtpSsl).Append("\n");
            sb.Append("  ImapStartTls: ").Append(ImapStartTls).Append("\n");
            sb.Append("  SmtpStartTls: ").Append(SmtpStartTls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProviderSettings" />
    /// </summary>
    public class ProviderSettingsJsonConverter : JsonConverter<ProviderSettings>
    {
        /// <summary>
        /// Deserializes json to <see cref="ProviderSettings" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProviderSettings Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ProviderSettings.MailProviderEnum?> mailProvider = default;
            Option<string> imapHost = default;
            Option<int?> imapPort = default;
            Option<bool?> imapSsl = default;
            Option<string> smtpHost = default;
            Option<int?> smtpPort = default;
            Option<bool?> smtpSsl = default;
            Option<bool?> imapStartTls = default;
            Option<bool?> smtpStartTls = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "mailProvider":
                            string mailProviderRawValue = utf8JsonReader.GetString();
                            if (mailProviderRawValue != null)
                                mailProvider = new Option<ProviderSettings.MailProviderEnum?>(ProviderSettings.MailProviderEnumFromStringOrDefault(mailProviderRawValue));
                            break;
                        case "imapHost":
                            imapHost = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "imapPort":
                            imapPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "imapSsl":
                            imapSsl = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "smtpHost":
                            smtpHost = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "smtpPort":
                            smtpPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "smtpSsl":
                            smtpSsl = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "imapStartTls":
                            imapStartTls = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "smtpStartTls":
                            smtpStartTls = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!mailProvider.IsSet)
                throw new ArgumentException("Property is required for class ProviderSettings.", nameof(mailProvider));

            if (!imapHost.IsSet)
                throw new ArgumentException("Property is required for class ProviderSettings.", nameof(imapHost));

            if (!imapPort.IsSet)
                throw new ArgumentException("Property is required for class ProviderSettings.", nameof(imapPort));

            if (!imapSsl.IsSet)
                throw new ArgumentException("Property is required for class ProviderSettings.", nameof(imapSsl));

            if (!smtpHost.IsSet)
                throw new ArgumentException("Property is required for class ProviderSettings.", nameof(smtpHost));

            if (!smtpPort.IsSet)
                throw new ArgumentException("Property is required for class ProviderSettings.", nameof(smtpPort));

            if (!smtpSsl.IsSet)
                throw new ArgumentException("Property is required for class ProviderSettings.", nameof(smtpSsl));

            if (mailProvider.IsSet && mailProvider.Value == null)
                throw new ArgumentNullException(nameof(mailProvider), "Property is not nullable for class ProviderSettings.");

            if (imapHost.IsSet && imapHost.Value == null)
                throw new ArgumentNullException(nameof(imapHost), "Property is not nullable for class ProviderSettings.");

            if (imapPort.IsSet && imapPort.Value == null)
                throw new ArgumentNullException(nameof(imapPort), "Property is not nullable for class ProviderSettings.");

            if (imapSsl.IsSet && imapSsl.Value == null)
                throw new ArgumentNullException(nameof(imapSsl), "Property is not nullable for class ProviderSettings.");

            if (smtpHost.IsSet && smtpHost.Value == null)
                throw new ArgumentNullException(nameof(smtpHost), "Property is not nullable for class ProviderSettings.");

            if (smtpPort.IsSet && smtpPort.Value == null)
                throw new ArgumentNullException(nameof(smtpPort), "Property is not nullable for class ProviderSettings.");

            if (smtpSsl.IsSet && smtpSsl.Value == null)
                throw new ArgumentNullException(nameof(smtpSsl), "Property is not nullable for class ProviderSettings.");

            if (imapStartTls.IsSet && imapStartTls.Value == null)
                throw new ArgumentNullException(nameof(imapStartTls), "Property is not nullable for class ProviderSettings.");

            if (smtpStartTls.IsSet && smtpStartTls.Value == null)
                throw new ArgumentNullException(nameof(smtpStartTls), "Property is not nullable for class ProviderSettings.");

            return new ProviderSettings(mailProvider.Value.Value, imapHost.Value, imapPort.Value.Value, imapSsl.Value.Value, smtpHost.Value, smtpPort.Value.Value, smtpSsl.Value.Value, imapStartTls, smtpStartTls);
        }

        /// <summary>
        /// Serializes a <see cref="ProviderSettings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="providerSettings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProviderSettings providerSettings, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, providerSettings, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProviderSettings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="providerSettings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProviderSettings providerSettings, JsonSerializerOptions jsonSerializerOptions)
        {
            if (providerSettings.ImapHost == null)
                throw new ArgumentNullException(nameof(providerSettings.ImapHost), "Property is required for class ProviderSettings.");

            if (providerSettings.SmtpHost == null)
                throw new ArgumentNullException(nameof(providerSettings.SmtpHost), "Property is required for class ProviderSettings.");

            var mailProviderRawValue = ProviderSettings.MailProviderEnumToJsonValue(providerSettings.MailProvider);
            writer.WriteString("mailProvider", mailProviderRawValue);
            writer.WriteString("imapHost", providerSettings.ImapHost);

            writer.WriteNumber("imapPort", providerSettings.ImapPort);

            writer.WriteBoolean("imapSsl", providerSettings.ImapSsl);

            writer.WriteString("smtpHost", providerSettings.SmtpHost);

            writer.WriteNumber("smtpPort", providerSettings.SmtpPort);

            writer.WriteBoolean("smtpSsl", providerSettings.SmtpSsl);

            if (providerSettings.ImapStartTlsOption.IsSet)
                writer.WriteBoolean("imapStartTls", providerSettings.ImapStartTlsOption.Value.Value);

            if (providerSettings.SmtpStartTlsOption.IsSet)
                writer.WriteBoolean("smtpStartTls", providerSettings.SmtpStartTlsOption.Value.Value);
        }
    }
}
