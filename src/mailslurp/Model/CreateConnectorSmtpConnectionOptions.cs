// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// CreateConnectorSmtpConnectionOptions
    /// </summary>
    public partial class CreateConnectorSmtpConnectionOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorSmtpConnectionOptions" /> class.
        /// </summary>
        /// <param name="smtpHost">smtpHost</param>
        /// <param name="enabled">enabled</param>
        /// <param name="smtpPort">smtpPort</param>
        /// <param name="smtpSsl">smtpSsl</param>
        /// <param name="smtpUsername">smtpUsername</param>
        /// <param name="smtpPassword">smtpPassword</param>
        /// <param name="smtpMechanisms">smtpMechanisms</param>
        /// <param name="startTls">startTls</param>
        /// <param name="localHostName">localHostName</param>
        /// <param name="proxyHost">proxyHost</param>
        /// <param name="proxyPort">proxyPort</param>
        /// <param name="proxyEnabled">proxyEnabled</param>
        /// <param name="sslTrust">sslTrust</param>
        /// <param name="sslProtocols">sslProtocols</param>
        [JsonConstructor]
        public CreateConnectorSmtpConnectionOptions(string smtpHost, Option<bool?> enabled = default, Option<int?> smtpPort = default, Option<bool?> smtpSsl = default, Option<string> smtpUsername = default, Option<string> smtpPassword = default, Option<List<string>> smtpMechanisms = default, Option<bool?> startTls = default, Option<string> localHostName = default, Option<string> proxyHost = default, Option<int?> proxyPort = default, Option<bool?> proxyEnabled = default, Option<string> sslTrust = default, Option<List<string>> sslProtocols = default)
        {
            SmtpHost = smtpHost;
            EnabledOption = enabled;
            SmtpPortOption = smtpPort;
            SmtpSslOption = smtpSsl;
            SmtpUsernameOption = smtpUsername;
            SmtpPasswordOption = smtpPassword;
            SmtpMechanismsOption = smtpMechanisms;
            StartTlsOption = startTls;
            LocalHostNameOption = localHostName;
            ProxyHostOption = proxyHost;
            ProxyPortOption = proxyPort;
            ProxyEnabledOption = proxyEnabled;
            SslTrustOption = sslTrust;
            SslProtocolsOption = sslProtocols;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SmtpHost
        /// </summary>
        [JsonPropertyName("smtpHost")]
        public string SmtpHost { get; set; }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SmtpPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SmtpPortOption { get; private set; }

        /// <summary>
        /// Gets or Sets SmtpPort
        /// </summary>
        [JsonPropertyName("smtpPort")]
        public int? SmtpPort { get { return this.SmtpPortOption; } set { this.SmtpPortOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of SmtpSsl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SmtpSslOption { get; private set; }

        /// <summary>
        /// Gets or Sets SmtpSsl
        /// </summary>
        [JsonPropertyName("smtpSsl")]
        public bool? SmtpSsl { get { return this.SmtpSslOption; } set { this.SmtpSslOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SmtpUsername
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SmtpUsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets SmtpUsername
        /// </summary>
        [JsonPropertyName("smtpUsername")]
        public string SmtpUsername { get { return this.SmtpUsernameOption; } set { this.SmtpUsernameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SmtpPassword
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SmtpPasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets SmtpPassword
        /// </summary>
        [JsonPropertyName("smtpPassword")]
        public string SmtpPassword { get { return this.SmtpPasswordOption; } set { this.SmtpPasswordOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SmtpMechanisms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> SmtpMechanismsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SmtpMechanisms
        /// </summary>
        [JsonPropertyName("smtpMechanisms")]
        public List<string> SmtpMechanisms { get { return this.SmtpMechanismsOption; } set { this.SmtpMechanismsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of StartTls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StartTlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTls
        /// </summary>
        [JsonPropertyName("startTls")]
        public bool? StartTls { get { return this.StartTlsOption; } set { this.StartTlsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of LocalHostName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LocalHostNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LocalHostName
        /// </summary>
        [JsonPropertyName("localHostName")]
        public string LocalHostName { get { return this.LocalHostNameOption; } set { this.LocalHostNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProxyHost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProxyHostOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProxyHost
        /// </summary>
        [JsonPropertyName("proxyHost")]
        public string ProxyHost { get { return this.ProxyHostOption; } set { this.ProxyHostOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProxyPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProxyPortOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProxyPort
        /// </summary>
        [JsonPropertyName("proxyPort")]
        public int? ProxyPort { get { return this.ProxyPortOption; } set { this.ProxyPortOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ProxyEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ProxyEnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProxyEnabled
        /// </summary>
        [JsonPropertyName("proxyEnabled")]
        public bool? ProxyEnabled { get { return this.ProxyEnabledOption; } set { this.ProxyEnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SslTrust
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SslTrustOption { get; private set; }

        /// <summary>
        /// Gets or Sets SslTrust
        /// </summary>
        [JsonPropertyName("sslTrust")]
        public string SslTrust { get { return this.SslTrustOption; } set { this.SslTrustOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SslProtocols
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> SslProtocolsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SslProtocols
        /// </summary>
        [JsonPropertyName("sslProtocols")]
        public List<string> SslProtocols { get { return this.SslProtocolsOption; } set { this.SslProtocolsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectorSmtpConnectionOptions {\n");
            sb.Append("  SmtpHost: ").Append(SmtpHost).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  SmtpPort: ").Append(SmtpPort).Append("\n");
            sb.Append("  SmtpSsl: ").Append(SmtpSsl).Append("\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("  SmtpMechanisms: ").Append(SmtpMechanisms).Append("\n");
            sb.Append("  StartTls: ").Append(StartTls).Append("\n");
            sb.Append("  LocalHostName: ").Append(LocalHostName).Append("\n");
            sb.Append("  ProxyHost: ").Append(ProxyHost).Append("\n");
            sb.Append("  ProxyPort: ").Append(ProxyPort).Append("\n");
            sb.Append("  ProxyEnabled: ").Append(ProxyEnabled).Append("\n");
            sb.Append("  SslTrust: ").Append(SslTrust).Append("\n");
            sb.Append("  SslProtocols: ").Append(SslProtocols).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateConnectorSmtpConnectionOptions" />
    /// </summary>
    public class CreateConnectorSmtpConnectionOptionsJsonConverter : JsonConverter<CreateConnectorSmtpConnectionOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateConnectorSmtpConnectionOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateConnectorSmtpConnectionOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> smtpHost = default;
            Option<bool?> enabled = default;
            Option<int?> smtpPort = default;
            Option<bool?> smtpSsl = default;
            Option<string> smtpUsername = default;
            Option<string> smtpPassword = default;
            Option<List<string>> smtpMechanisms = default;
            Option<bool?> startTls = default;
            Option<string> localHostName = default;
            Option<string> proxyHost = default;
            Option<int?> proxyPort = default;
            Option<bool?> proxyEnabled = default;
            Option<string> sslTrust = default;
            Option<List<string>> sslProtocols = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "smtpHost":
                            smtpHost = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "smtpPort":
                            smtpPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "smtpSsl":
                            smtpSsl = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "smtpUsername":
                            smtpUsername = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "smtpPassword":
                            smtpPassword = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "smtpMechanisms":
                            smtpMechanisms = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "startTls":
                            startTls = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "localHostName":
                            localHostName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "proxyHost":
                            proxyHost = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "proxyPort":
                            proxyPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "proxyEnabled":
                            proxyEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sslTrust":
                            sslTrust = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sslProtocols":
                            sslProtocols = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!smtpHost.IsSet)
                throw new ArgumentException("Property is required for class CreateConnectorSmtpConnectionOptions.", nameof(smtpHost));

            if (smtpHost.IsSet && smtpHost.Value == null)
                throw new ArgumentNullException(nameof(smtpHost), "Property is not nullable for class CreateConnectorSmtpConnectionOptions.");

            return new CreateConnectorSmtpConnectionOptions(smtpHost.Value, enabled, smtpPort, smtpSsl, smtpUsername, smtpPassword, smtpMechanisms, startTls, localHostName, proxyHost, proxyPort, proxyEnabled, sslTrust, sslProtocols);
        }

        /// <summary>
        /// Serializes a <see cref="CreateConnectorSmtpConnectionOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createConnectorSmtpConnectionOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateConnectorSmtpConnectionOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createConnectorSmtpConnectionOptions.SmtpHost == null)
                throw new ArgumentNullException(nameof(createConnectorSmtpConnectionOptions.SmtpHost), "Property is required for class CreateConnectorSmtpConnectionOptions.");

            writer.WriteString("smtpHost", createConnectorSmtpConnectionOptions.SmtpHost);

            if (createConnectorSmtpConnectionOptions.EnabledOption.IsSet)
                if (createConnectorSmtpConnectionOptions.EnabledOption.Value != null)
                    writer.WriteBoolean("enabled", createConnectorSmtpConnectionOptions.EnabledOption.Value.Value);
                else
                    writer.WriteNull("enabled");

            if (createConnectorSmtpConnectionOptions.SmtpPortOption.IsSet)
                if (createConnectorSmtpConnectionOptions.SmtpPortOption.Value != null)
                    writer.WriteNumber("smtpPort", createConnectorSmtpConnectionOptions.SmtpPortOption.Value.Value);
                else
                    writer.WriteNull("smtpPort");

            if (createConnectorSmtpConnectionOptions.SmtpSslOption.IsSet)
                if (createConnectorSmtpConnectionOptions.SmtpSslOption.Value != null)
                    writer.WriteBoolean("smtpSsl", createConnectorSmtpConnectionOptions.SmtpSslOption.Value.Value);
                else
                    writer.WriteNull("smtpSsl");

            if (createConnectorSmtpConnectionOptions.SmtpUsernameOption.IsSet)
                if (createConnectorSmtpConnectionOptions.SmtpUsernameOption.Value != null)
                    writer.WriteString("smtpUsername", createConnectorSmtpConnectionOptions.SmtpUsername);
                else
                    writer.WriteNull("smtpUsername");

            if (createConnectorSmtpConnectionOptions.SmtpPasswordOption.IsSet)
                if (createConnectorSmtpConnectionOptions.SmtpPasswordOption.Value != null)
                    writer.WriteString("smtpPassword", createConnectorSmtpConnectionOptions.SmtpPassword);
                else
                    writer.WriteNull("smtpPassword");

            if (createConnectorSmtpConnectionOptions.SmtpMechanismsOption.IsSet)
                if (createConnectorSmtpConnectionOptions.SmtpMechanismsOption.Value != null)
                {
                    writer.WritePropertyName("smtpMechanisms");
                    JsonSerializer.Serialize(writer, createConnectorSmtpConnectionOptions.SmtpMechanisms, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("smtpMechanisms");
            if (createConnectorSmtpConnectionOptions.StartTlsOption.IsSet)
                if (createConnectorSmtpConnectionOptions.StartTlsOption.Value != null)
                    writer.WriteBoolean("startTls", createConnectorSmtpConnectionOptions.StartTlsOption.Value.Value);
                else
                    writer.WriteNull("startTls");

            if (createConnectorSmtpConnectionOptions.LocalHostNameOption.IsSet)
                if (createConnectorSmtpConnectionOptions.LocalHostNameOption.Value != null)
                    writer.WriteString("localHostName", createConnectorSmtpConnectionOptions.LocalHostName);
                else
                    writer.WriteNull("localHostName");

            if (createConnectorSmtpConnectionOptions.ProxyHostOption.IsSet)
                if (createConnectorSmtpConnectionOptions.ProxyHostOption.Value != null)
                    writer.WriteString("proxyHost", createConnectorSmtpConnectionOptions.ProxyHost);
                else
                    writer.WriteNull("proxyHost");

            if (createConnectorSmtpConnectionOptions.ProxyPortOption.IsSet)
                if (createConnectorSmtpConnectionOptions.ProxyPortOption.Value != null)
                    writer.WriteNumber("proxyPort", createConnectorSmtpConnectionOptions.ProxyPortOption.Value.Value);
                else
                    writer.WriteNull("proxyPort");

            if (createConnectorSmtpConnectionOptions.ProxyEnabledOption.IsSet)
                if (createConnectorSmtpConnectionOptions.ProxyEnabledOption.Value != null)
                    writer.WriteBoolean("proxyEnabled", createConnectorSmtpConnectionOptions.ProxyEnabledOption.Value.Value);
                else
                    writer.WriteNull("proxyEnabled");

            if (createConnectorSmtpConnectionOptions.SslTrustOption.IsSet)
                if (createConnectorSmtpConnectionOptions.SslTrustOption.Value != null)
                    writer.WriteString("sslTrust", createConnectorSmtpConnectionOptions.SslTrust);
                else
                    writer.WriteNull("sslTrust");

            if (createConnectorSmtpConnectionOptions.SslProtocolsOption.IsSet)
                if (createConnectorSmtpConnectionOptions.SslProtocolsOption.Value != null)
                {
                    writer.WritePropertyName("sslProtocols");
                    JsonSerializer.Serialize(writer, createConnectorSmtpConnectionOptions.SslProtocols, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sslProtocols");
        }
    }
}
