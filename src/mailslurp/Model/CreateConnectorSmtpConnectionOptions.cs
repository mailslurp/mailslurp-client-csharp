/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// CreateConnectorSmtpConnectionOptions
    /// </summary>
    [DataContract(Name = "CreateConnectorSmtpConnectionOptions")]
    public partial class CreateConnectorSmtpConnectionOptions : IEquatable<CreateConnectorSmtpConnectionOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorSmtpConnectionOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateConnectorSmtpConnectionOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorSmtpConnectionOptions" /> class.
        /// </summary>
        /// <param name="enabled">enabled.</param>
        /// <param name="smtpHost">smtpHost (required).</param>
        /// <param name="smtpPort">smtpPort.</param>
        /// <param name="smtpSsl">smtpSsl.</param>
        /// <param name="smtpUsername">smtpUsername.</param>
        /// <param name="smtpPassword">smtpPassword.</param>
        public CreateConnectorSmtpConnectionOptions(bool enabled = default(bool), string smtpHost = default(string), int smtpPort = default(int), bool smtpSsl = default(bool), string smtpUsername = default(string), string smtpPassword = default(string))
        {
            // to ensure "smtpHost" is required (not null)
            if (smtpHost == null)
            {
                throw new ArgumentNullException("smtpHost is a required property for CreateConnectorSmtpConnectionOptions and cannot be null");
            }
            this.SmtpHost = smtpHost;
            this.Enabled = enabled;
            this.SmtpPort = smtpPort;
            this.SmtpSsl = smtpSsl;
            this.SmtpUsername = smtpUsername;
            this.SmtpPassword = smtpPassword;
        }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets SmtpHost
        /// </summary>
        [DataMember(Name = "smtpHost", IsRequired = true, EmitDefaultValue = true)]
        public string SmtpHost { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPort
        /// </summary>
        [DataMember(Name = "smtpPort", EmitDefaultValue = false)]
        public int SmtpPort { get; set; }

        /// <summary>
        /// Gets or Sets SmtpSsl
        /// </summary>
        [DataMember(Name = "smtpSsl", EmitDefaultValue = true)]
        public bool SmtpSsl { get; set; }

        /// <summary>
        /// Gets or Sets SmtpUsername
        /// </summary>
        [DataMember(Name = "smtpUsername", EmitDefaultValue = false)]
        public string SmtpUsername { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPassword
        /// </summary>
        [DataMember(Name = "smtpPassword", EmitDefaultValue = false)]
        public string SmtpPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectorSmtpConnectionOptions {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  SmtpHost: ").Append(SmtpHost).Append("\n");
            sb.Append("  SmtpPort: ").Append(SmtpPort).Append("\n");
            sb.Append("  SmtpSsl: ").Append(SmtpSsl).Append("\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateConnectorSmtpConnectionOptions);
        }

        /// <summary>
        /// Returns true if CreateConnectorSmtpConnectionOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateConnectorSmtpConnectionOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateConnectorSmtpConnectionOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.SmtpHost == input.SmtpHost ||
                    (this.SmtpHost != null &&
                    this.SmtpHost.Equals(input.SmtpHost))
                ) && 
                (
                    this.SmtpPort == input.SmtpPort ||
                    this.SmtpPort.Equals(input.SmtpPort)
                ) && 
                (
                    this.SmtpSsl == input.SmtpSsl ||
                    this.SmtpSsl.Equals(input.SmtpSsl)
                ) && 
                (
                    this.SmtpUsername == input.SmtpUsername ||
                    (this.SmtpUsername != null &&
                    this.SmtpUsername.Equals(input.SmtpUsername))
                ) && 
                (
                    this.SmtpPassword == input.SmtpPassword ||
                    (this.SmtpPassword != null &&
                    this.SmtpPassword.Equals(input.SmtpPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.SmtpHost != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpHost.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SmtpPort.GetHashCode();
                hashCode = (hashCode * 59) + this.SmtpSsl.GetHashCode();
                if (this.SmtpUsername != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpUsername.GetHashCode();
                }
                if (this.SmtpPassword != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpPassword.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
