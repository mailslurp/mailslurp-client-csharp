// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Unknown missed email projection
    /// </summary>
    public partial class UnknownMissedEmailProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnknownMissedEmailProjection" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="to">to</param>
        /// <param name="subject">subject</param>
        /// <param name="from">from</param>
        [JsonConstructor]
        public UnknownMissedEmailProjection(DateTime createdAt, Guid id, Option<List<string>> to = default, Option<string> subject = default, Option<string> from = default)
        {
            CreatedAt = createdAt;
            Id = id;
            ToOption = to;
            SubjectOption = subject;
            FromOption = from;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of To
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> ToOption { get; private set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [JsonPropertyName("to")]
        public List<string> To { get { return this.ToOption; } set { this.ToOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnknownMissedEmailProjection {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UnknownMissedEmailProjection" />
    /// </summary>
    public class UnknownMissedEmailProjectionJsonConverter : JsonConverter<UnknownMissedEmailProjection>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UnknownMissedEmailProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UnknownMissedEmailProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<Guid?> id = default;
            Option<List<string>> to = default;
            Option<string> subject = default;
            Option<string> from = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class UnknownMissedEmailProjection.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UnknownMissedEmailProjection.", nameof(id));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class UnknownMissedEmailProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UnknownMissedEmailProjection.");

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class UnknownMissedEmailProjection.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class UnknownMissedEmailProjection.");

            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from), "Property is not nullable for class UnknownMissedEmailProjection.");

            return new UnknownMissedEmailProjection(createdAt.Value.Value, id.Value.Value, to, subject, from);
        }

        /// <summary>
        /// Serializes a <see cref="UnknownMissedEmailProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="unknownMissedEmailProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UnknownMissedEmailProjection unknownMissedEmailProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, unknownMissedEmailProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UnknownMissedEmailProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="unknownMissedEmailProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UnknownMissedEmailProjection unknownMissedEmailProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (unknownMissedEmailProjection.ToOption.IsSet && unknownMissedEmailProjection.To == null)
                throw new ArgumentNullException(nameof(unknownMissedEmailProjection.To), "Property is required for class UnknownMissedEmailProjection.");

            if (unknownMissedEmailProjection.SubjectOption.IsSet && unknownMissedEmailProjection.Subject == null)
                throw new ArgumentNullException(nameof(unknownMissedEmailProjection.Subject), "Property is required for class UnknownMissedEmailProjection.");

            if (unknownMissedEmailProjection.FromOption.IsSet && unknownMissedEmailProjection.From == null)
                throw new ArgumentNullException(nameof(unknownMissedEmailProjection.From), "Property is required for class UnknownMissedEmailProjection.");

            writer.WriteString("createdAt", unknownMissedEmailProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", unknownMissedEmailProjection.Id);

            if (unknownMissedEmailProjection.ToOption.IsSet)
            {
                writer.WritePropertyName("to");
                JsonSerializer.Serialize(writer, unknownMissedEmailProjection.To, jsonSerializerOptions);
            }
            if (unknownMissedEmailProjection.SubjectOption.IsSet)
                writer.WriteString("subject", unknownMissedEmailProjection.Subject);

            if (unknownMissedEmailProjection.FromOption.IsSet)
                writer.WriteString("from", unknownMissedEmailProjection.From);
        }
    }
}
