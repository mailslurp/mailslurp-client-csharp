/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorSmtpConnectionDto
    /// </summary>
    [DataContract(Name = "ConnectorSmtpConnectionDto")]
    public partial class ConnectorSmtpConnectionDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorSmtpConnectionDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectorSmtpConnectionDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorSmtpConnectionDto" /> class.
        /// </summary>
        /// <param name="connectorId">connectorId (required).</param>
        /// <param name="smtpHost">smtpHost (required).</param>
        /// <param name="smtpPort">smtpPort.</param>
        /// <param name="smtpUsername">smtpUsername.</param>
        /// <param name="smtpPassword">smtpPassword.</param>
        /// <param name="smtpSsl">smtpSsl.</param>
        /// <param name="startTls">startTls.</param>
        /// <param name="smtpMechanisms">smtpMechanisms.</param>
        /// <param name="localHostName">localHostName.</param>
        /// <param name="proxyHost">proxyHost.</param>
        /// <param name="proxyPort">proxyPort.</param>
        /// <param name="proxyEnabled">proxyEnabled.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="sslTrust">sslTrust.</param>
        /// <param name="sslProtocols">sslProtocols.</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="id">id (required).</param>
        public ConnectorSmtpConnectionDto(Guid connectorId = default, string smtpHost = default, int? smtpPort = default, string smtpUsername = default, string smtpPassword = default, bool? smtpSsl = default, bool? startTls = default, List<string> smtpMechanisms = default, string localHostName = default, string proxyHost = default, int? proxyPort = default, bool? proxyEnabled = default, bool? enabled = default, string sslTrust = default, List<string> sslProtocols = default, DateTime createdAt = default, Guid id = default)
        {
            this.ConnectorId = connectorId;
            // to ensure "smtpHost" is required (not null)
            if (smtpHost == null)
            {
                throw new ArgumentNullException("smtpHost is a required property for ConnectorSmtpConnectionDto and cannot be null");
            }
            this.SmtpHost = smtpHost;
            this.CreatedAt = createdAt;
            this.Id = id;
            this.SmtpPort = smtpPort;
            this.SmtpUsername = smtpUsername;
            this.SmtpPassword = smtpPassword;
            this.SmtpSsl = smtpSsl;
            this.StartTls = startTls;
            this.SmtpMechanisms = smtpMechanisms;
            this.LocalHostName = localHostName;
            this.ProxyHost = proxyHost;
            this.ProxyPort = proxyPort;
            this.ProxyEnabled = proxyEnabled;
            this.Enabled = enabled;
            this.SslTrust = sslTrust;
            this.SslProtocols = sslProtocols;
        }

        /// <summary>
        /// Gets or Sets ConnectorId
        /// </summary>
        [DataMember(Name = "connectorId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ConnectorId { get; set; }

        /// <summary>
        /// Gets or Sets SmtpHost
        /// </summary>
        [DataMember(Name = "smtpHost", IsRequired = true, EmitDefaultValue = true)]
        public string SmtpHost { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPort
        /// </summary>
        [DataMember(Name = "smtpPort", EmitDefaultValue = true)]
        public int? SmtpPort { get; set; }

        /// <summary>
        /// Gets or Sets SmtpUsername
        /// </summary>
        [DataMember(Name = "smtpUsername", EmitDefaultValue = true)]
        public string SmtpUsername { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPassword
        /// </summary>
        [DataMember(Name = "smtpPassword", EmitDefaultValue = true)]
        public string SmtpPassword { get; set; }

        /// <summary>
        /// Gets or Sets SmtpSsl
        /// </summary>
        [DataMember(Name = "smtpSsl", EmitDefaultValue = true)]
        public bool? SmtpSsl { get; set; }

        /// <summary>
        /// Gets or Sets StartTls
        /// </summary>
        [DataMember(Name = "startTls", EmitDefaultValue = true)]
        public bool? StartTls { get; set; }

        /// <summary>
        /// Gets or Sets SmtpMechanisms
        /// </summary>
        [DataMember(Name = "smtpMechanisms", EmitDefaultValue = true)]
        public List<string> SmtpMechanisms { get; set; }

        /// <summary>
        /// Gets or Sets LocalHostName
        /// </summary>
        [DataMember(Name = "localHostName", EmitDefaultValue = true)]
        public string LocalHostName { get; set; }

        /// <summary>
        /// Gets or Sets ProxyHost
        /// </summary>
        [DataMember(Name = "proxyHost", EmitDefaultValue = true)]
        public string ProxyHost { get; set; }

        /// <summary>
        /// Gets or Sets ProxyPort
        /// </summary>
        [DataMember(Name = "proxyPort", EmitDefaultValue = true)]
        public int? ProxyPort { get; set; }

        /// <summary>
        /// Gets or Sets ProxyEnabled
        /// </summary>
        [DataMember(Name = "proxyEnabled", EmitDefaultValue = true)]
        public bool? ProxyEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets SslTrust
        /// </summary>
        [DataMember(Name = "sslTrust", EmitDefaultValue = true)]
        public string SslTrust { get; set; }

        /// <summary>
        /// Gets or Sets SslProtocols
        /// </summary>
        [DataMember(Name = "sslProtocols", EmitDefaultValue = true)]
        public List<string> SslProtocols { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorSmtpConnectionDto {\n");
            sb.Append("  ConnectorId: ").Append(ConnectorId).Append("\n");
            sb.Append("  SmtpHost: ").Append(SmtpHost).Append("\n");
            sb.Append("  SmtpPort: ").Append(SmtpPort).Append("\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("  SmtpSsl: ").Append(SmtpSsl).Append("\n");
            sb.Append("  StartTls: ").Append(StartTls).Append("\n");
            sb.Append("  SmtpMechanisms: ").Append(SmtpMechanisms).Append("\n");
            sb.Append("  LocalHostName: ").Append(LocalHostName).Append("\n");
            sb.Append("  ProxyHost: ").Append(ProxyHost).Append("\n");
            sb.Append("  ProxyPort: ").Append(ProxyPort).Append("\n");
            sb.Append("  ProxyEnabled: ").Append(ProxyEnabled).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  SslTrust: ").Append(SslTrust).Append("\n");
            sb.Append("  SslProtocols: ").Append(SslProtocols).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
