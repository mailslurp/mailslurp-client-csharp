/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// GenerateTlsReportingRecordOptions
    /// </summary>
    [DataContract(Name = "GenerateTlsReportingRecordOptions")]
    public partial class GenerateTlsReportingRecordOptions : IValidatableObject
    {
        /// <summary>
        /// Defines VarVersion
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VarVersionEnum
        {
            /// <summary>
            /// Enum TLSRPTv1 for value: TLSRPTv1
            /// </summary>
            [EnumMember(Value = "TLSRPTv1")]
            TLSRPTv1 = 1
        }


        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public VarVersionEnum VarVersion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateTlsReportingRecordOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateTlsReportingRecordOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateTlsReportingRecordOptions" /> class.
        /// </summary>
        /// <param name="reportingAddresses">reportingAddresses (required).</param>
        /// <param name="reportingUrl">reportingUrl.</param>
        /// <param name="host">host (required).</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="ttl">ttl (required).</param>
        public GenerateTlsReportingRecordOptions(List<string> reportingAddresses = default, string reportingUrl = default, string host = default, VarVersionEnum varVersion = default, int ttl = default)
        {
            // to ensure "reportingAddresses" is required (not null)
            if (reportingAddresses == null)
            {
                throw new ArgumentNullException("reportingAddresses is a required property for GenerateTlsReportingRecordOptions and cannot be null");
            }
            this.ReportingAddresses = reportingAddresses;
            // to ensure "host" is required (not null)
            if (host == null)
            {
                throw new ArgumentNullException("host is a required property for GenerateTlsReportingRecordOptions and cannot be null");
            }
            this.Host = host;
            this.VarVersion = varVersion;
            this.Ttl = ttl;
            this.ReportingUrl = reportingUrl;
        }

        /// <summary>
        /// Gets or Sets ReportingAddresses
        /// </summary>
        [DataMember(Name = "reportingAddresses", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ReportingAddresses { get; set; }

        /// <summary>
        /// Gets or Sets ReportingUrl
        /// </summary>
        [DataMember(Name = "reportingUrl", EmitDefaultValue = false)]
        public string ReportingUrl { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", IsRequired = true, EmitDefaultValue = true)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        [DataMember(Name = "ttl", IsRequired = true, EmitDefaultValue = true)]
        public int Ttl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateTlsReportingRecordOptions {\n");
            sb.Append("  ReportingAddresses: ").Append(ReportingAddresses).Append("\n");
            sb.Append("  ReportingUrl: ").Append(ReportingUrl).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
