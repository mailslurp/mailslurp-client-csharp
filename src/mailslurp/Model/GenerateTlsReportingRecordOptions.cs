// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// GenerateTlsReportingRecordOptions
    /// </summary>
    public partial class GenerateTlsReportingRecordOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateTlsReportingRecordOptions" /> class.
        /// </summary>
        /// <param name="reportingAddresses">reportingAddresses</param>
        /// <param name="host">host</param>
        /// <param name="varVersion">varVersion</param>
        /// <param name="ttl">ttl</param>
        /// <param name="reportingUrl">reportingUrl</param>
        [JsonConstructor]
        public GenerateTlsReportingRecordOptions(List<string> reportingAddresses, string host, VarVersionEnum varVersion, int ttl, Option<string> reportingUrl = default)
        {
            ReportingAddresses = reportingAddresses;
            Host = host;
            VarVersion = varVersion;
            Ttl = ttl;
            ReportingUrlOption = reportingUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines VarVersion
        /// </summary>
        public enum VarVersionEnum
        {
            /// <summary>
            /// Enum TLSRPTv1 for value: TLSRPTv1
            /// </summary>
            TLSRPTv1 = 1
        }

        /// <summary>
        /// Returns a <see cref="VarVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VarVersionEnum VarVersionEnumFromString(string value)
        {
            if (value.Equals("TLSRPTv1"))
                return VarVersionEnum.TLSRPTv1;

            throw new NotImplementedException($"Could not convert value to type VarVersionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VarVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VarVersionEnum? VarVersionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TLSRPTv1"))
                return VarVersionEnum.TLSRPTv1;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VarVersionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VarVersionEnumToJsonValue(VarVersionEnum value)
        {
            if (value == VarVersionEnum.TLSRPTv1)
                return "TLSRPTv1";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public VarVersionEnum VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets ReportingAddresses
        /// </summary>
        [JsonPropertyName("reportingAddresses")]
        public List<string> ReportingAddresses { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [JsonPropertyName("host")]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        [JsonPropertyName("ttl")]
        public int Ttl { get; set; }

        /// <summary>
        /// Used to track the state of ReportingUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReportingUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReportingUrl
        /// </summary>
        [JsonPropertyName("reportingUrl")]
        public string ReportingUrl { get { return this.ReportingUrlOption; } set { this.ReportingUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateTlsReportingRecordOptions {\n");
            sb.Append("  ReportingAddresses: ").Append(ReportingAddresses).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  ReportingUrl: ").Append(ReportingUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GenerateTlsReportingRecordOptions" />
    /// </summary>
    public class GenerateTlsReportingRecordOptionsJsonConverter : JsonConverter<GenerateTlsReportingRecordOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="GenerateTlsReportingRecordOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GenerateTlsReportingRecordOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>> reportingAddresses = default;
            Option<string> host = default;
            Option<GenerateTlsReportingRecordOptions.VarVersionEnum?> varVersion = default;
            Option<int?> ttl = default;
            Option<string> reportingUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "reportingAddresses":
                            reportingAddresses = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "host":
                            host = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "version":
                            string varVersionRawValue = utf8JsonReader.GetString();
                            if (varVersionRawValue != null)
                                varVersion = new Option<GenerateTlsReportingRecordOptions.VarVersionEnum?>(GenerateTlsReportingRecordOptions.VarVersionEnumFromStringOrDefault(varVersionRawValue));
                            break;
                        case "ttl":
                            ttl = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "reportingUrl":
                            reportingUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!reportingAddresses.IsSet)
                throw new ArgumentException("Property is required for class GenerateTlsReportingRecordOptions.", nameof(reportingAddresses));

            if (!host.IsSet)
                throw new ArgumentException("Property is required for class GenerateTlsReportingRecordOptions.", nameof(host));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class GenerateTlsReportingRecordOptions.", nameof(varVersion));

            if (!ttl.IsSet)
                throw new ArgumentException("Property is required for class GenerateTlsReportingRecordOptions.", nameof(ttl));

            if (reportingAddresses.IsSet && reportingAddresses.Value == null)
                throw new ArgumentNullException(nameof(reportingAddresses), "Property is not nullable for class GenerateTlsReportingRecordOptions.");

            if (host.IsSet && host.Value == null)
                throw new ArgumentNullException(nameof(host), "Property is not nullable for class GenerateTlsReportingRecordOptions.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class GenerateTlsReportingRecordOptions.");

            if (ttl.IsSet && ttl.Value == null)
                throw new ArgumentNullException(nameof(ttl), "Property is not nullable for class GenerateTlsReportingRecordOptions.");

            if (reportingUrl.IsSet && reportingUrl.Value == null)
                throw new ArgumentNullException(nameof(reportingUrl), "Property is not nullable for class GenerateTlsReportingRecordOptions.");

            return new GenerateTlsReportingRecordOptions(reportingAddresses.Value, host.Value, varVersion.Value.Value, ttl.Value.Value, reportingUrl);
        }

        /// <summary>
        /// Serializes a <see cref="GenerateTlsReportingRecordOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generateTlsReportingRecordOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GenerateTlsReportingRecordOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generateTlsReportingRecordOptions.ReportingAddresses == null)
                throw new ArgumentNullException(nameof(generateTlsReportingRecordOptions.ReportingAddresses), "Property is required for class GenerateTlsReportingRecordOptions.");

            if (generateTlsReportingRecordOptions.Host == null)
                throw new ArgumentNullException(nameof(generateTlsReportingRecordOptions.Host), "Property is required for class GenerateTlsReportingRecordOptions.");

            if (generateTlsReportingRecordOptions.ReportingUrlOption.IsSet && generateTlsReportingRecordOptions.ReportingUrl == null)
                throw new ArgumentNullException(nameof(generateTlsReportingRecordOptions.ReportingUrl), "Property is required for class GenerateTlsReportingRecordOptions.");

            writer.WritePropertyName("reportingAddresses");
            JsonSerializer.Serialize(writer, generateTlsReportingRecordOptions.ReportingAddresses, jsonSerializerOptions);
            writer.WriteString("host", generateTlsReportingRecordOptions.Host);

            var varVersionRawValue = GenerateTlsReportingRecordOptions.VarVersionEnumToJsonValue(generateTlsReportingRecordOptions.VarVersion);
            writer.WriteString("version", varVersionRawValue);
            writer.WriteNumber("ttl", generateTlsReportingRecordOptions.Ttl);

            if (generateTlsReportingRecordOptions.ReportingUrlOption.IsSet)
                writer.WriteString("reportingUrl", generateTlsReportingRecordOptions.ReportingUrl);
        }
    }
}
