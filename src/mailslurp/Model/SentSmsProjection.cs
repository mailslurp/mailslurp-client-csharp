// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Sent SMS projection
    /// </summary>
    public partial class SentSmsProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SentSmsProjection" /> class.
        /// </summary>
        /// <param name="body">body</param>
        /// <param name="userId">userId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="phoneNumber">phoneNumber</param>
        /// <param name="fromNumber">fromNumber</param>
        /// <param name="toNumber">toNumber</param>
        /// <param name="id">id</param>
        /// <param name="replyToId">replyToId</param>
        [JsonConstructor]
        public SentSmsProjection(string body, Guid userId, DateTime createdAt, Guid phoneNumber, string fromNumber, string toNumber, Guid id, Option<string> replyToId = default)
        {
            Body = body;
            UserId = userId;
            CreatedAt = createdAt;
            PhoneNumber = phoneNumber;
            FromNumber = fromNumber;
            ToNumber = toNumber;
            Id = id;
            ReplyToIdOption = replyToId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [JsonPropertyName("phoneNumber")]
        public Guid PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets FromNumber
        /// </summary>
        [JsonPropertyName("fromNumber")]
        public string FromNumber { get; set; }

        /// <summary>
        /// Gets or Sets ToNumber
        /// </summary>
        [JsonPropertyName("toNumber")]
        public string ToNumber { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of ReplyToId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReplyToIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReplyToId
        /// </summary>
        [JsonPropertyName("replyToId")]
        public string ReplyToId { get { return this.ReplyToIdOption; } set { this.ReplyToIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SentSmsProjection {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FromNumber: ").Append(FromNumber).Append("\n");
            sb.Append("  ToNumber: ").Append(ToNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReplyToId: ").Append(ReplyToId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SentSmsProjection" />
    /// </summary>
    public class SentSmsProjectionJsonConverter : JsonConverter<SentSmsProjection>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SentSmsProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SentSmsProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> body = default;
            Option<Guid?> userId = default;
            Option<DateTime?> createdAt = default;
            Option<Guid?> phoneNumber = default;
            Option<string> fromNumber = default;
            Option<string> toNumber = default;
            Option<Guid?> id = default;
            Option<string> replyToId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "phoneNumber":
                            phoneNumber = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "fromNumber":
                            fromNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "toNumber":
                            toNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "replyToId":
                            replyToId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!body.IsSet)
                throw new ArgumentException("Property is required for class SentSmsProjection.", nameof(body));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class SentSmsProjection.", nameof(userId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class SentSmsProjection.", nameof(createdAt));

            if (!phoneNumber.IsSet)
                throw new ArgumentException("Property is required for class SentSmsProjection.", nameof(phoneNumber));

            if (!fromNumber.IsSet)
                throw new ArgumentException("Property is required for class SentSmsProjection.", nameof(fromNumber));

            if (!toNumber.IsSet)
                throw new ArgumentException("Property is required for class SentSmsProjection.", nameof(toNumber));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SentSmsProjection.", nameof(id));

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class SentSmsProjection.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class SentSmsProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SentSmsProjection.");

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class SentSmsProjection.");

            if (fromNumber.IsSet && fromNumber.Value == null)
                throw new ArgumentNullException(nameof(fromNumber), "Property is not nullable for class SentSmsProjection.");

            if (toNumber.IsSet && toNumber.Value == null)
                throw new ArgumentNullException(nameof(toNumber), "Property is not nullable for class SentSmsProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SentSmsProjection.");

            if (replyToId.IsSet && replyToId.Value == null)
                throw new ArgumentNullException(nameof(replyToId), "Property is not nullable for class SentSmsProjection.");

            return new SentSmsProjection(body.Value, userId.Value.Value, createdAt.Value.Value, phoneNumber.Value.Value, fromNumber.Value, toNumber.Value, id.Value.Value, replyToId);
        }

        /// <summary>
        /// Serializes a <see cref="SentSmsProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sentSmsProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SentSmsProjection sentSmsProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sentSmsProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SentSmsProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sentSmsProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SentSmsProjection sentSmsProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sentSmsProjection.Body == null)
                throw new ArgumentNullException(nameof(sentSmsProjection.Body), "Property is required for class SentSmsProjection.");

            if (sentSmsProjection.FromNumber == null)
                throw new ArgumentNullException(nameof(sentSmsProjection.FromNumber), "Property is required for class SentSmsProjection.");

            if (sentSmsProjection.ToNumber == null)
                throw new ArgumentNullException(nameof(sentSmsProjection.ToNumber), "Property is required for class SentSmsProjection.");

            if (sentSmsProjection.ReplyToIdOption.IsSet && sentSmsProjection.ReplyToId == null)
                throw new ArgumentNullException(nameof(sentSmsProjection.ReplyToId), "Property is required for class SentSmsProjection.");

            writer.WriteString("body", sentSmsProjection.Body);

            writer.WriteString("userId", sentSmsProjection.UserId);

            writer.WriteString("createdAt", sentSmsProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("phoneNumber", sentSmsProjection.PhoneNumber);

            writer.WriteString("fromNumber", sentSmsProjection.FromNumber);

            writer.WriteString("toNumber", sentSmsProjection.ToNumber);

            writer.WriteString("id", sentSmsProjection.Id);

            if (sentSmsProjection.ReplyToIdOption.IsSet)
                writer.WriteString("replyToId", sentSmsProjection.ReplyToId);
        }
    }
}
