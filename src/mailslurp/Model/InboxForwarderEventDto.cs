// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Inbox forwarder event. Describes how an email was handled by an inbox forwarder.
    /// </summary>
    public partial class InboxForwarderEventDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderEventDto" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="sentId">sentId</param>
        /// <param name="userId">userId</param>
        /// <param name="forwarderId">forwarderId</param>
        /// <param name="message">message</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public InboxForwarderEventDto(DateTime createdAt, Option<Guid?> id = default, Option<Guid?> inboxId = default, Option<Guid?> emailId = default, Option<Guid?> sentId = default, Option<Guid?> userId = default, Option<Guid?> forwarderId = default, Option<string> message = default, Option<StatusEnum?> status = default)
        {
            CreatedAt = createdAt;
            IdOption = id;
            InboxIdOption = inboxId;
            EmailIdOption = emailId;
            SentIdOption = sentId;
            UserIdOption = userId;
            ForwarderIdOption = forwarderId;
            MessageOption = message;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            SUCCESS = 1,

            /// <summary>
            /// Enum FAILURE for value: FAILURE
            /// </summary>
            FAILURE = 2
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("SUCCESS"))
                return StatusEnum.SUCCESS;

            if (value.Equals("FAILURE"))
                return StatusEnum.FAILURE;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SUCCESS"))
                return StatusEnum.SUCCESS;

            if (value.Equals("FAILURE"))
                return StatusEnum.FAILURE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == null)
                return null;

            if (value == StatusEnum.SUCCESS)
                return "SUCCESS";

            if (value == StatusEnum.FAILURE)
                return "FAILURE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new Option<StatusEnum?>(value); } }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this.IdOption; } set { this.IdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of EmailId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> EmailIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailId
        /// </summary>
        [JsonPropertyName("emailId")]
        public Guid? EmailId { get { return this.EmailIdOption; } set { this.EmailIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of SentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> SentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SentId
        /// </summary>
        [JsonPropertyName("sentId")]
        public Guid? SentId { get { return this.SentIdOption; } set { this.SentIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of ForwarderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ForwarderIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForwarderId
        /// </summary>
        [JsonPropertyName("forwarderId")]
        public Guid? ForwarderId { get { return this.ForwarderIdOption; } set { this.ForwarderIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboxForwarderEventDto {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  SentId: ").Append(SentId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ForwarderId: ").Append(ForwarderId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InboxForwarderEventDto" />
    /// </summary>
    public class InboxForwarderEventDtoJsonConverter : JsonConverter<InboxForwarderEventDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="InboxForwarderEventDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InboxForwarderEventDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<Guid?> id = default;
            Option<Guid?> inboxId = default;
            Option<Guid?> emailId = default;
            Option<Guid?> sentId = default;
            Option<Guid?> userId = default;
            Option<Guid?> forwarderId = default;
            Option<string> message = default;
            Option<InboxForwarderEventDto.StatusEnum?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emailId":
                            emailId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sentId":
                            sentId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "forwarderId":
                            forwarderId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "message":
                            message = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<InboxForwarderEventDto.StatusEnum?>(InboxForwarderEventDto.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class InboxForwarderEventDto.", nameof(createdAt));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class InboxForwarderEventDto.");

            return new InboxForwarderEventDto(createdAt.Value.Value, id, inboxId, emailId, sentId, userId, forwarderId, message, status);
        }

        /// <summary>
        /// Serializes a <see cref="InboxForwarderEventDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxForwarderEventDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InboxForwarderEventDto inboxForwarderEventDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, inboxForwarderEventDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InboxForwarderEventDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxForwarderEventDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InboxForwarderEventDto inboxForwarderEventDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("createdAt", inboxForwarderEventDto.CreatedAt.ToString(CreatedAtFormat));

            if (inboxForwarderEventDto.IdOption.IsSet)
                if (inboxForwarderEventDto.IdOption.Value != null)
                    writer.WriteString("id", inboxForwarderEventDto.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (inboxForwarderEventDto.InboxIdOption.IsSet)
                if (inboxForwarderEventDto.InboxIdOption.Value != null)
                    writer.WriteString("inboxId", inboxForwarderEventDto.InboxIdOption.Value.Value);
                else
                    writer.WriteNull("inboxId");

            if (inboxForwarderEventDto.EmailIdOption.IsSet)
                if (inboxForwarderEventDto.EmailIdOption.Value != null)
                    writer.WriteString("emailId", inboxForwarderEventDto.EmailIdOption.Value.Value);
                else
                    writer.WriteNull("emailId");

            if (inboxForwarderEventDto.SentIdOption.IsSet)
                if (inboxForwarderEventDto.SentIdOption.Value != null)
                    writer.WriteString("sentId", inboxForwarderEventDto.SentIdOption.Value.Value);
                else
                    writer.WriteNull("sentId");

            if (inboxForwarderEventDto.UserIdOption.IsSet)
                if (inboxForwarderEventDto.UserIdOption.Value != null)
                    writer.WriteString("userId", inboxForwarderEventDto.UserIdOption.Value.Value);
                else
                    writer.WriteNull("userId");

            if (inboxForwarderEventDto.ForwarderIdOption.IsSet)
                if (inboxForwarderEventDto.ForwarderIdOption.Value != null)
                    writer.WriteString("forwarderId", inboxForwarderEventDto.ForwarderIdOption.Value.Value);
                else
                    writer.WriteNull("forwarderId");

            if (inboxForwarderEventDto.MessageOption.IsSet)
                if (inboxForwarderEventDto.MessageOption.Value != null)
                    writer.WriteString("message", inboxForwarderEventDto.Message);
                else
                    writer.WriteNull("message");

            var statusRawValue = InboxForwarderEventDto.StatusEnumToJsonValue(inboxForwarderEventDto.StatusOption.Value.Value);
            if (statusRawValue != null)
                writer.WriteString("status", statusRawValue);
            else
                writer.WriteNull("status");
        }
    }
}
