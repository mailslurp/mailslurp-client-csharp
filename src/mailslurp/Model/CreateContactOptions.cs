// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating an email contact in address book
    /// </summary>
    public partial class CreateContactOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateContactOptions" /> class.
        /// </summary>
        /// <param name="firstName">firstName</param>
        /// <param name="lastName">lastName</param>
        /// <param name="company">company</param>
        /// <param name="emailAddresses">Set of email addresses belonging to the contact</param>
        /// <param name="tags">Tags that can be used to search and group contacts</param>
        /// <param name="metaData">metaData</param>
        /// <param name="optOut">Has the user explicitly or implicitly opted out of being contacted? If so MailSlurp will ignore them in all actions.</param>
        /// <param name="groupId">Group IDs that contact belongs to</param>
        /// <param name="verifyEmailAddresses">Whether to validate contact email address exists</param>
        [JsonConstructor]
        public CreateContactOptions(Option<string> firstName = default, Option<string> lastName = default, Option<string> company = default, Option<List<string>> emailAddresses = default, Option<List<string>> tags = default, Option<Object> metaData = default, Option<bool?> optOut = default, Option<Guid?> groupId = default, Option<bool?> verifyEmailAddresses = default)
        {
            FirstNameOption = firstName;
            LastNameOption = lastName;
            CompanyOption = company;
            EmailAddressesOption = emailAddresses;
            TagsOption = tags;
            MetaDataOption = metaData;
            OptOutOption = optOut;
            GroupIdOption = groupId;
            VerifyEmailAddressesOption = verifyEmailAddresses;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FirstNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("firstName")]
        public string FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [JsonPropertyName("lastName")]
        public string LastName { get { return this.LastNameOption; } set { this.LastNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [JsonPropertyName("company")]
        public string Company { get { return this.CompanyOption; } set { this.CompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EmailAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> EmailAddressesOption { get; private set; }

        /// <summary>
        /// Set of email addresses belonging to the contact
        /// </summary>
        /// <value>Set of email addresses belonging to the contact</value>
        [JsonPropertyName("emailAddresses")]
        public List<string> EmailAddresses { get { return this.EmailAddressesOption; } set { this.EmailAddressesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> TagsOption { get; private set; }

        /// <summary>
        /// Tags that can be used to search and group contacts
        /// </summary>
        /// <value>Tags that can be used to search and group contacts</value>
        [JsonPropertyName("tags")]
        public List<string> Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of MetaData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> MetaDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets MetaData
        /// </summary>
        [JsonPropertyName("metaData")]
        public Object MetaData { get { return this.MetaDataOption; } set { this.MetaDataOption = new Option<Object>(value); } }

        /// <summary>
        /// Used to track the state of OptOut
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OptOutOption { get; private set; }

        /// <summary>
        /// Has the user explicitly or implicitly opted out of being contacted? If so MailSlurp will ignore them in all actions.
        /// </summary>
        /// <value>Has the user explicitly or implicitly opted out of being contacted? If so MailSlurp will ignore them in all actions.</value>
        [JsonPropertyName("optOut")]
        public bool? OptOut { get { return this.OptOutOption; } set { this.OptOutOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of GroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> GroupIdOption { get; private set; }

        /// <summary>
        /// Group IDs that contact belongs to
        /// </summary>
        /// <value>Group IDs that contact belongs to</value>
        [JsonPropertyName("groupId")]
        public Guid? GroupId { get { return this.GroupIdOption; } set { this.GroupIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of VerifyEmailAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VerifyEmailAddressesOption { get; private set; }

        /// <summary>
        /// Whether to validate contact email address exists
        /// </summary>
        /// <value>Whether to validate contact email address exists</value>
        [JsonPropertyName("verifyEmailAddresses")]
        public bool? VerifyEmailAddresses { get { return this.VerifyEmailAddressesOption; } set { this.VerifyEmailAddressesOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateContactOptions {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("  OptOut: ").Append(OptOut).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  VerifyEmailAddresses: ").Append(VerifyEmailAddresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateContactOptions" />
    /// </summary>
    public class CreateContactOptionsJsonConverter : JsonConverter<CreateContactOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateContactOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateContactOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> firstName = default;
            Option<string> lastName = default;
            Option<string> company = default;
            Option<List<string>> emailAddresses = default;
            Option<List<string>> tags = default;
            Option<Object> metaData = default;
            Option<bool?> optOut = default;
            Option<Guid?> groupId = default;
            Option<bool?> verifyEmailAddresses = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "firstName":
                            firstName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastName":
                            lastName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "company":
                            company = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "emailAddresses":
                            emailAddresses = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            tags = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metaData":
                            metaData = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "optOut":
                            optOut = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "groupId":
                            groupId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "verifyEmailAddresses":
                            verifyEmailAddresses = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new CreateContactOptions(firstName, lastName, company, emailAddresses, tags, metaData, optOut, groupId, verifyEmailAddresses);
        }

        /// <summary>
        /// Serializes a <see cref="CreateContactOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createContactOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateContactOptions createContactOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createContactOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateContactOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createContactOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateContactOptions createContactOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createContactOptions.FirstNameOption.IsSet)
                if (createContactOptions.FirstNameOption.Value != null)
                    writer.WriteString("firstName", createContactOptions.FirstName);
                else
                    writer.WriteNull("firstName");

            if (createContactOptions.LastNameOption.IsSet)
                if (createContactOptions.LastNameOption.Value != null)
                    writer.WriteString("lastName", createContactOptions.LastName);
                else
                    writer.WriteNull("lastName");

            if (createContactOptions.CompanyOption.IsSet)
                if (createContactOptions.CompanyOption.Value != null)
                    writer.WriteString("company", createContactOptions.Company);
                else
                    writer.WriteNull("company");

            if (createContactOptions.EmailAddressesOption.IsSet)
                if (createContactOptions.EmailAddressesOption.Value != null)
                {
                    writer.WritePropertyName("emailAddresses");
                    JsonSerializer.Serialize(writer, createContactOptions.EmailAddresses, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("emailAddresses");
            if (createContactOptions.TagsOption.IsSet)
                if (createContactOptions.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, createContactOptions.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
            if (createContactOptions.MetaDataOption.IsSet)
                if (createContactOptions.MetaDataOption.Value != null)
                {
                    writer.WritePropertyName("metaData");
                    JsonSerializer.Serialize(writer, createContactOptions.MetaData, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("metaData");
            if (createContactOptions.OptOutOption.IsSet)
                if (createContactOptions.OptOutOption.Value != null)
                    writer.WriteBoolean("optOut", createContactOptions.OptOutOption.Value.Value);
                else
                    writer.WriteNull("optOut");

            if (createContactOptions.GroupIdOption.IsSet)
                if (createContactOptions.GroupIdOption.Value != null)
                    writer.WriteString("groupId", createContactOptions.GroupIdOption.Value.Value);
                else
                    writer.WriteNull("groupId");

            if (createContactOptions.VerifyEmailAddressesOption.IsSet)
                if (createContactOptions.VerifyEmailAddressesOption.Value != null)
                    writer.WriteBoolean("verifyEmailAddresses", createContactOptions.VerifyEmailAddressesOption.Value.Value);
                else
                    writer.WriteNull("verifyEmailAddresses");
        }
    }
}
