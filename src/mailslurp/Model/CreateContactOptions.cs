/* 
 * MailSlurp API
 *
 * ## Introduction  [MailSlurp](https://www.mailslurp.com) is an Email API for developers and QA testers. It let's users: - create emails addresses on demand - receive emails and attachments in code - send templated HTML emails  ## About  This page contains the REST API documentation for MailSlurp. All requests require API Key authentication passed as an `x-api-key` header.  Create an account to [get your free API Key](https://app.mailslurp.com/sign-up/).  ## Resources - üîë [Get API Key](https://app.mailslurp.com/sign-up/)                    - üéì [Developer Portal](https://www.mailslurp.com/docs/)           - üì¶ [Library SDKs](https://www.mailslurp.com/docs/) - ‚úçÔ∏è [Code Examples](https://www.mailslurp.com/examples) - ‚ö†Ô∏è [Report an issue](https://drift.me/mailslurp)  ## Explore  
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// CreateContactOptions
    /// </summary>
    [DataContract]
    public partial class CreateContactOptions :  IEquatable<CreateContactOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateContactOptions" /> class.
        /// </summary>
        /// <param name="emailAddresses">Set of email addresses belonging to the contact.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="groupId">Group IDs that contact belongs to.</param>
        /// <param name="metaData">metaData.</param>
        /// <param name="optOut">Has the user explicitly or implicitly opted out of being contacted? If so MailSlurp will ignore them in all actions..</param>
        /// <param name="tags">Tags that can be used to search and group contacts.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="company">company.</param>
        public CreateContactOptions(List<string> emailAddresses = default(List<string>), string firstName = default(string), Guid groupId = default(Guid), JsonNode metaData = default(JsonNode), bool optOut = default(bool), List<string> tags = default(List<string>), string lastName = default(string), string company = default(string))
        {
            this.EmailAddresses = emailAddresses;
            this.FirstName = firstName;
            this.GroupId = groupId;
            this.MetaData = metaData;
            this.OptOut = optOut;
            this.Tags = tags;
            this.LastName = lastName;
            this.Company = company;
        }
        
        /// <summary>
        /// Set of email addresses belonging to the contact
        /// </summary>
        /// <value>Set of email addresses belonging to the contact</value>
        [DataMember(Name="emailAddresses", EmitDefaultValue=false)]
        public List<string> EmailAddresses { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Group IDs that contact belongs to
        /// </summary>
        /// <value>Group IDs that contact belongs to</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public Guid GroupId { get; set; }

        /// <summary>
        /// Gets or Sets MetaData
        /// </summary>
        [DataMember(Name="metaData", EmitDefaultValue=false)]
        public JsonNode MetaData { get; set; }

        /// <summary>
        /// Has the user explicitly or implicitly opted out of being contacted? If so MailSlurp will ignore them in all actions.
        /// </summary>
        /// <value>Has the user explicitly or implicitly opted out of being contacted? If so MailSlurp will ignore them in all actions.</value>
        [DataMember(Name="optOut", EmitDefaultValue=false)]
        public bool OptOut { get; set; }

        /// <summary>
        /// Tags that can be used to search and group contacts
        /// </summary>
        /// <value>Tags that can be used to search and group contacts</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateContactOptions {\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("  OptOut: ").Append(OptOut).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateContactOptions);
        }

        /// <summary>
        /// Returns true if CreateContactOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateContactOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateContactOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailAddresses == input.EmailAddresses ||
                    this.EmailAddresses != null &&
                    input.EmailAddresses != null &&
                    this.EmailAddresses.SequenceEqual(input.EmailAddresses)
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.MetaData == input.MetaData ||
                    (this.MetaData != null &&
                    this.MetaData.Equals(input.MetaData))
                ) && 
                (
                    this.OptOut == input.OptOut ||
                    (this.OptOut != null &&
                    this.OptOut.Equals(input.OptOut))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailAddresses != null)
                    hashCode = hashCode * 59 + this.EmailAddresses.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.MetaData != null)
                    hashCode = hashCode * 59 + this.MetaData.GetHashCode();
                if (this.OptOut != null)
                    hashCode = hashCode * 59 + this.OptOut.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                return hashCode;
            }
        }
    }

}
