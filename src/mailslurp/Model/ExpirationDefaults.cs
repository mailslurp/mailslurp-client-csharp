// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Expiration defaults for your account
    /// </summary>
    public partial class ExpirationDefaults : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpirationDefaults" /> class.
        /// </summary>
        /// <param name="canPermanentInbox">canPermanentInbox</param>
        /// <param name="nextInboxAllowsPermanent">nextInboxAllowsPermanent</param>
        /// <param name="defaultExpirationMillis">defaultExpirationMillis</param>
        /// <param name="maxExpirationMillis">maxExpirationMillis</param>
        /// <param name="defaultExpiresAt">defaultExpiresAt</param>
        [JsonConstructor]
        public ExpirationDefaults(bool canPermanentInbox, bool nextInboxAllowsPermanent, Option<long?> defaultExpirationMillis = default, Option<long?> maxExpirationMillis = default, Option<DateTime?> defaultExpiresAt = default)
        {
            CanPermanentInbox = canPermanentInbox;
            NextInboxAllowsPermanent = nextInboxAllowsPermanent;
            DefaultExpirationMillisOption = defaultExpirationMillis;
            MaxExpirationMillisOption = maxExpirationMillis;
            DefaultExpiresAtOption = defaultExpiresAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CanPermanentInbox
        /// </summary>
        [JsonPropertyName("canPermanentInbox")]
        public bool CanPermanentInbox { get; set; }

        /// <summary>
        /// Gets or Sets NextInboxAllowsPermanent
        /// </summary>
        [JsonPropertyName("nextInboxAllowsPermanent")]
        public bool NextInboxAllowsPermanent { get; set; }

        /// <summary>
        /// Used to track the state of DefaultExpirationMillis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DefaultExpirationMillisOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultExpirationMillis
        /// </summary>
        [JsonPropertyName("defaultExpirationMillis")]
        public long? DefaultExpirationMillis { get { return this.DefaultExpirationMillisOption; } set { this.DefaultExpirationMillisOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of MaxExpirationMillis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MaxExpirationMillisOption { get; private set; }

        /// <summary>
        /// Gets or Sets MaxExpirationMillis
        /// </summary>
        [JsonPropertyName("maxExpirationMillis")]
        public long? MaxExpirationMillis { get { return this.MaxExpirationMillisOption; } set { this.MaxExpirationMillisOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of DefaultExpiresAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DefaultExpiresAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultExpiresAt
        /// </summary>
        [JsonPropertyName("defaultExpiresAt")]
        public DateTime? DefaultExpiresAt { get { return this.DefaultExpiresAtOption; } set { this.DefaultExpiresAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExpirationDefaults {\n");
            sb.Append("  CanPermanentInbox: ").Append(CanPermanentInbox).Append("\n");
            sb.Append("  NextInboxAllowsPermanent: ").Append(NextInboxAllowsPermanent).Append("\n");
            sb.Append("  DefaultExpirationMillis: ").Append(DefaultExpirationMillis).Append("\n");
            sb.Append("  MaxExpirationMillis: ").Append(MaxExpirationMillis).Append("\n");
            sb.Append("  DefaultExpiresAt: ").Append(DefaultExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExpirationDefaults" />
    /// </summary>
    public class ExpirationDefaultsJsonConverter : JsonConverter<ExpirationDefaults>
    {
        /// <summary>
        /// The format to use to serialize DefaultExpiresAt
        /// </summary>
        public static string DefaultExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ExpirationDefaults" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExpirationDefaults Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> canPermanentInbox = default;
            Option<bool?> nextInboxAllowsPermanent = default;
            Option<long?> defaultExpirationMillis = default;
            Option<long?> maxExpirationMillis = default;
            Option<DateTime?> defaultExpiresAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "canPermanentInbox":
                            canPermanentInbox = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "nextInboxAllowsPermanent":
                            nextInboxAllowsPermanent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "defaultExpirationMillis":
                            defaultExpirationMillis = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "maxExpirationMillis":
                            maxExpirationMillis = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "defaultExpiresAt":
                            defaultExpiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!canPermanentInbox.IsSet)
                throw new ArgumentException("Property is required for class ExpirationDefaults.", nameof(canPermanentInbox));

            if (!nextInboxAllowsPermanent.IsSet)
                throw new ArgumentException("Property is required for class ExpirationDefaults.", nameof(nextInboxAllowsPermanent));

            if (canPermanentInbox.IsSet && canPermanentInbox.Value == null)
                throw new ArgumentNullException(nameof(canPermanentInbox), "Property is not nullable for class ExpirationDefaults.");

            if (nextInboxAllowsPermanent.IsSet && nextInboxAllowsPermanent.Value == null)
                throw new ArgumentNullException(nameof(nextInboxAllowsPermanent), "Property is not nullable for class ExpirationDefaults.");

            return new ExpirationDefaults(canPermanentInbox.Value.Value, nextInboxAllowsPermanent.Value.Value, defaultExpirationMillis, maxExpirationMillis, defaultExpiresAt);
        }

        /// <summary>
        /// Serializes a <see cref="ExpirationDefaults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="expirationDefaults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExpirationDefaults expirationDefaults, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, expirationDefaults, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExpirationDefaults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="expirationDefaults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExpirationDefaults expirationDefaults, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteBoolean("canPermanentInbox", expirationDefaults.CanPermanentInbox);

            writer.WriteBoolean("nextInboxAllowsPermanent", expirationDefaults.NextInboxAllowsPermanent);

            if (expirationDefaults.DefaultExpirationMillisOption.IsSet)
                if (expirationDefaults.DefaultExpirationMillisOption.Value != null)
                    writer.WriteNumber("defaultExpirationMillis", expirationDefaults.DefaultExpirationMillisOption.Value.Value);
                else
                    writer.WriteNull("defaultExpirationMillis");

            if (expirationDefaults.MaxExpirationMillisOption.IsSet)
                if (expirationDefaults.MaxExpirationMillisOption.Value != null)
                    writer.WriteNumber("maxExpirationMillis", expirationDefaults.MaxExpirationMillisOption.Value.Value);
                else
                    writer.WriteNull("maxExpirationMillis");

            if (expirationDefaults.DefaultExpiresAtOption.IsSet)
                if (expirationDefaults.DefaultExpiresAtOption.Value != null)
                    writer.WriteString("defaultExpiresAt", expirationDefaults.DefaultExpiresAtOption.Value.Value.ToString(DefaultExpiresAtFormat));
                else
                    writer.WriteNull("defaultExpiresAt");
        }
    }
}
