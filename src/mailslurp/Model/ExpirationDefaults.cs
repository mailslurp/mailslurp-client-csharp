/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Expiration defaults for your account
    /// </summary>
    [DataContract]
    public partial class ExpirationDefaults :  IEquatable<ExpirationDefaults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpirationDefaults" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExpirationDefaults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpirationDefaults" /> class.
        /// </summary>
        /// <param name="canPermanentInbox">canPermanentInbox (required).</param>
        /// <param name="defaultExpirationMillis">defaultExpirationMillis.</param>
        /// <param name="defaultExpiresAt">defaultExpiresAt.</param>
        /// <param name="maxExpirationMillis">maxExpirationMillis.</param>
        /// <param name="nextInboxAllowsPermanent">nextInboxAllowsPermanent (required).</param>
        public ExpirationDefaults(bool canPermanentInbox = default(bool), long defaultExpirationMillis = default(long), DateTime defaultExpiresAt = default(DateTime), long maxExpirationMillis = default(long), bool nextInboxAllowsPermanent = default(bool))
        {
            this.CanPermanentInbox = canPermanentInbox;
            this.NextInboxAllowsPermanent = nextInboxAllowsPermanent;
            this.DefaultExpirationMillis = defaultExpirationMillis;
            this.DefaultExpiresAt = defaultExpiresAt;
            this.MaxExpirationMillis = maxExpirationMillis;
        }
        
        /// <summary>
        /// Gets or Sets CanPermanentInbox
        /// </summary>
        [DataMember(Name="canPermanentInbox", EmitDefaultValue=false)]
        public bool CanPermanentInbox { get; set; }

        /// <summary>
        /// Gets or Sets DefaultExpirationMillis
        /// </summary>
        [DataMember(Name="defaultExpirationMillis", EmitDefaultValue=false)]
        public long DefaultExpirationMillis { get; set; }

        /// <summary>
        /// Gets or Sets DefaultExpiresAt
        /// </summary>
        [DataMember(Name="defaultExpiresAt", EmitDefaultValue=false)]
        public DateTime DefaultExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets MaxExpirationMillis
        /// </summary>
        [DataMember(Name="maxExpirationMillis", EmitDefaultValue=false)]
        public long MaxExpirationMillis { get; set; }

        /// <summary>
        /// Gets or Sets NextInboxAllowsPermanent
        /// </summary>
        [DataMember(Name="nextInboxAllowsPermanent", EmitDefaultValue=false)]
        public bool NextInboxAllowsPermanent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpirationDefaults {\n");
            sb.Append("  CanPermanentInbox: ").Append(CanPermanentInbox).Append("\n");
            sb.Append("  DefaultExpirationMillis: ").Append(DefaultExpirationMillis).Append("\n");
            sb.Append("  DefaultExpiresAt: ").Append(DefaultExpiresAt).Append("\n");
            sb.Append("  MaxExpirationMillis: ").Append(MaxExpirationMillis).Append("\n");
            sb.Append("  NextInboxAllowsPermanent: ").Append(NextInboxAllowsPermanent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpirationDefaults);
        }

        /// <summary>
        /// Returns true if ExpirationDefaults instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpirationDefaults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpirationDefaults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanPermanentInbox == input.CanPermanentInbox ||
                    this.CanPermanentInbox.Equals(input.CanPermanentInbox)
                ) && 
                (
                    this.DefaultExpirationMillis == input.DefaultExpirationMillis ||
                    this.DefaultExpirationMillis.Equals(input.DefaultExpirationMillis)
                ) && 
                (
                    this.DefaultExpiresAt == input.DefaultExpiresAt ||
                    (this.DefaultExpiresAt != null &&
                    this.DefaultExpiresAt.Equals(input.DefaultExpiresAt))
                ) && 
                (
                    this.MaxExpirationMillis == input.MaxExpirationMillis ||
                    this.MaxExpirationMillis.Equals(input.MaxExpirationMillis)
                ) && 
                (
                    this.NextInboxAllowsPermanent == input.NextInboxAllowsPermanent ||
                    this.NextInboxAllowsPermanent.Equals(input.NextInboxAllowsPermanent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CanPermanentInbox.GetHashCode();
                hashCode = hashCode * 59 + this.DefaultExpirationMillis.GetHashCode();
                if (this.DefaultExpiresAt != null)
                    hashCode = hashCode * 59 + this.DefaultExpiresAt.GetHashCode();
                hashCode = hashCode * 59 + this.MaxExpirationMillis.GetHashCode();
                hashCode = hashCode * 59 + this.NextInboxAllowsPermanent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
