// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// IMAP fetch email result
    /// </summary>
    public partial class ImapServerFetchResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapServerFetchResult" /> class.
        /// </summary>
        /// <param name="result">result</param>
        [JsonConstructor]
        public ImapServerFetchResult(Option<ImapServerFetchItem> result = default)
        {
            ResultOption = result;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Result
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ImapServerFetchItem> ResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [JsonPropertyName("result")]
        public ImapServerFetchItem Result { get { return this.ResultOption; } set { this.ResultOption = new Option<ImapServerFetchItem>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImapServerFetchResult {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImapServerFetchResult" />
    /// </summary>
    public class ImapServerFetchResultJsonConverter : JsonConverter<ImapServerFetchResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImapServerFetchResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImapServerFetchResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ImapServerFetchItem> result = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "result":
                            result = new Option<ImapServerFetchItem>(JsonSerializer.Deserialize<ImapServerFetchItem>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ImapServerFetchResult(result);
        }

        /// <summary>
        /// Serializes a <see cref="ImapServerFetchResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapServerFetchResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImapServerFetchResult imapServerFetchResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imapServerFetchResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImapServerFetchResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapServerFetchResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImapServerFetchResult imapServerFetchResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imapServerFetchResult.ResultOption.IsSet)
                if (imapServerFetchResult.ResultOption.Value != null)
                {
                    writer.WritePropertyName("result");
                    JsonSerializer.Serialize(writer, imapServerFetchResult.Result, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("result");
        }
    }
}
