// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating automatic syncing between an inbox connection and an external mail provider
    /// </summary>
    public partial class CreateConnectorSyncSettingsOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorSyncSettingsOptions" /> class.
        /// </summary>
        /// <param name="syncEnabled">Enable automatic background sync</param>
        /// <param name="syncScheduleType">Sync schedule type</param>
        /// <param name="syncInterval">Sync interval in minutes</param>
        [JsonConstructor]
        public CreateConnectorSyncSettingsOptions(Option<bool?> syncEnabled = default, Option<SyncScheduleTypeEnum?> syncScheduleType = default, Option<int?> syncInterval = default)
        {
            SyncEnabledOption = syncEnabled;
            SyncScheduleTypeOption = syncScheduleType;
            SyncIntervalOption = syncInterval;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Sync schedule type
        /// </summary>
        /// <value>Sync schedule type</value>
        public enum SyncScheduleTypeEnum
        {
            /// <summary>
            /// Enum INTERVAL for value: INTERVAL
            /// </summary>
            INTERVAL = 1
        }

        /// <summary>
        /// Returns a <see cref="SyncScheduleTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SyncScheduleTypeEnum SyncScheduleTypeEnumFromString(string value)
        {
            if (value.Equals("INTERVAL"))
                return SyncScheduleTypeEnum.INTERVAL;

            throw new NotImplementedException($"Could not convert value to type SyncScheduleTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SyncScheduleTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SyncScheduleTypeEnum? SyncScheduleTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("INTERVAL"))
                return SyncScheduleTypeEnum.INTERVAL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SyncScheduleTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SyncScheduleTypeEnumToJsonValue(SyncScheduleTypeEnum? value)
        {
            if (value == null)
                return null;

            if (value == SyncScheduleTypeEnum.INTERVAL)
                return "INTERVAL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SyncScheduleType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SyncScheduleTypeEnum?> SyncScheduleTypeOption { get; private set; }

        /// <summary>
        /// Sync schedule type
        /// </summary>
        /// <value>Sync schedule type</value>
        [JsonPropertyName("syncScheduleType")]
        public SyncScheduleTypeEnum? SyncScheduleType { get { return this.SyncScheduleTypeOption; } set { this.SyncScheduleTypeOption = new Option<SyncScheduleTypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of SyncEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SyncEnabledOption { get; private set; }

        /// <summary>
        /// Enable automatic background sync
        /// </summary>
        /// <value>Enable automatic background sync</value>
        [JsonPropertyName("syncEnabled")]
        public bool? SyncEnabled { get { return this.SyncEnabledOption; } set { this.SyncEnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SyncInterval
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SyncIntervalOption { get; private set; }

        /// <summary>
        /// Sync interval in minutes
        /// </summary>
        /// <value>Sync interval in minutes</value>
        [JsonPropertyName("syncInterval")]
        public int? SyncInterval { get { return this.SyncIntervalOption; } set { this.SyncIntervalOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectorSyncSettingsOptions {\n");
            sb.Append("  SyncEnabled: ").Append(SyncEnabled).Append("\n");
            sb.Append("  SyncScheduleType: ").Append(SyncScheduleType).Append("\n");
            sb.Append("  SyncInterval: ").Append(SyncInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateConnectorSyncSettingsOptions" />
    /// </summary>
    public class CreateConnectorSyncSettingsOptionsJsonConverter : JsonConverter<CreateConnectorSyncSettingsOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateConnectorSyncSettingsOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateConnectorSyncSettingsOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> syncEnabled = default;
            Option<CreateConnectorSyncSettingsOptions.SyncScheduleTypeEnum?> syncScheduleType = default;
            Option<int?> syncInterval = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "syncEnabled":
                            syncEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "syncScheduleType":
                            string syncScheduleTypeRawValue = utf8JsonReader.GetString();
                            if (syncScheduleTypeRawValue != null)
                                syncScheduleType = new Option<CreateConnectorSyncSettingsOptions.SyncScheduleTypeEnum?>(CreateConnectorSyncSettingsOptions.SyncScheduleTypeEnumFromStringOrDefault(syncScheduleTypeRawValue));
                            break;
                        case "syncInterval":
                            syncInterval = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new CreateConnectorSyncSettingsOptions(syncEnabled, syncScheduleType, syncInterval);
        }

        /// <summary>
        /// Serializes a <see cref="CreateConnectorSyncSettingsOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createConnectorSyncSettingsOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateConnectorSyncSettingsOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createConnectorSyncSettingsOptions.SyncEnabledOption.IsSet)
                if (createConnectorSyncSettingsOptions.SyncEnabledOption.Value != null)
                    writer.WriteBoolean("syncEnabled", createConnectorSyncSettingsOptions.SyncEnabledOption.Value.Value);
                else
                    writer.WriteNull("syncEnabled");

            var syncScheduleTypeRawValue = CreateConnectorSyncSettingsOptions.SyncScheduleTypeEnumToJsonValue(createConnectorSyncSettingsOptions.SyncScheduleTypeOption.Value.Value);
            if (syncScheduleTypeRawValue != null)
                writer.WriteString("syncScheduleType", syncScheduleTypeRawValue);
            else
                writer.WriteNull("syncScheduleType");

            if (createConnectorSyncSettingsOptions.SyncIntervalOption.IsSet)
                if (createConnectorSyncSettingsOptions.SyncIntervalOption.Value != null)
                    writer.WriteNumber("syncInterval", createConnectorSyncSettingsOptions.SyncIntervalOption.Value.Value);
                else
                    writer.WriteNull("syncInterval");
        }
    }
}
