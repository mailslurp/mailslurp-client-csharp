/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating automatic syncing between an inbox connection and an external mail provider
    /// </summary>
    [DataContract(Name = "CreateConnectorSyncSettingsOptions")]
    public partial class CreateConnectorSyncSettingsOptions : IValidatableObject
    {
        /// <summary>
        /// Sync schedule type
        /// </summary>
        /// <value>Sync schedule type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SyncScheduleTypeEnum
        {
            /// <summary>
            /// Enum INTERVAL for value: INTERVAL
            /// </summary>
            [EnumMember(Value = "INTERVAL")]
            INTERVAL = 1
        }


        /// <summary>
        /// Sync schedule type
        /// </summary>
        /// <value>Sync schedule type</value>
        [DataMember(Name = "syncScheduleType", EmitDefaultValue = true)]
        public SyncScheduleTypeEnum? SyncScheduleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorSyncSettingsOptions" /> class.
        /// </summary>
        /// <param name="syncEnabled">Enable automatic background sync.</param>
        /// <param name="syncScheduleType">Sync schedule type.</param>
        /// <param name="syncInterval">Sync interval in minutes.</param>
        public CreateConnectorSyncSettingsOptions(bool? syncEnabled = default, SyncScheduleTypeEnum? syncScheduleType = default, int? syncInterval = default)
        {
            this.SyncEnabled = syncEnabled;
            this.SyncScheduleType = syncScheduleType;
            this.SyncInterval = syncInterval;
        }

        /// <summary>
        /// Enable automatic background sync
        /// </summary>
        /// <value>Enable automatic background sync</value>
        [DataMember(Name = "syncEnabled", EmitDefaultValue = true)]
        public bool? SyncEnabled { get; set; }

        /// <summary>
        /// Sync interval in minutes
        /// </summary>
        /// <value>Sync interval in minutes</value>
        [DataMember(Name = "syncInterval", EmitDefaultValue = true)]
        public int? SyncInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectorSyncSettingsOptions {\n");
            sb.Append("  SyncEnabled: ").Append(SyncEnabled).Append("\n");
            sb.Append("  SyncScheduleType: ").Append(SyncScheduleType).Append("\n");
            sb.Append("  SyncInterval: ").Append(SyncInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
