// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Result of test of inbox ruleset
    /// </summary>
    public partial class InboxRulesetTestResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboxRulesetTestResult" /> class.
        /// </summary>
        /// <param name="rulesetMatches">Map of inbox ruleset ID to boolean of if target matches</param>
        /// <param name="matches">matches</param>
        [JsonConstructor]
        public InboxRulesetTestResult(Dictionary<string, bool> rulesetMatches, bool matches)
        {
            RulesetMatches = rulesetMatches;
            Matches = matches;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Map of inbox ruleset ID to boolean of if target matches
        /// </summary>
        /// <value>Map of inbox ruleset ID to boolean of if target matches</value>
        [JsonPropertyName("rulesetMatches")]
        public Dictionary<string, bool> RulesetMatches { get; set; }

        /// <summary>
        /// Gets or Sets Matches
        /// </summary>
        [JsonPropertyName("matches")]
        public bool Matches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboxRulesetTestResult {\n");
            sb.Append("  RulesetMatches: ").Append(RulesetMatches).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InboxRulesetTestResult" />
    /// </summary>
    public class InboxRulesetTestResultJsonConverter : JsonConverter<InboxRulesetTestResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="InboxRulesetTestResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InboxRulesetTestResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, bool>> rulesetMatches = default;
            Option<bool?> matches = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rulesetMatches":
                            rulesetMatches = new Option<Dictionary<string, bool>>(JsonSerializer.Deserialize<Dictionary<string, bool>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "matches":
                            matches = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!rulesetMatches.IsSet)
                throw new ArgumentException("Property is required for class InboxRulesetTestResult.", nameof(rulesetMatches));

            if (!matches.IsSet)
                throw new ArgumentException("Property is required for class InboxRulesetTestResult.", nameof(matches));

            if (rulesetMatches.IsSet && rulesetMatches.Value == null)
                throw new ArgumentNullException(nameof(rulesetMatches), "Property is not nullable for class InboxRulesetTestResult.");

            if (matches.IsSet && matches.Value == null)
                throw new ArgumentNullException(nameof(matches), "Property is not nullable for class InboxRulesetTestResult.");

            return new InboxRulesetTestResult(rulesetMatches.Value, matches.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="InboxRulesetTestResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxRulesetTestResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InboxRulesetTestResult inboxRulesetTestResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, inboxRulesetTestResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InboxRulesetTestResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxRulesetTestResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InboxRulesetTestResult inboxRulesetTestResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (inboxRulesetTestResult.RulesetMatches == null)
                throw new ArgumentNullException(nameof(inboxRulesetTestResult.RulesetMatches), "Property is required for class InboxRulesetTestResult.");

            writer.WritePropertyName("rulesetMatches");
            JsonSerializer.Serialize(writer, inboxRulesetTestResult.RulesetMatches, jsonSerializerOptions);
            writer.WriteBoolean("matches", inboxRulesetTestResult.Matches);
        }
    }
}
