/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for generating structured content output from an email
    /// </summary>
    [DataContract(Name = "GenerateStructuredContentEmailOptions")]
    public partial class GenerateStructuredContentEmailOptions : IValidatableObject
    {
        /// <summary>
        /// Content selector to select part of email to operate on
        /// </summary>
        /// <value>Content selector to select part of email to operate on</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentSelectorEnum
        {
            /// <summary>
            /// Enum RAW for value: RAW
            /// </summary>
            [EnumMember(Value = "RAW")]
            RAW = 1,

            /// <summary>
            /// Enum BODY for value: BODY
            /// </summary>
            [EnumMember(Value = "BODY")]
            BODY = 2,

            /// <summary>
            /// Enum BODYATTACHMENTS for value: BODY_ATTACHMENTS
            /// </summary>
            [EnumMember(Value = "BODY_ATTACHMENTS")]
            BODYATTACHMENTS = 3
        }


        /// <summary>
        /// Content selector to select part of email to operate on
        /// </summary>
        /// <value>Content selector to select part of email to operate on</value>
        [DataMember(Name = "contentSelector", EmitDefaultValue = true)]
        public ContentSelectorEnum? ContentSelector { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateStructuredContentEmailOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateStructuredContentEmailOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateStructuredContentEmailOptions" /> class.
        /// </summary>
        /// <param name="emailId">Email ID to read and pass to AI (required).</param>
        /// <param name="contentSelector">Content selector to select part of email to operate on.</param>
        /// <param name="instructions">Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints..</param>
        /// <param name="outputSchema">outputSchema.</param>
        /// <param name="transformId">ID of transformer to apply.</param>
        public GenerateStructuredContentEmailOptions(Guid emailId = default, ContentSelectorEnum? contentSelector = default, string instructions = default, StructuredOutputSchema outputSchema = default, Guid? transformId = default)
        {
            this.EmailId = emailId;
            this.ContentSelector = contentSelector;
            this.Instructions = instructions;
            this.OutputSchema = outputSchema;
            this.TransformId = transformId;
        }

        /// <summary>
        /// Email ID to read and pass to AI
        /// </summary>
        /// <value>Email ID to read and pass to AI</value>
        [DataMember(Name = "emailId", IsRequired = true, EmitDefaultValue = true)]
        public Guid EmailId { get; set; }

        /// <summary>
        /// Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.
        /// </summary>
        /// <value>Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.</value>
        [DataMember(Name = "instructions", EmitDefaultValue = true)]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or Sets OutputSchema
        /// </summary>
        [DataMember(Name = "outputSchema", EmitDefaultValue = false)]
        public StructuredOutputSchema OutputSchema { get; set; }

        /// <summary>
        /// ID of transformer to apply
        /// </summary>
        /// <value>ID of transformer to apply</value>
        [DataMember(Name = "transformId", EmitDefaultValue = true)]
        public Guid? TransformId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateStructuredContentEmailOptions {\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  ContentSelector: ").Append(ContentSelector).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  OutputSchema: ").Append(OutputSchema).Append("\n");
            sb.Append("  TransformId: ").Append(TransformId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
