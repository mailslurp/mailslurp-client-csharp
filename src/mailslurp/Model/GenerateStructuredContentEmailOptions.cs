// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for generating structured content output from an email
    /// </summary>
    public partial class GenerateStructuredContentEmailOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateStructuredContentEmailOptions" /> class.
        /// </summary>
        /// <param name="emailId">Email ID to read and pass to AI</param>
        /// <param name="outputSchema">outputSchema</param>
        /// <param name="contentSelector">Content selector to select part of email to operate on</param>
        /// <param name="instructions">Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.</param>
        [JsonConstructor]
        public GenerateStructuredContentEmailOptions(Guid emailId, StructuredOutputSchema outputSchema, Option<ContentSelectorEnum?> contentSelector = default, Option<string> instructions = default)
        {
            EmailId = emailId;
            OutputSchema = outputSchema;
            ContentSelectorOption = contentSelector;
            InstructionsOption = instructions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Content selector to select part of email to operate on
        /// </summary>
        /// <value>Content selector to select part of email to operate on</value>
        public enum ContentSelectorEnum
        {
            /// <summary>
            /// Enum RAW for value: RAW
            /// </summary>
            RAW = 1,

            /// <summary>
            /// Enum BODY for value: BODY
            /// </summary>
            BODY = 2
        }

        /// <summary>
        /// Returns a <see cref="ContentSelectorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ContentSelectorEnum ContentSelectorEnumFromString(string value)
        {
            if (value.Equals("RAW"))
                return ContentSelectorEnum.RAW;

            if (value.Equals("BODY"))
                return ContentSelectorEnum.BODY;

            throw new NotImplementedException($"Could not convert value to type ContentSelectorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ContentSelectorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ContentSelectorEnum? ContentSelectorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("RAW"))
                return ContentSelectorEnum.RAW;

            if (value.Equals("BODY"))
                return ContentSelectorEnum.BODY;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ContentSelectorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ContentSelectorEnumToJsonValue(ContentSelectorEnum? value)
        {
            if (value == ContentSelectorEnum.RAW)
                return "RAW";

            if (value == ContentSelectorEnum.BODY)
                return "BODY";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ContentSelector
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContentSelectorEnum?> ContentSelectorOption { get; private set; }

        /// <summary>
        /// Content selector to select part of email to operate on
        /// </summary>
        /// <value>Content selector to select part of email to operate on</value>
        [JsonPropertyName("contentSelector")]
        public ContentSelectorEnum? ContentSelector { get { return this.ContentSelectorOption; } set { this.ContentSelectorOption = new Option<ContentSelectorEnum?>(value); } }

        /// <summary>
        /// Email ID to read and pass to AI
        /// </summary>
        /// <value>Email ID to read and pass to AI</value>
        [JsonPropertyName("emailId")]
        public Guid EmailId { get; set; }

        /// <summary>
        /// Gets or Sets OutputSchema
        /// </summary>
        [JsonPropertyName("outputSchema")]
        public StructuredOutputSchema OutputSchema { get; set; }

        /// <summary>
        /// Used to track the state of Instructions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InstructionsOption { get; private set; }

        /// <summary>
        /// Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.
        /// </summary>
        /// <value>Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.</value>
        [JsonPropertyName("instructions")]
        public string Instructions { get { return this.InstructionsOption; } set { this.InstructionsOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateStructuredContentEmailOptions {\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  OutputSchema: ").Append(OutputSchema).Append("\n");
            sb.Append("  ContentSelector: ").Append(ContentSelector).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GenerateStructuredContentEmailOptions" />
    /// </summary>
    public class GenerateStructuredContentEmailOptionsJsonConverter : JsonConverter<GenerateStructuredContentEmailOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="GenerateStructuredContentEmailOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GenerateStructuredContentEmailOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> emailId = default;
            Option<StructuredOutputSchema> outputSchema = default;
            Option<GenerateStructuredContentEmailOptions.ContentSelectorEnum?> contentSelector = default;
            Option<string> instructions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "emailId":
                            emailId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "outputSchema":
                            outputSchema = new Option<StructuredOutputSchema>(JsonSerializer.Deserialize<StructuredOutputSchema>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "contentSelector":
                            string contentSelectorRawValue = utf8JsonReader.GetString();
                            if (contentSelectorRawValue != null)
                                contentSelector = new Option<GenerateStructuredContentEmailOptions.ContentSelectorEnum?>(GenerateStructuredContentEmailOptions.ContentSelectorEnumFromStringOrDefault(contentSelectorRawValue));
                            break;
                        case "instructions":
                            instructions = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!emailId.IsSet)
                throw new ArgumentException("Property is required for class GenerateStructuredContentEmailOptions.", nameof(emailId));

            if (!outputSchema.IsSet)
                throw new ArgumentException("Property is required for class GenerateStructuredContentEmailOptions.", nameof(outputSchema));

            if (emailId.IsSet && emailId.Value == null)
                throw new ArgumentNullException(nameof(emailId), "Property is not nullable for class GenerateStructuredContentEmailOptions.");

            if (outputSchema.IsSet && outputSchema.Value == null)
                throw new ArgumentNullException(nameof(outputSchema), "Property is not nullable for class GenerateStructuredContentEmailOptions.");

            if (contentSelector.IsSet && contentSelector.Value == null)
                throw new ArgumentNullException(nameof(contentSelector), "Property is not nullable for class GenerateStructuredContentEmailOptions.");

            if (instructions.IsSet && instructions.Value == null)
                throw new ArgumentNullException(nameof(instructions), "Property is not nullable for class GenerateStructuredContentEmailOptions.");

            return new GenerateStructuredContentEmailOptions(emailId.Value.Value, outputSchema.Value, contentSelector, instructions);
        }

        /// <summary>
        /// Serializes a <see cref="GenerateStructuredContentEmailOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generateStructuredContentEmailOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GenerateStructuredContentEmailOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generateStructuredContentEmailOptions.OutputSchema == null)
                throw new ArgumentNullException(nameof(generateStructuredContentEmailOptions.OutputSchema), "Property is required for class GenerateStructuredContentEmailOptions.");

            if (generateStructuredContentEmailOptions.InstructionsOption.IsSet && generateStructuredContentEmailOptions.Instructions == null)
                throw new ArgumentNullException(nameof(generateStructuredContentEmailOptions.Instructions), "Property is required for class GenerateStructuredContentEmailOptions.");

            writer.WriteString("emailId", generateStructuredContentEmailOptions.EmailId);

            writer.WritePropertyName("outputSchema");
            JsonSerializer.Serialize(writer, generateStructuredContentEmailOptions.OutputSchema, jsonSerializerOptions);
            var contentSelectorRawValue = GenerateStructuredContentEmailOptions.ContentSelectorEnumToJsonValue(generateStructuredContentEmailOptions.ContentSelectorOption.Value.Value);
            writer.WriteString("contentSelector", contentSelectorRawValue);
            if (generateStructuredContentEmailOptions.InstructionsOption.IsSet)
                writer.WriteString("instructions", generateStructuredContentEmailOptions.Instructions);
        }
    }
}
