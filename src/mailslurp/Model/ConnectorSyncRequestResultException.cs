/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorSyncRequestResultException
    /// </summary>
    [DataContract(Name = "ConnectorSyncRequestResult_exception")]
    public partial class ConnectorSyncRequestResultException : IEquatable<ConnectorSyncRequestResultException>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorSyncRequestResultException" /> class.
        /// </summary>
        /// <param name="cause">cause.</param>
        /// <param name="stackTrace">stackTrace.</param>
        /// <param name="message">message.</param>
        /// <param name="suppressed">suppressed.</param>
        /// <param name="localizedMessage">localizedMessage.</param>
        public ConnectorSyncRequestResultException(ConnectorSyncRequestResultExceptionCause cause = default(ConnectorSyncRequestResultExceptionCause), List<ConnectorSyncRequestResultExceptionCauseStackTraceInner> stackTrace = default(List<ConnectorSyncRequestResultExceptionCauseStackTraceInner>), string message = default(string), List<ConnectorSyncRequestResultExceptionCause> suppressed = default(List<ConnectorSyncRequestResultExceptionCause>), string localizedMessage = default(string))
        {
            this.Cause = cause;
            this.StackTrace = stackTrace;
            this.Message = message;
            this.Suppressed = suppressed;
            this.LocalizedMessage = localizedMessage;
        }

        /// <summary>
        /// Gets or Sets Cause
        /// </summary>
        [DataMember(Name = "cause", EmitDefaultValue = false)]
        public ConnectorSyncRequestResultExceptionCause Cause { get; set; }

        /// <summary>
        /// Gets or Sets StackTrace
        /// </summary>
        [DataMember(Name = "stackTrace", EmitDefaultValue = false)]
        public List<ConnectorSyncRequestResultExceptionCauseStackTraceInner> StackTrace { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Suppressed
        /// </summary>
        [DataMember(Name = "suppressed", EmitDefaultValue = false)]
        public List<ConnectorSyncRequestResultExceptionCause> Suppressed { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedMessage
        /// </summary>
        [DataMember(Name = "localizedMessage", EmitDefaultValue = false)]
        public string LocalizedMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorSyncRequestResultException {\n");
            sb.Append("  Cause: ").Append(Cause).Append("\n");
            sb.Append("  StackTrace: ").Append(StackTrace).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Suppressed: ").Append(Suppressed).Append("\n");
            sb.Append("  LocalizedMessage: ").Append(LocalizedMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectorSyncRequestResultException);
        }

        /// <summary>
        /// Returns true if ConnectorSyncRequestResultException instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectorSyncRequestResultException to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorSyncRequestResultException input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Cause == input.Cause ||
                    (this.Cause != null &&
                    this.Cause.Equals(input.Cause))
                ) && 
                (
                    this.StackTrace == input.StackTrace ||
                    this.StackTrace != null &&
                    input.StackTrace != null &&
                    this.StackTrace.SequenceEqual(input.StackTrace)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Suppressed == input.Suppressed ||
                    this.Suppressed != null &&
                    input.Suppressed != null &&
                    this.Suppressed.SequenceEqual(input.Suppressed)
                ) && 
                (
                    this.LocalizedMessage == input.LocalizedMessage ||
                    (this.LocalizedMessage != null &&
                    this.LocalizedMessage.Equals(input.LocalizedMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cause != null)
                {
                    hashCode = (hashCode * 59) + this.Cause.GetHashCode();
                }
                if (this.StackTrace != null)
                {
                    hashCode = (hashCode * 59) + this.StackTrace.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Suppressed != null)
                {
                    hashCode = (hashCode * 59) + this.Suppressed.GetHashCode();
                }
                if (this.LocalizedMessage != null)
                {
                    hashCode = (hashCode * 59) + this.LocalizedMessage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
