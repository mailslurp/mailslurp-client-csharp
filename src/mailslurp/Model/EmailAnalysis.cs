// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Analysis result for email. Each verdict property is a string PASS|FAIL|GRAY or dynamic error message
    /// </summary>
    public partial class EmailAnalysis : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAnalysis" /> class.
        /// </summary>
        /// <param name="spamVerdict">Verdict of spam ranking analysis</param>
        /// <param name="virusVerdict">Verdict of virus scan analysis</param>
        /// <param name="spfVerdict">Verdict of Send Policy Framework record spoofing analysis</param>
        /// <param name="dkimVerdict">Verdict of DomainKeys Identified Mail analysis</param>
        /// <param name="dmarcVerdict">Verdict of Domain-based Message Authentication Reporting and Conformance analysis</param>
        [JsonConstructor]
        public EmailAnalysis(Option<string> spamVerdict = default, Option<string> virusVerdict = default, Option<string> spfVerdict = default, Option<string> dkimVerdict = default, Option<string> dmarcVerdict = default)
        {
            SpamVerdictOption = spamVerdict;
            VirusVerdictOption = virusVerdict;
            SpfVerdictOption = spfVerdict;
            DkimVerdictOption = dkimVerdict;
            DmarcVerdictOption = dmarcVerdict;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SpamVerdict
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SpamVerdictOption { get; private set; }

        /// <summary>
        /// Verdict of spam ranking analysis
        /// </summary>
        /// <value>Verdict of spam ranking analysis</value>
        [JsonPropertyName("spamVerdict")]
        public string SpamVerdict { get { return this.SpamVerdictOption; } set { this.SpamVerdictOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VirusVerdict
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VirusVerdictOption { get; private set; }

        /// <summary>
        /// Verdict of virus scan analysis
        /// </summary>
        /// <value>Verdict of virus scan analysis</value>
        [JsonPropertyName("virusVerdict")]
        public string VirusVerdict { get { return this.VirusVerdictOption; } set { this.VirusVerdictOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SpfVerdict
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SpfVerdictOption { get; private set; }

        /// <summary>
        /// Verdict of Send Policy Framework record spoofing analysis
        /// </summary>
        /// <value>Verdict of Send Policy Framework record spoofing analysis</value>
        [JsonPropertyName("spfVerdict")]
        public string SpfVerdict { get { return this.SpfVerdictOption; } set { this.SpfVerdictOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DkimVerdict
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DkimVerdictOption { get; private set; }

        /// <summary>
        /// Verdict of DomainKeys Identified Mail analysis
        /// </summary>
        /// <value>Verdict of DomainKeys Identified Mail analysis</value>
        [JsonPropertyName("dkimVerdict")]
        public string DkimVerdict { get { return this.DkimVerdictOption; } set { this.DkimVerdictOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DmarcVerdict
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DmarcVerdictOption { get; private set; }

        /// <summary>
        /// Verdict of Domain-based Message Authentication Reporting and Conformance analysis
        /// </summary>
        /// <value>Verdict of Domain-based Message Authentication Reporting and Conformance analysis</value>
        [JsonPropertyName("dmarcVerdict")]
        public string DmarcVerdict { get { return this.DmarcVerdictOption; } set { this.DmarcVerdictOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailAnalysis {\n");
            sb.Append("  SpamVerdict: ").Append(SpamVerdict).Append("\n");
            sb.Append("  VirusVerdict: ").Append(VirusVerdict).Append("\n");
            sb.Append("  SpfVerdict: ").Append(SpfVerdict).Append("\n");
            sb.Append("  DkimVerdict: ").Append(DkimVerdict).Append("\n");
            sb.Append("  DmarcVerdict: ").Append(DmarcVerdict).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailAnalysis" />
    /// </summary>
    public class EmailAnalysisJsonConverter : JsonConverter<EmailAnalysis>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailAnalysis" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailAnalysis Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> spamVerdict = default;
            Option<string> virusVerdict = default;
            Option<string> spfVerdict = default;
            Option<string> dkimVerdict = default;
            Option<string> dmarcVerdict = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "spamVerdict":
                            spamVerdict = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "virusVerdict":
                            virusVerdict = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "spfVerdict":
                            spfVerdict = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dkimVerdict":
                            dkimVerdict = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dmarcVerdict":
                            dmarcVerdict = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new EmailAnalysis(spamVerdict, virusVerdict, spfVerdict, dkimVerdict, dmarcVerdict);
        }

        /// <summary>
        /// Serializes a <see cref="EmailAnalysis" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailAnalysis"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailAnalysis emailAnalysis, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailAnalysis, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailAnalysis" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailAnalysis"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailAnalysis emailAnalysis, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailAnalysis.SpamVerdictOption.IsSet)
                if (emailAnalysis.SpamVerdictOption.Value != null)
                    writer.WriteString("spamVerdict", emailAnalysis.SpamVerdict);
                else
                    writer.WriteNull("spamVerdict");

            if (emailAnalysis.VirusVerdictOption.IsSet)
                if (emailAnalysis.VirusVerdictOption.Value != null)
                    writer.WriteString("virusVerdict", emailAnalysis.VirusVerdict);
                else
                    writer.WriteNull("virusVerdict");

            if (emailAnalysis.SpfVerdictOption.IsSet)
                if (emailAnalysis.SpfVerdictOption.Value != null)
                    writer.WriteString("spfVerdict", emailAnalysis.SpfVerdict);
                else
                    writer.WriteNull("spfVerdict");

            if (emailAnalysis.DkimVerdictOption.IsSet)
                if (emailAnalysis.DkimVerdictOption.Value != null)
                    writer.WriteString("dkimVerdict", emailAnalysis.DkimVerdict);
                else
                    writer.WriteNull("dkimVerdict");

            if (emailAnalysis.DmarcVerdictOption.IsSet)
                if (emailAnalysis.DmarcVerdictOption.Value != null)
                    writer.WriteString("dmarcVerdict", emailAnalysis.DmarcVerdict);
                else
                    writer.WriteNull("dmarcVerdict");
        }
    }
}
