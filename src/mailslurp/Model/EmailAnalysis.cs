/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Analysis result for email. Each verdict property is a string PASS|FAIL|GRAY or dynamic error message
    /// </summary>
    [DataContract(Name = "EmailAnalysis")]
    public partial class EmailAnalysis : IEquatable<EmailAnalysis>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAnalysis" /> class.
        /// </summary>
        /// <param name="spamVerdict">Verdict of spam ranking analysis.</param>
        /// <param name="virusVerdict">Verdict of virus scan analysis.</param>
        /// <param name="spfVerdict">Verdict of Send Policy Framework record spoofing analysis.</param>
        /// <param name="dkimVerdict">Verdict of DomainKeys Identified Mail analysis.</param>
        /// <param name="dmarcVerdict">Verdict of Domain-based Message Authentication Reporting and Conformance analysis.</param>
        public EmailAnalysis(string spamVerdict = default(string), string virusVerdict = default(string), string spfVerdict = default(string), string dkimVerdict = default(string), string dmarcVerdict = default(string))
        {
            this.SpamVerdict = spamVerdict;
            this.VirusVerdict = virusVerdict;
            this.SpfVerdict = spfVerdict;
            this.DkimVerdict = dkimVerdict;
            this.DmarcVerdict = dmarcVerdict;
        }

        /// <summary>
        /// Verdict of spam ranking analysis
        /// </summary>
        /// <value>Verdict of spam ranking analysis</value>
        [DataMember(Name = "spamVerdict", EmitDefaultValue = true)]
        public string SpamVerdict { get; set; }

        /// <summary>
        /// Verdict of virus scan analysis
        /// </summary>
        /// <value>Verdict of virus scan analysis</value>
        [DataMember(Name = "virusVerdict", EmitDefaultValue = true)]
        public string VirusVerdict { get; set; }

        /// <summary>
        /// Verdict of Send Policy Framework record spoofing analysis
        /// </summary>
        /// <value>Verdict of Send Policy Framework record spoofing analysis</value>
        [DataMember(Name = "spfVerdict", EmitDefaultValue = true)]
        public string SpfVerdict { get; set; }

        /// <summary>
        /// Verdict of DomainKeys Identified Mail analysis
        /// </summary>
        /// <value>Verdict of DomainKeys Identified Mail analysis</value>
        [DataMember(Name = "dkimVerdict", EmitDefaultValue = true)]
        public string DkimVerdict { get; set; }

        /// <summary>
        /// Verdict of Domain-based Message Authentication Reporting and Conformance analysis
        /// </summary>
        /// <value>Verdict of Domain-based Message Authentication Reporting and Conformance analysis</value>
        [DataMember(Name = "dmarcVerdict", EmitDefaultValue = true)]
        public string DmarcVerdict { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailAnalysis {\n");
            sb.Append("  SpamVerdict: ").Append(SpamVerdict).Append("\n");
            sb.Append("  VirusVerdict: ").Append(VirusVerdict).Append("\n");
            sb.Append("  SpfVerdict: ").Append(SpfVerdict).Append("\n");
            sb.Append("  DkimVerdict: ").Append(DkimVerdict).Append("\n");
            sb.Append("  DmarcVerdict: ").Append(DmarcVerdict).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailAnalysis);
        }

        /// <summary>
        /// Returns true if EmailAnalysis instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailAnalysis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailAnalysis input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SpamVerdict == input.SpamVerdict ||
                    (this.SpamVerdict != null &&
                    this.SpamVerdict.Equals(input.SpamVerdict))
                ) && 
                (
                    this.VirusVerdict == input.VirusVerdict ||
                    (this.VirusVerdict != null &&
                    this.VirusVerdict.Equals(input.VirusVerdict))
                ) && 
                (
                    this.SpfVerdict == input.SpfVerdict ||
                    (this.SpfVerdict != null &&
                    this.SpfVerdict.Equals(input.SpfVerdict))
                ) && 
                (
                    this.DkimVerdict == input.DkimVerdict ||
                    (this.DkimVerdict != null &&
                    this.DkimVerdict.Equals(input.DkimVerdict))
                ) && 
                (
                    this.DmarcVerdict == input.DmarcVerdict ||
                    (this.DmarcVerdict != null &&
                    this.DmarcVerdict.Equals(input.DmarcVerdict))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpamVerdict != null)
                {
                    hashCode = (hashCode * 59) + this.SpamVerdict.GetHashCode();
                }
                if (this.VirusVerdict != null)
                {
                    hashCode = (hashCode * 59) + this.VirusVerdict.GetHashCode();
                }
                if (this.SpfVerdict != null)
                {
                    hashCode = (hashCode * 59) + this.SpfVerdict.GetHashCode();
                }
                if (this.DkimVerdict != null)
                {
                    hashCode = (hashCode * 59) + this.DkimVerdict.GetHashCode();
                }
                if (this.DmarcVerdict != null)
                {
                    hashCode = (hashCode * 59) + this.DmarcVerdict.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
