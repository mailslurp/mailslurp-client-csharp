/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Result of validating a list of email addresses
    /// </summary>
    [DataContract(Name = "ValidateEmailAddressListResult")]
    public partial class ValidateEmailAddressListResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateEmailAddressListResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidateEmailAddressListResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateEmailAddressListResult" /> class.
        /// </summary>
        /// <param name="validEmailAddresses">validEmailAddresses (required).</param>
        /// <param name="invalidEmailAddresses">invalidEmailAddresses (required).</param>
        /// <param name="resultMapEmailAddressIsValid">resultMapEmailAddressIsValid (required).</param>
        public ValidateEmailAddressListResult(List<string> validEmailAddresses = default, List<string> invalidEmailAddresses = default, Dictionary<string, bool> resultMapEmailAddressIsValid = default)
        {
            // to ensure "validEmailAddresses" is required (not null)
            if (validEmailAddresses == null)
            {
                throw new ArgumentNullException("validEmailAddresses is a required property for ValidateEmailAddressListResult and cannot be null");
            }
            this.ValidEmailAddresses = validEmailAddresses;
            // to ensure "invalidEmailAddresses" is required (not null)
            if (invalidEmailAddresses == null)
            {
                throw new ArgumentNullException("invalidEmailAddresses is a required property for ValidateEmailAddressListResult and cannot be null");
            }
            this.InvalidEmailAddresses = invalidEmailAddresses;
            // to ensure "resultMapEmailAddressIsValid" is required (not null)
            if (resultMapEmailAddressIsValid == null)
            {
                throw new ArgumentNullException("resultMapEmailAddressIsValid is a required property for ValidateEmailAddressListResult and cannot be null");
            }
            this.ResultMapEmailAddressIsValid = resultMapEmailAddressIsValid;
        }

        /// <summary>
        /// Gets or Sets ValidEmailAddresses
        /// </summary>
        [DataMember(Name = "validEmailAddresses", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ValidEmailAddresses { get; set; }

        /// <summary>
        /// Gets or Sets InvalidEmailAddresses
        /// </summary>
        [DataMember(Name = "invalidEmailAddresses", IsRequired = true, EmitDefaultValue = true)]
        public List<string> InvalidEmailAddresses { get; set; }

        /// <summary>
        /// Gets or Sets ResultMapEmailAddressIsValid
        /// </summary>
        [DataMember(Name = "resultMapEmailAddressIsValid", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, bool> ResultMapEmailAddressIsValid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidateEmailAddressListResult {\n");
            sb.Append("  ValidEmailAddresses: ").Append(ValidEmailAddresses).Append("\n");
            sb.Append("  InvalidEmailAddresses: ").Append(InvalidEmailAddresses).Append("\n");
            sb.Append("  ResultMapEmailAddressIsValid: ").Append(ResultMapEmailAddressIsValid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
