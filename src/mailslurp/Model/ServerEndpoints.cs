// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ServerEndpoints
    /// </summary>
    public partial class ServerEndpoints : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerEndpoints" /> class.
        /// </summary>
        /// <param name="host">host</param>
        /// <param name="port">port</param>
        /// <param name="tls">tls</param>
        /// <param name="altPorts">altPorts</param>
        [JsonConstructor]
        public ServerEndpoints(string host, int port, bool tls, List<int> altPorts)
        {
            Host = host;
            Port = port;
            Tls = tls;
            AltPorts = altPorts;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [JsonPropertyName("host")]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [JsonPropertyName("port")]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets Tls
        /// </summary>
        [JsonPropertyName("tls")]
        public bool Tls { get; set; }

        /// <summary>
        /// Gets or Sets AltPorts
        /// </summary>
        [JsonPropertyName("altPorts")]
        public List<int> AltPorts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerEndpoints {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Tls: ").Append(Tls).Append("\n");
            sb.Append("  AltPorts: ").Append(AltPorts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ServerEndpoints" />
    /// </summary>
    public class ServerEndpointsJsonConverter : JsonConverter<ServerEndpoints>
    {
        /// <summary>
        /// Deserializes json to <see cref="ServerEndpoints" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ServerEndpoints Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> host = default;
            Option<int?> port = default;
            Option<bool?> tls = default;
            Option<List<int>> altPorts = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "host":
                            host = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "port":
                            port = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tls":
                            tls = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "altPorts":
                            altPorts = new Option<List<int>>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!host.IsSet)
                throw new ArgumentException("Property is required for class ServerEndpoints.", nameof(host));

            if (!port.IsSet)
                throw new ArgumentException("Property is required for class ServerEndpoints.", nameof(port));

            if (!tls.IsSet)
                throw new ArgumentException("Property is required for class ServerEndpoints.", nameof(tls));

            if (!altPorts.IsSet)
                throw new ArgumentException("Property is required for class ServerEndpoints.", nameof(altPorts));

            if (host.IsSet && host.Value == null)
                throw new ArgumentNullException(nameof(host), "Property is not nullable for class ServerEndpoints.");

            if (port.IsSet && port.Value == null)
                throw new ArgumentNullException(nameof(port), "Property is not nullable for class ServerEndpoints.");

            if (tls.IsSet && tls.Value == null)
                throw new ArgumentNullException(nameof(tls), "Property is not nullable for class ServerEndpoints.");

            if (altPorts.IsSet && altPorts.Value == null)
                throw new ArgumentNullException(nameof(altPorts), "Property is not nullable for class ServerEndpoints.");

            return new ServerEndpoints(host.Value, port.Value.Value, tls.Value.Value, altPorts.Value);
        }

        /// <summary>
        /// Serializes a <see cref="ServerEndpoints" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverEndpoints"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ServerEndpoints serverEndpoints, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, serverEndpoints, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ServerEndpoints" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="serverEndpoints"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ServerEndpoints serverEndpoints, JsonSerializerOptions jsonSerializerOptions)
        {
            if (serverEndpoints.Host == null)
                throw new ArgumentNullException(nameof(serverEndpoints.Host), "Property is required for class ServerEndpoints.");

            if (serverEndpoints.AltPorts == null)
                throw new ArgumentNullException(nameof(serverEndpoints.AltPorts), "Property is required for class ServerEndpoints.");

            writer.WriteString("host", serverEndpoints.Host);

            writer.WriteNumber("port", serverEndpoints.Port);

            writer.WriteBoolean("tls", serverEndpoints.Tls);

            writer.WritePropertyName("altPorts");
            JsonSerializer.Serialize(writer, serverEndpoints.AltPorts, jsonSerializerOptions);
        }
    }
}
