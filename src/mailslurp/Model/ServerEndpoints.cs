/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// ServerEndpoints
    /// </summary>
    [DataContract(Name = "ServerEndpoints")]
    public partial class ServerEndpoints : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerEndpoints" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServerEndpoints() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerEndpoints" /> class.
        /// </summary>
        /// <param name="host">host (required).</param>
        /// <param name="port">port (required).</param>
        /// <param name="tls">tls (required).</param>
        /// <param name="altPorts">altPorts (required).</param>
        public ServerEndpoints(string host = default, int port = default, bool tls = default, List<int> altPorts = default)
        {
            // to ensure "host" is required (not null)
            if (host == null)
            {
                throw new ArgumentNullException("host is a required property for ServerEndpoints and cannot be null");
            }
            this.Host = host;
            this.Port = port;
            this.Tls = tls;
            // to ensure "altPorts" is required (not null)
            if (altPorts == null)
            {
                throw new ArgumentNullException("altPorts is a required property for ServerEndpoints and cannot be null");
            }
            this.AltPorts = altPorts;
        }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", IsRequired = true, EmitDefaultValue = true)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", IsRequired = true, EmitDefaultValue = true)]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets Tls
        /// </summary>
        [DataMember(Name = "tls", IsRequired = true, EmitDefaultValue = true)]
        public bool Tls { get; set; }

        /// <summary>
        /// Gets or Sets AltPorts
        /// </summary>
        [DataMember(Name = "altPorts", IsRequired = true, EmitDefaultValue = true)]
        public List<int> AltPorts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerEndpoints {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Tls: ").Append(Tls).Append("\n");
            sb.Append("  AltPorts: ").Append(AltPorts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
