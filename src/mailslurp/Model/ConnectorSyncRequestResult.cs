// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorSyncRequestResult
    /// </summary>
    public partial class ConnectorSyncRequestResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorSyncRequestResult" /> class.
        /// </summary>
        /// <param name="syncResult">syncResult</param>
        /// <param name="exception">exception</param>
        /// <param name="eventId">eventId</param>
        [JsonConstructor]
        public ConnectorSyncRequestResult(Option<ConnectorSyncResult> syncResult = default, Option<string> exception = default, Option<Guid?> eventId = default)
        {
            SyncResultOption = syncResult;
            ExceptionOption = exception;
            EventIdOption = eventId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SyncResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConnectorSyncResult> SyncResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets SyncResult
        /// </summary>
        [JsonPropertyName("syncResult")]
        public ConnectorSyncResult SyncResult { get { return this.SyncResultOption; } set { this.SyncResultOption = new Option<ConnectorSyncResult>(value); } }

        /// <summary>
        /// Used to track the state of Exception
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExceptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Exception
        /// </summary>
        [JsonPropertyName("exception")]
        public string Exception { get { return this.ExceptionOption; } set { this.ExceptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EventId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> EventIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [JsonPropertyName("eventId")]
        public Guid? EventId { get { return this.EventIdOption; } set { this.EventIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorSyncRequestResult {\n");
            sb.Append("  SyncResult: ").Append(SyncResult).Append("\n");
            sb.Append("  Exception: ").Append(Exception).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConnectorSyncRequestResult" />
    /// </summary>
    public class ConnectorSyncRequestResultJsonConverter : JsonConverter<ConnectorSyncRequestResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="ConnectorSyncRequestResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConnectorSyncRequestResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ConnectorSyncResult> syncResult = default;
            Option<string> exception = default;
            Option<Guid?> eventId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "syncResult":
                            syncResult = new Option<ConnectorSyncResult>(JsonSerializer.Deserialize<ConnectorSyncResult>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "exception":
                            exception = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "eventId":
                            eventId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (syncResult.IsSet && syncResult.Value == null)
                throw new ArgumentNullException(nameof(syncResult), "Property is not nullable for class ConnectorSyncRequestResult.");

            if (exception.IsSet && exception.Value == null)
                throw new ArgumentNullException(nameof(exception), "Property is not nullable for class ConnectorSyncRequestResult.");

            if (eventId.IsSet && eventId.Value == null)
                throw new ArgumentNullException(nameof(eventId), "Property is not nullable for class ConnectorSyncRequestResult.");

            return new ConnectorSyncRequestResult(syncResult, exception, eventId);
        }

        /// <summary>
        /// Serializes a <see cref="ConnectorSyncRequestResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectorSyncRequestResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConnectorSyncRequestResult connectorSyncRequestResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, connectorSyncRequestResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConnectorSyncRequestResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectorSyncRequestResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ConnectorSyncRequestResult connectorSyncRequestResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (connectorSyncRequestResult.SyncResultOption.IsSet && connectorSyncRequestResult.SyncResult == null)
                throw new ArgumentNullException(nameof(connectorSyncRequestResult.SyncResult), "Property is required for class ConnectorSyncRequestResult.");

            if (connectorSyncRequestResult.ExceptionOption.IsSet && connectorSyncRequestResult.Exception == null)
                throw new ArgumentNullException(nameof(connectorSyncRequestResult.Exception), "Property is required for class ConnectorSyncRequestResult.");

            if (connectorSyncRequestResult.SyncResultOption.IsSet)
            {
                writer.WritePropertyName("syncResult");
                JsonSerializer.Serialize(writer, connectorSyncRequestResult.SyncResult, jsonSerializerOptions);
            }
            if (connectorSyncRequestResult.ExceptionOption.IsSet)
                writer.WriteString("exception", connectorSyncRequestResult.Exception);

            if (connectorSyncRequestResult.EventIdOption.IsSet)
                writer.WriteString("eventId", connectorSyncRequestResult.EventIdOption.Value.Value);
        }
    }
}
