// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// UserInfoDto
    /// </summary>
    public partial class UserInfoDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfoDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="emailAddress">emailAddress</param>
        /// <param name="accountState">accountState</param>
        /// <param name="accountType">accountType</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="subscriptionType">subscriptionType</param>
        [JsonConstructor]
        public UserInfoDto(Guid id, string emailAddress, AccountStateEnum accountState, AccountTypeEnum accountType, DateTime createdAt, Option<SubscriptionTypeEnum?> subscriptionType = default)
        {
            Id = id;
            EmailAddress = emailAddress;
            AccountState = accountState;
            AccountType = accountType;
            CreatedAt = createdAt;
            SubscriptionTypeOption = subscriptionType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines AccountState
        /// </summary>
        public enum AccountStateEnum
        {
            /// <summary>
            /// Enum FROZEN for value: FROZEN
            /// </summary>
            FROZEN = 1,

            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            ACTIVE = 2
        }

        /// <summary>
        /// Returns a <see cref="AccountStateEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AccountStateEnum AccountStateEnumFromString(string value)
        {
            if (value.Equals("FROZEN"))
                return AccountStateEnum.FROZEN;

            if (value.Equals("ACTIVE"))
                return AccountStateEnum.ACTIVE;

            throw new NotImplementedException($"Could not convert value to type AccountStateEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AccountStateEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountStateEnum? AccountStateEnumFromStringOrDefault(string value)
        {
            if (value.Equals("FROZEN"))
                return AccountStateEnum.FROZEN;

            if (value.Equals("ACTIVE"))
                return AccountStateEnum.ACTIVE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccountStateEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AccountStateEnumToJsonValue(AccountStateEnum value)
        {
            if (value == AccountStateEnum.FROZEN)
                return "FROZEN";

            if (value == AccountStateEnum.ACTIVE)
                return "ACTIVE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets AccountState
        /// </summary>
        [JsonPropertyName("accountState")]
        public AccountStateEnum AccountState { get; set; }

        /// <summary>
        /// Defines AccountType
        /// </summary>
        public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum SOLO for value: SOLO
            /// </summary>
            SOLO = 1,

            /// <summary>
            /// Enum CHILDSOLO for value: CHILD_SOLO
            /// </summary>
            CHILDSOLO = 2,

            /// <summary>
            /// Enum CHILDTEAM for value: CHILD_TEAM
            /// </summary>
            CHILDTEAM = 3,

            /// <summary>
            /// Enum CHILDADMIN for value: CHILD_ADMIN
            /// </summary>
            CHILDADMIN = 4
        }

        /// <summary>
        /// Returns a <see cref="AccountTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AccountTypeEnum AccountTypeEnumFromString(string value)
        {
            if (value.Equals("SOLO"))
                return AccountTypeEnum.SOLO;

            if (value.Equals("CHILD_SOLO"))
                return AccountTypeEnum.CHILDSOLO;

            if (value.Equals("CHILD_TEAM"))
                return AccountTypeEnum.CHILDTEAM;

            if (value.Equals("CHILD_ADMIN"))
                return AccountTypeEnum.CHILDADMIN;

            throw new NotImplementedException($"Could not convert value to type AccountTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AccountTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountTypeEnum? AccountTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SOLO"))
                return AccountTypeEnum.SOLO;

            if (value.Equals("CHILD_SOLO"))
                return AccountTypeEnum.CHILDSOLO;

            if (value.Equals("CHILD_TEAM"))
                return AccountTypeEnum.CHILDTEAM;

            if (value.Equals("CHILD_ADMIN"))
                return AccountTypeEnum.CHILDADMIN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccountTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AccountTypeEnumToJsonValue(AccountTypeEnum value)
        {
            if (value == AccountTypeEnum.SOLO)
                return "SOLO";

            if (value == AccountTypeEnum.CHILDSOLO)
                return "CHILD_SOLO";

            if (value == AccountTypeEnum.CHILDTEAM)
                return "CHILD_TEAM";

            if (value == AccountTypeEnum.CHILDADMIN)
                return "CHILD_ADMIN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [JsonPropertyName("accountType")]
        public AccountTypeEnum AccountType { get; set; }

        /// <summary>
        /// Defines SubscriptionType
        /// </summary>
        public enum SubscriptionTypeEnum
        {
            /// <summary>
            /// Enum PROMONTHLY for value: PRO_MONTHLY
            /// </summary>
            PROMONTHLY = 1,

            /// <summary>
            /// Enum STARTER for value: STARTER
            /// </summary>
            STARTER = 2,

            /// <summary>
            /// Enum PRO for value: PRO
            /// </summary>
            PRO = 3,

            /// <summary>
            /// Enum TEAM for value: TEAM
            /// </summary>
            TEAM = 4,

            /// <summary>
            /// Enum ENTERPRISE for value: ENTERPRISE
            /// </summary>
            ENTERPRISE = 5
        }

        /// <summary>
        /// Returns a <see cref="SubscriptionTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SubscriptionTypeEnum SubscriptionTypeEnumFromString(string value)
        {
            if (value.Equals("PRO_MONTHLY"))
                return SubscriptionTypeEnum.PROMONTHLY;

            if (value.Equals("STARTER"))
                return SubscriptionTypeEnum.STARTER;

            if (value.Equals("PRO"))
                return SubscriptionTypeEnum.PRO;

            if (value.Equals("TEAM"))
                return SubscriptionTypeEnum.TEAM;

            if (value.Equals("ENTERPRISE"))
                return SubscriptionTypeEnum.ENTERPRISE;

            throw new NotImplementedException($"Could not convert value to type SubscriptionTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SubscriptionTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SubscriptionTypeEnum? SubscriptionTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("PRO_MONTHLY"))
                return SubscriptionTypeEnum.PROMONTHLY;

            if (value.Equals("STARTER"))
                return SubscriptionTypeEnum.STARTER;

            if (value.Equals("PRO"))
                return SubscriptionTypeEnum.PRO;

            if (value.Equals("TEAM"))
                return SubscriptionTypeEnum.TEAM;

            if (value.Equals("ENTERPRISE"))
                return SubscriptionTypeEnum.ENTERPRISE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SubscriptionTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SubscriptionTypeEnumToJsonValue(SubscriptionTypeEnum? value)
        {
            if (value == SubscriptionTypeEnum.PROMONTHLY)
                return "PRO_MONTHLY";

            if (value == SubscriptionTypeEnum.STARTER)
                return "STARTER";

            if (value == SubscriptionTypeEnum.PRO)
                return "PRO";

            if (value == SubscriptionTypeEnum.TEAM)
                return "TEAM";

            if (value == SubscriptionTypeEnum.ENTERPRISE)
                return "ENTERPRISE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SubscriptionType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SubscriptionTypeEnum?> SubscriptionTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubscriptionType
        /// </summary>
        [JsonPropertyName("subscriptionType")]
        public SubscriptionTypeEnum? SubscriptionType { get { return this.SubscriptionTypeOption; } set { this.SubscriptionTypeOption = new Option<SubscriptionTypeEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserInfoDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  AccountState: ").Append(AccountState).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  SubscriptionType: ").Append(SubscriptionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserInfoDto" />
    /// </summary>
    public class UserInfoDtoJsonConverter : JsonConverter<UserInfoDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserInfoDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserInfoDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> emailAddress = default;
            Option<UserInfoDto.AccountStateEnum?> accountState = default;
            Option<UserInfoDto.AccountTypeEnum?> accountType = default;
            Option<DateTime?> createdAt = default;
            Option<UserInfoDto.SubscriptionTypeEnum?> subscriptionType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "accountState":
                            string accountStateRawValue = utf8JsonReader.GetString();
                            if (accountStateRawValue != null)
                                accountState = new Option<UserInfoDto.AccountStateEnum?>(UserInfoDto.AccountStateEnumFromStringOrDefault(accountStateRawValue));
                            break;
                        case "accountType":
                            string accountTypeRawValue = utf8JsonReader.GetString();
                            if (accountTypeRawValue != null)
                                accountType = new Option<UserInfoDto.AccountTypeEnum?>(UserInfoDto.AccountTypeEnumFromStringOrDefault(accountTypeRawValue));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subscriptionType":
                            string subscriptionTypeRawValue = utf8JsonReader.GetString();
                            if (subscriptionTypeRawValue != null)
                                subscriptionType = new Option<UserInfoDto.SubscriptionTypeEnum?>(UserInfoDto.SubscriptionTypeEnumFromStringOrDefault(subscriptionTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UserInfoDto.", nameof(id));

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class UserInfoDto.", nameof(emailAddress));

            if (!accountState.IsSet)
                throw new ArgumentException("Property is required for class UserInfoDto.", nameof(accountState));

            if (!accountType.IsSet)
                throw new ArgumentException("Property is required for class UserInfoDto.", nameof(accountType));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class UserInfoDto.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserInfoDto.");

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class UserInfoDto.");

            if (accountState.IsSet && accountState.Value == null)
                throw new ArgumentNullException(nameof(accountState), "Property is not nullable for class UserInfoDto.");

            if (accountType.IsSet && accountType.Value == null)
                throw new ArgumentNullException(nameof(accountType), "Property is not nullable for class UserInfoDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class UserInfoDto.");

            if (subscriptionType.IsSet && subscriptionType.Value == null)
                throw new ArgumentNullException(nameof(subscriptionType), "Property is not nullable for class UserInfoDto.");

            return new UserInfoDto(id.Value.Value, emailAddress.Value, accountState.Value.Value, accountType.Value.Value, createdAt.Value.Value, subscriptionType);
        }

        /// <summary>
        /// Serializes a <see cref="UserInfoDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userInfoDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserInfoDto userInfoDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userInfoDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserInfoDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userInfoDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserInfoDto userInfoDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userInfoDto.EmailAddress == null)
                throw new ArgumentNullException(nameof(userInfoDto.EmailAddress), "Property is required for class UserInfoDto.");

            writer.WriteString("id", userInfoDto.Id);

            writer.WriteString("emailAddress", userInfoDto.EmailAddress);

            var accountStateRawValue = UserInfoDto.AccountStateEnumToJsonValue(userInfoDto.AccountState);
            writer.WriteString("accountState", accountStateRawValue);
            var accountTypeRawValue = UserInfoDto.AccountTypeEnumToJsonValue(userInfoDto.AccountType);
            writer.WriteString("accountType", accountTypeRawValue);
            writer.WriteString("createdAt", userInfoDto.CreatedAt.ToString(CreatedAtFormat));

            var subscriptionTypeRawValue = UserInfoDto.SubscriptionTypeEnumToJsonValue(userInfoDto.SubscriptionTypeOption.Value.Value);
            writer.WriteString("subscriptionType", subscriptionTypeRawValue);
        }
    }
}
