// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// NEW_CONTACT webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is received by the inbox that your webhook is attached to that contains a recipient that has not been saved as a contact.
    /// </summary>
    public partial class WebhookNewContactPayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookNewContactPayload" /> class.
        /// </summary>
        /// <param name="messageId">Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</param>
        /// <param name="webhookId">ID of webhook entity being triggered</param>
        /// <param name="eventName">Name of the event type webhook is being triggered for.</param>
        /// <param name="contactId">Contact ID</param>
        /// <param name="emailAddresses">Email addresses for contact</param>
        /// <param name="tags">Tags for contact</param>
        /// <param name="optOut">Has contact opted out of emails</param>
        /// <param name="createdAt">Date time of event creation</param>
        /// <param name="webhookName">Name of the webhook being triggered</param>
        /// <param name="groupId">Contact group ID</param>
        /// <param name="firstName">Contact first name</param>
        /// <param name="lastName">Contact last name</param>
        /// <param name="company">Contact company name</param>
        /// <param name="primaryEmailAddress">Primary email address for contact</param>
        /// <param name="metaData">metaData</param>
        [JsonConstructor]
        public WebhookNewContactPayload(string messageId, Guid webhookId, EventNameEnum eventName, Guid contactId, List<string> emailAddresses, List<string> tags, bool optOut, DateTime createdAt, Option<string> webhookName = default, Option<Guid?> groupId = default, Option<string> firstName = default, Option<string> lastName = default, Option<string> company = default, Option<string> primaryEmailAddress = default, Option<Object> metaData = default)
        {
            MessageId = messageId;
            WebhookId = webhookId;
            EventName = eventName;
            ContactId = contactId;
            EmailAddresses = emailAddresses;
            Tags = tags;
            OptOut = optOut;
            CreatedAt = createdAt;
            WebhookNameOption = webhookName;
            GroupIdOption = groupId;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            CompanyOption = company;
            PrimaryEmailAddressOption = primaryEmailAddress;
            MetaDataOption = metaData;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the event type webhook is being triggered for.
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for.</value>
        public enum EventNameEnum
        {
            /// <summary>
            /// Enum EMAILRECEIVED for value: EMAIL_RECEIVED
            /// </summary>
            EMAILRECEIVED = 1,

            /// <summary>
            /// Enum NEWEMAIL for value: NEW_EMAIL
            /// </summary>
            NEWEMAIL = 2,

            /// <summary>
            /// Enum NEWCONTACT for value: NEW_CONTACT
            /// </summary>
            NEWCONTACT = 3,

            /// <summary>
            /// Enum NEWATTACHMENT for value: NEW_ATTACHMENT
            /// </summary>
            NEWATTACHMENT = 4,

            /// <summary>
            /// Enum EMAILOPENED for value: EMAIL_OPENED
            /// </summary>
            EMAILOPENED = 5,

            /// <summary>
            /// Enum EMAILREAD for value: EMAIL_READ
            /// </summary>
            EMAILREAD = 6,

            /// <summary>
            /// Enum DELIVERYSTATUS for value: DELIVERY_STATUS
            /// </summary>
            DELIVERYSTATUS = 7,

            /// <summary>
            /// Enum BOUNCE for value: BOUNCE
            /// </summary>
            BOUNCE = 8,

            /// <summary>
            /// Enum BOUNCERECIPIENT for value: BOUNCE_RECIPIENT
            /// </summary>
            BOUNCERECIPIENT = 9,

            /// <summary>
            /// Enum NEWSMS for value: NEW_SMS
            /// </summary>
            NEWSMS = 10,

            /// <summary>
            /// Enum NEWGUESTUSER for value: NEW_GUEST_USER
            /// </summary>
            NEWGUESTUSER = 11
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventNameEnum EventNameEnumFromString(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            throw new NotImplementedException($"Could not convert value to type EventNameEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventNameEnum? EventNameEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventNameEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventNameEnumToJsonValue(EventNameEnum value)
        {
            if (value == EventNameEnum.EMAILRECEIVED)
                return "EMAIL_RECEIVED";

            if (value == EventNameEnum.NEWEMAIL)
                return "NEW_EMAIL";

            if (value == EventNameEnum.NEWCONTACT)
                return "NEW_CONTACT";

            if (value == EventNameEnum.NEWATTACHMENT)
                return "NEW_ATTACHMENT";

            if (value == EventNameEnum.EMAILOPENED)
                return "EMAIL_OPENED";

            if (value == EventNameEnum.EMAILREAD)
                return "EMAIL_READ";

            if (value == EventNameEnum.DELIVERYSTATUS)
                return "DELIVERY_STATUS";

            if (value == EventNameEnum.BOUNCE)
                return "BOUNCE";

            if (value == EventNameEnum.BOUNCERECIPIENT)
                return "BOUNCE_RECIPIENT";

            if (value == EventNameEnum.NEWSMS)
                return "NEW_SMS";

            if (value == EventNameEnum.NEWGUESTUSER)
                return "NEW_GUEST_USER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Name of the event type webhook is being triggered for.
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for.</value>
        [JsonPropertyName("eventName")]
        public EventNameEnum EventName { get; set; }

        /// <summary>
        /// Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
        /// </summary>
        /// <value>Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</value>
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// ID of webhook entity being triggered
        /// </summary>
        /// <value>ID of webhook entity being triggered</value>
        [JsonPropertyName("webhookId")]
        public Guid WebhookId { get; set; }

        /// <summary>
        /// Contact ID
        /// </summary>
        /// <value>Contact ID</value>
        [JsonPropertyName("contactId")]
        public Guid ContactId { get; set; }

        /// <summary>
        /// Email addresses for contact
        /// </summary>
        /// <value>Email addresses for contact</value>
        [JsonPropertyName("emailAddresses")]
        public List<string> EmailAddresses { get; set; }

        /// <summary>
        /// Tags for contact
        /// </summary>
        /// <value>Tags for contact</value>
        [JsonPropertyName("tags")]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Has contact opted out of emails
        /// </summary>
        /// <value>Has contact opted out of emails</value>
        [JsonPropertyName("optOut")]
        public bool OptOut { get; set; }

        /// <summary>
        /// Date time of event creation
        /// </summary>
        /// <value>Date time of event creation</value>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of WebhookName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WebhookNameOption { get; private set; }

        /// <summary>
        /// Name of the webhook being triggered
        /// </summary>
        /// <value>Name of the webhook being triggered</value>
        [JsonPropertyName("webhookName")]
        public string WebhookName { get { return this.WebhookNameOption; } set { this.WebhookNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of GroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> GroupIdOption { get; private set; }

        /// <summary>
        /// Contact group ID
        /// </summary>
        /// <value>Contact group ID</value>
        [JsonPropertyName("groupId")]
        public Guid? GroupId { get { return this.GroupIdOption; } set { this.GroupIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FirstNameOption { get; private set; }

        /// <summary>
        /// Contact first name
        /// </summary>
        /// <value>Contact first name</value>
        [JsonPropertyName("firstName")]
        public string FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastNameOption { get; private set; }

        /// <summary>
        /// Contact last name
        /// </summary>
        /// <value>Contact last name</value>
        [JsonPropertyName("lastName")]
        public string LastName { get { return this.LastNameOption; } set { this.LastNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyOption { get; private set; }

        /// <summary>
        /// Contact company name
        /// </summary>
        /// <value>Contact company name</value>
        [JsonPropertyName("company")]
        public string Company { get { return this.CompanyOption; } set { this.CompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PrimaryEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PrimaryEmailAddressOption { get; private set; }

        /// <summary>
        /// Primary email address for contact
        /// </summary>
        /// <value>Primary email address for contact</value>
        [JsonPropertyName("primaryEmailAddress")]
        public string PrimaryEmailAddress { get { return this.PrimaryEmailAddressOption; } set { this.PrimaryEmailAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MetaData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> MetaDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets MetaData
        /// </summary>
        [JsonPropertyName("metaData")]
        public Object MetaData { get { return this.MetaDataOption; } set { this.MetaDataOption = new Option<Object>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookNewContactPayload {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  OptOut: ").Append(OptOut).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  WebhookName: ").Append(WebhookName).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  PrimaryEmailAddress: ").Append(PrimaryEmailAddress).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookNewContactPayload" />
    /// </summary>
    public class WebhookNewContactPayloadJsonConverter : JsonConverter<WebhookNewContactPayload>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WebhookNewContactPayload" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookNewContactPayload Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> messageId = default;
            Option<Guid?> webhookId = default;
            Option<WebhookNewContactPayload.EventNameEnum?> eventName = default;
            Option<Guid?> contactId = default;
            Option<List<string>> emailAddresses = default;
            Option<List<string>> tags = default;
            Option<bool?> optOut = default;
            Option<DateTime?> createdAt = default;
            Option<string> webhookName = default;
            Option<Guid?> groupId = default;
            Option<string> firstName = default;
            Option<string> lastName = default;
            Option<string> company = default;
            Option<string> primaryEmailAddress = default;
            Option<Object> metaData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "messageId":
                            messageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "webhookId":
                            webhookId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "eventName":
                            string eventNameRawValue = utf8JsonReader.GetString();
                            if (eventNameRawValue != null)
                                eventName = new Option<WebhookNewContactPayload.EventNameEnum?>(WebhookNewContactPayload.EventNameEnumFromStringOrDefault(eventNameRawValue));
                            break;
                        case "contactId":
                            contactId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emailAddresses":
                            emailAddresses = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            tags = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "optOut":
                            optOut = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "webhookName":
                            webhookName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "groupId":
                            groupId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "firstName":
                            firstName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastName":
                            lastName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "company":
                            company = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "primaryEmailAddress":
                            primaryEmailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "metaData":
                            metaData = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewContactPayload.", nameof(messageId));

            if (!webhookId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewContactPayload.", nameof(webhookId));

            if (!eventName.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewContactPayload.", nameof(eventName));

            if (!contactId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewContactPayload.", nameof(contactId));

            if (!emailAddresses.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewContactPayload.", nameof(emailAddresses));

            if (!tags.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewContactPayload.", nameof(tags));

            if (!optOut.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewContactPayload.", nameof(optOut));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewContactPayload.", nameof(createdAt));

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class WebhookNewContactPayload.");

            if (webhookId.IsSet && webhookId.Value == null)
                throw new ArgumentNullException(nameof(webhookId), "Property is not nullable for class WebhookNewContactPayload.");

            if (eventName.IsSet && eventName.Value == null)
                throw new ArgumentNullException(nameof(eventName), "Property is not nullable for class WebhookNewContactPayload.");

            if (contactId.IsSet && contactId.Value == null)
                throw new ArgumentNullException(nameof(contactId), "Property is not nullable for class WebhookNewContactPayload.");

            if (emailAddresses.IsSet && emailAddresses.Value == null)
                throw new ArgumentNullException(nameof(emailAddresses), "Property is not nullable for class WebhookNewContactPayload.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class WebhookNewContactPayload.");

            if (optOut.IsSet && optOut.Value == null)
                throw new ArgumentNullException(nameof(optOut), "Property is not nullable for class WebhookNewContactPayload.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebhookNewContactPayload.");

            return new WebhookNewContactPayload(messageId.Value, webhookId.Value.Value, eventName.Value.Value, contactId.Value.Value, emailAddresses.Value, tags.Value, optOut.Value.Value, createdAt.Value.Value, webhookName, groupId, firstName, lastName, company, primaryEmailAddress, metaData);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookNewContactPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookNewContactPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookNewContactPayload webhookNewContactPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookNewContactPayload, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookNewContactPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookNewContactPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookNewContactPayload webhookNewContactPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookNewContactPayload.MessageId == null)
                throw new ArgumentNullException(nameof(webhookNewContactPayload.MessageId), "Property is required for class WebhookNewContactPayload.");

            if (webhookNewContactPayload.EmailAddresses == null)
                throw new ArgumentNullException(nameof(webhookNewContactPayload.EmailAddresses), "Property is required for class WebhookNewContactPayload.");

            if (webhookNewContactPayload.Tags == null)
                throw new ArgumentNullException(nameof(webhookNewContactPayload.Tags), "Property is required for class WebhookNewContactPayload.");

            writer.WriteString("messageId", webhookNewContactPayload.MessageId);

            writer.WriteString("webhookId", webhookNewContactPayload.WebhookId);

            var eventNameRawValue = WebhookNewContactPayload.EventNameEnumToJsonValue(webhookNewContactPayload.EventName);
            writer.WriteString("eventName", eventNameRawValue);
            writer.WriteString("contactId", webhookNewContactPayload.ContactId);

            writer.WritePropertyName("emailAddresses");
            JsonSerializer.Serialize(writer, webhookNewContactPayload.EmailAddresses, jsonSerializerOptions);
            writer.WritePropertyName("tags");
            JsonSerializer.Serialize(writer, webhookNewContactPayload.Tags, jsonSerializerOptions);
            writer.WriteBoolean("optOut", webhookNewContactPayload.OptOut);

            writer.WriteString("createdAt", webhookNewContactPayload.CreatedAt.ToString(CreatedAtFormat));

            if (webhookNewContactPayload.WebhookNameOption.IsSet)
                if (webhookNewContactPayload.WebhookNameOption.Value != null)
                    writer.WriteString("webhookName", webhookNewContactPayload.WebhookName);
                else
                    writer.WriteNull("webhookName");

            if (webhookNewContactPayload.GroupIdOption.IsSet)
                if (webhookNewContactPayload.GroupIdOption.Value != null)
                    writer.WriteString("groupId", webhookNewContactPayload.GroupIdOption.Value.Value);
                else
                    writer.WriteNull("groupId");

            if (webhookNewContactPayload.FirstNameOption.IsSet)
                if (webhookNewContactPayload.FirstNameOption.Value != null)
                    writer.WriteString("firstName", webhookNewContactPayload.FirstName);
                else
                    writer.WriteNull("firstName");

            if (webhookNewContactPayload.LastNameOption.IsSet)
                if (webhookNewContactPayload.LastNameOption.Value != null)
                    writer.WriteString("lastName", webhookNewContactPayload.LastName);
                else
                    writer.WriteNull("lastName");

            if (webhookNewContactPayload.CompanyOption.IsSet)
                if (webhookNewContactPayload.CompanyOption.Value != null)
                    writer.WriteString("company", webhookNewContactPayload.Company);
                else
                    writer.WriteNull("company");

            if (webhookNewContactPayload.PrimaryEmailAddressOption.IsSet)
                if (webhookNewContactPayload.PrimaryEmailAddressOption.Value != null)
                    writer.WriteString("primaryEmailAddress", webhookNewContactPayload.PrimaryEmailAddress);
                else
                    writer.WriteNull("primaryEmailAddress");

            if (webhookNewContactPayload.MetaDataOption.IsSet)
                if (webhookNewContactPayload.MetaDataOption.Value != null)
                {
                    writer.WritePropertyName("metaData");
                    JsonSerializer.Serialize(writer, webhookNewContactPayload.MetaData, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("metaData");
        }
    }
}
