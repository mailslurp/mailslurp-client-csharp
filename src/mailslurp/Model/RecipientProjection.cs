// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// RecipientProjection
    /// </summary>
    public partial class RecipientProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipientProjection" /> class.
        /// </summary>
        /// <param name="emailAddress">emailAddress</param>
        /// <param name="rawValue">rawValue</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public RecipientProjection(string emailAddress, string rawValue, Option<string> name = default)
        {
            EmailAddress = emailAddress;
            RawValue = rawValue;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets RawValue
        /// </summary>
        [JsonPropertyName("rawValue")]
        public string RawValue { get; set; }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipientProjection {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  RawValue: ").Append(RawValue).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecipientProjection" />
    /// </summary>
    public class RecipientProjectionJsonConverter : JsonConverter<RecipientProjection>
    {
        /// <summary>
        /// Deserializes json to <see cref="RecipientProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RecipientProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> emailAddress = default;
            Option<string> rawValue = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rawValue":
                            rawValue = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class RecipientProjection.", nameof(emailAddress));

            if (!rawValue.IsSet)
                throw new ArgumentException("Property is required for class RecipientProjection.", nameof(rawValue));

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class RecipientProjection.");

            if (rawValue.IsSet && rawValue.Value == null)
                throw new ArgumentNullException(nameof(rawValue), "Property is not nullable for class RecipientProjection.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class RecipientProjection.");

            return new RecipientProjection(emailAddress.Value, rawValue.Value, name);
        }

        /// <summary>
        /// Serializes a <see cref="RecipientProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recipientProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RecipientProjection recipientProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recipientProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RecipientProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recipientProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RecipientProjection recipientProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recipientProjection.EmailAddress == null)
                throw new ArgumentNullException(nameof(recipientProjection.EmailAddress), "Property is required for class RecipientProjection.");

            if (recipientProjection.RawValue == null)
                throw new ArgumentNullException(nameof(recipientProjection.RawValue), "Property is required for class RecipientProjection.");

            if (recipientProjection.NameOption.IsSet && recipientProjection.Name == null)
                throw new ArgumentNullException(nameof(recipientProjection.Name), "Property is required for class RecipientProjection.");

            writer.WriteString("emailAddress", recipientProjection.EmailAddress);

            writer.WriteString("rawValue", recipientProjection.RawValue);

            if (recipientProjection.NameOption.IsSet)
                writer.WriteString("name", recipientProjection.Name);
        }
    }
}
