/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// GenerateMtaStsRecordOptions
    /// </summary>
    [DataContract(Name = "GenerateMtaStsRecordOptions")]
    public partial class GenerateMtaStsRecordOptions : IValidatableObject
    {
        /// <summary>
        /// Defines VarVersion
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VarVersionEnum
        {
            /// <summary>
            /// Enum STSv1 for value: STSv1
            /// </summary>
            [EnumMember(Value = "STSv1")]
            STSv1 = 1
        }


        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public VarVersionEnum VarVersion { get; set; }
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum TESTING for value: TESTING
            /// </summary>
            [EnumMember(Value = "TESTING")]
            TESTING = 1,

            /// <summary>
            /// Enum ENFORCE for value: ENFORCE
            /// </summary>
            [EnumMember(Value = "ENFORCE")]
            ENFORCE = 2,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 3
        }


        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = true)]
        public ModeEnum Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateMtaStsRecordOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateMtaStsRecordOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateMtaStsRecordOptions" /> class.
        /// </summary>
        /// <param name="host">host (required).</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="mode">mode (required).</param>
        /// <param name="ttl">ttl (required).</param>
        /// <param name="maxAgeSeconds">maxAgeSeconds (required).</param>
        /// <param name="mxRecords">mxRecords (required).</param>
        public GenerateMtaStsRecordOptions(string host = default, VarVersionEnum varVersion = default, ModeEnum mode = default, int ttl = default, int maxAgeSeconds = default, List<string> mxRecords = default)
        {
            // to ensure "host" is required (not null)
            if (host == null)
            {
                throw new ArgumentNullException("host is a required property for GenerateMtaStsRecordOptions and cannot be null");
            }
            this.Host = host;
            this.VarVersion = varVersion;
            this.Mode = mode;
            this.Ttl = ttl;
            this.MaxAgeSeconds = maxAgeSeconds;
            // to ensure "mxRecords" is required (not null)
            if (mxRecords == null)
            {
                throw new ArgumentNullException("mxRecords is a required property for GenerateMtaStsRecordOptions and cannot be null");
            }
            this.MxRecords = mxRecords;
        }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", IsRequired = true, EmitDefaultValue = true)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        [DataMember(Name = "ttl", IsRequired = true, EmitDefaultValue = true)]
        public int Ttl { get; set; }

        /// <summary>
        /// Gets or Sets MaxAgeSeconds
        /// </summary>
        [DataMember(Name = "maxAgeSeconds", IsRequired = true, EmitDefaultValue = true)]
        public int MaxAgeSeconds { get; set; }

        /// <summary>
        /// Gets or Sets MxRecords
        /// </summary>
        [DataMember(Name = "mxRecords", IsRequired = true, EmitDefaultValue = true)]
        public List<string> MxRecords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateMtaStsRecordOptions {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  MaxAgeSeconds: ").Append(MaxAgeSeconds).Append("\n");
            sb.Append("  MxRecords: ").Append(MxRecords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
