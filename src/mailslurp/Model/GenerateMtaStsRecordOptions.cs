// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// GenerateMtaStsRecordOptions
    /// </summary>
    public partial class GenerateMtaStsRecordOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateMtaStsRecordOptions" /> class.
        /// </summary>
        /// <param name="host">host</param>
        /// <param name="varVersion">varVersion</param>
        /// <param name="mode">mode</param>
        /// <param name="ttl">ttl</param>
        /// <param name="maxAgeSeconds">maxAgeSeconds</param>
        /// <param name="mxRecords">mxRecords</param>
        [JsonConstructor]
        public GenerateMtaStsRecordOptions(string host, VarVersionEnum varVersion, ModeEnum mode, int ttl, int maxAgeSeconds, List<string> mxRecords)
        {
            Host = host;
            VarVersion = varVersion;
            Mode = mode;
            Ttl = ttl;
            MaxAgeSeconds = maxAgeSeconds;
            MxRecords = mxRecords;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines VarVersion
        /// </summary>
        public enum VarVersionEnum
        {
            /// <summary>
            /// Enum STSv1 for value: STSv1
            /// </summary>
            STSv1 = 1
        }

        /// <summary>
        /// Returns a <see cref="VarVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VarVersionEnum VarVersionEnumFromString(string value)
        {
            if (value.Equals("STSv1"))
                return VarVersionEnum.STSv1;

            throw new NotImplementedException($"Could not convert value to type VarVersionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VarVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VarVersionEnum? VarVersionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("STSv1"))
                return VarVersionEnum.STSv1;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VarVersionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VarVersionEnumToJsonValue(VarVersionEnum value)
        {
            if (value == VarVersionEnum.STSv1)
                return "STSv1";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public VarVersionEnum VarVersion { get; set; }

        /// <summary>
        /// Defines Mode
        /// </summary>
        public enum ModeEnum
        {
            /// <summary>
            /// Enum TESTING for value: TESTING
            /// </summary>
            TESTING = 1,

            /// <summary>
            /// Enum ENFORCE for value: ENFORCE
            /// </summary>
            ENFORCE = 2,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            NONE = 3
        }

        /// <summary>
        /// Returns a <see cref="ModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ModeEnum ModeEnumFromString(string value)
        {
            if (value.Equals("TESTING"))
                return ModeEnum.TESTING;

            if (value.Equals("ENFORCE"))
                return ModeEnum.ENFORCE;

            if (value.Equals("NONE"))
                return ModeEnum.NONE;

            throw new NotImplementedException($"Could not convert value to type ModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ModeEnum? ModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TESTING"))
                return ModeEnum.TESTING;

            if (value.Equals("ENFORCE"))
                return ModeEnum.ENFORCE;

            if (value.Equals("NONE"))
                return ModeEnum.NONE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ModeEnumToJsonValue(ModeEnum value)
        {
            if (value == ModeEnum.TESTING)
                return "TESTING";

            if (value == ModeEnum.ENFORCE)
                return "ENFORCE";

            if (value == ModeEnum.NONE)
                return "NONE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [JsonPropertyName("mode")]
        public ModeEnum Mode { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [JsonPropertyName("host")]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        [JsonPropertyName("ttl")]
        public int Ttl { get; set; }

        /// <summary>
        /// Gets or Sets MaxAgeSeconds
        /// </summary>
        [JsonPropertyName("maxAgeSeconds")]
        public int MaxAgeSeconds { get; set; }

        /// <summary>
        /// Gets or Sets MxRecords
        /// </summary>
        [JsonPropertyName("mxRecords")]
        public List<string> MxRecords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateMtaStsRecordOptions {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  MaxAgeSeconds: ").Append(MaxAgeSeconds).Append("\n");
            sb.Append("  MxRecords: ").Append(MxRecords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GenerateMtaStsRecordOptions" />
    /// </summary>
    public class GenerateMtaStsRecordOptionsJsonConverter : JsonConverter<GenerateMtaStsRecordOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="GenerateMtaStsRecordOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GenerateMtaStsRecordOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> host = default;
            Option<GenerateMtaStsRecordOptions.VarVersionEnum?> varVersion = default;
            Option<GenerateMtaStsRecordOptions.ModeEnum?> mode = default;
            Option<int?> ttl = default;
            Option<int?> maxAgeSeconds = default;
            Option<List<string>> mxRecords = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "host":
                            host = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "version":
                            string varVersionRawValue = utf8JsonReader.GetString();
                            if (varVersionRawValue != null)
                                varVersion = new Option<GenerateMtaStsRecordOptions.VarVersionEnum?>(GenerateMtaStsRecordOptions.VarVersionEnumFromStringOrDefault(varVersionRawValue));
                            break;
                        case "mode":
                            string modeRawValue = utf8JsonReader.GetString();
                            if (modeRawValue != null)
                                mode = new Option<GenerateMtaStsRecordOptions.ModeEnum?>(GenerateMtaStsRecordOptions.ModeEnumFromStringOrDefault(modeRawValue));
                            break;
                        case "ttl":
                            ttl = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "maxAgeSeconds":
                            maxAgeSeconds = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "mxRecords":
                            mxRecords = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!host.IsSet)
                throw new ArgumentException("Property is required for class GenerateMtaStsRecordOptions.", nameof(host));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class GenerateMtaStsRecordOptions.", nameof(varVersion));

            if (!mode.IsSet)
                throw new ArgumentException("Property is required for class GenerateMtaStsRecordOptions.", nameof(mode));

            if (!ttl.IsSet)
                throw new ArgumentException("Property is required for class GenerateMtaStsRecordOptions.", nameof(ttl));

            if (!maxAgeSeconds.IsSet)
                throw new ArgumentException("Property is required for class GenerateMtaStsRecordOptions.", nameof(maxAgeSeconds));

            if (!mxRecords.IsSet)
                throw new ArgumentException("Property is required for class GenerateMtaStsRecordOptions.", nameof(mxRecords));

            if (host.IsSet && host.Value == null)
                throw new ArgumentNullException(nameof(host), "Property is not nullable for class GenerateMtaStsRecordOptions.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class GenerateMtaStsRecordOptions.");

            if (mode.IsSet && mode.Value == null)
                throw new ArgumentNullException(nameof(mode), "Property is not nullable for class GenerateMtaStsRecordOptions.");

            if (ttl.IsSet && ttl.Value == null)
                throw new ArgumentNullException(nameof(ttl), "Property is not nullable for class GenerateMtaStsRecordOptions.");

            if (maxAgeSeconds.IsSet && maxAgeSeconds.Value == null)
                throw new ArgumentNullException(nameof(maxAgeSeconds), "Property is not nullable for class GenerateMtaStsRecordOptions.");

            if (mxRecords.IsSet && mxRecords.Value == null)
                throw new ArgumentNullException(nameof(mxRecords), "Property is not nullable for class GenerateMtaStsRecordOptions.");

            return new GenerateMtaStsRecordOptions(host.Value, varVersion.Value.Value, mode.Value.Value, ttl.Value.Value, maxAgeSeconds.Value.Value, mxRecords.Value);
        }

        /// <summary>
        /// Serializes a <see cref="GenerateMtaStsRecordOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GenerateMtaStsRecordOptions generateMtaStsRecordOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generateMtaStsRecordOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GenerateMtaStsRecordOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GenerateMtaStsRecordOptions generateMtaStsRecordOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generateMtaStsRecordOptions.Host == null)
                throw new ArgumentNullException(nameof(generateMtaStsRecordOptions.Host), "Property is required for class GenerateMtaStsRecordOptions.");

            if (generateMtaStsRecordOptions.MxRecords == null)
                throw new ArgumentNullException(nameof(generateMtaStsRecordOptions.MxRecords), "Property is required for class GenerateMtaStsRecordOptions.");

            writer.WriteString("host", generateMtaStsRecordOptions.Host);

            var varVersionRawValue = GenerateMtaStsRecordOptions.VarVersionEnumToJsonValue(generateMtaStsRecordOptions.VarVersion);
            writer.WriteString("version", varVersionRawValue);
            var modeRawValue = GenerateMtaStsRecordOptions.ModeEnumToJsonValue(generateMtaStsRecordOptions.Mode);
            writer.WriteString("mode", modeRawValue);
            writer.WriteNumber("ttl", generateMtaStsRecordOptions.Ttl);

            writer.WriteNumber("maxAgeSeconds", generateMtaStsRecordOptions.MaxAgeSeconds);

            writer.WritePropertyName("mxRecords");
            JsonSerializer.Serialize(writer, generateMtaStsRecordOptions.MxRecords, jsonSerializerOptions);
        }
    }
}
