// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// DomainInformation
    /// </summary>
    public partial class DomainInformation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainInformation" /> class.
        /// </summary>
        /// <param name="domainName">domainName</param>
        /// <param name="verified">verified</param>
        /// <param name="domainType">Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.</param>
        [JsonConstructor]
        public DomainInformation(string domainName, bool verified, DomainTypeEnum domainType)
        {
            DomainName = domainName;
            Verified = verified;
            DomainType = domainType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
        /// </summary>
        /// <value>Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.</value>
        public enum DomainTypeEnum
        {
            /// <summary>
            /// Enum HTTPINBOX for value: HTTP_INBOX
            /// </summary>
            HTTPINBOX = 1,

            /// <summary>
            /// Enum SMTPDOMAIN for value: SMTP_DOMAIN
            /// </summary>
            SMTPDOMAIN = 2
        }

        /// <summary>
        /// Returns a <see cref="DomainTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DomainTypeEnum DomainTypeEnumFromString(string value)
        {
            if (value.Equals("HTTP_INBOX"))
                return DomainTypeEnum.HTTPINBOX;

            if (value.Equals("SMTP_DOMAIN"))
                return DomainTypeEnum.SMTPDOMAIN;

            throw new NotImplementedException($"Could not convert value to type DomainTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DomainTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DomainTypeEnum? DomainTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("HTTP_INBOX"))
                return DomainTypeEnum.HTTPINBOX;

            if (value.Equals("SMTP_DOMAIN"))
                return DomainTypeEnum.SMTPDOMAIN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DomainTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DomainTypeEnumToJsonValue(DomainTypeEnum value)
        {
            if (value == DomainTypeEnum.HTTPINBOX)
                return "HTTP_INBOX";

            if (value == DomainTypeEnum.SMTPDOMAIN)
                return "SMTP_DOMAIN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
        /// </summary>
        /// <value>Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.</value>
        [JsonPropertyName("domainType")]
        public DomainTypeEnum DomainType { get; set; }

        /// <summary>
        /// Gets or Sets DomainName
        /// </summary>
        [JsonPropertyName("domainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [JsonPropertyName("verified")]
        public bool Verified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainInformation {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  DomainType: ").Append(DomainType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainInformation" />
    /// </summary>
    public class DomainInformationJsonConverter : JsonConverter<DomainInformation>
    {
        /// <summary>
        /// Deserializes json to <see cref="DomainInformation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DomainInformation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> domainName = default;
            Option<bool?> verified = default;
            Option<DomainInformation.DomainTypeEnum?> domainType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domainName":
                            domainName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "verified":
                            verified = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "domainType":
                            string domainTypeRawValue = utf8JsonReader.GetString();
                            if (domainTypeRawValue != null)
                                domainType = new Option<DomainInformation.DomainTypeEnum?>(DomainInformation.DomainTypeEnumFromStringOrDefault(domainTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!domainName.IsSet)
                throw new ArgumentException("Property is required for class DomainInformation.", nameof(domainName));

            if (!verified.IsSet)
                throw new ArgumentException("Property is required for class DomainInformation.", nameof(verified));

            if (!domainType.IsSet)
                throw new ArgumentException("Property is required for class DomainInformation.", nameof(domainType));

            if (domainName.IsSet && domainName.Value == null)
                throw new ArgumentNullException(nameof(domainName), "Property is not nullable for class DomainInformation.");

            if (verified.IsSet && verified.Value == null)
                throw new ArgumentNullException(nameof(verified), "Property is not nullable for class DomainInformation.");

            if (domainType.IsSet && domainType.Value == null)
                throw new ArgumentNullException(nameof(domainType), "Property is not nullable for class DomainInformation.");

            return new DomainInformation(domainName.Value, verified.Value.Value, domainType.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="DomainInformation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainInformation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DomainInformation domainInformation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, domainInformation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DomainInformation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainInformation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DomainInformation domainInformation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (domainInformation.DomainName == null)
                throw new ArgumentNullException(nameof(domainInformation.DomainName), "Property is required for class DomainInformation.");

            writer.WriteString("domainName", domainInformation.DomainName);

            writer.WriteBoolean("verified", domainInformation.Verified);

            var domainTypeRawValue = DomainInformation.DomainTypeEnumToJsonValue(domainInformation.DomainType);
            writer.WriteString("domainType", domainTypeRawValue);
        }
    }
}
