// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EmailThreadDto
    /// </summary>
    public partial class EmailThreadDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailThreadDto" /> class.
        /// </summary>
        /// <param name="id">ID of email thread</param>
        /// <param name="userId">User ID</param>
        /// <param name="to">To recipients</param>
        /// <param name="createdAt">Created at DateTime</param>
        /// <param name="updatedAt">Updated at DateTime</param>
        /// <param name="inboxId">Inbox ID</param>
        /// <param name="from">From sender</param>
        /// <param name="cc">CC recipients</param>
        /// <param name="bcc">BCC recipients</param>
        /// <param name="sender">sender</param>
        /// <param name="recipients">recipients</param>
        /// <param name="subject">Thread topic subject</param>
        [JsonConstructor]
        public EmailThreadDto(Guid id, Guid userId, List<string> to, DateTime createdAt, DateTime updatedAt, Option<Guid?> inboxId = default, Option<string> from = default, Option<List<string>> cc = default, Option<List<string>> bcc = default, Option<Sender> sender = default, Option<EmailRecipients> recipients = default, Option<string> subject = default)
        {
            Id = id;
            UserId = userId;
            To = to;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            InboxIdOption = inboxId;
            FromOption = from;
            CcOption = cc;
            BccOption = bcc;
            SenderOption = sender;
            RecipientsOption = recipients;
            SubjectOption = subject;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of email thread
        /// </summary>
        /// <value>ID of email thread</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// To recipients
        /// </summary>
        /// <value>To recipients</value>
        [JsonPropertyName("to")]
        public List<string> To { get; set; }

        /// <summary>
        /// Created at DateTime
        /// </summary>
        /// <value>Created at DateTime</value>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Updated at DateTime
        /// </summary>
        /// <value>Updated at DateTime</value>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Inbox ID
        /// </summary>
        /// <value>Inbox ID</value>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// From sender
        /// </summary>
        /// <value>From sender</value>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CcOption { get; private set; }

        /// <summary>
        /// CC recipients
        /// </summary>
        /// <value>CC recipients</value>
        [JsonPropertyName("cc")]
        public List<string> Cc { get { return this.CcOption; } set { this.CcOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BccOption { get; private set; }

        /// <summary>
        /// BCC recipients
        /// </summary>
        /// <value>BCC recipients</value>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get { return this.BccOption; } set { this.BccOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Sender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Sender> SenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public Sender Sender { get { return this.SenderOption; } set { this.SenderOption = new Option<Sender>(value); } }

        /// <summary>
        /// Used to track the state of Recipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailRecipients> RecipientsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [JsonPropertyName("recipients")]
        public EmailRecipients Recipients { get { return this.RecipientsOption; } set { this.RecipientsOption = new Option<EmailRecipients>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Thread topic subject
        /// </summary>
        /// <value>Thread topic subject</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailThreadDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailThreadDto" />
    /// </summary>
    public class EmailThreadDtoJsonConverter : JsonConverter<EmailThreadDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EmailThreadDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailThreadDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<List<string>> to = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<Guid?> inboxId = default;
            Option<string> from = default;
            Option<List<string>> cc = default;
            Option<List<string>> bcc = default;
            Option<Sender> sender = default;
            Option<EmailRecipients> recipients = default;
            Option<string> subject = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sender":
                            sender = new Option<Sender>(JsonSerializer.Deserialize<Sender>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recipients":
                            recipients = new Option<EmailRecipients>(JsonSerializer.Deserialize<EmailRecipients>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadDto.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadDto.", nameof(userId));

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadDto.", nameof(to));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadDto.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadDto.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EmailThreadDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class EmailThreadDto.");

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class EmailThreadDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class EmailThreadDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class EmailThreadDto.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class EmailThreadDto.");

            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from), "Property is not nullable for class EmailThreadDto.");

            if (cc.IsSet && cc.Value == null)
                throw new ArgumentNullException(nameof(cc), "Property is not nullable for class EmailThreadDto.");

            if (bcc.IsSet && bcc.Value == null)
                throw new ArgumentNullException(nameof(bcc), "Property is not nullable for class EmailThreadDto.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class EmailThreadDto.");

            return new EmailThreadDto(id.Value.Value, userId.Value.Value, to.Value, createdAt.Value.Value, updatedAt.Value.Value, inboxId, from, cc, bcc, sender, recipients, subject);
        }

        /// <summary>
        /// Serializes a <see cref="EmailThreadDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailThreadDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailThreadDto emailThreadDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailThreadDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailThreadDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailThreadDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailThreadDto emailThreadDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailThreadDto.To == null)
                throw new ArgumentNullException(nameof(emailThreadDto.To), "Property is required for class EmailThreadDto.");

            if (emailThreadDto.FromOption.IsSet && emailThreadDto.From == null)
                throw new ArgumentNullException(nameof(emailThreadDto.From), "Property is required for class EmailThreadDto.");

            if (emailThreadDto.CcOption.IsSet && emailThreadDto.Cc == null)
                throw new ArgumentNullException(nameof(emailThreadDto.Cc), "Property is required for class EmailThreadDto.");

            if (emailThreadDto.BccOption.IsSet && emailThreadDto.Bcc == null)
                throw new ArgumentNullException(nameof(emailThreadDto.Bcc), "Property is required for class EmailThreadDto.");

            if (emailThreadDto.SubjectOption.IsSet && emailThreadDto.Subject == null)
                throw new ArgumentNullException(nameof(emailThreadDto.Subject), "Property is required for class EmailThreadDto.");

            writer.WriteString("id", emailThreadDto.Id);

            writer.WriteString("userId", emailThreadDto.UserId);

            writer.WritePropertyName("to");
            JsonSerializer.Serialize(writer, emailThreadDto.To, jsonSerializerOptions);
            writer.WriteString("createdAt", emailThreadDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", emailThreadDto.UpdatedAt.ToString(UpdatedAtFormat));

            if (emailThreadDto.InboxIdOption.IsSet)
                writer.WriteString("inboxId", emailThreadDto.InboxIdOption.Value.Value);

            if (emailThreadDto.FromOption.IsSet)
                writer.WriteString("from", emailThreadDto.From);

            if (emailThreadDto.CcOption.IsSet)
            {
                writer.WritePropertyName("cc");
                JsonSerializer.Serialize(writer, emailThreadDto.Cc, jsonSerializerOptions);
            }
            if (emailThreadDto.BccOption.IsSet)
            {
                writer.WritePropertyName("bcc");
                JsonSerializer.Serialize(writer, emailThreadDto.Bcc, jsonSerializerOptions);
            }
            if (emailThreadDto.SenderOption.IsSet)
                if (emailThreadDto.SenderOption.Value != null)
                {
                    writer.WritePropertyName("sender");
                    JsonSerializer.Serialize(writer, emailThreadDto.Sender, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sender");
            if (emailThreadDto.RecipientsOption.IsSet)
                if (emailThreadDto.RecipientsOption.Value != null)
                {
                    writer.WritePropertyName("recipients");
                    JsonSerializer.Serialize(writer, emailThreadDto.Recipients, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("recipients");
            if (emailThreadDto.SubjectOption.IsSet)
                writer.WriteString("subject", emailThreadDto.Subject);
        }
    }
}
