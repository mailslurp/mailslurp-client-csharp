// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// GenerateBimiRecordOptions
    /// </summary>
    public partial class GenerateBimiRecordOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateBimiRecordOptions" /> class.
        /// </summary>
        /// <param name="domain">domain</param>
        /// <param name="varVersion">varVersion</param>
        /// <param name="logoUrl">logoUrl</param>
        /// <param name="vmcUrl">vmcUrl</param>
        [JsonConstructor]
        public GenerateBimiRecordOptions(string domain, VarVersionEnum varVersion, string logoUrl, Option<string> vmcUrl = default)
        {
            Domain = domain;
            VarVersion = varVersion;
            LogoUrl = logoUrl;
            VmcUrlOption = vmcUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines VarVersion
        /// </summary>
        public enum VarVersionEnum
        {
            /// <summary>
            /// Enum BIMI1 for value: BIMI1
            /// </summary>
            BIMI1 = 1
        }

        /// <summary>
        /// Returns a <see cref="VarVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VarVersionEnum VarVersionEnumFromString(string value)
        {
            if (value.Equals("BIMI1"))
                return VarVersionEnum.BIMI1;

            throw new NotImplementedException($"Could not convert value to type VarVersionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VarVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VarVersionEnum? VarVersionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("BIMI1"))
                return VarVersionEnum.BIMI1;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VarVersionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VarVersionEnumToJsonValue(VarVersionEnum value)
        {
            if (value == VarVersionEnum.BIMI1)
                return "BIMI1";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public VarVersionEnum VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [JsonPropertyName("domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [JsonPropertyName("logoUrl")]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Used to track the state of VmcUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VmcUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets VmcUrl
        /// </summary>
        [JsonPropertyName("vmcUrl")]
        public string VmcUrl { get { return this.VmcUrlOption; } set { this.VmcUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateBimiRecordOptions {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  VmcUrl: ").Append(VmcUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GenerateBimiRecordOptions" />
    /// </summary>
    public class GenerateBimiRecordOptionsJsonConverter : JsonConverter<GenerateBimiRecordOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="GenerateBimiRecordOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GenerateBimiRecordOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> domain = default;
            Option<GenerateBimiRecordOptions.VarVersionEnum?> varVersion = default;
            Option<string> logoUrl = default;
            Option<string> vmcUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domain":
                            domain = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "version":
                            string varVersionRawValue = utf8JsonReader.GetString();
                            if (varVersionRawValue != null)
                                varVersion = new Option<GenerateBimiRecordOptions.VarVersionEnum?>(GenerateBimiRecordOptions.VarVersionEnumFromStringOrDefault(varVersionRawValue));
                            break;
                        case "logoUrl":
                            logoUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vmcUrl":
                            vmcUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!domain.IsSet)
                throw new ArgumentException("Property is required for class GenerateBimiRecordOptions.", nameof(domain));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class GenerateBimiRecordOptions.", nameof(varVersion));

            if (!logoUrl.IsSet)
                throw new ArgumentException("Property is required for class GenerateBimiRecordOptions.", nameof(logoUrl));

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class GenerateBimiRecordOptions.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class GenerateBimiRecordOptions.");

            if (logoUrl.IsSet && logoUrl.Value == null)
                throw new ArgumentNullException(nameof(logoUrl), "Property is not nullable for class GenerateBimiRecordOptions.");

            if (vmcUrl.IsSet && vmcUrl.Value == null)
                throw new ArgumentNullException(nameof(vmcUrl), "Property is not nullable for class GenerateBimiRecordOptions.");

            return new GenerateBimiRecordOptions(domain.Value, varVersion.Value.Value, logoUrl.Value, vmcUrl);
        }

        /// <summary>
        /// Serializes a <see cref="GenerateBimiRecordOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GenerateBimiRecordOptions generateBimiRecordOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generateBimiRecordOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GenerateBimiRecordOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GenerateBimiRecordOptions generateBimiRecordOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generateBimiRecordOptions.Domain == null)
                throw new ArgumentNullException(nameof(generateBimiRecordOptions.Domain), "Property is required for class GenerateBimiRecordOptions.");

            if (generateBimiRecordOptions.LogoUrl == null)
                throw new ArgumentNullException(nameof(generateBimiRecordOptions.LogoUrl), "Property is required for class GenerateBimiRecordOptions.");

            if (generateBimiRecordOptions.VmcUrlOption.IsSet && generateBimiRecordOptions.VmcUrl == null)
                throw new ArgumentNullException(nameof(generateBimiRecordOptions.VmcUrl), "Property is required for class GenerateBimiRecordOptions.");

            writer.WriteString("domain", generateBimiRecordOptions.Domain);

            var varVersionRawValue = GenerateBimiRecordOptions.VarVersionEnumToJsonValue(generateBimiRecordOptions.VarVersion);
            writer.WriteString("version", varVersionRawValue);
            writer.WriteString("logoUrl", generateBimiRecordOptions.LogoUrl);

            if (generateBimiRecordOptions.VmcUrlOption.IsSet)
                writer.WriteString("vmcUrl", generateBimiRecordOptions.VmcUrl);
        }
    }
}
