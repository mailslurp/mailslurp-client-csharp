/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// GuestPortalUserCreateDto
    /// </summary>
    [DataContract(Name = "GuestPortalUserCreateDto")]
    public partial class GuestPortalUserCreateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GuestPortalUserCreateDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GuestPortalUserCreateDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GuestPortalUserCreateDto" /> class.
        /// </summary>
        /// <param name="guest">guest (required).</param>
        /// <param name="password">password (required).</param>
        public GuestPortalUserCreateDto(GuestPortalUserDto guest = default, string password = default)
        {
            // to ensure "guest" is required (not null)
            if (guest == null)
            {
                throw new ArgumentNullException("guest is a required property for GuestPortalUserCreateDto and cannot be null");
            }
            this.Guest = guest;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for GuestPortalUserCreateDto and cannot be null");
            }
            this.Password = password;
        }

        /// <summary>
        /// Gets or Sets Guest
        /// </summary>
        [DataMember(Name = "guest", IsRequired = true, EmitDefaultValue = true)]
        public GuestPortalUserDto Guest { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GuestPortalUserCreateDto {\n");
            sb.Append("  Guest: ").Append(Guest).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
