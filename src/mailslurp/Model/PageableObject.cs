// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// PageableObject
    /// </summary>
    public partial class PageableObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageableObject" /> class.
        /// </summary>
        /// <param name="pageSize">pageSize</param>
        /// <param name="paged">paged</param>
        /// <param name="pageNumber">pageNumber</param>
        /// <param name="unpaged">unpaged</param>
        /// <param name="offset">offset</param>
        /// <param name="sort">sort</param>
        [JsonConstructor]
        public PageableObject(Option<int?> pageSize = default, Option<bool?> paged = default, Option<int?> pageNumber = default, Option<bool?> unpaged = default, Option<long?> offset = default, Option<SortObject> sort = default)
        {
            PageSizeOption = pageSize;
            PagedOption = paged;
            PageNumberOption = pageNumber;
            UnpagedOption = unpaged;
            OffsetOption = offset;
            SortOption = sort;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PageSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageSizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [JsonPropertyName("pageSize")]
        public int? PageSize { get { return this.PageSizeOption; } set { this.PageSizeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Paged
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PagedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Paged
        /// </summary>
        [JsonPropertyName("paged")]
        public bool? Paged { get { return this.PagedOption; } set { this.PagedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of PageNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets PageNumber
        /// </summary>
        [JsonPropertyName("pageNumber")]
        public int? PageNumber { get { return this.PageNumberOption; } set { this.PageNumberOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Unpaged
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UnpagedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Unpaged
        /// </summary>
        [JsonPropertyName("unpaged")]
        public bool? Unpaged { get { return this.UnpagedOption; } set { this.UnpagedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Offset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OffsetOption { get; private set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [JsonPropertyName("offset")]
        public long? Offset { get { return this.OffsetOption; } set { this.OffsetOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Sort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SortObject> SortOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [JsonPropertyName("sort")]
        public SortObject Sort { get { return this.SortOption; } set { this.SortOption = new Option<SortObject>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageableObject {\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  Paged: ").Append(Paged).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  Unpaged: ").Append(Unpaged).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PageableObject" />
    /// </summary>
    public class PageableObjectJsonConverter : JsonConverter<PageableObject>
    {
        /// <summary>
        /// Deserializes json to <see cref="PageableObject" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PageableObject Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> pageSize = default;
            Option<bool?> paged = default;
            Option<int?> pageNumber = default;
            Option<bool?> unpaged = default;
            Option<long?> offset = default;
            Option<SortObject> sort = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "pageSize":
                            pageSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "paged":
                            paged = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "pageNumber":
                            pageNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "unpaged":
                            unpaged = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "offset":
                            offset = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "sort":
                            sort = new Option<SortObject>(JsonSerializer.Deserialize<SortObject>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (pageSize.IsSet && pageSize.Value == null)
                throw new ArgumentNullException(nameof(pageSize), "Property is not nullable for class PageableObject.");

            if (paged.IsSet && paged.Value == null)
                throw new ArgumentNullException(nameof(paged), "Property is not nullable for class PageableObject.");

            if (pageNumber.IsSet && pageNumber.Value == null)
                throw new ArgumentNullException(nameof(pageNumber), "Property is not nullable for class PageableObject.");

            if (unpaged.IsSet && unpaged.Value == null)
                throw new ArgumentNullException(nameof(unpaged), "Property is not nullable for class PageableObject.");

            if (offset.IsSet && offset.Value == null)
                throw new ArgumentNullException(nameof(offset), "Property is not nullable for class PageableObject.");

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort), "Property is not nullable for class PageableObject.");

            return new PageableObject(pageSize, paged, pageNumber, unpaged, offset, sort);
        }

        /// <summary>
        /// Serializes a <see cref="PageableObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageableObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PageableObject pageableObject, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pageableObject, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PageableObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageableObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PageableObject pageableObject, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pageableObject.SortOption.IsSet && pageableObject.Sort == null)
                throw new ArgumentNullException(nameof(pageableObject.Sort), "Property is required for class PageableObject.");

            if (pageableObject.PageSizeOption.IsSet)
                writer.WriteNumber("pageSize", pageableObject.PageSizeOption.Value.Value);

            if (pageableObject.PagedOption.IsSet)
                writer.WriteBoolean("paged", pageableObject.PagedOption.Value.Value);

            if (pageableObject.PageNumberOption.IsSet)
                writer.WriteNumber("pageNumber", pageableObject.PageNumberOption.Value.Value);

            if (pageableObject.UnpagedOption.IsSet)
                writer.WriteBoolean("unpaged", pageableObject.UnpagedOption.Value.Value);

            if (pageableObject.OffsetOption.IsSet)
                writer.WriteNumber("offset", pageableObject.OffsetOption.Value.Value);

            if (pageableObject.SortOption.IsSet)
            {
                writer.WritePropertyName("sort");
                JsonSerializer.Serialize(writer, pageableObject.Sort, jsonSerializerOptions);
            }
        }
    }
}
