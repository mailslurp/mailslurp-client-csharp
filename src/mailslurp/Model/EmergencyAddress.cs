// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EmergencyAddress
    /// </summary>
    public partial class EmergencyAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmergencyAddress" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="sid">sid</param>
        /// <param name="userId">userId</param>
        /// <param name="displayName">displayName</param>
        /// <param name="customerName">customerName</param>
        /// <param name="address1">address1</param>
        /// <param name="city">city</param>
        /// <param name="region">region</param>
        /// <param name="postalCode">postalCode</param>
        /// <param name="phoneCountry">phoneCountry</param>
        /// <param name="accountSid">accountSid</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public EmergencyAddress(Guid id, string sid, Guid userId, string displayName, string customerName, string address1, string city, string region, string postalCode, PhoneCountryEnum phoneCountry, string accountSid, DateTime createdAt, DateTime updatedAt)
        {
            Id = id;
            Sid = sid;
            UserId = userId;
            DisplayName = displayName;
            CustomerName = customerName;
            Address1 = address1;
            City = city;
            Region = region;
            PostalCode = postalCode;
            PhoneCountry = phoneCountry;
            AccountSid = accountSid;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines PhoneCountry
        /// </summary>
        public enum PhoneCountryEnum
        {
            /// <summary>
            /// Enum US for value: US
            /// </summary>
            US = 1,

            /// <summary>
            /// Enum GB for value: GB
            /// </summary>
            GB = 2,

            /// <summary>
            /// Enum AU for value: AU
            /// </summary>
            AU = 3,

            /// <summary>
            /// Enum CA for value: CA
            /// </summary>
            CA = 4,

            /// <summary>
            /// Enum EE for value: EE
            /// </summary>
            EE = 5,

            /// <summary>
            /// Enum HK for value: HK
            /// </summary>
            HK = 6,

            /// <summary>
            /// Enum PL for value: PL
            /// </summary>
            PL = 7,

            /// <summary>
            /// Enum CH for value: CH
            /// </summary>
            CH = 8,

            /// <summary>
            /// Enum PT for value: PT
            /// </summary>
            PT = 9,

            /// <summary>
            /// Enum NL for value: NL
            /// </summary>
            NL = 10,

            /// <summary>
            /// Enum IL for value: IL
            /// </summary>
            IL = 11,

            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            SE = 12
        }

        /// <summary>
        /// Returns a <see cref="PhoneCountryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PhoneCountryEnum PhoneCountryEnumFromString(string value)
        {
            if (value.Equals("US"))
                return PhoneCountryEnum.US;

            if (value.Equals("GB"))
                return PhoneCountryEnum.GB;

            if (value.Equals("AU"))
                return PhoneCountryEnum.AU;

            if (value.Equals("CA"))
                return PhoneCountryEnum.CA;

            if (value.Equals("EE"))
                return PhoneCountryEnum.EE;

            if (value.Equals("HK"))
                return PhoneCountryEnum.HK;

            if (value.Equals("PL"))
                return PhoneCountryEnum.PL;

            if (value.Equals("CH"))
                return PhoneCountryEnum.CH;

            if (value.Equals("PT"))
                return PhoneCountryEnum.PT;

            if (value.Equals("NL"))
                return PhoneCountryEnum.NL;

            if (value.Equals("IL"))
                return PhoneCountryEnum.IL;

            if (value.Equals("SE"))
                return PhoneCountryEnum.SE;

            throw new NotImplementedException($"Could not convert value to type PhoneCountryEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PhoneCountryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PhoneCountryEnum? PhoneCountryEnumFromStringOrDefault(string value)
        {
            if (value.Equals("US"))
                return PhoneCountryEnum.US;

            if (value.Equals("GB"))
                return PhoneCountryEnum.GB;

            if (value.Equals("AU"))
                return PhoneCountryEnum.AU;

            if (value.Equals("CA"))
                return PhoneCountryEnum.CA;

            if (value.Equals("EE"))
                return PhoneCountryEnum.EE;

            if (value.Equals("HK"))
                return PhoneCountryEnum.HK;

            if (value.Equals("PL"))
                return PhoneCountryEnum.PL;

            if (value.Equals("CH"))
                return PhoneCountryEnum.CH;

            if (value.Equals("PT"))
                return PhoneCountryEnum.PT;

            if (value.Equals("NL"))
                return PhoneCountryEnum.NL;

            if (value.Equals("IL"))
                return PhoneCountryEnum.IL;

            if (value.Equals("SE"))
                return PhoneCountryEnum.SE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PhoneCountryEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PhoneCountryEnumToJsonValue(PhoneCountryEnum value)
        {
            if (value == PhoneCountryEnum.US)
                return "US";

            if (value == PhoneCountryEnum.GB)
                return "GB";

            if (value == PhoneCountryEnum.AU)
                return "AU";

            if (value == PhoneCountryEnum.CA)
                return "CA";

            if (value == PhoneCountryEnum.EE)
                return "EE";

            if (value == PhoneCountryEnum.HK)
                return "HK";

            if (value == PhoneCountryEnum.PL)
                return "PL";

            if (value == PhoneCountryEnum.CH)
                return "CH";

            if (value == PhoneCountryEnum.PT)
                return "PT";

            if (value == PhoneCountryEnum.NL)
                return "NL";

            if (value == PhoneCountryEnum.IL)
                return "IL";

            if (value == PhoneCountryEnum.SE)
                return "SE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets PhoneCountry
        /// </summary>
        [JsonPropertyName("phoneCountry")]
        public PhoneCountryEnum PhoneCountry { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Sid
        /// </summary>
        [JsonPropertyName("sid")]
        public string Sid { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [JsonPropertyName("customerName")]
        public string CustomerName { get; set; }

        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [JsonPropertyName("address1")]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [JsonPropertyName("region")]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountSid
        /// </summary>
        [JsonPropertyName("accountSid")]
        public string AccountSid { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmergencyAddress {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  PhoneCountry: ").Append(PhoneCountry).Append("\n");
            sb.Append("  AccountSid: ").Append(AccountSid).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmergencyAddress" />
    /// </summary>
    public class EmergencyAddressJsonConverter : JsonConverter<EmergencyAddress>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EmergencyAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmergencyAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> sid = default;
            Option<Guid?> userId = default;
            Option<string> displayName = default;
            Option<string> customerName = default;
            Option<string> address1 = default;
            Option<string> city = default;
            Option<string> region = default;
            Option<string> postalCode = default;
            Option<EmergencyAddress.PhoneCountryEnum?> phoneCountry = default;
            Option<string> accountSid = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sid":
                            sid = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "displayName":
                            displayName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "customerName":
                            customerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address1":
                            address1 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "city":
                            city = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "region":
                            region = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "postalCode":
                            postalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneCountry":
                            string phoneCountryRawValue = utf8JsonReader.GetString();
                            if (phoneCountryRawValue != null)
                                phoneCountry = new Option<EmergencyAddress.PhoneCountryEnum?>(EmergencyAddress.PhoneCountryEnumFromStringOrDefault(phoneCountryRawValue));
                            break;
                        case "accountSid":
                            accountSid = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(id));

            if (!sid.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(sid));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(userId));

            if (!displayName.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(displayName));

            if (!customerName.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(customerName));

            if (!address1.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(address1));

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(city));

            if (!region.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(region));

            if (!postalCode.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(postalCode));

            if (!phoneCountry.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(phoneCountry));

            if (!accountSid.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(accountSid));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class EmergencyAddress.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EmergencyAddress.");

            if (sid.IsSet && sid.Value == null)
                throw new ArgumentNullException(nameof(sid), "Property is not nullable for class EmergencyAddress.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class EmergencyAddress.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class EmergencyAddress.");

            if (customerName.IsSet && customerName.Value == null)
                throw new ArgumentNullException(nameof(customerName), "Property is not nullable for class EmergencyAddress.");

            if (address1.IsSet && address1.Value == null)
                throw new ArgumentNullException(nameof(address1), "Property is not nullable for class EmergencyAddress.");

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city), "Property is not nullable for class EmergencyAddress.");

            if (region.IsSet && region.Value == null)
                throw new ArgumentNullException(nameof(region), "Property is not nullable for class EmergencyAddress.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class EmergencyAddress.");

            if (phoneCountry.IsSet && phoneCountry.Value == null)
                throw new ArgumentNullException(nameof(phoneCountry), "Property is not nullable for class EmergencyAddress.");

            if (accountSid.IsSet && accountSid.Value == null)
                throw new ArgumentNullException(nameof(accountSid), "Property is not nullable for class EmergencyAddress.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class EmergencyAddress.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class EmergencyAddress.");

            return new EmergencyAddress(id.Value.Value, sid.Value, userId.Value.Value, displayName.Value, customerName.Value, address1.Value, city.Value, region.Value, postalCode.Value, phoneCountry.Value.Value, accountSid.Value, createdAt.Value.Value, updatedAt.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="EmergencyAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emergencyAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmergencyAddress emergencyAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emergencyAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmergencyAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emergencyAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmergencyAddress emergencyAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emergencyAddress.Sid == null)
                throw new ArgumentNullException(nameof(emergencyAddress.Sid), "Property is required for class EmergencyAddress.");

            if (emergencyAddress.DisplayName == null)
                throw new ArgumentNullException(nameof(emergencyAddress.DisplayName), "Property is required for class EmergencyAddress.");

            if (emergencyAddress.CustomerName == null)
                throw new ArgumentNullException(nameof(emergencyAddress.CustomerName), "Property is required for class EmergencyAddress.");

            if (emergencyAddress.Address1 == null)
                throw new ArgumentNullException(nameof(emergencyAddress.Address1), "Property is required for class EmergencyAddress.");

            if (emergencyAddress.City == null)
                throw new ArgumentNullException(nameof(emergencyAddress.City), "Property is required for class EmergencyAddress.");

            if (emergencyAddress.Region == null)
                throw new ArgumentNullException(nameof(emergencyAddress.Region), "Property is required for class EmergencyAddress.");

            if (emergencyAddress.PostalCode == null)
                throw new ArgumentNullException(nameof(emergencyAddress.PostalCode), "Property is required for class EmergencyAddress.");

            if (emergencyAddress.AccountSid == null)
                throw new ArgumentNullException(nameof(emergencyAddress.AccountSid), "Property is required for class EmergencyAddress.");

            writer.WriteString("id", emergencyAddress.Id);

            writer.WriteString("sid", emergencyAddress.Sid);

            writer.WriteString("userId", emergencyAddress.UserId);

            writer.WriteString("displayName", emergencyAddress.DisplayName);

            writer.WriteString("customerName", emergencyAddress.CustomerName);

            writer.WriteString("address1", emergencyAddress.Address1);

            writer.WriteString("city", emergencyAddress.City);

            writer.WriteString("region", emergencyAddress.Region);

            writer.WriteString("postalCode", emergencyAddress.PostalCode);

            var phoneCountryRawValue = EmergencyAddress.PhoneCountryEnumToJsonValue(emergencyAddress.PhoneCountry);
            writer.WriteString("phoneCountry", phoneCountryRawValue);
            writer.WriteString("accountSid", emergencyAddress.AccountSid);

            writer.WriteString("createdAt", emergencyAddress.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", emergencyAddress.UpdatedAt.ToString(UpdatedAtFormat));
        }
    }
}
