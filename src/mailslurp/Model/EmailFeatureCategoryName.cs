// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EmailFeatureCategoryName
    /// </summary>
    public partial class EmailFeatureCategoryName : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailFeatureCategoryName" /> class.
        /// </summary>
        /// <param name="slug">slug</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public EmailFeatureCategoryName(SlugEnum slug, string name)
        {
            Slug = slug;
            Name = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Slug
        /// </summary>
        public enum SlugEnum
        {
            /// <summary>
            /// Enum Css for value: css
            /// </summary>
            Css = 1,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            Html = 2,

            /// <summary>
            /// Enum Image for value: image
            /// </summary>
            Image = 3,

            /// <summary>
            /// Enum Others for value: others
            /// </summary>
            Others = 4
        }

        /// <summary>
        /// Returns a <see cref="SlugEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SlugEnum SlugEnumFromString(string value)
        {
            if (value.Equals("css"))
                return SlugEnum.Css;

            if (value.Equals("html"))
                return SlugEnum.Html;

            if (value.Equals("image"))
                return SlugEnum.Image;

            if (value.Equals("others"))
                return SlugEnum.Others;

            throw new NotImplementedException($"Could not convert value to type SlugEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SlugEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SlugEnum? SlugEnumFromStringOrDefault(string value)
        {
            if (value.Equals("css"))
                return SlugEnum.Css;

            if (value.Equals("html"))
                return SlugEnum.Html;

            if (value.Equals("image"))
                return SlugEnum.Image;

            if (value.Equals("others"))
                return SlugEnum.Others;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SlugEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SlugEnumToJsonValue(SlugEnum value)
        {
            if (value == SlugEnum.Css)
                return "css";

            if (value == SlugEnum.Html)
                return "html";

            if (value == SlugEnum.Image)
                return "image";

            if (value == SlugEnum.Others)
                return "others";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public SlugEnum Slug { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailFeatureCategoryName {\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailFeatureCategoryName" />
    /// </summary>
    public class EmailFeatureCategoryNameJsonConverter : JsonConverter<EmailFeatureCategoryName>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailFeatureCategoryName" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailFeatureCategoryName Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EmailFeatureCategoryName.SlugEnum?> slug = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "slug":
                            string slugRawValue = utf8JsonReader.GetString();
                            if (slugRawValue != null)
                                slug = new Option<EmailFeatureCategoryName.SlugEnum?>(EmailFeatureCategoryName.SlugEnumFromStringOrDefault(slugRawValue));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!slug.IsSet)
                throw new ArgumentException("Property is required for class EmailFeatureCategoryName.", nameof(slug));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class EmailFeatureCategoryName.", nameof(name));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class EmailFeatureCategoryName.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class EmailFeatureCategoryName.");

            return new EmailFeatureCategoryName(slug.Value.Value, name.Value);
        }

        /// <summary>
        /// Serializes a <see cref="EmailFeatureCategoryName" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailFeatureCategoryName"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailFeatureCategoryName emailFeatureCategoryName, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailFeatureCategoryName, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailFeatureCategoryName" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailFeatureCategoryName"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailFeatureCategoryName emailFeatureCategoryName, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailFeatureCategoryName.Name == null)
                throw new ArgumentNullException(nameof(emailFeatureCategoryName.Name), "Property is required for class EmailFeatureCategoryName.");

            var slugRawValue = EmailFeatureCategoryName.SlugEnumToJsonValue(emailFeatureCategoryName.Slug);
            writer.WriteString("slug", slugRawValue);
            writer.WriteString("name", emailFeatureCategoryName.Name);
        }
    }
}
