/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Result from calling expire on any inboxes that have applicable expiration dates given current time.
    /// </summary>
    [DataContract(Name = "FlushExpiredInboxesResult")]
    public partial class FlushExpiredInboxesResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlushExpiredInboxesResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlushExpiredInboxesResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlushExpiredInboxesResult" /> class.
        /// </summary>
        /// <param name="inboxIds">Inbox IDs affected by expiration (required).</param>
        /// <param name="expireBefore">DateTime to filter inboxes so that those expiring before this time are expired (required).</param>
        public FlushExpiredInboxesResult(List<Guid> inboxIds = default, DateTime expireBefore = default)
        {
            // to ensure "inboxIds" is required (not null)
            if (inboxIds == null)
            {
                throw new ArgumentNullException("inboxIds is a required property for FlushExpiredInboxesResult and cannot be null");
            }
            this.InboxIds = inboxIds;
            this.ExpireBefore = expireBefore;
        }

        /// <summary>
        /// Inbox IDs affected by expiration
        /// </summary>
        /// <value>Inbox IDs affected by expiration</value>
        [DataMember(Name = "inboxIds", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> InboxIds { get; set; }

        /// <summary>
        /// DateTime to filter inboxes so that those expiring before this time are expired
        /// </summary>
        /// <value>DateTime to filter inboxes so that those expiring before this time are expired</value>
        [DataMember(Name = "expireBefore", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ExpireBefore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlushExpiredInboxesResult {\n");
            sb.Append("  InboxIds: ").Append(InboxIds).Append("\n");
            sb.Append("  ExpireBefore: ").Append(ExpireBefore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
