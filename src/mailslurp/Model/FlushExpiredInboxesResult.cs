// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Result from calling expire on any inboxes that have applicable expiration dates given current time.
    /// </summary>
    public partial class FlushExpiredInboxesResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlushExpiredInboxesResult" /> class.
        /// </summary>
        /// <param name="inboxIds">Inbox IDs affected by expiration</param>
        /// <param name="expireBefore">DateTime to filter inboxes so that those expiring before this time are expired</param>
        [JsonConstructor]
        public FlushExpiredInboxesResult(List<Guid> inboxIds, DateTime expireBefore)
        {
            InboxIds = inboxIds;
            ExpireBefore = expireBefore;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Inbox IDs affected by expiration
        /// </summary>
        /// <value>Inbox IDs affected by expiration</value>
        [JsonPropertyName("inboxIds")]
        public List<Guid> InboxIds { get; set; }

        /// <summary>
        /// DateTime to filter inboxes so that those expiring before this time are expired
        /// </summary>
        /// <value>DateTime to filter inboxes so that those expiring before this time are expired</value>
        [JsonPropertyName("expireBefore")]
        public DateTime ExpireBefore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlushExpiredInboxesResult {\n");
            sb.Append("  InboxIds: ").Append(InboxIds).Append("\n");
            sb.Append("  ExpireBefore: ").Append(ExpireBefore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FlushExpiredInboxesResult" />
    /// </summary>
    public class FlushExpiredInboxesResultJsonConverter : JsonConverter<FlushExpiredInboxesResult>
    {
        /// <summary>
        /// The format to use to serialize ExpireBefore
        /// </summary>
        public static string ExpireBeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="FlushExpiredInboxesResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FlushExpiredInboxesResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Guid>> inboxIds = default;
            Option<DateTime?> expireBefore = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "inboxIds":
                            inboxIds = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "expireBefore":
                            expireBefore = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!inboxIds.IsSet)
                throw new ArgumentException("Property is required for class FlushExpiredInboxesResult.", nameof(inboxIds));

            if (!expireBefore.IsSet)
                throw new ArgumentException("Property is required for class FlushExpiredInboxesResult.", nameof(expireBefore));

            if (inboxIds.IsSet && inboxIds.Value == null)
                throw new ArgumentNullException(nameof(inboxIds), "Property is not nullable for class FlushExpiredInboxesResult.");

            if (expireBefore.IsSet && expireBefore.Value == null)
                throw new ArgumentNullException(nameof(expireBefore), "Property is not nullable for class FlushExpiredInboxesResult.");

            return new FlushExpiredInboxesResult(inboxIds.Value, expireBefore.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="FlushExpiredInboxesResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="flushExpiredInboxesResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FlushExpiredInboxesResult flushExpiredInboxesResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, flushExpiredInboxesResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FlushExpiredInboxesResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="flushExpiredInboxesResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FlushExpiredInboxesResult flushExpiredInboxesResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (flushExpiredInboxesResult.InboxIds == null)
                throw new ArgumentNullException(nameof(flushExpiredInboxesResult.InboxIds), "Property is required for class FlushExpiredInboxesResult.");

            writer.WritePropertyName("inboxIds");
            JsonSerializer.Serialize(writer, flushExpiredInboxesResult.InboxIds, jsonSerializerOptions);
            writer.WriteString("expireBefore", flushExpiredInboxesResult.ExpireBefore.ToString(ExpireBeforeFormat));
        }
    }
}
