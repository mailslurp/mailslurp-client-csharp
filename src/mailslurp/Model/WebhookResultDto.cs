// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Result of a webhook notification
    /// </summary>
    public partial class WebhookResultDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookResultDto" /> class.
        /// </summary>
        /// <param name="userId">userId</param>
        /// <param name="webhookId">webhookId</param>
        /// <param name="webhookUrl">webhookUrl</param>
        /// <param name="messageId">messageId</param>
        /// <param name="httpMethod">httpMethod</param>
        /// <param name="webhookEvent">webhookEvent</param>
        /// <param name="responseTimeMillis">responseTimeMillis</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="seen">seen</param>
        /// <param name="id">id</param>
        /// <param name="redriveId">redriveId</param>
        /// <param name="responseStatus">responseStatus</param>
        /// <param name="responseBodyExtract">responseBodyExtract</param>
        /// <param name="resultType">resultType</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="phoneId">phoneId</param>
        /// <param name="smsId">smsId</param>
        [JsonConstructor]
        public WebhookResultDto(Guid userId, Guid webhookId, string webhookUrl, string messageId, HttpMethodEnum httpMethod, WebhookEventEnum webhookEvent, long responseTimeMillis, DateTime createdAt, DateTime updatedAt, bool seen, Option<Guid?> id = default, Option<Guid?> redriveId = default, Option<int?> responseStatus = default, Option<string> responseBodyExtract = default, Option<ResultTypeEnum?> resultType = default, Option<Guid?> inboxId = default, Option<Guid?> emailId = default, Option<Guid?> attachmentId = default, Option<Guid?> phoneId = default, Option<Guid?> smsId = default)
        {
            UserId = userId;
            WebhookId = webhookId;
            WebhookUrl = webhookUrl;
            MessageId = messageId;
            HttpMethod = httpMethod;
            WebhookEvent = webhookEvent;
            ResponseTimeMillis = responseTimeMillis;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Seen = seen;
            IdOption = id;
            RedriveIdOption = redriveId;
            ResponseStatusOption = responseStatus;
            ResponseBodyExtractOption = responseBodyExtract;
            ResultTypeOption = resultType;
            InboxIdOption = inboxId;
            EmailIdOption = emailId;
            AttachmentIdOption = attachmentId;
            PhoneIdOption = phoneId;
            SmsIdOption = smsId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines HttpMethod
        /// </summary>
        public enum HttpMethodEnum
        {
            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            POST = 1,

            /// <summary>
            /// Enum DELETE for value: DELETE
            /// </summary>
            DELETE = 2,

            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            GET = 3,

            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            PUT = 4,

            /// <summary>
            /// Enum PATCH for value: PATCH
            /// </summary>
            PATCH = 5,

            /// <summary>
            /// Enum HEAD for value: HEAD
            /// </summary>
            HEAD = 6,

            /// <summary>
            /// Enum OPTIONS for value: OPTIONS
            /// </summary>
            OPTIONS = 7,

            /// <summary>
            /// Enum TRACE for value: TRACE
            /// </summary>
            TRACE = 8
        }

        /// <summary>
        /// Returns a <see cref="HttpMethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static HttpMethodEnum HttpMethodEnumFromString(string value)
        {
            if (value.Equals("POST"))
                return HttpMethodEnum.POST;

            if (value.Equals("DELETE"))
                return HttpMethodEnum.DELETE;

            if (value.Equals("GET"))
                return HttpMethodEnum.GET;

            if (value.Equals("PUT"))
                return HttpMethodEnum.PUT;

            if (value.Equals("PATCH"))
                return HttpMethodEnum.PATCH;

            if (value.Equals("HEAD"))
                return HttpMethodEnum.HEAD;

            if (value.Equals("OPTIONS"))
                return HttpMethodEnum.OPTIONS;

            if (value.Equals("TRACE"))
                return HttpMethodEnum.TRACE;

            throw new NotImplementedException($"Could not convert value to type HttpMethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="HttpMethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static HttpMethodEnum? HttpMethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("POST"))
                return HttpMethodEnum.POST;

            if (value.Equals("DELETE"))
                return HttpMethodEnum.DELETE;

            if (value.Equals("GET"))
                return HttpMethodEnum.GET;

            if (value.Equals("PUT"))
                return HttpMethodEnum.PUT;

            if (value.Equals("PATCH"))
                return HttpMethodEnum.PATCH;

            if (value.Equals("HEAD"))
                return HttpMethodEnum.HEAD;

            if (value.Equals("OPTIONS"))
                return HttpMethodEnum.OPTIONS;

            if (value.Equals("TRACE"))
                return HttpMethodEnum.TRACE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="HttpMethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string HttpMethodEnumToJsonValue(HttpMethodEnum value)
        {
            if (value == HttpMethodEnum.POST)
                return "POST";

            if (value == HttpMethodEnum.DELETE)
                return "DELETE";

            if (value == HttpMethodEnum.GET)
                return "GET";

            if (value == HttpMethodEnum.PUT)
                return "PUT";

            if (value == HttpMethodEnum.PATCH)
                return "PATCH";

            if (value == HttpMethodEnum.HEAD)
                return "HEAD";

            if (value == HttpMethodEnum.OPTIONS)
                return "OPTIONS";

            if (value == HttpMethodEnum.TRACE)
                return "TRACE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets HttpMethod
        /// </summary>
        [JsonPropertyName("httpMethod")]
        public HttpMethodEnum HttpMethod { get; set; }

        /// <summary>
        /// Defines WebhookEvent
        /// </summary>
        public enum WebhookEventEnum
        {
            /// <summary>
            /// Enum EMAILRECEIVED for value: EMAIL_RECEIVED
            /// </summary>
            EMAILRECEIVED = 1,

            /// <summary>
            /// Enum NEWEMAIL for value: NEW_EMAIL
            /// </summary>
            NEWEMAIL = 2,

            /// <summary>
            /// Enum NEWCONTACT for value: NEW_CONTACT
            /// </summary>
            NEWCONTACT = 3,

            /// <summary>
            /// Enum NEWATTACHMENT for value: NEW_ATTACHMENT
            /// </summary>
            NEWATTACHMENT = 4,

            /// <summary>
            /// Enum EMAILOPENED for value: EMAIL_OPENED
            /// </summary>
            EMAILOPENED = 5,

            /// <summary>
            /// Enum EMAILREAD for value: EMAIL_READ
            /// </summary>
            EMAILREAD = 6,

            /// <summary>
            /// Enum DELIVERYSTATUS for value: DELIVERY_STATUS
            /// </summary>
            DELIVERYSTATUS = 7,

            /// <summary>
            /// Enum BOUNCE for value: BOUNCE
            /// </summary>
            BOUNCE = 8,

            /// <summary>
            /// Enum BOUNCERECIPIENT for value: BOUNCE_RECIPIENT
            /// </summary>
            BOUNCERECIPIENT = 9,

            /// <summary>
            /// Enum NEWSMS for value: NEW_SMS
            /// </summary>
            NEWSMS = 10,

            /// <summary>
            /// Enum NEWGUESTUSER for value: NEW_GUEST_USER
            /// </summary>
            NEWGUESTUSER = 11
        }

        /// <summary>
        /// Returns a <see cref="WebhookEventEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static WebhookEventEnum WebhookEventEnumFromString(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return WebhookEventEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return WebhookEventEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return WebhookEventEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return WebhookEventEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return WebhookEventEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return WebhookEventEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return WebhookEventEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return WebhookEventEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return WebhookEventEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return WebhookEventEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return WebhookEventEnum.NEWGUESTUSER;

            throw new NotImplementedException($"Could not convert value to type WebhookEventEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="WebhookEventEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WebhookEventEnum? WebhookEventEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return WebhookEventEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return WebhookEventEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return WebhookEventEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return WebhookEventEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return WebhookEventEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return WebhookEventEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return WebhookEventEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return WebhookEventEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return WebhookEventEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return WebhookEventEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return WebhookEventEnum.NEWGUESTUSER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WebhookEventEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string WebhookEventEnumToJsonValue(WebhookEventEnum value)
        {
            if (value == WebhookEventEnum.EMAILRECEIVED)
                return "EMAIL_RECEIVED";

            if (value == WebhookEventEnum.NEWEMAIL)
                return "NEW_EMAIL";

            if (value == WebhookEventEnum.NEWCONTACT)
                return "NEW_CONTACT";

            if (value == WebhookEventEnum.NEWATTACHMENT)
                return "NEW_ATTACHMENT";

            if (value == WebhookEventEnum.EMAILOPENED)
                return "EMAIL_OPENED";

            if (value == WebhookEventEnum.EMAILREAD)
                return "EMAIL_READ";

            if (value == WebhookEventEnum.DELIVERYSTATUS)
                return "DELIVERY_STATUS";

            if (value == WebhookEventEnum.BOUNCE)
                return "BOUNCE";

            if (value == WebhookEventEnum.BOUNCERECIPIENT)
                return "BOUNCE_RECIPIENT";

            if (value == WebhookEventEnum.NEWSMS)
                return "NEW_SMS";

            if (value == WebhookEventEnum.NEWGUESTUSER)
                return "NEW_GUEST_USER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets WebhookEvent
        /// </summary>
        [JsonPropertyName("webhookEvent")]
        public WebhookEventEnum WebhookEvent { get; set; }

        /// <summary>
        /// Defines ResultType
        /// </summary>
        public enum ResultTypeEnum
        {
            /// <summary>
            /// Enum BADRESPONSE for value: BAD_RESPONSE
            /// </summary>
            BADRESPONSE = 1,

            /// <summary>
            /// Enum EXCEPTION for value: EXCEPTION
            /// </summary>
            EXCEPTION = 2,

            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            SUCCESS = 3,

            /// <summary>
            /// Enum REDRIVEN for value: REDRIVEN
            /// </summary>
            REDRIVEN = 4
        }

        /// <summary>
        /// Returns a <see cref="ResultTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ResultTypeEnum ResultTypeEnumFromString(string value)
        {
            if (value.Equals("BAD_RESPONSE"))
                return ResultTypeEnum.BADRESPONSE;

            if (value.Equals("EXCEPTION"))
                return ResultTypeEnum.EXCEPTION;

            if (value.Equals("SUCCESS"))
                return ResultTypeEnum.SUCCESS;

            if (value.Equals("REDRIVEN"))
                return ResultTypeEnum.REDRIVEN;

            throw new NotImplementedException($"Could not convert value to type ResultTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ResultTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResultTypeEnum? ResultTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("BAD_RESPONSE"))
                return ResultTypeEnum.BADRESPONSE;

            if (value.Equals("EXCEPTION"))
                return ResultTypeEnum.EXCEPTION;

            if (value.Equals("SUCCESS"))
                return ResultTypeEnum.SUCCESS;

            if (value.Equals("REDRIVEN"))
                return ResultTypeEnum.REDRIVEN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ResultTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ResultTypeEnumToJsonValue(ResultTypeEnum? value)
        {
            if (value == null)
                return null;

            if (value == ResultTypeEnum.BADRESPONSE)
                return "BAD_RESPONSE";

            if (value == ResultTypeEnum.EXCEPTION)
                return "EXCEPTION";

            if (value == ResultTypeEnum.SUCCESS)
                return "SUCCESS";

            if (value == ResultTypeEnum.REDRIVEN)
                return "REDRIVEN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ResultType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResultTypeEnum?> ResultTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResultType
        /// </summary>
        [JsonPropertyName("resultType")]
        public ResultTypeEnum? ResultType { get { return this.ResultTypeOption; } set { this.ResultTypeOption = new Option<ResultTypeEnum?>(value); } }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets WebhookId
        /// </summary>
        [JsonPropertyName("webhookId")]
        public Guid WebhookId { get; set; }

        /// <summary>
        /// Gets or Sets WebhookUrl
        /// </summary>
        [JsonPropertyName("webhookUrl")]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTimeMillis
        /// </summary>
        [JsonPropertyName("responseTimeMillis")]
        public long ResponseTimeMillis { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Seen
        /// </summary>
        [JsonPropertyName("seen")]
        public bool Seen { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this.IdOption; } set { this.IdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of RedriveId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> RedriveIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets RedriveId
        /// </summary>
        [JsonPropertyName("redriveId")]
        public Guid? RedriveId { get { return this.RedriveIdOption; } set { this.RedriveIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of ResponseStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ResponseStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResponseStatus
        /// </summary>
        [JsonPropertyName("responseStatus")]
        public int? ResponseStatus { get { return this.ResponseStatusOption; } set { this.ResponseStatusOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ResponseBodyExtract
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ResponseBodyExtractOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResponseBodyExtract
        /// </summary>
        [JsonPropertyName("responseBodyExtract")]
        public string ResponseBodyExtract { get { return this.ResponseBodyExtractOption; } set { this.ResponseBodyExtractOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of EmailId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> EmailIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailId
        /// </summary>
        [JsonPropertyName("emailId")]
        public Guid? EmailId { get { return this.EmailIdOption; } set { this.EmailIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of AttachmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> AttachmentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AttachmentId
        /// </summary>
        [JsonPropertyName("attachmentId")]
        public Guid? AttachmentId { get { return this.AttachmentIdOption; } set { this.AttachmentIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of PhoneId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> PhoneIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhoneId
        /// </summary>
        [JsonPropertyName("phoneId")]
        public Guid? PhoneId { get { return this.PhoneIdOption; } set { this.PhoneIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of SmsId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> SmsIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SmsId
        /// </summary>
        [JsonPropertyName("smsId")]
        public Guid? SmsId { get { return this.SmsIdOption; } set { this.SmsIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookResultDto {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  HttpMethod: ").Append(HttpMethod).Append("\n");
            sb.Append("  WebhookEvent: ").Append(WebhookEvent).Append("\n");
            sb.Append("  ResponseTimeMillis: ").Append(ResponseTimeMillis).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Seen: ").Append(Seen).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RedriveId: ").Append(RedriveId).Append("\n");
            sb.Append("  ResponseStatus: ").Append(ResponseStatus).Append("\n");
            sb.Append("  ResponseBodyExtract: ").Append(ResponseBodyExtract).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  PhoneId: ").Append(PhoneId).Append("\n");
            sb.Append("  SmsId: ").Append(SmsId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookResultDto" />
    /// </summary>
    public class WebhookResultDtoJsonConverter : JsonConverter<WebhookResultDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WebhookResultDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookResultDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> userId = default;
            Option<Guid?> webhookId = default;
            Option<string> webhookUrl = default;
            Option<string> messageId = default;
            Option<WebhookResultDto.HttpMethodEnum?> httpMethod = default;
            Option<WebhookResultDto.WebhookEventEnum?> webhookEvent = default;
            Option<long?> responseTimeMillis = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<bool?> seen = default;
            Option<Guid?> id = default;
            Option<Guid?> redriveId = default;
            Option<int?> responseStatus = default;
            Option<string> responseBodyExtract = default;
            Option<WebhookResultDto.ResultTypeEnum?> resultType = default;
            Option<Guid?> inboxId = default;
            Option<Guid?> emailId = default;
            Option<Guid?> attachmentId = default;
            Option<Guid?> phoneId = default;
            Option<Guid?> smsId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "webhookId":
                            webhookId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "webhookUrl":
                            webhookUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "messageId":
                            messageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "httpMethod":
                            string httpMethodRawValue = utf8JsonReader.GetString();
                            if (httpMethodRawValue != null)
                                httpMethod = new Option<WebhookResultDto.HttpMethodEnum?>(WebhookResultDto.HttpMethodEnumFromStringOrDefault(httpMethodRawValue));
                            break;
                        case "webhookEvent":
                            string webhookEventRawValue = utf8JsonReader.GetString();
                            if (webhookEventRawValue != null)
                                webhookEvent = new Option<WebhookResultDto.WebhookEventEnum?>(WebhookResultDto.WebhookEventEnumFromStringOrDefault(webhookEventRawValue));
                            break;
                        case "responseTimeMillis":
                            responseTimeMillis = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "seen":
                            seen = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "redriveId":
                            redriveId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "responseStatus":
                            responseStatus = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "responseBodyExtract":
                            responseBodyExtract = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "resultType":
                            string resultTypeRawValue = utf8JsonReader.GetString();
                            if (resultTypeRawValue != null)
                                resultType = new Option<WebhookResultDto.ResultTypeEnum?>(WebhookResultDto.ResultTypeEnumFromStringOrDefault(resultTypeRawValue));
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emailId":
                            emailId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "attachmentId":
                            attachmentId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "phoneId":
                            phoneId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "smsId":
                            smsId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class WebhookResultDto.", nameof(userId));

            if (!webhookId.IsSet)
                throw new ArgumentException("Property is required for class WebhookResultDto.", nameof(webhookId));

            if (!webhookUrl.IsSet)
                throw new ArgumentException("Property is required for class WebhookResultDto.", nameof(webhookUrl));

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class WebhookResultDto.", nameof(messageId));

            if (!httpMethod.IsSet)
                throw new ArgumentException("Property is required for class WebhookResultDto.", nameof(httpMethod));

            if (!webhookEvent.IsSet)
                throw new ArgumentException("Property is required for class WebhookResultDto.", nameof(webhookEvent));

            if (!responseTimeMillis.IsSet)
                throw new ArgumentException("Property is required for class WebhookResultDto.", nameof(responseTimeMillis));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class WebhookResultDto.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class WebhookResultDto.", nameof(updatedAt));

            if (!seen.IsSet)
                throw new ArgumentException("Property is required for class WebhookResultDto.", nameof(seen));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class WebhookResultDto.");

            if (webhookId.IsSet && webhookId.Value == null)
                throw new ArgumentNullException(nameof(webhookId), "Property is not nullable for class WebhookResultDto.");

            if (webhookUrl.IsSet && webhookUrl.Value == null)
                throw new ArgumentNullException(nameof(webhookUrl), "Property is not nullable for class WebhookResultDto.");

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class WebhookResultDto.");

            if (httpMethod.IsSet && httpMethod.Value == null)
                throw new ArgumentNullException(nameof(httpMethod), "Property is not nullable for class WebhookResultDto.");

            if (webhookEvent.IsSet && webhookEvent.Value == null)
                throw new ArgumentNullException(nameof(webhookEvent), "Property is not nullable for class WebhookResultDto.");

            if (responseTimeMillis.IsSet && responseTimeMillis.Value == null)
                throw new ArgumentNullException(nameof(responseTimeMillis), "Property is not nullable for class WebhookResultDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebhookResultDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebhookResultDto.");

            if (seen.IsSet && seen.Value == null)
                throw new ArgumentNullException(nameof(seen), "Property is not nullable for class WebhookResultDto.");

            return new WebhookResultDto(userId.Value.Value, webhookId.Value.Value, webhookUrl.Value, messageId.Value, httpMethod.Value.Value, webhookEvent.Value.Value, responseTimeMillis.Value.Value, createdAt.Value.Value, updatedAt.Value.Value, seen.Value.Value, id, redriveId, responseStatus, responseBodyExtract, resultType, inboxId, emailId, attachmentId, phoneId, smsId);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookResultDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookResultDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookResultDto webhookResultDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookResultDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookResultDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookResultDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookResultDto webhookResultDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookResultDto.WebhookUrl == null)
                throw new ArgumentNullException(nameof(webhookResultDto.WebhookUrl), "Property is required for class WebhookResultDto.");

            if (webhookResultDto.MessageId == null)
                throw new ArgumentNullException(nameof(webhookResultDto.MessageId), "Property is required for class WebhookResultDto.");

            writer.WriteString("userId", webhookResultDto.UserId);

            writer.WriteString("webhookId", webhookResultDto.WebhookId);

            writer.WriteString("webhookUrl", webhookResultDto.WebhookUrl);

            writer.WriteString("messageId", webhookResultDto.MessageId);

            var httpMethodRawValue = WebhookResultDto.HttpMethodEnumToJsonValue(webhookResultDto.HttpMethod);
            writer.WriteString("httpMethod", httpMethodRawValue);
            var webhookEventRawValue = WebhookResultDto.WebhookEventEnumToJsonValue(webhookResultDto.WebhookEvent);
            writer.WriteString("webhookEvent", webhookEventRawValue);
            writer.WriteNumber("responseTimeMillis", webhookResultDto.ResponseTimeMillis);

            writer.WriteString("createdAt", webhookResultDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", webhookResultDto.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteBoolean("seen", webhookResultDto.Seen);

            if (webhookResultDto.IdOption.IsSet)
                if (webhookResultDto.IdOption.Value != null)
                    writer.WriteString("id", webhookResultDto.IdOption.Value.Value);
                else
                    writer.WriteNull("id");

            if (webhookResultDto.RedriveIdOption.IsSet)
                if (webhookResultDto.RedriveIdOption.Value != null)
                    writer.WriteString("redriveId", webhookResultDto.RedriveIdOption.Value.Value);
                else
                    writer.WriteNull("redriveId");

            if (webhookResultDto.ResponseStatusOption.IsSet)
                if (webhookResultDto.ResponseStatusOption.Value != null)
                    writer.WriteNumber("responseStatus", webhookResultDto.ResponseStatusOption.Value.Value);
                else
                    writer.WriteNull("responseStatus");

            if (webhookResultDto.ResponseBodyExtractOption.IsSet)
                if (webhookResultDto.ResponseBodyExtractOption.Value != null)
                    writer.WriteString("responseBodyExtract", webhookResultDto.ResponseBodyExtract);
                else
                    writer.WriteNull("responseBodyExtract");

            var resultTypeRawValue = WebhookResultDto.ResultTypeEnumToJsonValue(webhookResultDto.ResultTypeOption.Value.Value);
            if (resultTypeRawValue != null)
                writer.WriteString("resultType", resultTypeRawValue);
            else
                writer.WriteNull("resultType");

            if (webhookResultDto.InboxIdOption.IsSet)
                if (webhookResultDto.InboxIdOption.Value != null)
                    writer.WriteString("inboxId", webhookResultDto.InboxIdOption.Value.Value);
                else
                    writer.WriteNull("inboxId");

            if (webhookResultDto.EmailIdOption.IsSet)
                if (webhookResultDto.EmailIdOption.Value != null)
                    writer.WriteString("emailId", webhookResultDto.EmailIdOption.Value.Value);
                else
                    writer.WriteNull("emailId");

            if (webhookResultDto.AttachmentIdOption.IsSet)
                if (webhookResultDto.AttachmentIdOption.Value != null)
                    writer.WriteString("attachmentId", webhookResultDto.AttachmentIdOption.Value.Value);
                else
                    writer.WriteNull("attachmentId");

            if (webhookResultDto.PhoneIdOption.IsSet)
                if (webhookResultDto.PhoneIdOption.Value != null)
                    writer.WriteString("phoneId", webhookResultDto.PhoneIdOption.Value.Value);
                else
                    writer.WriteNull("phoneId");

            if (webhookResultDto.SmsIdOption.IsSet)
                if (webhookResultDto.SmsIdOption.Value != null)
                    writer.WriteString("smsId", webhookResultDto.SmsIdOption.Value.Value);
                else
                    writer.WriteNull("smsId");
        }
    }
}
