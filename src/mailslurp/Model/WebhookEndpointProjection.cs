/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// WebhookEndpointProjection
    /// </summary>
    [DataContract(Name = "WebhookEndpointProjection")]
    public partial class WebhookEndpointProjection : IValidatableObject
    {
        /// <summary>
        /// Defines Health
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HealthEnum
        {
            /// <summary>
            /// Enum HEALTHY for value: HEALTHY
            /// </summary>
            [EnumMember(Value = "HEALTHY")]
            HEALTHY = 1,

            /// <summary>
            /// Enum UNHEALTHY for value: UNHEALTHY
            /// </summary>
            [EnumMember(Value = "UNHEALTHY")]
            UNHEALTHY = 2
        }


        /// <summary>
        /// Gets or Sets Health
        /// </summary>
        [DataMember(Name = "health", IsRequired = true, EmitDefaultValue = true)]
        public HealthEnum Health { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookEndpointProjection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebhookEndpointProjection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookEndpointProjection" /> class.
        /// </summary>
        /// <param name="url">url (required).</param>
        /// <param name="health">health (required).</param>
        public WebhookEndpointProjection(string url = default, HealthEnum health = default)
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for WebhookEndpointProjection and cannot be null");
            }
            this.Url = url;
            this.Health = health;
        }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookEndpointProjection {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Health: ").Append(Health).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
