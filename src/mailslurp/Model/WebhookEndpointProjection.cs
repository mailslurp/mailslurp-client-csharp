// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// WebhookEndpointProjection
    /// </summary>
    public partial class WebhookEndpointProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookEndpointProjection" /> class.
        /// </summary>
        /// <param name="url">url</param>
        /// <param name="health">health</param>
        [JsonConstructor]
        public WebhookEndpointProjection(string url, HealthEnum health)
        {
            Url = url;
            Health = health;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Health
        /// </summary>
        public enum HealthEnum
        {
            /// <summary>
            /// Enum HEALTHY for value: HEALTHY
            /// </summary>
            HEALTHY = 1,

            /// <summary>
            /// Enum UNHEALTHY for value: UNHEALTHY
            /// </summary>
            UNHEALTHY = 2
        }

        /// <summary>
        /// Returns a <see cref="HealthEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static HealthEnum HealthEnumFromString(string value)
        {
            if (value.Equals("HEALTHY"))
                return HealthEnum.HEALTHY;

            if (value.Equals("UNHEALTHY"))
                return HealthEnum.UNHEALTHY;

            throw new NotImplementedException($"Could not convert value to type HealthEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="HealthEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static HealthEnum? HealthEnumFromStringOrDefault(string value)
        {
            if (value.Equals("HEALTHY"))
                return HealthEnum.HEALTHY;

            if (value.Equals("UNHEALTHY"))
                return HealthEnum.UNHEALTHY;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="HealthEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string HealthEnumToJsonValue(HealthEnum value)
        {
            if (value == HealthEnum.HEALTHY)
                return "HEALTHY";

            if (value == HealthEnum.UNHEALTHY)
                return "UNHEALTHY";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Health
        /// </summary>
        [JsonPropertyName("health")]
        public HealthEnum Health { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookEndpointProjection {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Health: ").Append(Health).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookEndpointProjection" />
    /// </summary>
    public class WebhookEndpointProjectionJsonConverter : JsonConverter<WebhookEndpointProjection>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebhookEndpointProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookEndpointProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> url = default;
            Option<WebhookEndpointProjection.HealthEnum?> health = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "health":
                            string healthRawValue = utf8JsonReader.GetString();
                            if (healthRawValue != null)
                                health = new Option<WebhookEndpointProjection.HealthEnum?>(WebhookEndpointProjection.HealthEnumFromStringOrDefault(healthRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class WebhookEndpointProjection.", nameof(url));

            if (!health.IsSet)
                throw new ArgumentException("Property is required for class WebhookEndpointProjection.", nameof(health));

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class WebhookEndpointProjection.");

            if (health.IsSet && health.Value == null)
                throw new ArgumentNullException(nameof(health), "Property is not nullable for class WebhookEndpointProjection.");

            return new WebhookEndpointProjection(url.Value, health.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookEndpointProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookEndpointProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookEndpointProjection webhookEndpointProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookEndpointProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookEndpointProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookEndpointProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookEndpointProjection webhookEndpointProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookEndpointProjection.Url == null)
                throw new ArgumentNullException(nameof(webhookEndpointProjection.Url), "Property is required for class WebhookEndpointProjection.");

            writer.WriteString("url", webhookEndpointProjection.Url);

            var healthRawValue = WebhookEndpointProjection.HealthEnumToJsonValue(webhookEndpointProjection.Health);
            writer.WriteString("health", healthRawValue);
        }
    }
}
