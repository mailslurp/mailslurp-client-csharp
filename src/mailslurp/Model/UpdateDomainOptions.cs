// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating a domain to use with MailSlurp. You must have ownership access to this domain in order to verify it. Domains will not functionally currently until the domain has been verified. See https://www.mailslurp.com/guides/custom-domains for help.
    /// </summary>
    public partial class UpdateDomainOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDomainOptions" /> class.
        /// </summary>
        /// <param name="catchAllInboxId">catchAllInboxId</param>
        [JsonConstructor]
        public UpdateDomainOptions(Option<Guid?> catchAllInboxId = default)
        {
            CatchAllInboxIdOption = catchAllInboxId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CatchAllInboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CatchAllInboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CatchAllInboxId
        /// </summary>
        [JsonPropertyName("catchAllInboxId")]
        public Guid? CatchAllInboxId { get { return this.CatchAllInboxIdOption; } set { this.CatchAllInboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateDomainOptions {\n");
            sb.Append("  CatchAllInboxId: ").Append(CatchAllInboxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateDomainOptions" />
    /// </summary>
    public class UpdateDomainOptionsJsonConverter : JsonConverter<UpdateDomainOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateDomainOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateDomainOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> catchAllInboxId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "catchAllInboxId":
                            catchAllInboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new UpdateDomainOptions(catchAllInboxId);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateDomainOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateDomainOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateDomainOptions updateDomainOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateDomainOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateDomainOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateDomainOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateDomainOptions updateDomainOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateDomainOptions.CatchAllInboxIdOption.IsSet)
                if (updateDomainOptions.CatchAllInboxIdOption.Value != null)
                    writer.WriteString("catchAllInboxId", updateDomainOptions.CatchAllInboxIdOption.Value.Value);
                else
                    writer.WriteNull("catchAllInboxId");
        }
    }
}
