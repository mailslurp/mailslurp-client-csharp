// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for IMAP connection to external email inbox. Allows syncing emails via IMAP.
    /// </summary>
    public partial class CreateConnectorImapConnectionOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorImapConnectionOptions" /> class.
        /// </summary>
        /// <param name="imapHost">IMAP server host</param>
        /// <param name="imapSsl">imapSsl</param>
        /// <param name="imapUsername">imapUsername</param>
        /// <param name="imapPassword">imapPassword</param>
        /// <param name="selectFolder">Optional folder to select during IMAP connection</param>
        /// <param name="searchTerms">searchTerms</param>
        /// <param name="imapPort">IMAP server port</param>
        /// <param name="enabled">IMAP server enabled</param>
        /// <param name="startTls">startTls</param>
        /// <param name="proxyEnabled">proxyEnabled</param>
        /// <param name="proxyPort">proxyPort</param>
        /// <param name="proxyHost">proxyHost</param>
        /// <param name="localHostName">localHostName</param>
        /// <param name="mechanisms">List of IMAP mechanisms</param>
        /// <param name="sslTrust">sslTrust</param>
        /// <param name="sslProtocols">List of SSL protocols</param>
        [JsonConstructor]
        public CreateConnectorImapConnectionOptions(string imapHost, Option<bool?> imapSsl = default, Option<string> imapUsername = default, Option<string> imapPassword = default, Option<string> selectFolder = default, Option<string> searchTerms = default, Option<int?> imapPort = default, Option<bool?> enabled = default, Option<bool?> startTls = default, Option<bool?> proxyEnabled = default, Option<int?> proxyPort = default, Option<string> proxyHost = default, Option<string> localHostName = default, Option<List<string>> mechanisms = default, Option<string> sslTrust = default, Option<List<string>> sslProtocols = default)
        {
            ImapHost = imapHost;
            ImapSslOption = imapSsl;
            ImapUsernameOption = imapUsername;
            ImapPasswordOption = imapPassword;
            SelectFolderOption = selectFolder;
            SearchTermsOption = searchTerms;
            ImapPortOption = imapPort;
            EnabledOption = enabled;
            StartTlsOption = startTls;
            ProxyEnabledOption = proxyEnabled;
            ProxyPortOption = proxyPort;
            ProxyHostOption = proxyHost;
            LocalHostNameOption = localHostName;
            MechanismsOption = mechanisms;
            SslTrustOption = sslTrust;
            SslProtocolsOption = sslProtocols;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// IMAP server host
        /// </summary>
        /// <value>IMAP server host</value>
        [JsonPropertyName("imapHost")]
        public string ImapHost { get; set; }

        /// <summary>
        /// Used to track the state of ImapSsl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ImapSslOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImapSsl
        /// </summary>
        [JsonPropertyName("imapSsl")]
        public bool? ImapSsl { get { return this.ImapSslOption; } set { this.ImapSslOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ImapUsername
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ImapUsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImapUsername
        /// </summary>
        [JsonPropertyName("imapUsername")]
        public string ImapUsername { get { return this.ImapUsernameOption; } set { this.ImapUsernameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ImapPassword
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ImapPasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImapPassword
        /// </summary>
        [JsonPropertyName("imapPassword")]
        public string ImapPassword { get { return this.ImapPasswordOption; } set { this.ImapPasswordOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SelectFolder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SelectFolderOption { get; private set; }

        /// <summary>
        /// Optional folder to select during IMAP connection
        /// </summary>
        /// <value>Optional folder to select during IMAP connection</value>
        [JsonPropertyName("selectFolder")]
        public string SelectFolder { get { return this.SelectFolderOption; } set { this.SelectFolderOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SearchTerms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SearchTermsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SearchTerms
        /// </summary>
        [JsonPropertyName("searchTerms")]
        public string SearchTerms { get { return this.SearchTermsOption; } set { this.SearchTermsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ImapPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ImapPortOption { get; private set; }

        /// <summary>
        /// IMAP server port
        /// </summary>
        /// <value>IMAP server port</value>
        [JsonPropertyName("imapPort")]
        public int? ImapPort { get { return this.ImapPortOption; } set { this.ImapPortOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// IMAP server enabled
        /// </summary>
        /// <value>IMAP server enabled</value>
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of StartTls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StartTlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTls
        /// </summary>
        [JsonPropertyName("startTls")]
        public bool? StartTls { get { return this.StartTlsOption; } set { this.StartTlsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ProxyEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ProxyEnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProxyEnabled
        /// </summary>
        [JsonPropertyName("proxyEnabled")]
        public bool? ProxyEnabled { get { return this.ProxyEnabledOption; } set { this.ProxyEnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ProxyPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProxyPortOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProxyPort
        /// </summary>
        [JsonPropertyName("proxyPort")]
        public int? ProxyPort { get { return this.ProxyPortOption; } set { this.ProxyPortOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ProxyHost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProxyHostOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProxyHost
        /// </summary>
        [JsonPropertyName("proxyHost")]
        public string ProxyHost { get { return this.ProxyHostOption; } set { this.ProxyHostOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LocalHostName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LocalHostNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LocalHostName
        /// </summary>
        [JsonPropertyName("localHostName")]
        public string LocalHostName { get { return this.LocalHostNameOption; } set { this.LocalHostNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Mechanisms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> MechanismsOption { get; private set; }

        /// <summary>
        /// List of IMAP mechanisms
        /// </summary>
        /// <value>List of IMAP mechanisms</value>
        [JsonPropertyName("mechanisms")]
        public List<string> Mechanisms { get { return this.MechanismsOption; } set { this.MechanismsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of SslTrust
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SslTrustOption { get; private set; }

        /// <summary>
        /// Gets or Sets SslTrust
        /// </summary>
        [JsonPropertyName("sslTrust")]
        public string SslTrust { get { return this.SslTrustOption; } set { this.SslTrustOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SslProtocols
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> SslProtocolsOption { get; private set; }

        /// <summary>
        /// List of SSL protocols
        /// </summary>
        /// <value>List of SSL protocols</value>
        [JsonPropertyName("sslProtocols")]
        public List<string> SslProtocols { get { return this.SslProtocolsOption; } set { this.SslProtocolsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectorImapConnectionOptions {\n");
            sb.Append("  ImapHost: ").Append(ImapHost).Append("\n");
            sb.Append("  ImapSsl: ").Append(ImapSsl).Append("\n");
            sb.Append("  ImapUsername: ").Append(ImapUsername).Append("\n");
            sb.Append("  ImapPassword: ").Append(ImapPassword).Append("\n");
            sb.Append("  SelectFolder: ").Append(SelectFolder).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("  ImapPort: ").Append(ImapPort).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  StartTls: ").Append(StartTls).Append("\n");
            sb.Append("  ProxyEnabled: ").Append(ProxyEnabled).Append("\n");
            sb.Append("  ProxyPort: ").Append(ProxyPort).Append("\n");
            sb.Append("  ProxyHost: ").Append(ProxyHost).Append("\n");
            sb.Append("  LocalHostName: ").Append(LocalHostName).Append("\n");
            sb.Append("  Mechanisms: ").Append(Mechanisms).Append("\n");
            sb.Append("  SslTrust: ").Append(SslTrust).Append("\n");
            sb.Append("  SslProtocols: ").Append(SslProtocols).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateConnectorImapConnectionOptions" />
    /// </summary>
    public class CreateConnectorImapConnectionOptionsJsonConverter : JsonConverter<CreateConnectorImapConnectionOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateConnectorImapConnectionOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateConnectorImapConnectionOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> imapHost = default;
            Option<bool?> imapSsl = default;
            Option<string> imapUsername = default;
            Option<string> imapPassword = default;
            Option<string> selectFolder = default;
            Option<string> searchTerms = default;
            Option<int?> imapPort = default;
            Option<bool?> enabled = default;
            Option<bool?> startTls = default;
            Option<bool?> proxyEnabled = default;
            Option<int?> proxyPort = default;
            Option<string> proxyHost = default;
            Option<string> localHostName = default;
            Option<List<string>> mechanisms = default;
            Option<string> sslTrust = default;
            Option<List<string>> sslProtocols = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "imapHost":
                            imapHost = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "imapSsl":
                            imapSsl = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "imapUsername":
                            imapUsername = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "imapPassword":
                            imapPassword = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "selectFolder":
                            selectFolder = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "searchTerms":
                            searchTerms = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "imapPort":
                            imapPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "startTls":
                            startTls = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "proxyEnabled":
                            proxyEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "proxyPort":
                            proxyPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "proxyHost":
                            proxyHost = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "localHostName":
                            localHostName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mechanisms":
                            mechanisms = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sslTrust":
                            sslTrust = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sslProtocols":
                            sslProtocols = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!imapHost.IsSet)
                throw new ArgumentException("Property is required for class CreateConnectorImapConnectionOptions.", nameof(imapHost));

            if (imapHost.IsSet && imapHost.Value == null)
                throw new ArgumentNullException(nameof(imapHost), "Property is not nullable for class CreateConnectorImapConnectionOptions.");

            return new CreateConnectorImapConnectionOptions(imapHost.Value, imapSsl, imapUsername, imapPassword, selectFolder, searchTerms, imapPort, enabled, startTls, proxyEnabled, proxyPort, proxyHost, localHostName, mechanisms, sslTrust, sslProtocols);
        }

        /// <summary>
        /// Serializes a <see cref="CreateConnectorImapConnectionOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createConnectorImapConnectionOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateConnectorImapConnectionOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createConnectorImapConnectionOptions.ImapHost == null)
                throw new ArgumentNullException(nameof(createConnectorImapConnectionOptions.ImapHost), "Property is required for class CreateConnectorImapConnectionOptions.");

            writer.WriteString("imapHost", createConnectorImapConnectionOptions.ImapHost);

            if (createConnectorImapConnectionOptions.ImapSslOption.IsSet)
                if (createConnectorImapConnectionOptions.ImapSslOption.Value != null)
                    writer.WriteBoolean("imapSsl", createConnectorImapConnectionOptions.ImapSslOption.Value.Value);
                else
                    writer.WriteNull("imapSsl");

            if (createConnectorImapConnectionOptions.ImapUsernameOption.IsSet)
                if (createConnectorImapConnectionOptions.ImapUsernameOption.Value != null)
                    writer.WriteString("imapUsername", createConnectorImapConnectionOptions.ImapUsername);
                else
                    writer.WriteNull("imapUsername");

            if (createConnectorImapConnectionOptions.ImapPasswordOption.IsSet)
                if (createConnectorImapConnectionOptions.ImapPasswordOption.Value != null)
                    writer.WriteString("imapPassword", createConnectorImapConnectionOptions.ImapPassword);
                else
                    writer.WriteNull("imapPassword");

            if (createConnectorImapConnectionOptions.SelectFolderOption.IsSet)
                if (createConnectorImapConnectionOptions.SelectFolderOption.Value != null)
                    writer.WriteString("selectFolder", createConnectorImapConnectionOptions.SelectFolder);
                else
                    writer.WriteNull("selectFolder");

            if (createConnectorImapConnectionOptions.SearchTermsOption.IsSet)
                if (createConnectorImapConnectionOptions.SearchTermsOption.Value != null)
                    writer.WriteString("searchTerms", createConnectorImapConnectionOptions.SearchTerms);
                else
                    writer.WriteNull("searchTerms");

            if (createConnectorImapConnectionOptions.ImapPortOption.IsSet)
                if (createConnectorImapConnectionOptions.ImapPortOption.Value != null)
                    writer.WriteNumber("imapPort", createConnectorImapConnectionOptions.ImapPortOption.Value.Value);
                else
                    writer.WriteNull("imapPort");

            if (createConnectorImapConnectionOptions.EnabledOption.IsSet)
                if (createConnectorImapConnectionOptions.EnabledOption.Value != null)
                    writer.WriteBoolean("enabled", createConnectorImapConnectionOptions.EnabledOption.Value.Value);
                else
                    writer.WriteNull("enabled");

            if (createConnectorImapConnectionOptions.StartTlsOption.IsSet)
                if (createConnectorImapConnectionOptions.StartTlsOption.Value != null)
                    writer.WriteBoolean("startTls", createConnectorImapConnectionOptions.StartTlsOption.Value.Value);
                else
                    writer.WriteNull("startTls");

            if (createConnectorImapConnectionOptions.ProxyEnabledOption.IsSet)
                if (createConnectorImapConnectionOptions.ProxyEnabledOption.Value != null)
                    writer.WriteBoolean("proxyEnabled", createConnectorImapConnectionOptions.ProxyEnabledOption.Value.Value);
                else
                    writer.WriteNull("proxyEnabled");

            if (createConnectorImapConnectionOptions.ProxyPortOption.IsSet)
                if (createConnectorImapConnectionOptions.ProxyPortOption.Value != null)
                    writer.WriteNumber("proxyPort", createConnectorImapConnectionOptions.ProxyPortOption.Value.Value);
                else
                    writer.WriteNull("proxyPort");

            if (createConnectorImapConnectionOptions.ProxyHostOption.IsSet)
                if (createConnectorImapConnectionOptions.ProxyHostOption.Value != null)
                    writer.WriteString("proxyHost", createConnectorImapConnectionOptions.ProxyHost);
                else
                    writer.WriteNull("proxyHost");

            if (createConnectorImapConnectionOptions.LocalHostNameOption.IsSet)
                if (createConnectorImapConnectionOptions.LocalHostNameOption.Value != null)
                    writer.WriteString("localHostName", createConnectorImapConnectionOptions.LocalHostName);
                else
                    writer.WriteNull("localHostName");

            if (createConnectorImapConnectionOptions.MechanismsOption.IsSet)
                if (createConnectorImapConnectionOptions.MechanismsOption.Value != null)
                {
                    writer.WritePropertyName("mechanisms");
                    JsonSerializer.Serialize(writer, createConnectorImapConnectionOptions.Mechanisms, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("mechanisms");
            if (createConnectorImapConnectionOptions.SslTrustOption.IsSet)
                if (createConnectorImapConnectionOptions.SslTrustOption.Value != null)
                    writer.WriteString("sslTrust", createConnectorImapConnectionOptions.SslTrust);
                else
                    writer.WriteNull("sslTrust");

            if (createConnectorImapConnectionOptions.SslProtocolsOption.IsSet)
                if (createConnectorImapConnectionOptions.SslProtocolsOption.Value != null)
                {
                    writer.WritePropertyName("sslProtocols");
                    JsonSerializer.Serialize(writer, createConnectorImapConnectionOptions.SslProtocols, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sslProtocols");
        }
    }
}
