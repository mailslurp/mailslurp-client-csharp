/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for IMAP connection to external email inbox. Allows syncing emails via IMAP.
    /// </summary>
    [DataContract(Name = "CreateConnectorImapConnectionOptions")]
    public partial class CreateConnectorImapConnectionOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorImapConnectionOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateConnectorImapConnectionOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorImapConnectionOptions" /> class.
        /// </summary>
        /// <param name="imapSsl">imapSsl.</param>
        /// <param name="imapUsername">imapUsername.</param>
        /// <param name="imapPassword">imapPassword.</param>
        /// <param name="selectFolder">Optional folder to select during IMAP connection.</param>
        /// <param name="searchTerms">searchTerms.</param>
        /// <param name="imapPort">IMAP server port.</param>
        /// <param name="imapHost">IMAP server host (required).</param>
        /// <param name="enabled">IMAP server enabled.</param>
        /// <param name="startTls">startTls.</param>
        /// <param name="proxyEnabled">proxyEnabled.</param>
        /// <param name="proxyPort">proxyPort.</param>
        /// <param name="proxyHost">proxyHost.</param>
        /// <param name="localHostName">localHostName.</param>
        /// <param name="mechanisms">List of IMAP mechanisms.</param>
        /// <param name="sslTrust">sslTrust.</param>
        /// <param name="sslProtocols">List of SSL protocols.</param>
        public CreateConnectorImapConnectionOptions(bool? imapSsl = default, string imapUsername = default, string imapPassword = default, string selectFolder = default, string searchTerms = default, int? imapPort = default, string imapHost = default, bool? enabled = default, bool? startTls = default, bool? proxyEnabled = default, int? proxyPort = default, string proxyHost = default, string localHostName = default, List<string> mechanisms = default, string sslTrust = default, List<string> sslProtocols = default)
        {
            // to ensure "imapHost" is required (not null)
            if (imapHost == null)
            {
                throw new ArgumentNullException("imapHost is a required property for CreateConnectorImapConnectionOptions and cannot be null");
            }
            this.ImapHost = imapHost;
            this.ImapSsl = imapSsl;
            this.ImapUsername = imapUsername;
            this.ImapPassword = imapPassword;
            this.SelectFolder = selectFolder;
            this.SearchTerms = searchTerms;
            this.ImapPort = imapPort;
            this.Enabled = enabled;
            this.StartTls = startTls;
            this.ProxyEnabled = proxyEnabled;
            this.ProxyPort = proxyPort;
            this.ProxyHost = proxyHost;
            this.LocalHostName = localHostName;
            this.Mechanisms = mechanisms;
            this.SslTrust = sslTrust;
            this.SslProtocols = sslProtocols;
        }

        /// <summary>
        /// Gets or Sets ImapSsl
        /// </summary>
        [DataMember(Name = "imapSsl", EmitDefaultValue = true)]
        public bool? ImapSsl { get; set; }

        /// <summary>
        /// Gets or Sets ImapUsername
        /// </summary>
        [DataMember(Name = "imapUsername", EmitDefaultValue = true)]
        public string ImapUsername { get; set; }

        /// <summary>
        /// Gets or Sets ImapPassword
        /// </summary>
        [DataMember(Name = "imapPassword", EmitDefaultValue = true)]
        public string ImapPassword { get; set; }

        /// <summary>
        /// Optional folder to select during IMAP connection
        /// </summary>
        /// <value>Optional folder to select during IMAP connection</value>
        [DataMember(Name = "selectFolder", EmitDefaultValue = true)]
        public string SelectFolder { get; set; }

        /// <summary>
        /// Gets or Sets SearchTerms
        /// </summary>
        [DataMember(Name = "searchTerms", EmitDefaultValue = true)]
        public string SearchTerms { get; set; }

        /// <summary>
        /// IMAP server port
        /// </summary>
        /// <value>IMAP server port</value>
        [DataMember(Name = "imapPort", EmitDefaultValue = true)]
        public int? ImapPort { get; set; }

        /// <summary>
        /// IMAP server host
        /// </summary>
        /// <value>IMAP server host</value>
        [DataMember(Name = "imapHost", IsRequired = true, EmitDefaultValue = true)]
        public string ImapHost { get; set; }

        /// <summary>
        /// IMAP server enabled
        /// </summary>
        /// <value>IMAP server enabled</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets StartTls
        /// </summary>
        [DataMember(Name = "startTls", EmitDefaultValue = true)]
        public bool? StartTls { get; set; }

        /// <summary>
        /// Gets or Sets ProxyEnabled
        /// </summary>
        [DataMember(Name = "proxyEnabled", EmitDefaultValue = true)]
        public bool? ProxyEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ProxyPort
        /// </summary>
        [DataMember(Name = "proxyPort", EmitDefaultValue = true)]
        public int? ProxyPort { get; set; }

        /// <summary>
        /// Gets or Sets ProxyHost
        /// </summary>
        [DataMember(Name = "proxyHost", EmitDefaultValue = true)]
        public string ProxyHost { get; set; }

        /// <summary>
        /// Gets or Sets LocalHostName
        /// </summary>
        [DataMember(Name = "localHostName", EmitDefaultValue = true)]
        public string LocalHostName { get; set; }

        /// <summary>
        /// List of IMAP mechanisms
        /// </summary>
        /// <value>List of IMAP mechanisms</value>
        [DataMember(Name = "mechanisms", EmitDefaultValue = true)]
        public List<string> Mechanisms { get; set; }

        /// <summary>
        /// Gets or Sets SslTrust
        /// </summary>
        [DataMember(Name = "sslTrust", EmitDefaultValue = true)]
        public string SslTrust { get; set; }

        /// <summary>
        /// List of SSL protocols
        /// </summary>
        /// <value>List of SSL protocols</value>
        [DataMember(Name = "sslProtocols", EmitDefaultValue = true)]
        public List<string> SslProtocols { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectorImapConnectionOptions {\n");
            sb.Append("  ImapSsl: ").Append(ImapSsl).Append("\n");
            sb.Append("  ImapUsername: ").Append(ImapUsername).Append("\n");
            sb.Append("  ImapPassword: ").Append(ImapPassword).Append("\n");
            sb.Append("  SelectFolder: ").Append(SelectFolder).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("  ImapPort: ").Append(ImapPort).Append("\n");
            sb.Append("  ImapHost: ").Append(ImapHost).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  StartTls: ").Append(StartTls).Append("\n");
            sb.Append("  ProxyEnabled: ").Append(ProxyEnabled).Append("\n");
            sb.Append("  ProxyPort: ").Append(ProxyPort).Append("\n");
            sb.Append("  ProxyHost: ").Append(ProxyHost).Append("\n");
            sb.Append("  LocalHostName: ").Append(LocalHostName).Append("\n");
            sb.Append("  Mechanisms: ").Append(Mechanisms).Append("\n");
            sb.Append("  SslTrust: ").Append(SslTrust).Append("\n");
            sb.Append("  SslProtocols: ").Append(SslProtocols).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
