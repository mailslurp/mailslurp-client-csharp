// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// BOUNCE webhook payload. Sent to your webhook url endpoint via HTTP POST when an email bounced or was rejected by a recipient. Save the recipients to a ban list on your server and avoid emailing them again. It is recommended you also listen to the BOUNCE_RECIPIENT payload.
    /// </summary>
    public partial class WebhookBouncePayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookBouncePayload" /> class.
        /// </summary>
        /// <param name="messageId">Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</param>
        /// <param name="webhookId">ID of webhook entity being triggered</param>
        /// <param name="eventName">Name of the event type webhook is being triggered for.</param>
        /// <param name="bounceId">ID of the bounce email record. Use the ID with the bounce controller to view more information</param>
        /// <param name="sender">Sender causing bounce</param>
        /// <param name="webhookName">Name of the webhook being triggered</param>
        /// <param name="sentToRecipients">Email sent to recipients</param>
        /// <param name="bounceRecipients">Email addresses that resulted in a bounce or email being rejected. Please save these recipients and avoid emailing them in the future to maintain your reputation.</param>
        [JsonConstructor]
        public WebhookBouncePayload(string messageId, Guid webhookId, EventNameEnum eventName, Guid bounceId, string sender, Option<string> webhookName = default, Option<List<string>> sentToRecipients = default, Option<List<string>> bounceRecipients = default)
        {
            MessageId = messageId;
            WebhookId = webhookId;
            EventName = eventName;
            BounceId = bounceId;
            Sender = sender;
            WebhookNameOption = webhookName;
            SentToRecipientsOption = sentToRecipients;
            BounceRecipientsOption = bounceRecipients;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the event type webhook is being triggered for.
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for.</value>
        public enum EventNameEnum
        {
            /// <summary>
            /// Enum EMAILRECEIVED for value: EMAIL_RECEIVED
            /// </summary>
            EMAILRECEIVED = 1,

            /// <summary>
            /// Enum NEWEMAIL for value: NEW_EMAIL
            /// </summary>
            NEWEMAIL = 2,

            /// <summary>
            /// Enum NEWCONTACT for value: NEW_CONTACT
            /// </summary>
            NEWCONTACT = 3,

            /// <summary>
            /// Enum NEWATTACHMENT for value: NEW_ATTACHMENT
            /// </summary>
            NEWATTACHMENT = 4,

            /// <summary>
            /// Enum EMAILOPENED for value: EMAIL_OPENED
            /// </summary>
            EMAILOPENED = 5,

            /// <summary>
            /// Enum EMAILREAD for value: EMAIL_READ
            /// </summary>
            EMAILREAD = 6,

            /// <summary>
            /// Enum DELIVERYSTATUS for value: DELIVERY_STATUS
            /// </summary>
            DELIVERYSTATUS = 7,

            /// <summary>
            /// Enum BOUNCE for value: BOUNCE
            /// </summary>
            BOUNCE = 8,

            /// <summary>
            /// Enum BOUNCERECIPIENT for value: BOUNCE_RECIPIENT
            /// </summary>
            BOUNCERECIPIENT = 9,

            /// <summary>
            /// Enum NEWSMS for value: NEW_SMS
            /// </summary>
            NEWSMS = 10,

            /// <summary>
            /// Enum NEWGUESTUSER for value: NEW_GUEST_USER
            /// </summary>
            NEWGUESTUSER = 11
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventNameEnum EventNameEnumFromString(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            throw new NotImplementedException($"Could not convert value to type EventNameEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventNameEnum? EventNameEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventNameEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventNameEnumToJsonValue(EventNameEnum value)
        {
            if (value == EventNameEnum.EMAILRECEIVED)
                return "EMAIL_RECEIVED";

            if (value == EventNameEnum.NEWEMAIL)
                return "NEW_EMAIL";

            if (value == EventNameEnum.NEWCONTACT)
                return "NEW_CONTACT";

            if (value == EventNameEnum.NEWATTACHMENT)
                return "NEW_ATTACHMENT";

            if (value == EventNameEnum.EMAILOPENED)
                return "EMAIL_OPENED";

            if (value == EventNameEnum.EMAILREAD)
                return "EMAIL_READ";

            if (value == EventNameEnum.DELIVERYSTATUS)
                return "DELIVERY_STATUS";

            if (value == EventNameEnum.BOUNCE)
                return "BOUNCE";

            if (value == EventNameEnum.BOUNCERECIPIENT)
                return "BOUNCE_RECIPIENT";

            if (value == EventNameEnum.NEWSMS)
                return "NEW_SMS";

            if (value == EventNameEnum.NEWGUESTUSER)
                return "NEW_GUEST_USER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Name of the event type webhook is being triggered for.
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for.</value>
        [JsonPropertyName("eventName")]
        public EventNameEnum EventName { get; set; }

        /// <summary>
        /// Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
        /// </summary>
        /// <value>Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</value>
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// ID of webhook entity being triggered
        /// </summary>
        /// <value>ID of webhook entity being triggered</value>
        [JsonPropertyName("webhookId")]
        public Guid WebhookId { get; set; }

        /// <summary>
        /// ID of the bounce email record. Use the ID with the bounce controller to view more information
        /// </summary>
        /// <value>ID of the bounce email record. Use the ID with the bounce controller to view more information</value>
        [JsonPropertyName("bounceId")]
        public Guid BounceId { get; set; }

        /// <summary>
        /// Sender causing bounce
        /// </summary>
        /// <value>Sender causing bounce</value>
        [JsonPropertyName("sender")]
        public string Sender { get; set; }

        /// <summary>
        /// Used to track the state of WebhookName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WebhookNameOption { get; private set; }

        /// <summary>
        /// Name of the webhook being triggered
        /// </summary>
        /// <value>Name of the webhook being triggered</value>
        [JsonPropertyName("webhookName")]
        public string WebhookName { get { return this.WebhookNameOption; } set { this.WebhookNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SentToRecipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> SentToRecipientsOption { get; private set; }

        /// <summary>
        /// Email sent to recipients
        /// </summary>
        /// <value>Email sent to recipients</value>
        [JsonPropertyName("sentToRecipients")]
        public List<string> SentToRecipients { get { return this.SentToRecipientsOption; } set { this.SentToRecipientsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of BounceRecipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BounceRecipientsOption { get; private set; }

        /// <summary>
        /// Email addresses that resulted in a bounce or email being rejected. Please save these recipients and avoid emailing them in the future to maintain your reputation.
        /// </summary>
        /// <value>Email addresses that resulted in a bounce or email being rejected. Please save these recipients and avoid emailing them in the future to maintain your reputation.</value>
        [JsonPropertyName("bounceRecipients")]
        public List<string> BounceRecipients { get { return this.BounceRecipientsOption; } set { this.BounceRecipientsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookBouncePayload {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  BounceId: ").Append(BounceId).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  WebhookName: ").Append(WebhookName).Append("\n");
            sb.Append("  SentToRecipients: ").Append(SentToRecipients).Append("\n");
            sb.Append("  BounceRecipients: ").Append(BounceRecipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookBouncePayload" />
    /// </summary>
    public class WebhookBouncePayloadJsonConverter : JsonConverter<WebhookBouncePayload>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebhookBouncePayload" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookBouncePayload Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> messageId = default;
            Option<Guid?> webhookId = default;
            Option<WebhookBouncePayload.EventNameEnum?> eventName = default;
            Option<Guid?> bounceId = default;
            Option<string> sender = default;
            Option<string> webhookName = default;
            Option<List<string>> sentToRecipients = default;
            Option<List<string>> bounceRecipients = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "messageId":
                            messageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "webhookId":
                            webhookId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "eventName":
                            string eventNameRawValue = utf8JsonReader.GetString();
                            if (eventNameRawValue != null)
                                eventName = new Option<WebhookBouncePayload.EventNameEnum?>(WebhookBouncePayload.EventNameEnumFromStringOrDefault(eventNameRawValue));
                            break;
                        case "bounceId":
                            bounceId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sender":
                            sender = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "webhookName":
                            webhookName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sentToRecipients":
                            sentToRecipients = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bounceRecipients":
                            bounceRecipients = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class WebhookBouncePayload.", nameof(messageId));

            if (!webhookId.IsSet)
                throw new ArgumentException("Property is required for class WebhookBouncePayload.", nameof(webhookId));

            if (!eventName.IsSet)
                throw new ArgumentException("Property is required for class WebhookBouncePayload.", nameof(eventName));

            if (!bounceId.IsSet)
                throw new ArgumentException("Property is required for class WebhookBouncePayload.", nameof(bounceId));

            if (!sender.IsSet)
                throw new ArgumentException("Property is required for class WebhookBouncePayload.", nameof(sender));

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class WebhookBouncePayload.");

            if (webhookId.IsSet && webhookId.Value == null)
                throw new ArgumentNullException(nameof(webhookId), "Property is not nullable for class WebhookBouncePayload.");

            if (eventName.IsSet && eventName.Value == null)
                throw new ArgumentNullException(nameof(eventName), "Property is not nullable for class WebhookBouncePayload.");

            if (bounceId.IsSet && bounceId.Value == null)
                throw new ArgumentNullException(nameof(bounceId), "Property is not nullable for class WebhookBouncePayload.");

            if (sender.IsSet && sender.Value == null)
                throw new ArgumentNullException(nameof(sender), "Property is not nullable for class WebhookBouncePayload.");

            return new WebhookBouncePayload(messageId.Value, webhookId.Value.Value, eventName.Value.Value, bounceId.Value.Value, sender.Value, webhookName, sentToRecipients, bounceRecipients);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookBouncePayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookBouncePayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookBouncePayload webhookBouncePayload, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookBouncePayload, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookBouncePayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookBouncePayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookBouncePayload webhookBouncePayload, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookBouncePayload.MessageId == null)
                throw new ArgumentNullException(nameof(webhookBouncePayload.MessageId), "Property is required for class WebhookBouncePayload.");

            if (webhookBouncePayload.Sender == null)
                throw new ArgumentNullException(nameof(webhookBouncePayload.Sender), "Property is required for class WebhookBouncePayload.");

            writer.WriteString("messageId", webhookBouncePayload.MessageId);

            writer.WriteString("webhookId", webhookBouncePayload.WebhookId);

            var eventNameRawValue = WebhookBouncePayload.EventNameEnumToJsonValue(webhookBouncePayload.EventName);
            writer.WriteString("eventName", eventNameRawValue);
            writer.WriteString("bounceId", webhookBouncePayload.BounceId);

            writer.WriteString("sender", webhookBouncePayload.Sender);

            if (webhookBouncePayload.WebhookNameOption.IsSet)
                if (webhookBouncePayload.WebhookNameOption.Value != null)
                    writer.WriteString("webhookName", webhookBouncePayload.WebhookName);
                else
                    writer.WriteNull("webhookName");

            if (webhookBouncePayload.SentToRecipientsOption.IsSet)
                if (webhookBouncePayload.SentToRecipientsOption.Value != null)
                {
                    writer.WritePropertyName("sentToRecipients");
                    JsonSerializer.Serialize(writer, webhookBouncePayload.SentToRecipients, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sentToRecipients");
            if (webhookBouncePayload.BounceRecipientsOption.IsSet)
                if (webhookBouncePayload.BounceRecipientsOption.Value != null)
                {
                    writer.WritePropertyName("bounceRecipients");
                    JsonSerializer.Serialize(writer, webhookBouncePayload.BounceRecipients, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("bounceRecipients");
        }
    }
}
