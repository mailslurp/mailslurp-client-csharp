// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Results of testing a webhook
    /// </summary>
    public partial class WebhookTestResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookTestResult" /> class.
        /// </summary>
        /// <param name="response">response</param>
        /// <param name="request">request</param>
        /// <param name="message">message</param>
        [JsonConstructor]
        public WebhookTestResult(WebhookTestResponse response, WebhookTestRequest request, Option<string> message = default)
        {
            Response = response;
            Request = request;
            MessageOption = message;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [JsonPropertyName("response")]
        public WebhookTestResponse Response { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [JsonPropertyName("request")]
        public WebhookTestRequest Request { get; set; }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookTestResult {\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookTestResult" />
    /// </summary>
    public class WebhookTestResultJsonConverter : JsonConverter<WebhookTestResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebhookTestResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookTestResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WebhookTestResponse> response = default;
            Option<WebhookTestRequest> request = default;
            Option<string> message = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "response":
                            response = new Option<WebhookTestResponse>(JsonSerializer.Deserialize<WebhookTestResponse>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "request":
                            request = new Option<WebhookTestRequest>(JsonSerializer.Deserialize<WebhookTestRequest>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "message":
                            message = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!response.IsSet)
                throw new ArgumentException("Property is required for class WebhookTestResult.", nameof(response));

            if (!request.IsSet)
                throw new ArgumentException("Property is required for class WebhookTestResult.", nameof(request));

            if (response.IsSet && response.Value == null)
                throw new ArgumentNullException(nameof(response), "Property is not nullable for class WebhookTestResult.");

            if (request.IsSet && request.Value == null)
                throw new ArgumentNullException(nameof(request), "Property is not nullable for class WebhookTestResult.");

            return new WebhookTestResult(response.Value, request.Value, message);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookTestResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookTestResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookTestResult webhookTestResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookTestResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookTestResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookTestResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookTestResult webhookTestResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookTestResult.Response == null)
                throw new ArgumentNullException(nameof(webhookTestResult.Response), "Property is required for class WebhookTestResult.");

            if (webhookTestResult.Request == null)
                throw new ArgumentNullException(nameof(webhookTestResult.Request), "Property is required for class WebhookTestResult.");

            writer.WritePropertyName("response");
            JsonSerializer.Serialize(writer, webhookTestResult.Response, jsonSerializerOptions);
            writer.WritePropertyName("request");
            JsonSerializer.Serialize(writer, webhookTestResult.Request, jsonSerializerOptions);
            if (webhookTestResult.MessageOption.IsSet)
                if (webhookTestResult.MessageOption.Value != null)
                    writer.WriteString("message", webhookTestResult.Message);
                else
                    writer.WriteNull("message");
        }
    }
}
