/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// MailSlurp webhook payload schema is available at https://api.mailslurp.com/schemas/webhook-payload. This schema describes the JSON object that is sent via HTTP POST to webhook urls when an email is received by an inbox that a webhook is attached to. Payloads may be delivered multiple times so use the ID as a key for event uniqueness. The payload contains IDs for the email and inbox affected. Use these to fetch more data related to the event using appropriate inbox and email endpoints. See https://www.mailslurp.com/guides/email-webhooks/ for more information. Your webhook endpoint should accept POST HTTP request and return a 200 in under 30 seconds. Process the webhook asynchronously if you need to.
    /// </summary>
    [DataContract]
    public partial class WebhookPayload :  IEquatable<WebhookPayload>, IValidatableObject
    {
        /// <summary>
        /// Name of the event type webhook is being triggered for
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            /// <summary>
            /// Enum EMAILRECEIVED for value: EMAIL_RECEIVED
            /// </summary>
            [EnumMember(Value = "EMAIL_RECEIVED")]
            EMAILRECEIVED = 1

        }

        /// <summary>
        /// Name of the event type webhook is being triggered for
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for</value>
        [DataMember(Name="eventName", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookPayload" /> class.
        /// </summary>
        /// <param name="attachmentMetaDatas">List of attachment meta data objects if attachments present.</param>
        /// <param name="bcc">List of &#x60;BCC&#x60; recipients email was addressed to.</param>
        /// <param name="cc">List of &#x60;CC&#x60; recipients email was addressed to.</param>
        /// <param name="createdAt">Date time of event creation.</param>
        /// <param name="emailId">ID of the email that was received. Use this ID for fetching the email.</param>
        /// <param name="eventName">Name of the event type webhook is being triggered for.</param>
        /// <param name="from">Who the email was sent from.</param>
        /// <param name="inboxId">Id of the inbox that receive an email.</param>
        /// <param name="messageId">Idempotent message ID. Store this ID locally or in a database to prevent message duplication..</param>
        /// <param name="subject">The subject line of the email message.</param>
        /// <param name="to">List of &#x60;To&#x60; recipients that email was addressed to.</param>
        /// <param name="webhookId">ID of webhook entity being triggered.</param>
        /// <param name="webhookName">Name of the webhook being triggered.</param>
        public WebhookPayload(List<AttachmentMetaData> attachmentMetaDatas = default(List<AttachmentMetaData>), List<string> bcc = default(List<string>), List<string> cc = default(List<string>), DateTime createdAt = default(DateTime), Guid emailId = default(Guid), EventNameEnum? eventName = default(EventNameEnum?), string from = default(string), Guid inboxId = default(Guid), string messageId = default(string), string subject = default(string), List<string> to = default(List<string>), Guid webhookId = default(Guid), string webhookName = default(string))
        {
            this.AttachmentMetaDatas = attachmentMetaDatas;
            this.Bcc = bcc;
            this.Cc = cc;
            this.CreatedAt = createdAt;
            this.EmailId = emailId;
            this.EventName = eventName;
            this.From = from;
            this.InboxId = inboxId;
            this.MessageId = messageId;
            this.Subject = subject;
            this.To = to;
            this.WebhookId = webhookId;
            this.WebhookName = webhookName;
        }
        
        /// <summary>
        /// List of attachment meta data objects if attachments present
        /// </summary>
        /// <value>List of attachment meta data objects if attachments present</value>
        [DataMember(Name="attachmentMetaDatas", EmitDefaultValue=false)]
        public List<AttachmentMetaData> AttachmentMetaDatas { get; set; }

        /// <summary>
        /// List of &#x60;BCC&#x60; recipients email was addressed to
        /// </summary>
        /// <value>List of &#x60;BCC&#x60; recipients email was addressed to</value>
        [DataMember(Name="bcc", EmitDefaultValue=false)]
        public List<string> Bcc { get; set; }

        /// <summary>
        /// List of &#x60;CC&#x60; recipients email was addressed to
        /// </summary>
        /// <value>List of &#x60;CC&#x60; recipients email was addressed to</value>
        [DataMember(Name="cc", EmitDefaultValue=false)]
        public List<string> Cc { get; set; }

        /// <summary>
        /// Date time of event creation
        /// </summary>
        /// <value>Date time of event creation</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// ID of the email that was received. Use this ID for fetching the email
        /// </summary>
        /// <value>ID of the email that was received. Use this ID for fetching the email</value>
        [DataMember(Name="emailId", EmitDefaultValue=false)]
        public Guid EmailId { get; set; }

        /// <summary>
        /// Who the email was sent from
        /// </summary>
        /// <value>Who the email was sent from</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Id of the inbox that receive an email
        /// </summary>
        /// <value>Id of the inbox that receive an email</value>
        [DataMember(Name="inboxId", EmitDefaultValue=false)]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
        /// </summary>
        /// <value>Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</value>
        [DataMember(Name="messageId", EmitDefaultValue=false)]
        public string MessageId { get; set; }

        /// <summary>
        /// The subject line of the email message
        /// </summary>
        /// <value>The subject line of the email message</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// List of &#x60;To&#x60; recipients that email was addressed to
        /// </summary>
        /// <value>List of &#x60;To&#x60; recipients that email was addressed to</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<string> To { get; set; }

        /// <summary>
        /// ID of webhook entity being triggered
        /// </summary>
        /// <value>ID of webhook entity being triggered</value>
        [DataMember(Name="webhookId", EmitDefaultValue=false)]
        public Guid WebhookId { get; set; }

        /// <summary>
        /// Name of the webhook being triggered
        /// </summary>
        /// <value>Name of the webhook being triggered</value>
        [DataMember(Name="webhookName", EmitDefaultValue=false)]
        public string WebhookName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookPayload {\n");
            sb.Append("  AttachmentMetaDatas: ").Append(AttachmentMetaDatas).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  WebhookName: ").Append(WebhookName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookPayload);
        }

        /// <summary>
        /// Returns true if WebhookPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttachmentMetaDatas == input.AttachmentMetaDatas ||
                    this.AttachmentMetaDatas != null &&
                    input.AttachmentMetaDatas != null &&
                    this.AttachmentMetaDatas.SequenceEqual(input.AttachmentMetaDatas)
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    this.Bcc != null &&
                    input.Bcc != null &&
                    this.Bcc.SequenceEqual(input.Bcc)
                ) && 
                (
                    this.Cc == input.Cc ||
                    this.Cc != null &&
                    input.Cc != null &&
                    this.Cc.SequenceEqual(input.Cc)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.EmailId == input.EmailId ||
                    (this.EmailId != null &&
                    this.EmailId.Equals(input.EmailId))
                ) && 
                (
                    this.EventName == input.EventName ||
                    this.EventName.Equals(input.EventName)
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.InboxId == input.InboxId ||
                    (this.InboxId != null &&
                    this.InboxId.Equals(input.InboxId))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.WebhookId == input.WebhookId ||
                    (this.WebhookId != null &&
                    this.WebhookId.Equals(input.WebhookId))
                ) && 
                (
                    this.WebhookName == input.WebhookName ||
                    (this.WebhookName != null &&
                    this.WebhookName.Equals(input.WebhookName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachmentMetaDatas != null)
                    hashCode = hashCode * 59 + this.AttachmentMetaDatas.GetHashCode();
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.EmailId != null)
                    hashCode = hashCode * 59 + this.EmailId.GetHashCode();
                hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.InboxId != null)
                    hashCode = hashCode * 59 + this.InboxId.GetHashCode();
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.WebhookId != null)
                    hashCode = hashCode * 59 + this.WebhookId.GetHashCode();
                if (this.WebhookName != null)
                    hashCode = hashCode * 59 + this.WebhookName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
