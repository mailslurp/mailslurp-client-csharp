/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// PhoneMessageThreadItemProjection
    /// </summary>
    [DataContract(Name = "PhoneMessageThreadItemProjection")]
    public partial class PhoneMessageThreadItemProjection : IValidatableObject
    {
        /// <summary>
        /// Defines MessageDirection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageDirectionEnum
        {
            /// <summary>
            /// Enum OUTBOUND for value: OUTBOUND
            /// </summary>
            [EnumMember(Value = "OUTBOUND")]
            OUTBOUND = 1,

            /// <summary>
            /// Enum INBOUND for value: INBOUND
            /// </summary>
            [EnumMember(Value = "INBOUND")]
            INBOUND = 2
        }


        /// <summary>
        /// Gets or Sets MessageDirection
        /// </summary>
        [DataMember(Name = "messageDirection", IsRequired = true, EmitDefaultValue = true)]
        public MessageDirectionEnum MessageDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneMessageThreadItemProjection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhoneMessageThreadItemProjection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneMessageThreadItemProjection" /> class.
        /// </summary>
        /// <param name="body">body (required).</param>
        /// <param name="phoneNumberId">phoneNumberId (required).</param>
        /// <param name="created">created (required).</param>
        /// <param name="fromPhoneNumber">fromPhoneNumber (required).</param>
        /// <param name="toPhoneNumber">toPhoneNumber (required).</param>
        /// <param name="messageDirection">messageDirection (required).</param>
        public PhoneMessageThreadItemProjection(string body = default, Guid phoneNumberId = default, DateTime created = default, string fromPhoneNumber = default, string toPhoneNumber = default, MessageDirectionEnum messageDirection = default)
        {
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new ArgumentNullException("body is a required property for PhoneMessageThreadItemProjection and cannot be null");
            }
            this.Body = body;
            this.PhoneNumberId = phoneNumberId;
            this.Created = created;
            // to ensure "fromPhoneNumber" is required (not null)
            if (fromPhoneNumber == null)
            {
                throw new ArgumentNullException("fromPhoneNumber is a required property for PhoneMessageThreadItemProjection and cannot be null");
            }
            this.FromPhoneNumber = fromPhoneNumber;
            // to ensure "toPhoneNumber" is required (not null)
            if (toPhoneNumber == null)
            {
                throw new ArgumentNullException("toPhoneNumber is a required property for PhoneMessageThreadItemProjection and cannot be null");
            }
            this.ToPhoneNumber = toPhoneNumber;
            this.MessageDirection = messageDirection;
        }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", IsRequired = true, EmitDefaultValue = true)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberId
        /// </summary>
        [DataMember(Name = "phoneNumberId", IsRequired = true, EmitDefaultValue = true)]
        public Guid PhoneNumberId { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets FromPhoneNumber
        /// </summary>
        [DataMember(Name = "fromPhoneNumber", IsRequired = true, EmitDefaultValue = true)]
        public string FromPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets ToPhoneNumber
        /// </summary>
        [DataMember(Name = "toPhoneNumber", IsRequired = true, EmitDefaultValue = true)]
        public string ToPhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhoneMessageThreadItemProjection {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  FromPhoneNumber: ").Append(FromPhoneNumber).Append("\n");
            sb.Append("  ToPhoneNumber: ").Append(ToPhoneNumber).Append("\n");
            sb.Append("  MessageDirection: ").Append(MessageDirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
