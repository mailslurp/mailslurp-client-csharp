// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// PhoneMessageThreadItemProjection
    /// </summary>
    public partial class PhoneMessageThreadItemProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneMessageThreadItemProjection" /> class.
        /// </summary>
        /// <param name="body">body</param>
        /// <param name="phoneNumberId">phoneNumberId</param>
        /// <param name="created">created</param>
        /// <param name="fromPhoneNumber">fromPhoneNumber</param>
        /// <param name="toPhoneNumber">toPhoneNumber</param>
        /// <param name="messageDirection">messageDirection</param>
        [JsonConstructor]
        public PhoneMessageThreadItemProjection(string body, Guid phoneNumberId, DateTime created, string fromPhoneNumber, string toPhoneNumber, MessageDirectionEnum messageDirection)
        {
            Body = body;
            PhoneNumberId = phoneNumberId;
            Created = created;
            FromPhoneNumber = fromPhoneNumber;
            ToPhoneNumber = toPhoneNumber;
            MessageDirection = messageDirection;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines MessageDirection
        /// </summary>
        public enum MessageDirectionEnum
        {
            /// <summary>
            /// Enum OUTBOUND for value: OUTBOUND
            /// </summary>
            OUTBOUND = 1,

            /// <summary>
            /// Enum INBOUND for value: INBOUND
            /// </summary>
            INBOUND = 2
        }

        /// <summary>
        /// Returns a <see cref="MessageDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MessageDirectionEnum MessageDirectionEnumFromString(string value)
        {
            if (value.Equals("OUTBOUND"))
                return MessageDirectionEnum.OUTBOUND;

            if (value.Equals("INBOUND"))
                return MessageDirectionEnum.INBOUND;

            throw new NotImplementedException($"Could not convert value to type MessageDirectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MessageDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MessageDirectionEnum? MessageDirectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("OUTBOUND"))
                return MessageDirectionEnum.OUTBOUND;

            if (value.Equals("INBOUND"))
                return MessageDirectionEnum.INBOUND;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MessageDirectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MessageDirectionEnumToJsonValue(MessageDirectionEnum value)
        {
            if (value == MessageDirectionEnum.OUTBOUND)
                return "OUTBOUND";

            if (value == MessageDirectionEnum.INBOUND)
                return "INBOUND";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets MessageDirection
        /// </summary>
        [JsonPropertyName("messageDirection")]
        public MessageDirectionEnum MessageDirection { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberId
        /// </summary>
        [JsonPropertyName("phoneNumberId")]
        public Guid PhoneNumberId { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [JsonPropertyName("created")]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets FromPhoneNumber
        /// </summary>
        [JsonPropertyName("fromPhoneNumber")]
        public string FromPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets ToPhoneNumber
        /// </summary>
        [JsonPropertyName("toPhoneNumber")]
        public string ToPhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhoneMessageThreadItemProjection {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  FromPhoneNumber: ").Append(FromPhoneNumber).Append("\n");
            sb.Append("  ToPhoneNumber: ").Append(ToPhoneNumber).Append("\n");
            sb.Append("  MessageDirection: ").Append(MessageDirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PhoneMessageThreadItemProjection" />
    /// </summary>
    public class PhoneMessageThreadItemProjectionJsonConverter : JsonConverter<PhoneMessageThreadItemProjection>
    {
        /// <summary>
        /// The format to use to serialize Created
        /// </summary>
        public static string CreatedFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PhoneMessageThreadItemProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PhoneMessageThreadItemProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> body = default;
            Option<Guid?> phoneNumberId = default;
            Option<DateTime?> created = default;
            Option<string> fromPhoneNumber = default;
            Option<string> toPhoneNumber = default;
            Option<PhoneMessageThreadItemProjection.MessageDirectionEnum?> messageDirection = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneNumberId":
                            phoneNumberId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "created":
                            created = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fromPhoneNumber":
                            fromPhoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "toPhoneNumber":
                            toPhoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "messageDirection":
                            string messageDirectionRawValue = utf8JsonReader.GetString();
                            if (messageDirectionRawValue != null)
                                messageDirection = new Option<PhoneMessageThreadItemProjection.MessageDirectionEnum?>(PhoneMessageThreadItemProjection.MessageDirectionEnumFromStringOrDefault(messageDirectionRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!body.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadItemProjection.", nameof(body));

            if (!phoneNumberId.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadItemProjection.", nameof(phoneNumberId));

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadItemProjection.", nameof(created));

            if (!fromPhoneNumber.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadItemProjection.", nameof(fromPhoneNumber));

            if (!toPhoneNumber.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadItemProjection.", nameof(toPhoneNumber));

            if (!messageDirection.IsSet)
                throw new ArgumentException("Property is required for class PhoneMessageThreadItemProjection.", nameof(messageDirection));

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class PhoneMessageThreadItemProjection.");

            if (phoneNumberId.IsSet && phoneNumberId.Value == null)
                throw new ArgumentNullException(nameof(phoneNumberId), "Property is not nullable for class PhoneMessageThreadItemProjection.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class PhoneMessageThreadItemProjection.");

            if (fromPhoneNumber.IsSet && fromPhoneNumber.Value == null)
                throw new ArgumentNullException(nameof(fromPhoneNumber), "Property is not nullable for class PhoneMessageThreadItemProjection.");

            if (toPhoneNumber.IsSet && toPhoneNumber.Value == null)
                throw new ArgumentNullException(nameof(toPhoneNumber), "Property is not nullable for class PhoneMessageThreadItemProjection.");

            if (messageDirection.IsSet && messageDirection.Value == null)
                throw new ArgumentNullException(nameof(messageDirection), "Property is not nullable for class PhoneMessageThreadItemProjection.");

            return new PhoneMessageThreadItemProjection(body.Value, phoneNumberId.Value.Value, created.Value.Value, fromPhoneNumber.Value, toPhoneNumber.Value, messageDirection.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="PhoneMessageThreadItemProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="phoneMessageThreadItemProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PhoneMessageThreadItemProjection phoneMessageThreadItemProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, phoneMessageThreadItemProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PhoneMessageThreadItemProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="phoneMessageThreadItemProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PhoneMessageThreadItemProjection phoneMessageThreadItemProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (phoneMessageThreadItemProjection.Body == null)
                throw new ArgumentNullException(nameof(phoneMessageThreadItemProjection.Body), "Property is required for class PhoneMessageThreadItemProjection.");

            if (phoneMessageThreadItemProjection.FromPhoneNumber == null)
                throw new ArgumentNullException(nameof(phoneMessageThreadItemProjection.FromPhoneNumber), "Property is required for class PhoneMessageThreadItemProjection.");

            if (phoneMessageThreadItemProjection.ToPhoneNumber == null)
                throw new ArgumentNullException(nameof(phoneMessageThreadItemProjection.ToPhoneNumber), "Property is required for class PhoneMessageThreadItemProjection.");

            writer.WriteString("body", phoneMessageThreadItemProjection.Body);

            writer.WriteString("phoneNumberId", phoneMessageThreadItemProjection.PhoneNumberId);

            writer.WriteString("created", phoneMessageThreadItemProjection.Created.ToString(CreatedFormat));

            writer.WriteString("fromPhoneNumber", phoneMessageThreadItemProjection.FromPhoneNumber);

            writer.WriteString("toPhoneNumber", phoneMessageThreadItemProjection.ToPhoneNumber);

            var messageDirectionRawValue = PhoneMessageThreadItemProjection.MessageDirectionEnumToJsonValue(phoneMessageThreadItemProjection.MessageDirection);
            writer.WriteString("messageDirection", messageDirectionRawValue);
        }
    }
}
