/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// LookupMtaStsDomainResults
    /// </summary>
    [DataContract(Name = "LookupMtaStsDomainResults")]
    public partial class LookupMtaStsDomainResults : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LookupMtaStsDomainResults" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LookupMtaStsDomainResults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LookupMtaStsDomainResults" /> class.
        /// </summary>
        /// <param name="valid">valid (required).</param>
        /// <param name="query">query (required).</param>
        /// <param name="records">records (required).</param>
        /// <param name="wellKnownQuery">wellKnownQuery (required).</param>
        /// <param name="wellKnownPresent">wellKnownPresent (required).</param>
        /// <param name="wellKnownValue">wellKnownValue (required).</param>
        /// <param name="errors">errors (required).</param>
        /// <param name="warnings">warnings (required).</param>
        public LookupMtaStsDomainResults(bool valid = default, DNSLookupOptions query = default, List<DNSLookupResult> records = default, string wellKnownQuery = default, bool wellKnownPresent = default, string wellKnownValue = default, List<string> errors = default, List<string> warnings = default)
        {
            this.Valid = valid;
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException("query is a required property for LookupMtaStsDomainResults and cannot be null");
            }
            this.Query = query;
            // to ensure "records" is required (not null)
            if (records == null)
            {
                throw new ArgumentNullException("records is a required property for LookupMtaStsDomainResults and cannot be null");
            }
            this.Records = records;
            // to ensure "wellKnownQuery" is required (not null)
            if (wellKnownQuery == null)
            {
                throw new ArgumentNullException("wellKnownQuery is a required property for LookupMtaStsDomainResults and cannot be null");
            }
            this.WellKnownQuery = wellKnownQuery;
            this.WellKnownPresent = wellKnownPresent;
            // to ensure "wellKnownValue" is required (not null)
            if (wellKnownValue == null)
            {
                throw new ArgumentNullException("wellKnownValue is a required property for LookupMtaStsDomainResults and cannot be null");
            }
            this.WellKnownValue = wellKnownValue;
            // to ensure "errors" is required (not null)
            if (errors == null)
            {
                throw new ArgumentNullException("errors is a required property for LookupMtaStsDomainResults and cannot be null");
            }
            this.Errors = errors;
            // to ensure "warnings" is required (not null)
            if (warnings == null)
            {
                throw new ArgumentNullException("warnings is a required property for LookupMtaStsDomainResults and cannot be null");
            }
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name = "valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public DNSLookupOptions Query { get; set; }

        /// <summary>
        /// Gets or Sets Records
        /// </summary>
        [DataMember(Name = "records", IsRequired = true, EmitDefaultValue = true)]
        public List<DNSLookupResult> Records { get; set; }

        /// <summary>
        /// Gets or Sets WellKnownQuery
        /// </summary>
        [DataMember(Name = "wellKnownQuery", IsRequired = true, EmitDefaultValue = true)]
        public string WellKnownQuery { get; set; }

        /// <summary>
        /// Gets or Sets WellKnownPresent
        /// </summary>
        [DataMember(Name = "wellKnownPresent", IsRequired = true, EmitDefaultValue = true)]
        public bool WellKnownPresent { get; set; }

        /// <summary>
        /// Gets or Sets WellKnownValue
        /// </summary>
        [DataMember(Name = "wellKnownValue", IsRequired = true, EmitDefaultValue = true)]
        public string WellKnownValue { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Errors { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LookupMtaStsDomainResults {\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  WellKnownQuery: ").Append(WellKnownQuery).Append("\n");
            sb.Append("  WellKnownPresent: ").Append(WellKnownPresent).Append("\n");
            sb.Append("  WellKnownValue: ").Append(WellKnownValue).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
