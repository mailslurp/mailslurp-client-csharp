// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// LookupMtaStsDomainResults
    /// </summary>
    public partial class LookupMtaStsDomainResults : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LookupMtaStsDomainResults" /> class.
        /// </summary>
        /// <param name="valid">valid</param>
        /// <param name="query">query</param>
        /// <param name="records">records</param>
        /// <param name="wellKnownQuery">wellKnownQuery</param>
        /// <param name="wellKnownPresent">wellKnownPresent</param>
        /// <param name="wellKnownValue">wellKnownValue</param>
        /// <param name="errors">errors</param>
        /// <param name="warnings">warnings</param>
        [JsonConstructor]
        public LookupMtaStsDomainResults(bool valid, DNSLookupOptions query, List<DNSLookupResult> records, string wellKnownQuery, bool wellKnownPresent, string wellKnownValue, List<string> errors, List<string> warnings)
        {
            Valid = valid;
            Query = query;
            Records = records;
            WellKnownQuery = wellKnownQuery;
            WellKnownPresent = wellKnownPresent;
            WellKnownValue = wellKnownValue;
            Errors = errors;
            Warnings = warnings;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [JsonPropertyName("valid")]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [JsonPropertyName("query")]
        public DNSLookupOptions Query { get; set; }

        /// <summary>
        /// Gets or Sets Records
        /// </summary>
        [JsonPropertyName("records")]
        public List<DNSLookupResult> Records { get; set; }

        /// <summary>
        /// Gets or Sets WellKnownQuery
        /// </summary>
        [JsonPropertyName("wellKnownQuery")]
        public string WellKnownQuery { get; set; }

        /// <summary>
        /// Gets or Sets WellKnownPresent
        /// </summary>
        [JsonPropertyName("wellKnownPresent")]
        public bool WellKnownPresent { get; set; }

        /// <summary>
        /// Gets or Sets WellKnownValue
        /// </summary>
        [JsonPropertyName("wellKnownValue")]
        public string WellKnownValue { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [JsonPropertyName("errors")]
        public List<string> Errors { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [JsonPropertyName("warnings")]
        public List<string> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LookupMtaStsDomainResults {\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  WellKnownQuery: ").Append(WellKnownQuery).Append("\n");
            sb.Append("  WellKnownPresent: ").Append(WellKnownPresent).Append("\n");
            sb.Append("  WellKnownValue: ").Append(WellKnownValue).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LookupMtaStsDomainResults" />
    /// </summary>
    public class LookupMtaStsDomainResultsJsonConverter : JsonConverter<LookupMtaStsDomainResults>
    {
        /// <summary>
        /// Deserializes json to <see cref="LookupMtaStsDomainResults" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LookupMtaStsDomainResults Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> valid = default;
            Option<DNSLookupOptions> query = default;
            Option<List<DNSLookupResult>> records = default;
            Option<string> wellKnownQuery = default;
            Option<bool?> wellKnownPresent = default;
            Option<string> wellKnownValue = default;
            Option<List<string>> errors = default;
            Option<List<string>> warnings = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "valid":
                            valid = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "query":
                            query = new Option<DNSLookupOptions>(JsonSerializer.Deserialize<DNSLookupOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "records":
                            records = new Option<List<DNSLookupResult>>(JsonSerializer.Deserialize<List<DNSLookupResult>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "wellKnownQuery":
                            wellKnownQuery = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "wellKnownPresent":
                            wellKnownPresent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "wellKnownValue":
                            wellKnownValue = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "errors":
                            errors = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "warnings":
                            warnings = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!valid.IsSet)
                throw new ArgumentException("Property is required for class LookupMtaStsDomainResults.", nameof(valid));

            if (!query.IsSet)
                throw new ArgumentException("Property is required for class LookupMtaStsDomainResults.", nameof(query));

            if (!records.IsSet)
                throw new ArgumentException("Property is required for class LookupMtaStsDomainResults.", nameof(records));

            if (!wellKnownQuery.IsSet)
                throw new ArgumentException("Property is required for class LookupMtaStsDomainResults.", nameof(wellKnownQuery));

            if (!wellKnownPresent.IsSet)
                throw new ArgumentException("Property is required for class LookupMtaStsDomainResults.", nameof(wellKnownPresent));

            if (!wellKnownValue.IsSet)
                throw new ArgumentException("Property is required for class LookupMtaStsDomainResults.", nameof(wellKnownValue));

            if (!errors.IsSet)
                throw new ArgumentException("Property is required for class LookupMtaStsDomainResults.", nameof(errors));

            if (!warnings.IsSet)
                throw new ArgumentException("Property is required for class LookupMtaStsDomainResults.", nameof(warnings));

            if (valid.IsSet && valid.Value == null)
                throw new ArgumentNullException(nameof(valid), "Property is not nullable for class LookupMtaStsDomainResults.");

            if (query.IsSet && query.Value == null)
                throw new ArgumentNullException(nameof(query), "Property is not nullable for class LookupMtaStsDomainResults.");

            if (records.IsSet && records.Value == null)
                throw new ArgumentNullException(nameof(records), "Property is not nullable for class LookupMtaStsDomainResults.");

            if (wellKnownQuery.IsSet && wellKnownQuery.Value == null)
                throw new ArgumentNullException(nameof(wellKnownQuery), "Property is not nullable for class LookupMtaStsDomainResults.");

            if (wellKnownPresent.IsSet && wellKnownPresent.Value == null)
                throw new ArgumentNullException(nameof(wellKnownPresent), "Property is not nullable for class LookupMtaStsDomainResults.");

            if (wellKnownValue.IsSet && wellKnownValue.Value == null)
                throw new ArgumentNullException(nameof(wellKnownValue), "Property is not nullable for class LookupMtaStsDomainResults.");

            if (errors.IsSet && errors.Value == null)
                throw new ArgumentNullException(nameof(errors), "Property is not nullable for class LookupMtaStsDomainResults.");

            if (warnings.IsSet && warnings.Value == null)
                throw new ArgumentNullException(nameof(warnings), "Property is not nullable for class LookupMtaStsDomainResults.");

            return new LookupMtaStsDomainResults(valid.Value.Value, query.Value, records.Value, wellKnownQuery.Value, wellKnownPresent.Value.Value, wellKnownValue.Value, errors.Value, warnings.Value);
        }

        /// <summary>
        /// Serializes a <see cref="LookupMtaStsDomainResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="lookupMtaStsDomainResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LookupMtaStsDomainResults lookupMtaStsDomainResults, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, lookupMtaStsDomainResults, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LookupMtaStsDomainResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="lookupMtaStsDomainResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LookupMtaStsDomainResults lookupMtaStsDomainResults, JsonSerializerOptions jsonSerializerOptions)
        {
            if (lookupMtaStsDomainResults.Query == null)
                throw new ArgumentNullException(nameof(lookupMtaStsDomainResults.Query), "Property is required for class LookupMtaStsDomainResults.");

            if (lookupMtaStsDomainResults.Records == null)
                throw new ArgumentNullException(nameof(lookupMtaStsDomainResults.Records), "Property is required for class LookupMtaStsDomainResults.");

            if (lookupMtaStsDomainResults.WellKnownQuery == null)
                throw new ArgumentNullException(nameof(lookupMtaStsDomainResults.WellKnownQuery), "Property is required for class LookupMtaStsDomainResults.");

            if (lookupMtaStsDomainResults.WellKnownValue == null)
                throw new ArgumentNullException(nameof(lookupMtaStsDomainResults.WellKnownValue), "Property is required for class LookupMtaStsDomainResults.");

            if (lookupMtaStsDomainResults.Errors == null)
                throw new ArgumentNullException(nameof(lookupMtaStsDomainResults.Errors), "Property is required for class LookupMtaStsDomainResults.");

            if (lookupMtaStsDomainResults.Warnings == null)
                throw new ArgumentNullException(nameof(lookupMtaStsDomainResults.Warnings), "Property is required for class LookupMtaStsDomainResults.");

            writer.WriteBoolean("valid", lookupMtaStsDomainResults.Valid);

            writer.WritePropertyName("query");
            JsonSerializer.Serialize(writer, lookupMtaStsDomainResults.Query, jsonSerializerOptions);
            writer.WritePropertyName("records");
            JsonSerializer.Serialize(writer, lookupMtaStsDomainResults.Records, jsonSerializerOptions);
            writer.WriteString("wellKnownQuery", lookupMtaStsDomainResults.WellKnownQuery);

            writer.WriteBoolean("wellKnownPresent", lookupMtaStsDomainResults.WellKnownPresent);

            writer.WriteString("wellKnownValue", lookupMtaStsDomainResults.WellKnownValue);

            writer.WritePropertyName("errors");
            JsonSerializer.Serialize(writer, lookupMtaStsDomainResults.Errors, jsonSerializerOptions);
            writer.WritePropertyName("warnings");
            JsonSerializer.Serialize(writer, lookupMtaStsDomainResults.Warnings, jsonSerializerOptions);
        }
    }
}
