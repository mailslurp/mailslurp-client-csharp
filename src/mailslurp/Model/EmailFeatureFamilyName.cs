/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// EmailFeatureFamilyName
    /// </summary>
    [DataContract(Name = "EmailFeatureFamilyName")]
    public partial class EmailFeatureFamilyName : IEquatable<EmailFeatureFamilyName>, IValidatableObject
    {
        /// <summary>
        /// Defines Slug
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlugEnum
        {
            /// <summary>
            /// Enum Aol for value: aol
            /// </summary>
            [EnumMember(Value = "aol")]
            Aol = 1,

            /// <summary>
            /// Enum AppleMail for value: apple-mail
            /// </summary>
            [EnumMember(Value = "apple-mail")]
            AppleMail = 2,

            /// <summary>
            /// Enum Fastmail for value: fastmail
            /// </summary>
            [EnumMember(Value = "fastmail")]
            Fastmail = 3,

            /// <summary>
            /// Enum FreeFr for value: free-fr
            /// </summary>
            [EnumMember(Value = "free-fr")]
            FreeFr = 4,

            /// <summary>
            /// Enum Gmail for value: gmail
            /// </summary>
            [EnumMember(Value = "gmail")]
            Gmail = 5,

            /// <summary>
            /// Enum Gmx for value: gmx
            /// </summary>
            [EnumMember(Value = "gmx")]
            Gmx = 6,

            /// <summary>
            /// Enum Hey for value: hey
            /// </summary>
            [EnumMember(Value = "hey")]
            Hey = 7,

            /// <summary>
            /// Enum Ionos1and1 for value: ionos-1and1
            /// </summary>
            [EnumMember(Value = "ionos-1and1")]
            Ionos1and1 = 8,

            /// <summary>
            /// Enum Laposte for value: laposte
            /// </summary>
            [EnumMember(Value = "laposte")]
            Laposte = 9,

            /// <summary>
            /// Enum MailRu for value: mail-ru
            /// </summary>
            [EnumMember(Value = "mail-ru")]
            MailRu = 10,

            /// <summary>
            /// Enum Microsoft for value: microsoft
            /// </summary>
            [EnumMember(Value = "microsoft")]
            Microsoft = 11,

            /// <summary>
            /// Enum Orange for value: orange
            /// </summary>
            [EnumMember(Value = "orange")]
            Orange = 12,

            /// <summary>
            /// Enum Outlook for value: outlook
            /// </summary>
            [EnumMember(Value = "outlook")]
            Outlook = 13,

            /// <summary>
            /// Enum Protonmail for value: protonmail
            /// </summary>
            [EnumMember(Value = "protonmail")]
            Protonmail = 14,

            /// <summary>
            /// Enum Rainloop for value: rainloop
            /// </summary>
            [EnumMember(Value = "rainloop")]
            Rainloop = 15,

            /// <summary>
            /// Enum SamsungEmail for value: samsung-email
            /// </summary>
            [EnumMember(Value = "samsung-email")]
            SamsungEmail = 16,

            /// <summary>
            /// Enum Sfr for value: sfr
            /// </summary>
            [EnumMember(Value = "sfr")]
            Sfr = 17,

            /// <summary>
            /// Enum TOnlineDe for value: t-online-de
            /// </summary>
            [EnumMember(Value = "t-online-de")]
            TOnlineDe = 18,

            /// <summary>
            /// Enum Thunderbird for value: thunderbird
            /// </summary>
            [EnumMember(Value = "thunderbird")]
            Thunderbird = 19,

            /// <summary>
            /// Enum WebDe for value: web-de
            /// </summary>
            [EnumMember(Value = "web-de")]
            WebDe = 20,

            /// <summary>
            /// Enum Yahoo for value: yahoo
            /// </summary>
            [EnumMember(Value = "yahoo")]
            Yahoo = 21

        }


        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = true)]
        public SlugEnum Slug { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailFeatureFamilyName" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailFeatureFamilyName() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailFeatureFamilyName" /> class.
        /// </summary>
        /// <param name="slug">slug (required).</param>
        /// <param name="name">name (required).</param>
        public EmailFeatureFamilyName(SlugEnum slug = default(SlugEnum), string name = default(string))
        {
            this.Slug = slug;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for EmailFeatureFamilyName and cannot be null");
            }
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailFeatureFamilyName {\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailFeatureFamilyName);
        }

        /// <summary>
        /// Returns true if EmailFeatureFamilyName instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailFeatureFamilyName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailFeatureFamilyName input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Slug == input.Slug ||
                    this.Slug.Equals(input.Slug)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
