// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorImapConnectionDto
    /// </summary>
    public partial class ConnectorImapConnectionDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorImapConnectionDto" /> class.
        /// </summary>
        /// <param name="connectorId">connectorId</param>
        /// <param name="imapHost">imapHost</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="imapPort">imapPort</param>
        /// <param name="imapUsername">imapUsername</param>
        /// <param name="imapPassword">imapPassword</param>
        /// <param name="imapSsl">imapSsl</param>
        /// <param name="selectFolder">selectFolder</param>
        /// <param name="searchTerms">searchTerms</param>
        /// <param name="startTls">startTls</param>
        /// <param name="proxyHost">proxyHost</param>
        /// <param name="proxyPort">proxyPort</param>
        /// <param name="proxyEnabled">proxyEnabled</param>
        /// <param name="localHostName">localHostName</param>
        /// <param name="mechanisms">mechanisms</param>
        /// <param name="sslProtocols">sslProtocols</param>
        /// <param name="sslTrust">sslTrust</param>
        /// <param name="enabled">enabled</param>
        [JsonConstructor]
        public ConnectorImapConnectionDto(Guid connectorId, string imapHost, DateTime createdAt, Guid id, Option<int?> imapPort = default, Option<string> imapUsername = default, Option<string> imapPassword = default, Option<bool?> imapSsl = default, Option<string> selectFolder = default, Option<string> searchTerms = default, Option<bool?> startTls = default, Option<string> proxyHost = default, Option<int?> proxyPort = default, Option<bool?> proxyEnabled = default, Option<string> localHostName = default, Option<List<string>> mechanisms = default, Option<List<string>> sslProtocols = default, Option<string> sslTrust = default, Option<bool?> enabled = default)
        {
            ConnectorId = connectorId;
            ImapHost = imapHost;
            CreatedAt = createdAt;
            Id = id;
            ImapPortOption = imapPort;
            ImapUsernameOption = imapUsername;
            ImapPasswordOption = imapPassword;
            ImapSslOption = imapSsl;
            SelectFolderOption = selectFolder;
            SearchTermsOption = searchTerms;
            StartTlsOption = startTls;
            ProxyHostOption = proxyHost;
            ProxyPortOption = proxyPort;
            ProxyEnabledOption = proxyEnabled;
            LocalHostNameOption = localHostName;
            MechanismsOption = mechanisms;
            SslProtocolsOption = sslProtocols;
            SslTrustOption = sslTrust;
            EnabledOption = enabled;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ConnectorId
        /// </summary>
        [JsonPropertyName("connectorId")]
        public Guid ConnectorId { get; set; }

        /// <summary>
        /// Gets or Sets ImapHost
        /// </summary>
        [JsonPropertyName("imapHost")]
        public string ImapHost { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of ImapPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ImapPortOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImapPort
        /// </summary>
        [JsonPropertyName("imapPort")]
        public int? ImapPort { get { return this.ImapPortOption; } set { this.ImapPortOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ImapUsername
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ImapUsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImapUsername
        /// </summary>
        [JsonPropertyName("imapUsername")]
        public string ImapUsername { get { return this.ImapUsernameOption; } set { this.ImapUsernameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ImapPassword
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ImapPasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImapPassword
        /// </summary>
        [JsonPropertyName("imapPassword")]
        public string ImapPassword { get { return this.ImapPasswordOption; } set { this.ImapPasswordOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ImapSsl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ImapSslOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImapSsl
        /// </summary>
        [JsonPropertyName("imapSsl")]
        public bool? ImapSsl { get { return this.ImapSslOption; } set { this.ImapSslOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SelectFolder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SelectFolderOption { get; private set; }

        /// <summary>
        /// Gets or Sets SelectFolder
        /// </summary>
        [JsonPropertyName("selectFolder")]
        public string SelectFolder { get { return this.SelectFolderOption; } set { this.SelectFolderOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SearchTerms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SearchTermsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SearchTerms
        /// </summary>
        [JsonPropertyName("searchTerms")]
        public string SearchTerms { get { return this.SearchTermsOption; } set { this.SearchTermsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StartTls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StartTlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTls
        /// </summary>
        [JsonPropertyName("startTls")]
        public bool? StartTls { get { return this.StartTlsOption; } set { this.StartTlsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ProxyHost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProxyHostOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProxyHost
        /// </summary>
        [JsonPropertyName("proxyHost")]
        public string ProxyHost { get { return this.ProxyHostOption; } set { this.ProxyHostOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProxyPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProxyPortOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProxyPort
        /// </summary>
        [JsonPropertyName("proxyPort")]
        public int? ProxyPort { get { return this.ProxyPortOption; } set { this.ProxyPortOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ProxyEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ProxyEnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProxyEnabled
        /// </summary>
        [JsonPropertyName("proxyEnabled")]
        public bool? ProxyEnabled { get { return this.ProxyEnabledOption; } set { this.ProxyEnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of LocalHostName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LocalHostNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LocalHostName
        /// </summary>
        [JsonPropertyName("localHostName")]
        public string LocalHostName { get { return this.LocalHostNameOption; } set { this.LocalHostNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Mechanisms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> MechanismsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mechanisms
        /// </summary>
        [JsonPropertyName("mechanisms")]
        public List<string> Mechanisms { get { return this.MechanismsOption; } set { this.MechanismsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of SslProtocols
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> SslProtocolsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SslProtocols
        /// </summary>
        [JsonPropertyName("sslProtocols")]
        public List<string> SslProtocols { get { return this.SslProtocolsOption; } set { this.SslProtocolsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of SslTrust
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SslTrustOption { get; private set; }

        /// <summary>
        /// Gets or Sets SslTrust
        /// </summary>
        [JsonPropertyName("sslTrust")]
        public string SslTrust { get { return this.SslTrustOption; } set { this.SslTrustOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorImapConnectionDto {\n");
            sb.Append("  ConnectorId: ").Append(ConnectorId).Append("\n");
            sb.Append("  ImapHost: ").Append(ImapHost).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImapPort: ").Append(ImapPort).Append("\n");
            sb.Append("  ImapUsername: ").Append(ImapUsername).Append("\n");
            sb.Append("  ImapPassword: ").Append(ImapPassword).Append("\n");
            sb.Append("  ImapSsl: ").Append(ImapSsl).Append("\n");
            sb.Append("  SelectFolder: ").Append(SelectFolder).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("  StartTls: ").Append(StartTls).Append("\n");
            sb.Append("  ProxyHost: ").Append(ProxyHost).Append("\n");
            sb.Append("  ProxyPort: ").Append(ProxyPort).Append("\n");
            sb.Append("  ProxyEnabled: ").Append(ProxyEnabled).Append("\n");
            sb.Append("  LocalHostName: ").Append(LocalHostName).Append("\n");
            sb.Append("  Mechanisms: ").Append(Mechanisms).Append("\n");
            sb.Append("  SslProtocols: ").Append(SslProtocols).Append("\n");
            sb.Append("  SslTrust: ").Append(SslTrust).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConnectorImapConnectionDto" />
    /// </summary>
    public class ConnectorImapConnectionDtoJsonConverter : JsonConverter<ConnectorImapConnectionDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ConnectorImapConnectionDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConnectorImapConnectionDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> connectorId = default;
            Option<string> imapHost = default;
            Option<DateTime?> createdAt = default;
            Option<Guid?> id = default;
            Option<int?> imapPort = default;
            Option<string> imapUsername = default;
            Option<string> imapPassword = default;
            Option<bool?> imapSsl = default;
            Option<string> selectFolder = default;
            Option<string> searchTerms = default;
            Option<bool?> startTls = default;
            Option<string> proxyHost = default;
            Option<int?> proxyPort = default;
            Option<bool?> proxyEnabled = default;
            Option<string> localHostName = default;
            Option<List<string>> mechanisms = default;
            Option<List<string>> sslProtocols = default;
            Option<string> sslTrust = default;
            Option<bool?> enabled = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "connectorId":
                            connectorId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "imapHost":
                            imapHost = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "imapPort":
                            imapPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "imapUsername":
                            imapUsername = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "imapPassword":
                            imapPassword = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "imapSsl":
                            imapSsl = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "selectFolder":
                            selectFolder = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "searchTerms":
                            searchTerms = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "startTls":
                            startTls = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "proxyHost":
                            proxyHost = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "proxyPort":
                            proxyPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "proxyEnabled":
                            proxyEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "localHostName":
                            localHostName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mechanisms":
                            mechanisms = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sslProtocols":
                            sslProtocols = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sslTrust":
                            sslTrust = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!connectorId.IsSet)
                throw new ArgumentException("Property is required for class ConnectorImapConnectionDto.", nameof(connectorId));

            if (!imapHost.IsSet)
                throw new ArgumentException("Property is required for class ConnectorImapConnectionDto.", nameof(imapHost));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class ConnectorImapConnectionDto.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ConnectorImapConnectionDto.", nameof(id));

            if (connectorId.IsSet && connectorId.Value == null)
                throw new ArgumentNullException(nameof(connectorId), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (imapHost.IsSet && imapHost.Value == null)
                throw new ArgumentNullException(nameof(imapHost), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (imapPort.IsSet && imapPort.Value == null)
                throw new ArgumentNullException(nameof(imapPort), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (imapUsername.IsSet && imapUsername.Value == null)
                throw new ArgumentNullException(nameof(imapUsername), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (imapPassword.IsSet && imapPassword.Value == null)
                throw new ArgumentNullException(nameof(imapPassword), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (imapSsl.IsSet && imapSsl.Value == null)
                throw new ArgumentNullException(nameof(imapSsl), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (selectFolder.IsSet && selectFolder.Value == null)
                throw new ArgumentNullException(nameof(selectFolder), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (searchTerms.IsSet && searchTerms.Value == null)
                throw new ArgumentNullException(nameof(searchTerms), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (startTls.IsSet && startTls.Value == null)
                throw new ArgumentNullException(nameof(startTls), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (proxyHost.IsSet && proxyHost.Value == null)
                throw new ArgumentNullException(nameof(proxyHost), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (proxyPort.IsSet && proxyPort.Value == null)
                throw new ArgumentNullException(nameof(proxyPort), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (proxyEnabled.IsSet && proxyEnabled.Value == null)
                throw new ArgumentNullException(nameof(proxyEnabled), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (localHostName.IsSet && localHostName.Value == null)
                throw new ArgumentNullException(nameof(localHostName), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (mechanisms.IsSet && mechanisms.Value == null)
                throw new ArgumentNullException(nameof(mechanisms), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (sslProtocols.IsSet && sslProtocols.Value == null)
                throw new ArgumentNullException(nameof(sslProtocols), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (sslTrust.IsSet && sslTrust.Value == null)
                throw new ArgumentNullException(nameof(sslTrust), "Property is not nullable for class ConnectorImapConnectionDto.");

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class ConnectorImapConnectionDto.");

            return new ConnectorImapConnectionDto(connectorId.Value.Value, imapHost.Value, createdAt.Value.Value, id.Value.Value, imapPort, imapUsername, imapPassword, imapSsl, selectFolder, searchTerms, startTls, proxyHost, proxyPort, proxyEnabled, localHostName, mechanisms, sslProtocols, sslTrust, enabled);
        }

        /// <summary>
        /// Serializes a <see cref="ConnectorImapConnectionDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectorImapConnectionDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConnectorImapConnectionDto connectorImapConnectionDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, connectorImapConnectionDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConnectorImapConnectionDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectorImapConnectionDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ConnectorImapConnectionDto connectorImapConnectionDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (connectorImapConnectionDto.ImapHost == null)
                throw new ArgumentNullException(nameof(connectorImapConnectionDto.ImapHost), "Property is required for class ConnectorImapConnectionDto.");

            if (connectorImapConnectionDto.ImapUsernameOption.IsSet && connectorImapConnectionDto.ImapUsername == null)
                throw new ArgumentNullException(nameof(connectorImapConnectionDto.ImapUsername), "Property is required for class ConnectorImapConnectionDto.");

            if (connectorImapConnectionDto.ImapPasswordOption.IsSet && connectorImapConnectionDto.ImapPassword == null)
                throw new ArgumentNullException(nameof(connectorImapConnectionDto.ImapPassword), "Property is required for class ConnectorImapConnectionDto.");

            if (connectorImapConnectionDto.SelectFolderOption.IsSet && connectorImapConnectionDto.SelectFolder == null)
                throw new ArgumentNullException(nameof(connectorImapConnectionDto.SelectFolder), "Property is required for class ConnectorImapConnectionDto.");

            if (connectorImapConnectionDto.SearchTermsOption.IsSet && connectorImapConnectionDto.SearchTerms == null)
                throw new ArgumentNullException(nameof(connectorImapConnectionDto.SearchTerms), "Property is required for class ConnectorImapConnectionDto.");

            if (connectorImapConnectionDto.ProxyHostOption.IsSet && connectorImapConnectionDto.ProxyHost == null)
                throw new ArgumentNullException(nameof(connectorImapConnectionDto.ProxyHost), "Property is required for class ConnectorImapConnectionDto.");

            if (connectorImapConnectionDto.LocalHostNameOption.IsSet && connectorImapConnectionDto.LocalHostName == null)
                throw new ArgumentNullException(nameof(connectorImapConnectionDto.LocalHostName), "Property is required for class ConnectorImapConnectionDto.");

            if (connectorImapConnectionDto.MechanismsOption.IsSet && connectorImapConnectionDto.Mechanisms == null)
                throw new ArgumentNullException(nameof(connectorImapConnectionDto.Mechanisms), "Property is required for class ConnectorImapConnectionDto.");

            if (connectorImapConnectionDto.SslProtocolsOption.IsSet && connectorImapConnectionDto.SslProtocols == null)
                throw new ArgumentNullException(nameof(connectorImapConnectionDto.SslProtocols), "Property is required for class ConnectorImapConnectionDto.");

            if (connectorImapConnectionDto.SslTrustOption.IsSet && connectorImapConnectionDto.SslTrust == null)
                throw new ArgumentNullException(nameof(connectorImapConnectionDto.SslTrust), "Property is required for class ConnectorImapConnectionDto.");

            writer.WriteString("connectorId", connectorImapConnectionDto.ConnectorId);

            writer.WriteString("imapHost", connectorImapConnectionDto.ImapHost);

            writer.WriteString("createdAt", connectorImapConnectionDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", connectorImapConnectionDto.Id);

            if (connectorImapConnectionDto.ImapPortOption.IsSet)
                writer.WriteNumber("imapPort", connectorImapConnectionDto.ImapPortOption.Value.Value);

            if (connectorImapConnectionDto.ImapUsernameOption.IsSet)
                writer.WriteString("imapUsername", connectorImapConnectionDto.ImapUsername);

            if (connectorImapConnectionDto.ImapPasswordOption.IsSet)
                writer.WriteString("imapPassword", connectorImapConnectionDto.ImapPassword);

            if (connectorImapConnectionDto.ImapSslOption.IsSet)
                writer.WriteBoolean("imapSsl", connectorImapConnectionDto.ImapSslOption.Value.Value);

            if (connectorImapConnectionDto.SelectFolderOption.IsSet)
                writer.WriteString("selectFolder", connectorImapConnectionDto.SelectFolder);

            if (connectorImapConnectionDto.SearchTermsOption.IsSet)
                writer.WriteString("searchTerms", connectorImapConnectionDto.SearchTerms);

            if (connectorImapConnectionDto.StartTlsOption.IsSet)
                writer.WriteBoolean("startTls", connectorImapConnectionDto.StartTlsOption.Value.Value);

            if (connectorImapConnectionDto.ProxyHostOption.IsSet)
                writer.WriteString("proxyHost", connectorImapConnectionDto.ProxyHost);

            if (connectorImapConnectionDto.ProxyPortOption.IsSet)
                writer.WriteNumber("proxyPort", connectorImapConnectionDto.ProxyPortOption.Value.Value);

            if (connectorImapConnectionDto.ProxyEnabledOption.IsSet)
                writer.WriteBoolean("proxyEnabled", connectorImapConnectionDto.ProxyEnabledOption.Value.Value);

            if (connectorImapConnectionDto.LocalHostNameOption.IsSet)
                writer.WriteString("localHostName", connectorImapConnectionDto.LocalHostName);

            if (connectorImapConnectionDto.MechanismsOption.IsSet)
            {
                writer.WritePropertyName("mechanisms");
                JsonSerializer.Serialize(writer, connectorImapConnectionDto.Mechanisms, jsonSerializerOptions);
            }
            if (connectorImapConnectionDto.SslProtocolsOption.IsSet)
            {
                writer.WritePropertyName("sslProtocols");
                JsonSerializer.Serialize(writer, connectorImapConnectionDto.SslProtocols, jsonSerializerOptions);
            }
            if (connectorImapConnectionDto.SslTrustOption.IsSet)
                writer.WriteString("sslTrust", connectorImapConnectionDto.SslTrust);

            if (connectorImapConnectionDto.EnabledOption.IsSet)
                writer.WriteBoolean("enabled", connectorImapConnectionDto.EnabledOption.Value.Value);
        }
    }
}
