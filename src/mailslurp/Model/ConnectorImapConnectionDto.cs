/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorImapConnectionDto
    /// </summary>
    [DataContract(Name = "ConnectorImapConnectionDto")]
    public partial class ConnectorImapConnectionDto : IEquatable<ConnectorImapConnectionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorImapConnectionDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectorImapConnectionDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorImapConnectionDto" /> class.
        /// </summary>
        /// <param name="connectorId">connectorId (required).</param>
        /// <param name="imapHost">imapHost.</param>
        /// <param name="imapPort">imapPort.</param>
        /// <param name="imapUsername">imapUsername.</param>
        /// <param name="imapPassword">imapPassword.</param>
        /// <param name="imapSsl">imapSsl.</param>
        /// <param name="selectFolder">selectFolder.</param>
        /// <param name="searchTerms">searchTerms.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="id">id (required).</param>
        public ConnectorImapConnectionDto(Guid connectorId = default(Guid), string imapHost = default(string), int imapPort = default(int), string imapUsername = default(string), string imapPassword = default(string), bool imapSsl = default(bool), string selectFolder = default(string), string searchTerms = default(string), bool enabled = default(bool), DateTime createdAt = default(DateTime), Guid id = default(Guid))
        {
            this.ConnectorId = connectorId;
            this.CreatedAt = createdAt;
            this.Id = id;
            this.ImapHost = imapHost;
            this.ImapPort = imapPort;
            this.ImapUsername = imapUsername;
            this.ImapPassword = imapPassword;
            this.ImapSsl = imapSsl;
            this.SelectFolder = selectFolder;
            this.SearchTerms = searchTerms;
            this.Enabled = enabled;
        }

        /// <summary>
        /// Gets or Sets ConnectorId
        /// </summary>
        [DataMember(Name = "connectorId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ConnectorId { get; set; }

        /// <summary>
        /// Gets or Sets ImapHost
        /// </summary>
        [DataMember(Name = "imapHost", EmitDefaultValue = false)]
        public string ImapHost { get; set; }

        /// <summary>
        /// Gets or Sets ImapPort
        /// </summary>
        [DataMember(Name = "imapPort", EmitDefaultValue = false)]
        public int ImapPort { get; set; }

        /// <summary>
        /// Gets or Sets ImapUsername
        /// </summary>
        [DataMember(Name = "imapUsername", EmitDefaultValue = false)]
        public string ImapUsername { get; set; }

        /// <summary>
        /// Gets or Sets ImapPassword
        /// </summary>
        [DataMember(Name = "imapPassword", EmitDefaultValue = false)]
        public string ImapPassword { get; set; }

        /// <summary>
        /// Gets or Sets ImapSsl
        /// </summary>
        [DataMember(Name = "imapSsl", EmitDefaultValue = true)]
        public bool ImapSsl { get; set; }

        /// <summary>
        /// Gets or Sets SelectFolder
        /// </summary>
        [DataMember(Name = "selectFolder", EmitDefaultValue = false)]
        public string SelectFolder { get; set; }

        /// <summary>
        /// Gets or Sets SearchTerms
        /// </summary>
        [DataMember(Name = "searchTerms", EmitDefaultValue = false)]
        public string SearchTerms { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorImapConnectionDto {\n");
            sb.Append("  ConnectorId: ").Append(ConnectorId).Append("\n");
            sb.Append("  ImapHost: ").Append(ImapHost).Append("\n");
            sb.Append("  ImapPort: ").Append(ImapPort).Append("\n");
            sb.Append("  ImapUsername: ").Append(ImapUsername).Append("\n");
            sb.Append("  ImapPassword: ").Append(ImapPassword).Append("\n");
            sb.Append("  ImapSsl: ").Append(ImapSsl).Append("\n");
            sb.Append("  SelectFolder: ").Append(SelectFolder).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectorImapConnectionDto);
        }

        /// <summary>
        /// Returns true if ConnectorImapConnectionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectorImapConnectionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorImapConnectionDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConnectorId == input.ConnectorId ||
                    (this.ConnectorId != null &&
                    this.ConnectorId.Equals(input.ConnectorId))
                ) && 
                (
                    this.ImapHost == input.ImapHost ||
                    (this.ImapHost != null &&
                    this.ImapHost.Equals(input.ImapHost))
                ) && 
                (
                    this.ImapPort == input.ImapPort ||
                    this.ImapPort.Equals(input.ImapPort)
                ) && 
                (
                    this.ImapUsername == input.ImapUsername ||
                    (this.ImapUsername != null &&
                    this.ImapUsername.Equals(input.ImapUsername))
                ) && 
                (
                    this.ImapPassword == input.ImapPassword ||
                    (this.ImapPassword != null &&
                    this.ImapPassword.Equals(input.ImapPassword))
                ) && 
                (
                    this.ImapSsl == input.ImapSsl ||
                    this.ImapSsl.Equals(input.ImapSsl)
                ) && 
                (
                    this.SelectFolder == input.SelectFolder ||
                    (this.SelectFolder != null &&
                    this.SelectFolder.Equals(input.SelectFolder))
                ) && 
                (
                    this.SearchTerms == input.SearchTerms ||
                    (this.SearchTerms != null &&
                    this.SearchTerms.Equals(input.SearchTerms))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectorId != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectorId.GetHashCode();
                }
                if (this.ImapHost != null)
                {
                    hashCode = (hashCode * 59) + this.ImapHost.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ImapPort.GetHashCode();
                if (this.ImapUsername != null)
                {
                    hashCode = (hashCode * 59) + this.ImapUsername.GetHashCode();
                }
                if (this.ImapPassword != null)
                {
                    hashCode = (hashCode * 59) + this.ImapPassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ImapSsl.GetHashCode();
                if (this.SelectFolder != null)
                {
                    hashCode = (hashCode * 59) + this.SelectFolder.GetHashCode();
                }
                if (this.SearchTerms != null)
                {
                    hashCode = (hashCode * 59) + this.SearchTerms.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
