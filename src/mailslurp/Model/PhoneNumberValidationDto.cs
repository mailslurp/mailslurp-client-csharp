// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// PhoneNumberValidationDto
    /// </summary>
    public partial class PhoneNumberValidationDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberValidationDto" /> class.
        /// </summary>
        /// <param name="phoneNumber">phoneNumber</param>
        /// <param name="isValid">isValid</param>
        /// <param name="countryCode">countryCode</param>
        /// <param name="countryPrefix">countryPrefix</param>
        /// <param name="validationErrors">validationErrors</param>
        [JsonConstructor]
        public PhoneNumberValidationDto(string phoneNumber, bool isValid, Option<string> countryCode = default, Option<string> countryPrefix = default, Option<List<string>> validationErrors = default)
        {
            PhoneNumber = phoneNumber;
            IsValid = isValid;
            CountryCodeOption = countryCode;
            CountryPrefixOption = countryPrefix;
            ValidationErrorsOption = validationErrors;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [JsonPropertyName("isValid")]
        public bool IsValid { get; set; }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryPrefix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryPrefixOption { get; private set; }

        /// <summary>
        /// Gets or Sets CountryPrefix
        /// </summary>
        [JsonPropertyName("countryPrefix")]
        public string CountryPrefix { get { return this.CountryPrefixOption; } set { this.CountryPrefixOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ValidationErrors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> ValidationErrorsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValidationErrors
        /// </summary>
        [JsonPropertyName("validationErrors")]
        public List<string> ValidationErrors { get { return this.ValidationErrorsOption; } set { this.ValidationErrorsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhoneNumberValidationDto {\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryPrefix: ").Append(CountryPrefix).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PhoneNumberValidationDto" />
    /// </summary>
    public class PhoneNumberValidationDtoJsonConverter : JsonConverter<PhoneNumberValidationDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="PhoneNumberValidationDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PhoneNumberValidationDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> phoneNumber = default;
            Option<bool?> isValid = default;
            Option<string> countryCode = default;
            Option<string> countryPrefix = default;
            Option<List<string>> validationErrors = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "phoneNumber":
                            phoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isValid":
                            isValid = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryPrefix":
                            countryPrefix = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "validationErrors":
                            validationErrors = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!phoneNumber.IsSet)
                throw new ArgumentException("Property is required for class PhoneNumberValidationDto.", nameof(phoneNumber));

            if (!isValid.IsSet)
                throw new ArgumentException("Property is required for class PhoneNumberValidationDto.", nameof(isValid));

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class PhoneNumberValidationDto.");

            if (isValid.IsSet && isValid.Value == null)
                throw new ArgumentNullException(nameof(isValid), "Property is not nullable for class PhoneNumberValidationDto.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class PhoneNumberValidationDto.");

            if (countryPrefix.IsSet && countryPrefix.Value == null)
                throw new ArgumentNullException(nameof(countryPrefix), "Property is not nullable for class PhoneNumberValidationDto.");

            if (validationErrors.IsSet && validationErrors.Value == null)
                throw new ArgumentNullException(nameof(validationErrors), "Property is not nullable for class PhoneNumberValidationDto.");

            return new PhoneNumberValidationDto(phoneNumber.Value, isValid.Value.Value, countryCode, countryPrefix, validationErrors);
        }

        /// <summary>
        /// Serializes a <see cref="PhoneNumberValidationDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="phoneNumberValidationDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PhoneNumberValidationDto phoneNumberValidationDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, phoneNumberValidationDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PhoneNumberValidationDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="phoneNumberValidationDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PhoneNumberValidationDto phoneNumberValidationDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (phoneNumberValidationDto.PhoneNumber == null)
                throw new ArgumentNullException(nameof(phoneNumberValidationDto.PhoneNumber), "Property is required for class PhoneNumberValidationDto.");

            if (phoneNumberValidationDto.CountryCodeOption.IsSet && phoneNumberValidationDto.CountryCode == null)
                throw new ArgumentNullException(nameof(phoneNumberValidationDto.CountryCode), "Property is required for class PhoneNumberValidationDto.");

            if (phoneNumberValidationDto.CountryPrefixOption.IsSet && phoneNumberValidationDto.CountryPrefix == null)
                throw new ArgumentNullException(nameof(phoneNumberValidationDto.CountryPrefix), "Property is required for class PhoneNumberValidationDto.");

            if (phoneNumberValidationDto.ValidationErrorsOption.IsSet && phoneNumberValidationDto.ValidationErrors == null)
                throw new ArgumentNullException(nameof(phoneNumberValidationDto.ValidationErrors), "Property is required for class PhoneNumberValidationDto.");

            writer.WriteString("phoneNumber", phoneNumberValidationDto.PhoneNumber);

            writer.WriteBoolean("isValid", phoneNumberValidationDto.IsValid);

            if (phoneNumberValidationDto.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", phoneNumberValidationDto.CountryCode);

            if (phoneNumberValidationDto.CountryPrefixOption.IsSet)
                writer.WriteString("countryPrefix", phoneNumberValidationDto.CountryPrefix);

            if (phoneNumberValidationDto.ValidationErrorsOption.IsSet)
            {
                writer.WritePropertyName("validationErrors");
                JsonSerializer.Serialize(writer, phoneNumberValidationDto.ValidationErrors, jsonSerializerOptions);
            }
        }
    }
}
