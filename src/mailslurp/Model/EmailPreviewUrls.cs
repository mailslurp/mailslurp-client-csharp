/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// URLs for email body
    /// </summary>
    [DataContract(Name = "EmailPreviewUrls")]
    public partial class EmailPreviewUrls : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailPreviewUrls" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailPreviewUrls() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailPreviewUrls" /> class.
        /// </summary>
        /// <param name="rawSmtpMessageUrl">rawSmtpMessageUrl (required).</param>
        /// <param name="plainHtmlBodyUrl">plainHtmlBodyUrl (required).</param>
        /// <param name="origin">origin (required).</param>
        public EmailPreviewUrls(string rawSmtpMessageUrl = default, string plainHtmlBodyUrl = default, string origin = default)
        {
            // to ensure "rawSmtpMessageUrl" is required (not null)
            if (rawSmtpMessageUrl == null)
            {
                throw new ArgumentNullException("rawSmtpMessageUrl is a required property for EmailPreviewUrls and cannot be null");
            }
            this.RawSmtpMessageUrl = rawSmtpMessageUrl;
            // to ensure "plainHtmlBodyUrl" is required (not null)
            if (plainHtmlBodyUrl == null)
            {
                throw new ArgumentNullException("plainHtmlBodyUrl is a required property for EmailPreviewUrls and cannot be null");
            }
            this.PlainHtmlBodyUrl = plainHtmlBodyUrl;
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new ArgumentNullException("origin is a required property for EmailPreviewUrls and cannot be null");
            }
            this.Origin = origin;
        }

        /// <summary>
        /// Gets or Sets RawSmtpMessageUrl
        /// </summary>
        [DataMember(Name = "rawSmtpMessageUrl", IsRequired = true, EmitDefaultValue = true)]
        public string RawSmtpMessageUrl { get; set; }

        /// <summary>
        /// Gets or Sets PlainHtmlBodyUrl
        /// </summary>
        [DataMember(Name = "plainHtmlBodyUrl", IsRequired = true, EmitDefaultValue = true)]
        public string PlainHtmlBodyUrl { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", IsRequired = true, EmitDefaultValue = true)]
        public string Origin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailPreviewUrls {\n");
            sb.Append("  RawSmtpMessageUrl: ").Append(RawSmtpMessageUrl).Append("\n");
            sb.Append("  PlainHtmlBodyUrl: ").Append(PlainHtmlBodyUrl).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
