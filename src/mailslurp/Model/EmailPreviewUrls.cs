// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// URLs for email body
    /// </summary>
    public partial class EmailPreviewUrls : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailPreviewUrls" /> class.
        /// </summary>
        /// <param name="rawSmtpMessageUrl">rawSmtpMessageUrl</param>
        /// <param name="plainHtmlBodyUrl">plainHtmlBodyUrl</param>
        /// <param name="origin">origin</param>
        [JsonConstructor]
        public EmailPreviewUrls(string rawSmtpMessageUrl, string plainHtmlBodyUrl, string origin)
        {
            RawSmtpMessageUrl = rawSmtpMessageUrl;
            PlainHtmlBodyUrl = plainHtmlBodyUrl;
            Origin = origin;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RawSmtpMessageUrl
        /// </summary>
        [JsonPropertyName("rawSmtpMessageUrl")]
        public string RawSmtpMessageUrl { get; set; }

        /// <summary>
        /// Gets or Sets PlainHtmlBodyUrl
        /// </summary>
        [JsonPropertyName("plainHtmlBodyUrl")]
        public string PlainHtmlBodyUrl { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [JsonPropertyName("origin")]
        public string Origin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailPreviewUrls {\n");
            sb.Append("  RawSmtpMessageUrl: ").Append(RawSmtpMessageUrl).Append("\n");
            sb.Append("  PlainHtmlBodyUrl: ").Append(PlainHtmlBodyUrl).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailPreviewUrls" />
    /// </summary>
    public class EmailPreviewUrlsJsonConverter : JsonConverter<EmailPreviewUrls>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailPreviewUrls" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailPreviewUrls Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> rawSmtpMessageUrl = default;
            Option<string> plainHtmlBodyUrl = default;
            Option<string> origin = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rawSmtpMessageUrl":
                            rawSmtpMessageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "plainHtmlBodyUrl":
                            plainHtmlBodyUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "origin":
                            origin = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!rawSmtpMessageUrl.IsSet)
                throw new ArgumentException("Property is required for class EmailPreviewUrls.", nameof(rawSmtpMessageUrl));

            if (!plainHtmlBodyUrl.IsSet)
                throw new ArgumentException("Property is required for class EmailPreviewUrls.", nameof(plainHtmlBodyUrl));

            if (!origin.IsSet)
                throw new ArgumentException("Property is required for class EmailPreviewUrls.", nameof(origin));

            if (rawSmtpMessageUrl.IsSet && rawSmtpMessageUrl.Value == null)
                throw new ArgumentNullException(nameof(rawSmtpMessageUrl), "Property is not nullable for class EmailPreviewUrls.");

            if (plainHtmlBodyUrl.IsSet && plainHtmlBodyUrl.Value == null)
                throw new ArgumentNullException(nameof(plainHtmlBodyUrl), "Property is not nullable for class EmailPreviewUrls.");

            if (origin.IsSet && origin.Value == null)
                throw new ArgumentNullException(nameof(origin), "Property is not nullable for class EmailPreviewUrls.");

            return new EmailPreviewUrls(rawSmtpMessageUrl.Value, plainHtmlBodyUrl.Value, origin.Value);
        }

        /// <summary>
        /// Serializes a <see cref="EmailPreviewUrls" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailPreviewUrls"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailPreviewUrls emailPreviewUrls, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailPreviewUrls, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailPreviewUrls" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailPreviewUrls"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailPreviewUrls emailPreviewUrls, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailPreviewUrls.RawSmtpMessageUrl == null)
                throw new ArgumentNullException(nameof(emailPreviewUrls.RawSmtpMessageUrl), "Property is required for class EmailPreviewUrls.");

            if (emailPreviewUrls.PlainHtmlBodyUrl == null)
                throw new ArgumentNullException(nameof(emailPreviewUrls.PlainHtmlBodyUrl), "Property is required for class EmailPreviewUrls.");

            if (emailPreviewUrls.Origin == null)
                throw new ArgumentNullException(nameof(emailPreviewUrls.Origin), "Property is required for class EmailPreviewUrls.");

            writer.WriteString("rawSmtpMessageUrl", emailPreviewUrls.RawSmtpMessageUrl);

            writer.WriteString("plainHtmlBodyUrl", emailPreviewUrls.PlainHtmlBodyUrl);

            writer.WriteString("origin", emailPreviewUrls.Origin);
        }
    }
}
