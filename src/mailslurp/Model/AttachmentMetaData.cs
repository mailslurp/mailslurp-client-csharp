// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Meta data associated with an attachment. Attachments are stored as byte blobs so the meta data is stored separately.
    /// </summary>
    public partial class AttachmentMetaData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentMetaData" /> class.
        /// </summary>
        /// <param name="name">Name of attachment if given</param>
        /// <param name="contentType">Content type of attachment such as &#x60;image/png&#x60;</param>
        /// <param name="contentLength">Size of attachment in bytes</param>
        /// <param name="id">ID of attachment. Can be used to with attachment controller endpoints to download attachment or with sending methods to attach to an email.</param>
        /// <param name="contentId">CID of attachment</param>
        [JsonConstructor]
        public AttachmentMetaData(string name, string contentType, long contentLength, string id, Option<string> contentId = default)
        {
            Name = name;
            ContentType = contentType;
            ContentLength = contentLength;
            Id = id;
            ContentIdOption = contentId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of attachment if given
        /// </summary>
        /// <value>Name of attachment if given</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Content type of attachment such as &#x60;image/png&#x60;
        /// </summary>
        /// <value>Content type of attachment such as &#x60;image/png&#x60;</value>
        [JsonPropertyName("contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Size of attachment in bytes
        /// </summary>
        /// <value>Size of attachment in bytes</value>
        [JsonPropertyName("contentLength")]
        public long ContentLength { get; set; }

        /// <summary>
        /// ID of attachment. Can be used to with attachment controller endpoints to download attachment or with sending methods to attach to an email.
        /// </summary>
        /// <value>ID of attachment. Can be used to with attachment controller endpoints to download attachment or with sending methods to attach to an email.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Used to track the state of ContentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContentIdOption { get; private set; }

        /// <summary>
        /// CID of attachment
        /// </summary>
        /// <value>CID of attachment</value>
        [JsonPropertyName("contentId")]
        public string ContentId { get { return this.ContentIdOption; } set { this.ContentIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentMetaData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ContentLength: ").Append(ContentLength).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AttachmentMetaData" />
    /// </summary>
    public class AttachmentMetaDataJsonConverter : JsonConverter<AttachmentMetaData>
    {
        /// <summary>
        /// Deserializes json to <see cref="AttachmentMetaData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AttachmentMetaData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<string> contentType = default;
            Option<long?> contentLength = default;
            Option<string> id = default;
            Option<string> contentId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contentType":
                            contentType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contentLength":
                            contentLength = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contentId":
                            contentId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AttachmentMetaData.", nameof(name));

            if (!contentType.IsSet)
                throw new ArgumentException("Property is required for class AttachmentMetaData.", nameof(contentType));

            if (!contentLength.IsSet)
                throw new ArgumentException("Property is required for class AttachmentMetaData.", nameof(contentLength));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AttachmentMetaData.", nameof(id));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AttachmentMetaData.");

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class AttachmentMetaData.");

            if (contentLength.IsSet && contentLength.Value == null)
                throw new ArgumentNullException(nameof(contentLength), "Property is not nullable for class AttachmentMetaData.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AttachmentMetaData.");

            return new AttachmentMetaData(name.Value, contentType.Value, contentLength.Value.Value, id.Value, contentId);
        }

        /// <summary>
        /// Serializes a <see cref="AttachmentMetaData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentMetaData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AttachmentMetaData attachmentMetaData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, attachmentMetaData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AttachmentMetaData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentMetaData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AttachmentMetaData attachmentMetaData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (attachmentMetaData.Name == null)
                throw new ArgumentNullException(nameof(attachmentMetaData.Name), "Property is required for class AttachmentMetaData.");

            if (attachmentMetaData.ContentType == null)
                throw new ArgumentNullException(nameof(attachmentMetaData.ContentType), "Property is required for class AttachmentMetaData.");

            if (attachmentMetaData.Id == null)
                throw new ArgumentNullException(nameof(attachmentMetaData.Id), "Property is required for class AttachmentMetaData.");

            writer.WriteString("name", attachmentMetaData.Name);

            writer.WriteString("contentType", attachmentMetaData.ContentType);

            writer.WriteNumber("contentLength", attachmentMetaData.ContentLength);

            writer.WriteString("id", attachmentMetaData.Id);

            if (attachmentMetaData.ContentIdOption.IsSet)
                if (attachmentMetaData.ContentIdOption.Value != null)
                    writer.WriteString("contentId", attachmentMetaData.ContentId);
                else
                    writer.WriteNull("contentId");
        }
    }
}
