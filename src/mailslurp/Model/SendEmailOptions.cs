/* 
 * MailSlurp API
 *
 * ## Introduction  [MailSlurp](https://www.mailslurp.com) is an Email API for developers and QA testers. It let's users: - create emails addresses on demand - receive emails and attachments in code - send templated HTML emails  ## About  This page contains the REST API documentation for MailSlurp. All requests require API Key authentication passed as an `x-api-key` header.  Create an account to [get your free API Key](https://app.mailslurp.com/sign-up/).  ## Resources - üîë [Get API Key](https://app.mailslurp.com/sign-up/)                    - üéì [Developer Portal](https://www.mailslurp.com/docs/)           - üì¶ [Library SDKs](https://www.mailslurp.com/docs/) - ‚úçÔ∏è [Code Examples](https://www.mailslurp.com/examples) - ‚ö†Ô∏è [Report an issue](https://drift.me/mailslurp)  ## Explore  
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for sending an email message from an inbox. Must supply either list of &#x60;to&#x60; email addresses or &#x60;toGroups&#x60; list of Contact Group IDs.
    /// </summary>
    [DataContract]
    public partial class SendEmailOptions :  IEquatable<SendEmailOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendEmailOptions" /> class.
        /// </summary>
        /// <param name="attachments">Optional list of attachment IDs to send with this email. You must first upload each attachment separately in order to obtain attachment IDs.</param>
        /// <param name="bcc">Optional list of bcc destination email addresses.</param>
        /// <param name="body">Contents of email. If body contains HTML then set &#x60;isHTML&#x60; to true. You can use moustache template syntax in the body in conjunction with &#x60;toGroup&#x60; contact variables or &#x60;templateVariables&#x60; data..</param>
        /// <param name="cc">Optional list of cc destination email addresses.</param>
        /// <param name="charset">Optional charset.</param>
        /// <param name="from">Optional from address. If not set source inbox address will be used.</param>
        /// <param name="isHTML">Optional HTML flag. If true the &#x60;content-type&#x60; of the email will be &#x60;text/html&#x60;.</param>
        /// <param name="replyTo">Optional replyTo header.</param>
        /// <param name="subject">Optional email subject line.</param>
        /// <param name="template">Optional template ID to use for body. Will override body if provided.</param>
        /// <param name="templateVariables">Optional map of template variables. Will replace moustache syntax variables in subject and body or template with the associated values.</param>
        /// <param name="to">List of destination email addresses. Even single recipients must be in array form. Max 100 recipients..</param>
        /// <param name="toContacts">Optional list of contact IDs to send email to.</param>
        /// <param name="toGroup">Optional contact group ID to send email to.</param>
        public SendEmailOptions(List<string> attachments = default(List<string>), List<string> bcc = default(List<string>), string body = default(string), List<string> cc = default(List<string>), string charset = default(string), string from = default(string), bool isHTML = default(bool), string replyTo = default(string), string subject = default(string), Guid template = default(Guid), Object templateVariables = default(Object), List<string> to = default(List<string>), List<Guid> toContacts = default(List<Guid>), Guid toGroup = default(Guid))
        {
            this.Attachments = attachments;
            this.Bcc = bcc;
            this.Body = body;
            this.Cc = cc;
            this.Charset = charset;
            this.From = from;
            this.IsHTML = isHTML;
            this.ReplyTo = replyTo;
            this.Subject = subject;
            this.Template = template;
            this.TemplateVariables = templateVariables;
            this.To = to;
            this.ToContacts = toContacts;
            this.ToGroup = toGroup;
        }
        
        /// <summary>
        /// Optional list of attachment IDs to send with this email. You must first upload each attachment separately in order to obtain attachment IDs
        /// </summary>
        /// <value>Optional list of attachment IDs to send with this email. You must first upload each attachment separately in order to obtain attachment IDs</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<string> Attachments { get; set; }

        /// <summary>
        /// Optional list of bcc destination email addresses
        /// </summary>
        /// <value>Optional list of bcc destination email addresses</value>
        [DataMember(Name="bcc", EmitDefaultValue=false)]
        public List<string> Bcc { get; set; }

        /// <summary>
        /// Contents of email. If body contains HTML then set &#x60;isHTML&#x60; to true. You can use moustache template syntax in the body in conjunction with &#x60;toGroup&#x60; contact variables or &#x60;templateVariables&#x60; data.
        /// </summary>
        /// <value>Contents of email. If body contains HTML then set &#x60;isHTML&#x60; to true. You can use moustache template syntax in the body in conjunction with &#x60;toGroup&#x60; contact variables or &#x60;templateVariables&#x60; data.</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Optional list of cc destination email addresses
        /// </summary>
        /// <value>Optional list of cc destination email addresses</value>
        [DataMember(Name="cc", EmitDefaultValue=false)]
        public List<string> Cc { get; set; }

        /// <summary>
        /// Optional charset
        /// </summary>
        /// <value>Optional charset</value>
        [DataMember(Name="charset", EmitDefaultValue=false)]
        public string Charset { get; set; }

        /// <summary>
        /// Optional from address. If not set source inbox address will be used
        /// </summary>
        /// <value>Optional from address. If not set source inbox address will be used</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Optional HTML flag. If true the &#x60;content-type&#x60; of the email will be &#x60;text/html&#x60;
        /// </summary>
        /// <value>Optional HTML flag. If true the &#x60;content-type&#x60; of the email will be &#x60;text/html&#x60;</value>
        [DataMember(Name="isHTML", EmitDefaultValue=false)]
        public bool IsHTML { get; set; }

        /// <summary>
        /// Optional replyTo header
        /// </summary>
        /// <value>Optional replyTo header</value>
        [DataMember(Name="replyTo", EmitDefaultValue=false)]
        public string ReplyTo { get; set; }

        /// <summary>
        /// Optional email subject line
        /// </summary>
        /// <value>Optional email subject line</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Optional template ID to use for body. Will override body if provided
        /// </summary>
        /// <value>Optional template ID to use for body. Will override body if provided</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public Guid Template { get; set; }

        /// <summary>
        /// Optional map of template variables. Will replace moustache syntax variables in subject and body or template with the associated values
        /// </summary>
        /// <value>Optional map of template variables. Will replace moustache syntax variables in subject and body or template with the associated values</value>
        [DataMember(Name="templateVariables", EmitDefaultValue=false)]
        public Object TemplateVariables { get; set; }

        /// <summary>
        /// List of destination email addresses. Even single recipients must be in array form. Max 100 recipients.
        /// </summary>
        /// <value>List of destination email addresses. Even single recipients must be in array form. Max 100 recipients.</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<string> To { get; set; }

        /// <summary>
        /// Optional list of contact IDs to send email to
        /// </summary>
        /// <value>Optional list of contact IDs to send email to</value>
        [DataMember(Name="toContacts", EmitDefaultValue=false)]
        public List<Guid> ToContacts { get; set; }

        /// <summary>
        /// Optional contact group ID to send email to
        /// </summary>
        /// <value>Optional contact group ID to send email to</value>
        [DataMember(Name="toGroup", EmitDefaultValue=false)]
        public Guid ToGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendEmailOptions {\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Charset: ").Append(Charset).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  IsHTML: ").Append(IsHTML).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  TemplateVariables: ").Append(TemplateVariables).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ToContacts: ").Append(ToContacts).Append("\n");
            sb.Append("  ToGroup: ").Append(ToGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendEmailOptions);
        }

        /// <summary>
        /// Returns true if SendEmailOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of SendEmailOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendEmailOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    this.Bcc != null &&
                    input.Bcc != null &&
                    this.Bcc.SequenceEqual(input.Bcc)
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Cc == input.Cc ||
                    this.Cc != null &&
                    input.Cc != null &&
                    this.Cc.SequenceEqual(input.Cc)
                ) && 
                (
                    this.Charset == input.Charset ||
                    (this.Charset != null &&
                    this.Charset.Equals(input.Charset))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.IsHTML == input.IsHTML ||
                    (this.IsHTML != null &&
                    this.IsHTML.Equals(input.IsHTML))
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    (this.ReplyTo != null &&
                    this.ReplyTo.Equals(input.ReplyTo))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.TemplateVariables == input.TemplateVariables ||
                    (this.TemplateVariables != null &&
                    this.TemplateVariables.Equals(input.TemplateVariables))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.ToContacts == input.ToContacts ||
                    this.ToContacts != null &&
                    input.ToContacts != null &&
                    this.ToContacts.SequenceEqual(input.ToContacts)
                ) && 
                (
                    this.ToGroup == input.ToGroup ||
                    (this.ToGroup != null &&
                    this.ToGroup.Equals(input.ToGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Charset != null)
                    hashCode = hashCode * 59 + this.Charset.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.IsHTML != null)
                    hashCode = hashCode * 59 + this.IsHTML.GetHashCode();
                if (this.ReplyTo != null)
                    hashCode = hashCode * 59 + this.ReplyTo.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.TemplateVariables != null)
                    hashCode = hashCode * 59 + this.TemplateVariables.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ToContacts != null)
                    hashCode = hashCode * 59 + this.ToContacts.GetHashCode();
                if (this.ToGroup != null)
                    hashCode = hashCode * 59 + this.ToGroup.GetHashCode();
                return hashCode;
            }
        }
    }

}
