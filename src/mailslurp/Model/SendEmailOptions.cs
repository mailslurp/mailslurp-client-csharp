// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for the email to be sent
    /// </summary>
    public partial class SendEmailOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendEmailOptions" /> class.
        /// </summary>
        /// <param name="toContacts">Optional list of contact IDs to send email to. Manage your contacts via the API or dashboard. When contacts are used the email is sent to each contact separately so they will not see other recipients.</param>
        /// <param name="toGroup">Optional contact group ID to send email to. You can create contacts and contact groups in the API or dashboard and use them for email campaigns. When contact groups are used the email is sent to each contact separately so they will not see other recipients</param>
        /// <param name="to">List of destination email addresses. Each email address must be RFC 5322 format. Even single recipients must be in array form. Maximum recipients per email depends on your plan. If you need to send many emails try using contacts or contact groups or use a non standard sendStrategy to ensure that spam filters are not triggered (many recipients in one email can affect your spam rating). Be cautious when sending emails that your recipients exist. High bounce rates (meaning a high percentage of emails cannot be delivered because an address does not exist) can result in account freezing.</param>
        /// <param name="from">Optional from address. Email address is RFC 5322 format and may include a display name and email in angle brackets (&#x60;my@address.com&#x60; or &#x60;My inbox &lt;my@address.com&gt;&#x60;). If no sender is set the source inbox address will be used for this field. If you set &#x60;useInboxName&#x60; to &#x60;true&#x60; the from field will include the inbox name as a display name: &#x60;inbox_name &lt;inbox@address.com&gt;&#x60;. For this to work use the name field when creating an inbox. Beware of potential spam penalties when setting the from field to an address not used by the inbox. Your emails may get blocked by services if you impersonate another address. To use a custom email addresses use a custom domain. You can create domains with the DomainController. The domain must be verified in the dashboard before it can be used.</param>
        /// <param name="fromName">Optional from name if not passed with address. If you set &#x60;useInboxName&#x60; to &#x60;true&#x60; the from field will include the inbox name as a display name</param>
        /// <param name="cc">Optional list of cc destination email addresses</param>
        /// <param name="bcc">Optional list of bcc destination email addresses</param>
        /// <param name="subject">Optional email subject line</param>
        /// <param name="replyTo">Optional replyTo header</param>
        /// <param name="customHeaders">Optional custom headers</param>
        /// <param name="body">Optional contents of email. If body contains HTML then set &#x60;isHTML&#x60; to true to ensure that email clients render it correctly. You can use moustache template syntax in the email body in conjunction with &#x60;toGroup&#x60; contact variables or &#x60;templateVariables&#x60; data. If you need more templating control consider creating a template and using the &#x60;template&#x60; property instead of the body.</param>
        /// <param name="html">Optional HTML flag to indicate that contents is HTML. Set&#39;s a &#x60;content-type: text/html&#x60; for email. (Deprecated: use &#x60;isHTML&#x60; instead.)</param>
        /// <param name="isHTML">Optional HTML flag. If true the &#x60;content-type&#x60; of the email will be &#x60;text/html&#x60;. Set to true when sending HTML to ensure proper rending on email clients</param>
        /// <param name="charset">Optional charset</param>
        /// <param name="attachments">Optional list of attachment IDs to send with this email. You must first upload each attachment separately via method call or dashboard in order to obtain attachment IDs. This way you can reuse attachments with different emails once uploaded. There are several ways to upload that support &#x60;multi-part form&#x60;, &#x60;base64 file encoding&#x60;, and octet stream binary uploads. See the &#x60;UploadController&#x60; for available methods. </param>
        /// <param name="templateVariables">Optional map of template variables. Will replace moustache syntax variables in subject and body or template with the associated values if found.</param>
        /// <param name="template">Optional template ID to use for body. Will override body if provided. When using a template make sure you pass the corresponding map of &#x60;templateVariables&#x60;. You can find which variables are needed by fetching the template itself or viewing it in the dashboard.</param>
        /// <param name="sendStrategy">How an email should be sent based on its recipients</param>
        /// <param name="useInboxName">Use name of inbox as sender email address name. Will construct RFC 5322 email address with &#x60;Inbox name &lt;inbox@address.com&gt;&#x60; if the inbox has a name.</param>
        /// <param name="addTrackingPixel">Add tracking pixel to email</param>
        /// <param name="filterBouncedRecipients">Filter recipients to remove any bounced recipients from to, bcc, and cc before sending</param>
        /// <param name="validateEmailAddresses">Validate recipient email addresses before sending</param>
        /// <param name="ignoreEmptyRecipients">Ignore empty recipients after validation removes all recipients as invalid and fail silently</param>
        /// <param name="isXAmpHtml">Is content AMP4EMAIL compatible. If set will send as x-amp-html part.</param>
        /// <param name="bodyParts">Email body content parts for multipart mime message. Will override body.</param>
        [JsonConstructor]
        public SendEmailOptions(Option<List<Guid>> toContacts = default, Option<Guid?> toGroup = default, Option<List<string>> to = default, Option<string> from = default, Option<string> fromName = default, Option<List<string>> cc = default, Option<List<string>> bcc = default, Option<string> subject = default, Option<string> replyTo = default, Option<Dictionary<string, string>> customHeaders = default, Option<string> body = default, Option<bool?> html = default, Option<bool?> isHTML = default, Option<string> charset = default, Option<List<string>> attachments = default, Option<Dictionary<string, Object>> templateVariables = default, Option<Guid?> template = default, Option<SendStrategyEnum?> sendStrategy = default, Option<bool?> useInboxName = default, Option<bool?> addTrackingPixel = default, Option<bool?> filterBouncedRecipients = default, Option<ValidateEmailAddressesEnum?> validateEmailAddresses = default, Option<bool?> ignoreEmptyRecipients = default, Option<bool?> isXAmpHtml = default, Option<List<SendEmailBodyPart>> bodyParts = default)
        {
            ToContactsOption = toContacts;
            ToGroupOption = toGroup;
            ToOption = to;
            FromOption = from;
            FromNameOption = fromName;
            CcOption = cc;
            BccOption = bcc;
            SubjectOption = subject;
            ReplyToOption = replyTo;
            CustomHeadersOption = customHeaders;
            BodyOption = body;
            HtmlOption = html;
            IsHTMLOption = isHTML;
            CharsetOption = charset;
            AttachmentsOption = attachments;
            TemplateVariablesOption = templateVariables;
            TemplateOption = template;
            SendStrategyOption = sendStrategy;
            UseInboxNameOption = useInboxName;
            AddTrackingPixelOption = addTrackingPixel;
            FilterBouncedRecipientsOption = filterBouncedRecipients;
            ValidateEmailAddressesOption = validateEmailAddresses;
            IgnoreEmptyRecipientsOption = ignoreEmptyRecipients;
            IsXAmpHtmlOption = isXAmpHtml;
            BodyPartsOption = bodyParts;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// How an email should be sent based on its recipients
        /// </summary>
        /// <value>How an email should be sent based on its recipients</value>
        public enum SendStrategyEnum
        {
            /// <summary>
            /// Enum SINGLEMESSAGE for value: SINGLE_MESSAGE
            /// </summary>
            SINGLEMESSAGE = 1
        }

        /// <summary>
        /// Returns a <see cref="SendStrategyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SendStrategyEnum SendStrategyEnumFromString(string value)
        {
            if (value.Equals("SINGLE_MESSAGE"))
                return SendStrategyEnum.SINGLEMESSAGE;

            throw new NotImplementedException($"Could not convert value to type SendStrategyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SendStrategyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SendStrategyEnum? SendStrategyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SINGLE_MESSAGE"))
                return SendStrategyEnum.SINGLEMESSAGE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SendStrategyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SendStrategyEnumToJsonValue(SendStrategyEnum? value)
        {
            if (value == null)
                return null;

            if (value == SendStrategyEnum.SINGLEMESSAGE)
                return "SINGLE_MESSAGE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SendStrategy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SendStrategyEnum?> SendStrategyOption { get; private set; }

        /// <summary>
        /// How an email should be sent based on its recipients
        /// </summary>
        /// <value>How an email should be sent based on its recipients</value>
        [JsonPropertyName("sendStrategy")]
        public SendStrategyEnum? SendStrategy { get { return this.SendStrategyOption; } set { this.SendStrategyOption = new Option<SendStrategyEnum?>(value); } }

        /// <summary>
        /// Validate recipient email addresses before sending
        /// </summary>
        /// <value>Validate recipient email addresses before sending</value>
        public enum ValidateEmailAddressesEnum
        {
            /// <summary>
            /// Enum VALIDATEFILTERREMOVEINVALID for value: VALIDATE_FILTER_REMOVE_INVALID
            /// </summary>
            VALIDATEFILTERREMOVEINVALID = 1,

            /// <summary>
            /// Enum VALIDATEERRORIFINVALID for value: VALIDATE_ERROR_IF_INVALID
            /// </summary>
            VALIDATEERRORIFINVALID = 2,

            /// <summary>
            /// Enum NOVALIDATION for value: NO_VALIDATION
            /// </summary>
            NOVALIDATION = 3
        }

        /// <summary>
        /// Returns a <see cref="ValidateEmailAddressesEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ValidateEmailAddressesEnum ValidateEmailAddressesEnumFromString(string value)
        {
            if (value.Equals("VALIDATE_FILTER_REMOVE_INVALID"))
                return ValidateEmailAddressesEnum.VALIDATEFILTERREMOVEINVALID;

            if (value.Equals("VALIDATE_ERROR_IF_INVALID"))
                return ValidateEmailAddressesEnum.VALIDATEERRORIFINVALID;

            if (value.Equals("NO_VALIDATION"))
                return ValidateEmailAddressesEnum.NOVALIDATION;

            throw new NotImplementedException($"Could not convert value to type ValidateEmailAddressesEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ValidateEmailAddressesEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ValidateEmailAddressesEnum? ValidateEmailAddressesEnumFromStringOrDefault(string value)
        {
            if (value.Equals("VALIDATE_FILTER_REMOVE_INVALID"))
                return ValidateEmailAddressesEnum.VALIDATEFILTERREMOVEINVALID;

            if (value.Equals("VALIDATE_ERROR_IF_INVALID"))
                return ValidateEmailAddressesEnum.VALIDATEERRORIFINVALID;

            if (value.Equals("NO_VALIDATION"))
                return ValidateEmailAddressesEnum.NOVALIDATION;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ValidateEmailAddressesEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ValidateEmailAddressesEnumToJsonValue(ValidateEmailAddressesEnum? value)
        {
            if (value == null)
                return null;

            if (value == ValidateEmailAddressesEnum.VALIDATEFILTERREMOVEINVALID)
                return "VALIDATE_FILTER_REMOVE_INVALID";

            if (value == ValidateEmailAddressesEnum.VALIDATEERRORIFINVALID)
                return "VALIDATE_ERROR_IF_INVALID";

            if (value == ValidateEmailAddressesEnum.NOVALIDATION)
                return "NO_VALIDATION";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ValidateEmailAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ValidateEmailAddressesEnum?> ValidateEmailAddressesOption { get; private set; }

        /// <summary>
        /// Validate recipient email addresses before sending
        /// </summary>
        /// <value>Validate recipient email addresses before sending</value>
        [JsonPropertyName("validateEmailAddresses")]
        public ValidateEmailAddressesEnum? ValidateEmailAddresses { get { return this.ValidateEmailAddressesOption; } set { this.ValidateEmailAddressesOption = new Option<ValidateEmailAddressesEnum?>(value); } }

        /// <summary>
        /// Used to track the state of ToContacts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>> ToContactsOption { get; private set; }

        /// <summary>
        /// Optional list of contact IDs to send email to. Manage your contacts via the API or dashboard. When contacts are used the email is sent to each contact separately so they will not see other recipients.
        /// </summary>
        /// <value>Optional list of contact IDs to send email to. Manage your contacts via the API or dashboard. When contacts are used the email is sent to each contact separately so they will not see other recipients.</value>
        [JsonPropertyName("toContacts")]
        public List<Guid> ToContacts { get { return this.ToContactsOption; } set { this.ToContactsOption = new Option<List<Guid>>(value); } }

        /// <summary>
        /// Used to track the state of ToGroup
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ToGroupOption { get; private set; }

        /// <summary>
        /// Optional contact group ID to send email to. You can create contacts and contact groups in the API or dashboard and use them for email campaigns. When contact groups are used the email is sent to each contact separately so they will not see other recipients
        /// </summary>
        /// <value>Optional contact group ID to send email to. You can create contacts and contact groups in the API or dashboard and use them for email campaigns. When contact groups are used the email is sent to each contact separately so they will not see other recipients</value>
        [JsonPropertyName("toGroup")]
        public Guid? ToGroup { get { return this.ToGroupOption; } set { this.ToGroupOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of To
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> ToOption { get; private set; }

        /// <summary>
        /// List of destination email addresses. Each email address must be RFC 5322 format. Even single recipients must be in array form. Maximum recipients per email depends on your plan. If you need to send many emails try using contacts or contact groups or use a non standard sendStrategy to ensure that spam filters are not triggered (many recipients in one email can affect your spam rating). Be cautious when sending emails that your recipients exist. High bounce rates (meaning a high percentage of emails cannot be delivered because an address does not exist) can result in account freezing.
        /// </summary>
        /// <value>List of destination email addresses. Each email address must be RFC 5322 format. Even single recipients must be in array form. Maximum recipients per email depends on your plan. If you need to send many emails try using contacts or contact groups or use a non standard sendStrategy to ensure that spam filters are not triggered (many recipients in one email can affect your spam rating). Be cautious when sending emails that your recipients exist. High bounce rates (meaning a high percentage of emails cannot be delivered because an address does not exist) can result in account freezing.</value>
        [JsonPropertyName("to")]
        public List<string> To { get { return this.ToOption; } set { this.ToOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// Optional from address. Email address is RFC 5322 format and may include a display name and email in angle brackets (&#x60;my@address.com&#x60; or &#x60;My inbox &lt;my@address.com&gt;&#x60;). If no sender is set the source inbox address will be used for this field. If you set &#x60;useInboxName&#x60; to &#x60;true&#x60; the from field will include the inbox name as a display name: &#x60;inbox_name &lt;inbox@address.com&gt;&#x60;. For this to work use the name field when creating an inbox. Beware of potential spam penalties when setting the from field to an address not used by the inbox. Your emails may get blocked by services if you impersonate another address. To use a custom email addresses use a custom domain. You can create domains with the DomainController. The domain must be verified in the dashboard before it can be used.
        /// </summary>
        /// <value>Optional from address. Email address is RFC 5322 format and may include a display name and email in angle brackets (&#x60;my@address.com&#x60; or &#x60;My inbox &lt;my@address.com&gt;&#x60;). If no sender is set the source inbox address will be used for this field. If you set &#x60;useInboxName&#x60; to &#x60;true&#x60; the from field will include the inbox name as a display name: &#x60;inbox_name &lt;inbox@address.com&gt;&#x60;. For this to work use the name field when creating an inbox. Beware of potential spam penalties when setting the from field to an address not used by the inbox. Your emails may get blocked by services if you impersonate another address. To use a custom email addresses use a custom domain. You can create domains with the DomainController. The domain must be verified in the dashboard before it can be used.</value>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FromName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromNameOption { get; private set; }

        /// <summary>
        /// Optional from name if not passed with address. If you set &#x60;useInboxName&#x60; to &#x60;true&#x60; the from field will include the inbox name as a display name
        /// </summary>
        /// <value>Optional from name if not passed with address. If you set &#x60;useInboxName&#x60; to &#x60;true&#x60; the from field will include the inbox name as a display name</value>
        [JsonPropertyName("fromName")]
        public string FromName { get { return this.FromNameOption; } set { this.FromNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CcOption { get; private set; }

        /// <summary>
        /// Optional list of cc destination email addresses
        /// </summary>
        /// <value>Optional list of cc destination email addresses</value>
        [JsonPropertyName("cc")]
        public List<string> Cc { get { return this.CcOption; } set { this.CcOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BccOption { get; private set; }

        /// <summary>
        /// Optional list of bcc destination email addresses
        /// </summary>
        /// <value>Optional list of bcc destination email addresses</value>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get { return this.BccOption; } set { this.BccOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Optional email subject line
        /// </summary>
        /// <value>Optional email subject line</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReplyToOption { get; private set; }

        /// <summary>
        /// Optional replyTo header
        /// </summary>
        /// <value>Optional replyTo header</value>
        [JsonPropertyName("replyTo")]
        public string ReplyTo { get { return this.ReplyToOption; } set { this.ReplyToOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CustomHeaders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> CustomHeadersOption { get; private set; }

        /// <summary>
        /// Optional custom headers
        /// </summary>
        /// <value>Optional custom headers</value>
        [JsonPropertyName("customHeaders")]
        public Dictionary<string, string> CustomHeaders { get { return this.CustomHeadersOption; } set { this.CustomHeadersOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyOption { get; private set; }

        /// <summary>
        /// Optional contents of email. If body contains HTML then set &#x60;isHTML&#x60; to true to ensure that email clients render it correctly. You can use moustache template syntax in the email body in conjunction with &#x60;toGroup&#x60; contact variables or &#x60;templateVariables&#x60; data. If you need more templating control consider creating a template and using the &#x60;template&#x60; property instead of the body.
        /// </summary>
        /// <value>Optional contents of email. If body contains HTML then set &#x60;isHTML&#x60; to true to ensure that email clients render it correctly. You can use moustache template syntax in the email body in conjunction with &#x60;toGroup&#x60; contact variables or &#x60;templateVariables&#x60; data. If you need more templating control consider creating a template and using the &#x60;template&#x60; property instead of the body.</value>
        [JsonPropertyName("body")]
        public string Body { get { return this.BodyOption; } set { this.BodyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Html
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HtmlOption { get; private set; }

        /// <summary>
        /// Optional HTML flag to indicate that contents is HTML. Set&#39;s a &#x60;content-type: text/html&#x60; for email. (Deprecated: use &#x60;isHTML&#x60; instead.)
        /// </summary>
        /// <value>Optional HTML flag to indicate that contents is HTML. Set&#39;s a &#x60;content-type: text/html&#x60; for email. (Deprecated: use &#x60;isHTML&#x60; instead.)</value>
        [JsonPropertyName("html")]
        public bool? Html { get { return this.HtmlOption; } set { this.HtmlOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsHTML
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsHTMLOption { get; private set; }

        /// <summary>
        /// Optional HTML flag. If true the &#x60;content-type&#x60; of the email will be &#x60;text/html&#x60;. Set to true when sending HTML to ensure proper rending on email clients
        /// </summary>
        /// <value>Optional HTML flag. If true the &#x60;content-type&#x60; of the email will be &#x60;text/html&#x60;. Set to true when sending HTML to ensure proper rending on email clients</value>
        [JsonPropertyName("isHTML")]
        public bool? IsHTML { get { return this.IsHTMLOption; } set { this.IsHTMLOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Charset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CharsetOption { get; private set; }

        /// <summary>
        /// Optional charset
        /// </summary>
        /// <value>Optional charset</value>
        [JsonPropertyName("charset")]
        public string Charset { get { return this.CharsetOption; } set { this.CharsetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> AttachmentsOption { get; private set; }

        /// <summary>
        /// Optional list of attachment IDs to send with this email. You must first upload each attachment separately via method call or dashboard in order to obtain attachment IDs. This way you can reuse attachments with different emails once uploaded. There are several ways to upload that support &#x60;multi-part form&#x60;, &#x60;base64 file encoding&#x60;, and octet stream binary uploads. See the &#x60;UploadController&#x60; for available methods. 
        /// </summary>
        /// <value>Optional list of attachment IDs to send with this email. You must first upload each attachment separately via method call or dashboard in order to obtain attachment IDs. This way you can reuse attachments with different emails once uploaded. There are several ways to upload that support &#x60;multi-part form&#x60;, &#x60;base64 file encoding&#x60;, and octet stream binary uploads. See the &#x60;UploadController&#x60; for available methods. </value>
        [JsonPropertyName("attachments")]
        public List<string> Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of TemplateVariables
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>> TemplateVariablesOption { get; private set; }

        /// <summary>
        /// Optional map of template variables. Will replace moustache syntax variables in subject and body or template with the associated values if found.
        /// </summary>
        /// <value>Optional map of template variables. Will replace moustache syntax variables in subject and body or template with the associated values if found.</value>
        [JsonPropertyName("templateVariables")]
        public Dictionary<string, Object> TemplateVariables { get { return this.TemplateVariablesOption; } set { this.TemplateVariablesOption = new Option<Dictionary<string, Object>>(value); } }

        /// <summary>
        /// Used to track the state of Template
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> TemplateOption { get; private set; }

        /// <summary>
        /// Optional template ID to use for body. Will override body if provided. When using a template make sure you pass the corresponding map of &#x60;templateVariables&#x60;. You can find which variables are needed by fetching the template itself or viewing it in the dashboard.
        /// </summary>
        /// <value>Optional template ID to use for body. Will override body if provided. When using a template make sure you pass the corresponding map of &#x60;templateVariables&#x60;. You can find which variables are needed by fetching the template itself or viewing it in the dashboard.</value>
        [JsonPropertyName("template")]
        public Guid? Template { get { return this.TemplateOption; } set { this.TemplateOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of UseInboxName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseInboxNameOption { get; private set; }

        /// <summary>
        /// Use name of inbox as sender email address name. Will construct RFC 5322 email address with &#x60;Inbox name &lt;inbox@address.com&gt;&#x60; if the inbox has a name.
        /// </summary>
        /// <value>Use name of inbox as sender email address name. Will construct RFC 5322 email address with &#x60;Inbox name &lt;inbox@address.com&gt;&#x60; if the inbox has a name.</value>
        [JsonPropertyName("useInboxName")]
        public bool? UseInboxName { get { return this.UseInboxNameOption; } set { this.UseInboxNameOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of AddTrackingPixel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AddTrackingPixelOption { get; private set; }

        /// <summary>
        /// Add tracking pixel to email
        /// </summary>
        /// <value>Add tracking pixel to email</value>
        [JsonPropertyName("addTrackingPixel")]
        public bool? AddTrackingPixel { get { return this.AddTrackingPixelOption; } set { this.AddTrackingPixelOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of FilterBouncedRecipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FilterBouncedRecipientsOption { get; private set; }

        /// <summary>
        /// Filter recipients to remove any bounced recipients from to, bcc, and cc before sending
        /// </summary>
        /// <value>Filter recipients to remove any bounced recipients from to, bcc, and cc before sending</value>
        [JsonPropertyName("filterBouncedRecipients")]
        public bool? FilterBouncedRecipients { get { return this.FilterBouncedRecipientsOption; } set { this.FilterBouncedRecipientsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IgnoreEmptyRecipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IgnoreEmptyRecipientsOption { get; private set; }

        /// <summary>
        /// Ignore empty recipients after validation removes all recipients as invalid and fail silently
        /// </summary>
        /// <value>Ignore empty recipients after validation removes all recipients as invalid and fail silently</value>
        [JsonPropertyName("ignoreEmptyRecipients")]
        public bool? IgnoreEmptyRecipients { get { return this.IgnoreEmptyRecipientsOption; } set { this.IgnoreEmptyRecipientsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsXAmpHtml
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsXAmpHtmlOption { get; private set; }

        /// <summary>
        /// Is content AMP4EMAIL compatible. If set will send as x-amp-html part.
        /// </summary>
        /// <value>Is content AMP4EMAIL compatible. If set will send as x-amp-html part.</value>
        [JsonPropertyName("isXAmpHtml")]
        public bool? IsXAmpHtml { get { return this.IsXAmpHtmlOption; } set { this.IsXAmpHtmlOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of BodyParts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SendEmailBodyPart>> BodyPartsOption { get; private set; }

        /// <summary>
        /// Email body content parts for multipart mime message. Will override body.
        /// </summary>
        /// <value>Email body content parts for multipart mime message. Will override body.</value>
        [JsonPropertyName("bodyParts")]
        public List<SendEmailBodyPart> BodyParts { get { return this.BodyPartsOption; } set { this.BodyPartsOption = new Option<List<SendEmailBodyPart>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendEmailOptions {\n");
            sb.Append("  ToContacts: ").Append(ToContacts).Append("\n");
            sb.Append("  ToGroup: ").Append(ToGroup).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromName: ").Append(FromName).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  CustomHeaders: ").Append(CustomHeaders).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  IsHTML: ").Append(IsHTML).Append("\n");
            sb.Append("  Charset: ").Append(Charset).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  TemplateVariables: ").Append(TemplateVariables).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  SendStrategy: ").Append(SendStrategy).Append("\n");
            sb.Append("  UseInboxName: ").Append(UseInboxName).Append("\n");
            sb.Append("  AddTrackingPixel: ").Append(AddTrackingPixel).Append("\n");
            sb.Append("  FilterBouncedRecipients: ").Append(FilterBouncedRecipients).Append("\n");
            sb.Append("  ValidateEmailAddresses: ").Append(ValidateEmailAddresses).Append("\n");
            sb.Append("  IgnoreEmptyRecipients: ").Append(IgnoreEmptyRecipients).Append("\n");
            sb.Append("  IsXAmpHtml: ").Append(IsXAmpHtml).Append("\n");
            sb.Append("  BodyParts: ").Append(BodyParts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendEmailOptions" />
    /// </summary>
    public class SendEmailOptionsJsonConverter : JsonConverter<SendEmailOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendEmailOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendEmailOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Guid>> toContacts = default;
            Option<Guid?> toGroup = default;
            Option<List<string>> to = default;
            Option<string> from = default;
            Option<string> fromName = default;
            Option<List<string>> cc = default;
            Option<List<string>> bcc = default;
            Option<string> subject = default;
            Option<string> replyTo = default;
            Option<Dictionary<string, string>> customHeaders = default;
            Option<string> body = default;
            Option<bool?> html = default;
            Option<bool?> isHTML = default;
            Option<string> charset = default;
            Option<List<string>> attachments = default;
            Option<Dictionary<string, Object>> templateVariables = default;
            Option<Guid?> template = default;
            Option<SendEmailOptions.SendStrategyEnum?> sendStrategy = default;
            Option<bool?> useInboxName = default;
            Option<bool?> addTrackingPixel = default;
            Option<bool?> filterBouncedRecipients = default;
            Option<SendEmailOptions.ValidateEmailAddressesEnum?> validateEmailAddresses = default;
            Option<bool?> ignoreEmptyRecipients = default;
            Option<bool?> isXAmpHtml = default;
            Option<List<SendEmailBodyPart>> bodyParts = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "toContacts":
                            toContacts = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "toGroup":
                            toGroup = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fromName":
                            fromName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "replyTo":
                            replyTo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "customHeaders":
                            customHeaders = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "html":
                            html = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isHTML":
                            isHTML = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "charset":
                            charset = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "attachments":
                            attachments = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "templateVariables":
                            templateVariables = new Option<Dictionary<string, Object>>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "template":
                            template = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sendStrategy":
                            string sendStrategyRawValue = utf8JsonReader.GetString();
                            if (sendStrategyRawValue != null)
                                sendStrategy = new Option<SendEmailOptions.SendStrategyEnum?>(SendEmailOptions.SendStrategyEnumFromStringOrDefault(sendStrategyRawValue));
                            break;
                        case "useInboxName":
                            useInboxName = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "addTrackingPixel":
                            addTrackingPixel = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "filterBouncedRecipients":
                            filterBouncedRecipients = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "validateEmailAddresses":
                            string validateEmailAddressesRawValue = utf8JsonReader.GetString();
                            if (validateEmailAddressesRawValue != null)
                                validateEmailAddresses = new Option<SendEmailOptions.ValidateEmailAddressesEnum?>(SendEmailOptions.ValidateEmailAddressesEnumFromStringOrDefault(validateEmailAddressesRawValue));
                            break;
                        case "ignoreEmptyRecipients":
                            ignoreEmptyRecipients = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isXAmpHtml":
                            isXAmpHtml = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "bodyParts":
                            bodyParts = new Option<List<SendEmailBodyPart>>(JsonSerializer.Deserialize<List<SendEmailBodyPart>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new SendEmailOptions(toContacts, toGroup, to, from, fromName, cc, bcc, subject, replyTo, customHeaders, body, html, isHTML, charset, attachments, templateVariables, template, sendStrategy, useInboxName, addTrackingPixel, filterBouncedRecipients, validateEmailAddresses, ignoreEmptyRecipients, isXAmpHtml, bodyParts);
        }

        /// <summary>
        /// Serializes a <see cref="SendEmailOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendEmailOptions sendEmailOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendEmailOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendEmailOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendEmailOptions sendEmailOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendEmailOptions.ToContactsOption.IsSet)
                if (sendEmailOptions.ToContactsOption.Value != null)
                {
                    writer.WritePropertyName("toContacts");
                    JsonSerializer.Serialize(writer, sendEmailOptions.ToContacts, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("toContacts");
            if (sendEmailOptions.ToGroupOption.IsSet)
                if (sendEmailOptions.ToGroupOption.Value != null)
                    writer.WriteString("toGroup", sendEmailOptions.ToGroupOption.Value.Value);
                else
                    writer.WriteNull("toGroup");

            if (sendEmailOptions.ToOption.IsSet)
                if (sendEmailOptions.ToOption.Value != null)
                {
                    writer.WritePropertyName("to");
                    JsonSerializer.Serialize(writer, sendEmailOptions.To, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("to");
            if (sendEmailOptions.FromOption.IsSet)
                if (sendEmailOptions.FromOption.Value != null)
                    writer.WriteString("from", sendEmailOptions.From);
                else
                    writer.WriteNull("from");

            if (sendEmailOptions.FromNameOption.IsSet)
                if (sendEmailOptions.FromNameOption.Value != null)
                    writer.WriteString("fromName", sendEmailOptions.FromName);
                else
                    writer.WriteNull("fromName");

            if (sendEmailOptions.CcOption.IsSet)
                if (sendEmailOptions.CcOption.Value != null)
                {
                    writer.WritePropertyName("cc");
                    JsonSerializer.Serialize(writer, sendEmailOptions.Cc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("cc");
            if (sendEmailOptions.BccOption.IsSet)
                if (sendEmailOptions.BccOption.Value != null)
                {
                    writer.WritePropertyName("bcc");
                    JsonSerializer.Serialize(writer, sendEmailOptions.Bcc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("bcc");
            if (sendEmailOptions.SubjectOption.IsSet)
                if (sendEmailOptions.SubjectOption.Value != null)
                    writer.WriteString("subject", sendEmailOptions.Subject);
                else
                    writer.WriteNull("subject");

            if (sendEmailOptions.ReplyToOption.IsSet)
                if (sendEmailOptions.ReplyToOption.Value != null)
                    writer.WriteString("replyTo", sendEmailOptions.ReplyTo);
                else
                    writer.WriteNull("replyTo");

            if (sendEmailOptions.CustomHeadersOption.IsSet)
                if (sendEmailOptions.CustomHeadersOption.Value != null)
                {
                    writer.WritePropertyName("customHeaders");
                    JsonSerializer.Serialize(writer, sendEmailOptions.CustomHeaders, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("customHeaders");
            if (sendEmailOptions.BodyOption.IsSet)
                if (sendEmailOptions.BodyOption.Value != null)
                    writer.WriteString("body", sendEmailOptions.Body);
                else
                    writer.WriteNull("body");

            if (sendEmailOptions.HtmlOption.IsSet)
                if (sendEmailOptions.HtmlOption.Value != null)
                    writer.WriteBoolean("html", sendEmailOptions.HtmlOption.Value.Value);
                else
                    writer.WriteNull("html");

            if (sendEmailOptions.IsHTMLOption.IsSet)
                if (sendEmailOptions.IsHTMLOption.Value != null)
                    writer.WriteBoolean("isHTML", sendEmailOptions.IsHTMLOption.Value.Value);
                else
                    writer.WriteNull("isHTML");

            if (sendEmailOptions.CharsetOption.IsSet)
                if (sendEmailOptions.CharsetOption.Value != null)
                    writer.WriteString("charset", sendEmailOptions.Charset);
                else
                    writer.WriteNull("charset");

            if (sendEmailOptions.AttachmentsOption.IsSet)
                if (sendEmailOptions.AttachmentsOption.Value != null)
                {
                    writer.WritePropertyName("attachments");
                    JsonSerializer.Serialize(writer, sendEmailOptions.Attachments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachments");
            if (sendEmailOptions.TemplateVariablesOption.IsSet)
                if (sendEmailOptions.TemplateVariablesOption.Value != null)
                {
                    writer.WritePropertyName("templateVariables");
                    JsonSerializer.Serialize(writer, sendEmailOptions.TemplateVariables, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("templateVariables");
            if (sendEmailOptions.TemplateOption.IsSet)
                if (sendEmailOptions.TemplateOption.Value != null)
                    writer.WriteString("template", sendEmailOptions.TemplateOption.Value.Value);
                else
                    writer.WriteNull("template");

            var sendStrategyRawValue = SendEmailOptions.SendStrategyEnumToJsonValue(sendEmailOptions.SendStrategyOption.Value.Value);
            if (sendStrategyRawValue != null)
                writer.WriteString("sendStrategy", sendStrategyRawValue);
            else
                writer.WriteNull("sendStrategy");

            if (sendEmailOptions.UseInboxNameOption.IsSet)
                if (sendEmailOptions.UseInboxNameOption.Value != null)
                    writer.WriteBoolean("useInboxName", sendEmailOptions.UseInboxNameOption.Value.Value);
                else
                    writer.WriteNull("useInboxName");

            if (sendEmailOptions.AddTrackingPixelOption.IsSet)
                if (sendEmailOptions.AddTrackingPixelOption.Value != null)
                    writer.WriteBoolean("addTrackingPixel", sendEmailOptions.AddTrackingPixelOption.Value.Value);
                else
                    writer.WriteNull("addTrackingPixel");

            if (sendEmailOptions.FilterBouncedRecipientsOption.IsSet)
                if (sendEmailOptions.FilterBouncedRecipientsOption.Value != null)
                    writer.WriteBoolean("filterBouncedRecipients", sendEmailOptions.FilterBouncedRecipientsOption.Value.Value);
                else
                    writer.WriteNull("filterBouncedRecipients");

            var validateEmailAddressesRawValue = SendEmailOptions.ValidateEmailAddressesEnumToJsonValue(sendEmailOptions.ValidateEmailAddressesOption.Value.Value);
            if (validateEmailAddressesRawValue != null)
                writer.WriteString("validateEmailAddresses", validateEmailAddressesRawValue);
            else
                writer.WriteNull("validateEmailAddresses");

            if (sendEmailOptions.IgnoreEmptyRecipientsOption.IsSet)
                if (sendEmailOptions.IgnoreEmptyRecipientsOption.Value != null)
                    writer.WriteBoolean("ignoreEmptyRecipients", sendEmailOptions.IgnoreEmptyRecipientsOption.Value.Value);
                else
                    writer.WriteNull("ignoreEmptyRecipients");

            if (sendEmailOptions.IsXAmpHtmlOption.IsSet)
                if (sendEmailOptions.IsXAmpHtmlOption.Value != null)
                    writer.WriteBoolean("isXAmpHtml", sendEmailOptions.IsXAmpHtmlOption.Value.Value);
                else
                    writer.WriteNull("isXAmpHtml");

            if (sendEmailOptions.BodyPartsOption.IsSet)
                if (sendEmailOptions.BodyPartsOption.Value != null)
                {
                    writer.WritePropertyName("bodyParts");
                    JsonSerializer.Serialize(writer, sendEmailOptions.BodyParts, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("bodyParts");
        }
    }
}
