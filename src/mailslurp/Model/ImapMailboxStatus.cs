// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ImapMailboxStatus
    /// </summary>
    public partial class ImapMailboxStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapMailboxStatus" /> class.
        /// </summary>
        /// <param name="name">The mailbox name.</param>
        /// <param name="readOnly">True if the mailbox is open in read-only mode.</param>
        /// <param name="unseenSeqNum">The sequence number of the first unseen message in the mailbox.</param>
        /// <param name="messages">The number of messages in this mailbox.</param>
        /// <param name="recent">The number of messages not seen since the last time the mailbox was opened.</param>
        /// <param name="unseen">The number of unread messages.</param>
        /// <param name="uidNext">The next UID.</param>
        /// <param name="uidValidity">Together with a UID, it is a unique identifier for a message. Must be greater than or equal to 1.</param>
        /// <param name="items">Results map</param>
        /// <param name="flags">The mailbox flags.</param>
        /// <param name="permanentFlags">The mailbox permanent flags.</param>
        /// <param name="appendLimit">Per-mailbox limit of message size. Set only if server supports the APPENDLIMIT extension</param>
        [JsonConstructor]
        public ImapMailboxStatus(string name, bool readOnly, long unseenSeqNum, int messages, int recent, int unseen, long uidNext, int uidValidity, Object items = default, List<string> flags = default, List<string> permanentFlags = default, Option<int?> appendLimit = default)
        {
            Name = name;
            ReadOnly = readOnly;
            UnseenSeqNum = unseenSeqNum;
            Messages = messages;
            Recent = recent;
            Unseen = unseen;
            UidNext = uidNext;
            UidValidity = uidValidity;
            Items = items;
            Flags = flags;
            PermanentFlags = permanentFlags;
            AppendLimitOption = appendLimit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The mailbox name.
        /// </summary>
        /// <value>The mailbox name.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// True if the mailbox is open in read-only mode.
        /// </summary>
        /// <value>True if the mailbox is open in read-only mode.</value>
        [JsonPropertyName("readOnly")]
        public bool ReadOnly { get; set; }

        /// <summary>
        /// The sequence number of the first unseen message in the mailbox.
        /// </summary>
        /// <value>The sequence number of the first unseen message in the mailbox.</value>
        [JsonPropertyName("unseenSeqNum")]
        public long UnseenSeqNum { get; set; }

        /// <summary>
        /// The number of messages in this mailbox.
        /// </summary>
        /// <value>The number of messages in this mailbox.</value>
        [JsonPropertyName("messages")]
        public int Messages { get; set; }

        /// <summary>
        /// The number of messages not seen since the last time the mailbox was opened.
        /// </summary>
        /// <value>The number of messages not seen since the last time the mailbox was opened.</value>
        [JsonPropertyName("recent")]
        public int Recent { get; set; }

        /// <summary>
        /// The number of unread messages.
        /// </summary>
        /// <value>The number of unread messages.</value>
        [JsonPropertyName("unseen")]
        public int Unseen { get; set; }

        /// <summary>
        /// The next UID.
        /// </summary>
        /// <value>The next UID.</value>
        [JsonPropertyName("uidNext")]
        public long UidNext { get; set; }

        /// <summary>
        /// Together with a UID, it is a unique identifier for a message. Must be greater than or equal to 1.
        /// </summary>
        /// <value>Together with a UID, it is a unique identifier for a message. Must be greater than or equal to 1.</value>
        [JsonPropertyName("uidValidity")]
        public int UidValidity { get; set; }

        /// <summary>
        /// Results map
        /// </summary>
        /// <value>Results map</value>
        [JsonPropertyName("items")]
        public Object Items { get; set; }

        /// <summary>
        /// The mailbox flags.
        /// </summary>
        /// <value>The mailbox flags.</value>
        [JsonPropertyName("flags")]
        public List<string> Flags { get; set; }

        /// <summary>
        /// The mailbox permanent flags.
        /// </summary>
        /// <value>The mailbox permanent flags.</value>
        [JsonPropertyName("permanentFlags")]
        public List<string> PermanentFlags { get; set; }

        /// <summary>
        /// Used to track the state of AppendLimit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AppendLimitOption { get; private set; }

        /// <summary>
        /// Per-mailbox limit of message size. Set only if server supports the APPENDLIMIT extension
        /// </summary>
        /// <value>Per-mailbox limit of message size. Set only if server supports the APPENDLIMIT extension</value>
        [JsonPropertyName("appendLimit")]
        public int? AppendLimit { get { return this.AppendLimitOption; } set { this.AppendLimitOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImapMailboxStatus {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  UnseenSeqNum: ").Append(UnseenSeqNum).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Recent: ").Append(Recent).Append("\n");
            sb.Append("  Unseen: ").Append(Unseen).Append("\n");
            sb.Append("  UidNext: ").Append(UidNext).Append("\n");
            sb.Append("  UidValidity: ").Append(UidValidity).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  PermanentFlags: ").Append(PermanentFlags).Append("\n");
            sb.Append("  AppendLimit: ").Append(AppendLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImapMailboxStatus" />
    /// </summary>
    public class ImapMailboxStatusJsonConverter : JsonConverter<ImapMailboxStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImapMailboxStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImapMailboxStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<bool?> readOnly = default;
            Option<long?> unseenSeqNum = default;
            Option<int?> messages = default;
            Option<int?> recent = default;
            Option<int?> unseen = default;
            Option<long?> uidNext = default;
            Option<int?> uidValidity = default;
            Option<Object> items = default;
            Option<List<string>> flags = default;
            Option<List<string>> permanentFlags = default;
            Option<int?> appendLimit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "readOnly":
                            readOnly = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "unseenSeqNum":
                            unseenSeqNum = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "messages":
                            messages = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recent":
                            recent = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "unseen":
                            unseen = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "uidNext":
                            uidNext = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "uidValidity":
                            uidValidity = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "items":
                            items = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "flags":
                            flags = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "permanentFlags":
                            permanentFlags = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "appendLimit":
                            appendLimit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(name));

            if (!readOnly.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(readOnly));

            if (!unseenSeqNum.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(unseenSeqNum));

            if (!messages.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(messages));

            if (!recent.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(recent));

            if (!unseen.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(unseen));

            if (!uidNext.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(uidNext));

            if (!uidValidity.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(uidValidity));

            if (!items.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(items));

            if (!flags.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(flags));

            if (!permanentFlags.IsSet)
                throw new ArgumentException("Property is required for class ImapMailboxStatus.", nameof(permanentFlags));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ImapMailboxStatus.");

            if (readOnly.IsSet && readOnly.Value == null)
                throw new ArgumentNullException(nameof(readOnly), "Property is not nullable for class ImapMailboxStatus.");

            if (unseenSeqNum.IsSet && unseenSeqNum.Value == null)
                throw new ArgumentNullException(nameof(unseenSeqNum), "Property is not nullable for class ImapMailboxStatus.");

            if (messages.IsSet && messages.Value == null)
                throw new ArgumentNullException(nameof(messages), "Property is not nullable for class ImapMailboxStatus.");

            if (recent.IsSet && recent.Value == null)
                throw new ArgumentNullException(nameof(recent), "Property is not nullable for class ImapMailboxStatus.");

            if (unseen.IsSet && unseen.Value == null)
                throw new ArgumentNullException(nameof(unseen), "Property is not nullable for class ImapMailboxStatus.");

            if (uidNext.IsSet && uidNext.Value == null)
                throw new ArgumentNullException(nameof(uidNext), "Property is not nullable for class ImapMailboxStatus.");

            if (uidValidity.IsSet && uidValidity.Value == null)
                throw new ArgumentNullException(nameof(uidValidity), "Property is not nullable for class ImapMailboxStatus.");

            return new ImapMailboxStatus(name.Value, readOnly.Value.Value, unseenSeqNum.Value.Value, messages.Value.Value, recent.Value.Value, unseen.Value.Value, uidNext.Value.Value, uidValidity.Value.Value, items.Value, flags.Value, permanentFlags.Value, appendLimit);
        }

        /// <summary>
        /// Serializes a <see cref="ImapMailboxStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapMailboxStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImapMailboxStatus imapMailboxStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imapMailboxStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImapMailboxStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapMailboxStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImapMailboxStatus imapMailboxStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imapMailboxStatus.Name == null)
                throw new ArgumentNullException(nameof(imapMailboxStatus.Name), "Property is required for class ImapMailboxStatus.");

            writer.WriteString("name", imapMailboxStatus.Name);

            writer.WriteBoolean("readOnly", imapMailboxStatus.ReadOnly);

            writer.WriteNumber("unseenSeqNum", imapMailboxStatus.UnseenSeqNum);

            writer.WriteNumber("messages", imapMailboxStatus.Messages);

            writer.WriteNumber("recent", imapMailboxStatus.Recent);

            writer.WriteNumber("unseen", imapMailboxStatus.Unseen);

            writer.WriteNumber("uidNext", imapMailboxStatus.UidNext);

            writer.WriteNumber("uidValidity", imapMailboxStatus.UidValidity);

            if (imapMailboxStatus.Items != null)
            {
                writer.WritePropertyName("items");
                JsonSerializer.Serialize(writer, imapMailboxStatus.Items, jsonSerializerOptions);
            }
            else
                writer.WriteNull("items");
            if (imapMailboxStatus.Flags != null)
            {
                writer.WritePropertyName("flags");
                JsonSerializer.Serialize(writer, imapMailboxStatus.Flags, jsonSerializerOptions);
            }
            else
                writer.WriteNull("flags");
            if (imapMailboxStatus.PermanentFlags != null)
            {
                writer.WritePropertyName("permanentFlags");
                JsonSerializer.Serialize(writer, imapMailboxStatus.PermanentFlags, jsonSerializerOptions);
            }
            else
                writer.WriteNull("permanentFlags");
            if (imapMailboxStatus.AppendLimitOption.IsSet)
                if (imapMailboxStatus.AppendLimitOption.Value != null)
                    writer.WriteNumber("appendLimit", imapMailboxStatus.AppendLimitOption.Value.Value);
                else
                    writer.WriteNull("appendLimit");
        }
    }
}
