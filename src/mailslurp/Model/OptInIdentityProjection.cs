// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// OptInIdentityProjection
    /// </summary>
    public partial class OptInIdentityProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptInIdentityProjection" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="emailAddress">emailAddress</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="verified">verified</param>
        [JsonConstructor]
        public OptInIdentityProjection(Guid id, string emailAddress, DateTime updatedAt, DateTime createdAt, Option<bool?> verified = default)
        {
            Id = id;
            EmailAddress = emailAddress;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            VerifiedOption = verified;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Verified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VerifiedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [JsonPropertyName("verified")]
        public bool? Verified { get { return this.VerifiedOption; } set { this.VerifiedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptInIdentityProjection {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OptInIdentityProjection" />
    /// </summary>
    public class OptInIdentityProjectionJsonConverter : JsonConverter<OptInIdentityProjection>
    {
        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="OptInIdentityProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OptInIdentityProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> emailAddress = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> createdAt = default;
            Option<bool?> verified = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "verified":
                            verified = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class OptInIdentityProjection.", nameof(id));

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class OptInIdentityProjection.", nameof(emailAddress));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class OptInIdentityProjection.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class OptInIdentityProjection.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OptInIdentityProjection.");

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class OptInIdentityProjection.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class OptInIdentityProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class OptInIdentityProjection.");

            if (verified.IsSet && verified.Value == null)
                throw new ArgumentNullException(nameof(verified), "Property is not nullable for class OptInIdentityProjection.");

            return new OptInIdentityProjection(id.Value.Value, emailAddress.Value, updatedAt.Value.Value, createdAt.Value.Value, verified);
        }

        /// <summary>
        /// Serializes a <see cref="OptInIdentityProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="optInIdentityProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OptInIdentityProjection optInIdentityProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, optInIdentityProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OptInIdentityProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="optInIdentityProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OptInIdentityProjection optInIdentityProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (optInIdentityProjection.EmailAddress == null)
                throw new ArgumentNullException(nameof(optInIdentityProjection.EmailAddress), "Property is required for class OptInIdentityProjection.");

            writer.WriteString("id", optInIdentityProjection.Id);

            writer.WriteString("emailAddress", optInIdentityProjection.EmailAddress);

            writer.WriteString("updatedAt", optInIdentityProjection.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("createdAt", optInIdentityProjection.CreatedAt.ToString(CreatedAtFormat));

            if (optInIdentityProjection.VerifiedOption.IsSet)
                writer.WriteBoolean("verified", optInIdentityProjection.VerifiedOption.Value.Value);
        }
    }
}
