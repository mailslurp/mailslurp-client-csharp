/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// AccountBounceBlockDto
    /// </summary>
    [DataContract(Name = "AccountBounceBlockDto")]
    public partial class AccountBounceBlockDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBounceBlockDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountBounceBlockDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBounceBlockDto" /> class.
        /// </summary>
        /// <param name="isFrozen">isFrozen (required).</param>
        /// <param name="isSendingBlocked">isSendingBlocked (required).</param>
        /// <param name="bounceCount">bounceCount (required).</param>
        /// <param name="bounceCountToday">bounceCountToday (required).</param>
        /// <param name="maximumDailyBounces">maximumDailyBounces (required).</param>
        /// <param name="maximumAccountBounces">maximumAccountBounces (required).</param>
        public AccountBounceBlockDto(bool isFrozen = default, bool isSendingBlocked = default, long bounceCount = default, long bounceCountToday = default, long maximumDailyBounces = default, long maximumAccountBounces = default)
        {
            this.IsFrozen = isFrozen;
            this.IsSendingBlocked = isSendingBlocked;
            this.BounceCount = bounceCount;
            this.BounceCountToday = bounceCountToday;
            this.MaximumDailyBounces = maximumDailyBounces;
            this.MaximumAccountBounces = maximumAccountBounces;
        }

        /// <summary>
        /// Gets or Sets IsFrozen
        /// </summary>
        [DataMember(Name = "isFrozen", IsRequired = true, EmitDefaultValue = true)]
        public bool IsFrozen { get; set; }

        /// <summary>
        /// Gets or Sets IsSendingBlocked
        /// </summary>
        [DataMember(Name = "isSendingBlocked", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSendingBlocked { get; set; }

        /// <summary>
        /// Gets or Sets BounceCount
        /// </summary>
        [DataMember(Name = "bounceCount", IsRequired = true, EmitDefaultValue = true)]
        public long BounceCount { get; set; }

        /// <summary>
        /// Gets or Sets BounceCountToday
        /// </summary>
        [DataMember(Name = "bounceCountToday", IsRequired = true, EmitDefaultValue = true)]
        public long BounceCountToday { get; set; }

        /// <summary>
        /// Gets or Sets MaximumDailyBounces
        /// </summary>
        [DataMember(Name = "maximumDailyBounces", IsRequired = true, EmitDefaultValue = true)]
        public long MaximumDailyBounces { get; set; }

        /// <summary>
        /// Gets or Sets MaximumAccountBounces
        /// </summary>
        [DataMember(Name = "maximumAccountBounces", IsRequired = true, EmitDefaultValue = true)]
        public long MaximumAccountBounces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountBounceBlockDto {\n");
            sb.Append("  IsFrozen: ").Append(IsFrozen).Append("\n");
            sb.Append("  IsSendingBlocked: ").Append(IsSendingBlocked).Append("\n");
            sb.Append("  BounceCount: ").Append(BounceCount).Append("\n");
            sb.Append("  BounceCountToday: ").Append(BounceCountToday).Append("\n");
            sb.Append("  MaximumDailyBounces: ").Append(MaximumDailyBounces).Append("\n");
            sb.Append("  MaximumAccountBounces: ").Append(MaximumAccountBounces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
