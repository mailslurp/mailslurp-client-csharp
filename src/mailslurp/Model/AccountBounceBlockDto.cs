// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// AccountBounceBlockDto
    /// </summary>
    public partial class AccountBounceBlockDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBounceBlockDto" /> class.
        /// </summary>
        /// <param name="isFrozen">isFrozen</param>
        /// <param name="isSendingBlocked">isSendingBlocked</param>
        /// <param name="bounceCount">bounceCount</param>
        /// <param name="bounceCountToday">bounceCountToday</param>
        /// <param name="maximumDailyBounces">maximumDailyBounces</param>
        /// <param name="maximumAccountBounces">maximumAccountBounces</param>
        [JsonConstructor]
        public AccountBounceBlockDto(bool isFrozen, bool isSendingBlocked, long bounceCount, long bounceCountToday, long maximumDailyBounces, long maximumAccountBounces)
        {
            IsFrozen = isFrozen;
            IsSendingBlocked = isSendingBlocked;
            BounceCount = bounceCount;
            BounceCountToday = bounceCountToday;
            MaximumDailyBounces = maximumDailyBounces;
            MaximumAccountBounces = maximumAccountBounces;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets IsFrozen
        /// </summary>
        [JsonPropertyName("isFrozen")]
        public bool IsFrozen { get; set; }

        /// <summary>
        /// Gets or Sets IsSendingBlocked
        /// </summary>
        [JsonPropertyName("isSendingBlocked")]
        public bool IsSendingBlocked { get; set; }

        /// <summary>
        /// Gets or Sets BounceCount
        /// </summary>
        [JsonPropertyName("bounceCount")]
        public long BounceCount { get; set; }

        /// <summary>
        /// Gets or Sets BounceCountToday
        /// </summary>
        [JsonPropertyName("bounceCountToday")]
        public long BounceCountToday { get; set; }

        /// <summary>
        /// Gets or Sets MaximumDailyBounces
        /// </summary>
        [JsonPropertyName("maximumDailyBounces")]
        public long MaximumDailyBounces { get; set; }

        /// <summary>
        /// Gets or Sets MaximumAccountBounces
        /// </summary>
        [JsonPropertyName("maximumAccountBounces")]
        public long MaximumAccountBounces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountBounceBlockDto {\n");
            sb.Append("  IsFrozen: ").Append(IsFrozen).Append("\n");
            sb.Append("  IsSendingBlocked: ").Append(IsSendingBlocked).Append("\n");
            sb.Append("  BounceCount: ").Append(BounceCount).Append("\n");
            sb.Append("  BounceCountToday: ").Append(BounceCountToday).Append("\n");
            sb.Append("  MaximumDailyBounces: ").Append(MaximumDailyBounces).Append("\n");
            sb.Append("  MaximumAccountBounces: ").Append(MaximumAccountBounces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountBounceBlockDto" />
    /// </summary>
    public class AccountBounceBlockDtoJsonConverter : JsonConverter<AccountBounceBlockDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="AccountBounceBlockDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AccountBounceBlockDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isFrozen = default;
            Option<bool?> isSendingBlocked = default;
            Option<long?> bounceCount = default;
            Option<long?> bounceCountToday = default;
            Option<long?> maximumDailyBounces = default;
            Option<long?> maximumAccountBounces = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "isFrozen":
                            isFrozen = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isSendingBlocked":
                            isSendingBlocked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "bounceCount":
                            bounceCount = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "bounceCountToday":
                            bounceCountToday = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "maximumDailyBounces":
                            maximumDailyBounces = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "maximumAccountBounces":
                            maximumAccountBounces = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!isFrozen.IsSet)
                throw new ArgumentException("Property is required for class AccountBounceBlockDto.", nameof(isFrozen));

            if (!isSendingBlocked.IsSet)
                throw new ArgumentException("Property is required for class AccountBounceBlockDto.", nameof(isSendingBlocked));

            if (!bounceCount.IsSet)
                throw new ArgumentException("Property is required for class AccountBounceBlockDto.", nameof(bounceCount));

            if (!bounceCountToday.IsSet)
                throw new ArgumentException("Property is required for class AccountBounceBlockDto.", nameof(bounceCountToday));

            if (!maximumDailyBounces.IsSet)
                throw new ArgumentException("Property is required for class AccountBounceBlockDto.", nameof(maximumDailyBounces));

            if (!maximumAccountBounces.IsSet)
                throw new ArgumentException("Property is required for class AccountBounceBlockDto.", nameof(maximumAccountBounces));

            if (isFrozen.IsSet && isFrozen.Value == null)
                throw new ArgumentNullException(nameof(isFrozen), "Property is not nullable for class AccountBounceBlockDto.");

            if (isSendingBlocked.IsSet && isSendingBlocked.Value == null)
                throw new ArgumentNullException(nameof(isSendingBlocked), "Property is not nullable for class AccountBounceBlockDto.");

            if (bounceCount.IsSet && bounceCount.Value == null)
                throw new ArgumentNullException(nameof(bounceCount), "Property is not nullable for class AccountBounceBlockDto.");

            if (bounceCountToday.IsSet && bounceCountToday.Value == null)
                throw new ArgumentNullException(nameof(bounceCountToday), "Property is not nullable for class AccountBounceBlockDto.");

            if (maximumDailyBounces.IsSet && maximumDailyBounces.Value == null)
                throw new ArgumentNullException(nameof(maximumDailyBounces), "Property is not nullable for class AccountBounceBlockDto.");

            if (maximumAccountBounces.IsSet && maximumAccountBounces.Value == null)
                throw new ArgumentNullException(nameof(maximumAccountBounces), "Property is not nullable for class AccountBounceBlockDto.");

            return new AccountBounceBlockDto(isFrozen.Value.Value, isSendingBlocked.Value.Value, bounceCount.Value.Value, bounceCountToday.Value.Value, maximumDailyBounces.Value.Value, maximumAccountBounces.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="AccountBounceBlockDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountBounceBlockDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AccountBounceBlockDto accountBounceBlockDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, accountBounceBlockDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AccountBounceBlockDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountBounceBlockDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AccountBounceBlockDto accountBounceBlockDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteBoolean("isFrozen", accountBounceBlockDto.IsFrozen);

            writer.WriteBoolean("isSendingBlocked", accountBounceBlockDto.IsSendingBlocked);

            writer.WriteNumber("bounceCount", accountBounceBlockDto.BounceCount);

            writer.WriteNumber("bounceCountToday", accountBounceBlockDto.BounceCountToday);

            writer.WriteNumber("maximumDailyBounces", accountBounceBlockDto.MaximumDailyBounces);

            writer.WriteNumber("maximumAccountBounces", accountBounceBlockDto.MaximumAccountBounces);
        }
    }
}
