// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Name value pair for webhook header
    /// </summary>
    public partial class WebhookHeaderNameValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookHeaderNameValue" /> class.
        /// </summary>
        /// <param name="name">Name of header</param>
        /// <param name="value">Value of header</param>
        [JsonConstructor]
        public WebhookHeaderNameValue(string name, string value)
        {
            Name = name;
            Value = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of header
        /// </summary>
        /// <value>Name of header</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Value of header
        /// </summary>
        /// <value>Value of header</value>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookHeaderNameValue {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookHeaderNameValue" />
    /// </summary>
    public class WebhookHeaderNameValueJsonConverter : JsonConverter<WebhookHeaderNameValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebhookHeaderNameValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookHeaderNameValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<string> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "value":
                            value = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class WebhookHeaderNameValue.", nameof(name));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class WebhookHeaderNameValue.", nameof(value));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WebhookHeaderNameValue.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class WebhookHeaderNameValue.");

            return new WebhookHeaderNameValue(name.Value, value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookHeaderNameValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookHeaderNameValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookHeaderNameValue webhookHeaderNameValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookHeaderNameValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookHeaderNameValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookHeaderNameValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookHeaderNameValue webhookHeaderNameValue, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookHeaderNameValue.Name == null)
                throw new ArgumentNullException(nameof(webhookHeaderNameValue.Name), "Property is required for class WebhookHeaderNameValue.");

            if (webhookHeaderNameValue.Value == null)
                throw new ArgumentNullException(nameof(webhookHeaderNameValue.Value), "Property is required for class WebhookHeaderNameValue.");

            writer.WriteString("name", webhookHeaderNameValue.Name);

            writer.WriteString("value", webhookHeaderNameValue.Value);
        }
    }
}
