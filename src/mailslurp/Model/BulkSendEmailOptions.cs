/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Overview  #### Inboxes  Inboxes have real email addresses that can send and receive emails. You can create inboxes with specific email addresses (using custom domains). You can also use randomly assigned MailSlurp addresses as unique, disposable test addresses.   See the InboxController or [inbox and email address guide](https://www.mailslurp.com/guides/) for more information.  #### Receive Emails You can receive emails in a number of ways. You can fetch emails and attachments directly from an inbox. Or you can use `waitFor` endpoints to hold a connection open until an email is received that matches given criteria (such as subject or body content). You can also use webhooks to have emails from multiple inboxes forwarded to your server via HTTP POST.  InboxController methods with `waitFor` in the name have a long timeout period and instruct MailSlurp to wait until an expected email is received. You can set conditions on email counts, subject or body matches, and more.  Most receive methods only return an email ID and not the full email (to keep response sizes low). To fetch the full body or attachments for an email use the email's ID with EmailController endpoints.  See the InboxController or [receiving emails guide](https://www.mailslurp.com/guides/) for more information.  #### Send Emails You can send templated HTML emails in several ways. You must first create an inbox to send an email. An inbox can have a specific address or a randomly assigned one. You can send emails from an inbox using `to`, `cc`, and `bcc` recipient lists or with contacts and contact groups.   Emails can contain plain-text or HTML bodies. You can also use email templates that support [moustache](https://mustache.github.io/) template variables. You can send attachments by first posting files to the AttachmentController and then using the returned IDs in the `attachments` field of the send options.  See the InboxController or [sending emails guide](https://www.mailslurp.com/guides/) for more information.  ## Templates MailSlurp emails support templates. You can create templates in the dashboard or API that contain [moustache](https://mustache.github.io/) style variables: for instance `Hello {{name}}`. Then when sending emails you can pass a map of variables names and values to be used. Additionally, when sending emails with contact groups you can use properties of the contact in your templates like `{{firstName}}` and `{{lastName}}``.  ## Explore     
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for bulk sending an email from multiple addresses
    /// </summary>
    [DataContract]
    public partial class BulkSendEmailOptions :  IEquatable<BulkSendEmailOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkSendEmailOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BulkSendEmailOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkSendEmailOptions" /> class.
        /// </summary>
        /// <param name="inboxIds">Inboxes to send the email from.</param>
        /// <param name="sendEmailOptions">sendEmailOptions (required).</param>
        public BulkSendEmailOptions(List<Guid> inboxIds = default(List<Guid>), SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
            // to ensure "sendEmailOptions" is required (not null)
            if (sendEmailOptions == null)
            {
                throw new InvalidDataException("sendEmailOptions is a required property for BulkSendEmailOptions and cannot be null");
            }
            else
            {
                this.SendEmailOptions = sendEmailOptions;
            }
            
            this.InboxIds = inboxIds;
        }
        
        /// <summary>
        /// Inboxes to send the email from
        /// </summary>
        /// <value>Inboxes to send the email from</value>
        [DataMember(Name="inboxIds", EmitDefaultValue=false)]
        public List<Guid> InboxIds { get; set; }

        /// <summary>
        /// Gets or Sets SendEmailOptions
        /// </summary>
        [DataMember(Name="sendEmailOptions", EmitDefaultValue=false)]
        public SendEmailOptions SendEmailOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkSendEmailOptions {\n");
            sb.Append("  InboxIds: ").Append(InboxIds).Append("\n");
            sb.Append("  SendEmailOptions: ").Append(SendEmailOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkSendEmailOptions);
        }

        /// <summary>
        /// Returns true if BulkSendEmailOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkSendEmailOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkSendEmailOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InboxIds == input.InboxIds ||
                    this.InboxIds != null &&
                    input.InboxIds != null &&
                    this.InboxIds.SequenceEqual(input.InboxIds)
                ) && 
                (
                    this.SendEmailOptions == input.SendEmailOptions ||
                    (this.SendEmailOptions != null &&
                    this.SendEmailOptions.Equals(input.SendEmailOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InboxIds != null)
                    hashCode = hashCode * 59 + this.InboxIds.GetHashCode();
                if (this.SendEmailOptions != null)
                    hashCode = hashCode * 59 + this.SendEmailOptions.GetHashCode();
                return hashCode;
            }
        }
    }

}
