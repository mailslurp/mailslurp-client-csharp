/* 
 * MailSlurp API
 *
 * For full documentation and a list of available SDK clients please see the [developer guide](https://www.mailslurp.com/developers). [Create an account](https://app.mailslurp.com) in the MailSlurp Dashboard to [view your API Key](https://app.mailslurp.com). For all bugs, feature requests, or help please [see support](https://www.mailslurp.com/support/). 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Bulk sending options
    /// </summary>
    [DataContract]
    public partial class BulkSendEmailOptions :  IEquatable<BulkSendEmailOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkSendEmailOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BulkSendEmailOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkSendEmailOptions" /> class.
        /// </summary>
        /// <param name="inboxIds">Inboxes to send from.</param>
        /// <param name="sendEmailOptions">sendEmailOptions (required).</param>
        public BulkSendEmailOptions(List<Guid?> inboxIds = default(List<Guid?>), SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
            // to ensure "sendEmailOptions" is required (not null)
            if (sendEmailOptions == null)
            {
                throw new InvalidDataException("sendEmailOptions is a required property for BulkSendEmailOptions and cannot be null");
            }
            else
            {
                this.SendEmailOptions = sendEmailOptions;
            }
            this.InboxIds = inboxIds;
        }
        
        /// <summary>
        /// Inboxes to send from
        /// </summary>
        /// <value>Inboxes to send from</value>
        [DataMember(Name="inboxIds", EmitDefaultValue=false)]
        public List<Guid?> InboxIds { get; set; }

        /// <summary>
        /// Gets or Sets SendEmailOptions
        /// </summary>
        [DataMember(Name="sendEmailOptions", EmitDefaultValue=false)]
        public SendEmailOptions SendEmailOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkSendEmailOptions {\n");
            sb.Append("  InboxIds: ").Append(InboxIds).Append("\n");
            sb.Append("  SendEmailOptions: ").Append(SendEmailOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkSendEmailOptions);
        }

        /// <summary>
        /// Returns true if BulkSendEmailOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkSendEmailOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkSendEmailOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InboxIds == input.InboxIds ||
                    this.InboxIds != null &&
                    this.InboxIds.SequenceEqual(input.InboxIds)
                ) && 
                (
                    this.SendEmailOptions == input.SendEmailOptions ||
                    (this.SendEmailOptions != null &&
                    this.SendEmailOptions.Equals(input.SendEmailOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InboxIds != null)
                    hashCode = hashCode * 59 + this.InboxIds.GetHashCode();
                if (this.SendEmailOptions != null)
                    hashCode = hashCode * 59 + this.SendEmailOptions.GetHashCode();
                return hashCode;
            }
        }
    }

}
