// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for bulk sending an email from multiple addresses. See regular &#x60;sendEmail&#x60; methods for more information.
    /// </summary>
    public partial class BulkSendEmailOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkSendEmailOptions" /> class.
        /// </summary>
        /// <param name="inboxIds">Inboxes to send the email from</param>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        [JsonConstructor]
        public BulkSendEmailOptions(List<Guid> inboxIds, SendEmailOptions sendEmailOptions)
        {
            InboxIds = inboxIds;
            SendEmailOptions = sendEmailOptions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Inboxes to send the email from
        /// </summary>
        /// <value>Inboxes to send the email from</value>
        [JsonPropertyName("inboxIds")]
        public List<Guid> InboxIds { get; set; }

        /// <summary>
        /// Gets or Sets SendEmailOptions
        /// </summary>
        [JsonPropertyName("sendEmailOptions")]
        public SendEmailOptions SendEmailOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BulkSendEmailOptions {\n");
            sb.Append("  InboxIds: ").Append(InboxIds).Append("\n");
            sb.Append("  SendEmailOptions: ").Append(SendEmailOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BulkSendEmailOptions" />
    /// </summary>
    public class BulkSendEmailOptionsJsonConverter : JsonConverter<BulkSendEmailOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="BulkSendEmailOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BulkSendEmailOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Guid>> inboxIds = default;
            Option<SendEmailOptions> sendEmailOptions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "inboxIds":
                            inboxIds = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sendEmailOptions":
                            sendEmailOptions = new Option<SendEmailOptions>(JsonSerializer.Deserialize<SendEmailOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!inboxIds.IsSet)
                throw new ArgumentException("Property is required for class BulkSendEmailOptions.", nameof(inboxIds));

            if (!sendEmailOptions.IsSet)
                throw new ArgumentException("Property is required for class BulkSendEmailOptions.", nameof(sendEmailOptions));

            if (inboxIds.IsSet && inboxIds.Value == null)
                throw new ArgumentNullException(nameof(inboxIds), "Property is not nullable for class BulkSendEmailOptions.");

            if (sendEmailOptions.IsSet && sendEmailOptions.Value == null)
                throw new ArgumentNullException(nameof(sendEmailOptions), "Property is not nullable for class BulkSendEmailOptions.");

            return new BulkSendEmailOptions(inboxIds.Value, sendEmailOptions.Value);
        }

        /// <summary>
        /// Serializes a <see cref="BulkSendEmailOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bulkSendEmailOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BulkSendEmailOptions bulkSendEmailOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bulkSendEmailOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BulkSendEmailOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bulkSendEmailOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BulkSendEmailOptions bulkSendEmailOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bulkSendEmailOptions.InboxIds == null)
                throw new ArgumentNullException(nameof(bulkSendEmailOptions.InboxIds), "Property is required for class BulkSendEmailOptions.");

            if (bulkSendEmailOptions.SendEmailOptions == null)
                throw new ArgumentNullException(nameof(bulkSendEmailOptions.SendEmailOptions), "Property is required for class BulkSendEmailOptions.");

            writer.WritePropertyName("inboxIds");
            JsonSerializer.Serialize(writer, bulkSendEmailOptions.InboxIds, jsonSerializerOptions);
            writer.WritePropertyName("sendEmailOptions");
            JsonSerializer.Serialize(writer, bulkSendEmailOptions.SendEmailOptions, jsonSerializerOptions);
        }
    }
}
