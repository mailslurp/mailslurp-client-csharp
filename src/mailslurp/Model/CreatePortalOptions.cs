// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// CreatePortalOptions
    /// </summary>
    public partial class CreatePortalOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePortalOptions" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="domainId">domainId</param>
        /// <param name="description">description</param>
        /// <param name="linkHelp">linkHelp</param>
        [JsonConstructor]
        public CreatePortalOptions(Option<string> name = default, Option<Guid?> domainId = default, Option<string> description = default, Option<string> linkHelp = default)
        {
            NameOption = name;
            DomainIdOption = domainId;
            DescriptionOption = description;
            LinkHelpOption = linkHelp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DomainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DomainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets DomainId
        /// </summary>
        [JsonPropertyName("domainId")]
        public Guid? DomainId { get { return this.DomainIdOption; } set { this.DomainIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LinkHelp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LinkHelpOption { get; private set; }

        /// <summary>
        /// Gets or Sets LinkHelp
        /// </summary>
        [JsonPropertyName("linkHelp")]
        public string LinkHelp { get { return this.LinkHelpOption; } set { this.LinkHelpOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePortalOptions {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LinkHelp: ").Append(LinkHelp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreatePortalOptions" />
    /// </summary>
    public class CreatePortalOptionsJsonConverter : JsonConverter<CreatePortalOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreatePortalOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreatePortalOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<Guid?> domainId = default;
            Option<string> description = default;
            Option<string> linkHelp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "domainId":
                            domainId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "linkHelp":
                            linkHelp = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreatePortalOptions.");

            if (domainId.IsSet && domainId.Value == null)
                throw new ArgumentNullException(nameof(domainId), "Property is not nullable for class CreatePortalOptions.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class CreatePortalOptions.");

            if (linkHelp.IsSet && linkHelp.Value == null)
                throw new ArgumentNullException(nameof(linkHelp), "Property is not nullable for class CreatePortalOptions.");

            return new CreatePortalOptions(name, domainId, description, linkHelp);
        }

        /// <summary>
        /// Serializes a <see cref="CreatePortalOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPortalOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreatePortalOptions createPortalOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createPortalOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreatePortalOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPortalOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreatePortalOptions createPortalOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createPortalOptions.NameOption.IsSet && createPortalOptions.Name == null)
                throw new ArgumentNullException(nameof(createPortalOptions.Name), "Property is required for class CreatePortalOptions.");

            if (createPortalOptions.DescriptionOption.IsSet && createPortalOptions.Description == null)
                throw new ArgumentNullException(nameof(createPortalOptions.Description), "Property is required for class CreatePortalOptions.");

            if (createPortalOptions.LinkHelpOption.IsSet && createPortalOptions.LinkHelp == null)
                throw new ArgumentNullException(nameof(createPortalOptions.LinkHelp), "Property is required for class CreatePortalOptions.");

            if (createPortalOptions.NameOption.IsSet)
                writer.WriteString("name", createPortalOptions.Name);

            if (createPortalOptions.DomainIdOption.IsSet)
                writer.WriteString("domainId", createPortalOptions.DomainIdOption.Value.Value);

            if (createPortalOptions.DescriptionOption.IsSet)
                writer.WriteString("description", createPortalOptions.Description);

            if (createPortalOptions.LinkHelpOption.IsSet)
                writer.WriteString("linkHelp", createPortalOptions.LinkHelp);
        }
    }
}
