// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// GenerateTlsReportingRecordResults
    /// </summary>
    public partial class GenerateTlsReportingRecordResults : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateTlsReportingRecordResults" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="type">Domain Name Server Record Types</param>
        /// <param name="ttl">ttl</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public GenerateTlsReportingRecordResults(string name, TypeEnum type, int ttl, string value)
        {
            Name = name;
            Type = type;
            Ttl = ttl;
            Value = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Domain Name Server Record Types
        /// </summary>
        /// <value>Domain Name Server Record Types</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            A = 1,

            /// <summary>
            /// Enum NS for value: NS
            /// </summary>
            NS = 2,

            /// <summary>
            /// Enum MD for value: MD
            /// </summary>
            MD = 3,

            /// <summary>
            /// Enum MF for value: MF
            /// </summary>
            MF = 4,

            /// <summary>
            /// Enum CNAME for value: CNAME
            /// </summary>
            CNAME = 5,

            /// <summary>
            /// Enum SOA for value: SOA
            /// </summary>
            SOA = 6,

            /// <summary>
            /// Enum MB for value: MB
            /// </summary>
            MB = 7,

            /// <summary>
            /// Enum MG for value: MG
            /// </summary>
            MG = 8,

            /// <summary>
            /// Enum MR for value: MR
            /// </summary>
            MR = 9,

            /// <summary>
            /// Enum NULL for value: NULL
            /// </summary>
            NULL = 10,

            /// <summary>
            /// Enum WKS for value: WKS
            /// </summary>
            WKS = 11,

            /// <summary>
            /// Enum PTR for value: PTR
            /// </summary>
            PTR = 12,

            /// <summary>
            /// Enum HINFO for value: HINFO
            /// </summary>
            HINFO = 13,

            /// <summary>
            /// Enum MINFO for value: MINFO
            /// </summary>
            MINFO = 14,

            /// <summary>
            /// Enum MX for value: MX
            /// </summary>
            MX = 15,

            /// <summary>
            /// Enum TXT for value: TXT
            /// </summary>
            TXT = 16,

            /// <summary>
            /// Enum RP for value: RP
            /// </summary>
            RP = 17,

            /// <summary>
            /// Enum AFSDB for value: AFSDB
            /// </summary>
            AFSDB = 18,

            /// <summary>
            /// Enum X25 for value: X25
            /// </summary>
            X25 = 19,

            /// <summary>
            /// Enum ISDN for value: ISDN
            /// </summary>
            ISDN = 20,

            /// <summary>
            /// Enum RT for value: RT
            /// </summary>
            RT = 21,

            /// <summary>
            /// Enum NSAP for value: NSAP
            /// </summary>
            NSAP = 22,

            /// <summary>
            /// Enum NSAPPTR for value: NSAP_PTR
            /// </summary>
            NSAPPTR = 23,

            /// <summary>
            /// Enum SIG for value: SIG
            /// </summary>
            SIG = 24,

            /// <summary>
            /// Enum KEY for value: KEY
            /// </summary>
            KEY = 25,

            /// <summary>
            /// Enum PX for value: PX
            /// </summary>
            PX = 26,

            /// <summary>
            /// Enum GPOS for value: GPOS
            /// </summary>
            GPOS = 27,

            /// <summary>
            /// Enum AAAA for value: AAAA
            /// </summary>
            AAAA = 28,

            /// <summary>
            /// Enum LOC for value: LOC
            /// </summary>
            LOC = 29,

            /// <summary>
            /// Enum NXT for value: NXT
            /// </summary>
            NXT = 30,

            /// <summary>
            /// Enum EID for value: EID
            /// </summary>
            EID = 31,

            /// <summary>
            /// Enum NIMLOC for value: NIMLOC
            /// </summary>
            NIMLOC = 32,

            /// <summary>
            /// Enum SRV for value: SRV
            /// </summary>
            SRV = 33,

            /// <summary>
            /// Enum ATMA for value: ATMA
            /// </summary>
            ATMA = 34,

            /// <summary>
            /// Enum NAPTR for value: NAPTR
            /// </summary>
            NAPTR = 35,

            /// <summary>
            /// Enum KX for value: KX
            /// </summary>
            KX = 36,

            /// <summary>
            /// Enum CERT for value: CERT
            /// </summary>
            CERT = 37,

            /// <summary>
            /// Enum A6 for value: A6
            /// </summary>
            A6 = 38,

            /// <summary>
            /// Enum DNAME for value: DNAME
            /// </summary>
            DNAME = 39,

            /// <summary>
            /// Enum SINK for value: SINK
            /// </summary>
            SINK = 40,

            /// <summary>
            /// Enum OPT for value: OPT
            /// </summary>
            OPT = 41,

            /// <summary>
            /// Enum APL for value: APL
            /// </summary>
            APL = 42,

            /// <summary>
            /// Enum DS for value: DS
            /// </summary>
            DS = 43,

            /// <summary>
            /// Enum SSHFP for value: SSHFP
            /// </summary>
            SSHFP = 44,

            /// <summary>
            /// Enum IPSECKEY for value: IPSECKEY
            /// </summary>
            IPSECKEY = 45,

            /// <summary>
            /// Enum RRSIG for value: RRSIG
            /// </summary>
            RRSIG = 46,

            /// <summary>
            /// Enum NSEC for value: NSEC
            /// </summary>
            NSEC = 47,

            /// <summary>
            /// Enum DNSKEY for value: DNSKEY
            /// </summary>
            DNSKEY = 48,

            /// <summary>
            /// Enum DHCID for value: DHCID
            /// </summary>
            DHCID = 49,

            /// <summary>
            /// Enum NSEC3 for value: NSEC3
            /// </summary>
            NSEC3 = 50,

            /// <summary>
            /// Enum NSEC3PARAM for value: NSEC3PARAM
            /// </summary>
            NSEC3PARAM = 51,

            /// <summary>
            /// Enum TLSA for value: TLSA
            /// </summary>
            TLSA = 52,

            /// <summary>
            /// Enum SMIMEA for value: SMIMEA
            /// </summary>
            SMIMEA = 53,

            /// <summary>
            /// Enum HIP for value: HIP
            /// </summary>
            HIP = 54,

            /// <summary>
            /// Enum NINFO for value: NINFO
            /// </summary>
            NINFO = 55,

            /// <summary>
            /// Enum RKEY for value: RKEY
            /// </summary>
            RKEY = 56,

            /// <summary>
            /// Enum TALINK for value: TALINK
            /// </summary>
            TALINK = 57,

            /// <summary>
            /// Enum CDS for value: CDS
            /// </summary>
            CDS = 58,

            /// <summary>
            /// Enum CDNSKEY for value: CDNSKEY
            /// </summary>
            CDNSKEY = 59,

            /// <summary>
            /// Enum OPENPGPKEY for value: OPENPGPKEY
            /// </summary>
            OPENPGPKEY = 60,

            /// <summary>
            /// Enum CSYNC for value: CSYNC
            /// </summary>
            CSYNC = 61,

            /// <summary>
            /// Enum ZONEMD for value: ZONEMD
            /// </summary>
            ZONEMD = 62,

            /// <summary>
            /// Enum SVCB for value: SVCB
            /// </summary>
            SVCB = 63,

            /// <summary>
            /// Enum HTTPS for value: HTTPS
            /// </summary>
            HTTPS = 64,

            /// <summary>
            /// Enum SPF for value: SPF
            /// </summary>
            SPF = 65,

            /// <summary>
            /// Enum UINFO for value: UINFO
            /// </summary>
            UINFO = 66,

            /// <summary>
            /// Enum UID for value: UID
            /// </summary>
            UID = 67,

            /// <summary>
            /// Enum GID for value: GID
            /// </summary>
            GID = 68,

            /// <summary>
            /// Enum UNSPEC for value: UNSPEC
            /// </summary>
            UNSPEC = 69,

            /// <summary>
            /// Enum NID for value: NID
            /// </summary>
            NID = 70,

            /// <summary>
            /// Enum L32 for value: L32
            /// </summary>
            L32 = 71,

            /// <summary>
            /// Enum L64 for value: L64
            /// </summary>
            L64 = 72,

            /// <summary>
            /// Enum LP for value: LP
            /// </summary>
            LP = 73,

            /// <summary>
            /// Enum EUI48 for value: EUI48
            /// </summary>
            EUI48 = 74,

            /// <summary>
            /// Enum EUI64 for value: EUI64
            /// </summary>
            EUI64 = 75,

            /// <summary>
            /// Enum TKEY for value: TKEY
            /// </summary>
            TKEY = 76,

            /// <summary>
            /// Enum TSIG for value: TSIG
            /// </summary>
            TSIG = 77,

            /// <summary>
            /// Enum IXFR for value: IXFR
            /// </summary>
            IXFR = 78,

            /// <summary>
            /// Enum AXFR for value: AXFR
            /// </summary>
            AXFR = 79,

            /// <summary>
            /// Enum MAILB for value: MAILB
            /// </summary>
            MAILB = 80,

            /// <summary>
            /// Enum MAILA for value: MAILA
            /// </summary>
            MAILA = 81,

            /// <summary>
            /// Enum ANY for value: ANY
            /// </summary>
            ANY = 82,

            /// <summary>
            /// Enum URI for value: URI
            /// </summary>
            URI = 83,

            /// <summary>
            /// Enum CAA for value: CAA
            /// </summary>
            CAA = 84,

            /// <summary>
            /// Enum AVC for value: AVC
            /// </summary>
            AVC = 85,

            /// <summary>
            /// Enum DOA for value: DOA
            /// </summary>
            DOA = 86,

            /// <summary>
            /// Enum AMTRELAY for value: AMTRELAY
            /// </summary>
            AMTRELAY = 87,

            /// <summary>
            /// Enum TA for value: TA
            /// </summary>
            TA = 88,

            /// <summary>
            /// Enum DLV for value: DLV
            /// </summary>
            DLV = 89
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("A"))
                return TypeEnum.A;

            if (value.Equals("NS"))
                return TypeEnum.NS;

            if (value.Equals("MD"))
                return TypeEnum.MD;

            if (value.Equals("MF"))
                return TypeEnum.MF;

            if (value.Equals("CNAME"))
                return TypeEnum.CNAME;

            if (value.Equals("SOA"))
                return TypeEnum.SOA;

            if (value.Equals("MB"))
                return TypeEnum.MB;

            if (value.Equals("MG"))
                return TypeEnum.MG;

            if (value.Equals("MR"))
                return TypeEnum.MR;

            if (value.Equals("NULL"))
                return TypeEnum.NULL;

            if (value.Equals("WKS"))
                return TypeEnum.WKS;

            if (value.Equals("PTR"))
                return TypeEnum.PTR;

            if (value.Equals("HINFO"))
                return TypeEnum.HINFO;

            if (value.Equals("MINFO"))
                return TypeEnum.MINFO;

            if (value.Equals("MX"))
                return TypeEnum.MX;

            if (value.Equals("TXT"))
                return TypeEnum.TXT;

            if (value.Equals("RP"))
                return TypeEnum.RP;

            if (value.Equals("AFSDB"))
                return TypeEnum.AFSDB;

            if (value.Equals("X25"))
                return TypeEnum.X25;

            if (value.Equals("ISDN"))
                return TypeEnum.ISDN;

            if (value.Equals("RT"))
                return TypeEnum.RT;

            if (value.Equals("NSAP"))
                return TypeEnum.NSAP;

            if (value.Equals("NSAP_PTR"))
                return TypeEnum.NSAPPTR;

            if (value.Equals("SIG"))
                return TypeEnum.SIG;

            if (value.Equals("KEY"))
                return TypeEnum.KEY;

            if (value.Equals("PX"))
                return TypeEnum.PX;

            if (value.Equals("GPOS"))
                return TypeEnum.GPOS;

            if (value.Equals("AAAA"))
                return TypeEnum.AAAA;

            if (value.Equals("LOC"))
                return TypeEnum.LOC;

            if (value.Equals("NXT"))
                return TypeEnum.NXT;

            if (value.Equals("EID"))
                return TypeEnum.EID;

            if (value.Equals("NIMLOC"))
                return TypeEnum.NIMLOC;

            if (value.Equals("SRV"))
                return TypeEnum.SRV;

            if (value.Equals("ATMA"))
                return TypeEnum.ATMA;

            if (value.Equals("NAPTR"))
                return TypeEnum.NAPTR;

            if (value.Equals("KX"))
                return TypeEnum.KX;

            if (value.Equals("CERT"))
                return TypeEnum.CERT;

            if (value.Equals("A6"))
                return TypeEnum.A6;

            if (value.Equals("DNAME"))
                return TypeEnum.DNAME;

            if (value.Equals("SINK"))
                return TypeEnum.SINK;

            if (value.Equals("OPT"))
                return TypeEnum.OPT;

            if (value.Equals("APL"))
                return TypeEnum.APL;

            if (value.Equals("DS"))
                return TypeEnum.DS;

            if (value.Equals("SSHFP"))
                return TypeEnum.SSHFP;

            if (value.Equals("IPSECKEY"))
                return TypeEnum.IPSECKEY;

            if (value.Equals("RRSIG"))
                return TypeEnum.RRSIG;

            if (value.Equals("NSEC"))
                return TypeEnum.NSEC;

            if (value.Equals("DNSKEY"))
                return TypeEnum.DNSKEY;

            if (value.Equals("DHCID"))
                return TypeEnum.DHCID;

            if (value.Equals("NSEC3"))
                return TypeEnum.NSEC3;

            if (value.Equals("NSEC3PARAM"))
                return TypeEnum.NSEC3PARAM;

            if (value.Equals("TLSA"))
                return TypeEnum.TLSA;

            if (value.Equals("SMIMEA"))
                return TypeEnum.SMIMEA;

            if (value.Equals("HIP"))
                return TypeEnum.HIP;

            if (value.Equals("NINFO"))
                return TypeEnum.NINFO;

            if (value.Equals("RKEY"))
                return TypeEnum.RKEY;

            if (value.Equals("TALINK"))
                return TypeEnum.TALINK;

            if (value.Equals("CDS"))
                return TypeEnum.CDS;

            if (value.Equals("CDNSKEY"))
                return TypeEnum.CDNSKEY;

            if (value.Equals("OPENPGPKEY"))
                return TypeEnum.OPENPGPKEY;

            if (value.Equals("CSYNC"))
                return TypeEnum.CSYNC;

            if (value.Equals("ZONEMD"))
                return TypeEnum.ZONEMD;

            if (value.Equals("SVCB"))
                return TypeEnum.SVCB;

            if (value.Equals("HTTPS"))
                return TypeEnum.HTTPS;

            if (value.Equals("SPF"))
                return TypeEnum.SPF;

            if (value.Equals("UINFO"))
                return TypeEnum.UINFO;

            if (value.Equals("UID"))
                return TypeEnum.UID;

            if (value.Equals("GID"))
                return TypeEnum.GID;

            if (value.Equals("UNSPEC"))
                return TypeEnum.UNSPEC;

            if (value.Equals("NID"))
                return TypeEnum.NID;

            if (value.Equals("L32"))
                return TypeEnum.L32;

            if (value.Equals("L64"))
                return TypeEnum.L64;

            if (value.Equals("LP"))
                return TypeEnum.LP;

            if (value.Equals("EUI48"))
                return TypeEnum.EUI48;

            if (value.Equals("EUI64"))
                return TypeEnum.EUI64;

            if (value.Equals("TKEY"))
                return TypeEnum.TKEY;

            if (value.Equals("TSIG"))
                return TypeEnum.TSIG;

            if (value.Equals("IXFR"))
                return TypeEnum.IXFR;

            if (value.Equals("AXFR"))
                return TypeEnum.AXFR;

            if (value.Equals("MAILB"))
                return TypeEnum.MAILB;

            if (value.Equals("MAILA"))
                return TypeEnum.MAILA;

            if (value.Equals("ANY"))
                return TypeEnum.ANY;

            if (value.Equals("URI"))
                return TypeEnum.URI;

            if (value.Equals("CAA"))
                return TypeEnum.CAA;

            if (value.Equals("AVC"))
                return TypeEnum.AVC;

            if (value.Equals("DOA"))
                return TypeEnum.DOA;

            if (value.Equals("AMTRELAY"))
                return TypeEnum.AMTRELAY;

            if (value.Equals("TA"))
                return TypeEnum.TA;

            if (value.Equals("DLV"))
                return TypeEnum.DLV;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("A"))
                return TypeEnum.A;

            if (value.Equals("NS"))
                return TypeEnum.NS;

            if (value.Equals("MD"))
                return TypeEnum.MD;

            if (value.Equals("MF"))
                return TypeEnum.MF;

            if (value.Equals("CNAME"))
                return TypeEnum.CNAME;

            if (value.Equals("SOA"))
                return TypeEnum.SOA;

            if (value.Equals("MB"))
                return TypeEnum.MB;

            if (value.Equals("MG"))
                return TypeEnum.MG;

            if (value.Equals("MR"))
                return TypeEnum.MR;

            if (value.Equals("NULL"))
                return TypeEnum.NULL;

            if (value.Equals("WKS"))
                return TypeEnum.WKS;

            if (value.Equals("PTR"))
                return TypeEnum.PTR;

            if (value.Equals("HINFO"))
                return TypeEnum.HINFO;

            if (value.Equals("MINFO"))
                return TypeEnum.MINFO;

            if (value.Equals("MX"))
                return TypeEnum.MX;

            if (value.Equals("TXT"))
                return TypeEnum.TXT;

            if (value.Equals("RP"))
                return TypeEnum.RP;

            if (value.Equals("AFSDB"))
                return TypeEnum.AFSDB;

            if (value.Equals("X25"))
                return TypeEnum.X25;

            if (value.Equals("ISDN"))
                return TypeEnum.ISDN;

            if (value.Equals("RT"))
                return TypeEnum.RT;

            if (value.Equals("NSAP"))
                return TypeEnum.NSAP;

            if (value.Equals("NSAP_PTR"))
                return TypeEnum.NSAPPTR;

            if (value.Equals("SIG"))
                return TypeEnum.SIG;

            if (value.Equals("KEY"))
                return TypeEnum.KEY;

            if (value.Equals("PX"))
                return TypeEnum.PX;

            if (value.Equals("GPOS"))
                return TypeEnum.GPOS;

            if (value.Equals("AAAA"))
                return TypeEnum.AAAA;

            if (value.Equals("LOC"))
                return TypeEnum.LOC;

            if (value.Equals("NXT"))
                return TypeEnum.NXT;

            if (value.Equals("EID"))
                return TypeEnum.EID;

            if (value.Equals("NIMLOC"))
                return TypeEnum.NIMLOC;

            if (value.Equals("SRV"))
                return TypeEnum.SRV;

            if (value.Equals("ATMA"))
                return TypeEnum.ATMA;

            if (value.Equals("NAPTR"))
                return TypeEnum.NAPTR;

            if (value.Equals("KX"))
                return TypeEnum.KX;

            if (value.Equals("CERT"))
                return TypeEnum.CERT;

            if (value.Equals("A6"))
                return TypeEnum.A6;

            if (value.Equals("DNAME"))
                return TypeEnum.DNAME;

            if (value.Equals("SINK"))
                return TypeEnum.SINK;

            if (value.Equals("OPT"))
                return TypeEnum.OPT;

            if (value.Equals("APL"))
                return TypeEnum.APL;

            if (value.Equals("DS"))
                return TypeEnum.DS;

            if (value.Equals("SSHFP"))
                return TypeEnum.SSHFP;

            if (value.Equals("IPSECKEY"))
                return TypeEnum.IPSECKEY;

            if (value.Equals("RRSIG"))
                return TypeEnum.RRSIG;

            if (value.Equals("NSEC"))
                return TypeEnum.NSEC;

            if (value.Equals("DNSKEY"))
                return TypeEnum.DNSKEY;

            if (value.Equals("DHCID"))
                return TypeEnum.DHCID;

            if (value.Equals("NSEC3"))
                return TypeEnum.NSEC3;

            if (value.Equals("NSEC3PARAM"))
                return TypeEnum.NSEC3PARAM;

            if (value.Equals("TLSA"))
                return TypeEnum.TLSA;

            if (value.Equals("SMIMEA"))
                return TypeEnum.SMIMEA;

            if (value.Equals("HIP"))
                return TypeEnum.HIP;

            if (value.Equals("NINFO"))
                return TypeEnum.NINFO;

            if (value.Equals("RKEY"))
                return TypeEnum.RKEY;

            if (value.Equals("TALINK"))
                return TypeEnum.TALINK;

            if (value.Equals("CDS"))
                return TypeEnum.CDS;

            if (value.Equals("CDNSKEY"))
                return TypeEnum.CDNSKEY;

            if (value.Equals("OPENPGPKEY"))
                return TypeEnum.OPENPGPKEY;

            if (value.Equals("CSYNC"))
                return TypeEnum.CSYNC;

            if (value.Equals("ZONEMD"))
                return TypeEnum.ZONEMD;

            if (value.Equals("SVCB"))
                return TypeEnum.SVCB;

            if (value.Equals("HTTPS"))
                return TypeEnum.HTTPS;

            if (value.Equals("SPF"))
                return TypeEnum.SPF;

            if (value.Equals("UINFO"))
                return TypeEnum.UINFO;

            if (value.Equals("UID"))
                return TypeEnum.UID;

            if (value.Equals("GID"))
                return TypeEnum.GID;

            if (value.Equals("UNSPEC"))
                return TypeEnum.UNSPEC;

            if (value.Equals("NID"))
                return TypeEnum.NID;

            if (value.Equals("L32"))
                return TypeEnum.L32;

            if (value.Equals("L64"))
                return TypeEnum.L64;

            if (value.Equals("LP"))
                return TypeEnum.LP;

            if (value.Equals("EUI48"))
                return TypeEnum.EUI48;

            if (value.Equals("EUI64"))
                return TypeEnum.EUI64;

            if (value.Equals("TKEY"))
                return TypeEnum.TKEY;

            if (value.Equals("TSIG"))
                return TypeEnum.TSIG;

            if (value.Equals("IXFR"))
                return TypeEnum.IXFR;

            if (value.Equals("AXFR"))
                return TypeEnum.AXFR;

            if (value.Equals("MAILB"))
                return TypeEnum.MAILB;

            if (value.Equals("MAILA"))
                return TypeEnum.MAILA;

            if (value.Equals("ANY"))
                return TypeEnum.ANY;

            if (value.Equals("URI"))
                return TypeEnum.URI;

            if (value.Equals("CAA"))
                return TypeEnum.CAA;

            if (value.Equals("AVC"))
                return TypeEnum.AVC;

            if (value.Equals("DOA"))
                return TypeEnum.DOA;

            if (value.Equals("AMTRELAY"))
                return TypeEnum.AMTRELAY;

            if (value.Equals("TA"))
                return TypeEnum.TA;

            if (value.Equals("DLV"))
                return TypeEnum.DLV;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.A)
                return "A";

            if (value == TypeEnum.NS)
                return "NS";

            if (value == TypeEnum.MD)
                return "MD";

            if (value == TypeEnum.MF)
                return "MF";

            if (value == TypeEnum.CNAME)
                return "CNAME";

            if (value == TypeEnum.SOA)
                return "SOA";

            if (value == TypeEnum.MB)
                return "MB";

            if (value == TypeEnum.MG)
                return "MG";

            if (value == TypeEnum.MR)
                return "MR";

            if (value == TypeEnum.NULL)
                return "NULL";

            if (value == TypeEnum.WKS)
                return "WKS";

            if (value == TypeEnum.PTR)
                return "PTR";

            if (value == TypeEnum.HINFO)
                return "HINFO";

            if (value == TypeEnum.MINFO)
                return "MINFO";

            if (value == TypeEnum.MX)
                return "MX";

            if (value == TypeEnum.TXT)
                return "TXT";

            if (value == TypeEnum.RP)
                return "RP";

            if (value == TypeEnum.AFSDB)
                return "AFSDB";

            if (value == TypeEnum.X25)
                return "X25";

            if (value == TypeEnum.ISDN)
                return "ISDN";

            if (value == TypeEnum.RT)
                return "RT";

            if (value == TypeEnum.NSAP)
                return "NSAP";

            if (value == TypeEnum.NSAPPTR)
                return "NSAP_PTR";

            if (value == TypeEnum.SIG)
                return "SIG";

            if (value == TypeEnum.KEY)
                return "KEY";

            if (value == TypeEnum.PX)
                return "PX";

            if (value == TypeEnum.GPOS)
                return "GPOS";

            if (value == TypeEnum.AAAA)
                return "AAAA";

            if (value == TypeEnum.LOC)
                return "LOC";

            if (value == TypeEnum.NXT)
                return "NXT";

            if (value == TypeEnum.EID)
                return "EID";

            if (value == TypeEnum.NIMLOC)
                return "NIMLOC";

            if (value == TypeEnum.SRV)
                return "SRV";

            if (value == TypeEnum.ATMA)
                return "ATMA";

            if (value == TypeEnum.NAPTR)
                return "NAPTR";

            if (value == TypeEnum.KX)
                return "KX";

            if (value == TypeEnum.CERT)
                return "CERT";

            if (value == TypeEnum.A6)
                return "A6";

            if (value == TypeEnum.DNAME)
                return "DNAME";

            if (value == TypeEnum.SINK)
                return "SINK";

            if (value == TypeEnum.OPT)
                return "OPT";

            if (value == TypeEnum.APL)
                return "APL";

            if (value == TypeEnum.DS)
                return "DS";

            if (value == TypeEnum.SSHFP)
                return "SSHFP";

            if (value == TypeEnum.IPSECKEY)
                return "IPSECKEY";

            if (value == TypeEnum.RRSIG)
                return "RRSIG";

            if (value == TypeEnum.NSEC)
                return "NSEC";

            if (value == TypeEnum.DNSKEY)
                return "DNSKEY";

            if (value == TypeEnum.DHCID)
                return "DHCID";

            if (value == TypeEnum.NSEC3)
                return "NSEC3";

            if (value == TypeEnum.NSEC3PARAM)
                return "NSEC3PARAM";

            if (value == TypeEnum.TLSA)
                return "TLSA";

            if (value == TypeEnum.SMIMEA)
                return "SMIMEA";

            if (value == TypeEnum.HIP)
                return "HIP";

            if (value == TypeEnum.NINFO)
                return "NINFO";

            if (value == TypeEnum.RKEY)
                return "RKEY";

            if (value == TypeEnum.TALINK)
                return "TALINK";

            if (value == TypeEnum.CDS)
                return "CDS";

            if (value == TypeEnum.CDNSKEY)
                return "CDNSKEY";

            if (value == TypeEnum.OPENPGPKEY)
                return "OPENPGPKEY";

            if (value == TypeEnum.CSYNC)
                return "CSYNC";

            if (value == TypeEnum.ZONEMD)
                return "ZONEMD";

            if (value == TypeEnum.SVCB)
                return "SVCB";

            if (value == TypeEnum.HTTPS)
                return "HTTPS";

            if (value == TypeEnum.SPF)
                return "SPF";

            if (value == TypeEnum.UINFO)
                return "UINFO";

            if (value == TypeEnum.UID)
                return "UID";

            if (value == TypeEnum.GID)
                return "GID";

            if (value == TypeEnum.UNSPEC)
                return "UNSPEC";

            if (value == TypeEnum.NID)
                return "NID";

            if (value == TypeEnum.L32)
                return "L32";

            if (value == TypeEnum.L64)
                return "L64";

            if (value == TypeEnum.LP)
                return "LP";

            if (value == TypeEnum.EUI48)
                return "EUI48";

            if (value == TypeEnum.EUI64)
                return "EUI64";

            if (value == TypeEnum.TKEY)
                return "TKEY";

            if (value == TypeEnum.TSIG)
                return "TSIG";

            if (value == TypeEnum.IXFR)
                return "IXFR";

            if (value == TypeEnum.AXFR)
                return "AXFR";

            if (value == TypeEnum.MAILB)
                return "MAILB";

            if (value == TypeEnum.MAILA)
                return "MAILA";

            if (value == TypeEnum.ANY)
                return "ANY";

            if (value == TypeEnum.URI)
                return "URI";

            if (value == TypeEnum.CAA)
                return "CAA";

            if (value == TypeEnum.AVC)
                return "AVC";

            if (value == TypeEnum.DOA)
                return "DOA";

            if (value == TypeEnum.AMTRELAY)
                return "AMTRELAY";

            if (value == TypeEnum.TA)
                return "TA";

            if (value == TypeEnum.DLV)
                return "DLV";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Domain Name Server Record Types
        /// </summary>
        /// <value>Domain Name Server Record Types</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        [JsonPropertyName("ttl")]
        public int Ttl { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateTlsReportingRecordResults {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GenerateTlsReportingRecordResults" />
    /// </summary>
    public class GenerateTlsReportingRecordResultsJsonConverter : JsonConverter<GenerateTlsReportingRecordResults>
    {
        /// <summary>
        /// Deserializes json to <see cref="GenerateTlsReportingRecordResults" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GenerateTlsReportingRecordResults Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<GenerateTlsReportingRecordResults.TypeEnum?> type = default;
            Option<int?> ttl = default;
            Option<string> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<GenerateTlsReportingRecordResults.TypeEnum?>(GenerateTlsReportingRecordResults.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "ttl":
                            ttl = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "value":
                            value = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class GenerateTlsReportingRecordResults.", nameof(name));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class GenerateTlsReportingRecordResults.", nameof(type));

            if (!ttl.IsSet)
                throw new ArgumentException("Property is required for class GenerateTlsReportingRecordResults.", nameof(ttl));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class GenerateTlsReportingRecordResults.", nameof(value));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GenerateTlsReportingRecordResults.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GenerateTlsReportingRecordResults.");

            if (ttl.IsSet && ttl.Value == null)
                throw new ArgumentNullException(nameof(ttl), "Property is not nullable for class GenerateTlsReportingRecordResults.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class GenerateTlsReportingRecordResults.");

            return new GenerateTlsReportingRecordResults(name.Value, type.Value.Value, ttl.Value.Value, value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="GenerateTlsReportingRecordResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateTlsReportingRecordResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GenerateTlsReportingRecordResults generateTlsReportingRecordResults, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generateTlsReportingRecordResults, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GenerateTlsReportingRecordResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateTlsReportingRecordResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GenerateTlsReportingRecordResults generateTlsReportingRecordResults, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generateTlsReportingRecordResults.Name == null)
                throw new ArgumentNullException(nameof(generateTlsReportingRecordResults.Name), "Property is required for class GenerateTlsReportingRecordResults.");

            if (generateTlsReportingRecordResults.Value == null)
                throw new ArgumentNullException(nameof(generateTlsReportingRecordResults.Value), "Property is required for class GenerateTlsReportingRecordResults.");

            writer.WriteString("name", generateTlsReportingRecordResults.Name);

            var typeRawValue = GenerateTlsReportingRecordResults.TypeEnumToJsonValue(generateTlsReportingRecordResults.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteNumber("ttl", generateTlsReportingRecordResults.Ttl);

            writer.WriteString("value", generateTlsReportingRecordResults.Value);
        }
    }
}
