// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorSyncSettingsDto
    /// </summary>
    public partial class ConnectorSyncSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorSyncSettingsDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="connectorId">connectorId</param>
        /// <param name="syncEnabled">syncEnabled</param>
        /// <param name="syncScheduleType">syncScheduleType</param>
        /// <param name="syncInterval">syncInterval</param>
        [JsonConstructor]
        public ConnectorSyncSettingsDto(Guid id, Guid userId, Guid connectorId, bool syncEnabled, Option<SyncScheduleTypeEnum?> syncScheduleType = default, Option<int?> syncInterval = default)
        {
            Id = id;
            UserId = userId;
            ConnectorId = connectorId;
            SyncEnabled = syncEnabled;
            SyncScheduleTypeOption = syncScheduleType;
            SyncIntervalOption = syncInterval;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines SyncScheduleType
        /// </summary>
        public enum SyncScheduleTypeEnum
        {
            /// <summary>
            /// Enum INTERVAL for value: INTERVAL
            /// </summary>
            INTERVAL = 1
        }

        /// <summary>
        /// Returns a <see cref="SyncScheduleTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SyncScheduleTypeEnum SyncScheduleTypeEnumFromString(string value)
        {
            if (value.Equals("INTERVAL"))
                return SyncScheduleTypeEnum.INTERVAL;

            throw new NotImplementedException($"Could not convert value to type SyncScheduleTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SyncScheduleTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SyncScheduleTypeEnum? SyncScheduleTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("INTERVAL"))
                return SyncScheduleTypeEnum.INTERVAL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SyncScheduleTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SyncScheduleTypeEnumToJsonValue(SyncScheduleTypeEnum? value)
        {
            if (value == null)
                return null;

            if (value == SyncScheduleTypeEnum.INTERVAL)
                return "INTERVAL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SyncScheduleType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SyncScheduleTypeEnum?> SyncScheduleTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SyncScheduleType
        /// </summary>
        [JsonPropertyName("syncScheduleType")]
        public SyncScheduleTypeEnum? SyncScheduleType { get { return this.SyncScheduleTypeOption; } set { this.SyncScheduleTypeOption = new Option<SyncScheduleTypeEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorId
        /// </summary>
        [JsonPropertyName("connectorId")]
        public Guid ConnectorId { get; set; }

        /// <summary>
        /// Gets or Sets SyncEnabled
        /// </summary>
        [JsonPropertyName("syncEnabled")]
        public bool SyncEnabled { get; set; }

        /// <summary>
        /// Used to track the state of SyncInterval
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SyncIntervalOption { get; private set; }

        /// <summary>
        /// Gets or Sets SyncInterval
        /// </summary>
        [JsonPropertyName("syncInterval")]
        public int? SyncInterval { get { return this.SyncIntervalOption; } set { this.SyncIntervalOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorSyncSettingsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ConnectorId: ").Append(ConnectorId).Append("\n");
            sb.Append("  SyncEnabled: ").Append(SyncEnabled).Append("\n");
            sb.Append("  SyncScheduleType: ").Append(SyncScheduleType).Append("\n");
            sb.Append("  SyncInterval: ").Append(SyncInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConnectorSyncSettingsDto" />
    /// </summary>
    public class ConnectorSyncSettingsDtoJsonConverter : JsonConverter<ConnectorSyncSettingsDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ConnectorSyncSettingsDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConnectorSyncSettingsDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<Guid?> connectorId = default;
            Option<bool?> syncEnabled = default;
            Option<ConnectorSyncSettingsDto.SyncScheduleTypeEnum?> syncScheduleType = default;
            Option<int?> syncInterval = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "connectorId":
                            connectorId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "syncEnabled":
                            syncEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "syncScheduleType":
                            string syncScheduleTypeRawValue = utf8JsonReader.GetString();
                            if (syncScheduleTypeRawValue != null)
                                syncScheduleType = new Option<ConnectorSyncSettingsDto.SyncScheduleTypeEnum?>(ConnectorSyncSettingsDto.SyncScheduleTypeEnumFromStringOrDefault(syncScheduleTypeRawValue));
                            break;
                        case "syncInterval":
                            syncInterval = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ConnectorSyncSettingsDto.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class ConnectorSyncSettingsDto.", nameof(userId));

            if (!connectorId.IsSet)
                throw new ArgumentException("Property is required for class ConnectorSyncSettingsDto.", nameof(connectorId));

            if (!syncEnabled.IsSet)
                throw new ArgumentException("Property is required for class ConnectorSyncSettingsDto.", nameof(syncEnabled));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ConnectorSyncSettingsDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class ConnectorSyncSettingsDto.");

            if (connectorId.IsSet && connectorId.Value == null)
                throw new ArgumentNullException(nameof(connectorId), "Property is not nullable for class ConnectorSyncSettingsDto.");

            if (syncEnabled.IsSet && syncEnabled.Value == null)
                throw new ArgumentNullException(nameof(syncEnabled), "Property is not nullable for class ConnectorSyncSettingsDto.");

            return new ConnectorSyncSettingsDto(id.Value.Value, userId.Value.Value, connectorId.Value.Value, syncEnabled.Value.Value, syncScheduleType, syncInterval);
        }

        /// <summary>
        /// Serializes a <see cref="ConnectorSyncSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectorSyncSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConnectorSyncSettingsDto connectorSyncSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, connectorSyncSettingsDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConnectorSyncSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectorSyncSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ConnectorSyncSettingsDto connectorSyncSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("id", connectorSyncSettingsDto.Id);

            writer.WriteString("userId", connectorSyncSettingsDto.UserId);

            writer.WriteString("connectorId", connectorSyncSettingsDto.ConnectorId);

            writer.WriteBoolean("syncEnabled", connectorSyncSettingsDto.SyncEnabled);

            var syncScheduleTypeRawValue = ConnectorSyncSettingsDto.SyncScheduleTypeEnumToJsonValue(connectorSyncSettingsDto.SyncScheduleTypeOption.Value.Value);
            if (syncScheduleTypeRawValue != null)
                writer.WriteString("syncScheduleType", syncScheduleTypeRawValue);
            else
                writer.WriteNull("syncScheduleType");

            if (connectorSyncSettingsDto.SyncIntervalOption.IsSet)
                if (connectorSyncSettingsDto.SyncIntervalOption.Value != null)
                    writer.WriteNumber("syncInterval", connectorSyncSettingsDto.SyncIntervalOption.Value.Value);
                else
                    writer.WriteNull("syncInterval");
        }
    }
}
