// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EntityFavouriteItemProjection
    /// </summary>
    public partial class EntityFavouriteItemProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityFavouriteItemProjection" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="entityType">entityType</param>
        /// <param name="name">name</param>
        /// <param name="id">id</param>
        /// <param name="description">description</param>
        [JsonConstructor]
        public EntityFavouriteItemProjection(DateTime createdAt, EntityTypeEnum entityType, string name, Guid id, Option<string> description = default)
        {
            CreatedAt = createdAt;
            EntityType = entityType;
            Name = name;
            Id = id;
            DescriptionOption = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines EntityType
        /// </summary>
        public enum EntityTypeEnum
        {
            /// <summary>
            /// Enum INBOX for value: INBOX
            /// </summary>
            INBOX = 1,

            /// <summary>
            /// Enum EMAIL for value: EMAIL
            /// </summary>
            EMAIL = 2,

            /// <summary>
            /// Enum ATTACHMENT for value: ATTACHMENT
            /// </summary>
            ATTACHMENT = 3,

            /// <summary>
            /// Enum PHONE for value: PHONE
            /// </summary>
            PHONE = 4,

            /// <summary>
            /// Enum SMS for value: SMS
            /// </summary>
            SMS = 5
        }

        /// <summary>
        /// Returns a <see cref="EntityTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EntityTypeEnum EntityTypeEnumFromString(string value)
        {
            if (value.Equals("INBOX"))
                return EntityTypeEnum.INBOX;

            if (value.Equals("EMAIL"))
                return EntityTypeEnum.EMAIL;

            if (value.Equals("ATTACHMENT"))
                return EntityTypeEnum.ATTACHMENT;

            if (value.Equals("PHONE"))
                return EntityTypeEnum.PHONE;

            if (value.Equals("SMS"))
                return EntityTypeEnum.SMS;

            throw new NotImplementedException($"Could not convert value to type EntityTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EntityTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EntityTypeEnum? EntityTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("INBOX"))
                return EntityTypeEnum.INBOX;

            if (value.Equals("EMAIL"))
                return EntityTypeEnum.EMAIL;

            if (value.Equals("ATTACHMENT"))
                return EntityTypeEnum.ATTACHMENT;

            if (value.Equals("PHONE"))
                return EntityTypeEnum.PHONE;

            if (value.Equals("SMS"))
                return EntityTypeEnum.SMS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EntityTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EntityTypeEnumToJsonValue(EntityTypeEnum value)
        {
            if (value == EntityTypeEnum.INBOX)
                return "INBOX";

            if (value == EntityTypeEnum.EMAIL)
                return "EMAIL";

            if (value == EntityTypeEnum.ATTACHMENT)
                return "ATTACHMENT";

            if (value == EntityTypeEnum.PHONE)
                return "PHONE";

            if (value == EntityTypeEnum.SMS)
                return "SMS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [JsonPropertyName("entityType")]
        public EntityTypeEnum EntityType { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityFavouriteItemProjection {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EntityFavouriteItemProjection" />
    /// </summary>
    public class EntityFavouriteItemProjectionJsonConverter : JsonConverter<EntityFavouriteItemProjection>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EntityFavouriteItemProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EntityFavouriteItemProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<EntityFavouriteItemProjection.EntityTypeEnum?> entityType = default;
            Option<string> name = default;
            Option<Guid?> id = default;
            Option<string> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "entityType":
                            string entityTypeRawValue = utf8JsonReader.GetString();
                            if (entityTypeRawValue != null)
                                entityType = new Option<EntityFavouriteItemProjection.EntityTypeEnum?>(EntityFavouriteItemProjection.EntityTypeEnumFromStringOrDefault(entityTypeRawValue));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class EntityFavouriteItemProjection.", nameof(createdAt));

            if (!entityType.IsSet)
                throw new ArgumentException("Property is required for class EntityFavouriteItemProjection.", nameof(entityType));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class EntityFavouriteItemProjection.", nameof(name));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class EntityFavouriteItemProjection.", nameof(id));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class EntityFavouriteItemProjection.");

            if (entityType.IsSet && entityType.Value == null)
                throw new ArgumentNullException(nameof(entityType), "Property is not nullable for class EntityFavouriteItemProjection.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class EntityFavouriteItemProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EntityFavouriteItemProjection.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class EntityFavouriteItemProjection.");

            return new EntityFavouriteItemProjection(createdAt.Value.Value, entityType.Value.Value, name.Value, id.Value.Value, description);
        }

        /// <summary>
        /// Serializes a <see cref="EntityFavouriteItemProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityFavouriteItemProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EntityFavouriteItemProjection entityFavouriteItemProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, entityFavouriteItemProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EntityFavouriteItemProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityFavouriteItemProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EntityFavouriteItemProjection entityFavouriteItemProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (entityFavouriteItemProjection.Name == null)
                throw new ArgumentNullException(nameof(entityFavouriteItemProjection.Name), "Property is required for class EntityFavouriteItemProjection.");

            if (entityFavouriteItemProjection.DescriptionOption.IsSet && entityFavouriteItemProjection.Description == null)
                throw new ArgumentNullException(nameof(entityFavouriteItemProjection.Description), "Property is required for class EntityFavouriteItemProjection.");

            writer.WriteString("createdAt", entityFavouriteItemProjection.CreatedAt.ToString(CreatedAtFormat));

            var entityTypeRawValue = EntityFavouriteItemProjection.EntityTypeEnumToJsonValue(entityFavouriteItemProjection.EntityType);
            writer.WriteString("entityType", entityTypeRawValue);
            writer.WriteString("name", entityFavouriteItemProjection.Name);

            writer.WriteString("id", entityFavouriteItemProjection.Id);

            if (entityFavouriteItemProjection.DescriptionOption.IsSet)
                writer.WriteString("description", entityFavouriteItemProjection.Description);
        }
    }
}
