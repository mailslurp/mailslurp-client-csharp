/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Simplified send email options
    /// </summary>
    [DataContract(Name = "SimpleSendEmailOptions")]
    public partial class SimpleSendEmailOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleSendEmailOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimpleSendEmailOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleSendEmailOptions" /> class.
        /// </summary>
        /// <param name="senderId">ID of inbox to send from. If null an inbox will be created for sending.</param>
        /// <param name="to">Email address to send to (required).</param>
        /// <param name="body">Body of the email message. Supports HTML.</param>
        /// <param name="subject">Subject line of the email.</param>
        public SimpleSendEmailOptions(Guid? senderId = default, string to = default, string body = default, string subject = default)
        {
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for SimpleSendEmailOptions and cannot be null");
            }
            this.To = to;
            this.SenderId = senderId;
            this.Body = body;
            this.Subject = subject;
        }

        /// <summary>
        /// ID of inbox to send from. If null an inbox will be created for sending
        /// </summary>
        /// <value>ID of inbox to send from. If null an inbox will be created for sending</value>
        [DataMember(Name = "senderId", EmitDefaultValue = true)]
        public Guid? SenderId { get; set; }

        /// <summary>
        /// Email address to send to
        /// </summary>
        /// <value>Email address to send to</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// Body of the email message. Supports HTML
        /// </summary>
        /// <value>Body of the email message. Supports HTML</value>
        [DataMember(Name = "body", EmitDefaultValue = true)]
        public string Body { get; set; }

        /// <summary>
        /// Subject line of the email
        /// </summary>
        /// <value>Subject line of the email</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimpleSendEmailOptions {\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
