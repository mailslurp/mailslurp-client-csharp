// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Simplified send email options
    /// </summary>
    public partial class SimpleSendEmailOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleSendEmailOptions" /> class.
        /// </summary>
        /// <param name="to">Email address to send to</param>
        /// <param name="senderId">ID of inbox to send from. If null an inbox will be created for sending</param>
        /// <param name="body">Body of the email message. Supports HTML</param>
        /// <param name="subject">Subject line of the email</param>
        [JsonConstructor]
        public SimpleSendEmailOptions(string to, Option<Guid?> senderId = default, Option<string> body = default, Option<string> subject = default)
        {
            To = to;
            SenderIdOption = senderId;
            BodyOption = body;
            SubjectOption = subject;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Email address to send to
        /// </summary>
        /// <value>Email address to send to</value>
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        /// Used to track the state of SenderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> SenderIdOption { get; private set; }

        /// <summary>
        /// ID of inbox to send from. If null an inbox will be created for sending
        /// </summary>
        /// <value>ID of inbox to send from. If null an inbox will be created for sending</value>
        [JsonPropertyName("senderId")]
        public Guid? SenderId { get { return this.SenderIdOption; } set { this.SenderIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyOption { get; private set; }

        /// <summary>
        /// Body of the email message. Supports HTML
        /// </summary>
        /// <value>Body of the email message. Supports HTML</value>
        [JsonPropertyName("body")]
        public string Body { get { return this.BodyOption; } set { this.BodyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Subject line of the email
        /// </summary>
        /// <value>Subject line of the email</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimpleSendEmailOptions {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SimpleSendEmailOptions" />
    /// </summary>
    public class SimpleSendEmailOptionsJsonConverter : JsonConverter<SimpleSendEmailOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="SimpleSendEmailOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SimpleSendEmailOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> to = default;
            Option<Guid?> senderId = default;
            Option<string> body = default;
            Option<string> subject = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "to":
                            to = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "senderId":
                            senderId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class SimpleSendEmailOptions.", nameof(to));

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class SimpleSendEmailOptions.");

            return new SimpleSendEmailOptions(to.Value, senderId, body, subject);
        }

        /// <summary>
        /// Serializes a <see cref="SimpleSendEmailOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="simpleSendEmailOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SimpleSendEmailOptions simpleSendEmailOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, simpleSendEmailOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SimpleSendEmailOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="simpleSendEmailOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SimpleSendEmailOptions simpleSendEmailOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (simpleSendEmailOptions.To == null)
                throw new ArgumentNullException(nameof(simpleSendEmailOptions.To), "Property is required for class SimpleSendEmailOptions.");

            writer.WriteString("to", simpleSendEmailOptions.To);

            if (simpleSendEmailOptions.SenderIdOption.IsSet)
                if (simpleSendEmailOptions.SenderIdOption.Value != null)
                    writer.WriteString("senderId", simpleSendEmailOptions.SenderIdOption.Value.Value);
                else
                    writer.WriteNull("senderId");

            if (simpleSendEmailOptions.BodyOption.IsSet)
                if (simpleSendEmailOptions.BodyOption.Value != null)
                    writer.WriteString("body", simpleSendEmailOptions.Body);
                else
                    writer.WriteNull("body");

            if (simpleSendEmailOptions.SubjectOption.IsSet)
                if (simpleSendEmailOptions.SubjectOption.Value != null)
                    writer.WriteString("subject", simpleSendEmailOptions.Subject);
                else
                    writer.WriteNull("subject");
        }
    }
}
