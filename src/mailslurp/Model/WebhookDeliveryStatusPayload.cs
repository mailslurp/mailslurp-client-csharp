// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// DELIVERY_STATUS webhook payload. Sent to your webhook url endpoint via HTTP POST when an email delivery status is created. This could be a successful delivery or a delivery failure.
    /// </summary>
    public partial class WebhookDeliveryStatusPayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookDeliveryStatusPayload" /> class.
        /// </summary>
        /// <param name="messageId">Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</param>
        /// <param name="webhookId">ID of webhook entity being triggered</param>
        /// <param name="eventName">Name of the event type webhook is being triggered for.</param>
        /// <param name="id">ID of delivery status</param>
        /// <param name="userId">User ID of event</param>
        /// <param name="webhookName">Name of the webhook being triggered</param>
        /// <param name="sentId">ID of sent email</param>
        /// <param name="remoteMtaIp">IP address of the remote Mail Transfer Agent</param>
        /// <param name="inboxId">Id of the inbox</param>
        /// <param name="reportingMta">Mail Transfer Agent reporting delivery status</param>
        /// <param name="recipients">Recipients for delivery</param>
        /// <param name="smtpResponse">SMTP server response message</param>
        /// <param name="smtpStatusCode">SMTP server status</param>
        /// <param name="processingTimeMillis">Time in milliseconds for delivery processing</param>
        /// <param name="received">Time event was received</param>
        /// <param name="subject">Email subject</param>
        [JsonConstructor]
        public WebhookDeliveryStatusPayload(string messageId, Guid webhookId, EventNameEnum eventName, Guid id, Guid userId, Option<string> webhookName = default, Option<Guid?> sentId = default, Option<string> remoteMtaIp = default, Option<Guid?> inboxId = default, Option<string> reportingMta = default, Option<List<string>> recipients = default, Option<string> smtpResponse = default, Option<int?> smtpStatusCode = default, Option<long?> processingTimeMillis = default, Option<DateTime?> received = default, Option<string> subject = default)
        {
            MessageId = messageId;
            WebhookId = webhookId;
            EventName = eventName;
            Id = id;
            UserId = userId;
            WebhookNameOption = webhookName;
            SentIdOption = sentId;
            RemoteMtaIpOption = remoteMtaIp;
            InboxIdOption = inboxId;
            ReportingMtaOption = reportingMta;
            RecipientsOption = recipients;
            SmtpResponseOption = smtpResponse;
            SmtpStatusCodeOption = smtpStatusCode;
            ProcessingTimeMillisOption = processingTimeMillis;
            ReceivedOption = received;
            SubjectOption = subject;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the event type webhook is being triggered for.
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for.</value>
        public enum EventNameEnum
        {
            /// <summary>
            /// Enum EMAILRECEIVED for value: EMAIL_RECEIVED
            /// </summary>
            EMAILRECEIVED = 1,

            /// <summary>
            /// Enum NEWEMAIL for value: NEW_EMAIL
            /// </summary>
            NEWEMAIL = 2,

            /// <summary>
            /// Enum NEWCONTACT for value: NEW_CONTACT
            /// </summary>
            NEWCONTACT = 3,

            /// <summary>
            /// Enum NEWATTACHMENT for value: NEW_ATTACHMENT
            /// </summary>
            NEWATTACHMENT = 4,

            /// <summary>
            /// Enum EMAILOPENED for value: EMAIL_OPENED
            /// </summary>
            EMAILOPENED = 5,

            /// <summary>
            /// Enum EMAILREAD for value: EMAIL_READ
            /// </summary>
            EMAILREAD = 6,

            /// <summary>
            /// Enum DELIVERYSTATUS for value: DELIVERY_STATUS
            /// </summary>
            DELIVERYSTATUS = 7,

            /// <summary>
            /// Enum BOUNCE for value: BOUNCE
            /// </summary>
            BOUNCE = 8,

            /// <summary>
            /// Enum BOUNCERECIPIENT for value: BOUNCE_RECIPIENT
            /// </summary>
            BOUNCERECIPIENT = 9,

            /// <summary>
            /// Enum NEWSMS for value: NEW_SMS
            /// </summary>
            NEWSMS = 10,

            /// <summary>
            /// Enum NEWGUESTUSER for value: NEW_GUEST_USER
            /// </summary>
            NEWGUESTUSER = 11
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventNameEnum EventNameEnumFromString(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            throw new NotImplementedException($"Could not convert value to type EventNameEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventNameEnum? EventNameEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventNameEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventNameEnumToJsonValue(EventNameEnum value)
        {
            if (value == EventNameEnum.EMAILRECEIVED)
                return "EMAIL_RECEIVED";

            if (value == EventNameEnum.NEWEMAIL)
                return "NEW_EMAIL";

            if (value == EventNameEnum.NEWCONTACT)
                return "NEW_CONTACT";

            if (value == EventNameEnum.NEWATTACHMENT)
                return "NEW_ATTACHMENT";

            if (value == EventNameEnum.EMAILOPENED)
                return "EMAIL_OPENED";

            if (value == EventNameEnum.EMAILREAD)
                return "EMAIL_READ";

            if (value == EventNameEnum.DELIVERYSTATUS)
                return "DELIVERY_STATUS";

            if (value == EventNameEnum.BOUNCE)
                return "BOUNCE";

            if (value == EventNameEnum.BOUNCERECIPIENT)
                return "BOUNCE_RECIPIENT";

            if (value == EventNameEnum.NEWSMS)
                return "NEW_SMS";

            if (value == EventNameEnum.NEWGUESTUSER)
                return "NEW_GUEST_USER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Name of the event type webhook is being triggered for.
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for.</value>
        [JsonPropertyName("eventName")]
        public EventNameEnum EventName { get; set; }

        /// <summary>
        /// Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
        /// </summary>
        /// <value>Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</value>
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// ID of webhook entity being triggered
        /// </summary>
        /// <value>ID of webhook entity being triggered</value>
        [JsonPropertyName("webhookId")]
        public Guid WebhookId { get; set; }

        /// <summary>
        /// ID of delivery status
        /// </summary>
        /// <value>ID of delivery status</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// User ID of event
        /// </summary>
        /// <value>User ID of event</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Used to track the state of WebhookName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WebhookNameOption { get; private set; }

        /// <summary>
        /// Name of the webhook being triggered
        /// </summary>
        /// <value>Name of the webhook being triggered</value>
        [JsonPropertyName("webhookName")]
        public string WebhookName { get { return this.WebhookNameOption; } set { this.WebhookNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> SentIdOption { get; private set; }

        /// <summary>
        /// ID of sent email
        /// </summary>
        /// <value>ID of sent email</value>
        [JsonPropertyName("sentId")]
        public Guid? SentId { get { return this.SentIdOption; } set { this.SentIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of RemoteMtaIp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemoteMtaIpOption { get; private set; }

        /// <summary>
        /// IP address of the remote Mail Transfer Agent
        /// </summary>
        /// <value>IP address of the remote Mail Transfer Agent</value>
        [JsonPropertyName("remoteMtaIp")]
        public string RemoteMtaIp { get { return this.RemoteMtaIpOption; } set { this.RemoteMtaIpOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Id of the inbox
        /// </summary>
        /// <value>Id of the inbox</value>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of ReportingMta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReportingMtaOption { get; private set; }

        /// <summary>
        /// Mail Transfer Agent reporting delivery status
        /// </summary>
        /// <value>Mail Transfer Agent reporting delivery status</value>
        [JsonPropertyName("reportingMta")]
        public string ReportingMta { get { return this.ReportingMtaOption; } set { this.ReportingMtaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Recipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> RecipientsOption { get; private set; }

        /// <summary>
        /// Recipients for delivery
        /// </summary>
        /// <value>Recipients for delivery</value>
        [JsonPropertyName("recipients")]
        public List<string> Recipients { get { return this.RecipientsOption; } set { this.RecipientsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of SmtpResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SmtpResponseOption { get; private set; }

        /// <summary>
        /// SMTP server response message
        /// </summary>
        /// <value>SMTP server response message</value>
        [JsonPropertyName("smtpResponse")]
        public string SmtpResponse { get { return this.SmtpResponseOption; } set { this.SmtpResponseOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SmtpStatusCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SmtpStatusCodeOption { get; private set; }

        /// <summary>
        /// SMTP server status
        /// </summary>
        /// <value>SMTP server status</value>
        [JsonPropertyName("smtpStatusCode")]
        public int? SmtpStatusCode { get { return this.SmtpStatusCodeOption; } set { this.SmtpStatusCodeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ProcessingTimeMillis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProcessingTimeMillisOption { get; private set; }

        /// <summary>
        /// Time in milliseconds for delivery processing
        /// </summary>
        /// <value>Time in milliseconds for delivery processing</value>
        [JsonPropertyName("processingTimeMillis")]
        public long? ProcessingTimeMillis { get { return this.ProcessingTimeMillisOption; } set { this.ProcessingTimeMillisOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Received
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ReceivedOption { get; private set; }

        /// <summary>
        /// Time event was received
        /// </summary>
        /// <value>Time event was received</value>
        [JsonPropertyName("received")]
        public DateTime? Received { get { return this.ReceivedOption; } set { this.ReceivedOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Email subject
        /// </summary>
        /// <value>Email subject</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookDeliveryStatusPayload {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  WebhookName: ").Append(WebhookName).Append("\n");
            sb.Append("  SentId: ").Append(SentId).Append("\n");
            sb.Append("  RemoteMtaIp: ").Append(RemoteMtaIp).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  ReportingMta: ").Append(ReportingMta).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  SmtpResponse: ").Append(SmtpResponse).Append("\n");
            sb.Append("  SmtpStatusCode: ").Append(SmtpStatusCode).Append("\n");
            sb.Append("  ProcessingTimeMillis: ").Append(ProcessingTimeMillis).Append("\n");
            sb.Append("  Received: ").Append(Received).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookDeliveryStatusPayload" />
    /// </summary>
    public class WebhookDeliveryStatusPayloadJsonConverter : JsonConverter<WebhookDeliveryStatusPayload>
    {
        /// <summary>
        /// The format to use to serialize Received
        /// </summary>
        public static string ReceivedFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WebhookDeliveryStatusPayload" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookDeliveryStatusPayload Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> messageId = default;
            Option<Guid?> webhookId = default;
            Option<WebhookDeliveryStatusPayload.EventNameEnum?> eventName = default;
            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<string> webhookName = default;
            Option<Guid?> sentId = default;
            Option<string> remoteMtaIp = default;
            Option<Guid?> inboxId = default;
            Option<string> reportingMta = default;
            Option<List<string>> recipients = default;
            Option<string> smtpResponse = default;
            Option<int?> smtpStatusCode = default;
            Option<long?> processingTimeMillis = default;
            Option<DateTime?> received = default;
            Option<string> subject = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "messageId":
                            messageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "webhookId":
                            webhookId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "eventName":
                            string eventNameRawValue = utf8JsonReader.GetString();
                            if (eventNameRawValue != null)
                                eventName = new Option<WebhookDeliveryStatusPayload.EventNameEnum?>(WebhookDeliveryStatusPayload.EventNameEnumFromStringOrDefault(eventNameRawValue));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "webhookName":
                            webhookName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sentId":
                            sentId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "remoteMtaIp":
                            remoteMtaIp = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "reportingMta":
                            reportingMta = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recipients":
                            recipients = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "smtpResponse":
                            smtpResponse = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "smtpStatusCode":
                            smtpStatusCode = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "processingTimeMillis":
                            processingTimeMillis = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "received":
                            received = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class WebhookDeliveryStatusPayload.", nameof(messageId));

            if (!webhookId.IsSet)
                throw new ArgumentException("Property is required for class WebhookDeliveryStatusPayload.", nameof(webhookId));

            if (!eventName.IsSet)
                throw new ArgumentException("Property is required for class WebhookDeliveryStatusPayload.", nameof(eventName));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class WebhookDeliveryStatusPayload.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class WebhookDeliveryStatusPayload.", nameof(userId));

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class WebhookDeliveryStatusPayload.");

            if (webhookId.IsSet && webhookId.Value == null)
                throw new ArgumentNullException(nameof(webhookId), "Property is not nullable for class WebhookDeliveryStatusPayload.");

            if (eventName.IsSet && eventName.Value == null)
                throw new ArgumentNullException(nameof(eventName), "Property is not nullable for class WebhookDeliveryStatusPayload.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebhookDeliveryStatusPayload.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class WebhookDeliveryStatusPayload.");

            return new WebhookDeliveryStatusPayload(messageId.Value, webhookId.Value.Value, eventName.Value.Value, id.Value.Value, userId.Value.Value, webhookName, sentId, remoteMtaIp, inboxId, reportingMta, recipients, smtpResponse, smtpStatusCode, processingTimeMillis, received, subject);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookDeliveryStatusPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookDeliveryStatusPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookDeliveryStatusPayload webhookDeliveryStatusPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookDeliveryStatusPayload, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookDeliveryStatusPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookDeliveryStatusPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookDeliveryStatusPayload webhookDeliveryStatusPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookDeliveryStatusPayload.MessageId == null)
                throw new ArgumentNullException(nameof(webhookDeliveryStatusPayload.MessageId), "Property is required for class WebhookDeliveryStatusPayload.");

            writer.WriteString("messageId", webhookDeliveryStatusPayload.MessageId);

            writer.WriteString("webhookId", webhookDeliveryStatusPayload.WebhookId);

            var eventNameRawValue = WebhookDeliveryStatusPayload.EventNameEnumToJsonValue(webhookDeliveryStatusPayload.EventName);
            writer.WriteString("eventName", eventNameRawValue);
            writer.WriteString("id", webhookDeliveryStatusPayload.Id);

            writer.WriteString("userId", webhookDeliveryStatusPayload.UserId);

            if (webhookDeliveryStatusPayload.WebhookNameOption.IsSet)
                if (webhookDeliveryStatusPayload.WebhookNameOption.Value != null)
                    writer.WriteString("webhookName", webhookDeliveryStatusPayload.WebhookName);
                else
                    writer.WriteNull("webhookName");

            if (webhookDeliveryStatusPayload.SentIdOption.IsSet)
                if (webhookDeliveryStatusPayload.SentIdOption.Value != null)
                    writer.WriteString("sentId", webhookDeliveryStatusPayload.SentIdOption.Value.Value);
                else
                    writer.WriteNull("sentId");

            if (webhookDeliveryStatusPayload.RemoteMtaIpOption.IsSet)
                if (webhookDeliveryStatusPayload.RemoteMtaIpOption.Value != null)
                    writer.WriteString("remoteMtaIp", webhookDeliveryStatusPayload.RemoteMtaIp);
                else
                    writer.WriteNull("remoteMtaIp");

            if (webhookDeliveryStatusPayload.InboxIdOption.IsSet)
                if (webhookDeliveryStatusPayload.InboxIdOption.Value != null)
                    writer.WriteString("inboxId", webhookDeliveryStatusPayload.InboxIdOption.Value.Value);
                else
                    writer.WriteNull("inboxId");

            if (webhookDeliveryStatusPayload.ReportingMtaOption.IsSet)
                if (webhookDeliveryStatusPayload.ReportingMtaOption.Value != null)
                    writer.WriteString("reportingMta", webhookDeliveryStatusPayload.ReportingMta);
                else
                    writer.WriteNull("reportingMta");

            if (webhookDeliveryStatusPayload.RecipientsOption.IsSet)
                if (webhookDeliveryStatusPayload.RecipientsOption.Value != null)
                {
                    writer.WritePropertyName("recipients");
                    JsonSerializer.Serialize(writer, webhookDeliveryStatusPayload.Recipients, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("recipients");
            if (webhookDeliveryStatusPayload.SmtpResponseOption.IsSet)
                if (webhookDeliveryStatusPayload.SmtpResponseOption.Value != null)
                    writer.WriteString("smtpResponse", webhookDeliveryStatusPayload.SmtpResponse);
                else
                    writer.WriteNull("smtpResponse");

            if (webhookDeliveryStatusPayload.SmtpStatusCodeOption.IsSet)
                if (webhookDeliveryStatusPayload.SmtpStatusCodeOption.Value != null)
                    writer.WriteNumber("smtpStatusCode", webhookDeliveryStatusPayload.SmtpStatusCodeOption.Value.Value);
                else
                    writer.WriteNull("smtpStatusCode");

            if (webhookDeliveryStatusPayload.ProcessingTimeMillisOption.IsSet)
                if (webhookDeliveryStatusPayload.ProcessingTimeMillisOption.Value != null)
                    writer.WriteNumber("processingTimeMillis", webhookDeliveryStatusPayload.ProcessingTimeMillisOption.Value.Value);
                else
                    writer.WriteNull("processingTimeMillis");

            if (webhookDeliveryStatusPayload.ReceivedOption.IsSet)
                if (webhookDeliveryStatusPayload.ReceivedOption.Value != null)
                    writer.WriteString("received", webhookDeliveryStatusPayload.ReceivedOption.Value.Value.ToString(ReceivedFormat));
                else
                    writer.WriteNull("received");

            if (webhookDeliveryStatusPayload.SubjectOption.IsSet)
                if (webhookDeliveryStatusPayload.SubjectOption.Value != null)
                    writer.WriteString("subject", webhookDeliveryStatusPayload.Subject);
                else
                    writer.WriteNull("subject");
        }
    }
}
