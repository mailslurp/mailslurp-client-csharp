/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for verifying that an email address exists at a remote mail server.
    /// </summary>
    [DataContract(Name = "VerifyEmailAddressOptions")]
    public partial class VerifyEmailAddressOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyEmailAddressOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VerifyEmailAddressOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyEmailAddressOptions" /> class.
        /// </summary>
        /// <param name="mailServerDomain">mailServerDomain.</param>
        /// <param name="emailAddress">emailAddress (required).</param>
        /// <param name="senderEmailAddress">senderEmailAddress.</param>
        /// <param name="port">port.</param>
        public VerifyEmailAddressOptions(string mailServerDomain = default, string emailAddress = default, string senderEmailAddress = default, int? port = default)
        {
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new ArgumentNullException("emailAddress is a required property for VerifyEmailAddressOptions and cannot be null");
            }
            this.EmailAddress = emailAddress;
            this.MailServerDomain = mailServerDomain;
            this.SenderEmailAddress = senderEmailAddress;
            this.Port = port;
        }

        /// <summary>
        /// Gets or Sets MailServerDomain
        /// </summary>
        [DataMember(Name = "mailServerDomain", EmitDefaultValue = true)]
        public string MailServerDomain { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "emailAddress", IsRequired = true, EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets SenderEmailAddress
        /// </summary>
        [DataMember(Name = "senderEmailAddress", EmitDefaultValue = true)]
        public string SenderEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = true)]
        public int? Port { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyEmailAddressOptions {\n");
            sb.Append("  MailServerDomain: ").Append(MailServerDomain).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  SenderEmailAddress: ").Append(SenderEmailAddress).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
