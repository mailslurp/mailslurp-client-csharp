// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for verifying that an email address exists at a remote mail server.
    /// </summary>
    public partial class VerifyEmailAddressOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyEmailAddressOptions" /> class.
        /// </summary>
        /// <param name="emailAddress">emailAddress</param>
        /// <param name="mailServerDomain">mailServerDomain</param>
        /// <param name="senderEmailAddress">senderEmailAddress</param>
        /// <param name="port">port</param>
        [JsonConstructor]
        public VerifyEmailAddressOptions(string emailAddress, Option<string> mailServerDomain = default, Option<string> senderEmailAddress = default, Option<int?> port = default)
        {
            EmailAddress = emailAddress;
            MailServerDomainOption = mailServerDomain;
            SenderEmailAddressOption = senderEmailAddress;
            PortOption = port;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Used to track the state of MailServerDomain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MailServerDomainOption { get; private set; }

        /// <summary>
        /// Gets or Sets MailServerDomain
        /// </summary>
        [JsonPropertyName("mailServerDomain")]
        public string MailServerDomain { get { return this.MailServerDomainOption; } set { this.MailServerDomainOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SenderEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SenderEmailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets SenderEmailAddress
        /// </summary>
        [JsonPropertyName("senderEmailAddress")]
        public string SenderEmailAddress { get { return this.SenderEmailAddressOption; } set { this.SenderEmailAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Port
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PortOption { get; private set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [JsonPropertyName("port")]
        public int? Port { get { return this.PortOption; } set { this.PortOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyEmailAddressOptions {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  MailServerDomain: ").Append(MailServerDomain).Append("\n");
            sb.Append("  SenderEmailAddress: ").Append(SenderEmailAddress).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VerifyEmailAddressOptions" />
    /// </summary>
    public class VerifyEmailAddressOptionsJsonConverter : JsonConverter<VerifyEmailAddressOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="VerifyEmailAddressOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VerifyEmailAddressOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> emailAddress = default;
            Option<string> mailServerDomain = default;
            Option<string> senderEmailAddress = default;
            Option<int?> port = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mailServerDomain":
                            mailServerDomain = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "senderEmailAddress":
                            senderEmailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "port":
                            port = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class VerifyEmailAddressOptions.", nameof(emailAddress));

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class VerifyEmailAddressOptions.");

            return new VerifyEmailAddressOptions(emailAddress.Value, mailServerDomain, senderEmailAddress, port);
        }

        /// <summary>
        /// Serializes a <see cref="VerifyEmailAddressOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifyEmailAddressOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VerifyEmailAddressOptions verifyEmailAddressOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, verifyEmailAddressOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VerifyEmailAddressOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifyEmailAddressOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VerifyEmailAddressOptions verifyEmailAddressOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (verifyEmailAddressOptions.EmailAddress == null)
                throw new ArgumentNullException(nameof(verifyEmailAddressOptions.EmailAddress), "Property is required for class VerifyEmailAddressOptions.");

            writer.WriteString("emailAddress", verifyEmailAddressOptions.EmailAddress);

            if (verifyEmailAddressOptions.MailServerDomainOption.IsSet)
                if (verifyEmailAddressOptions.MailServerDomainOption.Value != null)
                    writer.WriteString("mailServerDomain", verifyEmailAddressOptions.MailServerDomain);
                else
                    writer.WriteNull("mailServerDomain");

            if (verifyEmailAddressOptions.SenderEmailAddressOption.IsSet)
                if (verifyEmailAddressOptions.SenderEmailAddressOption.Value != null)
                    writer.WriteString("senderEmailAddress", verifyEmailAddressOptions.SenderEmailAddress);
                else
                    writer.WriteNull("senderEmailAddress");

            if (verifyEmailAddressOptions.PortOption.IsSet)
                if (verifyEmailAddressOptions.PortOption.Value != null)
                    writer.WriteNumber("port", verifyEmailAddressOptions.PortOption.Value.Value);
                else
                    writer.WriteNull("port");
        }
    }
}
