// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// IMAP fetch content in raw format
    /// </summary>
    public partial class ImapServerFetchItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapServerFetchItem" /> class.
        /// </summary>
        /// <param name="content">Content of the email</param>
        /// <param name="id">ID of the email</param>
        /// <param name="uid">UID of the email</param>
        /// <param name="seqNum">Sequence number of the email</param>
        /// <param name="read">Read status of the email</param>
        [JsonConstructor]
        public ImapServerFetchItem(string content, Guid id, long uid, long seqNum, bool read)
        {
            Content = content;
            Id = id;
            Uid = uid;
            SeqNum = seqNum;
            Read = read;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Content of the email
        /// </summary>
        /// <value>Content of the email</value>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// ID of the email
        /// </summary>
        /// <value>ID of the email</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// UID of the email
        /// </summary>
        /// <value>UID of the email</value>
        [JsonPropertyName("uid")]
        public long Uid { get; set; }

        /// <summary>
        /// Sequence number of the email
        /// </summary>
        /// <value>Sequence number of the email</value>
        [JsonPropertyName("seqNum")]
        public long SeqNum { get; set; }

        /// <summary>
        /// Read status of the email
        /// </summary>
        /// <value>Read status of the email</value>
        [JsonPropertyName("read")]
        public bool Read { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImapServerFetchItem {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  SeqNum: ").Append(SeqNum).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImapServerFetchItem" />
    /// </summary>
    public class ImapServerFetchItemJsonConverter : JsonConverter<ImapServerFetchItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImapServerFetchItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImapServerFetchItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> content = default;
            Option<Guid?> id = default;
            Option<long?> uid = default;
            Option<long?> seqNum = default;
            Option<bool?> read = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "content":
                            content = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "uid":
                            uid = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "seqNum":
                            seqNum = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "read":
                            read = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class ImapServerFetchItem.", nameof(content));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ImapServerFetchItem.", nameof(id));

            if (!uid.IsSet)
                throw new ArgumentException("Property is required for class ImapServerFetchItem.", nameof(uid));

            if (!seqNum.IsSet)
                throw new ArgumentException("Property is required for class ImapServerFetchItem.", nameof(seqNum));

            if (!read.IsSet)
                throw new ArgumentException("Property is required for class ImapServerFetchItem.", nameof(read));

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class ImapServerFetchItem.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ImapServerFetchItem.");

            if (uid.IsSet && uid.Value == null)
                throw new ArgumentNullException(nameof(uid), "Property is not nullable for class ImapServerFetchItem.");

            if (seqNum.IsSet && seqNum.Value == null)
                throw new ArgumentNullException(nameof(seqNum), "Property is not nullable for class ImapServerFetchItem.");

            if (read.IsSet && read.Value == null)
                throw new ArgumentNullException(nameof(read), "Property is not nullable for class ImapServerFetchItem.");

            return new ImapServerFetchItem(content.Value, id.Value.Value, uid.Value.Value, seqNum.Value.Value, read.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="ImapServerFetchItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapServerFetchItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImapServerFetchItem imapServerFetchItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imapServerFetchItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImapServerFetchItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapServerFetchItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImapServerFetchItem imapServerFetchItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imapServerFetchItem.Content == null)
                throw new ArgumentNullException(nameof(imapServerFetchItem.Content), "Property is required for class ImapServerFetchItem.");

            writer.WriteString("content", imapServerFetchItem.Content);

            writer.WriteString("id", imapServerFetchItem.Id);

            writer.WriteNumber("uid", imapServerFetchItem.Uid);

            writer.WriteNumber("seqNum", imapServerFetchItem.SeqNum);

            writer.WriteBoolean("read", imapServerFetchItem.Read);
        }
    }
}
