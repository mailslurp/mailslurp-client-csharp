// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// IMAP operation flags
    /// </summary>
    public partial class ImapFlagOperationOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapFlagOperationOptions" /> class.
        /// </summary>
        /// <param name="flagOperation">flagOperation</param>
        /// <param name="flags">flags</param>
        [JsonConstructor]
        public ImapFlagOperationOptions(FlagOperationEnum flagOperation, List<string> flags)
        {
            FlagOperation = flagOperation;
            Flags = flags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines FlagOperation
        /// </summary>
        public enum FlagOperationEnum
        {
            /// <summary>
            /// Enum SETFLAGS for value: SET_FLAGS
            /// </summary>
            SETFLAGS = 1,

            /// <summary>
            /// Enum ADDFLAGS for value: ADD_FLAGS
            /// </summary>
            ADDFLAGS = 2,

            /// <summary>
            /// Enum REMOVEFLAGS for value: REMOVE_FLAGS
            /// </summary>
            REMOVEFLAGS = 3
        }

        /// <summary>
        /// Returns a <see cref="FlagOperationEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FlagOperationEnum FlagOperationEnumFromString(string value)
        {
            if (value.Equals("SET_FLAGS"))
                return FlagOperationEnum.SETFLAGS;

            if (value.Equals("ADD_FLAGS"))
                return FlagOperationEnum.ADDFLAGS;

            if (value.Equals("REMOVE_FLAGS"))
                return FlagOperationEnum.REMOVEFLAGS;

            throw new NotImplementedException($"Could not convert value to type FlagOperationEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FlagOperationEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FlagOperationEnum? FlagOperationEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SET_FLAGS"))
                return FlagOperationEnum.SETFLAGS;

            if (value.Equals("ADD_FLAGS"))
                return FlagOperationEnum.ADDFLAGS;

            if (value.Equals("REMOVE_FLAGS"))
                return FlagOperationEnum.REMOVEFLAGS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FlagOperationEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FlagOperationEnumToJsonValue(FlagOperationEnum value)
        {
            if (value == FlagOperationEnum.SETFLAGS)
                return "SET_FLAGS";

            if (value == FlagOperationEnum.ADDFLAGS)
                return "ADD_FLAGS";

            if (value == FlagOperationEnum.REMOVEFLAGS)
                return "REMOVE_FLAGS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets FlagOperation
        /// </summary>
        [JsonPropertyName("flagOperation")]
        public FlagOperationEnum FlagOperation { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [JsonPropertyName("flags")]
        public List<string> Flags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImapFlagOperationOptions {\n");
            sb.Append("  FlagOperation: ").Append(FlagOperation).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImapFlagOperationOptions" />
    /// </summary>
    public class ImapFlagOperationOptionsJsonConverter : JsonConverter<ImapFlagOperationOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImapFlagOperationOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImapFlagOperationOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ImapFlagOperationOptions.FlagOperationEnum?> flagOperation = default;
            Option<List<string>> flags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "flagOperation":
                            string flagOperationRawValue = utf8JsonReader.GetString();
                            if (flagOperationRawValue != null)
                                flagOperation = new Option<ImapFlagOperationOptions.FlagOperationEnum?>(ImapFlagOperationOptions.FlagOperationEnumFromStringOrDefault(flagOperationRawValue));
                            break;
                        case "flags":
                            flags = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!flagOperation.IsSet)
                throw new ArgumentException("Property is required for class ImapFlagOperationOptions.", nameof(flagOperation));

            if (!flags.IsSet)
                throw new ArgumentException("Property is required for class ImapFlagOperationOptions.", nameof(flags));

            if (flagOperation.IsSet && flagOperation.Value == null)
                throw new ArgumentNullException(nameof(flagOperation), "Property is not nullable for class ImapFlagOperationOptions.");

            if (flags.IsSet && flags.Value == null)
                throw new ArgumentNullException(nameof(flags), "Property is not nullable for class ImapFlagOperationOptions.");

            return new ImapFlagOperationOptions(flagOperation.Value.Value, flags.Value);
        }

        /// <summary>
        /// Serializes a <see cref="ImapFlagOperationOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapFlagOperationOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImapFlagOperationOptions imapFlagOperationOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imapFlagOperationOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImapFlagOperationOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapFlagOperationOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImapFlagOperationOptions imapFlagOperationOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imapFlagOperationOptions.Flags == null)
                throw new ArgumentNullException(nameof(imapFlagOperationOptions.Flags), "Property is required for class ImapFlagOperationOptions.");

            var flagOperationRawValue = ImapFlagOperationOptions.FlagOperationEnumToJsonValue(imapFlagOperationOptions.FlagOperation);
            writer.WriteString("flagOperation", flagOperationRawValue);
            writer.WritePropertyName("flags");
            JsonSerializer.Serialize(writer, imapFlagOperationOptions.Flags, jsonSerializerOptions);
        }
    }
}
