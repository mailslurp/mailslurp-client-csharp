/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// IMAP operation flags
    /// </summary>
    [DataContract(Name = "ImapFlagOperationOptions")]
    public partial class ImapFlagOperationOptions : IEquatable<ImapFlagOperationOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines FlagOperation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlagOperationEnum
        {
            /// <summary>
            /// Enum SETFLAGS for value: SET_FLAGS
            /// </summary>
            [EnumMember(Value = "SET_FLAGS")]
            SETFLAGS = 1,

            /// <summary>
            /// Enum ADDFLAGS for value: ADD_FLAGS
            /// </summary>
            [EnumMember(Value = "ADD_FLAGS")]
            ADDFLAGS = 2,

            /// <summary>
            /// Enum REMOVEFLAGS for value: REMOVE_FLAGS
            /// </summary>
            [EnumMember(Value = "REMOVE_FLAGS")]
            REMOVEFLAGS = 3

        }


        /// <summary>
        /// Gets or Sets FlagOperation
        /// </summary>
        [DataMember(Name = "flagOperation", IsRequired = true, EmitDefaultValue = true)]
        public FlagOperationEnum FlagOperation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapFlagOperationOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImapFlagOperationOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapFlagOperationOptions" /> class.
        /// </summary>
        /// <param name="flagOperation">flagOperation (required).</param>
        /// <param name="flags">flags (required).</param>
        public ImapFlagOperationOptions(FlagOperationEnum flagOperation = default(FlagOperationEnum), List<string> flags = default(List<string>))
        {
            this.FlagOperation = flagOperation;
            // to ensure "flags" is required (not null)
            if (flags == null)
            {
                throw new ArgumentNullException("flags is a required property for ImapFlagOperationOptions and cannot be null");
            }
            this.Flags = flags;
        }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [DataMember(Name = "flags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImapFlagOperationOptions {\n");
            sb.Append("  FlagOperation: ").Append(FlagOperation).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImapFlagOperationOptions);
        }

        /// <summary>
        /// Returns true if ImapFlagOperationOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ImapFlagOperationOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImapFlagOperationOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FlagOperation == input.FlagOperation ||
                    this.FlagOperation.Equals(input.FlagOperation)
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    input.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FlagOperation.GetHashCode();
                if (this.Flags != null)
                {
                    hashCode = (hashCode * 59) + this.Flags.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
