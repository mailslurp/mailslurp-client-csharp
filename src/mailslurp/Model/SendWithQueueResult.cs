// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// SendWithQueueResult
    /// </summary>
    public partial class SendWithQueueResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendWithQueueResult" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="headerId">headerId</param>
        /// <param name="delivered">delivered</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="subject">subject</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="exceptionName">exceptionName</param>
        /// <param name="message">message</param>
        [JsonConstructor]
        public SendWithQueueResult(Guid id, Guid userId, string headerId, bool delivered, DateTime createdAt, DateTime updatedAt, Option<string> subject = default, Option<Guid?> inboxId = default, Option<string> exceptionName = default, Option<string> message = default)
        {
            Id = id;
            UserId = userId;
            HeaderId = headerId;
            Delivered = delivered;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            SubjectOption = subject;
            InboxIdOption = inboxId;
            ExceptionNameOption = exceptionName;
            MessageOption = message;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets HeaderId
        /// </summary>
        [JsonPropertyName("headerId")]
        public string HeaderId { get; set; }

        /// <summary>
        /// Gets or Sets Delivered
        /// </summary>
        [JsonPropertyName("delivered")]
        public bool Delivered { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of ExceptionName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExceptionNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExceptionName
        /// </summary>
        [JsonPropertyName("exceptionName")]
        public string ExceptionName { get { return this.ExceptionNameOption; } set { this.ExceptionNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendWithQueueResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  HeaderId: ").Append(HeaderId).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  ExceptionName: ").Append(ExceptionName).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendWithQueueResult" />
    /// </summary>
    public class SendWithQueueResultJsonConverter : JsonConverter<SendWithQueueResult>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SendWithQueueResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendWithQueueResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<string> headerId = default;
            Option<bool?> delivered = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string> subject = default;
            Option<Guid?> inboxId = default;
            Option<string> exceptionName = default;
            Option<string> message = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "headerId":
                            headerId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "delivered":
                            delivered = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "exceptionName":
                            exceptionName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "message":
                            message = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SendWithQueueResult.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class SendWithQueueResult.", nameof(userId));

            if (!headerId.IsSet)
                throw new ArgumentException("Property is required for class SendWithQueueResult.", nameof(headerId));

            if (!delivered.IsSet)
                throw new ArgumentException("Property is required for class SendWithQueueResult.", nameof(delivered));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class SendWithQueueResult.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class SendWithQueueResult.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SendWithQueueResult.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class SendWithQueueResult.");

            if (headerId.IsSet && headerId.Value == null)
                throw new ArgumentNullException(nameof(headerId), "Property is not nullable for class SendWithQueueResult.");

            if (delivered.IsSet && delivered.Value == null)
                throw new ArgumentNullException(nameof(delivered), "Property is not nullable for class SendWithQueueResult.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SendWithQueueResult.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class SendWithQueueResult.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class SendWithQueueResult.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class SendWithQueueResult.");

            if (exceptionName.IsSet && exceptionName.Value == null)
                throw new ArgumentNullException(nameof(exceptionName), "Property is not nullable for class SendWithQueueResult.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class SendWithQueueResult.");

            return new SendWithQueueResult(id.Value.Value, userId.Value.Value, headerId.Value, delivered.Value.Value, createdAt.Value.Value, updatedAt.Value.Value, subject, inboxId, exceptionName, message);
        }

        /// <summary>
        /// Serializes a <see cref="SendWithQueueResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendWithQueueResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendWithQueueResult sendWithQueueResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendWithQueueResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendWithQueueResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendWithQueueResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendWithQueueResult sendWithQueueResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendWithQueueResult.HeaderId == null)
                throw new ArgumentNullException(nameof(sendWithQueueResult.HeaderId), "Property is required for class SendWithQueueResult.");

            if (sendWithQueueResult.SubjectOption.IsSet && sendWithQueueResult.Subject == null)
                throw new ArgumentNullException(nameof(sendWithQueueResult.Subject), "Property is required for class SendWithQueueResult.");

            if (sendWithQueueResult.ExceptionNameOption.IsSet && sendWithQueueResult.ExceptionName == null)
                throw new ArgumentNullException(nameof(sendWithQueueResult.ExceptionName), "Property is required for class SendWithQueueResult.");

            if (sendWithQueueResult.MessageOption.IsSet && sendWithQueueResult.Message == null)
                throw new ArgumentNullException(nameof(sendWithQueueResult.Message), "Property is required for class SendWithQueueResult.");

            writer.WriteString("id", sendWithQueueResult.Id);

            writer.WriteString("userId", sendWithQueueResult.UserId);

            writer.WriteString("headerId", sendWithQueueResult.HeaderId);

            writer.WriteBoolean("delivered", sendWithQueueResult.Delivered);

            writer.WriteString("createdAt", sendWithQueueResult.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", sendWithQueueResult.UpdatedAt.ToString(UpdatedAtFormat));

            if (sendWithQueueResult.SubjectOption.IsSet)
                writer.WriteString("subject", sendWithQueueResult.Subject);

            if (sendWithQueueResult.InboxIdOption.IsSet)
                writer.WriteString("inboxId", sendWithQueueResult.InboxIdOption.Value.Value);

            if (sendWithQueueResult.ExceptionNameOption.IsSet)
                writer.WriteString("exceptionName", sendWithQueueResult.ExceptionName);

            if (sendWithQueueResult.MessageOption.IsSet)
                writer.WriteString("message", sendWithQueueResult.Message);
        }
    }
}
