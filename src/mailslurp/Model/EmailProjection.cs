/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// A compact representation of a full email. Used in list endpoints to keep response sizes low. Body and attachments are not included. To get all fields of the email use the &#x60;getEmail&#x60; method with the email projection&#39;s ID. See &#x60;EmailDto&#x60; for documentation on projection properties.
    /// </summary>
    [DataContract(Name = "EmailProjection")]
    public partial class EmailProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailProjection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailProjection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailProjection" /> class.
        /// </summary>
        /// <param name="sender">sender.</param>
        /// <param name="recipients">recipients.</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="inboxId">inboxId (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="to">to (required).</param>
        /// <param name="cc">cc.</param>
        /// <param name="bcc">bcc.</param>
        /// <param name="messageId">messageId.</param>
        /// <param name="domainId">domainId.</param>
        /// <param name="favourite">favourite.</param>
        /// <param name="plusAddress">plusAddress.</param>
        /// <param name="sizeBytes">sizeBytes.</param>
        /// <param name="inReplyTo">inReplyTo.</param>
        /// <param name="read">read (required).</param>
        /// <param name="bodyExcerpt">bodyExcerpt.</param>
        /// <param name="textExcerpt">textExcerpt.</param>
        /// <param name="bodyPartContentTypes">bodyPartContentTypes.</param>
        /// <param name="bodyMD5Hash">bodyMD5Hash.</param>
        /// <param name="teamAccess">teamAccess (required).</param>
        /// <param name="subject">subject.</param>
        /// <param name="id">id (required).</param>
        /// <param name="threadId">threadId.</param>
        /// <param name="from">from (required).</param>
        public EmailProjection(Sender sender = default, EmailRecipients recipients = default, List<string> attachments = default, Guid inboxId = default, DateTime createdAt = default, List<string> to = default, List<string> cc = default, List<string> bcc = default, string messageId = default, Guid? domainId = default, bool? favourite = default, Guid? plusAddress = default, long? sizeBytes = default, string inReplyTo = default, bool read = default, string bodyExcerpt = default, string textExcerpt = default, List<string> bodyPartContentTypes = default, string bodyMD5Hash = default, bool teamAccess = default, string subject = default, Guid id = default, Guid? threadId = default, string from = default)
        {
            this.InboxId = inboxId;
            this.CreatedAt = createdAt;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for EmailProjection and cannot be null");
            }
            this.To = to;
            this.Read = read;
            this.TeamAccess = teamAccess;
            this.Id = id;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for EmailProjection and cannot be null");
            }
            this.From = from;
            this.Sender = sender;
            this.Recipients = recipients;
            this.Attachments = attachments;
            this.Cc = cc;
            this.Bcc = bcc;
            this.MessageId = messageId;
            this.DomainId = domainId;
            this.Favourite = favourite;
            this.PlusAddress = plusAddress;
            this.SizeBytes = sizeBytes;
            this.InReplyTo = inReplyTo;
            this.BodyExcerpt = bodyExcerpt;
            this.TextExcerpt = textExcerpt;
            this.BodyPartContentTypes = bodyPartContentTypes;
            this.BodyMD5Hash = bodyMD5Hash;
            this.Subject = subject;
            this.ThreadId = threadId;
        }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = true)]
        public Sender Sender { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name = "recipients", EmitDefaultValue = true)]
        public EmailRecipients Recipients { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = true)]
        public List<string> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [DataMember(Name = "inboxId", IsRequired = true, EmitDefaultValue = true)]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public List<string> To { get; set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [DataMember(Name = "cc", EmitDefaultValue = true)]
        public List<string> Cc { get; set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [DataMember(Name = "bcc", EmitDefaultValue = true)]
        public List<string> Bcc { get; set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name = "messageId", EmitDefaultValue = true)]
        public string MessageId { get; set; }

        /// <summary>
        /// Gets or Sets DomainId
        /// </summary>
        [DataMember(Name = "domainId", EmitDefaultValue = true)]
        public Guid? DomainId { get; set; }

        /// <summary>
        /// Gets or Sets Favourite
        /// </summary>
        [DataMember(Name = "favourite", EmitDefaultValue = true)]
        public bool? Favourite { get; set; }

        /// <summary>
        /// Gets or Sets PlusAddress
        /// </summary>
        [DataMember(Name = "plusAddress", EmitDefaultValue = true)]
        public Guid? PlusAddress { get; set; }

        /// <summary>
        /// Gets or Sets SizeBytes
        /// </summary>
        [DataMember(Name = "sizeBytes", EmitDefaultValue = true)]
        public long? SizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets InReplyTo
        /// </summary>
        [DataMember(Name = "inReplyTo", EmitDefaultValue = true)]
        public string InReplyTo { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [DataMember(Name = "read", IsRequired = true, EmitDefaultValue = true)]
        public bool Read { get; set; }

        /// <summary>
        /// Gets or Sets BodyExcerpt
        /// </summary>
        [DataMember(Name = "bodyExcerpt", EmitDefaultValue = true)]
        public string BodyExcerpt { get; set; }

        /// <summary>
        /// Gets or Sets TextExcerpt
        /// </summary>
        [DataMember(Name = "textExcerpt", EmitDefaultValue = true)]
        public string TextExcerpt { get; set; }

        /// <summary>
        /// Gets or Sets BodyPartContentTypes
        /// </summary>
        [DataMember(Name = "bodyPartContentTypes", EmitDefaultValue = true)]
        public List<string> BodyPartContentTypes { get; set; }

        /// <summary>
        /// Gets or Sets BodyMD5Hash
        /// </summary>
        [DataMember(Name = "bodyMD5Hash", EmitDefaultValue = true)]
        public string BodyMD5Hash { get; set; }

        /// <summary>
        /// Gets or Sets TeamAccess
        /// </summary>
        [DataMember(Name = "teamAccess", IsRequired = true, EmitDefaultValue = true)]
        public bool TeamAccess { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ThreadId
        /// </summary>
        [DataMember(Name = "threadId", EmitDefaultValue = true)]
        public Guid? ThreadId { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailProjection {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  Favourite: ").Append(Favourite).Append("\n");
            sb.Append("  PlusAddress: ").Append(PlusAddress).Append("\n");
            sb.Append("  SizeBytes: ").Append(SizeBytes).Append("\n");
            sb.Append("  InReplyTo: ").Append(InReplyTo).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  BodyExcerpt: ").Append(BodyExcerpt).Append("\n");
            sb.Append("  TextExcerpt: ").Append(TextExcerpt).Append("\n");
            sb.Append("  BodyPartContentTypes: ").Append(BodyPartContentTypes).Append("\n");
            sb.Append("  BodyMD5Hash: ").Append(BodyMD5Hash).Append("\n");
            sb.Append("  TeamAccess: ").Append(TeamAccess).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
