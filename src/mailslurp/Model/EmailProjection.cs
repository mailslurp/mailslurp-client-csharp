// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// A compact representation of a full email. Used in list endpoints to keep response sizes low. Body and attachments are not included. To get all fields of the email use the &#x60;getEmail&#x60; method with the email projection&#39;s ID. See &#x60;EmailDto&#x60; for documentation on projection properties.
    /// </summary>
    public partial class EmailProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailProjection" /> class.
        /// </summary>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="to">to</param>
        /// <param name="read">read</param>
        /// <param name="teamAccess">teamAccess</param>
        /// <param name="id">id</param>
        /// <param name="sender">sender</param>
        /// <param name="recipients">recipients</param>
        /// <param name="attachments">attachments</param>
        /// <param name="cc">cc</param>
        /// <param name="bcc">bcc</param>
        /// <param name="messageId">messageId</param>
        /// <param name="domainId">domainId</param>
        /// <param name="favourite">favourite</param>
        /// <param name="inReplyTo">inReplyTo</param>
        /// <param name="plusAddress">plusAddress</param>
        /// <param name="sizeBytes">sizeBytes</param>
        /// <param name="bodyExcerpt">bodyExcerpt</param>
        /// <param name="textExcerpt">textExcerpt</param>
        /// <param name="bodyPartContentTypes">bodyPartContentTypes</param>
        /// <param name="bodyMD5Hash">bodyMD5Hash</param>
        /// <param name="subject">subject</param>
        /// <param name="threadId">threadId</param>
        /// <param name="from">from</param>
        [JsonConstructor]
        public EmailProjection(Guid inboxId, DateTime createdAt, List<string> to, bool read, bool teamAccess, Guid id, Option<Sender> sender = default, Option<EmailRecipients> recipients = default, Option<List<string>> attachments = default, Option<List<string>> cc = default, Option<List<string>> bcc = default, Option<string> messageId = default, Option<Guid?> domainId = default, Option<bool?> favourite = default, Option<string> inReplyTo = default, Option<Guid?> plusAddress = default, Option<long?> sizeBytes = default, Option<string> bodyExcerpt = default, Option<string> textExcerpt = default, Option<List<string>> bodyPartContentTypes = default, Option<string> bodyMD5Hash = default, Option<string> subject = default, Option<Guid?> threadId = default, string from = default)
        {
            InboxId = inboxId;
            CreatedAt = createdAt;
            To = to;
            Read = read;
            TeamAccess = teamAccess;
            Id = id;
            SenderOption = sender;
            RecipientsOption = recipients;
            AttachmentsOption = attachments;
            CcOption = cc;
            BccOption = bcc;
            MessageIdOption = messageId;
            DomainIdOption = domainId;
            FavouriteOption = favourite;
            InReplyToOption = inReplyTo;
            PlusAddressOption = plusAddress;
            SizeBytesOption = sizeBytes;
            BodyExcerptOption = bodyExcerpt;
            TextExcerptOption = textExcerpt;
            BodyPartContentTypesOption = bodyPartContentTypes;
            BodyMD5HashOption = bodyMD5Hash;
            SubjectOption = subject;
            ThreadIdOption = threadId;
            From = from;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [JsonPropertyName("to")]
        public List<string> To { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [JsonPropertyName("read")]
        public bool Read { get; set; }

        /// <summary>
        /// Gets or Sets TeamAccess
        /// </summary>
        [JsonPropertyName("teamAccess")]
        public bool TeamAccess { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of Sender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Sender> SenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public Sender Sender { get { return this.SenderOption; } set { this.SenderOption = new Option<Sender>(value); } }

        /// <summary>
        /// Used to track the state of Recipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailRecipients> RecipientsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [JsonPropertyName("recipients")]
        public EmailRecipients Recipients { get { return this.RecipientsOption; } set { this.RecipientsOption = new Option<EmailRecipients>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public List<string> Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CcOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [JsonPropertyName("cc")]
        public List<string> Cc { get { return this.CcOption; } set { this.CcOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BccOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get { return this.BccOption; } set { this.BccOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of MessageId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [JsonPropertyName("messageId")]
        public string MessageId { get { return this.MessageIdOption; } set { this.MessageIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DomainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DomainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets DomainId
        /// </summary>
        [JsonPropertyName("domainId")]
        public Guid? DomainId { get { return this.DomainIdOption; } set { this.DomainIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Favourite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FavouriteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Favourite
        /// </summary>
        [JsonPropertyName("favourite")]
        public bool? Favourite { get { return this.FavouriteOption; } set { this.FavouriteOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of InReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InReplyToOption { get; private set; }

        /// <summary>
        /// Gets or Sets InReplyTo
        /// </summary>
        [JsonPropertyName("inReplyTo")]
        public string InReplyTo { get { return this.InReplyToOption; } set { this.InReplyToOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PlusAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> PlusAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets PlusAddress
        /// </summary>
        [JsonPropertyName("plusAddress")]
        public Guid? PlusAddress { get { return this.PlusAddressOption; } set { this.PlusAddressOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of SizeBytes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SizeBytesOption { get; private set; }

        /// <summary>
        /// Gets or Sets SizeBytes
        /// </summary>
        [JsonPropertyName("sizeBytes")]
        public long? SizeBytes { get { return this.SizeBytesOption; } set { this.SizeBytesOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of BodyExcerpt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyExcerptOption { get; private set; }

        /// <summary>
        /// Gets or Sets BodyExcerpt
        /// </summary>
        [JsonPropertyName("bodyExcerpt")]
        public string BodyExcerpt { get { return this.BodyExcerptOption; } set { this.BodyExcerptOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TextExcerpt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TextExcerptOption { get; private set; }

        /// <summary>
        /// Gets or Sets TextExcerpt
        /// </summary>
        [JsonPropertyName("textExcerpt")]
        public string TextExcerpt { get { return this.TextExcerptOption; } set { this.TextExcerptOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BodyPartContentTypes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BodyPartContentTypesOption { get; private set; }

        /// <summary>
        /// Gets or Sets BodyPartContentTypes
        /// </summary>
        [JsonPropertyName("bodyPartContentTypes")]
        public List<string> BodyPartContentTypes { get { return this.BodyPartContentTypesOption; } set { this.BodyPartContentTypesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of BodyMD5Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyMD5HashOption { get; private set; }

        /// <summary>
        /// Gets or Sets BodyMD5Hash
        /// </summary>
        [JsonPropertyName("bodyMD5Hash")]
        public string BodyMD5Hash { get { return this.BodyMD5HashOption; } set { this.BodyMD5HashOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreadId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ThreadIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreadId
        /// </summary>
        [JsonPropertyName("threadId")]
        public Guid? ThreadId { get { return this.ThreadIdOption; } set { this.ThreadIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailProjection {\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  TeamAccess: ").Append(TeamAccess).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  Favourite: ").Append(Favourite).Append("\n");
            sb.Append("  InReplyTo: ").Append(InReplyTo).Append("\n");
            sb.Append("  PlusAddress: ").Append(PlusAddress).Append("\n");
            sb.Append("  SizeBytes: ").Append(SizeBytes).Append("\n");
            sb.Append("  BodyExcerpt: ").Append(BodyExcerpt).Append("\n");
            sb.Append("  TextExcerpt: ").Append(TextExcerpt).Append("\n");
            sb.Append("  BodyPartContentTypes: ").Append(BodyPartContentTypes).Append("\n");
            sb.Append("  BodyMD5Hash: ").Append(BodyMD5Hash).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailProjection" />
    /// </summary>
    public class EmailProjectionJsonConverter : JsonConverter<EmailProjection>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EmailProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> inboxId = default;
            Option<DateTime?> createdAt = default;
            Option<List<string>> to = default;
            Option<bool?> read = default;
            Option<bool?> teamAccess = default;
            Option<Guid?> id = default;
            Option<Sender> sender = default;
            Option<EmailRecipients> recipients = default;
            Option<List<string>> attachments = default;
            Option<List<string>> cc = default;
            Option<List<string>> bcc = default;
            Option<string> messageId = default;
            Option<Guid?> domainId = default;
            Option<bool?> favourite = default;
            Option<string> inReplyTo = default;
            Option<Guid?> plusAddress = default;
            Option<long?> sizeBytes = default;
            Option<string> bodyExcerpt = default;
            Option<string> textExcerpt = default;
            Option<List<string>> bodyPartContentTypes = default;
            Option<string> bodyMD5Hash = default;
            Option<string> subject = default;
            Option<Guid?> threadId = default;
            Option<string> from = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "read":
                            read = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "teamAccess":
                            teamAccess = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sender":
                            sender = new Option<Sender>(JsonSerializer.Deserialize<Sender>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recipients":
                            recipients = new Option<EmailRecipients>(JsonSerializer.Deserialize<EmailRecipients>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachments":
                            attachments = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "messageId":
                            messageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "domainId":
                            domainId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "favourite":
                            favourite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "inReplyTo":
                            inReplyTo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "plusAddress":
                            plusAddress = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sizeBytes":
                            sizeBytes = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "bodyExcerpt":
                            bodyExcerpt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "textExcerpt":
                            textExcerpt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bodyPartContentTypes":
                            bodyPartContentTypes = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bodyMD5Hash":
                            bodyMD5Hash = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threadId":
                            threadId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!inboxId.IsSet)
                throw new ArgumentException("Property is required for class EmailProjection.", nameof(inboxId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class EmailProjection.", nameof(createdAt));

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class EmailProjection.", nameof(to));

            if (!read.IsSet)
                throw new ArgumentException("Property is required for class EmailProjection.", nameof(read));

            if (!teamAccess.IsSet)
                throw new ArgumentException("Property is required for class EmailProjection.", nameof(teamAccess));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class EmailProjection.", nameof(id));

            if (!from.IsSet)
                throw new ArgumentException("Property is required for class EmailProjection.", nameof(from));

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class EmailProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class EmailProjection.");

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class EmailProjection.");

            if (read.IsSet && read.Value == null)
                throw new ArgumentNullException(nameof(read), "Property is not nullable for class EmailProjection.");

            if (teamAccess.IsSet && teamAccess.Value == null)
                throw new ArgumentNullException(nameof(teamAccess), "Property is not nullable for class EmailProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EmailProjection.");

            return new EmailProjection(inboxId.Value.Value, createdAt.Value.Value, to.Value, read.Value.Value, teamAccess.Value.Value, id.Value.Value, sender, recipients, attachments, cc, bcc, messageId, domainId, favourite, inReplyTo, plusAddress, sizeBytes, bodyExcerpt, textExcerpt, bodyPartContentTypes, bodyMD5Hash, subject, threadId, from.Value);
        }

        /// <summary>
        /// Serializes a <see cref="EmailProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailProjection emailProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailProjection emailProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailProjection.To == null)
                throw new ArgumentNullException(nameof(emailProjection.To), "Property is required for class EmailProjection.");

            writer.WriteString("inboxId", emailProjection.InboxId);

            writer.WriteString("createdAt", emailProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WritePropertyName("to");
            JsonSerializer.Serialize(writer, emailProjection.To, jsonSerializerOptions);
            writer.WriteBoolean("read", emailProjection.Read);

            writer.WriteBoolean("teamAccess", emailProjection.TeamAccess);

            writer.WriteString("id", emailProjection.Id);

            if (emailProjection.SenderOption.IsSet)
                if (emailProjection.SenderOption.Value != null)
                {
                    writer.WritePropertyName("sender");
                    JsonSerializer.Serialize(writer, emailProjection.Sender, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sender");
            if (emailProjection.RecipientsOption.IsSet)
                if (emailProjection.RecipientsOption.Value != null)
                {
                    writer.WritePropertyName("recipients");
                    JsonSerializer.Serialize(writer, emailProjection.Recipients, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("recipients");
            if (emailProjection.AttachmentsOption.IsSet)
                if (emailProjection.AttachmentsOption.Value != null)
                {
                    writer.WritePropertyName("attachments");
                    JsonSerializer.Serialize(writer, emailProjection.Attachments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachments");
            if (emailProjection.CcOption.IsSet)
                if (emailProjection.CcOption.Value != null)
                {
                    writer.WritePropertyName("cc");
                    JsonSerializer.Serialize(writer, emailProjection.Cc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("cc");
            if (emailProjection.BccOption.IsSet)
                if (emailProjection.BccOption.Value != null)
                {
                    writer.WritePropertyName("bcc");
                    JsonSerializer.Serialize(writer, emailProjection.Bcc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("bcc");
            if (emailProjection.MessageIdOption.IsSet)
                if (emailProjection.MessageIdOption.Value != null)
                    writer.WriteString("messageId", emailProjection.MessageId);
                else
                    writer.WriteNull("messageId");

            if (emailProjection.DomainIdOption.IsSet)
                if (emailProjection.DomainIdOption.Value != null)
                    writer.WriteString("domainId", emailProjection.DomainIdOption.Value.Value);
                else
                    writer.WriteNull("domainId");

            if (emailProjection.FavouriteOption.IsSet)
                if (emailProjection.FavouriteOption.Value != null)
                    writer.WriteBoolean("favourite", emailProjection.FavouriteOption.Value.Value);
                else
                    writer.WriteNull("favourite");

            if (emailProjection.InReplyToOption.IsSet)
                if (emailProjection.InReplyToOption.Value != null)
                    writer.WriteString("inReplyTo", emailProjection.InReplyTo);
                else
                    writer.WriteNull("inReplyTo");

            if (emailProjection.PlusAddressOption.IsSet)
                if (emailProjection.PlusAddressOption.Value != null)
                    writer.WriteString("plusAddress", emailProjection.PlusAddressOption.Value.Value);
                else
                    writer.WriteNull("plusAddress");

            if (emailProjection.SizeBytesOption.IsSet)
                if (emailProjection.SizeBytesOption.Value != null)
                    writer.WriteNumber("sizeBytes", emailProjection.SizeBytesOption.Value.Value);
                else
                    writer.WriteNull("sizeBytes");

            if (emailProjection.BodyExcerptOption.IsSet)
                if (emailProjection.BodyExcerptOption.Value != null)
                    writer.WriteString("bodyExcerpt", emailProjection.BodyExcerpt);
                else
                    writer.WriteNull("bodyExcerpt");

            if (emailProjection.TextExcerptOption.IsSet)
                if (emailProjection.TextExcerptOption.Value != null)
                    writer.WriteString("textExcerpt", emailProjection.TextExcerpt);
                else
                    writer.WriteNull("textExcerpt");

            if (emailProjection.BodyPartContentTypesOption.IsSet)
                if (emailProjection.BodyPartContentTypesOption.Value != null)
                {
                    writer.WritePropertyName("bodyPartContentTypes");
                    JsonSerializer.Serialize(writer, emailProjection.BodyPartContentTypes, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("bodyPartContentTypes");
            if (emailProjection.BodyMD5HashOption.IsSet)
                if (emailProjection.BodyMD5HashOption.Value != null)
                    writer.WriteString("bodyMD5Hash", emailProjection.BodyMD5Hash);
                else
                    writer.WriteNull("bodyMD5Hash");

            if (emailProjection.SubjectOption.IsSet)
                if (emailProjection.SubjectOption.Value != null)
                    writer.WriteString("subject", emailProjection.Subject);
                else
                    writer.WriteNull("subject");

            if (emailProjection.ThreadIdOption.IsSet)
                if (emailProjection.ThreadIdOption.Value != null)
                    writer.WriteString("threadId", emailProjection.ThreadIdOption.Value.Value);
                else
                    writer.WriteNull("threadId");

            if (emailProjection.From != null)
                writer.WriteString("from", emailProjection.From);
            else
                writer.WriteNull("from");
        }
    }
}
