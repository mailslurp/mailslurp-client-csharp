// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for forwarding an email
    /// </summary>
    public partial class ForwardEmailOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForwardEmailOptions" /> class.
        /// </summary>
        /// <param name="to">To recipients for forwarded email</param>
        /// <param name="subject">Subject for forwarded email</param>
        /// <param name="cc">Optional cc recipients</param>
        /// <param name="bcc">Optional bcc recipients</param>
        /// <param name="from">Optional from override</param>
        /// <param name="useInboxName">Optionally use inbox name as display name for sender email address</param>
        /// <param name="filterBouncedRecipients">Filter recipients to remove any bounced recipients from to, bcc, and cc before sending</param>
        [JsonConstructor]
        public ForwardEmailOptions(List<string> to, Option<string> subject = default, Option<List<string>> cc = default, Option<List<string>> bcc = default, Option<string> from = default, Option<bool?> useInboxName = default, Option<bool?> filterBouncedRecipients = default)
        {
            To = to;
            SubjectOption = subject;
            CcOption = cc;
            BccOption = bcc;
            FromOption = from;
            UseInboxNameOption = useInboxName;
            FilterBouncedRecipientsOption = filterBouncedRecipients;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// To recipients for forwarded email
        /// </summary>
        /// <value>To recipients for forwarded email</value>
        [JsonPropertyName("to")]
        public List<string> To { get; set; }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Subject for forwarded email
        /// </summary>
        /// <value>Subject for forwarded email</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CcOption { get; private set; }

        /// <summary>
        /// Optional cc recipients
        /// </summary>
        /// <value>Optional cc recipients</value>
        [JsonPropertyName("cc")]
        public List<string> Cc { get { return this.CcOption; } set { this.CcOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BccOption { get; private set; }

        /// <summary>
        /// Optional bcc recipients
        /// </summary>
        /// <value>Optional bcc recipients</value>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get { return this.BccOption; } set { this.BccOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// Optional from override
        /// </summary>
        /// <value>Optional from override</value>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UseInboxName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseInboxNameOption { get; private set; }

        /// <summary>
        /// Optionally use inbox name as display name for sender email address
        /// </summary>
        /// <value>Optionally use inbox name as display name for sender email address</value>
        [JsonPropertyName("useInboxName")]
        public bool? UseInboxName { get { return this.UseInboxNameOption; } set { this.UseInboxNameOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of FilterBouncedRecipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FilterBouncedRecipientsOption { get; private set; }

        /// <summary>
        /// Filter recipients to remove any bounced recipients from to, bcc, and cc before sending
        /// </summary>
        /// <value>Filter recipients to remove any bounced recipients from to, bcc, and cc before sending</value>
        [JsonPropertyName("filterBouncedRecipients")]
        public bool? FilterBouncedRecipients { get { return this.FilterBouncedRecipientsOption; } set { this.FilterBouncedRecipientsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ForwardEmailOptions {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  UseInboxName: ").Append(UseInboxName).Append("\n");
            sb.Append("  FilterBouncedRecipients: ").Append(FilterBouncedRecipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ForwardEmailOptions" />
    /// </summary>
    public class ForwardEmailOptionsJsonConverter : JsonConverter<ForwardEmailOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="ForwardEmailOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ForwardEmailOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>> to = default;
            Option<string> subject = default;
            Option<List<string>> cc = default;
            Option<List<string>> bcc = default;
            Option<string> from = default;
            Option<bool?> useInboxName = default;
            Option<bool?> filterBouncedRecipients = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "useInboxName":
                            useInboxName = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "filterBouncedRecipients":
                            filterBouncedRecipients = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class ForwardEmailOptions.", nameof(to));

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class ForwardEmailOptions.");

            return new ForwardEmailOptions(to.Value, subject, cc, bcc, from, useInboxName, filterBouncedRecipients);
        }

        /// <summary>
        /// Serializes a <see cref="ForwardEmailOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="forwardEmailOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ForwardEmailOptions forwardEmailOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, forwardEmailOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ForwardEmailOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="forwardEmailOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ForwardEmailOptions forwardEmailOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (forwardEmailOptions.To == null)
                throw new ArgumentNullException(nameof(forwardEmailOptions.To), "Property is required for class ForwardEmailOptions.");

            writer.WritePropertyName("to");
            JsonSerializer.Serialize(writer, forwardEmailOptions.To, jsonSerializerOptions);
            if (forwardEmailOptions.SubjectOption.IsSet)
                if (forwardEmailOptions.SubjectOption.Value != null)
                    writer.WriteString("subject", forwardEmailOptions.Subject);
                else
                    writer.WriteNull("subject");

            if (forwardEmailOptions.CcOption.IsSet)
                if (forwardEmailOptions.CcOption.Value != null)
                {
                    writer.WritePropertyName("cc");
                    JsonSerializer.Serialize(writer, forwardEmailOptions.Cc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("cc");
            if (forwardEmailOptions.BccOption.IsSet)
                if (forwardEmailOptions.BccOption.Value != null)
                {
                    writer.WritePropertyName("bcc");
                    JsonSerializer.Serialize(writer, forwardEmailOptions.Bcc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("bcc");
            if (forwardEmailOptions.FromOption.IsSet)
                if (forwardEmailOptions.FromOption.Value != null)
                    writer.WriteString("from", forwardEmailOptions.From);
                else
                    writer.WriteNull("from");

            if (forwardEmailOptions.UseInboxNameOption.IsSet)
                if (forwardEmailOptions.UseInboxNameOption.Value != null)
                    writer.WriteBoolean("useInboxName", forwardEmailOptions.UseInboxNameOption.Value.Value);
                else
                    writer.WriteNull("useInboxName");

            if (forwardEmailOptions.FilterBouncedRecipientsOption.IsSet)
                if (forwardEmailOptions.FilterBouncedRecipientsOption.Value != null)
                    writer.WriteBoolean("filterBouncedRecipients", forwardEmailOptions.FilterBouncedRecipientsOption.Value.Value);
                else
                    writer.WriteNull("filterBouncedRecipients");
        }
    }
}
