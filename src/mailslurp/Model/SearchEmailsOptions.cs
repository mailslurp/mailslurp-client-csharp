// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// SearchEmailsOptions
    /// </summary>
    public partial class SearchEmailsOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchEmailsOptions" /> class.
        /// </summary>
        /// <param name="inboxIds">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.</param>
        /// <param name="pageIndex">Optional page index in email list pagination</param>
        /// <param name="pageSize">Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results</param>
        /// <param name="sortDirection">Optional createdAt sort direction ASC or DESC</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly</param>
        /// <param name="searchFilter">Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body</param>
        /// <param name="since">Optional filter emails received after given date time</param>
        /// <param name="before">Optional filter emails received before given date time</param>
        [JsonConstructor]
        public SearchEmailsOptions(Option<List<Guid>> inboxIds = default, Option<int?> pageIndex = default, Option<int?> pageSize = default, Option<SortDirectionEnum?> sortDirection = default, Option<bool?> unreadOnly = default, Option<string> searchFilter = default, Option<DateTime?> since = default, Option<DateTime?> before = default)
        {
            InboxIdsOption = inboxIds;
            PageIndexOption = pageIndex;
            PageSizeOption = pageSize;
            SortDirectionOption = sortDirection;
            UnreadOnlyOption = unreadOnly;
            SearchFilterOption = searchFilter;
            SinceOption = since;
            BeforeOption = before;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Optional createdAt sort direction ASC or DESC
        /// </summary>
        /// <value>Optional createdAt sort direction ASC or DESC</value>
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="SortDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SortDirectionEnum SortDirectionEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return SortDirectionEnum.ASC;

            if (value.Equals("DESC"))
                return SortDirectionEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type SortDirectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SortDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SortDirectionEnum? SortDirectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return SortDirectionEnum.ASC;

            if (value.Equals("DESC"))
                return SortDirectionEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SortDirectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SortDirectionEnumToJsonValue(SortDirectionEnum? value)
        {
            if (value == SortDirectionEnum.ASC)
                return "ASC";

            if (value == SortDirectionEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SortDirection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SortDirectionEnum?> SortDirectionOption { get; private set; }

        /// <summary>
        /// Optional createdAt sort direction ASC or DESC
        /// </summary>
        /// <value>Optional createdAt sort direction ASC or DESC</value>
        [JsonPropertyName("sortDirection")]
        public SortDirectionEnum? SortDirection { get { return this.SortDirectionOption; } set { this.SortDirectionOption = new Option<SortDirectionEnum?>(value); } }

        /// <summary>
        /// Used to track the state of InboxIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>> InboxIdsOption { get; private set; }

        /// <summary>
        /// Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.
        /// </summary>
        /// <value>Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.</value>
        [JsonPropertyName("inboxIds")]
        public List<Guid> InboxIds { get { return this.InboxIdsOption; } set { this.InboxIdsOption = new Option<List<Guid>>(value); } }

        /// <summary>
        /// Used to track the state of PageIndex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageIndexOption { get; private set; }

        /// <summary>
        /// Optional page index in email list pagination
        /// </summary>
        /// <value>Optional page index in email list pagination</value>
        [JsonPropertyName("pageIndex")]
        public int? PageIndex { get { return this.PageIndexOption; } set { this.PageIndexOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of PageSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageSizeOption { get; private set; }

        /// <summary>
        /// Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results
        /// </summary>
        /// <value>Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results</value>
        [JsonPropertyName("pageSize")]
        public int? PageSize { get { return this.PageSizeOption; } set { this.PageSizeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of UnreadOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UnreadOnlyOption { get; private set; }

        /// <summary>
        /// Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly
        /// </summary>
        /// <value>Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly</value>
        [JsonPropertyName("unreadOnly")]
        public bool? UnreadOnly { get { return this.UnreadOnlyOption; } set { this.UnreadOnlyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SearchFilter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SearchFilterOption { get; private set; }

        /// <summary>
        /// Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body
        /// </summary>
        /// <value>Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body</value>
        [JsonPropertyName("searchFilter")]
        public string SearchFilter { get { return this.SearchFilterOption; } set { this.SearchFilterOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Since
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SinceOption { get; private set; }

        /// <summary>
        /// Optional filter emails received after given date time
        /// </summary>
        /// <value>Optional filter emails received after given date time</value>
        [JsonPropertyName("since")]
        public DateTime? Since { get { return this.SinceOption; } set { this.SinceOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Before
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BeforeOption { get; private set; }

        /// <summary>
        /// Optional filter emails received before given date time
        /// </summary>
        /// <value>Optional filter emails received before given date time</value>
        [JsonPropertyName("before")]
        public DateTime? Before { get { return this.BeforeOption; } set { this.BeforeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchEmailsOptions {\n");
            sb.Append("  InboxIds: ").Append(InboxIds).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  UnreadOnly: ").Append(UnreadOnly).Append("\n");
            sb.Append("  SearchFilter: ").Append(SearchFilter).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PageSize (int) maximum
            if (this.PageSizeOption.IsSet && this.PageSizeOption.Value > (int)100)
            {
                yield return new ValidationResult("Invalid value for PageSize, must be a value less than or equal to 100.", new [] { "PageSize" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchEmailsOptions" />
    /// </summary>
    public class SearchEmailsOptionsJsonConverter : JsonConverter<SearchEmailsOptions>
    {
        /// <summary>
        /// The format to use to serialize Since
        /// </summary>
        public static string SinceFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Before
        /// </summary>
        public static string BeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SearchEmailsOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchEmailsOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Guid>> inboxIds = default;
            Option<int?> pageIndex = default;
            Option<int?> pageSize = default;
            Option<SearchEmailsOptions.SortDirectionEnum?> sortDirection = default;
            Option<bool?> unreadOnly = default;
            Option<string> searchFilter = default;
            Option<DateTime?> since = default;
            Option<DateTime?> before = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "inboxIds":
                            inboxIds = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pageIndex":
                            pageIndex = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pageSize":
                            pageSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sortDirection":
                            string sortDirectionRawValue = utf8JsonReader.GetString();
                            if (sortDirectionRawValue != null)
                                sortDirection = new Option<SearchEmailsOptions.SortDirectionEnum?>(SearchEmailsOptions.SortDirectionEnumFromStringOrDefault(sortDirectionRawValue));
                            break;
                        case "unreadOnly":
                            unreadOnly = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "searchFilter":
                            searchFilter = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "since":
                            since = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "before":
                            before = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (inboxIds.IsSet && inboxIds.Value == null)
                throw new ArgumentNullException(nameof(inboxIds), "Property is not nullable for class SearchEmailsOptions.");

            if (pageIndex.IsSet && pageIndex.Value == null)
                throw new ArgumentNullException(nameof(pageIndex), "Property is not nullable for class SearchEmailsOptions.");

            if (pageSize.IsSet && pageSize.Value == null)
                throw new ArgumentNullException(nameof(pageSize), "Property is not nullable for class SearchEmailsOptions.");

            if (sortDirection.IsSet && sortDirection.Value == null)
                throw new ArgumentNullException(nameof(sortDirection), "Property is not nullable for class SearchEmailsOptions.");

            if (unreadOnly.IsSet && unreadOnly.Value == null)
                throw new ArgumentNullException(nameof(unreadOnly), "Property is not nullable for class SearchEmailsOptions.");

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter), "Property is not nullable for class SearchEmailsOptions.");

            if (since.IsSet && since.Value == null)
                throw new ArgumentNullException(nameof(since), "Property is not nullable for class SearchEmailsOptions.");

            if (before.IsSet && before.Value == null)
                throw new ArgumentNullException(nameof(before), "Property is not nullable for class SearchEmailsOptions.");

            return new SearchEmailsOptions(inboxIds, pageIndex, pageSize, sortDirection, unreadOnly, searchFilter, since, before);
        }

        /// <summary>
        /// Serializes a <see cref="SearchEmailsOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchEmailsOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchEmailsOptions searchEmailsOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, searchEmailsOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SearchEmailsOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchEmailsOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchEmailsOptions searchEmailsOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchEmailsOptions.InboxIdsOption.IsSet && searchEmailsOptions.InboxIds == null)
                throw new ArgumentNullException(nameof(searchEmailsOptions.InboxIds), "Property is required for class SearchEmailsOptions.");

            if (searchEmailsOptions.SearchFilterOption.IsSet && searchEmailsOptions.SearchFilter == null)
                throw new ArgumentNullException(nameof(searchEmailsOptions.SearchFilter), "Property is required for class SearchEmailsOptions.");

            if (searchEmailsOptions.InboxIdsOption.IsSet)
            {
                writer.WritePropertyName("inboxIds");
                JsonSerializer.Serialize(writer, searchEmailsOptions.InboxIds, jsonSerializerOptions);
            }
            if (searchEmailsOptions.PageIndexOption.IsSet)
                writer.WriteNumber("pageIndex", searchEmailsOptions.PageIndexOption.Value.Value);

            if (searchEmailsOptions.PageSizeOption.IsSet)
                writer.WriteNumber("pageSize", searchEmailsOptions.PageSizeOption.Value.Value);

            var sortDirectionRawValue = SearchEmailsOptions.SortDirectionEnumToJsonValue(searchEmailsOptions.SortDirectionOption.Value.Value);
            writer.WriteString("sortDirection", sortDirectionRawValue);
            if (searchEmailsOptions.UnreadOnlyOption.IsSet)
                writer.WriteBoolean("unreadOnly", searchEmailsOptions.UnreadOnlyOption.Value.Value);

            if (searchEmailsOptions.SearchFilterOption.IsSet)
                writer.WriteString("searchFilter", searchEmailsOptions.SearchFilter);

            if (searchEmailsOptions.SinceOption.IsSet)
                writer.WriteString("since", searchEmailsOptions.SinceOption.Value.Value.ToString(SinceFormat));

            if (searchEmailsOptions.BeforeOption.IsSet)
                writer.WriteString("before", searchEmailsOptions.BeforeOption.Value.Value.ToString(BeforeFormat));
        }
    }
}
