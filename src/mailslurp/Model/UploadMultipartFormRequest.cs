/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// UploadMultipartFormRequest
    /// </summary>
    [DataContract(Name = "uploadMultipartForm_request")]
    public partial class UploadMultipartFormRequest : IEquatable<UploadMultipartFormRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadMultipartFormRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadMultipartFormRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadMultipartFormRequest" /> class.
        /// </summary>
        /// <param name="contentTypeHeader">Optional content type header of attachment.</param>
        /// <param name="file">file (required).</param>
        public UploadMultipartFormRequest(string contentTypeHeader = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // to ensure "file" is required (not null)
            if (file == null)
            {
                throw new ArgumentNullException("file is a required property for UploadMultipartFormRequest and cannot be null");
            }
            this.File = file;
            this.ContentTypeHeader = contentTypeHeader;
        }

        /// <summary>
        /// Optional content type header of attachment
        /// </summary>
        /// <value>Optional content type header of attachment</value>
        [DataMember(Name = "contentTypeHeader", EmitDefaultValue = false)]
        public string ContentTypeHeader { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name = "file", IsRequired = true, EmitDefaultValue = true)]
        public System.IO.Stream File { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadMultipartFormRequest {\n");
            sb.Append("  ContentTypeHeader: ").Append(ContentTypeHeader).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadMultipartFormRequest);
        }

        /// <summary>
        /// Returns true if UploadMultipartFormRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadMultipartFormRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadMultipartFormRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContentTypeHeader == input.ContentTypeHeader ||
                    (this.ContentTypeHeader != null &&
                    this.ContentTypeHeader.Equals(input.ContentTypeHeader))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentTypeHeader != null)
                {
                    hashCode = (hashCode * 59) + this.ContentTypeHeader.GetHashCode();
                }
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
