// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// CreatePhoneNumberOptions
    /// </summary>
    public partial class CreatePhoneNumberOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePhoneNumberOptions" /> class.
        /// </summary>
        /// <param name="phoneCountry">phoneCountry</param>
        /// <param name="name">name</param>
        /// <param name="description">description</param>
        /// <param name="schedule">schedule</param>
        [JsonConstructor]
        public CreatePhoneNumberOptions(PhoneCountryEnum phoneCountry, Option<string> name = default, Option<string> description = default, Option<ScheduleEnum?> schedule = default)
        {
            PhoneCountry = phoneCountry;
            NameOption = name;
            DescriptionOption = description;
            ScheduleOption = schedule;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines PhoneCountry
        /// </summary>
        public enum PhoneCountryEnum
        {
            /// <summary>
            /// Enum US for value: US
            /// </summary>
            US = 1,

            /// <summary>
            /// Enum GB for value: GB
            /// </summary>
            GB = 2,

            /// <summary>
            /// Enum AU for value: AU
            /// </summary>
            AU = 3,

            /// <summary>
            /// Enum CA for value: CA
            /// </summary>
            CA = 4,

            /// <summary>
            /// Enum EE for value: EE
            /// </summary>
            EE = 5,

            /// <summary>
            /// Enum HK for value: HK
            /// </summary>
            HK = 6,

            /// <summary>
            /// Enum PL for value: PL
            /// </summary>
            PL = 7,

            /// <summary>
            /// Enum CH for value: CH
            /// </summary>
            CH = 8,

            /// <summary>
            /// Enum PT for value: PT
            /// </summary>
            PT = 9,

            /// <summary>
            /// Enum NL for value: NL
            /// </summary>
            NL = 10,

            /// <summary>
            /// Enum IL for value: IL
            /// </summary>
            IL = 11,

            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            SE = 12
        }

        /// <summary>
        /// Returns a <see cref="PhoneCountryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PhoneCountryEnum PhoneCountryEnumFromString(string value)
        {
            if (value.Equals("US"))
                return PhoneCountryEnum.US;

            if (value.Equals("GB"))
                return PhoneCountryEnum.GB;

            if (value.Equals("AU"))
                return PhoneCountryEnum.AU;

            if (value.Equals("CA"))
                return PhoneCountryEnum.CA;

            if (value.Equals("EE"))
                return PhoneCountryEnum.EE;

            if (value.Equals("HK"))
                return PhoneCountryEnum.HK;

            if (value.Equals("PL"))
                return PhoneCountryEnum.PL;

            if (value.Equals("CH"))
                return PhoneCountryEnum.CH;

            if (value.Equals("PT"))
                return PhoneCountryEnum.PT;

            if (value.Equals("NL"))
                return PhoneCountryEnum.NL;

            if (value.Equals("IL"))
                return PhoneCountryEnum.IL;

            if (value.Equals("SE"))
                return PhoneCountryEnum.SE;

            throw new NotImplementedException($"Could not convert value to type PhoneCountryEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PhoneCountryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PhoneCountryEnum? PhoneCountryEnumFromStringOrDefault(string value)
        {
            if (value.Equals("US"))
                return PhoneCountryEnum.US;

            if (value.Equals("GB"))
                return PhoneCountryEnum.GB;

            if (value.Equals("AU"))
                return PhoneCountryEnum.AU;

            if (value.Equals("CA"))
                return PhoneCountryEnum.CA;

            if (value.Equals("EE"))
                return PhoneCountryEnum.EE;

            if (value.Equals("HK"))
                return PhoneCountryEnum.HK;

            if (value.Equals("PL"))
                return PhoneCountryEnum.PL;

            if (value.Equals("CH"))
                return PhoneCountryEnum.CH;

            if (value.Equals("PT"))
                return PhoneCountryEnum.PT;

            if (value.Equals("NL"))
                return PhoneCountryEnum.NL;

            if (value.Equals("IL"))
                return PhoneCountryEnum.IL;

            if (value.Equals("SE"))
                return PhoneCountryEnum.SE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PhoneCountryEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PhoneCountryEnumToJsonValue(PhoneCountryEnum value)
        {
            if (value == PhoneCountryEnum.US)
                return "US";

            if (value == PhoneCountryEnum.GB)
                return "GB";

            if (value == PhoneCountryEnum.AU)
                return "AU";

            if (value == PhoneCountryEnum.CA)
                return "CA";

            if (value == PhoneCountryEnum.EE)
                return "EE";

            if (value == PhoneCountryEnum.HK)
                return "HK";

            if (value == PhoneCountryEnum.PL)
                return "PL";

            if (value == PhoneCountryEnum.CH)
                return "CH";

            if (value == PhoneCountryEnum.PT)
                return "PT";

            if (value == PhoneCountryEnum.NL)
                return "NL";

            if (value == PhoneCountryEnum.IL)
                return "IL";

            if (value == PhoneCountryEnum.SE)
                return "SE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets PhoneCountry
        /// </summary>
        [JsonPropertyName("phoneCountry")]
        public PhoneCountryEnum PhoneCountry { get; set; }

        /// <summary>
        /// Defines Schedule
        /// </summary>
        public enum ScheduleEnum
        {
            /// <summary>
            /// Enum MONTHLY for value: MONTHLY
            /// </summary>
            MONTHLY = 1,

            /// <summary>
            /// Enum YEARLY for value: YEARLY
            /// </summary>
            YEARLY = 2
        }

        /// <summary>
        /// Returns a <see cref="ScheduleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ScheduleEnum ScheduleEnumFromString(string value)
        {
            if (value.Equals("MONTHLY"))
                return ScheduleEnum.MONTHLY;

            if (value.Equals("YEARLY"))
                return ScheduleEnum.YEARLY;

            throw new NotImplementedException($"Could not convert value to type ScheduleEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ScheduleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ScheduleEnum? ScheduleEnumFromStringOrDefault(string value)
        {
            if (value.Equals("MONTHLY"))
                return ScheduleEnum.MONTHLY;

            if (value.Equals("YEARLY"))
                return ScheduleEnum.YEARLY;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ScheduleEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ScheduleEnumToJsonValue(ScheduleEnum? value)
        {
            if (value == ScheduleEnum.MONTHLY)
                return "MONTHLY";

            if (value == ScheduleEnum.YEARLY)
                return "YEARLY";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Schedule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ScheduleEnum?> ScheduleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [JsonPropertyName("schedule")]
        public ScheduleEnum? Schedule { get { return this.ScheduleOption; } set { this.ScheduleOption = new Option<ScheduleEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePhoneNumberOptions {\n");
            sb.Append("  PhoneCountry: ").Append(PhoneCountry).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreatePhoneNumberOptions" />
    /// </summary>
    public class CreatePhoneNumberOptionsJsonConverter : JsonConverter<CreatePhoneNumberOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreatePhoneNumberOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreatePhoneNumberOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreatePhoneNumberOptions.PhoneCountryEnum?> phoneCountry = default;
            Option<string> name = default;
            Option<string> description = default;
            Option<CreatePhoneNumberOptions.ScheduleEnum?> schedule = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "phoneCountry":
                            string phoneCountryRawValue = utf8JsonReader.GetString();
                            if (phoneCountryRawValue != null)
                                phoneCountry = new Option<CreatePhoneNumberOptions.PhoneCountryEnum?>(CreatePhoneNumberOptions.PhoneCountryEnumFromStringOrDefault(phoneCountryRawValue));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "schedule":
                            string scheduleRawValue = utf8JsonReader.GetString();
                            if (scheduleRawValue != null)
                                schedule = new Option<CreatePhoneNumberOptions.ScheduleEnum?>(CreatePhoneNumberOptions.ScheduleEnumFromStringOrDefault(scheduleRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!phoneCountry.IsSet)
                throw new ArgumentException("Property is required for class CreatePhoneNumberOptions.", nameof(phoneCountry));

            if (phoneCountry.IsSet && phoneCountry.Value == null)
                throw new ArgumentNullException(nameof(phoneCountry), "Property is not nullable for class CreatePhoneNumberOptions.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreatePhoneNumberOptions.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class CreatePhoneNumberOptions.");

            if (schedule.IsSet && schedule.Value == null)
                throw new ArgumentNullException(nameof(schedule), "Property is not nullable for class CreatePhoneNumberOptions.");

            return new CreatePhoneNumberOptions(phoneCountry.Value.Value, name, description, schedule);
        }

        /// <summary>
        /// Serializes a <see cref="CreatePhoneNumberOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreatePhoneNumberOptions createPhoneNumberOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createPhoneNumberOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreatePhoneNumberOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreatePhoneNumberOptions createPhoneNumberOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createPhoneNumberOptions.NameOption.IsSet && createPhoneNumberOptions.Name == null)
                throw new ArgumentNullException(nameof(createPhoneNumberOptions.Name), "Property is required for class CreatePhoneNumberOptions.");

            if (createPhoneNumberOptions.DescriptionOption.IsSet && createPhoneNumberOptions.Description == null)
                throw new ArgumentNullException(nameof(createPhoneNumberOptions.Description), "Property is required for class CreatePhoneNumberOptions.");

            var phoneCountryRawValue = CreatePhoneNumberOptions.PhoneCountryEnumToJsonValue(createPhoneNumberOptions.PhoneCountry);
            writer.WriteString("phoneCountry", phoneCountryRawValue);
            if (createPhoneNumberOptions.NameOption.IsSet)
                writer.WriteString("name", createPhoneNumberOptions.Name);

            if (createPhoneNumberOptions.DescriptionOption.IsSet)
                writer.WriteString("description", createPhoneNumberOptions.Description);

            var scheduleRawValue = CreatePhoneNumberOptions.ScheduleEnumToJsonValue(createPhoneNumberOptions.ScheduleOption.Value.Value);
            writer.WriteString("schedule", scheduleRawValue);
        }
    }
}
