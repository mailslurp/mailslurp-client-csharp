/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// A thread is a message thread created for a message received by an alias
    /// </summary>
    [DataContract(Name = "AliasThreadProjection")]
    public partial class AliasThreadProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AliasThreadProjection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AliasThreadProjection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AliasThreadProjection" /> class.
        /// </summary>
        /// <param name="subject">Thread subject.</param>
        /// <param name="inboxId">Inbox ID (required).</param>
        /// <param name="userId">User ID (required).</param>
        /// <param name="updatedAt">Updated at DateTime (required).</param>
        /// <param name="createdAt">Created at DateTime (required).</param>
        /// <param name="to">To recipients (required).</param>
        /// <param name="cc">CC recipients.</param>
        /// <param name="bcc">BCC recipients.</param>
        /// <param name="aliasId">Alias ID (required).</param>
        /// <param name="name">Name of thread.</param>
        /// <param name="id">ID of email thread (required).</param>
        public AliasThreadProjection(string subject = default, Guid inboxId = default, Guid userId = default, DateTime updatedAt = default, DateTime createdAt = default, List<string> to = default, List<string> cc = default, List<string> bcc = default, Guid aliasId = default, string name = default, Guid id = default)
        {
            this.InboxId = inboxId;
            this.UserId = userId;
            this.UpdatedAt = updatedAt;
            this.CreatedAt = createdAt;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for AliasThreadProjection and cannot be null");
            }
            this.To = to;
            this.AliasId = aliasId;
            this.Id = id;
            this.Subject = subject;
            this.Cc = cc;
            this.Bcc = bcc;
            this.Name = name;
        }

        /// <summary>
        /// Thread subject
        /// </summary>
        /// <value>Thread subject</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Inbox ID
        /// </summary>
        /// <value>Inbox ID</value>
        [DataMember(Name = "inboxId", IsRequired = true, EmitDefaultValue = true)]
        public Guid InboxId { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Updated at DateTime
        /// </summary>
        /// <value>Updated at DateTime</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Created at DateTime
        /// </summary>
        /// <value>Created at DateTime</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// To recipients
        /// </summary>
        /// <value>To recipients</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public List<string> To { get; set; }

        /// <summary>
        /// CC recipients
        /// </summary>
        /// <value>CC recipients</value>
        [DataMember(Name = "cc", EmitDefaultValue = false)]
        public List<string> Cc { get; set; }

        /// <summary>
        /// BCC recipients
        /// </summary>
        /// <value>BCC recipients</value>
        [DataMember(Name = "bcc", EmitDefaultValue = false)]
        public List<string> Bcc { get; set; }

        /// <summary>
        /// Alias ID
        /// </summary>
        /// <value>Alias ID</value>
        [DataMember(Name = "aliasId", IsRequired = true, EmitDefaultValue = true)]
        public Guid AliasId { get; set; }

        /// <summary>
        /// Name of thread
        /// </summary>
        /// <value>Name of thread</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// ID of email thread
        /// </summary>
        /// <value>ID of email thread</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AliasThreadProjection {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  AliasId: ").Append(AliasId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
