// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// A thread is a message thread created for a message received by an alias
    /// </summary>
    public partial class AliasThreadProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AliasThreadProjection" /> class.
        /// </summary>
        /// <param name="userId">User ID</param>
        /// <param name="inboxId">Inbox ID</param>
        /// <param name="updatedAt">Updated at DateTime</param>
        /// <param name="createdAt">Created at DateTime</param>
        /// <param name="to">To recipients</param>
        /// <param name="aliasId">Alias ID</param>
        /// <param name="id">ID of email thread</param>
        /// <param name="cc">CC recipients</param>
        /// <param name="bcc">BCC recipients</param>
        /// <param name="subject">Thread subject</param>
        /// <param name="name">Name of thread</param>
        [JsonConstructor]
        public AliasThreadProjection(Guid userId, Guid inboxId, DateTime updatedAt, DateTime createdAt, List<string> to, Guid aliasId, Guid id, Option<List<string>> cc = default, Option<List<string>> bcc = default, Option<string> subject = default, Option<string> name = default)
        {
            UserId = userId;
            InboxId = inboxId;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            To = to;
            AliasId = aliasId;
            Id = id;
            CcOption = cc;
            BccOption = bcc;
            SubjectOption = subject;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Inbox ID
        /// </summary>
        /// <value>Inbox ID</value>
        [JsonPropertyName("inboxId")]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Updated at DateTime
        /// </summary>
        /// <value>Updated at DateTime</value>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Created at DateTime
        /// </summary>
        /// <value>Created at DateTime</value>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// To recipients
        /// </summary>
        /// <value>To recipients</value>
        [JsonPropertyName("to")]
        public List<string> To { get; set; }

        /// <summary>
        /// Alias ID
        /// </summary>
        /// <value>Alias ID</value>
        [JsonPropertyName("aliasId")]
        public Guid AliasId { get; set; }

        /// <summary>
        /// ID of email thread
        /// </summary>
        /// <value>ID of email thread</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CcOption { get; private set; }

        /// <summary>
        /// CC recipients
        /// </summary>
        /// <value>CC recipients</value>
        [JsonPropertyName("cc")]
        public List<string> Cc { get { return this.CcOption; } set { this.CcOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BccOption { get; private set; }

        /// <summary>
        /// BCC recipients
        /// </summary>
        /// <value>BCC recipients</value>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get { return this.BccOption; } set { this.BccOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Thread subject
        /// </summary>
        /// <value>Thread subject</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Name of thread
        /// </summary>
        /// <value>Name of thread</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AliasThreadProjection {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  AliasId: ").Append(AliasId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AliasThreadProjection" />
    /// </summary>
    public class AliasThreadProjectionJsonConverter : JsonConverter<AliasThreadProjection>
    {
        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AliasThreadProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AliasThreadProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> userId = default;
            Option<Guid?> inboxId = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> createdAt = default;
            Option<List<string>> to = default;
            Option<Guid?> aliasId = default;
            Option<Guid?> id = default;
            Option<List<string>> cc = default;
            Option<List<string>> bcc = default;
            Option<string> subject = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "aliasId":
                            aliasId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class AliasThreadProjection.", nameof(userId));

            if (!inboxId.IsSet)
                throw new ArgumentException("Property is required for class AliasThreadProjection.", nameof(inboxId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class AliasThreadProjection.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class AliasThreadProjection.", nameof(createdAt));

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class AliasThreadProjection.", nameof(to));

            if (!aliasId.IsSet)
                throw new ArgumentException("Property is required for class AliasThreadProjection.", nameof(aliasId));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AliasThreadProjection.", nameof(id));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class AliasThreadProjection.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class AliasThreadProjection.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class AliasThreadProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class AliasThreadProjection.");

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class AliasThreadProjection.");

            if (aliasId.IsSet && aliasId.Value == null)
                throw new ArgumentNullException(nameof(aliasId), "Property is not nullable for class AliasThreadProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AliasThreadProjection.");

            if (cc.IsSet && cc.Value == null)
                throw new ArgumentNullException(nameof(cc), "Property is not nullable for class AliasThreadProjection.");

            if (bcc.IsSet && bcc.Value == null)
                throw new ArgumentNullException(nameof(bcc), "Property is not nullable for class AliasThreadProjection.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class AliasThreadProjection.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AliasThreadProjection.");

            return new AliasThreadProjection(userId.Value.Value, inboxId.Value.Value, updatedAt.Value.Value, createdAt.Value.Value, to.Value, aliasId.Value.Value, id.Value.Value, cc, bcc, subject, name);
        }

        /// <summary>
        /// Serializes a <see cref="AliasThreadProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aliasThreadProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AliasThreadProjection aliasThreadProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, aliasThreadProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AliasThreadProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aliasThreadProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AliasThreadProjection aliasThreadProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (aliasThreadProjection.To == null)
                throw new ArgumentNullException(nameof(aliasThreadProjection.To), "Property is required for class AliasThreadProjection.");

            if (aliasThreadProjection.CcOption.IsSet && aliasThreadProjection.Cc == null)
                throw new ArgumentNullException(nameof(aliasThreadProjection.Cc), "Property is required for class AliasThreadProjection.");

            if (aliasThreadProjection.BccOption.IsSet && aliasThreadProjection.Bcc == null)
                throw new ArgumentNullException(nameof(aliasThreadProjection.Bcc), "Property is required for class AliasThreadProjection.");

            if (aliasThreadProjection.SubjectOption.IsSet && aliasThreadProjection.Subject == null)
                throw new ArgumentNullException(nameof(aliasThreadProjection.Subject), "Property is required for class AliasThreadProjection.");

            if (aliasThreadProjection.NameOption.IsSet && aliasThreadProjection.Name == null)
                throw new ArgumentNullException(nameof(aliasThreadProjection.Name), "Property is required for class AliasThreadProjection.");

            writer.WriteString("userId", aliasThreadProjection.UserId);

            writer.WriteString("inboxId", aliasThreadProjection.InboxId);

            writer.WriteString("updatedAt", aliasThreadProjection.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("createdAt", aliasThreadProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WritePropertyName("to");
            JsonSerializer.Serialize(writer, aliasThreadProjection.To, jsonSerializerOptions);
            writer.WriteString("aliasId", aliasThreadProjection.AliasId);

            writer.WriteString("id", aliasThreadProjection.Id);

            if (aliasThreadProjection.CcOption.IsSet)
            {
                writer.WritePropertyName("cc");
                JsonSerializer.Serialize(writer, aliasThreadProjection.Cc, jsonSerializerOptions);
            }
            if (aliasThreadProjection.BccOption.IsSet)
            {
                writer.WritePropertyName("bcc");
                JsonSerializer.Serialize(writer, aliasThreadProjection.Bcc, jsonSerializerOptions);
            }
            if (aliasThreadProjection.SubjectOption.IsSet)
                writer.WriteString("subject", aliasThreadProjection.Subject);

            if (aliasThreadProjection.NameOption.IsSet)
                writer.WriteString("name", aliasThreadProjection.Name);
        }
    }
}
