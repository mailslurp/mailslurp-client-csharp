// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating an inbox forwarder
    /// </summary>
    public partial class CreateInboxForwarderOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInboxForwarderOptions" /> class.
        /// </summary>
        /// <param name="field">Field to match against to trigger inbox forwarding for inbound email</param>
        /// <param name="match">String or wildcard style match for field specified when evaluating forwarding rules</param>
        /// <param name="forwardToRecipients">Email addresses to forward an email to if it matches the field and match criteria of the forwarder</param>
        [JsonConstructor]
        public CreateInboxForwarderOptions(FieldEnum field, string match, List<string> forwardToRecipients)
        {
            Field = field;
            Match = match;
            ForwardToRecipients = forwardToRecipients;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Field to match against to trigger inbox forwarding for inbound email
        /// </summary>
        /// <value>Field to match against to trigger inbox forwarding for inbound email</value>
        public enum FieldEnum
        {
            /// <summary>
            /// Enum RECIPIENTS for value: RECIPIENTS
            /// </summary>
            RECIPIENTS = 1,

            /// <summary>
            /// Enum SENDER for value: SENDER
            /// </summary>
            SENDER = 2,

            /// <summary>
            /// Enum SUBJECT for value: SUBJECT
            /// </summary>
            SUBJECT = 3,

            /// <summary>
            /// Enum ATTACHMENTS for value: ATTACHMENTS
            /// </summary>
            ATTACHMENTS = 4
        }

        /// <summary>
        /// Returns a <see cref="FieldEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FieldEnum FieldEnumFromString(string value)
        {
            if (value.Equals("RECIPIENTS"))
                return FieldEnum.RECIPIENTS;

            if (value.Equals("SENDER"))
                return FieldEnum.SENDER;

            if (value.Equals("SUBJECT"))
                return FieldEnum.SUBJECT;

            if (value.Equals("ATTACHMENTS"))
                return FieldEnum.ATTACHMENTS;

            throw new NotImplementedException($"Could not convert value to type FieldEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FieldEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FieldEnum? FieldEnumFromStringOrDefault(string value)
        {
            if (value.Equals("RECIPIENTS"))
                return FieldEnum.RECIPIENTS;

            if (value.Equals("SENDER"))
                return FieldEnum.SENDER;

            if (value.Equals("SUBJECT"))
                return FieldEnum.SUBJECT;

            if (value.Equals("ATTACHMENTS"))
                return FieldEnum.ATTACHMENTS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FieldEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FieldEnumToJsonValue(FieldEnum value)
        {
            if (value == FieldEnum.RECIPIENTS)
                return "RECIPIENTS";

            if (value == FieldEnum.SENDER)
                return "SENDER";

            if (value == FieldEnum.SUBJECT)
                return "SUBJECT";

            if (value == FieldEnum.ATTACHMENTS)
                return "ATTACHMENTS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Field to match against to trigger inbox forwarding for inbound email
        /// </summary>
        /// <value>Field to match against to trigger inbox forwarding for inbound email</value>
        [JsonPropertyName("field")]
        public FieldEnum Field { get; set; }

        /// <summary>
        /// String or wildcard style match for field specified when evaluating forwarding rules
        /// </summary>
        /// <value>String or wildcard style match for field specified when evaluating forwarding rules</value>
        [JsonPropertyName("match")]
        public string Match { get; set; }

        /// <summary>
        /// Email addresses to forward an email to if it matches the field and match criteria of the forwarder
        /// </summary>
        /// <value>Email addresses to forward an email to if it matches the field and match criteria of the forwarder</value>
        [JsonPropertyName("forwardToRecipients")]
        public List<string> ForwardToRecipients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateInboxForwarderOptions {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  ForwardToRecipients: ").Append(ForwardToRecipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateInboxForwarderOptions" />
    /// </summary>
    public class CreateInboxForwarderOptionsJsonConverter : JsonConverter<CreateInboxForwarderOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateInboxForwarderOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateInboxForwarderOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateInboxForwarderOptions.FieldEnum?> field = default;
            Option<string> match = default;
            Option<List<string>> forwardToRecipients = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "field":
                            string fieldRawValue = utf8JsonReader.GetString();
                            if (fieldRawValue != null)
                                field = new Option<CreateInboxForwarderOptions.FieldEnum?>(CreateInboxForwarderOptions.FieldEnumFromStringOrDefault(fieldRawValue));
                            break;
                        case "match":
                            match = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "forwardToRecipients":
                            forwardToRecipients = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!field.IsSet)
                throw new ArgumentException("Property is required for class CreateInboxForwarderOptions.", nameof(field));

            if (!match.IsSet)
                throw new ArgumentException("Property is required for class CreateInboxForwarderOptions.", nameof(match));

            if (!forwardToRecipients.IsSet)
                throw new ArgumentException("Property is required for class CreateInboxForwarderOptions.", nameof(forwardToRecipients));

            if (field.IsSet && field.Value == null)
                throw new ArgumentNullException(nameof(field), "Property is not nullable for class CreateInboxForwarderOptions.");

            if (match.IsSet && match.Value == null)
                throw new ArgumentNullException(nameof(match), "Property is not nullable for class CreateInboxForwarderOptions.");

            if (forwardToRecipients.IsSet && forwardToRecipients.Value == null)
                throw new ArgumentNullException(nameof(forwardToRecipients), "Property is not nullable for class CreateInboxForwarderOptions.");

            return new CreateInboxForwarderOptions(field.Value.Value, match.Value, forwardToRecipients.Value);
        }

        /// <summary>
        /// Serializes a <see cref="CreateInboxForwarderOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateInboxForwarderOptions createInboxForwarderOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createInboxForwarderOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateInboxForwarderOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateInboxForwarderOptions createInboxForwarderOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createInboxForwarderOptions.Match == null)
                throw new ArgumentNullException(nameof(createInboxForwarderOptions.Match), "Property is required for class CreateInboxForwarderOptions.");

            if (createInboxForwarderOptions.ForwardToRecipients == null)
                throw new ArgumentNullException(nameof(createInboxForwarderOptions.ForwardToRecipients), "Property is required for class CreateInboxForwarderOptions.");

            var fieldRawValue = CreateInboxForwarderOptions.FieldEnumToJsonValue(createInboxForwarderOptions.Field);
            writer.WriteString("field", fieldRawValue);
            writer.WriteString("match", createInboxForwarderOptions.Match);

            writer.WritePropertyName("forwardToRecipients");
            JsonSerializer.Serialize(writer, createInboxForwarderOptions.ForwardToRecipients, jsonSerializerOptions);
        }
    }
}
