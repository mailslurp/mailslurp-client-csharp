/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating an inbox forwarder
    /// </summary>
    [DataContract(Name = "CreateInboxForwarderOptions")]
    public partial class CreateInboxForwarderOptions : IValidatableObject
    {
        /// <summary>
        /// Field to match against to trigger inbox forwarding for inbound email
        /// </summary>
        /// <value>Field to match against to trigger inbox forwarding for inbound email</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldEnum
        {
            /// <summary>
            /// Enum RECIPIENTS for value: RECIPIENTS
            /// </summary>
            [EnumMember(Value = "RECIPIENTS")]
            RECIPIENTS = 1,

            /// <summary>
            /// Enum SENDER for value: SENDER
            /// </summary>
            [EnumMember(Value = "SENDER")]
            SENDER = 2,

            /// <summary>
            /// Enum SUBJECT for value: SUBJECT
            /// </summary>
            [EnumMember(Value = "SUBJECT")]
            SUBJECT = 3,

            /// <summary>
            /// Enum ATTACHMENTS for value: ATTACHMENTS
            /// </summary>
            [EnumMember(Value = "ATTACHMENTS")]
            ATTACHMENTS = 4
        }


        /// <summary>
        /// Field to match against to trigger inbox forwarding for inbound email
        /// </summary>
        /// <value>Field to match against to trigger inbox forwarding for inbound email</value>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = true)]
        public FieldEnum Field { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInboxForwarderOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateInboxForwarderOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInboxForwarderOptions" /> class.
        /// </summary>
        /// <param name="field">Field to match against to trigger inbox forwarding for inbound email (required).</param>
        /// <param name="match">String or wildcard style match for field specified when evaluating forwarding rules (required).</param>
        /// <param name="forwardToRecipients">Email addresses to forward an email to if it matches the field and match criteria of the forwarder (required).</param>
        public CreateInboxForwarderOptions(FieldEnum field = default, string match = default, List<string> forwardToRecipients = default)
        {
            this.Field = field;
            // to ensure "match" is required (not null)
            if (match == null)
            {
                throw new ArgumentNullException("match is a required property for CreateInboxForwarderOptions and cannot be null");
            }
            this.Match = match;
            // to ensure "forwardToRecipients" is required (not null)
            if (forwardToRecipients == null)
            {
                throw new ArgumentNullException("forwardToRecipients is a required property for CreateInboxForwarderOptions and cannot be null");
            }
            this.ForwardToRecipients = forwardToRecipients;
        }

        /// <summary>
        /// String or wildcard style match for field specified when evaluating forwarding rules
        /// </summary>
        /// <value>String or wildcard style match for field specified when evaluating forwarding rules</value>
        [DataMember(Name = "match", IsRequired = true, EmitDefaultValue = true)]
        public string Match { get; set; }

        /// <summary>
        /// Email addresses to forward an email to if it matches the field and match criteria of the forwarder
        /// </summary>
        /// <value>Email addresses to forward an email to if it matches the field and match criteria of the forwarder</value>
        [DataMember(Name = "forwardToRecipients", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ForwardToRecipients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateInboxForwarderOptions {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  ForwardToRecipients: ").Append(ForwardToRecipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
