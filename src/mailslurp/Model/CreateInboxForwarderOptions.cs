/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// CreateInboxForwarderOptions
    /// </summary>
    [DataContract]
    public partial class CreateInboxForwarderOptions :  IEquatable<CreateInboxForwarderOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines Field
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldEnum
        {
            /// <summary>
            /// Enum RECIPIENTS for value: RECIPIENTS
            /// </summary>
            [EnumMember(Value = "RECIPIENTS")]
            RECIPIENTS = 1,

            /// <summary>
            /// Enum SENDER for value: SENDER
            /// </summary>
            [EnumMember(Value = "SENDER")]
            SENDER = 2,

            /// <summary>
            /// Enum SUBJECT for value: SUBJECT
            /// </summary>
            [EnumMember(Value = "SUBJECT")]
            SUBJECT = 3,

            /// <summary>
            /// Enum ATTACHMENTS for value: ATTACHMENTS
            /// </summary>
            [EnumMember(Value = "ATTACHMENTS")]
            ATTACHMENTS = 4

        }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public FieldEnum Field { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInboxForwarderOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateInboxForwarderOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInboxForwarderOptions" /> class.
        /// </summary>
        /// <param name="field">field (required).</param>
        /// <param name="match">match (required).</param>
        /// <param name="forwardToRecipients">forwardToRecipients (required).</param>
        public CreateInboxForwarderOptions(FieldEnum field = default(FieldEnum), string match = default(string), List<string> forwardToRecipients = default(List<string>))
        {
            this.Field = field;
            // to ensure "match" is required (not null)
            this.Match = match ?? throw new ArgumentNullException("match is a required property for CreateInboxForwarderOptions and cannot be null");
            // to ensure "forwardToRecipients" is required (not null)
            this.ForwardToRecipients = forwardToRecipients ?? throw new ArgumentNullException("forwardToRecipients is a required property for CreateInboxForwarderOptions and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets Match
        /// </summary>
        [DataMember(Name="match", EmitDefaultValue=false)]
        public string Match { get; set; }

        /// <summary>
        /// Gets or Sets ForwardToRecipients
        /// </summary>
        [DataMember(Name="forwardToRecipients", EmitDefaultValue=false)]
        public List<string> ForwardToRecipients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateInboxForwarderOptions {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  ForwardToRecipients: ").Append(ForwardToRecipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateInboxForwarderOptions);
        }

        /// <summary>
        /// Returns true if CreateInboxForwarderOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateInboxForwarderOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateInboxForwarderOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Field == input.Field ||
                    this.Field.Equals(input.Field)
                ) && 
                (
                    this.Match == input.Match ||
                    (this.Match != null &&
                    this.Match.Equals(input.Match))
                ) && 
                (
                    this.ForwardToRecipients == input.ForwardToRecipients ||
                    this.ForwardToRecipients != null &&
                    input.ForwardToRecipients != null &&
                    this.ForwardToRecipients.SequenceEqual(input.ForwardToRecipients)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.Match != null)
                    hashCode = hashCode * 59 + this.Match.GetHashCode();
                if (this.ForwardToRecipients != null)
                    hashCode = hashCode * 59 + this.ForwardToRecipients.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
