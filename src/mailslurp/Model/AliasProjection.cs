// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Representation of a alias
    /// </summary>
    public partial class AliasProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AliasProjection" /> class.
        /// </summary>
        /// <param name="userId">userId</param>
        /// <param name="emailAddress">emailAddress</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="useThreads">useThreads</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public AliasProjection(Guid userId, string emailAddress, Guid inboxId, DateTime updatedAt, DateTime createdAt, Guid id, Option<bool?> useThreads = default, Option<string> name = default)
        {
            UserId = userId;
            EmailAddress = emailAddress;
            InboxId = inboxId;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            Id = id;
            UseThreadsOption = useThreads;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of UseThreads
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseThreadsOption { get; private set; }

        /// <summary>
        /// Gets or Sets UseThreads
        /// </summary>
        [JsonPropertyName("useThreads")]
        public bool? UseThreads { get { return this.UseThreadsOption; } set { this.UseThreadsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AliasProjection {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UseThreads: ").Append(UseThreads).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AliasProjection" />
    /// </summary>
    public class AliasProjectionJsonConverter : JsonConverter<AliasProjection>
    {
        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AliasProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AliasProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> userId = default;
            Option<string> emailAddress = default;
            Option<Guid?> inboxId = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> createdAt = default;
            Option<Guid?> id = default;
            Option<bool?> useThreads = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "useThreads":
                            useThreads = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class AliasProjection.", nameof(userId));

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class AliasProjection.", nameof(emailAddress));

            if (!inboxId.IsSet)
                throw new ArgumentException("Property is required for class AliasProjection.", nameof(inboxId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class AliasProjection.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class AliasProjection.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AliasProjection.", nameof(id));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class AliasProjection.");

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class AliasProjection.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class AliasProjection.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class AliasProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class AliasProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AliasProjection.");

            if (useThreads.IsSet && useThreads.Value == null)
                throw new ArgumentNullException(nameof(useThreads), "Property is not nullable for class AliasProjection.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AliasProjection.");

            return new AliasProjection(userId.Value.Value, emailAddress.Value, inboxId.Value.Value, updatedAt.Value.Value, createdAt.Value.Value, id.Value.Value, useThreads, name);
        }

        /// <summary>
        /// Serializes a <see cref="AliasProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aliasProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AliasProjection aliasProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, aliasProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AliasProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aliasProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AliasProjection aliasProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (aliasProjection.EmailAddress == null)
                throw new ArgumentNullException(nameof(aliasProjection.EmailAddress), "Property is required for class AliasProjection.");

            if (aliasProjection.NameOption.IsSet && aliasProjection.Name == null)
                throw new ArgumentNullException(nameof(aliasProjection.Name), "Property is required for class AliasProjection.");

            writer.WriteString("userId", aliasProjection.UserId);

            writer.WriteString("emailAddress", aliasProjection.EmailAddress);

            writer.WriteString("inboxId", aliasProjection.InboxId);

            writer.WriteString("updatedAt", aliasProjection.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("createdAt", aliasProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", aliasProjection.Id);

            if (aliasProjection.UseThreadsOption.IsSet)
                writer.WriteBoolean("useThreads", aliasProjection.UseThreadsOption.Value.Value);

            if (aliasProjection.NameOption.IsSet)
                writer.WriteString("name", aliasProjection.Name);
        }
    }
}
