/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Name Server lookup result
    /// </summary>
    [DataContract(Name = "DescribeMailServerDomainResult")]
    public partial class DescribeMailServerDomainResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DescribeMailServerDomainResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DescribeMailServerDomainResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DescribeMailServerDomainResult" /> class.
        /// </summary>
        /// <param name="mxRecords">mxRecords (required).</param>
        /// <param name="domain">domain (required).</param>
        /// <param name="message">message.</param>
        public DescribeMailServerDomainResult(List<NameServerRecord> mxRecords = default, string domain = default, string message = default)
        {
            // to ensure "mxRecords" is required (not null)
            if (mxRecords == null)
            {
                throw new ArgumentNullException("mxRecords is a required property for DescribeMailServerDomainResult and cannot be null");
            }
            this.MxRecords = mxRecords;
            // to ensure "domain" is required (not null)
            if (domain == null)
            {
                throw new ArgumentNullException("domain is a required property for DescribeMailServerDomainResult and cannot be null");
            }
            this.Domain = domain;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets MxRecords
        /// </summary>
        [DataMember(Name = "mxRecords", IsRequired = true, EmitDefaultValue = true)]
        public List<NameServerRecord> MxRecords { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", IsRequired = true, EmitDefaultValue = true)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DescribeMailServerDomainResult {\n");
            sb.Append("  MxRecords: ").Append(MxRecords).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
