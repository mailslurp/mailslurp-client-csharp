// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Email alias representation
    /// </summary>
    public partial class AliasDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AliasDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="emailAddress">The alias&#39;s email address for receiving email</param>
        /// <param name="userId">userId</param>
        /// <param name="inboxId">Inbox that is associated with the alias</param>
        /// <param name="isVerified">Has the alias been verified. You must verify an alias if the masked email address has not yet been verified by your account</param>
        /// <param name="maskedEmailAddress">The underlying email address that is hidden and will received forwarded email</param>
        /// <param name="name">name</param>
        /// <param name="useThreads">If alias will generate response threads or not when email are received by it</param>
        /// <param name="domainId">Domain ID associated with the alias</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public AliasDto(Guid id, string emailAddress, Guid userId, Guid inboxId, bool isVerified, Option<string> maskedEmailAddress = default, Option<string> name = default, Option<bool?> useThreads = default, Option<Guid?> domainId = default, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default)
        {
            Id = id;
            EmailAddress = emailAddress;
            UserId = userId;
            InboxId = inboxId;
            IsVerified = isVerified;
            MaskedEmailAddressOption = maskedEmailAddress;
            NameOption = name;
            UseThreadsOption = useThreads;
            DomainIdOption = domainId;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// The alias&#39;s email address for receiving email
        /// </summary>
        /// <value>The alias&#39;s email address for receiving email</value>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Inbox that is associated with the alias
        /// </summary>
        /// <value>Inbox that is associated with the alias</value>
        [JsonPropertyName("inboxId")]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Has the alias been verified. You must verify an alias if the masked email address has not yet been verified by your account
        /// </summary>
        /// <value>Has the alias been verified. You must verify an alias if the masked email address has not yet been verified by your account</value>
        [JsonPropertyName("isVerified")]
        public bool IsVerified { get; set; }

        /// <summary>
        /// Used to track the state of MaskedEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MaskedEmailAddressOption { get; private set; }

        /// <summary>
        /// The underlying email address that is hidden and will received forwarded email
        /// </summary>
        /// <value>The underlying email address that is hidden and will received forwarded email</value>
        [JsonPropertyName("maskedEmailAddress")]
        public string MaskedEmailAddress { get { return this.MaskedEmailAddressOption; } set { this.MaskedEmailAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UseThreads
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseThreadsOption { get; private set; }

        /// <summary>
        /// If alias will generate response threads or not when email are received by it
        /// </summary>
        /// <value>If alias will generate response threads or not when email are received by it</value>
        [JsonPropertyName("useThreads")]
        public bool? UseThreads { get { return this.UseThreadsOption; } set { this.UseThreadsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of DomainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DomainIdOption { get; private set; }

        /// <summary>
        /// Domain ID associated with the alias
        /// </summary>
        /// <value>Domain ID associated with the alias</value>
        [JsonPropertyName("domainId")]
        public Guid? DomainId { get { return this.DomainIdOption; } set { this.DomainIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AliasDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  MaskedEmailAddress: ").Append(MaskedEmailAddress).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UseThreads: ").Append(UseThreads).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AliasDto" />
    /// </summary>
    public class AliasDtoJsonConverter : JsonConverter<AliasDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AliasDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AliasDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> emailAddress = default;
            Option<Guid?> userId = default;
            Option<Guid?> inboxId = default;
            Option<bool?> isVerified = default;
            Option<string> maskedEmailAddress = default;
            Option<string> name = default;
            Option<bool?> useThreads = default;
            Option<Guid?> domainId = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "isVerified":
                            isVerified = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "maskedEmailAddress":
                            maskedEmailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "useThreads":
                            useThreads = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "domainId":
                            domainId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AliasDto.", nameof(id));

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class AliasDto.", nameof(emailAddress));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class AliasDto.", nameof(userId));

            if (!inboxId.IsSet)
                throw new ArgumentException("Property is required for class AliasDto.", nameof(inboxId));

            if (!isVerified.IsSet)
                throw new ArgumentException("Property is required for class AliasDto.", nameof(isVerified));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AliasDto.");

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class AliasDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class AliasDto.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class AliasDto.");

            if (isVerified.IsSet && isVerified.Value == null)
                throw new ArgumentNullException(nameof(isVerified), "Property is not nullable for class AliasDto.");

            return new AliasDto(id.Value.Value, emailAddress.Value, userId.Value.Value, inboxId.Value.Value, isVerified.Value.Value, maskedEmailAddress, name, useThreads, domainId, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="AliasDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aliasDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AliasDto aliasDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, aliasDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AliasDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aliasDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AliasDto aliasDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (aliasDto.EmailAddress == null)
                throw new ArgumentNullException(nameof(aliasDto.EmailAddress), "Property is required for class AliasDto.");

            writer.WriteString("id", aliasDto.Id);

            writer.WriteString("emailAddress", aliasDto.EmailAddress);

            writer.WriteString("userId", aliasDto.UserId);

            writer.WriteString("inboxId", aliasDto.InboxId);

            writer.WriteBoolean("isVerified", aliasDto.IsVerified);

            if (aliasDto.MaskedEmailAddressOption.IsSet)
                if (aliasDto.MaskedEmailAddressOption.Value != null)
                    writer.WriteString("maskedEmailAddress", aliasDto.MaskedEmailAddress);
                else
                    writer.WriteNull("maskedEmailAddress");

            if (aliasDto.NameOption.IsSet)
                if (aliasDto.NameOption.Value != null)
                    writer.WriteString("name", aliasDto.Name);
                else
                    writer.WriteNull("name");

            if (aliasDto.UseThreadsOption.IsSet)
                if (aliasDto.UseThreadsOption.Value != null)
                    writer.WriteBoolean("useThreads", aliasDto.UseThreadsOption.Value.Value);
                else
                    writer.WriteNull("useThreads");

            if (aliasDto.DomainIdOption.IsSet)
                if (aliasDto.DomainIdOption.Value != null)
                    writer.WriteString("domainId", aliasDto.DomainIdOption.Value.Value);
                else
                    writer.WriteNull("domainId");

            if (aliasDto.CreatedAtOption.IsSet)
                if (aliasDto.CreatedAtOption.Value != null)
                    writer.WriteString("createdAt", aliasDto.CreatedAtOption.Value.Value.ToString(CreatedAtFormat));
                else
                    writer.WriteNull("createdAt");

            if (aliasDto.UpdatedAtOption.IsSet)
                if (aliasDto.UpdatedAtOption.Value != null)
                    writer.WriteString("updatedAt", aliasDto.UpdatedAtOption.Value.Value.ToString(UpdatedAtFormat));
                else
                    writer.WriteNull("updatedAt");
        }
    }
}
