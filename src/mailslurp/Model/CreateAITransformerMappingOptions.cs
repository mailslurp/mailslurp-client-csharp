/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// CreateAITransformerMappingOptions
    /// </summary>
    [DataContract(Name = "CreateAITransformerMappingOptions")]
    public partial class CreateAITransformerMappingOptions : IValidatableObject
    {
        /// <summary>
        /// Defines EntityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntityTypeEnum
        {
            /// <summary>
            /// Enum INBOX for value: INBOX
            /// </summary>
            [EnumMember(Value = "INBOX")]
            INBOX = 1,

            /// <summary>
            /// Enum PHONE for value: PHONE
            /// </summary>
            [EnumMember(Value = "PHONE")]
            PHONE = 2
        }


        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        public EntityTypeEnum EntityType { get; set; }
        /// <summary>
        /// Defines ContentSelector
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentSelectorEnum
        {
            /// <summary>
            /// Enum RAW for value: RAW
            /// </summary>
            [EnumMember(Value = "RAW")]
            RAW = 1,

            /// <summary>
            /// Enum BODY for value: BODY
            /// </summary>
            [EnumMember(Value = "BODY")]
            BODY = 2,

            /// <summary>
            /// Enum BODYATTACHMENTS for value: BODY_ATTACHMENTS
            /// </summary>
            [EnumMember(Value = "BODY_ATTACHMENTS")]
            BODYATTACHMENTS = 3
        }


        /// <summary>
        /// Gets or Sets ContentSelector
        /// </summary>
        [DataMember(Name = "contentSelector", EmitDefaultValue = false)]
        public ContentSelectorEnum? ContentSelector { get; set; }
        /// <summary>
        /// Defines TriggerSelector
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TriggerSelectorEnum
        {
            /// <summary>
            /// Enum PERMESSAGE for value: PER_MESSAGE
            /// </summary>
            [EnumMember(Value = "PER_MESSAGE")]
            PERMESSAGE = 1,

            /// <summary>
            /// Enum PERATTACHMENT for value: PER_ATTACHMENT
            /// </summary>
            [EnumMember(Value = "PER_ATTACHMENT")]
            PERATTACHMENT = 2
        }


        /// <summary>
        /// Gets or Sets TriggerSelector
        /// </summary>
        [DataMember(Name = "triggerSelector", EmitDefaultValue = false)]
        public TriggerSelectorEnum? TriggerSelector { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAITransformerMappingOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAITransformerMappingOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAITransformerMappingOptions" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="aiTransformId">aiTransformId (required).</param>
        /// <param name="entityId">entityId (required).</param>
        /// <param name="entityType">entityType (required).</param>
        /// <param name="contentSelector">contentSelector.</param>
        /// <param name="triggerSelector">triggerSelector.</param>
        /// <param name="spreadRootArray">spreadRootArray.</param>
        public CreateAITransformerMappingOptions(string name = default, Guid aiTransformId = default, Guid entityId = default, EntityTypeEnum entityType = default, ContentSelectorEnum? contentSelector = default, TriggerSelectorEnum? triggerSelector = default, bool spreadRootArray = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateAITransformerMappingOptions and cannot be null");
            }
            this.Name = name;
            this.AiTransformId = aiTransformId;
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.ContentSelector = contentSelector;
            this.TriggerSelector = triggerSelector;
            this.SpreadRootArray = spreadRootArray;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AiTransformId
        /// </summary>
        [DataMember(Name = "aiTransformId", IsRequired = true, EmitDefaultValue = true)]
        public Guid AiTransformId { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name = "entityId", IsRequired = true, EmitDefaultValue = true)]
        public Guid EntityId { get; set; }

        /// <summary>
        /// Gets or Sets SpreadRootArray
        /// </summary>
        [DataMember(Name = "spreadRootArray", EmitDefaultValue = true)]
        public bool SpreadRootArray { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAITransformerMappingOptions {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AiTransformId: ").Append(AiTransformId).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  ContentSelector: ").Append(ContentSelector).Append("\n");
            sb.Append("  TriggerSelector: ").Append(TriggerSelector).Append("\n");
            sb.Append("  SpreadRootArray: ").Append(SpreadRootArray).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
