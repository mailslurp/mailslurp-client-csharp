// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// CheckEmailBodyResults
    /// </summary>
    public partial class CheckEmailBodyResults : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckEmailBodyResults" /> class.
        /// </summary>
        /// <param name="hasIssues">hasIssues</param>
        /// <param name="linkIssues">linkIssues</param>
        /// <param name="imageIssues">imageIssues</param>
        /// <param name="spellingIssues">spellingIssues</param>
        [JsonConstructor]
        public CheckEmailBodyResults(bool hasIssues, List<LinkIssue> linkIssues, List<ImageIssue> imageIssues, List<SpellingIssue> spellingIssues)
        {
            HasIssues = hasIssues;
            LinkIssues = linkIssues;
            ImageIssues = imageIssues;
            SpellingIssues = spellingIssues;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets HasIssues
        /// </summary>
        [JsonPropertyName("hasIssues")]
        public bool HasIssues { get; set; }

        /// <summary>
        /// Gets or Sets LinkIssues
        /// </summary>
        [JsonPropertyName("linkIssues")]
        public List<LinkIssue> LinkIssues { get; set; }

        /// <summary>
        /// Gets or Sets ImageIssues
        /// </summary>
        [JsonPropertyName("imageIssues")]
        public List<ImageIssue> ImageIssues { get; set; }

        /// <summary>
        /// Gets or Sets SpellingIssues
        /// </summary>
        [JsonPropertyName("spellingIssues")]
        public List<SpellingIssue> SpellingIssues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckEmailBodyResults {\n");
            sb.Append("  HasIssues: ").Append(HasIssues).Append("\n");
            sb.Append("  LinkIssues: ").Append(LinkIssues).Append("\n");
            sb.Append("  ImageIssues: ").Append(ImageIssues).Append("\n");
            sb.Append("  SpellingIssues: ").Append(SpellingIssues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheckEmailBodyResults" />
    /// </summary>
    public class CheckEmailBodyResultsJsonConverter : JsonConverter<CheckEmailBodyResults>
    {
        /// <summary>
        /// Deserializes json to <see cref="CheckEmailBodyResults" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CheckEmailBodyResults Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> hasIssues = default;
            Option<List<LinkIssue>> linkIssues = default;
            Option<List<ImageIssue>> imageIssues = default;
            Option<List<SpellingIssue>> spellingIssues = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hasIssues":
                            hasIssues = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "linkIssues":
                            linkIssues = new Option<List<LinkIssue>>(JsonSerializer.Deserialize<List<LinkIssue>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "imageIssues":
                            imageIssues = new Option<List<ImageIssue>>(JsonSerializer.Deserialize<List<ImageIssue>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "spellingIssues":
                            spellingIssues = new Option<List<SpellingIssue>>(JsonSerializer.Deserialize<List<SpellingIssue>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!hasIssues.IsSet)
                throw new ArgumentException("Property is required for class CheckEmailBodyResults.", nameof(hasIssues));

            if (!linkIssues.IsSet)
                throw new ArgumentException("Property is required for class CheckEmailBodyResults.", nameof(linkIssues));

            if (!imageIssues.IsSet)
                throw new ArgumentException("Property is required for class CheckEmailBodyResults.", nameof(imageIssues));

            if (!spellingIssues.IsSet)
                throw new ArgumentException("Property is required for class CheckEmailBodyResults.", nameof(spellingIssues));

            if (hasIssues.IsSet && hasIssues.Value == null)
                throw new ArgumentNullException(nameof(hasIssues), "Property is not nullable for class CheckEmailBodyResults.");

            if (linkIssues.IsSet && linkIssues.Value == null)
                throw new ArgumentNullException(nameof(linkIssues), "Property is not nullable for class CheckEmailBodyResults.");

            if (imageIssues.IsSet && imageIssues.Value == null)
                throw new ArgumentNullException(nameof(imageIssues), "Property is not nullable for class CheckEmailBodyResults.");

            if (spellingIssues.IsSet && spellingIssues.Value == null)
                throw new ArgumentNullException(nameof(spellingIssues), "Property is not nullable for class CheckEmailBodyResults.");

            return new CheckEmailBodyResults(hasIssues.Value.Value, linkIssues.Value, imageIssues.Value, spellingIssues.Value);
        }

        /// <summary>
        /// Serializes a <see cref="CheckEmailBodyResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkEmailBodyResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CheckEmailBodyResults checkEmailBodyResults, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, checkEmailBodyResults, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CheckEmailBodyResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="checkEmailBodyResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CheckEmailBodyResults checkEmailBodyResults, JsonSerializerOptions jsonSerializerOptions)
        {
            if (checkEmailBodyResults.LinkIssues == null)
                throw new ArgumentNullException(nameof(checkEmailBodyResults.LinkIssues), "Property is required for class CheckEmailBodyResults.");

            if (checkEmailBodyResults.ImageIssues == null)
                throw new ArgumentNullException(nameof(checkEmailBodyResults.ImageIssues), "Property is required for class CheckEmailBodyResults.");

            if (checkEmailBodyResults.SpellingIssues == null)
                throw new ArgumentNullException(nameof(checkEmailBodyResults.SpellingIssues), "Property is required for class CheckEmailBodyResults.");

            writer.WriteBoolean("hasIssues", checkEmailBodyResults.HasIssues);

            writer.WritePropertyName("linkIssues");
            JsonSerializer.Serialize(writer, checkEmailBodyResults.LinkIssues, jsonSerializerOptions);
            writer.WritePropertyName("imageIssues");
            JsonSerializer.Serialize(writer, checkEmailBodyResults.ImageIssues, jsonSerializerOptions);
            writer.WritePropertyName("spellingIssues");
            JsonSerializer.Serialize(writer, checkEmailBodyResults.SpellingIssues, jsonSerializerOptions);
        }
    }
}
