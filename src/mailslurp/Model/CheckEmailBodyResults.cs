/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// CheckEmailBodyResults
    /// </summary>
    [DataContract(Name = "CheckEmailBodyResults")]
    public partial class CheckEmailBodyResults : IEquatable<CheckEmailBodyResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckEmailBodyResults" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckEmailBodyResults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckEmailBodyResults" /> class.
        /// </summary>
        /// <param name="hasIssues">hasIssues (required).</param>
        /// <param name="linkIssues">linkIssues (required).</param>
        /// <param name="imageIssues">imageIssues (required).</param>
        /// <param name="spellingIssues">spellingIssues (required).</param>
        public CheckEmailBodyResults(bool hasIssues = default(bool), List<LinkIssue> linkIssues = default(List<LinkIssue>), List<ImageIssue> imageIssues = default(List<ImageIssue>), List<SpellingIssue> spellingIssues = default(List<SpellingIssue>))
        {
            this.HasIssues = hasIssues;
            // to ensure "linkIssues" is required (not null)
            if (linkIssues == null)
            {
                throw new ArgumentNullException("linkIssues is a required property for CheckEmailBodyResults and cannot be null");
            }
            this.LinkIssues = linkIssues;
            // to ensure "imageIssues" is required (not null)
            if (imageIssues == null)
            {
                throw new ArgumentNullException("imageIssues is a required property for CheckEmailBodyResults and cannot be null");
            }
            this.ImageIssues = imageIssues;
            // to ensure "spellingIssues" is required (not null)
            if (spellingIssues == null)
            {
                throw new ArgumentNullException("spellingIssues is a required property for CheckEmailBodyResults and cannot be null");
            }
            this.SpellingIssues = spellingIssues;
        }

        /// <summary>
        /// Gets or Sets HasIssues
        /// </summary>
        [DataMember(Name = "hasIssues", IsRequired = true, EmitDefaultValue = true)]
        public bool HasIssues { get; set; }

        /// <summary>
        /// Gets or Sets LinkIssues
        /// </summary>
        [DataMember(Name = "linkIssues", IsRequired = true, EmitDefaultValue = true)]
        public List<LinkIssue> LinkIssues { get; set; }

        /// <summary>
        /// Gets or Sets ImageIssues
        /// </summary>
        [DataMember(Name = "imageIssues", IsRequired = true, EmitDefaultValue = true)]
        public List<ImageIssue> ImageIssues { get; set; }

        /// <summary>
        /// Gets or Sets SpellingIssues
        /// </summary>
        [DataMember(Name = "spellingIssues", IsRequired = true, EmitDefaultValue = true)]
        public List<SpellingIssue> SpellingIssues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckEmailBodyResults {\n");
            sb.Append("  HasIssues: ").Append(HasIssues).Append("\n");
            sb.Append("  LinkIssues: ").Append(LinkIssues).Append("\n");
            sb.Append("  ImageIssues: ").Append(ImageIssues).Append("\n");
            sb.Append("  SpellingIssues: ").Append(SpellingIssues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckEmailBodyResults);
        }

        /// <summary>
        /// Returns true if CheckEmailBodyResults instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckEmailBodyResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckEmailBodyResults input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HasIssues == input.HasIssues ||
                    this.HasIssues.Equals(input.HasIssues)
                ) && 
                (
                    this.LinkIssues == input.LinkIssues ||
                    this.LinkIssues != null &&
                    input.LinkIssues != null &&
                    this.LinkIssues.SequenceEqual(input.LinkIssues)
                ) && 
                (
                    this.ImageIssues == input.ImageIssues ||
                    this.ImageIssues != null &&
                    input.ImageIssues != null &&
                    this.ImageIssues.SequenceEqual(input.ImageIssues)
                ) && 
                (
                    this.SpellingIssues == input.SpellingIssues ||
                    this.SpellingIssues != null &&
                    input.SpellingIssues != null &&
                    this.SpellingIssues.SequenceEqual(input.SpellingIssues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.HasIssues.GetHashCode();
                if (this.LinkIssues != null)
                {
                    hashCode = (hashCode * 59) + this.LinkIssues.GetHashCode();
                }
                if (this.ImageIssues != null)
                {
                    hashCode = (hashCode * 59) + this.ImageIssues.GetHashCode();
                }
                if (this.SpellingIssues != null)
                {
                    hashCode = (hashCode * 59) + this.SpellingIssues.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
