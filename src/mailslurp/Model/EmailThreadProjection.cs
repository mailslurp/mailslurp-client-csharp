// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// An email thread is a message thread created for a email based on Message-ID, In-Reply-To, and References headers
    /// </summary>
    public partial class EmailThreadProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailThreadProjection" /> class.
        /// </summary>
        /// <param name="userId">User ID</param>
        /// <param name="updatedAt">Updated at DateTime</param>
        /// <param name="createdAt">Created at DateTime</param>
        /// <param name="to">To recipients</param>
        /// <param name="hasAttachments">Has attachments</param>
        /// <param name="unread">Has unread</param>
        /// <param name="messageCount">Number of messages in the thread</param>
        /// <param name="id">ID of email thread</param>
        /// <param name="sender">sender</param>
        /// <param name="recipients">recipients</param>
        /// <param name="inboxId">Inbox ID</param>
        /// <param name="cc">CC recipients</param>
        /// <param name="bcc">BCC recipients</param>
        /// <param name="lastBodyExcerpt">Last body excerpt</param>
        /// <param name="lastTextExcerpt">Last text excerpt</param>
        /// <param name="lastCreatedAt">Last email created time</param>
        /// <param name="lastFrom">Last sender</param>
        /// <param name="lastSender">lastSender</param>
        /// <param name="subject">Thread topic subject</param>
        /// <param name="from">From sender</param>
        [JsonConstructor]
        public EmailThreadProjection(Guid userId, DateTime updatedAt, DateTime createdAt, List<string> to, bool hasAttachments, bool unread, int messageCount, Guid id, Option<SenderProjection> sender = default, Option<EmailRecipientsProjection> recipients = default, Option<Guid?> inboxId = default, Option<List<string>> cc = default, Option<List<string>> bcc = default, Option<string> lastBodyExcerpt = default, Option<string> lastTextExcerpt = default, Option<DateTime?> lastCreatedAt = default, Option<string> lastFrom = default, Option<SenderProjection> lastSender = default, Option<string> subject = default, Option<string> from = default)
        {
            UserId = userId;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            To = to;
            HasAttachments = hasAttachments;
            Unread = unread;
            MessageCount = messageCount;
            Id = id;
            SenderOption = sender;
            RecipientsOption = recipients;
            InboxIdOption = inboxId;
            CcOption = cc;
            BccOption = bcc;
            LastBodyExcerptOption = lastBodyExcerpt;
            LastTextExcerptOption = lastTextExcerpt;
            LastCreatedAtOption = lastCreatedAt;
            LastFromOption = lastFrom;
            LastSenderOption = lastSender;
            SubjectOption = subject;
            FromOption = from;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Updated at DateTime
        /// </summary>
        /// <value>Updated at DateTime</value>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Created at DateTime
        /// </summary>
        /// <value>Created at DateTime</value>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// To recipients
        /// </summary>
        /// <value>To recipients</value>
        [JsonPropertyName("to")]
        public List<string> To { get; set; }

        /// <summary>
        /// Has attachments
        /// </summary>
        /// <value>Has attachments</value>
        [JsonPropertyName("hasAttachments")]
        public bool HasAttachments { get; set; }

        /// <summary>
        /// Has unread
        /// </summary>
        /// <value>Has unread</value>
        [JsonPropertyName("unread")]
        public bool Unread { get; set; }

        /// <summary>
        /// Number of messages in the thread
        /// </summary>
        /// <value>Number of messages in the thread</value>
        [JsonPropertyName("messageCount")]
        public int MessageCount { get; set; }

        /// <summary>
        /// ID of email thread
        /// </summary>
        /// <value>ID of email thread</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of Sender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SenderProjection> SenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public SenderProjection Sender { get { return this.SenderOption; } set { this.SenderOption = new Option<SenderProjection>(value); } }

        /// <summary>
        /// Used to track the state of Recipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailRecipientsProjection> RecipientsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [JsonPropertyName("recipients")]
        public EmailRecipientsProjection Recipients { get { return this.RecipientsOption; } set { this.RecipientsOption = new Option<EmailRecipientsProjection>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Inbox ID
        /// </summary>
        /// <value>Inbox ID</value>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CcOption { get; private set; }

        /// <summary>
        /// CC recipients
        /// </summary>
        /// <value>CC recipients</value>
        [JsonPropertyName("cc")]
        public List<string> Cc { get { return this.CcOption; } set { this.CcOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BccOption { get; private set; }

        /// <summary>
        /// BCC recipients
        /// </summary>
        /// <value>BCC recipients</value>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get { return this.BccOption; } set { this.BccOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of LastBodyExcerpt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastBodyExcerptOption { get; private set; }

        /// <summary>
        /// Last body excerpt
        /// </summary>
        /// <value>Last body excerpt</value>
        [JsonPropertyName("lastBodyExcerpt")]
        public string LastBodyExcerpt { get { return this.LastBodyExcerptOption; } set { this.LastBodyExcerptOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastTextExcerpt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastTextExcerptOption { get; private set; }

        /// <summary>
        /// Last text excerpt
        /// </summary>
        /// <value>Last text excerpt</value>
        [JsonPropertyName("lastTextExcerpt")]
        public string LastTextExcerpt { get { return this.LastTextExcerptOption; } set { this.LastTextExcerptOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastCreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastCreatedAtOption { get; private set; }

        /// <summary>
        /// Last email created time
        /// </summary>
        /// <value>Last email created time</value>
        [JsonPropertyName("lastCreatedAt")]
        public DateTime? LastCreatedAt { get { return this.LastCreatedAtOption; } set { this.LastCreatedAtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of LastFrom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastFromOption { get; private set; }

        /// <summary>
        /// Last sender
        /// </summary>
        /// <value>Last sender</value>
        [JsonPropertyName("lastFrom")]
        public string LastFrom { get { return this.LastFromOption; } set { this.LastFromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastSender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SenderProjection> LastSenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastSender
        /// </summary>
        [JsonPropertyName("lastSender")]
        public SenderProjection LastSender { get { return this.LastSenderOption; } set { this.LastSenderOption = new Option<SenderProjection>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Thread topic subject
        /// </summary>
        /// <value>Thread topic subject</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// From sender
        /// </summary>
        /// <value>From sender</value>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailThreadProjection {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  Unread: ").Append(Unread).Append("\n");
            sb.Append("  MessageCount: ").Append(MessageCount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  LastBodyExcerpt: ").Append(LastBodyExcerpt).Append("\n");
            sb.Append("  LastTextExcerpt: ").Append(LastTextExcerpt).Append("\n");
            sb.Append("  LastCreatedAt: ").Append(LastCreatedAt).Append("\n");
            sb.Append("  LastFrom: ").Append(LastFrom).Append("\n");
            sb.Append("  LastSender: ").Append(LastSender).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailThreadProjection" />
    /// </summary>
    public class EmailThreadProjectionJsonConverter : JsonConverter<EmailThreadProjection>
    {
        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastCreatedAt
        /// </summary>
        public static string LastCreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EmailThreadProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailThreadProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> userId = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> createdAt = default;
            Option<List<string>> to = default;
            Option<bool?> hasAttachments = default;
            Option<bool?> unread = default;
            Option<int?> messageCount = default;
            Option<Guid?> id = default;
            Option<SenderProjection> sender = default;
            Option<EmailRecipientsProjection> recipients = default;
            Option<Guid?> inboxId = default;
            Option<List<string>> cc = default;
            Option<List<string>> bcc = default;
            Option<string> lastBodyExcerpt = default;
            Option<string> lastTextExcerpt = default;
            Option<DateTime?> lastCreatedAt = default;
            Option<string> lastFrom = default;
            Option<SenderProjection> lastSender = default;
            Option<string> subject = default;
            Option<string> from = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "hasAttachments":
                            hasAttachments = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "unread":
                            unread = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "messageCount":
                            messageCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sender":
                            sender = new Option<SenderProjection>(JsonSerializer.Deserialize<SenderProjection>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recipients":
                            recipients = new Option<EmailRecipientsProjection>(JsonSerializer.Deserialize<EmailRecipientsProjection>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lastBodyExcerpt":
                            lastBodyExcerpt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastTextExcerpt":
                            lastTextExcerpt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastCreatedAt":
                            lastCreatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lastFrom":
                            lastFrom = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastSender":
                            lastSender = new Option<SenderProjection>(JsonSerializer.Deserialize<SenderProjection>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadProjection.", nameof(userId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadProjection.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadProjection.", nameof(createdAt));

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadProjection.", nameof(to));

            if (!hasAttachments.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadProjection.", nameof(hasAttachments));

            if (!unread.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadProjection.", nameof(unread));

            if (!messageCount.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadProjection.", nameof(messageCount));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadProjection.", nameof(id));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class EmailThreadProjection.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class EmailThreadProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class EmailThreadProjection.");

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class EmailThreadProjection.");

            if (hasAttachments.IsSet && hasAttachments.Value == null)
                throw new ArgumentNullException(nameof(hasAttachments), "Property is not nullable for class EmailThreadProjection.");

            if (unread.IsSet && unread.Value == null)
                throw new ArgumentNullException(nameof(unread), "Property is not nullable for class EmailThreadProjection.");

            if (messageCount.IsSet && messageCount.Value == null)
                throw new ArgumentNullException(nameof(messageCount), "Property is not nullable for class EmailThreadProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EmailThreadProjection.");

            if (sender.IsSet && sender.Value == null)
                throw new ArgumentNullException(nameof(sender), "Property is not nullable for class EmailThreadProjection.");

            if (recipients.IsSet && recipients.Value == null)
                throw new ArgumentNullException(nameof(recipients), "Property is not nullable for class EmailThreadProjection.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class EmailThreadProjection.");

            if (cc.IsSet && cc.Value == null)
                throw new ArgumentNullException(nameof(cc), "Property is not nullable for class EmailThreadProjection.");

            if (bcc.IsSet && bcc.Value == null)
                throw new ArgumentNullException(nameof(bcc), "Property is not nullable for class EmailThreadProjection.");

            if (lastBodyExcerpt.IsSet && lastBodyExcerpt.Value == null)
                throw new ArgumentNullException(nameof(lastBodyExcerpt), "Property is not nullable for class EmailThreadProjection.");

            if (lastTextExcerpt.IsSet && lastTextExcerpt.Value == null)
                throw new ArgumentNullException(nameof(lastTextExcerpt), "Property is not nullable for class EmailThreadProjection.");

            if (lastCreatedAt.IsSet && lastCreatedAt.Value == null)
                throw new ArgumentNullException(nameof(lastCreatedAt), "Property is not nullable for class EmailThreadProjection.");

            if (lastFrom.IsSet && lastFrom.Value == null)
                throw new ArgumentNullException(nameof(lastFrom), "Property is not nullable for class EmailThreadProjection.");

            if (lastSender.IsSet && lastSender.Value == null)
                throw new ArgumentNullException(nameof(lastSender), "Property is not nullable for class EmailThreadProjection.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class EmailThreadProjection.");

            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from), "Property is not nullable for class EmailThreadProjection.");

            return new EmailThreadProjection(userId.Value.Value, updatedAt.Value.Value, createdAt.Value.Value, to.Value, hasAttachments.Value.Value, unread.Value.Value, messageCount.Value.Value, id.Value.Value, sender, recipients, inboxId, cc, bcc, lastBodyExcerpt, lastTextExcerpt, lastCreatedAt, lastFrom, lastSender, subject, from);
        }

        /// <summary>
        /// Serializes a <see cref="EmailThreadProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailThreadProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailThreadProjection emailThreadProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailThreadProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailThreadProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailThreadProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailThreadProjection emailThreadProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailThreadProjection.To == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.To), "Property is required for class EmailThreadProjection.");

            if (emailThreadProjection.SenderOption.IsSet && emailThreadProjection.Sender == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.Sender), "Property is required for class EmailThreadProjection.");

            if (emailThreadProjection.RecipientsOption.IsSet && emailThreadProjection.Recipients == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.Recipients), "Property is required for class EmailThreadProjection.");

            if (emailThreadProjection.CcOption.IsSet && emailThreadProjection.Cc == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.Cc), "Property is required for class EmailThreadProjection.");

            if (emailThreadProjection.BccOption.IsSet && emailThreadProjection.Bcc == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.Bcc), "Property is required for class EmailThreadProjection.");

            if (emailThreadProjection.LastBodyExcerptOption.IsSet && emailThreadProjection.LastBodyExcerpt == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.LastBodyExcerpt), "Property is required for class EmailThreadProjection.");

            if (emailThreadProjection.LastTextExcerptOption.IsSet && emailThreadProjection.LastTextExcerpt == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.LastTextExcerpt), "Property is required for class EmailThreadProjection.");

            if (emailThreadProjection.LastFromOption.IsSet && emailThreadProjection.LastFrom == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.LastFrom), "Property is required for class EmailThreadProjection.");

            if (emailThreadProjection.LastSenderOption.IsSet && emailThreadProjection.LastSender == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.LastSender), "Property is required for class EmailThreadProjection.");

            if (emailThreadProjection.SubjectOption.IsSet && emailThreadProjection.Subject == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.Subject), "Property is required for class EmailThreadProjection.");

            if (emailThreadProjection.FromOption.IsSet && emailThreadProjection.From == null)
                throw new ArgumentNullException(nameof(emailThreadProjection.From), "Property is required for class EmailThreadProjection.");

            writer.WriteString("userId", emailThreadProjection.UserId);

            writer.WriteString("updatedAt", emailThreadProjection.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("createdAt", emailThreadProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WritePropertyName("to");
            JsonSerializer.Serialize(writer, emailThreadProjection.To, jsonSerializerOptions);
            writer.WriteBoolean("hasAttachments", emailThreadProjection.HasAttachments);

            writer.WriteBoolean("unread", emailThreadProjection.Unread);

            writer.WriteNumber("messageCount", emailThreadProjection.MessageCount);

            writer.WriteString("id", emailThreadProjection.Id);

            if (emailThreadProjection.SenderOption.IsSet)
            {
                writer.WritePropertyName("sender");
                JsonSerializer.Serialize(writer, emailThreadProjection.Sender, jsonSerializerOptions);
            }
            if (emailThreadProjection.RecipientsOption.IsSet)
            {
                writer.WritePropertyName("recipients");
                JsonSerializer.Serialize(writer, emailThreadProjection.Recipients, jsonSerializerOptions);
            }
            if (emailThreadProjection.InboxIdOption.IsSet)
                writer.WriteString("inboxId", emailThreadProjection.InboxIdOption.Value.Value);

            if (emailThreadProjection.CcOption.IsSet)
            {
                writer.WritePropertyName("cc");
                JsonSerializer.Serialize(writer, emailThreadProjection.Cc, jsonSerializerOptions);
            }
            if (emailThreadProjection.BccOption.IsSet)
            {
                writer.WritePropertyName("bcc");
                JsonSerializer.Serialize(writer, emailThreadProjection.Bcc, jsonSerializerOptions);
            }
            if (emailThreadProjection.LastBodyExcerptOption.IsSet)
                writer.WriteString("lastBodyExcerpt", emailThreadProjection.LastBodyExcerpt);

            if (emailThreadProjection.LastTextExcerptOption.IsSet)
                writer.WriteString("lastTextExcerpt", emailThreadProjection.LastTextExcerpt);

            if (emailThreadProjection.LastCreatedAtOption.IsSet)
                writer.WriteString("lastCreatedAt", emailThreadProjection.LastCreatedAtOption.Value.Value.ToString(LastCreatedAtFormat));

            if (emailThreadProjection.LastFromOption.IsSet)
                writer.WriteString("lastFrom", emailThreadProjection.LastFrom);

            if (emailThreadProjection.LastSenderOption.IsSet)
            {
                writer.WritePropertyName("lastSender");
                JsonSerializer.Serialize(writer, emailThreadProjection.LastSender, jsonSerializerOptions);
            }
            if (emailThreadProjection.SubjectOption.IsSet)
                writer.WriteString("subject", emailThreadProjection.Subject);

            if (emailThreadProjection.FromOption.IsSet)
                writer.WriteString("from", emailThreadProjection.From);
        }
    }
}
