/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// An email thread is a message thread created for a email based on Message-ID, In-Reply-To, and References headers
    /// </summary>
    [DataContract(Name = "EmailThreadProjection")]
    public partial class EmailThreadProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailThreadProjection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailThreadProjection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailThreadProjection" /> class.
        /// </summary>
        /// <param name="sender">sender.</param>
        /// <param name="recipients">recipients.</param>
        /// <param name="userId">User ID (required).</param>
        /// <param name="inboxId">Inbox ID.</param>
        /// <param name="updatedAt">Updated at DateTime (required).</param>
        /// <param name="createdAt">Created at DateTime (required).</param>
        /// <param name="to">To recipients (required).</param>
        /// <param name="cc">CC recipients.</param>
        /// <param name="bcc">BCC recipients.</param>
        /// <param name="hasAttachments">Has attachments (required).</param>
        /// <param name="unread">Has unread (required).</param>
        /// <param name="messageCount">Number of messages in the thread (required).</param>
        /// <param name="lastBodyExcerpt">Last body excerpt.</param>
        /// <param name="lastTextExcerpt">Last text excerpt.</param>
        /// <param name="lastCreatedAt">Last email created time.</param>
        /// <param name="lastFrom">Last sender.</param>
        /// <param name="lastSender">lastSender.</param>
        /// <param name="subject">Thread topic subject.</param>
        /// <param name="id">ID of email thread (required).</param>
        /// <param name="from">From sender.</param>
        public EmailThreadProjection(SenderProjection sender = default, EmailRecipientsProjection recipients = default, Guid userId = default, Guid inboxId = default, DateTime updatedAt = default, DateTime createdAt = default, List<string> to = default, List<string> cc = default, List<string> bcc = default, bool hasAttachments = default, bool unread = default, int messageCount = default, string lastBodyExcerpt = default, string lastTextExcerpt = default, DateTime lastCreatedAt = default, string lastFrom = default, SenderProjection lastSender = default, string subject = default, Guid id = default, string from = default)
        {
            this.UserId = userId;
            this.UpdatedAt = updatedAt;
            this.CreatedAt = createdAt;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for EmailThreadProjection and cannot be null");
            }
            this.To = to;
            this.HasAttachments = hasAttachments;
            this.Unread = unread;
            this.MessageCount = messageCount;
            this.Id = id;
            this.Sender = sender;
            this.Recipients = recipients;
            this.InboxId = inboxId;
            this.Cc = cc;
            this.Bcc = bcc;
            this.LastBodyExcerpt = lastBodyExcerpt;
            this.LastTextExcerpt = lastTextExcerpt;
            this.LastCreatedAt = lastCreatedAt;
            this.LastFrom = lastFrom;
            this.LastSender = lastSender;
            this.Subject = subject;
            this.From = from;
        }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public SenderProjection Sender { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name = "recipients", EmitDefaultValue = false)]
        public EmailRecipientsProjection Recipients { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Inbox ID
        /// </summary>
        /// <value>Inbox ID</value>
        [DataMember(Name = "inboxId", EmitDefaultValue = false)]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Updated at DateTime
        /// </summary>
        /// <value>Updated at DateTime</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Created at DateTime
        /// </summary>
        /// <value>Created at DateTime</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// To recipients
        /// </summary>
        /// <value>To recipients</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public List<string> To { get; set; }

        /// <summary>
        /// CC recipients
        /// </summary>
        /// <value>CC recipients</value>
        [DataMember(Name = "cc", EmitDefaultValue = false)]
        public List<string> Cc { get; set; }

        /// <summary>
        /// BCC recipients
        /// </summary>
        /// <value>BCC recipients</value>
        [DataMember(Name = "bcc", EmitDefaultValue = false)]
        public List<string> Bcc { get; set; }

        /// <summary>
        /// Has attachments
        /// </summary>
        /// <value>Has attachments</value>
        [DataMember(Name = "hasAttachments", IsRequired = true, EmitDefaultValue = true)]
        public bool HasAttachments { get; set; }

        /// <summary>
        /// Has unread
        /// </summary>
        /// <value>Has unread</value>
        [DataMember(Name = "unread", IsRequired = true, EmitDefaultValue = true)]
        public bool Unread { get; set; }

        /// <summary>
        /// Number of messages in the thread
        /// </summary>
        /// <value>Number of messages in the thread</value>
        [DataMember(Name = "messageCount", IsRequired = true, EmitDefaultValue = true)]
        public int MessageCount { get; set; }

        /// <summary>
        /// Last body excerpt
        /// </summary>
        /// <value>Last body excerpt</value>
        [DataMember(Name = "lastBodyExcerpt", EmitDefaultValue = false)]
        public string LastBodyExcerpt { get; set; }

        /// <summary>
        /// Last text excerpt
        /// </summary>
        /// <value>Last text excerpt</value>
        [DataMember(Name = "lastTextExcerpt", EmitDefaultValue = false)]
        public string LastTextExcerpt { get; set; }

        /// <summary>
        /// Last email created time
        /// </summary>
        /// <value>Last email created time</value>
        [DataMember(Name = "lastCreatedAt", EmitDefaultValue = false)]
        public DateTime LastCreatedAt { get; set; }

        /// <summary>
        /// Last sender
        /// </summary>
        /// <value>Last sender</value>
        [DataMember(Name = "lastFrom", EmitDefaultValue = false)]
        public string LastFrom { get; set; }

        /// <summary>
        /// Gets or Sets LastSender
        /// </summary>
        [DataMember(Name = "lastSender", EmitDefaultValue = false)]
        public SenderProjection LastSender { get; set; }

        /// <summary>
        /// Thread topic subject
        /// </summary>
        /// <value>Thread topic subject</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// ID of email thread
        /// </summary>
        /// <value>ID of email thread</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// From sender
        /// </summary>
        /// <value>From sender</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailThreadProjection {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  Unread: ").Append(Unread).Append("\n");
            sb.Append("  MessageCount: ").Append(MessageCount).Append("\n");
            sb.Append("  LastBodyExcerpt: ").Append(LastBodyExcerpt).Append("\n");
            sb.Append("  LastTextExcerpt: ").Append(LastTextExcerpt).Append("\n");
            sb.Append("  LastCreatedAt: ").Append(LastCreatedAt).Append("\n");
            sb.Append("  LastFrom: ").Append(LastFrom).Append("\n");
            sb.Append("  LastSender: ").Append(LastSender).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
