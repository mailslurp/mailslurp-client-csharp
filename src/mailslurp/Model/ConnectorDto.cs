/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorDto
    /// </summary>
    [DataContract(Name = "ConnectorDto")]
    public partial class ConnectorDto : IEquatable<ConnectorDto>, IValidatableObject
    {
        /// <summary>
        /// Defines ConnectorType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConnectorTypeEnum
        {
            /// <summary>
            /// Enum IMAP for value: IMAP
            /// </summary>
            [EnumMember(Value = "IMAP")]
            IMAP = 1

        }


        /// <summary>
        /// Gets or Sets ConnectorType
        /// </summary>
        [DataMember(Name = "connectorType", IsRequired = true, EmitDefaultValue = true)]
        public ConnectorTypeEnum ConnectorType { get; set; }
        /// <summary>
        /// Defines ConnectorAuthType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConnectorAuthTypeEnum
        {
            /// <summary>
            /// Enum PLAINTEXT for value: PLAIN_TEXT
            /// </summary>
            [EnumMember(Value = "PLAIN_TEXT")]
            PLAINTEXT = 1

        }


        /// <summary>
        /// Gets or Sets ConnectorAuthType
        /// </summary>
        [DataMember(Name = "connectorAuthType", IsRequired = true, EmitDefaultValue = true)]
        public ConnectorAuthTypeEnum ConnectorAuthType { get; set; }
        /// <summary>
        /// Defines SyncScheduleType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SyncScheduleTypeEnum
        {
            /// <summary>
            /// Enum INTERVAL for value: INTERVAL
            /// </summary>
            [EnumMember(Value = "INTERVAL")]
            INTERVAL = 1

        }


        /// <summary>
        /// Gets or Sets SyncScheduleType
        /// </summary>
        [DataMember(Name = "syncScheduleType", IsRequired = true, EmitDefaultValue = true)]
        public SyncScheduleTypeEnum SyncScheduleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectorDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="enabled">enabled (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="connectorType">connectorType (required).</param>
        /// <param name="connectorAuthType">connectorAuthType (required).</param>
        /// <param name="syncEnabled">syncEnabled (required).</param>
        /// <param name="syncScheduleType">syncScheduleType (required).</param>
        /// <param name="syncInterval">syncInterval.</param>
        /// <param name="imapHost">imapHost.</param>
        /// <param name="imapPort">imapPort.</param>
        /// <param name="imapUsername">imapUsername.</param>
        /// <param name="imapPassword">imapPassword.</param>
        /// <param name="imapSsl">imapSsl.</param>
        /// <param name="selectFolder">selectFolder.</param>
        /// <param name="searchTerms">searchTerms.</param>
        /// <param name="createdAt">createdAt (required).</param>
        public ConnectorDto(Guid id = default(Guid), bool enabled = default(bool), Guid userId = default(Guid), ConnectorTypeEnum connectorType = default(ConnectorTypeEnum), ConnectorAuthTypeEnum connectorAuthType = default(ConnectorAuthTypeEnum), bool syncEnabled = default(bool), SyncScheduleTypeEnum syncScheduleType = default(SyncScheduleTypeEnum), int syncInterval = default(int), string imapHost = default(string), int imapPort = default(int), string imapUsername = default(string), string imapPassword = default(string), bool imapSsl = default(bool), string selectFolder = default(string), string searchTerms = default(string), DateTime createdAt = default(DateTime))
        {
            this.Id = id;
            this.Enabled = enabled;
            this.UserId = userId;
            this.ConnectorType = connectorType;
            this.ConnectorAuthType = connectorAuthType;
            this.SyncEnabled = syncEnabled;
            this.SyncScheduleType = syncScheduleType;
            this.CreatedAt = createdAt;
            this.SyncInterval = syncInterval;
            this.ImapHost = imapHost;
            this.ImapPort = imapPort;
            this.ImapUsername = imapUsername;
            this.ImapPassword = imapPassword;
            this.ImapSsl = imapSsl;
            this.SelectFolder = selectFolder;
            this.SearchTerms = searchTerms;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets SyncEnabled
        /// </summary>
        [DataMember(Name = "syncEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool SyncEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SyncInterval
        /// </summary>
        [DataMember(Name = "syncInterval", EmitDefaultValue = false)]
        public int SyncInterval { get; set; }

        /// <summary>
        /// Gets or Sets ImapHost
        /// </summary>
        [DataMember(Name = "imapHost", EmitDefaultValue = false)]
        public string ImapHost { get; set; }

        /// <summary>
        /// Gets or Sets ImapPort
        /// </summary>
        [DataMember(Name = "imapPort", EmitDefaultValue = false)]
        public int ImapPort { get; set; }

        /// <summary>
        /// Gets or Sets ImapUsername
        /// </summary>
        [DataMember(Name = "imapUsername", EmitDefaultValue = false)]
        public string ImapUsername { get; set; }

        /// <summary>
        /// Gets or Sets ImapPassword
        /// </summary>
        [DataMember(Name = "imapPassword", EmitDefaultValue = false)]
        public string ImapPassword { get; set; }

        /// <summary>
        /// Gets or Sets ImapSsl
        /// </summary>
        [DataMember(Name = "imapSsl", EmitDefaultValue = true)]
        public bool ImapSsl { get; set; }

        /// <summary>
        /// Gets or Sets SelectFolder
        /// </summary>
        [DataMember(Name = "selectFolder", EmitDefaultValue = false)]
        public string SelectFolder { get; set; }

        /// <summary>
        /// Gets or Sets SearchTerms
        /// </summary>
        [DataMember(Name = "searchTerms", EmitDefaultValue = false)]
        public string SearchTerms { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ConnectorType: ").Append(ConnectorType).Append("\n");
            sb.Append("  ConnectorAuthType: ").Append(ConnectorAuthType).Append("\n");
            sb.Append("  SyncEnabled: ").Append(SyncEnabled).Append("\n");
            sb.Append("  SyncScheduleType: ").Append(SyncScheduleType).Append("\n");
            sb.Append("  SyncInterval: ").Append(SyncInterval).Append("\n");
            sb.Append("  ImapHost: ").Append(ImapHost).Append("\n");
            sb.Append("  ImapPort: ").Append(ImapPort).Append("\n");
            sb.Append("  ImapUsername: ").Append(ImapUsername).Append("\n");
            sb.Append("  ImapPassword: ").Append(ImapPassword).Append("\n");
            sb.Append("  ImapSsl: ").Append(ImapSsl).Append("\n");
            sb.Append("  SelectFolder: ").Append(SelectFolder).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectorDto);
        }

        /// <summary>
        /// Returns true if ConnectorDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectorDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ConnectorType == input.ConnectorType ||
                    this.ConnectorType.Equals(input.ConnectorType)
                ) && 
                (
                    this.ConnectorAuthType == input.ConnectorAuthType ||
                    this.ConnectorAuthType.Equals(input.ConnectorAuthType)
                ) && 
                (
                    this.SyncEnabled == input.SyncEnabled ||
                    this.SyncEnabled.Equals(input.SyncEnabled)
                ) && 
                (
                    this.SyncScheduleType == input.SyncScheduleType ||
                    this.SyncScheduleType.Equals(input.SyncScheduleType)
                ) && 
                (
                    this.SyncInterval == input.SyncInterval ||
                    this.SyncInterval.Equals(input.SyncInterval)
                ) && 
                (
                    this.ImapHost == input.ImapHost ||
                    (this.ImapHost != null &&
                    this.ImapHost.Equals(input.ImapHost))
                ) && 
                (
                    this.ImapPort == input.ImapPort ||
                    this.ImapPort.Equals(input.ImapPort)
                ) && 
                (
                    this.ImapUsername == input.ImapUsername ||
                    (this.ImapUsername != null &&
                    this.ImapUsername.Equals(input.ImapUsername))
                ) && 
                (
                    this.ImapPassword == input.ImapPassword ||
                    (this.ImapPassword != null &&
                    this.ImapPassword.Equals(input.ImapPassword))
                ) && 
                (
                    this.ImapSsl == input.ImapSsl ||
                    this.ImapSsl.Equals(input.ImapSsl)
                ) && 
                (
                    this.SelectFolder == input.SelectFolder ||
                    (this.SelectFolder != null &&
                    this.SelectFolder.Equals(input.SelectFolder))
                ) && 
                (
                    this.SearchTerms == input.SearchTerms ||
                    (this.SearchTerms != null &&
                    this.SearchTerms.Equals(input.SearchTerms))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectorType.GetHashCode();
                hashCode = (hashCode * 59) + this.ConnectorAuthType.GetHashCode();
                hashCode = (hashCode * 59) + this.SyncEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.SyncScheduleType.GetHashCode();
                hashCode = (hashCode * 59) + this.SyncInterval.GetHashCode();
                if (this.ImapHost != null)
                {
                    hashCode = (hashCode * 59) + this.ImapHost.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ImapPort.GetHashCode();
                if (this.ImapUsername != null)
                {
                    hashCode = (hashCode * 59) + this.ImapUsername.GetHashCode();
                }
                if (this.ImapPassword != null)
                {
                    hashCode = (hashCode * 59) + this.ImapPassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ImapSsl.GetHashCode();
                if (this.SelectFolder != null)
                {
                    hashCode = (hashCode * 59) + this.SelectFolder.GetHashCode();
                }
                if (this.SearchTerms != null)
                {
                    hashCode = (hashCode * 59) + this.SearchTerms.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
