/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorDto
    /// </summary>
    [DataContract(Name = "ConnectorDto")]
    public partial class ConnectorDto : IEquatable<ConnectorDto>, IValidatableObject
    {
        /// <summary>
        /// Defines SyncScheduleType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SyncScheduleTypeEnum
        {
            /// <summary>
            /// Enum INTERVAL for value: INTERVAL
            /// </summary>
            [EnumMember(Value = "INTERVAL")]
            INTERVAL = 1

        }


        /// <summary>
        /// Gets or Sets SyncScheduleType
        /// </summary>
        [DataMember(Name = "syncScheduleType", EmitDefaultValue = true)]
        public SyncScheduleTypeEnum? SyncScheduleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectorDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="enabled">enabled (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="inboxId">inboxId (required).</param>
        /// <param name="syncEnabled">syncEnabled (required).</param>
        /// <param name="syncScheduleType">syncScheduleType.</param>
        /// <param name="syncInterval">syncInterval.</param>
        /// <param name="hasImapConnection">hasImapConnection (required).</param>
        /// <param name="hasSmtpConnection">hasSmtpConnection (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        public ConnectorDto(Guid id = default(Guid), string name = default(string), bool enabled = default(bool), Guid userId = default(Guid), Guid inboxId = default(Guid), bool syncEnabled = default(bool), SyncScheduleTypeEnum? syncScheduleType = default(SyncScheduleTypeEnum?), int? syncInterval = default(int?), bool hasImapConnection = default(bool), bool hasSmtpConnection = default(bool), DateTime createdAt = default(DateTime))
        {
            this.Id = id;
            this.Enabled = enabled;
            this.UserId = userId;
            this.InboxId = inboxId;
            this.SyncEnabled = syncEnabled;
            this.HasImapConnection = hasImapConnection;
            this.HasSmtpConnection = hasSmtpConnection;
            this.CreatedAt = createdAt;
            this.Name = name;
            this.SyncScheduleType = syncScheduleType;
            this.SyncInterval = syncInterval;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [DataMember(Name = "inboxId", IsRequired = true, EmitDefaultValue = true)]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets SyncEnabled
        /// </summary>
        [DataMember(Name = "syncEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool SyncEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SyncInterval
        /// </summary>
        [DataMember(Name = "syncInterval", EmitDefaultValue = true)]
        public int? SyncInterval { get; set; }

        /// <summary>
        /// Gets or Sets HasImapConnection
        /// </summary>
        [DataMember(Name = "hasImapConnection", IsRequired = true, EmitDefaultValue = true)]
        public bool HasImapConnection { get; set; }

        /// <summary>
        /// Gets or Sets HasSmtpConnection
        /// </summary>
        [DataMember(Name = "hasSmtpConnection", IsRequired = true, EmitDefaultValue = true)]
        public bool HasSmtpConnection { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  SyncEnabled: ").Append(SyncEnabled).Append("\n");
            sb.Append("  SyncScheduleType: ").Append(SyncScheduleType).Append("\n");
            sb.Append("  SyncInterval: ").Append(SyncInterval).Append("\n");
            sb.Append("  HasImapConnection: ").Append(HasImapConnection).Append("\n");
            sb.Append("  HasSmtpConnection: ").Append(HasSmtpConnection).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectorDto);
        }

        /// <summary>
        /// Returns true if ConnectorDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectorDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.InboxId == input.InboxId ||
                    (this.InboxId != null &&
                    this.InboxId.Equals(input.InboxId))
                ) && 
                (
                    this.SyncEnabled == input.SyncEnabled ||
                    this.SyncEnabled.Equals(input.SyncEnabled)
                ) && 
                (
                    this.SyncScheduleType == input.SyncScheduleType ||
                    this.SyncScheduleType.Equals(input.SyncScheduleType)
                ) && 
                (
                    this.SyncInterval == input.SyncInterval ||
                    (this.SyncInterval != null &&
                    this.SyncInterval.Equals(input.SyncInterval))
                ) && 
                (
                    this.HasImapConnection == input.HasImapConnection ||
                    this.HasImapConnection.Equals(input.HasImapConnection)
                ) && 
                (
                    this.HasSmtpConnection == input.HasSmtpConnection ||
                    this.HasSmtpConnection.Equals(input.HasSmtpConnection)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.InboxId != null)
                {
                    hashCode = (hashCode * 59) + this.InboxId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SyncEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.SyncScheduleType.GetHashCode();
                if (this.SyncInterval != null)
                {
                    hashCode = (hashCode * 59) + this.SyncInterval.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasImapConnection.GetHashCode();
                hashCode = (hashCode * 59) + this.HasSmtpConnection.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
