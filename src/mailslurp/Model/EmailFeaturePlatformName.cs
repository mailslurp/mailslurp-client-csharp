// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EmailFeaturePlatformName
    /// </summary>
    public partial class EmailFeaturePlatformName : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailFeaturePlatformName" /> class.
        /// </summary>
        /// <param name="slug">slug</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public EmailFeaturePlatformName(SlugEnum slug, string name)
        {
            Slug = slug;
            Name = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Slug
        /// </summary>
        public enum SlugEnum
        {
            /// <summary>
            /// Enum Android for value: android
            /// </summary>
            Android = 1,

            /// <summary>
            /// Enum DesktopApp for value: desktop-app
            /// </summary>
            DesktopApp = 2,

            /// <summary>
            /// Enum DesktopWebmail for value: desktop-webmail
            /// </summary>
            DesktopWebmail = 3,

            /// <summary>
            /// Enum Ios for value: ios
            /// </summary>
            Ios = 4,

            /// <summary>
            /// Enum Macos for value: macos
            /// </summary>
            Macos = 5,

            /// <summary>
            /// Enum MobileWebmail for value: mobile-webmail
            /// </summary>
            MobileWebmail = 6,

            /// <summary>
            /// Enum OutlookCom for value: outlook-com
            /// </summary>
            OutlookCom = 7,

            /// <summary>
            /// Enum Webmail for value: webmail
            /// </summary>
            Webmail = 8,

            /// <summary>
            /// Enum Windows for value: windows
            /// </summary>
            Windows = 9,

            /// <summary>
            /// Enum WindowsMail for value: windows-mail
            /// </summary>
            WindowsMail = 10
        }

        /// <summary>
        /// Returns a <see cref="SlugEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SlugEnum SlugEnumFromString(string value)
        {
            if (value.Equals("android"))
                return SlugEnum.Android;

            if (value.Equals("desktop-app"))
                return SlugEnum.DesktopApp;

            if (value.Equals("desktop-webmail"))
                return SlugEnum.DesktopWebmail;

            if (value.Equals("ios"))
                return SlugEnum.Ios;

            if (value.Equals("macos"))
                return SlugEnum.Macos;

            if (value.Equals("mobile-webmail"))
                return SlugEnum.MobileWebmail;

            if (value.Equals("outlook-com"))
                return SlugEnum.OutlookCom;

            if (value.Equals("webmail"))
                return SlugEnum.Webmail;

            if (value.Equals("windows"))
                return SlugEnum.Windows;

            if (value.Equals("windows-mail"))
                return SlugEnum.WindowsMail;

            throw new NotImplementedException($"Could not convert value to type SlugEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SlugEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SlugEnum? SlugEnumFromStringOrDefault(string value)
        {
            if (value.Equals("android"))
                return SlugEnum.Android;

            if (value.Equals("desktop-app"))
                return SlugEnum.DesktopApp;

            if (value.Equals("desktop-webmail"))
                return SlugEnum.DesktopWebmail;

            if (value.Equals("ios"))
                return SlugEnum.Ios;

            if (value.Equals("macos"))
                return SlugEnum.Macos;

            if (value.Equals("mobile-webmail"))
                return SlugEnum.MobileWebmail;

            if (value.Equals("outlook-com"))
                return SlugEnum.OutlookCom;

            if (value.Equals("webmail"))
                return SlugEnum.Webmail;

            if (value.Equals("windows"))
                return SlugEnum.Windows;

            if (value.Equals("windows-mail"))
                return SlugEnum.WindowsMail;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SlugEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SlugEnumToJsonValue(SlugEnum value)
        {
            if (value == SlugEnum.Android)
                return "android";

            if (value == SlugEnum.DesktopApp)
                return "desktop-app";

            if (value == SlugEnum.DesktopWebmail)
                return "desktop-webmail";

            if (value == SlugEnum.Ios)
                return "ios";

            if (value == SlugEnum.Macos)
                return "macos";

            if (value == SlugEnum.MobileWebmail)
                return "mobile-webmail";

            if (value == SlugEnum.OutlookCom)
                return "outlook-com";

            if (value == SlugEnum.Webmail)
                return "webmail";

            if (value == SlugEnum.Windows)
                return "windows";

            if (value == SlugEnum.WindowsMail)
                return "windows-mail";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public SlugEnum Slug { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailFeaturePlatformName {\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailFeaturePlatformName" />
    /// </summary>
    public class EmailFeaturePlatformNameJsonConverter : JsonConverter<EmailFeaturePlatformName>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailFeaturePlatformName" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailFeaturePlatformName Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EmailFeaturePlatformName.SlugEnum?> slug = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "slug":
                            string slugRawValue = utf8JsonReader.GetString();
                            if (slugRawValue != null)
                                slug = new Option<EmailFeaturePlatformName.SlugEnum?>(EmailFeaturePlatformName.SlugEnumFromStringOrDefault(slugRawValue));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!slug.IsSet)
                throw new ArgumentException("Property is required for class EmailFeaturePlatformName.", nameof(slug));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class EmailFeaturePlatformName.", nameof(name));

            if (slug.IsSet && slug.Value == null)
                throw new ArgumentNullException(nameof(slug), "Property is not nullable for class EmailFeaturePlatformName.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class EmailFeaturePlatformName.");

            return new EmailFeaturePlatformName(slug.Value.Value, name.Value);
        }

        /// <summary>
        /// Serializes a <see cref="EmailFeaturePlatformName" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailFeaturePlatformName"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailFeaturePlatformName emailFeaturePlatformName, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailFeaturePlatformName, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailFeaturePlatformName" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailFeaturePlatformName"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailFeaturePlatformName emailFeaturePlatformName, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailFeaturePlatformName.Name == null)
                throw new ArgumentNullException(nameof(emailFeaturePlatformName.Name), "Property is required for class EmailFeaturePlatformName.");

            var slugRawValue = EmailFeaturePlatformName.SlugEnumToJsonValue(emailFeaturePlatformName.Slug);
            writer.WriteString("slug", slugRawValue);
            writer.WriteString("name", emailFeaturePlatformName.Name);
        }
    }
}
