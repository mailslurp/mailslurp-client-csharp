// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ImapServerStatusOptions
    /// </summary>
    public partial class ImapServerStatusOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapServerStatusOptions" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="statusItems">statusItems</param>
        [JsonConstructor]
        public ImapServerStatusOptions(Option<string> name = default, Option<List<ImapServerStatusOptions.StatusItemsEnum>> statusItems = default)
        {
            NameOption = name;
            StatusItemsOption = statusItems;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines StatusItems
        /// </summary>
        public enum StatusItemsEnum
        {
            /// <summary>
            /// Enum MESSAGES for value: MESSAGES
            /// </summary>
            MESSAGES = 1,

            /// <summary>
            /// Enum RECENT for value: RECENT
            /// </summary>
            RECENT = 2,

            /// <summary>
            /// Enum UIDNEXT for value: UIDNEXT
            /// </summary>
            UIDNEXT = 3,

            /// <summary>
            /// Enum UIDVALIDITY for value: UIDVALIDITY
            /// </summary>
            UIDVALIDITY = 4,

            /// <summary>
            /// Enum UNSEEN for value: UNSEEN
            /// </summary>
            UNSEEN = 5,

            /// <summary>
            /// Enum APPENDLIMIT for value: APPENDLIMIT
            /// </summary>
            APPENDLIMIT = 6
        }

        /// <summary>
        /// Returns a <see cref="StatusItemsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusItemsEnum StatusItemsEnumFromString(string value)
        {
            if (value.Equals("MESSAGES"))
                return StatusItemsEnum.MESSAGES;

            if (value.Equals("RECENT"))
                return StatusItemsEnum.RECENT;

            if (value.Equals("UIDNEXT"))
                return StatusItemsEnum.UIDNEXT;

            if (value.Equals("UIDVALIDITY"))
                return StatusItemsEnum.UIDVALIDITY;

            if (value.Equals("UNSEEN"))
                return StatusItemsEnum.UNSEEN;

            if (value.Equals("APPENDLIMIT"))
                return StatusItemsEnum.APPENDLIMIT;

            throw new NotImplementedException($"Could not convert value to type StatusItemsEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusItemsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusItemsEnum? StatusItemsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("MESSAGES"))
                return StatusItemsEnum.MESSAGES;

            if (value.Equals("RECENT"))
                return StatusItemsEnum.RECENT;

            if (value.Equals("UIDNEXT"))
                return StatusItemsEnum.UIDNEXT;

            if (value.Equals("UIDVALIDITY"))
                return StatusItemsEnum.UIDVALIDITY;

            if (value.Equals("UNSEEN"))
                return StatusItemsEnum.UNSEEN;

            if (value.Equals("APPENDLIMIT"))
                return StatusItemsEnum.APPENDLIMIT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusItemsEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusItemsEnumToJsonValue(StatusItemsEnum value)
        {
            if (value == null)
                return null;

            if (value == StatusItemsEnum.MESSAGES)
                return "MESSAGES";

            if (value == StatusItemsEnum.RECENT)
                return "RECENT";

            if (value == StatusItemsEnum.UIDNEXT)
                return "UIDNEXT";

            if (value == StatusItemsEnum.UIDVALIDITY)
                return "UIDVALIDITY";

            if (value == StatusItemsEnum.UNSEEN)
                return "UNSEEN";

            if (value == StatusItemsEnum.APPENDLIMIT)
                return "APPENDLIMIT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StatusItems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ImapServerStatusOptions.StatusItemsEnum>> StatusItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatusItems
        /// </summary>
        [JsonPropertyName("statusItems")]
        public List<ImapServerStatusOptions.StatusItemsEnum> StatusItems { get { return this.StatusItemsOption; } set { this.StatusItemsOption = new Option<List<ImapServerStatusOptions.StatusItemsEnum>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImapServerStatusOptions {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StatusItems: ").Append(StatusItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImapServerStatusOptions" />
    /// </summary>
    public class ImapServerStatusOptionsJsonConverter : JsonConverter<ImapServerStatusOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImapServerStatusOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImapServerStatusOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<List<ImapServerStatusOptions.StatusItemsEnum>> statusItems = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "statusItems":
                            statusItems = new Option<List<ImapServerStatusOptions.StatusItemsEnum>>(JsonSerializer.Deserialize<List<ImapServerStatusOptions.StatusItemsEnum>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ImapServerStatusOptions(name, statusItems);
        }

        /// <summary>
        /// Serializes a <see cref="ImapServerStatusOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapServerStatusOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImapServerStatusOptions imapServerStatusOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imapServerStatusOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImapServerStatusOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapServerStatusOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImapServerStatusOptions imapServerStatusOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imapServerStatusOptions.NameOption.IsSet)
                if (imapServerStatusOptions.NameOption.Value != null)
                    writer.WriteString("name", imapServerStatusOptions.Name);
                else
                    writer.WriteNull("name");

            if (imapServerStatusOptions.StatusItemsOption.IsSet)
                if (imapServerStatusOptions.StatusItemsOption.Value != null)
                {
                    writer.WritePropertyName("statusItems");
                    JsonSerializer.Serialize(writer, imapServerStatusOptions.StatusItems, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("statusItems");
        }
    }
}
