// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Result of webhook test request
    /// </summary>
    public partial class WebhookTestRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookTestRequest" /> class.
        /// </summary>
        /// <param name="url">url</param>
        /// <param name="method">method</param>
        /// <param name="headers">headers</param>
        /// <param name="payload">payload</param>
        [JsonConstructor]
        public WebhookTestRequest(string url, MethodEnum method, Dictionary<string, string> headers, Option<string> payload = default)
        {
            Url = url;
            Method = method;
            Headers = headers;
            PayloadOption = payload;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Method
        /// </summary>
        public enum MethodEnum
        {
            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            POST = 1,

            /// <summary>
            /// Enum DELETE for value: DELETE
            /// </summary>
            DELETE = 2,

            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            GET = 3,

            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            PUT = 4,

            /// <summary>
            /// Enum PATCH for value: PATCH
            /// </summary>
            PATCH = 5,

            /// <summary>
            /// Enum HEAD for value: HEAD
            /// </summary>
            HEAD = 6,

            /// <summary>
            /// Enum OPTIONS for value: OPTIONS
            /// </summary>
            OPTIONS = 7,

            /// <summary>
            /// Enum TRACE for value: TRACE
            /// </summary>
            TRACE = 8
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MethodEnum MethodEnumFromString(string value)
        {
            if (value.Equals("POST"))
                return MethodEnum.POST;

            if (value.Equals("DELETE"))
                return MethodEnum.DELETE;

            if (value.Equals("GET"))
                return MethodEnum.GET;

            if (value.Equals("PUT"))
                return MethodEnum.PUT;

            if (value.Equals("PATCH"))
                return MethodEnum.PATCH;

            if (value.Equals("HEAD"))
                return MethodEnum.HEAD;

            if (value.Equals("OPTIONS"))
                return MethodEnum.OPTIONS;

            if (value.Equals("TRACE"))
                return MethodEnum.TRACE;

            throw new NotImplementedException($"Could not convert value to type MethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MethodEnum? MethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("POST"))
                return MethodEnum.POST;

            if (value.Equals("DELETE"))
                return MethodEnum.DELETE;

            if (value.Equals("GET"))
                return MethodEnum.GET;

            if (value.Equals("PUT"))
                return MethodEnum.PUT;

            if (value.Equals("PATCH"))
                return MethodEnum.PATCH;

            if (value.Equals("HEAD"))
                return MethodEnum.HEAD;

            if (value.Equals("OPTIONS"))
                return MethodEnum.OPTIONS;

            if (value.Equals("TRACE"))
                return MethodEnum.TRACE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MethodEnumToJsonValue(MethodEnum value)
        {
            if (value == MethodEnum.POST)
                return "POST";

            if (value == MethodEnum.DELETE)
                return "DELETE";

            if (value == MethodEnum.GET)
                return "GET";

            if (value == MethodEnum.PUT)
                return "PUT";

            if (value == MethodEnum.PATCH)
                return "PATCH";

            if (value == MethodEnum.HEAD)
                return "HEAD";

            if (value == MethodEnum.OPTIONS)
                return "OPTIONS";

            if (value == MethodEnum.TRACE)
                return "TRACE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [JsonPropertyName("method")]
        public MethodEnum Method { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [JsonPropertyName("headers")]
        public Dictionary<string, string> Headers { get; set; }

        /// <summary>
        /// Used to track the state of Payload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayloadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [JsonPropertyName("payload")]
        public string Payload { get { return this.PayloadOption; } set { this.PayloadOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookTestRequest {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookTestRequest" />
    /// </summary>
    public class WebhookTestRequestJsonConverter : JsonConverter<WebhookTestRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebhookTestRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookTestRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> url = default;
            Option<WebhookTestRequest.MethodEnum?> method = default;
            Option<Dictionary<string, string>> headers = default;
            Option<string> payload = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "method":
                            string methodRawValue = utf8JsonReader.GetString();
                            if (methodRawValue != null)
                                method = new Option<WebhookTestRequest.MethodEnum?>(WebhookTestRequest.MethodEnumFromStringOrDefault(methodRawValue));
                            break;
                        case "headers":
                            headers = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payload":
                            payload = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class WebhookTestRequest.", nameof(url));

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class WebhookTestRequest.", nameof(method));

            if (!headers.IsSet)
                throw new ArgumentException("Property is required for class WebhookTestRequest.", nameof(headers));

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class WebhookTestRequest.");

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class WebhookTestRequest.");

            if (headers.IsSet && headers.Value == null)
                throw new ArgumentNullException(nameof(headers), "Property is not nullable for class WebhookTestRequest.");

            return new WebhookTestRequest(url.Value, method.Value.Value, headers.Value, payload);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookTestRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookTestRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookTestRequest webhookTestRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookTestRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookTestRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookTestRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookTestRequest webhookTestRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookTestRequest.Url == null)
                throw new ArgumentNullException(nameof(webhookTestRequest.Url), "Property is required for class WebhookTestRequest.");

            if (webhookTestRequest.Headers == null)
                throw new ArgumentNullException(nameof(webhookTestRequest.Headers), "Property is required for class WebhookTestRequest.");

            writer.WriteString("url", webhookTestRequest.Url);

            var methodRawValue = WebhookTestRequest.MethodEnumToJsonValue(webhookTestRequest.Method);
            writer.WriteString("method", methodRawValue);
            writer.WritePropertyName("headers");
            JsonSerializer.Serialize(writer, webhookTestRequest.Headers, jsonSerializerOptions);
            if (webhookTestRequest.PayloadOption.IsSet)
                if (webhookTestRequest.PayloadOption.Value != null)
                    writer.WriteString("payload", webhookTestRequest.Payload);
                else
                    writer.WriteNull("payload");
        }
    }
}
