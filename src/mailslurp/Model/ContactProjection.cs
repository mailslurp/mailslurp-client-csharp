// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Email contact for address book
    /// </summary>
    public partial class ContactProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactProjection" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="emailAddress">emailAddress</param>
        /// <param name="emailAddresses">emailAddresses</param>
        /// <param name="firstName">firstName</param>
        /// <param name="lastName">lastName</param>
        /// <param name="company">company</param>
        /// <param name="optOut">optOut</param>
        /// <param name="groupId">groupId</param>
        [JsonConstructor]
        public ContactProjection(DateTime createdAt, Guid id, Option<string> emailAddress = default, Option<List<string>> emailAddresses = default, Option<string> firstName = default, Option<string> lastName = default, Option<string> company = default, Option<bool?> optOut = default, Option<Guid?> groupId = default)
        {
            CreatedAt = createdAt;
            Id = id;
            EmailAddressOption = emailAddress;
            EmailAddressesOption = emailAddresses;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            CompanyOption = company;
            OptOutOption = optOut;
            GroupIdOption = groupId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of EmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get { return this.EmailAddressOption; } set { this.EmailAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EmailAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> EmailAddressesOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailAddresses
        /// </summary>
        [JsonPropertyName("emailAddresses")]
        public List<string> EmailAddresses { get { return this.EmailAddressesOption; } set { this.EmailAddressesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FirstNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("firstName")]
        public string FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [JsonPropertyName("lastName")]
        public string LastName { get { return this.LastNameOption; } set { this.LastNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [JsonPropertyName("company")]
        public string Company { get { return this.CompanyOption; } set { this.CompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OptOut
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OptOutOption { get; private set; }

        /// <summary>
        /// Gets or Sets OptOut
        /// </summary>
        [JsonPropertyName("optOut")]
        public bool? OptOut { get { return this.OptOutOption; } set { this.OptOutOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of GroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> GroupIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [JsonPropertyName("groupId")]
        public Guid? GroupId { get { return this.GroupIdOption; } set { this.GroupIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactProjection {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  OptOut: ").Append(OptOut).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ContactProjection" />
    /// </summary>
    public class ContactProjectionJsonConverter : JsonConverter<ContactProjection>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ContactProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContactProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<Guid?> id = default;
            Option<string> emailAddress = default;
            Option<List<string>> emailAddresses = default;
            Option<string> firstName = default;
            Option<string> lastName = default;
            Option<string> company = default;
            Option<bool?> optOut = default;
            Option<Guid?> groupId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "emailAddresses":
                            emailAddresses = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "firstName":
                            firstName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "lastName":
                            lastName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "company":
                            company = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "optOut":
                            optOut = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "groupId":
                            groupId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class ContactProjection.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ContactProjection.", nameof(id));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ContactProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ContactProjection.");

            return new ContactProjection(createdAt.Value.Value, id.Value.Value, emailAddress, emailAddresses, firstName, lastName, company, optOut, groupId);
        }

        /// <summary>
        /// Serializes a <see cref="ContactProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contactProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContactProjection contactProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, contactProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ContactProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contactProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ContactProjection contactProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("createdAt", contactProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", contactProjection.Id);

            if (contactProjection.EmailAddressOption.IsSet)
                if (contactProjection.EmailAddressOption.Value != null)
                    writer.WriteString("emailAddress", contactProjection.EmailAddress);
                else
                    writer.WriteNull("emailAddress");

            if (contactProjection.EmailAddressesOption.IsSet)
                if (contactProjection.EmailAddressesOption.Value != null)
                {
                    writer.WritePropertyName("emailAddresses");
                    JsonSerializer.Serialize(writer, contactProjection.EmailAddresses, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("emailAddresses");
            if (contactProjection.FirstNameOption.IsSet)
                if (contactProjection.FirstNameOption.Value != null)
                    writer.WriteString("firstName", contactProjection.FirstName);
                else
                    writer.WriteNull("firstName");

            if (contactProjection.LastNameOption.IsSet)
                if (contactProjection.LastNameOption.Value != null)
                    writer.WriteString("lastName", contactProjection.LastName);
                else
                    writer.WriteNull("lastName");

            if (contactProjection.CompanyOption.IsSet)
                if (contactProjection.CompanyOption.Value != null)
                    writer.WriteString("company", contactProjection.Company);
                else
                    writer.WriteNull("company");

            if (contactProjection.OptOutOption.IsSet)
                if (contactProjection.OptOutOption.Value != null)
                    writer.WriteBoolean("optOut", contactProjection.OptOutOption.Value.Value);
                else
                    writer.WriteNull("optOut");

            if (contactProjection.GroupIdOption.IsSet)
                if (contactProjection.GroupIdOption.Value != null)
                    writer.WriteString("groupId", contactProjection.GroupIdOption.Value.Value);
                else
                    writer.WriteNull("groupId");
        }
    }
}
