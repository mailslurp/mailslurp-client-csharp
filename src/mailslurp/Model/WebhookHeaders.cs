// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Webhook HTTP headers to include with each request from MailSlurp to your server
    /// </summary>
    public partial class WebhookHeaders : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookHeaders" /> class.
        /// </summary>
        /// <param name="headers">List of header name value pairs to include with webhook requests</param>
        [JsonConstructor]
        public WebhookHeaders(List<WebhookHeaderNameValue> headers)
        {
            Headers = headers;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// List of header name value pairs to include with webhook requests
        /// </summary>
        /// <value>List of header name value pairs to include with webhook requests</value>
        [JsonPropertyName("headers")]
        public List<WebhookHeaderNameValue> Headers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookHeaders {\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookHeaders" />
    /// </summary>
    public class WebhookHeadersJsonConverter : JsonConverter<WebhookHeaders>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebhookHeaders" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookHeaders Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<WebhookHeaderNameValue>> headers = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "headers":
                            headers = new Option<List<WebhookHeaderNameValue>>(JsonSerializer.Deserialize<List<WebhookHeaderNameValue>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!headers.IsSet)
                throw new ArgumentException("Property is required for class WebhookHeaders.", nameof(headers));

            if (headers.IsSet && headers.Value == null)
                throw new ArgumentNullException(nameof(headers), "Property is not nullable for class WebhookHeaders.");

            return new WebhookHeaders(headers.Value);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookHeaders" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookHeaders"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookHeaders webhookHeaders, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookHeaders, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookHeaders" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookHeaders"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookHeaders webhookHeaders, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookHeaders.Headers == null)
                throw new ArgumentNullException(nameof(webhookHeaders.Headers), "Property is required for class WebhookHeaders.");

            writer.WritePropertyName("headers");
            JsonSerializer.Serialize(writer, webhookHeaders.Headers, jsonSerializerOptions);
        }
    }
}
