/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Email verification result. Valid means email address exists according to response from mail server running at the domain and port given.
    /// </summary>
    [DataContract(Name = "EmailVerificationResult")]
    public partial class EmailVerificationResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailVerificationResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailVerificationResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailVerificationResult" /> class.
        /// </summary>
        /// <param name="domainName">domainName (required).</param>
        /// <param name="port">port (required).</param>
        /// <param name="emailAddress">emailAddress (required).</param>
        /// <param name="isValid">isValid (required).</param>
        /// <param name="error">error.</param>
        public EmailVerificationResult(string domainName = default, int port = default, string emailAddress = default, bool isValid = default, string error = default)
        {
            // to ensure "domainName" is required (not null)
            if (domainName == null)
            {
                throw new ArgumentNullException("domainName is a required property for EmailVerificationResult and cannot be null");
            }
            this.DomainName = domainName;
            this.Port = port;
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new ArgumentNullException("emailAddress is a required property for EmailVerificationResult and cannot be null");
            }
            this.EmailAddress = emailAddress;
            this.IsValid = isValid;
            this.Error = error;
        }

        /// <summary>
        /// Gets or Sets DomainName
        /// </summary>
        [DataMember(Name = "domainName", IsRequired = true, EmitDefaultValue = true)]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", IsRequired = true, EmitDefaultValue = true)]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "emailAddress", IsRequired = true, EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name = "isValid", IsRequired = true, EmitDefaultValue = true)]
        public bool IsValid { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailVerificationResult {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
