// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Email verification result. Valid means email address exists according to response from mail server running at the domain and port given.
    /// </summary>
    public partial class EmailVerificationResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailVerificationResult" /> class.
        /// </summary>
        /// <param name="domainName">domainName</param>
        /// <param name="port">port</param>
        /// <param name="emailAddress">emailAddress</param>
        /// <param name="isValid">isValid</param>
        /// <param name="error">error</param>
        [JsonConstructor]
        public EmailVerificationResult(string domainName, int port, string emailAddress, bool isValid, Option<string> error = default)
        {
            DomainName = domainName;
            Port = port;
            EmailAddress = emailAddress;
            IsValid = isValid;
            ErrorOption = error;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DomainName
        /// </summary>
        [JsonPropertyName("domainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [JsonPropertyName("port")]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [JsonPropertyName("isValid")]
        public bool IsValid { get; set; }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public string Error { get { return this.ErrorOption; } set { this.ErrorOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailVerificationResult {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailVerificationResult" />
    /// </summary>
    public class EmailVerificationResultJsonConverter : JsonConverter<EmailVerificationResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailVerificationResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailVerificationResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> domainName = default;
            Option<int?> port = default;
            Option<string> emailAddress = default;
            Option<bool?> isValid = default;
            Option<string> error = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domainName":
                            domainName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "port":
                            port = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isValid":
                            isValid = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "error":
                            error = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!domainName.IsSet)
                throw new ArgumentException("Property is required for class EmailVerificationResult.", nameof(domainName));

            if (!port.IsSet)
                throw new ArgumentException("Property is required for class EmailVerificationResult.", nameof(port));

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class EmailVerificationResult.", nameof(emailAddress));

            if (!isValid.IsSet)
                throw new ArgumentException("Property is required for class EmailVerificationResult.", nameof(isValid));

            if (domainName.IsSet && domainName.Value == null)
                throw new ArgumentNullException(nameof(domainName), "Property is not nullable for class EmailVerificationResult.");

            if (port.IsSet && port.Value == null)
                throw new ArgumentNullException(nameof(port), "Property is not nullable for class EmailVerificationResult.");

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class EmailVerificationResult.");

            if (isValid.IsSet && isValid.Value == null)
                throw new ArgumentNullException(nameof(isValid), "Property is not nullable for class EmailVerificationResult.");

            return new EmailVerificationResult(domainName.Value, port.Value.Value, emailAddress.Value, isValid.Value.Value, error);
        }

        /// <summary>
        /// Serializes a <see cref="EmailVerificationResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailVerificationResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailVerificationResult emailVerificationResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailVerificationResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailVerificationResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailVerificationResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailVerificationResult emailVerificationResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailVerificationResult.DomainName == null)
                throw new ArgumentNullException(nameof(emailVerificationResult.DomainName), "Property is required for class EmailVerificationResult.");

            if (emailVerificationResult.EmailAddress == null)
                throw new ArgumentNullException(nameof(emailVerificationResult.EmailAddress), "Property is required for class EmailVerificationResult.");

            writer.WriteString("domainName", emailVerificationResult.DomainName);

            writer.WriteNumber("port", emailVerificationResult.Port);

            writer.WriteString("emailAddress", emailVerificationResult.EmailAddress);

            writer.WriteBoolean("isValid", emailVerificationResult.IsValid);

            if (emailVerificationResult.ErrorOption.IsSet)
                if (emailVerificationResult.ErrorOption.Value != null)
                    writer.WriteString("error", emailVerificationResult.Error);
                else
                    writer.WriteNull("error");
        }
    }
}
