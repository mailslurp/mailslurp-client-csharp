// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// SpellingIssue
    /// </summary>
    public partial class SpellingIssue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpellingIssue" /> class.
        /// </summary>
        /// <param name="group">group</param>
        /// <param name="suggestion">suggestion</param>
        /// <param name="severity">severity</param>
        /// <param name="message">message</param>
        [JsonConstructor]
        public SpellingIssue(string group, string suggestion, SeverityEnum severity, string message)
        {
            Group = group;
            Suggestion = suggestion;
            Severity = severity;
            Message = message;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Severity
        /// </summary>
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum Warning for value: Warning
            /// </summary>
            Warning = 1,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            Error = 2
        }

        /// <summary>
        /// Returns a <see cref="SeverityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SeverityEnum SeverityEnumFromString(string value)
        {
            if (value.Equals("Warning"))
                return SeverityEnum.Warning;

            if (value.Equals("Error"))
                return SeverityEnum.Error;

            throw new NotImplementedException($"Could not convert value to type SeverityEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SeverityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SeverityEnum? SeverityEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Warning"))
                return SeverityEnum.Warning;

            if (value.Equals("Error"))
                return SeverityEnum.Error;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SeverityEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SeverityEnumToJsonValue(SeverityEnum value)
        {
            if (value == SeverityEnum.Warning)
                return "Warning";

            if (value == SeverityEnum.Error)
                return "Error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [JsonPropertyName("severity")]
        public SeverityEnum Severity { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [JsonPropertyName("group")]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets Suggestion
        /// </summary>
        [JsonPropertyName("suggestion")]
        public string Suggestion { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpellingIssue {\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Suggestion: ").Append(Suggestion).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SpellingIssue" />
    /// </summary>
    public class SpellingIssueJsonConverter : JsonConverter<SpellingIssue>
    {
        /// <summary>
        /// Deserializes json to <see cref="SpellingIssue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SpellingIssue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> group = default;
            Option<string> suggestion = default;
            Option<SpellingIssue.SeverityEnum?> severity = default;
            Option<string> message = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "group":
                            group = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "suggestion":
                            suggestion = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "severity":
                            string severityRawValue = utf8JsonReader.GetString();
                            if (severityRawValue != null)
                                severity = new Option<SpellingIssue.SeverityEnum?>(SpellingIssue.SeverityEnumFromStringOrDefault(severityRawValue));
                            break;
                        case "message":
                            message = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!group.IsSet)
                throw new ArgumentException("Property is required for class SpellingIssue.", nameof(group));

            if (!suggestion.IsSet)
                throw new ArgumentException("Property is required for class SpellingIssue.", nameof(suggestion));

            if (!severity.IsSet)
                throw new ArgumentException("Property is required for class SpellingIssue.", nameof(severity));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class SpellingIssue.", nameof(message));

            if (group.IsSet && group.Value == null)
                throw new ArgumentNullException(nameof(group), "Property is not nullable for class SpellingIssue.");

            if (suggestion.IsSet && suggestion.Value == null)
                throw new ArgumentNullException(nameof(suggestion), "Property is not nullable for class SpellingIssue.");

            if (severity.IsSet && severity.Value == null)
                throw new ArgumentNullException(nameof(severity), "Property is not nullable for class SpellingIssue.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class SpellingIssue.");

            return new SpellingIssue(group.Value, suggestion.Value, severity.Value.Value, message.Value);
        }

        /// <summary>
        /// Serializes a <see cref="SpellingIssue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="spellingIssue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SpellingIssue spellingIssue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, spellingIssue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SpellingIssue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="spellingIssue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SpellingIssue spellingIssue, JsonSerializerOptions jsonSerializerOptions)
        {
            if (spellingIssue.Group == null)
                throw new ArgumentNullException(nameof(spellingIssue.Group), "Property is required for class SpellingIssue.");

            if (spellingIssue.Suggestion == null)
                throw new ArgumentNullException(nameof(spellingIssue.Suggestion), "Property is required for class SpellingIssue.");

            if (spellingIssue.Message == null)
                throw new ArgumentNullException(nameof(spellingIssue.Message), "Property is required for class SpellingIssue.");

            writer.WriteString("group", spellingIssue.Group);

            writer.WriteString("suggestion", spellingIssue.Suggestion);

            var severityRawValue = SpellingIssue.SeverityEnumToJsonValue(spellingIssue.Severity);
            writer.WriteString("severity", severityRawValue);
            writer.WriteString("message", spellingIssue.Message);
        }
    }
}
