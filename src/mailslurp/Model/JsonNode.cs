/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: d1659dc1567a5b62f65d0612107a50aace03e085
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// JsonNode
    /// </summary>
    [DataContract]
    public partial class JsonNode :  IEquatable<JsonNode>
    {
        /// <summary>
        /// Defines NodeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NodeTypeEnum
        {
            /// <summary>
            /// Enum ARRAY for value: ARRAY
            /// </summary>
            [EnumMember(Value = "ARRAY")]
            ARRAY = 1,

            /// <summary>
            /// Enum BINARY for value: BINARY
            /// </summary>
            [EnumMember(Value = "BINARY")]
            BINARY = 2,

            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 3,

            /// <summary>
            /// Enum MISSING for value: MISSING
            /// </summary>
            [EnumMember(Value = "MISSING")]
            MISSING = 4,

            /// <summary>
            /// Enum NULL for value: NULL
            /// </summary>
            [EnumMember(Value = "NULL")]
            NULL = 5,

            /// <summary>
            /// Enum NUMBER for value: NUMBER
            /// </summary>
            [EnumMember(Value = "NUMBER")]
            NUMBER = 6,

            /// <summary>
            /// Enum OBJECT for value: OBJECT
            /// </summary>
            [EnumMember(Value = "OBJECT")]
            OBJECT = 7,

            /// <summary>
            /// Enum POJO for value: POJO
            /// </summary>
            [EnumMember(Value = "POJO")]
            POJO = 8,

            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRING = 9

        }

        /// <summary>
        /// Gets or Sets NodeType
        /// </summary>
        [DataMember(Name="nodeType", EmitDefaultValue=false)]
        public NodeTypeEnum? NodeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonNode" /> class.
        /// </summary>
        /// <param name="array">array.</param>
        /// <param name="bigDecimal">bigDecimal.</param>
        /// <param name="bigInteger">bigInteger.</param>
        /// <param name="binary">binary.</param>
        /// <param name="boolean">boolean.</param>
        /// <param name="containerNode">containerNode.</param>
        /// <param name="_double">_double.</param>
        /// <param name="empty">empty.</param>
        /// <param name="_float">_float.</param>
        /// <param name="floatingPointNumber">floatingPointNumber.</param>
        /// <param name="_int">_int.</param>
        /// <param name="integralNumber">integralNumber.</param>
        /// <param name="_long">_long.</param>
        /// <param name="missingNode">missingNode.</param>
        /// <param name="nodeType">nodeType.</param>
        /// <param name="_null">_null.</param>
        /// <param name="number">number.</param>
        /// <param name="_object">_object.</param>
        /// <param name="pojo">pojo.</param>
        /// <param name="_short">_short.</param>
        /// <param name="textual">textual.</param>
        /// <param name="valueNode">valueNode.</param>
        public JsonNode(bool array = default(bool), bool bigDecimal = default(bool), bool bigInteger = default(bool), bool binary = default(bool), bool boolean = default(bool), bool containerNode = default(bool), bool _double = default(bool), bool empty = default(bool), bool _float = default(bool), bool floatingPointNumber = default(bool), bool _int = default(bool), bool integralNumber = default(bool), bool _long = default(bool), bool missingNode = default(bool), NodeTypeEnum? nodeType = default(NodeTypeEnum?), bool _null = default(bool), bool number = default(bool), bool _object = default(bool), bool pojo = default(bool), bool _short = default(bool), bool textual = default(bool), bool valueNode = default(bool))
        {
            this.Array = array;
            this.BigDecimal = bigDecimal;
            this.BigInteger = bigInteger;
            this.Binary = binary;
            this.Boolean = boolean;
            this.ContainerNode = containerNode;
            this.Double = _double;
            this.Empty = empty;
            this.Float = _float;
            this.FloatingPointNumber = floatingPointNumber;
            this.Int = _int;
            this.IntegralNumber = integralNumber;
            this.Long = _long;
            this.MissingNode = missingNode;
            this.NodeType = nodeType;
            this.Null = _null;
            this.Number = number;
            this.Object = _object;
            this.Pojo = pojo;
            this.Short = _short;
            this.Textual = textual;
            this.ValueNode = valueNode;
        }
        
        /// <summary>
        /// Gets or Sets Array
        /// </summary>
        [DataMember(Name="array", EmitDefaultValue=false)]
        public bool Array { get; set; }

        /// <summary>
        /// Gets or Sets BigDecimal
        /// </summary>
        [DataMember(Name="bigDecimal", EmitDefaultValue=false)]
        public bool BigDecimal { get; set; }

        /// <summary>
        /// Gets or Sets BigInteger
        /// </summary>
        [DataMember(Name="bigInteger", EmitDefaultValue=false)]
        public bool BigInteger { get; set; }

        /// <summary>
        /// Gets or Sets Binary
        /// </summary>
        [DataMember(Name="binary", EmitDefaultValue=false)]
        public bool Binary { get; set; }

        /// <summary>
        /// Gets or Sets Boolean
        /// </summary>
        [DataMember(Name="boolean", EmitDefaultValue=false)]
        public bool Boolean { get; set; }

        /// <summary>
        /// Gets or Sets ContainerNode
        /// </summary>
        [DataMember(Name="containerNode", EmitDefaultValue=false)]
        public bool ContainerNode { get; set; }

        /// <summary>
        /// Gets or Sets Double
        /// </summary>
        [DataMember(Name="double", EmitDefaultValue=false)]
        public bool Double { get; set; }

        /// <summary>
        /// Gets or Sets Empty
        /// </summary>
        [DataMember(Name="empty", EmitDefaultValue=false)]
        public bool Empty { get; set; }

        /// <summary>
        /// Gets or Sets Float
        /// </summary>
        [DataMember(Name="float", EmitDefaultValue=false)]
        public bool Float { get; set; }

        /// <summary>
        /// Gets or Sets FloatingPointNumber
        /// </summary>
        [DataMember(Name="floatingPointNumber", EmitDefaultValue=false)]
        public bool FloatingPointNumber { get; set; }

        /// <summary>
        /// Gets or Sets Int
        /// </summary>
        [DataMember(Name="int", EmitDefaultValue=false)]
        public bool Int { get; set; }

        /// <summary>
        /// Gets or Sets IntegralNumber
        /// </summary>
        [DataMember(Name="integralNumber", EmitDefaultValue=false)]
        public bool IntegralNumber { get; set; }

        /// <summary>
        /// Gets or Sets Long
        /// </summary>
        [DataMember(Name="long", EmitDefaultValue=false)]
        public bool Long { get; set; }

        /// <summary>
        /// Gets or Sets MissingNode
        /// </summary>
        [DataMember(Name="missingNode", EmitDefaultValue=false)]
        public bool MissingNode { get; set; }


        /// <summary>
        /// Gets or Sets Null
        /// </summary>
        [DataMember(Name="null", EmitDefaultValue=false)]
        public bool Null { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public bool Number { get; set; }

        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public bool Object { get; set; }

        /// <summary>
        /// Gets or Sets Pojo
        /// </summary>
        [DataMember(Name="pojo", EmitDefaultValue=false)]
        public bool Pojo { get; set; }

        /// <summary>
        /// Gets or Sets Short
        /// </summary>
        [DataMember(Name="short", EmitDefaultValue=false)]
        public bool Short { get; set; }

        /// <summary>
        /// Gets or Sets Textual
        /// </summary>
        [DataMember(Name="textual", EmitDefaultValue=false)]
        public bool Textual { get; set; }

        /// <summary>
        /// Gets or Sets ValueNode
        /// </summary>
        [DataMember(Name="valueNode", EmitDefaultValue=false)]
        public bool ValueNode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonNode {\n");
            sb.Append("  Array: ").Append(Array).Append("\n");
            sb.Append("  BigDecimal: ").Append(BigDecimal).Append("\n");
            sb.Append("  BigInteger: ").Append(BigInteger).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  Boolean: ").Append(Boolean).Append("\n");
            sb.Append("  ContainerNode: ").Append(ContainerNode).Append("\n");
            sb.Append("  Double: ").Append(Double).Append("\n");
            sb.Append("  Empty: ").Append(Empty).Append("\n");
            sb.Append("  Float: ").Append(Float).Append("\n");
            sb.Append("  FloatingPointNumber: ").Append(FloatingPointNumber).Append("\n");
            sb.Append("  Int: ").Append(Int).Append("\n");
            sb.Append("  IntegralNumber: ").Append(IntegralNumber).Append("\n");
            sb.Append("  Long: ").Append(Long).Append("\n");
            sb.Append("  MissingNode: ").Append(MissingNode).Append("\n");
            sb.Append("  NodeType: ").Append(NodeType).Append("\n");
            sb.Append("  Null: ").Append(Null).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Pojo: ").Append(Pojo).Append("\n");
            sb.Append("  Short: ").Append(Short).Append("\n");
            sb.Append("  Textual: ").Append(Textual).Append("\n");
            sb.Append("  ValueNode: ").Append(ValueNode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonNode);
        }

        /// <summary>
        /// Returns true if JsonNode instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonNode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Array == input.Array ||
                    (this.Array != null &&
                    this.Array.Equals(input.Array))
                ) && 
                (
                    this.BigDecimal == input.BigDecimal ||
                    (this.BigDecimal != null &&
                    this.BigDecimal.Equals(input.BigDecimal))
                ) && 
                (
                    this.BigInteger == input.BigInteger ||
                    (this.BigInteger != null &&
                    this.BigInteger.Equals(input.BigInteger))
                ) && 
                (
                    this.Binary == input.Binary ||
                    (this.Binary != null &&
                    this.Binary.Equals(input.Binary))
                ) && 
                (
                    this.Boolean == input.Boolean ||
                    (this.Boolean != null &&
                    this.Boolean.Equals(input.Boolean))
                ) && 
                (
                    this.ContainerNode == input.ContainerNode ||
                    (this.ContainerNode != null &&
                    this.ContainerNode.Equals(input.ContainerNode))
                ) && 
                (
                    this.Double == input.Double ||
                    (this.Double != null &&
                    this.Double.Equals(input.Double))
                ) && 
                (
                    this.Empty == input.Empty ||
                    (this.Empty != null &&
                    this.Empty.Equals(input.Empty))
                ) && 
                (
                    this.Float == input.Float ||
                    (this.Float != null &&
                    this.Float.Equals(input.Float))
                ) && 
                (
                    this.FloatingPointNumber == input.FloatingPointNumber ||
                    (this.FloatingPointNumber != null &&
                    this.FloatingPointNumber.Equals(input.FloatingPointNumber))
                ) && 
                (
                    this.Int == input.Int ||
                    (this.Int != null &&
                    this.Int.Equals(input.Int))
                ) && 
                (
                    this.IntegralNumber == input.IntegralNumber ||
                    (this.IntegralNumber != null &&
                    this.IntegralNumber.Equals(input.IntegralNumber))
                ) && 
                (
                    this.Long == input.Long ||
                    (this.Long != null &&
                    this.Long.Equals(input.Long))
                ) && 
                (
                    this.MissingNode == input.MissingNode ||
                    (this.MissingNode != null &&
                    this.MissingNode.Equals(input.MissingNode))
                ) && 
                (
                    this.NodeType == input.NodeType ||
                    (this.NodeType != null &&
                    this.NodeType.Equals(input.NodeType))
                ) && 
                (
                    this.Null == input.Null ||
                    (this.Null != null &&
                    this.Null.Equals(input.Null))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.Pojo == input.Pojo ||
                    (this.Pojo != null &&
                    this.Pojo.Equals(input.Pojo))
                ) && 
                (
                    this.Short == input.Short ||
                    (this.Short != null &&
                    this.Short.Equals(input.Short))
                ) && 
                (
                    this.Textual == input.Textual ||
                    (this.Textual != null &&
                    this.Textual.Equals(input.Textual))
                ) && 
                (
                    this.ValueNode == input.ValueNode ||
                    (this.ValueNode != null &&
                    this.ValueNode.Equals(input.ValueNode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Array != null)
                    hashCode = hashCode * 59 + this.Array.GetHashCode();
                if (this.BigDecimal != null)
                    hashCode = hashCode * 59 + this.BigDecimal.GetHashCode();
                if (this.BigInteger != null)
                    hashCode = hashCode * 59 + this.BigInteger.GetHashCode();
                if (this.Binary != null)
                    hashCode = hashCode * 59 + this.Binary.GetHashCode();
                if (this.Boolean != null)
                    hashCode = hashCode * 59 + this.Boolean.GetHashCode();
                if (this.ContainerNode != null)
                    hashCode = hashCode * 59 + this.ContainerNode.GetHashCode();
                if (this.Double != null)
                    hashCode = hashCode * 59 + this.Double.GetHashCode();
                if (this.Empty != null)
                    hashCode = hashCode * 59 + this.Empty.GetHashCode();
                if (this.Float != null)
                    hashCode = hashCode * 59 + this.Float.GetHashCode();
                if (this.FloatingPointNumber != null)
                    hashCode = hashCode * 59 + this.FloatingPointNumber.GetHashCode();
                if (this.Int != null)
                    hashCode = hashCode * 59 + this.Int.GetHashCode();
                if (this.IntegralNumber != null)
                    hashCode = hashCode * 59 + this.IntegralNumber.GetHashCode();
                if (this.Long != null)
                    hashCode = hashCode * 59 + this.Long.GetHashCode();
                if (this.MissingNode != null)
                    hashCode = hashCode * 59 + this.MissingNode.GetHashCode();
                if (this.NodeType != null)
                    hashCode = hashCode * 59 + this.NodeType.GetHashCode();
                if (this.Null != null)
                    hashCode = hashCode * 59 + this.Null.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.Pojo != null)
                    hashCode = hashCode * 59 + this.Pojo.GetHashCode();
                if (this.Short != null)
                    hashCode = hashCode * 59 + this.Short.GetHashCode();
                if (this.Textual != null)
                    hashCode = hashCode * 59 + this.Textual.GetHashCode();
                if (this.ValueNode != null)
                    hashCode = hashCode * 59 + this.ValueNode.GetHashCode();
                return hashCode;
            }
        }
    }

}
