/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// EmailThreadItem
    /// </summary>
    [DataContract(Name = "EmailThreadItem")]
    public partial class EmailThreadItem : IValidatableObject
    {
        /// <summary>
        /// Defines ItemType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ItemTypeEnum
        {
            /// <summary>
            /// Enum RECEIVEDEMAIL for value: RECEIVED_EMAIL
            /// </summary>
            [EnumMember(Value = "RECEIVED_EMAIL")]
            RECEIVEDEMAIL = 1,

            /// <summary>
            /// Enum SENTEMAIL for value: SENT_EMAIL
            /// </summary>
            [EnumMember(Value = "SENT_EMAIL")]
            SENTEMAIL = 2
        }


        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "itemType", IsRequired = true, EmitDefaultValue = true)]
        public ItemTypeEnum ItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailThreadItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailThreadItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailThreadItem" /> class.
        /// </summary>
        /// <param name="itemType">itemType (required).</param>
        /// <param name="entityId">entityId (required).</param>
        /// <param name="bodyExcerpt">bodyExcerpt.</param>
        /// <param name="textExcerpt">textExcerpt.</param>
        /// <param name="subject">subject.</param>
        /// <param name="to">to (required).</param>
        /// <param name="from">from.</param>
        /// <param name="bcc">bcc.</param>
        /// <param name="cc">cc.</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="read">read (required).</param>
        /// <param name="inReplyTo">inReplyTo.</param>
        /// <param name="messageId">messageId.</param>
        /// <param name="threadId">threadId.</param>
        /// <param name="sender">sender.</param>
        /// <param name="recipients">recipients.</param>
        public EmailThreadItem(ItemTypeEnum itemType = default, Guid entityId = default, string bodyExcerpt = default, string textExcerpt = default, string subject = default, List<string> to = default, string from = default, List<string> bcc = default, List<string> cc = default, List<string> attachments = default, DateTime createdAt = default, bool read = default, string inReplyTo = default, string messageId = default, Guid? threadId = default, Sender sender = default, EmailRecipients recipients = default)
        {
            this.ItemType = itemType;
            this.EntityId = entityId;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for EmailThreadItem and cannot be null");
            }
            this.To = to;
            this.CreatedAt = createdAt;
            this.Read = read;
            this.BodyExcerpt = bodyExcerpt;
            this.TextExcerpt = textExcerpt;
            this.Subject = subject;
            this.From = from;
            this.Bcc = bcc;
            this.Cc = cc;
            this.Attachments = attachments;
            this.InReplyTo = inReplyTo;
            this.MessageId = messageId;
            this.ThreadId = threadId;
            this.Sender = sender;
            this.Recipients = recipients;
        }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name = "entityId", IsRequired = true, EmitDefaultValue = true)]
        public Guid EntityId { get; set; }

        /// <summary>
        /// Gets or Sets BodyExcerpt
        /// </summary>
        [DataMember(Name = "bodyExcerpt", EmitDefaultValue = true)]
        public string BodyExcerpt { get; set; }

        /// <summary>
        /// Gets or Sets TextExcerpt
        /// </summary>
        [DataMember(Name = "textExcerpt", EmitDefaultValue = true)]
        public string TextExcerpt { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public List<string> To { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [DataMember(Name = "bcc", EmitDefaultValue = true)]
        public List<string> Bcc { get; set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [DataMember(Name = "cc", EmitDefaultValue = true)]
        public List<string> Cc { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = true)]
        public List<string> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [DataMember(Name = "read", IsRequired = true, EmitDefaultValue = true)]
        public bool Read { get; set; }

        /// <summary>
        /// Gets or Sets InReplyTo
        /// </summary>
        [DataMember(Name = "inReplyTo", EmitDefaultValue = true)]
        public string InReplyTo { get; set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name = "messageId", EmitDefaultValue = true)]
        public string MessageId { get; set; }

        /// <summary>
        /// Gets or Sets ThreadId
        /// </summary>
        [DataMember(Name = "threadId", EmitDefaultValue = true)]
        public Guid? ThreadId { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = true)]
        public Sender Sender { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name = "recipients", EmitDefaultValue = true)]
        public EmailRecipients Recipients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailThreadItem {\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  BodyExcerpt: ").Append(BodyExcerpt).Append("\n");
            sb.Append("  TextExcerpt: ").Append(TextExcerpt).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  InReplyTo: ").Append(InReplyTo).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
