// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EmailThreadItem
    /// </summary>
    public partial class EmailThreadItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailThreadItem" /> class.
        /// </summary>
        /// <param name="itemType">itemType</param>
        /// <param name="entityId">entityId</param>
        /// <param name="to">to</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="read">read</param>
        /// <param name="bodyExcerpt">bodyExcerpt</param>
        /// <param name="textExcerpt">textExcerpt</param>
        /// <param name="subject">subject</param>
        /// <param name="from">from</param>
        /// <param name="bcc">bcc</param>
        /// <param name="cc">cc</param>
        /// <param name="attachments">attachments</param>
        /// <param name="inReplyTo">inReplyTo</param>
        /// <param name="messageId">messageId</param>
        /// <param name="threadId">threadId</param>
        /// <param name="sender">sender</param>
        /// <param name="recipients">recipients</param>
        [JsonConstructor]
        public EmailThreadItem(ItemTypeEnum itemType, Guid entityId, List<string> to, DateTime createdAt, bool read, Option<string> bodyExcerpt = default, Option<string> textExcerpt = default, Option<string> subject = default, Option<string> from = default, Option<List<string>> bcc = default, Option<List<string>> cc = default, Option<List<string>> attachments = default, Option<string> inReplyTo = default, Option<string> messageId = default, Option<Guid?> threadId = default, Option<Sender> sender = default, Option<EmailRecipients> recipients = default)
        {
            ItemType = itemType;
            EntityId = entityId;
            To = to;
            CreatedAt = createdAt;
            Read = read;
            BodyExcerptOption = bodyExcerpt;
            TextExcerptOption = textExcerpt;
            SubjectOption = subject;
            FromOption = from;
            BccOption = bcc;
            CcOption = cc;
            AttachmentsOption = attachments;
            InReplyToOption = inReplyTo;
            MessageIdOption = messageId;
            ThreadIdOption = threadId;
            SenderOption = sender;
            RecipientsOption = recipients;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines ItemType
        /// </summary>
        public enum ItemTypeEnum
        {
            /// <summary>
            /// Enum RECEIVEDEMAIL for value: RECEIVED_EMAIL
            /// </summary>
            RECEIVEDEMAIL = 1,

            /// <summary>
            /// Enum SENTEMAIL for value: SENT_EMAIL
            /// </summary>
            SENTEMAIL = 2
        }

        /// <summary>
        /// Returns a <see cref="ItemTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ItemTypeEnum ItemTypeEnumFromString(string value)
        {
            if (value.Equals("RECEIVED_EMAIL"))
                return ItemTypeEnum.RECEIVEDEMAIL;

            if (value.Equals("SENT_EMAIL"))
                return ItemTypeEnum.SENTEMAIL;

            throw new NotImplementedException($"Could not convert value to type ItemTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ItemTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ItemTypeEnum? ItemTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("RECEIVED_EMAIL"))
                return ItemTypeEnum.RECEIVEDEMAIL;

            if (value.Equals("SENT_EMAIL"))
                return ItemTypeEnum.SENTEMAIL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ItemTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ItemTypeEnumToJsonValue(ItemTypeEnum value)
        {
            if (value == ItemTypeEnum.RECEIVEDEMAIL)
                return "RECEIVED_EMAIL";

            if (value == ItemTypeEnum.SENTEMAIL)
                return "SENT_EMAIL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [JsonPropertyName("itemType")]
        public ItemTypeEnum ItemType { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [JsonPropertyName("entityId")]
        public Guid EntityId { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [JsonPropertyName("to")]
        public List<string> To { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [JsonPropertyName("read")]
        public bool Read { get; set; }

        /// <summary>
        /// Used to track the state of BodyExcerpt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyExcerptOption { get; private set; }

        /// <summary>
        /// Gets or Sets BodyExcerpt
        /// </summary>
        [JsonPropertyName("bodyExcerpt")]
        public string BodyExcerpt { get { return this.BodyExcerptOption; } set { this.BodyExcerptOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TextExcerpt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TextExcerptOption { get; private set; }

        /// <summary>
        /// Gets or Sets TextExcerpt
        /// </summary>
        [JsonPropertyName("textExcerpt")]
        public string TextExcerpt { get { return this.TextExcerptOption; } set { this.TextExcerptOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BccOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get { return this.BccOption; } set { this.BccOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CcOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [JsonPropertyName("cc")]
        public List<string> Cc { get { return this.CcOption; } set { this.CcOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public List<string> Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of InReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InReplyToOption { get; private set; }

        /// <summary>
        /// Gets or Sets InReplyTo
        /// </summary>
        [JsonPropertyName("inReplyTo")]
        public string InReplyTo { get { return this.InReplyToOption; } set { this.InReplyToOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MessageId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [JsonPropertyName("messageId")]
        public string MessageId { get { return this.MessageIdOption; } set { this.MessageIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ThreadId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ThreadIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreadId
        /// </summary>
        [JsonPropertyName("threadId")]
        public Guid? ThreadId { get { return this.ThreadIdOption; } set { this.ThreadIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Sender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Sender> SenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public Sender Sender { get { return this.SenderOption; } set { this.SenderOption = new Option<Sender>(value); } }

        /// <summary>
        /// Used to track the state of Recipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailRecipients> RecipientsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [JsonPropertyName("recipients")]
        public EmailRecipients Recipients { get { return this.RecipientsOption; } set { this.RecipientsOption = new Option<EmailRecipients>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailThreadItem {\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  BodyExcerpt: ").Append(BodyExcerpt).Append("\n");
            sb.Append("  TextExcerpt: ").Append(TextExcerpt).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  InReplyTo: ").Append(InReplyTo).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailThreadItem" />
    /// </summary>
    public class EmailThreadItemJsonConverter : JsonConverter<EmailThreadItem>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EmailThreadItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailThreadItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EmailThreadItem.ItemTypeEnum?> itemType = default;
            Option<Guid?> entityId = default;
            Option<List<string>> to = default;
            Option<DateTime?> createdAt = default;
            Option<bool?> read = default;
            Option<string> bodyExcerpt = default;
            Option<string> textExcerpt = default;
            Option<string> subject = default;
            Option<string> from = default;
            Option<List<string>> bcc = default;
            Option<List<string>> cc = default;
            Option<List<string>> attachments = default;
            Option<string> inReplyTo = default;
            Option<string> messageId = default;
            Option<Guid?> threadId = default;
            Option<Sender> sender = default;
            Option<EmailRecipients> recipients = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "itemType":
                            string itemTypeRawValue = utf8JsonReader.GetString();
                            if (itemTypeRawValue != null)
                                itemType = new Option<EmailThreadItem.ItemTypeEnum?>(EmailThreadItem.ItemTypeEnumFromStringOrDefault(itemTypeRawValue));
                            break;
                        case "entityId":
                            entityId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "read":
                            read = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "bodyExcerpt":
                            bodyExcerpt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "textExcerpt":
                            textExcerpt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachments":
                            attachments = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "inReplyTo":
                            inReplyTo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "messageId":
                            messageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "threadId":
                            threadId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sender":
                            sender = new Option<Sender>(JsonSerializer.Deserialize<Sender>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recipients":
                            recipients = new Option<EmailRecipients>(JsonSerializer.Deserialize<EmailRecipients>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!itemType.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadItem.", nameof(itemType));

            if (!entityId.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadItem.", nameof(entityId));

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadItem.", nameof(to));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadItem.", nameof(createdAt));

            if (!read.IsSet)
                throw new ArgumentException("Property is required for class EmailThreadItem.", nameof(read));

            if (itemType.IsSet && itemType.Value == null)
                throw new ArgumentNullException(nameof(itemType), "Property is not nullable for class EmailThreadItem.");

            if (entityId.IsSet && entityId.Value == null)
                throw new ArgumentNullException(nameof(entityId), "Property is not nullable for class EmailThreadItem.");

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class EmailThreadItem.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class EmailThreadItem.");

            if (read.IsSet && read.Value == null)
                throw new ArgumentNullException(nameof(read), "Property is not nullable for class EmailThreadItem.");

            return new EmailThreadItem(itemType.Value.Value, entityId.Value.Value, to.Value, createdAt.Value.Value, read.Value.Value, bodyExcerpt, textExcerpt, subject, from, bcc, cc, attachments, inReplyTo, messageId, threadId, sender, recipients);
        }

        /// <summary>
        /// Serializes a <see cref="EmailThreadItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailThreadItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailThreadItem emailThreadItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailThreadItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailThreadItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailThreadItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailThreadItem emailThreadItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailThreadItem.To == null)
                throw new ArgumentNullException(nameof(emailThreadItem.To), "Property is required for class EmailThreadItem.");

            var itemTypeRawValue = EmailThreadItem.ItemTypeEnumToJsonValue(emailThreadItem.ItemType);
            writer.WriteString("itemType", itemTypeRawValue);
            writer.WriteString("entityId", emailThreadItem.EntityId);

            writer.WritePropertyName("to");
            JsonSerializer.Serialize(writer, emailThreadItem.To, jsonSerializerOptions);
            writer.WriteString("createdAt", emailThreadItem.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteBoolean("read", emailThreadItem.Read);

            if (emailThreadItem.BodyExcerptOption.IsSet)
                if (emailThreadItem.BodyExcerptOption.Value != null)
                    writer.WriteString("bodyExcerpt", emailThreadItem.BodyExcerpt);
                else
                    writer.WriteNull("bodyExcerpt");

            if (emailThreadItem.TextExcerptOption.IsSet)
                if (emailThreadItem.TextExcerptOption.Value != null)
                    writer.WriteString("textExcerpt", emailThreadItem.TextExcerpt);
                else
                    writer.WriteNull("textExcerpt");

            if (emailThreadItem.SubjectOption.IsSet)
                if (emailThreadItem.SubjectOption.Value != null)
                    writer.WriteString("subject", emailThreadItem.Subject);
                else
                    writer.WriteNull("subject");

            if (emailThreadItem.FromOption.IsSet)
                if (emailThreadItem.FromOption.Value != null)
                    writer.WriteString("from", emailThreadItem.From);
                else
                    writer.WriteNull("from");

            if (emailThreadItem.BccOption.IsSet)
                if (emailThreadItem.BccOption.Value != null)
                {
                    writer.WritePropertyName("bcc");
                    JsonSerializer.Serialize(writer, emailThreadItem.Bcc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("bcc");
            if (emailThreadItem.CcOption.IsSet)
                if (emailThreadItem.CcOption.Value != null)
                {
                    writer.WritePropertyName("cc");
                    JsonSerializer.Serialize(writer, emailThreadItem.Cc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("cc");
            if (emailThreadItem.AttachmentsOption.IsSet)
                if (emailThreadItem.AttachmentsOption.Value != null)
                {
                    writer.WritePropertyName("attachments");
                    JsonSerializer.Serialize(writer, emailThreadItem.Attachments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachments");
            if (emailThreadItem.InReplyToOption.IsSet)
                if (emailThreadItem.InReplyToOption.Value != null)
                    writer.WriteString("inReplyTo", emailThreadItem.InReplyTo);
                else
                    writer.WriteNull("inReplyTo");

            if (emailThreadItem.MessageIdOption.IsSet)
                if (emailThreadItem.MessageIdOption.Value != null)
                    writer.WriteString("messageId", emailThreadItem.MessageId);
                else
                    writer.WriteNull("messageId");

            if (emailThreadItem.ThreadIdOption.IsSet)
                if (emailThreadItem.ThreadIdOption.Value != null)
                    writer.WriteString("threadId", emailThreadItem.ThreadIdOption.Value.Value);
                else
                    writer.WriteNull("threadId");

            if (emailThreadItem.SenderOption.IsSet)
                if (emailThreadItem.SenderOption.Value != null)
                {
                    writer.WritePropertyName("sender");
                    JsonSerializer.Serialize(writer, emailThreadItem.Sender, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sender");
            if (emailThreadItem.RecipientsOption.IsSet)
                if (emailThreadItem.RecipientsOption.Value != null)
                {
                    writer.WritePropertyName("recipients");
                    JsonSerializer.Serialize(writer, emailThreadItem.Recipients, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("recipients");
        }
    }
}
