// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// DeliveryStatusDto
    /// </summary>
    public partial class DeliveryStatusDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryStatusDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="sentId">sentId</param>
        /// <param name="remoteMtaIp">remoteMtaIp</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="reportingMta">reportingMta</param>
        /// <param name="recipients">recipients</param>
        /// <param name="smtpResponse">smtpResponse</param>
        /// <param name="smtpStatusCode">smtpStatusCode</param>
        /// <param name="processingTimeMillis">processingTimeMillis</param>
        /// <param name="received">received</param>
        /// <param name="subject">subject</param>
        [JsonConstructor]
        public DeliveryStatusDto(Guid id, Guid userId, DateTime createdAt, DateTime updatedAt, Option<Guid?> sentId = default, Option<string> remoteMtaIp = default, Option<Guid?> inboxId = default, Option<string> reportingMta = default, Option<List<string>> recipients = default, Option<string> smtpResponse = default, Option<int?> smtpStatusCode = default, Option<long?> processingTimeMillis = default, Option<DateTime?> received = default, Option<string> subject = default)
        {
            Id = id;
            UserId = userId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            SentIdOption = sentId;
            RemoteMtaIpOption = remoteMtaIp;
            InboxIdOption = inboxId;
            ReportingMtaOption = reportingMta;
            RecipientsOption = recipients;
            SmtpResponseOption = smtpResponse;
            SmtpStatusCodeOption = smtpStatusCode;
            ProcessingTimeMillisOption = processingTimeMillis;
            ReceivedOption = received;
            SubjectOption = subject;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of SentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> SentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SentId
        /// </summary>
        [JsonPropertyName("sentId")]
        public Guid? SentId { get { return this.SentIdOption; } set { this.SentIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of RemoteMtaIp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemoteMtaIpOption { get; private set; }

        /// <summary>
        /// Gets or Sets RemoteMtaIp
        /// </summary>
        [JsonPropertyName("remoteMtaIp")]
        public string RemoteMtaIp { get { return this.RemoteMtaIpOption; } set { this.RemoteMtaIpOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of ReportingMta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReportingMtaOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReportingMta
        /// </summary>
        [JsonPropertyName("reportingMta")]
        public string ReportingMta { get { return this.ReportingMtaOption; } set { this.ReportingMtaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Recipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> RecipientsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [JsonPropertyName("recipients")]
        public List<string> Recipients { get { return this.RecipientsOption; } set { this.RecipientsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of SmtpResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SmtpResponseOption { get; private set; }

        /// <summary>
        /// Gets or Sets SmtpResponse
        /// </summary>
        [JsonPropertyName("smtpResponse")]
        public string SmtpResponse { get { return this.SmtpResponseOption; } set { this.SmtpResponseOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SmtpStatusCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SmtpStatusCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SmtpStatusCode
        /// </summary>
        [JsonPropertyName("smtpStatusCode")]
        public int? SmtpStatusCode { get { return this.SmtpStatusCodeOption; } set { this.SmtpStatusCodeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ProcessingTimeMillis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProcessingTimeMillisOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProcessingTimeMillis
        /// </summary>
        [JsonPropertyName("processingTimeMillis")]
        public long? ProcessingTimeMillis { get { return this.ProcessingTimeMillisOption; } set { this.ProcessingTimeMillisOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Received
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ReceivedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Received
        /// </summary>
        [JsonPropertyName("received")]
        public DateTime? Received { get { return this.ReceivedOption; } set { this.ReceivedOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeliveryStatusDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  SentId: ").Append(SentId).Append("\n");
            sb.Append("  RemoteMtaIp: ").Append(RemoteMtaIp).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  ReportingMta: ").Append(ReportingMta).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  SmtpResponse: ").Append(SmtpResponse).Append("\n");
            sb.Append("  SmtpStatusCode: ").Append(SmtpStatusCode).Append("\n");
            sb.Append("  ProcessingTimeMillis: ").Append(ProcessingTimeMillis).Append("\n");
            sb.Append("  Received: ").Append(Received).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DeliveryStatusDto" />
    /// </summary>
    public class DeliveryStatusDtoJsonConverter : JsonConverter<DeliveryStatusDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Received
        /// </summary>
        public static string ReceivedFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DeliveryStatusDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DeliveryStatusDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<Guid?> sentId = default;
            Option<string> remoteMtaIp = default;
            Option<Guid?> inboxId = default;
            Option<string> reportingMta = default;
            Option<List<string>> recipients = default;
            Option<string> smtpResponse = default;
            Option<int?> smtpStatusCode = default;
            Option<long?> processingTimeMillis = default;
            Option<DateTime?> received = default;
            Option<string> subject = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sentId":
                            sentId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "remoteMtaIp":
                            remoteMtaIp = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "reportingMta":
                            reportingMta = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recipients":
                            recipients = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "smtpResponse":
                            smtpResponse = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "smtpStatusCode":
                            smtpStatusCode = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "processingTimeMillis":
                            processingTimeMillis = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "received":
                            received = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class DeliveryStatusDto.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class DeliveryStatusDto.", nameof(userId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class DeliveryStatusDto.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class DeliveryStatusDto.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DeliveryStatusDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class DeliveryStatusDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DeliveryStatusDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class DeliveryStatusDto.");

            if (sentId.IsSet && sentId.Value == null)
                throw new ArgumentNullException(nameof(sentId), "Property is not nullable for class DeliveryStatusDto.");

            if (remoteMtaIp.IsSet && remoteMtaIp.Value == null)
                throw new ArgumentNullException(nameof(remoteMtaIp), "Property is not nullable for class DeliveryStatusDto.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class DeliveryStatusDto.");

            if (reportingMta.IsSet && reportingMta.Value == null)
                throw new ArgumentNullException(nameof(reportingMta), "Property is not nullable for class DeliveryStatusDto.");

            if (recipients.IsSet && recipients.Value == null)
                throw new ArgumentNullException(nameof(recipients), "Property is not nullable for class DeliveryStatusDto.");

            if (smtpResponse.IsSet && smtpResponse.Value == null)
                throw new ArgumentNullException(nameof(smtpResponse), "Property is not nullable for class DeliveryStatusDto.");

            if (smtpStatusCode.IsSet && smtpStatusCode.Value == null)
                throw new ArgumentNullException(nameof(smtpStatusCode), "Property is not nullable for class DeliveryStatusDto.");

            if (processingTimeMillis.IsSet && processingTimeMillis.Value == null)
                throw new ArgumentNullException(nameof(processingTimeMillis), "Property is not nullable for class DeliveryStatusDto.");

            if (received.IsSet && received.Value == null)
                throw new ArgumentNullException(nameof(received), "Property is not nullable for class DeliveryStatusDto.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class DeliveryStatusDto.");

            return new DeliveryStatusDto(id.Value.Value, userId.Value.Value, createdAt.Value.Value, updatedAt.Value.Value, sentId, remoteMtaIp, inboxId, reportingMta, recipients, smtpResponse, smtpStatusCode, processingTimeMillis, received, subject);
        }

        /// <summary>
        /// Serializes a <see cref="DeliveryStatusDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deliveryStatusDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DeliveryStatusDto deliveryStatusDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, deliveryStatusDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DeliveryStatusDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deliveryStatusDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DeliveryStatusDto deliveryStatusDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (deliveryStatusDto.RemoteMtaIpOption.IsSet && deliveryStatusDto.RemoteMtaIp == null)
                throw new ArgumentNullException(nameof(deliveryStatusDto.RemoteMtaIp), "Property is required for class DeliveryStatusDto.");

            if (deliveryStatusDto.ReportingMtaOption.IsSet && deliveryStatusDto.ReportingMta == null)
                throw new ArgumentNullException(nameof(deliveryStatusDto.ReportingMta), "Property is required for class DeliveryStatusDto.");

            if (deliveryStatusDto.RecipientsOption.IsSet && deliveryStatusDto.Recipients == null)
                throw new ArgumentNullException(nameof(deliveryStatusDto.Recipients), "Property is required for class DeliveryStatusDto.");

            if (deliveryStatusDto.SmtpResponseOption.IsSet && deliveryStatusDto.SmtpResponse == null)
                throw new ArgumentNullException(nameof(deliveryStatusDto.SmtpResponse), "Property is required for class DeliveryStatusDto.");

            if (deliveryStatusDto.SubjectOption.IsSet && deliveryStatusDto.Subject == null)
                throw new ArgumentNullException(nameof(deliveryStatusDto.Subject), "Property is required for class DeliveryStatusDto.");

            writer.WriteString("id", deliveryStatusDto.Id);

            writer.WriteString("userId", deliveryStatusDto.UserId);

            writer.WriteString("createdAt", deliveryStatusDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", deliveryStatusDto.UpdatedAt.ToString(UpdatedAtFormat));

            if (deliveryStatusDto.SentIdOption.IsSet)
                writer.WriteString("sentId", deliveryStatusDto.SentIdOption.Value.Value);

            if (deliveryStatusDto.RemoteMtaIpOption.IsSet)
                writer.WriteString("remoteMtaIp", deliveryStatusDto.RemoteMtaIp);

            if (deliveryStatusDto.InboxIdOption.IsSet)
                writer.WriteString("inboxId", deliveryStatusDto.InboxIdOption.Value.Value);

            if (deliveryStatusDto.ReportingMtaOption.IsSet)
                writer.WriteString("reportingMta", deliveryStatusDto.ReportingMta);

            if (deliveryStatusDto.RecipientsOption.IsSet)
            {
                writer.WritePropertyName("recipients");
                JsonSerializer.Serialize(writer, deliveryStatusDto.Recipients, jsonSerializerOptions);
            }
            if (deliveryStatusDto.SmtpResponseOption.IsSet)
                writer.WriteString("smtpResponse", deliveryStatusDto.SmtpResponse);

            if (deliveryStatusDto.SmtpStatusCodeOption.IsSet)
                writer.WriteNumber("smtpStatusCode", deliveryStatusDto.SmtpStatusCodeOption.Value.Value);

            if (deliveryStatusDto.ProcessingTimeMillisOption.IsSet)
                writer.WriteNumber("processingTimeMillis", deliveryStatusDto.ProcessingTimeMillisOption.Value.Value);

            if (deliveryStatusDto.ReceivedOption.IsSet)
                writer.WriteString("received", deliveryStatusDto.ReceivedOption.Value.Value.ToString(ReceivedFormat));

            if (deliveryStatusDto.SubjectOption.IsSet)
                writer.WriteString("subject", deliveryStatusDto.Subject);
        }
    }
}
