/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// DeliveryStatusDto
    /// </summary>
    [DataContract(Name = "DeliveryStatusDto")]
    public partial class DeliveryStatusDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryStatusDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeliveryStatusDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryStatusDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="sentId">sentId.</param>
        /// <param name="remoteMtaIp">remoteMtaIp.</param>
        /// <param name="inboxId">inboxId.</param>
        /// <param name="reportingMta">reportingMta.</param>
        /// <param name="recipients">recipients.</param>
        /// <param name="smtpResponse">smtpResponse.</param>
        /// <param name="smtpStatusCode">smtpStatusCode.</param>
        /// <param name="processingTimeMillis">processingTimeMillis.</param>
        /// <param name="received">received.</param>
        /// <param name="subject">subject.</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public DeliveryStatusDto(Guid id = default, Guid userId = default, Guid sentId = default, string remoteMtaIp = default, Guid inboxId = default, string reportingMta = default, List<string> recipients = default, string smtpResponse = default, int smtpStatusCode = default, long processingTimeMillis = default, DateTime received = default, string subject = default, DateTime createdAt = default, DateTime updatedAt = default)
        {
            this.Id = id;
            this.UserId = userId;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.SentId = sentId;
            this.RemoteMtaIp = remoteMtaIp;
            this.InboxId = inboxId;
            this.ReportingMta = reportingMta;
            this.Recipients = recipients;
            this.SmtpResponse = smtpResponse;
            this.SmtpStatusCode = smtpStatusCode;
            this.ProcessingTimeMillis = processingTimeMillis;
            this.Received = received;
            this.Subject = subject;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets SentId
        /// </summary>
        [DataMember(Name = "sentId", EmitDefaultValue = false)]
        public Guid SentId { get; set; }

        /// <summary>
        /// Gets or Sets RemoteMtaIp
        /// </summary>
        [DataMember(Name = "remoteMtaIp", EmitDefaultValue = false)]
        public string RemoteMtaIp { get; set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [DataMember(Name = "inboxId", EmitDefaultValue = false)]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets ReportingMta
        /// </summary>
        [DataMember(Name = "reportingMta", EmitDefaultValue = false)]
        public string ReportingMta { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name = "recipients", EmitDefaultValue = false)]
        public List<string> Recipients { get; set; }

        /// <summary>
        /// Gets or Sets SmtpResponse
        /// </summary>
        [DataMember(Name = "smtpResponse", EmitDefaultValue = false)]
        public string SmtpResponse { get; set; }

        /// <summary>
        /// Gets or Sets SmtpStatusCode
        /// </summary>
        [DataMember(Name = "smtpStatusCode", EmitDefaultValue = false)]
        public int SmtpStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingTimeMillis
        /// </summary>
        [DataMember(Name = "processingTimeMillis", EmitDefaultValue = false)]
        public long ProcessingTimeMillis { get; set; }

        /// <summary>
        /// Gets or Sets Received
        /// </summary>
        [DataMember(Name = "received", EmitDefaultValue = false)]
        public DateTime Received { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeliveryStatusDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  SentId: ").Append(SentId).Append("\n");
            sb.Append("  RemoteMtaIp: ").Append(RemoteMtaIp).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  ReportingMta: ").Append(ReportingMta).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  SmtpResponse: ").Append(SmtpResponse).Append("\n");
            sb.Append("  SmtpStatusCode: ").Append(SmtpStatusCode).Append("\n");
            sb.Append("  ProcessingTimeMillis: ").Append(ProcessingTimeMillis).Append("\n");
            sb.Append("  Received: ").Append(Received).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
