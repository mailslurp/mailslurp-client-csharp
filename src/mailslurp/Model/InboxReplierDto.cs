// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Inbox replier. Will automatically reply to inbound emails that match given field for an inbox.
    /// </summary>
    public partial class InboxReplierDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboxReplierDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="field">field</param>
        /// <param name="match">match</param>
        /// <param name="isHTML">isHTML</param>
        /// <param name="ignoreReplyTo">ignoreReplyTo</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="name">name</param>
        /// <param name="replyTo">replyTo</param>
        /// <param name="subject">subject</param>
        /// <param name="from">from</param>
        /// <param name="charset">charset</param>
        /// <param name="templateId">templateId</param>
        /// <param name="templateVariables">templateVariables</param>
        [JsonConstructor]
        public InboxReplierDto(Guid id, FieldEnum field, string match, bool isHTML, bool ignoreReplyTo, DateTime createdAt, Option<Guid?> inboxId = default, Option<string> name = default, Option<string> replyTo = default, Option<string> subject = default, Option<string> from = default, Option<string> charset = default, Option<Guid?> templateId = default, Option<Dictionary<string, Object>> templateVariables = default)
        {
            Id = id;
            Field = field;
            Match = match;
            IsHTML = isHTML;
            IgnoreReplyTo = ignoreReplyTo;
            CreatedAt = createdAt;
            InboxIdOption = inboxId;
            NameOption = name;
            ReplyToOption = replyTo;
            SubjectOption = subject;
            FromOption = from;
            CharsetOption = charset;
            TemplateIdOption = templateId;
            TemplateVariablesOption = templateVariables;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Field
        /// </summary>
        public enum FieldEnum
        {
            /// <summary>
            /// Enum RECIPIENTS for value: RECIPIENTS
            /// </summary>
            RECIPIENTS = 1,

            /// <summary>
            /// Enum SENDER for value: SENDER
            /// </summary>
            SENDER = 2,

            /// <summary>
            /// Enum SUBJECT for value: SUBJECT
            /// </summary>
            SUBJECT = 3,

            /// <summary>
            /// Enum ATTACHMENTS for value: ATTACHMENTS
            /// </summary>
            ATTACHMENTS = 4
        }

        /// <summary>
        /// Returns a <see cref="FieldEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FieldEnum FieldEnumFromString(string value)
        {
            if (value.Equals("RECIPIENTS"))
                return FieldEnum.RECIPIENTS;

            if (value.Equals("SENDER"))
                return FieldEnum.SENDER;

            if (value.Equals("SUBJECT"))
                return FieldEnum.SUBJECT;

            if (value.Equals("ATTACHMENTS"))
                return FieldEnum.ATTACHMENTS;

            throw new NotImplementedException($"Could not convert value to type FieldEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FieldEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FieldEnum? FieldEnumFromStringOrDefault(string value)
        {
            if (value.Equals("RECIPIENTS"))
                return FieldEnum.RECIPIENTS;

            if (value.Equals("SENDER"))
                return FieldEnum.SENDER;

            if (value.Equals("SUBJECT"))
                return FieldEnum.SUBJECT;

            if (value.Equals("ATTACHMENTS"))
                return FieldEnum.ATTACHMENTS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FieldEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FieldEnumToJsonValue(FieldEnum value)
        {
            if (value == FieldEnum.RECIPIENTS)
                return "RECIPIENTS";

            if (value == FieldEnum.SENDER)
                return "SENDER";

            if (value == FieldEnum.SUBJECT)
                return "SUBJECT";

            if (value == FieldEnum.ATTACHMENTS)
                return "ATTACHMENTS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [JsonPropertyName("field")]
        public FieldEnum Field { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Match
        /// </summary>
        [JsonPropertyName("match")]
        public string Match { get; set; }

        /// <summary>
        /// Gets or Sets IsHTML
        /// </summary>
        [JsonPropertyName("isHTML")]
        public bool IsHTML { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreReplyTo
        /// </summary>
        [JsonPropertyName("ignoreReplyTo")]
        public bool IgnoreReplyTo { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReplyToOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReplyTo
        /// </summary>
        [JsonPropertyName("replyTo")]
        public string ReplyTo { get { return this.ReplyToOption; } set { this.ReplyToOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Charset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CharsetOption { get; private set; }

        /// <summary>
        /// Gets or Sets Charset
        /// </summary>
        [JsonPropertyName("charset")]
        public string Charset { get { return this.CharsetOption; } set { this.CharsetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TemplateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> TemplateIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [JsonPropertyName("templateId")]
        public Guid? TemplateId { get { return this.TemplateIdOption; } set { this.TemplateIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of TemplateVariables
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>> TemplateVariablesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TemplateVariables
        /// </summary>
        [JsonPropertyName("templateVariables")]
        public Dictionary<string, Object> TemplateVariables { get { return this.TemplateVariablesOption; } set { this.TemplateVariablesOption = new Option<Dictionary<string, Object>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboxReplierDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  IsHTML: ").Append(IsHTML).Append("\n");
            sb.Append("  IgnoreReplyTo: ").Append(IgnoreReplyTo).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Charset: ").Append(Charset).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateVariables: ").Append(TemplateVariables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InboxReplierDto" />
    /// </summary>
    public class InboxReplierDtoJsonConverter : JsonConverter<InboxReplierDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="InboxReplierDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InboxReplierDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<InboxReplierDto.FieldEnum?> field = default;
            Option<string> match = default;
            Option<bool?> isHTML = default;
            Option<bool?> ignoreReplyTo = default;
            Option<DateTime?> createdAt = default;
            Option<Guid?> inboxId = default;
            Option<string> name = default;
            Option<string> replyTo = default;
            Option<string> subject = default;
            Option<string> from = default;
            Option<string> charset = default;
            Option<Guid?> templateId = default;
            Option<Dictionary<string, Object>> templateVariables = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "field":
                            string fieldRawValue = utf8JsonReader.GetString();
                            if (fieldRawValue != null)
                                field = new Option<InboxReplierDto.FieldEnum?>(InboxReplierDto.FieldEnumFromStringOrDefault(fieldRawValue));
                            break;
                        case "match":
                            match = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isHTML":
                            isHTML = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ignoreReplyTo":
                            ignoreReplyTo = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "replyTo":
                            replyTo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "charset":
                            charset = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "templateId":
                            templateId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "templateVariables":
                            templateVariables = new Option<Dictionary<string, Object>>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class InboxReplierDto.", nameof(id));

            if (!field.IsSet)
                throw new ArgumentException("Property is required for class InboxReplierDto.", nameof(field));

            if (!match.IsSet)
                throw new ArgumentException("Property is required for class InboxReplierDto.", nameof(match));

            if (!isHTML.IsSet)
                throw new ArgumentException("Property is required for class InboxReplierDto.", nameof(isHTML));

            if (!ignoreReplyTo.IsSet)
                throw new ArgumentException("Property is required for class InboxReplierDto.", nameof(ignoreReplyTo));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class InboxReplierDto.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class InboxReplierDto.");

            if (field.IsSet && field.Value == null)
                throw new ArgumentNullException(nameof(field), "Property is not nullable for class InboxReplierDto.");

            if (match.IsSet && match.Value == null)
                throw new ArgumentNullException(nameof(match), "Property is not nullable for class InboxReplierDto.");

            if (isHTML.IsSet && isHTML.Value == null)
                throw new ArgumentNullException(nameof(isHTML), "Property is not nullable for class InboxReplierDto.");

            if (ignoreReplyTo.IsSet && ignoreReplyTo.Value == null)
                throw new ArgumentNullException(nameof(ignoreReplyTo), "Property is not nullable for class InboxReplierDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class InboxReplierDto.");

            return new InboxReplierDto(id.Value.Value, field.Value.Value, match.Value, isHTML.Value.Value, ignoreReplyTo.Value.Value, createdAt.Value.Value, inboxId, name, replyTo, subject, from, charset, templateId, templateVariables);
        }

        /// <summary>
        /// Serializes a <see cref="InboxReplierDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxReplierDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InboxReplierDto inboxReplierDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, inboxReplierDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InboxReplierDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxReplierDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InboxReplierDto inboxReplierDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (inboxReplierDto.Match == null)
                throw new ArgumentNullException(nameof(inboxReplierDto.Match), "Property is required for class InboxReplierDto.");

            writer.WriteString("id", inboxReplierDto.Id);

            var fieldRawValue = InboxReplierDto.FieldEnumToJsonValue(inboxReplierDto.Field);
            writer.WriteString("field", fieldRawValue);
            writer.WriteString("match", inboxReplierDto.Match);

            writer.WriteBoolean("isHTML", inboxReplierDto.IsHTML);

            writer.WriteBoolean("ignoreReplyTo", inboxReplierDto.IgnoreReplyTo);

            writer.WriteString("createdAt", inboxReplierDto.CreatedAt.ToString(CreatedAtFormat));

            if (inboxReplierDto.InboxIdOption.IsSet)
                if (inboxReplierDto.InboxIdOption.Value != null)
                    writer.WriteString("inboxId", inboxReplierDto.InboxIdOption.Value.Value);
                else
                    writer.WriteNull("inboxId");

            if (inboxReplierDto.NameOption.IsSet)
                if (inboxReplierDto.NameOption.Value != null)
                    writer.WriteString("name", inboxReplierDto.Name);
                else
                    writer.WriteNull("name");

            if (inboxReplierDto.ReplyToOption.IsSet)
                if (inboxReplierDto.ReplyToOption.Value != null)
                    writer.WriteString("replyTo", inboxReplierDto.ReplyTo);
                else
                    writer.WriteNull("replyTo");

            if (inboxReplierDto.SubjectOption.IsSet)
                if (inboxReplierDto.SubjectOption.Value != null)
                    writer.WriteString("subject", inboxReplierDto.Subject);
                else
                    writer.WriteNull("subject");

            if (inboxReplierDto.FromOption.IsSet)
                if (inboxReplierDto.FromOption.Value != null)
                    writer.WriteString("from", inboxReplierDto.From);
                else
                    writer.WriteNull("from");

            if (inboxReplierDto.CharsetOption.IsSet)
                if (inboxReplierDto.CharsetOption.Value != null)
                    writer.WriteString("charset", inboxReplierDto.Charset);
                else
                    writer.WriteNull("charset");

            if (inboxReplierDto.TemplateIdOption.IsSet)
                if (inboxReplierDto.TemplateIdOption.Value != null)
                    writer.WriteString("templateId", inboxReplierDto.TemplateIdOption.Value.Value);
                else
                    writer.WriteNull("templateId");

            if (inboxReplierDto.TemplateVariablesOption.IsSet)
                if (inboxReplierDto.TemplateVariablesOption.Value != null)
                {
                    writer.WritePropertyName("templateVariables");
                    JsonSerializer.Serialize(writer, inboxReplierDto.TemplateVariables, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("templateVariables");
        }
    }
}
