// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Inbox forwarder. Describes how an inbox will forward matching emails to designated recipients.
    /// </summary>
    public partial class InboxForwarderDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="field">Which field to match against</param>
        /// <param name="match">Wild-card type pattern to apply to field</param>
        /// <param name="forwardToRecipients">Who to send forwarded email to</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="name">Name of inbox forwarder</param>
        [JsonConstructor]
        public InboxForwarderDto(Guid id, FieldEnum field, string match, List<string> forwardToRecipients, DateTime createdAt, Option<Guid?> inboxId = default, Option<string> name = default)
        {
            Id = id;
            Field = field;
            Match = match;
            ForwardToRecipients = forwardToRecipients;
            CreatedAt = createdAt;
            InboxIdOption = inboxId;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Which field to match against
        /// </summary>
        /// <value>Which field to match against</value>
        public enum FieldEnum
        {
            /// <summary>
            /// Enum RECIPIENTS for value: RECIPIENTS
            /// </summary>
            RECIPIENTS = 1,

            /// <summary>
            /// Enum SENDER for value: SENDER
            /// </summary>
            SENDER = 2,

            /// <summary>
            /// Enum SUBJECT for value: SUBJECT
            /// </summary>
            SUBJECT = 3,

            /// <summary>
            /// Enum ATTACHMENTS for value: ATTACHMENTS
            /// </summary>
            ATTACHMENTS = 4
        }

        /// <summary>
        /// Returns a <see cref="FieldEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FieldEnum FieldEnumFromString(string value)
        {
            if (value.Equals("RECIPIENTS"))
                return FieldEnum.RECIPIENTS;

            if (value.Equals("SENDER"))
                return FieldEnum.SENDER;

            if (value.Equals("SUBJECT"))
                return FieldEnum.SUBJECT;

            if (value.Equals("ATTACHMENTS"))
                return FieldEnum.ATTACHMENTS;

            throw new NotImplementedException($"Could not convert value to type FieldEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FieldEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FieldEnum? FieldEnumFromStringOrDefault(string value)
        {
            if (value.Equals("RECIPIENTS"))
                return FieldEnum.RECIPIENTS;

            if (value.Equals("SENDER"))
                return FieldEnum.SENDER;

            if (value.Equals("SUBJECT"))
                return FieldEnum.SUBJECT;

            if (value.Equals("ATTACHMENTS"))
                return FieldEnum.ATTACHMENTS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FieldEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FieldEnumToJsonValue(FieldEnum value)
        {
            if (value == FieldEnum.RECIPIENTS)
                return "RECIPIENTS";

            if (value == FieldEnum.SENDER)
                return "SENDER";

            if (value == FieldEnum.SUBJECT)
                return "SUBJECT";

            if (value == FieldEnum.ATTACHMENTS)
                return "ATTACHMENTS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Which field to match against
        /// </summary>
        /// <value>Which field to match against</value>
        [JsonPropertyName("field")]
        public FieldEnum Field { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Wild-card type pattern to apply to field
        /// </summary>
        /// <value>Wild-card type pattern to apply to field</value>
        [JsonPropertyName("match")]
        public string Match { get; set; }

        /// <summary>
        /// Who to send forwarded email to
        /// </summary>
        /// <value>Who to send forwarded email to</value>
        [JsonPropertyName("forwardToRecipients")]
        public List<string> ForwardToRecipients { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Name of inbox forwarder
        /// </summary>
        /// <value>Name of inbox forwarder</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboxForwarderDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  ForwardToRecipients: ").Append(ForwardToRecipients).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InboxForwarderDto" />
    /// </summary>
    public class InboxForwarderDtoJsonConverter : JsonConverter<InboxForwarderDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="InboxForwarderDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InboxForwarderDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<InboxForwarderDto.FieldEnum?> field = default;
            Option<string> match = default;
            Option<List<string>> forwardToRecipients = default;
            Option<DateTime?> createdAt = default;
            Option<Guid?> inboxId = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "field":
                            string fieldRawValue = utf8JsonReader.GetString();
                            if (fieldRawValue != null)
                                field = new Option<InboxForwarderDto.FieldEnum?>(InboxForwarderDto.FieldEnumFromStringOrDefault(fieldRawValue));
                            break;
                        case "match":
                            match = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "forwardToRecipients":
                            forwardToRecipients = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class InboxForwarderDto.", nameof(id));

            if (!field.IsSet)
                throw new ArgumentException("Property is required for class InboxForwarderDto.", nameof(field));

            if (!match.IsSet)
                throw new ArgumentException("Property is required for class InboxForwarderDto.", nameof(match));

            if (!forwardToRecipients.IsSet)
                throw new ArgumentException("Property is required for class InboxForwarderDto.", nameof(forwardToRecipients));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class InboxForwarderDto.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class InboxForwarderDto.");

            if (field.IsSet && field.Value == null)
                throw new ArgumentNullException(nameof(field), "Property is not nullable for class InboxForwarderDto.");

            if (match.IsSet && match.Value == null)
                throw new ArgumentNullException(nameof(match), "Property is not nullable for class InboxForwarderDto.");

            if (forwardToRecipients.IsSet && forwardToRecipients.Value == null)
                throw new ArgumentNullException(nameof(forwardToRecipients), "Property is not nullable for class InboxForwarderDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class InboxForwarderDto.");

            return new InboxForwarderDto(id.Value.Value, field.Value.Value, match.Value, forwardToRecipients.Value, createdAt.Value.Value, inboxId, name);
        }

        /// <summary>
        /// Serializes a <see cref="InboxForwarderDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxForwarderDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InboxForwarderDto inboxForwarderDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, inboxForwarderDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InboxForwarderDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxForwarderDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InboxForwarderDto inboxForwarderDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (inboxForwarderDto.Match == null)
                throw new ArgumentNullException(nameof(inboxForwarderDto.Match), "Property is required for class InboxForwarderDto.");

            if (inboxForwarderDto.ForwardToRecipients == null)
                throw new ArgumentNullException(nameof(inboxForwarderDto.ForwardToRecipients), "Property is required for class InboxForwarderDto.");

            writer.WriteString("id", inboxForwarderDto.Id);

            var fieldRawValue = InboxForwarderDto.FieldEnumToJsonValue(inboxForwarderDto.Field);
            writer.WriteString("field", fieldRawValue);
            writer.WriteString("match", inboxForwarderDto.Match);

            writer.WritePropertyName("forwardToRecipients");
            JsonSerializer.Serialize(writer, inboxForwarderDto.ForwardToRecipients, jsonSerializerOptions);
            writer.WriteString("createdAt", inboxForwarderDto.CreatedAt.ToString(CreatedAtFormat));

            if (inboxForwarderDto.InboxIdOption.IsSet)
                if (inboxForwarderDto.InboxIdOption.Value != null)
                    writer.WriteString("inboxId", inboxForwarderDto.InboxIdOption.Value.Value);
                else
                    writer.WriteNull("inboxId");

            if (inboxForwarderDto.NameOption.IsSet)
                if (inboxForwarderDto.NameOption.Value != null)
                    writer.WriteString("name", inboxForwarderDto.Name);
                else
                    writer.WriteNull("name");
        }
    }
}
