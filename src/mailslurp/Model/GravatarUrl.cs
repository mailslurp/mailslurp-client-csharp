// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// User image
    /// </summary>
    public partial class GravatarUrl : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GravatarUrl" /> class.
        /// </summary>
        /// <param name="url">url</param>
        /// <param name="hash">hash</param>
        [JsonConstructor]
        public GravatarUrl(string url, string hash)
        {
            Url = url;
            Hash = hash;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [JsonPropertyName("hash")]
        public string Hash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GravatarUrl {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GravatarUrl" />
    /// </summary>
    public class GravatarUrlJsonConverter : JsonConverter<GravatarUrl>
    {
        /// <summary>
        /// Deserializes json to <see cref="GravatarUrl" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GravatarUrl Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> url = default;
            Option<string> hash = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "hash":
                            hash = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class GravatarUrl.", nameof(url));

            if (!hash.IsSet)
                throw new ArgumentException("Property is required for class GravatarUrl.", nameof(hash));

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class GravatarUrl.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class GravatarUrl.");

            return new GravatarUrl(url.Value, hash.Value);
        }

        /// <summary>
        /// Serializes a <see cref="GravatarUrl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="gravatarUrl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GravatarUrl gravatarUrl, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, gravatarUrl, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GravatarUrl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="gravatarUrl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GravatarUrl gravatarUrl, JsonSerializerOptions jsonSerializerOptions)
        {
            if (gravatarUrl.Url == null)
                throw new ArgumentNullException(nameof(gravatarUrl.Url), "Property is required for class GravatarUrl.");

            if (gravatarUrl.Hash == null)
                throw new ArgumentNullException(nameof(gravatarUrl.Hash), "Property is required for class GravatarUrl.");

            writer.WriteString("url", gravatarUrl.Url);

            writer.WriteString("hash", gravatarUrl.Hash);
        }
    }
}
