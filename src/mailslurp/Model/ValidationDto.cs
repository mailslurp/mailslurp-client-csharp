// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Response object for email validation operation
    /// </summary>
    public partial class ValidationDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationDto" /> class.
        /// </summary>
        /// <param name="emailId">ID of the email validated</param>
        /// <param name="html">html</param>
        [JsonConstructor]
        public ValidationDto(Guid emailId, HTMLValidationResult html)
        {
            EmailId = emailId;
            Html = html;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of the email validated
        /// </summary>
        /// <value>ID of the email validated</value>
        [JsonPropertyName("emailId")]
        public Guid EmailId { get; set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [JsonPropertyName("html")]
        public HTMLValidationResult Html { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidationDto {\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ValidationDto" />
    /// </summary>
    public class ValidationDtoJsonConverter : JsonConverter<ValidationDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ValidationDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ValidationDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> emailId = default;
            Option<HTMLValidationResult> html = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "emailId":
                            emailId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "html":
                            html = new Option<HTMLValidationResult>(JsonSerializer.Deserialize<HTMLValidationResult>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!emailId.IsSet)
                throw new ArgumentException("Property is required for class ValidationDto.", nameof(emailId));

            if (!html.IsSet)
                throw new ArgumentException("Property is required for class ValidationDto.", nameof(html));

            if (emailId.IsSet && emailId.Value == null)
                throw new ArgumentNullException(nameof(emailId), "Property is not nullable for class ValidationDto.");

            if (html.IsSet && html.Value == null)
                throw new ArgumentNullException(nameof(html), "Property is not nullable for class ValidationDto.");

            return new ValidationDto(emailId.Value.Value, html.Value);
        }

        /// <summary>
        /// Serializes a <see cref="ValidationDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="validationDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ValidationDto validationDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, validationDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ValidationDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="validationDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ValidationDto validationDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (validationDto.Html == null)
                throw new ArgumentNullException(nameof(validationDto.Html), "Property is required for class ValidationDto.");

            writer.WriteString("emailId", validationDto.EmailId);

            writer.WritePropertyName("html");
            JsonSerializer.Serialize(writer, validationDto.Html, jsonSerializerOptions);
        }
    }
}
