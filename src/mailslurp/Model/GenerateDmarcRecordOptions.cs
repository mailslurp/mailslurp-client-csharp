// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// GenerateDmarcRecordOptions
    /// </summary>
    public partial class GenerateDmarcRecordOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateDmarcRecordOptions" /> class.
        /// </summary>
        /// <param name="domain">domain</param>
        /// <param name="varVersion">varVersion</param>
        /// <param name="policy">policy</param>
        /// <param name="subdomainPolicy">subdomainPolicy</param>
        /// <param name="reportEmailAddress">reportEmailAddress</param>
        /// <param name="forensicEmailAddress">forensicEmailAddress</param>
        /// <param name="percentage">percentage</param>
        /// <param name="reportFormat">reportFormat</param>
        /// <param name="secondsBetweenReports">secondsBetweenReports</param>
        /// <param name="adkim">adkim</param>
        /// <param name="aspf">aspf</param>
        /// <param name="fo">fo</param>
        [JsonConstructor]
        public GenerateDmarcRecordOptions(string domain, VarVersionEnum varVersion, PolicyEnum policy, Option<SubdomainPolicyEnum?> subdomainPolicy = default, Option<List<string>> reportEmailAddress = default, Option<List<string>> forensicEmailAddress = default, Option<int?> percentage = default, Option<ReportFormatEnum?> reportFormat = default, Option<int?> secondsBetweenReports = default, Option<AdkimEnum?> adkim = default, Option<AspfEnum?> aspf = default, Option<FoEnum?> fo = default)
        {
            Domain = domain;
            VarVersion = varVersion;
            Policy = policy;
            SubdomainPolicyOption = subdomainPolicy;
            ReportEmailAddressOption = reportEmailAddress;
            ForensicEmailAddressOption = forensicEmailAddress;
            PercentageOption = percentage;
            ReportFormatOption = reportFormat;
            SecondsBetweenReportsOption = secondsBetweenReports;
            AdkimOption = adkim;
            AspfOption = aspf;
            FoOption = fo;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines VarVersion
        /// </summary>
        public enum VarVersionEnum
        {
            /// <summary>
            /// Enum DMARC1 for value: DMARC1
            /// </summary>
            DMARC1 = 1
        }

        /// <summary>
        /// Returns a <see cref="VarVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VarVersionEnum VarVersionEnumFromString(string value)
        {
            if (value.Equals("DMARC1"))
                return VarVersionEnum.DMARC1;

            throw new NotImplementedException($"Could not convert value to type VarVersionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VarVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VarVersionEnum? VarVersionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("DMARC1"))
                return VarVersionEnum.DMARC1;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VarVersionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VarVersionEnumToJsonValue(VarVersionEnum value)
        {
            if (value == VarVersionEnum.DMARC1)
                return "DMARC1";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public VarVersionEnum VarVersion { get; set; }

        /// <summary>
        /// Defines Policy
        /// </summary>
        public enum PolicyEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            NONE = 1,

            /// <summary>
            /// Enum QUARANTINE for value: QUARANTINE
            /// </summary>
            QUARANTINE = 2,

            /// <summary>
            /// Enum REJECT for value: REJECT
            /// </summary>
            REJECT = 3
        }

        /// <summary>
        /// Returns a <see cref="PolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PolicyEnum PolicyEnumFromString(string value)
        {
            if (value.Equals("NONE"))
                return PolicyEnum.NONE;

            if (value.Equals("QUARANTINE"))
                return PolicyEnum.QUARANTINE;

            if (value.Equals("REJECT"))
                return PolicyEnum.REJECT;

            throw new NotImplementedException($"Could not convert value to type PolicyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PolicyEnum? PolicyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("NONE"))
                return PolicyEnum.NONE;

            if (value.Equals("QUARANTINE"))
                return PolicyEnum.QUARANTINE;

            if (value.Equals("REJECT"))
                return PolicyEnum.REJECT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PolicyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PolicyEnumToJsonValue(PolicyEnum value)
        {
            if (value == PolicyEnum.NONE)
                return "NONE";

            if (value == PolicyEnum.QUARANTINE)
                return "QUARANTINE";

            if (value == PolicyEnum.REJECT)
                return "REJECT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [JsonPropertyName("policy")]
        public PolicyEnum Policy { get; set; }

        /// <summary>
        /// Defines SubdomainPolicy
        /// </summary>
        public enum SubdomainPolicyEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            NONE = 1,

            /// <summary>
            /// Enum QUARANTINE for value: QUARANTINE
            /// </summary>
            QUARANTINE = 2,

            /// <summary>
            /// Enum REJECT for value: REJECT
            /// </summary>
            REJECT = 3
        }

        /// <summary>
        /// Returns a <see cref="SubdomainPolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SubdomainPolicyEnum SubdomainPolicyEnumFromString(string value)
        {
            if (value.Equals("NONE"))
                return SubdomainPolicyEnum.NONE;

            if (value.Equals("QUARANTINE"))
                return SubdomainPolicyEnum.QUARANTINE;

            if (value.Equals("REJECT"))
                return SubdomainPolicyEnum.REJECT;

            throw new NotImplementedException($"Could not convert value to type SubdomainPolicyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SubdomainPolicyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SubdomainPolicyEnum? SubdomainPolicyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("NONE"))
                return SubdomainPolicyEnum.NONE;

            if (value.Equals("QUARANTINE"))
                return SubdomainPolicyEnum.QUARANTINE;

            if (value.Equals("REJECT"))
                return SubdomainPolicyEnum.REJECT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SubdomainPolicyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SubdomainPolicyEnumToJsonValue(SubdomainPolicyEnum? value)
        {
            if (value == SubdomainPolicyEnum.NONE)
                return "NONE";

            if (value == SubdomainPolicyEnum.QUARANTINE)
                return "QUARANTINE";

            if (value == SubdomainPolicyEnum.REJECT)
                return "REJECT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SubdomainPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SubdomainPolicyEnum?> SubdomainPolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubdomainPolicy
        /// </summary>
        [JsonPropertyName("subdomainPolicy")]
        public SubdomainPolicyEnum? SubdomainPolicy { get { return this.SubdomainPolicyOption; } set { this.SubdomainPolicyOption = new Option<SubdomainPolicyEnum?>(value); } }

        /// <summary>
        /// Defines ReportFormat
        /// </summary>
        public enum ReportFormatEnum
        {
            /// <summary>
            /// Enum AFRF for value: AFRF
            /// </summary>
            AFRF = 1
        }

        /// <summary>
        /// Returns a <see cref="ReportFormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ReportFormatEnum ReportFormatEnumFromString(string value)
        {
            if (value.Equals("AFRF"))
                return ReportFormatEnum.AFRF;

            throw new NotImplementedException($"Could not convert value to type ReportFormatEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ReportFormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReportFormatEnum? ReportFormatEnumFromStringOrDefault(string value)
        {
            if (value.Equals("AFRF"))
                return ReportFormatEnum.AFRF;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReportFormatEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ReportFormatEnumToJsonValue(ReportFormatEnum? value)
        {
            if (value == ReportFormatEnum.AFRF)
                return "AFRF";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ReportFormat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReportFormatEnum?> ReportFormatOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReportFormat
        /// </summary>
        [JsonPropertyName("reportFormat")]
        public ReportFormatEnum? ReportFormat { get { return this.ReportFormatOption; } set { this.ReportFormatOption = new Option<ReportFormatEnum?>(value); } }

        /// <summary>
        /// Defines Adkim
        /// </summary>
        public enum AdkimEnum
        {
            /// <summary>
            /// Enum STRICT for value: STRICT
            /// </summary>
            STRICT = 1,

            /// <summary>
            /// Enum RELAXED for value: RELAXED
            /// </summary>
            RELAXED = 2
        }

        /// <summary>
        /// Returns a <see cref="AdkimEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AdkimEnum AdkimEnumFromString(string value)
        {
            if (value.Equals("STRICT"))
                return AdkimEnum.STRICT;

            if (value.Equals("RELAXED"))
                return AdkimEnum.RELAXED;

            throw new NotImplementedException($"Could not convert value to type AdkimEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AdkimEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AdkimEnum? AdkimEnumFromStringOrDefault(string value)
        {
            if (value.Equals("STRICT"))
                return AdkimEnum.STRICT;

            if (value.Equals("RELAXED"))
                return AdkimEnum.RELAXED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AdkimEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AdkimEnumToJsonValue(AdkimEnum? value)
        {
            if (value == AdkimEnum.STRICT)
                return "STRICT";

            if (value == AdkimEnum.RELAXED)
                return "RELAXED";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Adkim
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdkimEnum?> AdkimOption { get; private set; }

        /// <summary>
        /// Gets or Sets Adkim
        /// </summary>
        [JsonPropertyName("adkim")]
        public AdkimEnum? Adkim { get { return this.AdkimOption; } set { this.AdkimOption = new Option<AdkimEnum?>(value); } }

        /// <summary>
        /// Defines Aspf
        /// </summary>
        public enum AspfEnum
        {
            /// <summary>
            /// Enum STRICT for value: STRICT
            /// </summary>
            STRICT = 1,

            /// <summary>
            /// Enum RELAXED for value: RELAXED
            /// </summary>
            RELAXED = 2
        }

        /// <summary>
        /// Returns a <see cref="AspfEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AspfEnum AspfEnumFromString(string value)
        {
            if (value.Equals("STRICT"))
                return AspfEnum.STRICT;

            if (value.Equals("RELAXED"))
                return AspfEnum.RELAXED;

            throw new NotImplementedException($"Could not convert value to type AspfEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AspfEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AspfEnum? AspfEnumFromStringOrDefault(string value)
        {
            if (value.Equals("STRICT"))
                return AspfEnum.STRICT;

            if (value.Equals("RELAXED"))
                return AspfEnum.RELAXED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AspfEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AspfEnumToJsonValue(AspfEnum? value)
        {
            if (value == AspfEnum.STRICT)
                return "STRICT";

            if (value == AspfEnum.RELAXED)
                return "RELAXED";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Aspf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AspfEnum?> AspfOption { get; private set; }

        /// <summary>
        /// Gets or Sets Aspf
        /// </summary>
        [JsonPropertyName("aspf")]
        public AspfEnum? Aspf { get { return this.AspfOption; } set { this.AspfOption = new Option<AspfEnum?>(value); } }

        /// <summary>
        /// Defines Fo
        /// </summary>
        public enum FoEnum
        {
            /// <summary>
            /// Enum FO0 for value: FO_0
            /// </summary>
            FO0 = 1,

            /// <summary>
            /// Enum FO1 for value: FO_1
            /// </summary>
            FO1 = 2,

            /// <summary>
            /// Enum FOD for value: FO_D
            /// </summary>
            FOD = 3,

            /// <summary>
            /// Enum FOS for value: FO_S
            /// </summary>
            FOS = 4
        }

        /// <summary>
        /// Returns a <see cref="FoEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FoEnum FoEnumFromString(string value)
        {
            if (value.Equals("FO_0"))
                return FoEnum.FO0;

            if (value.Equals("FO_1"))
                return FoEnum.FO1;

            if (value.Equals("FO_D"))
                return FoEnum.FOD;

            if (value.Equals("FO_S"))
                return FoEnum.FOS;

            throw new NotImplementedException($"Could not convert value to type FoEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FoEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FoEnum? FoEnumFromStringOrDefault(string value)
        {
            if (value.Equals("FO_0"))
                return FoEnum.FO0;

            if (value.Equals("FO_1"))
                return FoEnum.FO1;

            if (value.Equals("FO_D"))
                return FoEnum.FOD;

            if (value.Equals("FO_S"))
                return FoEnum.FOS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FoEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FoEnumToJsonValue(FoEnum? value)
        {
            if (value == FoEnum.FO0)
                return "FO_0";

            if (value == FoEnum.FO1)
                return "FO_1";

            if (value == FoEnum.FOD)
                return "FO_D";

            if (value == FoEnum.FOS)
                return "FO_S";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Fo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FoEnum?> FoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Fo
        /// </summary>
        [JsonPropertyName("fo")]
        public FoEnum? Fo { get { return this.FoOption; } set { this.FoOption = new Option<FoEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [JsonPropertyName("domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Used to track the state of ReportEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> ReportEmailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReportEmailAddress
        /// </summary>
        [JsonPropertyName("reportEmailAddress")]
        public List<string> ReportEmailAddress { get { return this.ReportEmailAddressOption; } set { this.ReportEmailAddressOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of ForensicEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> ForensicEmailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForensicEmailAddress
        /// </summary>
        [JsonPropertyName("forensicEmailAddress")]
        public List<string> ForensicEmailAddress { get { return this.ForensicEmailAddressOption; } set { this.ForensicEmailAddressOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Percentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PercentageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Percentage
        /// </summary>
        [JsonPropertyName("percentage")]
        public int? Percentage { get { return this.PercentageOption; } set { this.PercentageOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of SecondsBetweenReports
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SecondsBetweenReportsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SecondsBetweenReports
        /// </summary>
        [JsonPropertyName("secondsBetweenReports")]
        public int? SecondsBetweenReports { get { return this.SecondsBetweenReportsOption; } set { this.SecondsBetweenReportsOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateDmarcRecordOptions {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  SubdomainPolicy: ").Append(SubdomainPolicy).Append("\n");
            sb.Append("  ReportEmailAddress: ").Append(ReportEmailAddress).Append("\n");
            sb.Append("  ForensicEmailAddress: ").Append(ForensicEmailAddress).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  ReportFormat: ").Append(ReportFormat).Append("\n");
            sb.Append("  SecondsBetweenReports: ").Append(SecondsBetweenReports).Append("\n");
            sb.Append("  Adkim: ").Append(Adkim).Append("\n");
            sb.Append("  Aspf: ").Append(Aspf).Append("\n");
            sb.Append("  Fo: ").Append(Fo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Percentage (int) maximum
            if (this.PercentageOption.IsSet && this.PercentageOption.Value > (int)100)
            {
                yield return new ValidationResult("Invalid value for Percentage, must be a value less than or equal to 100.", new [] { "Percentage" });
            }

            // Percentage (int) minimum
            if (this.PercentageOption.IsSet && this.PercentageOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for Percentage, must be a value greater than or equal to 1.", new [] { "Percentage" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GenerateDmarcRecordOptions" />
    /// </summary>
    public class GenerateDmarcRecordOptionsJsonConverter : JsonConverter<GenerateDmarcRecordOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="GenerateDmarcRecordOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GenerateDmarcRecordOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> domain = default;
            Option<GenerateDmarcRecordOptions.VarVersionEnum?> varVersion = default;
            Option<GenerateDmarcRecordOptions.PolicyEnum?> policy = default;
            Option<GenerateDmarcRecordOptions.SubdomainPolicyEnum?> subdomainPolicy = default;
            Option<List<string>> reportEmailAddress = default;
            Option<List<string>> forensicEmailAddress = default;
            Option<int?> percentage = default;
            Option<GenerateDmarcRecordOptions.ReportFormatEnum?> reportFormat = default;
            Option<int?> secondsBetweenReports = default;
            Option<GenerateDmarcRecordOptions.AdkimEnum?> adkim = default;
            Option<GenerateDmarcRecordOptions.AspfEnum?> aspf = default;
            Option<GenerateDmarcRecordOptions.FoEnum?> fo = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domain":
                            domain = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "version":
                            string varVersionRawValue = utf8JsonReader.GetString();
                            if (varVersionRawValue != null)
                                varVersion = new Option<GenerateDmarcRecordOptions.VarVersionEnum?>(GenerateDmarcRecordOptions.VarVersionEnumFromStringOrDefault(varVersionRawValue));
                            break;
                        case "policy":
                            string policyRawValue = utf8JsonReader.GetString();
                            if (policyRawValue != null)
                                policy = new Option<GenerateDmarcRecordOptions.PolicyEnum?>(GenerateDmarcRecordOptions.PolicyEnumFromStringOrDefault(policyRawValue));
                            break;
                        case "subdomainPolicy":
                            string subdomainPolicyRawValue = utf8JsonReader.GetString();
                            if (subdomainPolicyRawValue != null)
                                subdomainPolicy = new Option<GenerateDmarcRecordOptions.SubdomainPolicyEnum?>(GenerateDmarcRecordOptions.SubdomainPolicyEnumFromStringOrDefault(subdomainPolicyRawValue));
                            break;
                        case "reportEmailAddress":
                            reportEmailAddress = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "forensicEmailAddress":
                            forensicEmailAddress = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "percentage":
                            percentage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "reportFormat":
                            string reportFormatRawValue = utf8JsonReader.GetString();
                            if (reportFormatRawValue != null)
                                reportFormat = new Option<GenerateDmarcRecordOptions.ReportFormatEnum?>(GenerateDmarcRecordOptions.ReportFormatEnumFromStringOrDefault(reportFormatRawValue));
                            break;
                        case "secondsBetweenReports":
                            secondsBetweenReports = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "adkim":
                            string adkimRawValue = utf8JsonReader.GetString();
                            if (adkimRawValue != null)
                                adkim = new Option<GenerateDmarcRecordOptions.AdkimEnum?>(GenerateDmarcRecordOptions.AdkimEnumFromStringOrDefault(adkimRawValue));
                            break;
                        case "aspf":
                            string aspfRawValue = utf8JsonReader.GetString();
                            if (aspfRawValue != null)
                                aspf = new Option<GenerateDmarcRecordOptions.AspfEnum?>(GenerateDmarcRecordOptions.AspfEnumFromStringOrDefault(aspfRawValue));
                            break;
                        case "fo":
                            string foRawValue = utf8JsonReader.GetString();
                            if (foRawValue != null)
                                fo = new Option<GenerateDmarcRecordOptions.FoEnum?>(GenerateDmarcRecordOptions.FoEnumFromStringOrDefault(foRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!domain.IsSet)
                throw new ArgumentException("Property is required for class GenerateDmarcRecordOptions.", nameof(domain));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class GenerateDmarcRecordOptions.", nameof(varVersion));

            if (!policy.IsSet)
                throw new ArgumentException("Property is required for class GenerateDmarcRecordOptions.", nameof(policy));

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (policy.IsSet && policy.Value == null)
                throw new ArgumentNullException(nameof(policy), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (subdomainPolicy.IsSet && subdomainPolicy.Value == null)
                throw new ArgumentNullException(nameof(subdomainPolicy), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (reportEmailAddress.IsSet && reportEmailAddress.Value == null)
                throw new ArgumentNullException(nameof(reportEmailAddress), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (forensicEmailAddress.IsSet && forensicEmailAddress.Value == null)
                throw new ArgumentNullException(nameof(forensicEmailAddress), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (percentage.IsSet && percentage.Value == null)
                throw new ArgumentNullException(nameof(percentage), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (reportFormat.IsSet && reportFormat.Value == null)
                throw new ArgumentNullException(nameof(reportFormat), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (secondsBetweenReports.IsSet && secondsBetweenReports.Value == null)
                throw new ArgumentNullException(nameof(secondsBetweenReports), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (adkim.IsSet && adkim.Value == null)
                throw new ArgumentNullException(nameof(adkim), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (aspf.IsSet && aspf.Value == null)
                throw new ArgumentNullException(nameof(aspf), "Property is not nullable for class GenerateDmarcRecordOptions.");

            if (fo.IsSet && fo.Value == null)
                throw new ArgumentNullException(nameof(fo), "Property is not nullable for class GenerateDmarcRecordOptions.");

            return new GenerateDmarcRecordOptions(domain.Value, varVersion.Value.Value, policy.Value.Value, subdomainPolicy, reportEmailAddress, forensicEmailAddress, percentage, reportFormat, secondsBetweenReports, adkim, aspf, fo);
        }

        /// <summary>
        /// Serializes a <see cref="GenerateDmarcRecordOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GenerateDmarcRecordOptions generateDmarcRecordOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generateDmarcRecordOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GenerateDmarcRecordOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GenerateDmarcRecordOptions generateDmarcRecordOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generateDmarcRecordOptions.Domain == null)
                throw new ArgumentNullException(nameof(generateDmarcRecordOptions.Domain), "Property is required for class GenerateDmarcRecordOptions.");

            if (generateDmarcRecordOptions.ReportEmailAddressOption.IsSet && generateDmarcRecordOptions.ReportEmailAddress == null)
                throw new ArgumentNullException(nameof(generateDmarcRecordOptions.ReportEmailAddress), "Property is required for class GenerateDmarcRecordOptions.");

            if (generateDmarcRecordOptions.ForensicEmailAddressOption.IsSet && generateDmarcRecordOptions.ForensicEmailAddress == null)
                throw new ArgumentNullException(nameof(generateDmarcRecordOptions.ForensicEmailAddress), "Property is required for class GenerateDmarcRecordOptions.");

            writer.WriteString("domain", generateDmarcRecordOptions.Domain);

            var varVersionRawValue = GenerateDmarcRecordOptions.VarVersionEnumToJsonValue(generateDmarcRecordOptions.VarVersion);
            writer.WriteString("version", varVersionRawValue);
            var policyRawValue = GenerateDmarcRecordOptions.PolicyEnumToJsonValue(generateDmarcRecordOptions.Policy);
            writer.WriteString("policy", policyRawValue);
            var subdomainPolicyRawValue = GenerateDmarcRecordOptions.SubdomainPolicyEnumToJsonValue(generateDmarcRecordOptions.SubdomainPolicyOption.Value.Value);
            writer.WriteString("subdomainPolicy", subdomainPolicyRawValue);
            if (generateDmarcRecordOptions.ReportEmailAddressOption.IsSet)
            {
                writer.WritePropertyName("reportEmailAddress");
                JsonSerializer.Serialize(writer, generateDmarcRecordOptions.ReportEmailAddress, jsonSerializerOptions);
            }
            if (generateDmarcRecordOptions.ForensicEmailAddressOption.IsSet)
            {
                writer.WritePropertyName("forensicEmailAddress");
                JsonSerializer.Serialize(writer, generateDmarcRecordOptions.ForensicEmailAddress, jsonSerializerOptions);
            }
            if (generateDmarcRecordOptions.PercentageOption.IsSet)
                writer.WriteNumber("percentage", generateDmarcRecordOptions.PercentageOption.Value.Value);

            var reportFormatRawValue = GenerateDmarcRecordOptions.ReportFormatEnumToJsonValue(generateDmarcRecordOptions.ReportFormatOption.Value.Value);
            writer.WriteString("reportFormat", reportFormatRawValue);
            if (generateDmarcRecordOptions.SecondsBetweenReportsOption.IsSet)
                writer.WriteNumber("secondsBetweenReports", generateDmarcRecordOptions.SecondsBetweenReportsOption.Value.Value);

            var adkimRawValue = GenerateDmarcRecordOptions.AdkimEnumToJsonValue(generateDmarcRecordOptions.AdkimOption.Value.Value);
            writer.WriteString("adkim", adkimRawValue);
            var aspfRawValue = GenerateDmarcRecordOptions.AspfEnumToJsonValue(generateDmarcRecordOptions.AspfOption.Value.Value);
            writer.WriteString("aspf", aspfRawValue);
            var foRawValue = GenerateDmarcRecordOptions.FoEnumToJsonValue(generateDmarcRecordOptions.FoOption.Value.Value);
            writer.WriteString("fo", foRawValue);
        }
    }
}
