/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// GenerateDmarcRecordOptions
    /// </summary>
    [DataContract(Name = "GenerateDmarcRecordOptions")]
    public partial class GenerateDmarcRecordOptions : IValidatableObject
    {
        /// <summary>
        /// Defines VarVersion
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VarVersionEnum
        {
            /// <summary>
            /// Enum DMARC1 for value: DMARC1
            /// </summary>
            [EnumMember(Value = "DMARC1")]
            DMARC1 = 1
        }


        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public VarVersionEnum VarVersion { get; set; }
        /// <summary>
        /// Defines Policy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PolicyEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum QUARANTINE for value: QUARANTINE
            /// </summary>
            [EnumMember(Value = "QUARANTINE")]
            QUARANTINE = 2,

            /// <summary>
            /// Enum REJECT for value: REJECT
            /// </summary>
            [EnumMember(Value = "REJECT")]
            REJECT = 3
        }


        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name = "policy", IsRequired = true, EmitDefaultValue = true)]
        public PolicyEnum Policy { get; set; }
        /// <summary>
        /// Defines SubdomainPolicy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubdomainPolicyEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum QUARANTINE for value: QUARANTINE
            /// </summary>
            [EnumMember(Value = "QUARANTINE")]
            QUARANTINE = 2,

            /// <summary>
            /// Enum REJECT for value: REJECT
            /// </summary>
            [EnumMember(Value = "REJECT")]
            REJECT = 3
        }


        /// <summary>
        /// Gets or Sets SubdomainPolicy
        /// </summary>
        [DataMember(Name = "subdomainPolicy", EmitDefaultValue = false)]
        public SubdomainPolicyEnum? SubdomainPolicy { get; set; }
        /// <summary>
        /// Defines ReportFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportFormatEnum
        {
            /// <summary>
            /// Enum AFRF for value: AFRF
            /// </summary>
            [EnumMember(Value = "AFRF")]
            AFRF = 1
        }


        /// <summary>
        /// Gets or Sets ReportFormat
        /// </summary>
        [DataMember(Name = "reportFormat", EmitDefaultValue = false)]
        public ReportFormatEnum? ReportFormat { get; set; }
        /// <summary>
        /// Defines Adkim
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdkimEnum
        {
            /// <summary>
            /// Enum STRICT for value: STRICT
            /// </summary>
            [EnumMember(Value = "STRICT")]
            STRICT = 1,

            /// <summary>
            /// Enum RELAXED for value: RELAXED
            /// </summary>
            [EnumMember(Value = "RELAXED")]
            RELAXED = 2
        }


        /// <summary>
        /// Gets or Sets Adkim
        /// </summary>
        [DataMember(Name = "adkim", EmitDefaultValue = false)]
        public AdkimEnum? Adkim { get; set; }
        /// <summary>
        /// Defines Aspf
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AspfEnum
        {
            /// <summary>
            /// Enum STRICT for value: STRICT
            /// </summary>
            [EnumMember(Value = "STRICT")]
            STRICT = 1,

            /// <summary>
            /// Enum RELAXED for value: RELAXED
            /// </summary>
            [EnumMember(Value = "RELAXED")]
            RELAXED = 2
        }


        /// <summary>
        /// Gets or Sets Aspf
        /// </summary>
        [DataMember(Name = "aspf", EmitDefaultValue = false)]
        public AspfEnum? Aspf { get; set; }
        /// <summary>
        /// Defines Fo
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FoEnum
        {
            /// <summary>
            /// Enum FO0 for value: FO_0
            /// </summary>
            [EnumMember(Value = "FO_0")]
            FO0 = 1,

            /// <summary>
            /// Enum FO1 for value: FO_1
            /// </summary>
            [EnumMember(Value = "FO_1")]
            FO1 = 2,

            /// <summary>
            /// Enum FOD for value: FO_D
            /// </summary>
            [EnumMember(Value = "FO_D")]
            FOD = 3,

            /// <summary>
            /// Enum FOS for value: FO_S
            /// </summary>
            [EnumMember(Value = "FO_S")]
            FOS = 4
        }


        /// <summary>
        /// Gets or Sets Fo
        /// </summary>
        [DataMember(Name = "fo", EmitDefaultValue = false)]
        public FoEnum? Fo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateDmarcRecordOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateDmarcRecordOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateDmarcRecordOptions" /> class.
        /// </summary>
        /// <param name="domain">domain (required).</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="policy">policy (required).</param>
        /// <param name="subdomainPolicy">subdomainPolicy.</param>
        /// <param name="reportEmailAddress">reportEmailAddress.</param>
        /// <param name="forensicEmailAddress">forensicEmailAddress.</param>
        /// <param name="percentage">percentage.</param>
        /// <param name="reportFormat">reportFormat.</param>
        /// <param name="secondsBetweenReports">secondsBetweenReports.</param>
        /// <param name="adkim">adkim.</param>
        /// <param name="aspf">aspf.</param>
        /// <param name="fo">fo.</param>
        public GenerateDmarcRecordOptions(string domain = default, VarVersionEnum varVersion = default, PolicyEnum policy = default, SubdomainPolicyEnum? subdomainPolicy = default, List<string> reportEmailAddress = default, List<string> forensicEmailAddress = default, int percentage = default, ReportFormatEnum? reportFormat = default, int secondsBetweenReports = default, AdkimEnum? adkim = default, AspfEnum? aspf = default, FoEnum? fo = default)
        {
            // to ensure "domain" is required (not null)
            if (domain == null)
            {
                throw new ArgumentNullException("domain is a required property for GenerateDmarcRecordOptions and cannot be null");
            }
            this.Domain = domain;
            this.VarVersion = varVersion;
            this.Policy = policy;
            this.SubdomainPolicy = subdomainPolicy;
            this.ReportEmailAddress = reportEmailAddress;
            this.ForensicEmailAddress = forensicEmailAddress;
            this.Percentage = percentage;
            this.ReportFormat = reportFormat;
            this.SecondsBetweenReports = secondsBetweenReports;
            this.Adkim = adkim;
            this.Aspf = aspf;
            this.Fo = fo;
        }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", IsRequired = true, EmitDefaultValue = true)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets ReportEmailAddress
        /// </summary>
        [DataMember(Name = "reportEmailAddress", EmitDefaultValue = false)]
        public List<string> ReportEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets ForensicEmailAddress
        /// </summary>
        [DataMember(Name = "forensicEmailAddress", EmitDefaultValue = false)]
        public List<string> ForensicEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Percentage
        /// </summary>
        [DataMember(Name = "percentage", EmitDefaultValue = false)]
        public int Percentage { get; set; }

        /// <summary>
        /// Gets or Sets SecondsBetweenReports
        /// </summary>
        [DataMember(Name = "secondsBetweenReports", EmitDefaultValue = false)]
        public int SecondsBetweenReports { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateDmarcRecordOptions {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  SubdomainPolicy: ").Append(SubdomainPolicy).Append("\n");
            sb.Append("  ReportEmailAddress: ").Append(ReportEmailAddress).Append("\n");
            sb.Append("  ForensicEmailAddress: ").Append(ForensicEmailAddress).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  ReportFormat: ").Append(ReportFormat).Append("\n");
            sb.Append("  SecondsBetweenReports: ").Append(SecondsBetweenReports).Append("\n");
            sb.Append("  Adkim: ").Append(Adkim).Append("\n");
            sb.Append("  Aspf: ").Append(Aspf).Append("\n");
            sb.Append("  Fo: ").Append(Fo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Percentage (int) maximum
            if (this.Percentage > (int)100)
            {
                yield return new ValidationResult("Invalid value for Percentage, must be a value less than or equal to 100.", new [] { "Percentage" });
            }

            // Percentage (int) minimum
            if (this.Percentage < (int)1)
            {
                yield return new ValidationResult("Invalid value for Percentage, must be a value greater than or equal to 1.", new [] { "Percentage" });
            }

            yield break;
        }
    }

}
