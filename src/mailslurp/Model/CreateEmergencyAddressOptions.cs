// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// CreateEmergencyAddressOptions
    /// </summary>
    public partial class CreateEmergencyAddressOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEmergencyAddressOptions" /> class.
        /// </summary>
        /// <param name="customerName">customerName</param>
        /// <param name="address1">address1</param>
        /// <param name="city">city</param>
        /// <param name="region">region</param>
        /// <param name="postalCode">postalCode</param>
        /// <param name="isoCountryCode">isoCountryCode</param>
        /// <param name="displayName">displayName</param>
        [JsonConstructor]
        public CreateEmergencyAddressOptions(string customerName, string address1, string city, string region, string postalCode, IsoCountryCodeEnum isoCountryCode, Option<string> displayName = default)
        {
            CustomerName = customerName;
            Address1 = address1;
            City = city;
            Region = region;
            PostalCode = postalCode;
            IsoCountryCode = isoCountryCode;
            DisplayNameOption = displayName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines IsoCountryCode
        /// </summary>
        public enum IsoCountryCodeEnum
        {
            /// <summary>
            /// Enum US for value: US
            /// </summary>
            US = 1,

            /// <summary>
            /// Enum GB for value: GB
            /// </summary>
            GB = 2,

            /// <summary>
            /// Enum AU for value: AU
            /// </summary>
            AU = 3,

            /// <summary>
            /// Enum CA for value: CA
            /// </summary>
            CA = 4,

            /// <summary>
            /// Enum EE for value: EE
            /// </summary>
            EE = 5,

            /// <summary>
            /// Enum HK for value: HK
            /// </summary>
            HK = 6,

            /// <summary>
            /// Enum PL for value: PL
            /// </summary>
            PL = 7,

            /// <summary>
            /// Enum CH for value: CH
            /// </summary>
            CH = 8,

            /// <summary>
            /// Enum PT for value: PT
            /// </summary>
            PT = 9,

            /// <summary>
            /// Enum NL for value: NL
            /// </summary>
            NL = 10,

            /// <summary>
            /// Enum IL for value: IL
            /// </summary>
            IL = 11,

            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            SE = 12
        }

        /// <summary>
        /// Returns a <see cref="IsoCountryCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static IsoCountryCodeEnum IsoCountryCodeEnumFromString(string value)
        {
            if (value.Equals("US"))
                return IsoCountryCodeEnum.US;

            if (value.Equals("GB"))
                return IsoCountryCodeEnum.GB;

            if (value.Equals("AU"))
                return IsoCountryCodeEnum.AU;

            if (value.Equals("CA"))
                return IsoCountryCodeEnum.CA;

            if (value.Equals("EE"))
                return IsoCountryCodeEnum.EE;

            if (value.Equals("HK"))
                return IsoCountryCodeEnum.HK;

            if (value.Equals("PL"))
                return IsoCountryCodeEnum.PL;

            if (value.Equals("CH"))
                return IsoCountryCodeEnum.CH;

            if (value.Equals("PT"))
                return IsoCountryCodeEnum.PT;

            if (value.Equals("NL"))
                return IsoCountryCodeEnum.NL;

            if (value.Equals("IL"))
                return IsoCountryCodeEnum.IL;

            if (value.Equals("SE"))
                return IsoCountryCodeEnum.SE;

            throw new NotImplementedException($"Could not convert value to type IsoCountryCodeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="IsoCountryCodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IsoCountryCodeEnum? IsoCountryCodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("US"))
                return IsoCountryCodeEnum.US;

            if (value.Equals("GB"))
                return IsoCountryCodeEnum.GB;

            if (value.Equals("AU"))
                return IsoCountryCodeEnum.AU;

            if (value.Equals("CA"))
                return IsoCountryCodeEnum.CA;

            if (value.Equals("EE"))
                return IsoCountryCodeEnum.EE;

            if (value.Equals("HK"))
                return IsoCountryCodeEnum.HK;

            if (value.Equals("PL"))
                return IsoCountryCodeEnum.PL;

            if (value.Equals("CH"))
                return IsoCountryCodeEnum.CH;

            if (value.Equals("PT"))
                return IsoCountryCodeEnum.PT;

            if (value.Equals("NL"))
                return IsoCountryCodeEnum.NL;

            if (value.Equals("IL"))
                return IsoCountryCodeEnum.IL;

            if (value.Equals("SE"))
                return IsoCountryCodeEnum.SE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IsoCountryCodeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string IsoCountryCodeEnumToJsonValue(IsoCountryCodeEnum value)
        {
            if (value == IsoCountryCodeEnum.US)
                return "US";

            if (value == IsoCountryCodeEnum.GB)
                return "GB";

            if (value == IsoCountryCodeEnum.AU)
                return "AU";

            if (value == IsoCountryCodeEnum.CA)
                return "CA";

            if (value == IsoCountryCodeEnum.EE)
                return "EE";

            if (value == IsoCountryCodeEnum.HK)
                return "HK";

            if (value == IsoCountryCodeEnum.PL)
                return "PL";

            if (value == IsoCountryCodeEnum.CH)
                return "CH";

            if (value == IsoCountryCodeEnum.PT)
                return "PT";

            if (value == IsoCountryCodeEnum.NL)
                return "NL";

            if (value == IsoCountryCodeEnum.IL)
                return "IL";

            if (value == IsoCountryCodeEnum.SE)
                return "SE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets IsoCountryCode
        /// </summary>
        [JsonPropertyName("isoCountryCode")]
        public IsoCountryCodeEnum IsoCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [JsonPropertyName("customerName")]
        public string CustomerName { get; set; }

        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [JsonPropertyName("address1")]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [JsonPropertyName("region")]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateEmergencyAddressOptions {\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  IsoCountryCode: ").Append(IsoCountryCode).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateEmergencyAddressOptions" />
    /// </summary>
    public class CreateEmergencyAddressOptionsJsonConverter : JsonConverter<CreateEmergencyAddressOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateEmergencyAddressOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateEmergencyAddressOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> customerName = default;
            Option<string> address1 = default;
            Option<string> city = default;
            Option<string> region = default;
            Option<string> postalCode = default;
            Option<CreateEmergencyAddressOptions.IsoCountryCodeEnum?> isoCountryCode = default;
            Option<string> displayName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "customerName":
                            customerName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address1":
                            address1 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "city":
                            city = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "region":
                            region = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "postalCode":
                            postalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isoCountryCode":
                            string isoCountryCodeRawValue = utf8JsonReader.GetString();
                            if (isoCountryCodeRawValue != null)
                                isoCountryCode = new Option<CreateEmergencyAddressOptions.IsoCountryCodeEnum?>(CreateEmergencyAddressOptions.IsoCountryCodeEnumFromStringOrDefault(isoCountryCodeRawValue));
                            break;
                        case "displayName":
                            displayName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!customerName.IsSet)
                throw new ArgumentException("Property is required for class CreateEmergencyAddressOptions.", nameof(customerName));

            if (!address1.IsSet)
                throw new ArgumentException("Property is required for class CreateEmergencyAddressOptions.", nameof(address1));

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class CreateEmergencyAddressOptions.", nameof(city));

            if (!region.IsSet)
                throw new ArgumentException("Property is required for class CreateEmergencyAddressOptions.", nameof(region));

            if (!postalCode.IsSet)
                throw new ArgumentException("Property is required for class CreateEmergencyAddressOptions.", nameof(postalCode));

            if (!isoCountryCode.IsSet)
                throw new ArgumentException("Property is required for class CreateEmergencyAddressOptions.", nameof(isoCountryCode));

            if (customerName.IsSet && customerName.Value == null)
                throw new ArgumentNullException(nameof(customerName), "Property is not nullable for class CreateEmergencyAddressOptions.");

            if (address1.IsSet && address1.Value == null)
                throw new ArgumentNullException(nameof(address1), "Property is not nullable for class CreateEmergencyAddressOptions.");

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city), "Property is not nullable for class CreateEmergencyAddressOptions.");

            if (region.IsSet && region.Value == null)
                throw new ArgumentNullException(nameof(region), "Property is not nullable for class CreateEmergencyAddressOptions.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class CreateEmergencyAddressOptions.");

            if (isoCountryCode.IsSet && isoCountryCode.Value == null)
                throw new ArgumentNullException(nameof(isoCountryCode), "Property is not nullable for class CreateEmergencyAddressOptions.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class CreateEmergencyAddressOptions.");

            return new CreateEmergencyAddressOptions(customerName.Value, address1.Value, city.Value, region.Value, postalCode.Value, isoCountryCode.Value.Value, displayName);
        }

        /// <summary>
        /// Serializes a <see cref="CreateEmergencyAddressOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateEmergencyAddressOptions createEmergencyAddressOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createEmergencyAddressOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateEmergencyAddressOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateEmergencyAddressOptions createEmergencyAddressOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createEmergencyAddressOptions.CustomerName == null)
                throw new ArgumentNullException(nameof(createEmergencyAddressOptions.CustomerName), "Property is required for class CreateEmergencyAddressOptions.");

            if (createEmergencyAddressOptions.Address1 == null)
                throw new ArgumentNullException(nameof(createEmergencyAddressOptions.Address1), "Property is required for class CreateEmergencyAddressOptions.");

            if (createEmergencyAddressOptions.City == null)
                throw new ArgumentNullException(nameof(createEmergencyAddressOptions.City), "Property is required for class CreateEmergencyAddressOptions.");

            if (createEmergencyAddressOptions.Region == null)
                throw new ArgumentNullException(nameof(createEmergencyAddressOptions.Region), "Property is required for class CreateEmergencyAddressOptions.");

            if (createEmergencyAddressOptions.PostalCode == null)
                throw new ArgumentNullException(nameof(createEmergencyAddressOptions.PostalCode), "Property is required for class CreateEmergencyAddressOptions.");

            if (createEmergencyAddressOptions.DisplayNameOption.IsSet && createEmergencyAddressOptions.DisplayName == null)
                throw new ArgumentNullException(nameof(createEmergencyAddressOptions.DisplayName), "Property is required for class CreateEmergencyAddressOptions.");

            writer.WriteString("customerName", createEmergencyAddressOptions.CustomerName);

            writer.WriteString("address1", createEmergencyAddressOptions.Address1);

            writer.WriteString("city", createEmergencyAddressOptions.City);

            writer.WriteString("region", createEmergencyAddressOptions.Region);

            writer.WriteString("postalCode", createEmergencyAddressOptions.PostalCode);

            var isoCountryCodeRawValue = CreateEmergencyAddressOptions.IsoCountryCodeEnumToJsonValue(createEmergencyAddressOptions.IsoCountryCode);
            writer.WriteString("isoCountryCode", isoCountryCodeRawValue);
            if (createEmergencyAddressOptions.DisplayNameOption.IsSet)
                writer.WriteString("displayName", createEmergencyAddressOptions.DisplayName);
        }
    }
}
