// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating a domain to use with MailSlurp. You must have ownership access to this domain in order to verify it. Domains will not function correctly until the domain has been verified. See https://www.mailslurp.com/guides/custom-domains for help. Domains can be either &#x60;HTTP&#x60; or &#x60;SMTP&#x60; type. The type of domain determines which inboxes can be used with it. &#x60;SMTP&#x60; inboxes use a mail server running &#x60;mxslurp.click&#x60; while &#x60;HTTP&#x60; inboxes are handled by AWS SES.
    /// </summary>
    public partial class CreateDomainOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDomainOptions" /> class.
        /// </summary>
        /// <param name="domain">The top level domain you wish to use with MailSlurp. Do not specify subdomain just the top level. So &#x60;test.com&#x60; covers all subdomains such as &#x60;mail.test.com&#x60;. Don&#39;t include a protocol such as &#x60;http://&#x60;. Once added you must complete the verification steps by adding the returned records to your domain.</param>
        /// <param name="description">Optional description of the domain.</param>
        /// <param name="createdCatchAllInbox">Whether to create a catch all inbox for the domain. Any email sent to an address using your domain that cannot be matched to an existing inbox you created with the domain will be routed to the created catch all inbox. You can access emails using the regular methods on this inbox ID.</param>
        /// <param name="domainType">Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.</param>
        [JsonConstructor]
        public CreateDomainOptions(string domain, Option<string> description = default, Option<bool?> createdCatchAllInbox = default, Option<DomainTypeEnum?> domainType = default)
        {
            Domain = domain;
            DescriptionOption = description;
            CreatedCatchAllInboxOption = createdCatchAllInbox;
            DomainTypeOption = domainType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
        /// </summary>
        /// <value>Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.</value>
        public enum DomainTypeEnum
        {
            /// <summary>
            /// Enum HTTPINBOX for value: HTTP_INBOX
            /// </summary>
            HTTPINBOX = 1,

            /// <summary>
            /// Enum SMTPDOMAIN for value: SMTP_DOMAIN
            /// </summary>
            SMTPDOMAIN = 2
        }

        /// <summary>
        /// Returns a <see cref="DomainTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DomainTypeEnum DomainTypeEnumFromString(string value)
        {
            if (value.Equals("HTTP_INBOX"))
                return DomainTypeEnum.HTTPINBOX;

            if (value.Equals("SMTP_DOMAIN"))
                return DomainTypeEnum.SMTPDOMAIN;

            throw new NotImplementedException($"Could not convert value to type DomainTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DomainTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DomainTypeEnum? DomainTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("HTTP_INBOX"))
                return DomainTypeEnum.HTTPINBOX;

            if (value.Equals("SMTP_DOMAIN"))
                return DomainTypeEnum.SMTPDOMAIN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DomainTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DomainTypeEnumToJsonValue(DomainTypeEnum? value)
        {
            if (value == null)
                return null;

            if (value == DomainTypeEnum.HTTPINBOX)
                return "HTTP_INBOX";

            if (value == DomainTypeEnum.SMTPDOMAIN)
                return "SMTP_DOMAIN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of DomainType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DomainTypeEnum?> DomainTypeOption { get; private set; }

        /// <summary>
        /// Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
        /// </summary>
        /// <value>Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.</value>
        [JsonPropertyName("domainType")]
        public DomainTypeEnum? DomainType { get { return this.DomainTypeOption; } set { this.DomainTypeOption = new Option<DomainTypeEnum?>(value); } }

        /// <summary>
        /// The top level domain you wish to use with MailSlurp. Do not specify subdomain just the top level. So &#x60;test.com&#x60; covers all subdomains such as &#x60;mail.test.com&#x60;. Don&#39;t include a protocol such as &#x60;http://&#x60;. Once added you must complete the verification steps by adding the returned records to your domain.
        /// </summary>
        /// <value>The top level domain you wish to use with MailSlurp. Do not specify subdomain just the top level. So &#x60;test.com&#x60; covers all subdomains such as &#x60;mail.test.com&#x60;. Don&#39;t include a protocol such as &#x60;http://&#x60;. Once added you must complete the verification steps by adding the returned records to your domain.</value>
        [JsonPropertyName("domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Optional description of the domain.
        /// </summary>
        /// <value>Optional description of the domain.</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreatedCatchAllInbox
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CreatedCatchAllInboxOption { get; private set; }

        /// <summary>
        /// Whether to create a catch all inbox for the domain. Any email sent to an address using your domain that cannot be matched to an existing inbox you created with the domain will be routed to the created catch all inbox. You can access emails using the regular methods on this inbox ID.
        /// </summary>
        /// <value>Whether to create a catch all inbox for the domain. Any email sent to an address using your domain that cannot be matched to an existing inbox you created with the domain will be routed to the created catch all inbox. You can access emails using the regular methods on this inbox ID.</value>
        [JsonPropertyName("createdCatchAllInbox")]
        public bool? CreatedCatchAllInbox { get { return this.CreatedCatchAllInboxOption; } set { this.CreatedCatchAllInboxOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDomainOptions {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedCatchAllInbox: ").Append(CreatedCatchAllInbox).Append("\n");
            sb.Append("  DomainType: ").Append(DomainType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateDomainOptions" />
    /// </summary>
    public class CreateDomainOptionsJsonConverter : JsonConverter<CreateDomainOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateDomainOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateDomainOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> domain = default;
            Option<string> description = default;
            Option<bool?> createdCatchAllInbox = default;
            Option<CreateDomainOptions.DomainTypeEnum?> domainType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domain":
                            domain = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdCatchAllInbox":
                            createdCatchAllInbox = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "domainType":
                            string domainTypeRawValue = utf8JsonReader.GetString();
                            if (domainTypeRawValue != null)
                                domainType = new Option<CreateDomainOptions.DomainTypeEnum?>(CreateDomainOptions.DomainTypeEnumFromStringOrDefault(domainTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!domain.IsSet)
                throw new ArgumentException("Property is required for class CreateDomainOptions.", nameof(domain));

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class CreateDomainOptions.");

            return new CreateDomainOptions(domain.Value, description, createdCatchAllInbox, domainType);
        }

        /// <summary>
        /// Serializes a <see cref="CreateDomainOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDomainOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateDomainOptions createDomainOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createDomainOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateDomainOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDomainOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateDomainOptions createDomainOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createDomainOptions.Domain == null)
                throw new ArgumentNullException(nameof(createDomainOptions.Domain), "Property is required for class CreateDomainOptions.");

            writer.WriteString("domain", createDomainOptions.Domain);

            if (createDomainOptions.DescriptionOption.IsSet)
                if (createDomainOptions.DescriptionOption.Value != null)
                    writer.WriteString("description", createDomainOptions.Description);
                else
                    writer.WriteNull("description");

            if (createDomainOptions.CreatedCatchAllInboxOption.IsSet)
                if (createDomainOptions.CreatedCatchAllInboxOption.Value != null)
                    writer.WriteBoolean("createdCatchAllInbox", createDomainOptions.CreatedCatchAllInboxOption.Value.Value);
                else
                    writer.WriteNull("createdCatchAllInbox");

            var domainTypeRawValue = CreateDomainOptions.DomainTypeEnumToJsonValue(createDomainOptions.DomainTypeOption.Value.Value);
            if (domainTypeRawValue != null)
                writer.WriteString("domainType", domainTypeRawValue);
            else
                writer.WriteNull("domainType");
        }
    }
}
