/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// GetOrCreateSamlUserOptions
    /// </summary>
    [DataContract]
    public partial class GetOrCreateSamlUserOptions :  IEquatable<GetOrCreateSamlUserOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOrCreateSamlUserOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetOrCreateSamlUserOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOrCreateSamlUserOptions" /> class.
        /// </summary>
        /// <param name="issuer">issuer (required).</param>
        /// <param name="nameId">nameId (required).</param>
        /// <param name="nameIdFormat">nameIdFormat.</param>
        public GetOrCreateSamlUserOptions(string issuer = default(string), string nameId = default(string), string nameIdFormat = default(string))
        {
            // to ensure "issuer" is required (not null)
            this.Issuer = issuer ?? throw new ArgumentNullException("issuer is a required property for GetOrCreateSamlUserOptions and cannot be null");
            // to ensure "nameId" is required (not null)
            this.NameId = nameId ?? throw new ArgumentNullException("nameId is a required property for GetOrCreateSamlUserOptions and cannot be null");
            this.NameIdFormat = nameIdFormat;
        }
        
        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public string Issuer { get; set; }

        /// <summary>
        /// Gets or Sets NameId
        /// </summary>
        [DataMember(Name="nameId", EmitDefaultValue=false)]
        public string NameId { get; set; }

        /// <summary>
        /// Gets or Sets NameIdFormat
        /// </summary>
        [DataMember(Name="nameIdFormat", EmitDefaultValue=false)]
        public string NameIdFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetOrCreateSamlUserOptions {\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  NameId: ").Append(NameId).Append("\n");
            sb.Append("  NameIdFormat: ").Append(NameIdFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetOrCreateSamlUserOptions);
        }

        /// <summary>
        /// Returns true if GetOrCreateSamlUserOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of GetOrCreateSamlUserOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetOrCreateSamlUserOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.NameId == input.NameId ||
                    (this.NameId != null &&
                    this.NameId.Equals(input.NameId))
                ) && 
                (
                    this.NameIdFormat == input.NameIdFormat ||
                    (this.NameIdFormat != null &&
                    this.NameIdFormat.Equals(input.NameIdFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.NameId != null)
                    hashCode = hashCode * 59 + this.NameId.GetHashCode();
                if (this.NameIdFormat != null)
                    hashCode = hashCode * 59 + this.NameIdFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
