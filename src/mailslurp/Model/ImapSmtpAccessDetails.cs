/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Access details for inbox using SMTP or IMAP
    /// </summary>
    [DataContract(Name = "ImapSmtpAccessDetails")]
    public partial class ImapSmtpAccessDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapSmtpAccessDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImapSmtpAccessDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapSmtpAccessDetails" /> class.
        /// </summary>
        /// <param name="emailAddress">Email address for SMTP/IMAP login (required).</param>
        /// <param name="secureSmtpServerHost">Secure TLS SMTP server host domain (required).</param>
        /// <param name="secureSmtpServerPort">Secure TLS SMTP server host port (required).</param>
        /// <param name="secureSmtpUsername">Secure TLS SMTP username for login (required).</param>
        /// <param name="secureSmtpPassword">Secure TLS SMTP password for login (required).</param>
        /// <param name="smtpServerHost">SMTP server host domain (required).</param>
        /// <param name="smtpServerPort">SMTP server host port (required).</param>
        /// <param name="smtpUsername">SMTP username for login (required).</param>
        /// <param name="smtpPassword">SMTP password for login (required).</param>
        /// <param name="secureImapServerHost">Secure TLS IMAP server host domain (required).</param>
        /// <param name="secureImapServerPort">Secure TLS IMAP server host port (required).</param>
        /// <param name="secureImapUsername">Secure TLS IMAP username for login (required).</param>
        /// <param name="secureImapPassword">Secure TLS IMAP password for login (required).</param>
        /// <param name="imapServerHost">IMAP server host domain (required).</param>
        /// <param name="imapServerPort">IMAP server host port (required).</param>
        /// <param name="imapUsername">IMAP username for login (required).</param>
        /// <param name="imapPassword">IMAP password for login (required).</param>
        /// <param name="imapMailbox">IMAP mailbox to SELECT (required).</param>
        /// <param name="mailFromDomain">Mail from domain or SMTP HELO value.</param>
        public ImapSmtpAccessDetails(string emailAddress = default, string secureSmtpServerHost = default, int secureSmtpServerPort = default, string secureSmtpUsername = default, string secureSmtpPassword = default, string smtpServerHost = default, int smtpServerPort = default, string smtpUsername = default, string smtpPassword = default, string secureImapServerHost = default, int secureImapServerPort = default, string secureImapUsername = default, string secureImapPassword = default, string imapServerHost = default, int imapServerPort = default, string imapUsername = default, string imapPassword = default, string imapMailbox = default, string mailFromDomain = default)
        {
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new ArgumentNullException("emailAddress is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.EmailAddress = emailAddress;
            // to ensure "secureSmtpServerHost" is required (not null)
            if (secureSmtpServerHost == null)
            {
                throw new ArgumentNullException("secureSmtpServerHost is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.SecureSmtpServerHost = secureSmtpServerHost;
            this.SecureSmtpServerPort = secureSmtpServerPort;
            // to ensure "secureSmtpUsername" is required (not null)
            if (secureSmtpUsername == null)
            {
                throw new ArgumentNullException("secureSmtpUsername is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.SecureSmtpUsername = secureSmtpUsername;
            // to ensure "secureSmtpPassword" is required (not null)
            if (secureSmtpPassword == null)
            {
                throw new ArgumentNullException("secureSmtpPassword is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.SecureSmtpPassword = secureSmtpPassword;
            // to ensure "smtpServerHost" is required (not null)
            if (smtpServerHost == null)
            {
                throw new ArgumentNullException("smtpServerHost is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.SmtpServerHost = smtpServerHost;
            this.SmtpServerPort = smtpServerPort;
            // to ensure "smtpUsername" is required (not null)
            if (smtpUsername == null)
            {
                throw new ArgumentNullException("smtpUsername is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.SmtpUsername = smtpUsername;
            // to ensure "smtpPassword" is required (not null)
            if (smtpPassword == null)
            {
                throw new ArgumentNullException("smtpPassword is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.SmtpPassword = smtpPassword;
            // to ensure "secureImapServerHost" is required (not null)
            if (secureImapServerHost == null)
            {
                throw new ArgumentNullException("secureImapServerHost is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.SecureImapServerHost = secureImapServerHost;
            this.SecureImapServerPort = secureImapServerPort;
            // to ensure "secureImapUsername" is required (not null)
            if (secureImapUsername == null)
            {
                throw new ArgumentNullException("secureImapUsername is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.SecureImapUsername = secureImapUsername;
            // to ensure "secureImapPassword" is required (not null)
            if (secureImapPassword == null)
            {
                throw new ArgumentNullException("secureImapPassword is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.SecureImapPassword = secureImapPassword;
            // to ensure "imapServerHost" is required (not null)
            if (imapServerHost == null)
            {
                throw new ArgumentNullException("imapServerHost is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.ImapServerHost = imapServerHost;
            this.ImapServerPort = imapServerPort;
            // to ensure "imapUsername" is required (not null)
            if (imapUsername == null)
            {
                throw new ArgumentNullException("imapUsername is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.ImapUsername = imapUsername;
            // to ensure "imapPassword" is required (not null)
            if (imapPassword == null)
            {
                throw new ArgumentNullException("imapPassword is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.ImapPassword = imapPassword;
            // to ensure "imapMailbox" is required (not null)
            if (imapMailbox == null)
            {
                throw new ArgumentNullException("imapMailbox is a required property for ImapSmtpAccessDetails and cannot be null");
            }
            this.ImapMailbox = imapMailbox;
            this.MailFromDomain = mailFromDomain;
        }

        /// <summary>
        /// Email address for SMTP/IMAP login
        /// </summary>
        /// <value>Email address for SMTP/IMAP login</value>
        [DataMember(Name = "emailAddress", IsRequired = true, EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Secure TLS SMTP server host domain
        /// </summary>
        /// <value>Secure TLS SMTP server host domain</value>
        [DataMember(Name = "secureSmtpServerHost", IsRequired = true, EmitDefaultValue = true)]
        public string SecureSmtpServerHost { get; set; }

        /// <summary>
        /// Secure TLS SMTP server host port
        /// </summary>
        /// <value>Secure TLS SMTP server host port</value>
        [DataMember(Name = "secureSmtpServerPort", IsRequired = true, EmitDefaultValue = true)]
        public int SecureSmtpServerPort { get; set; }

        /// <summary>
        /// Secure TLS SMTP username for login
        /// </summary>
        /// <value>Secure TLS SMTP username for login</value>
        [DataMember(Name = "secureSmtpUsername", IsRequired = true, EmitDefaultValue = true)]
        public string SecureSmtpUsername { get; set; }

        /// <summary>
        /// Secure TLS SMTP password for login
        /// </summary>
        /// <value>Secure TLS SMTP password for login</value>
        [DataMember(Name = "secureSmtpPassword", IsRequired = true, EmitDefaultValue = true)]
        public string SecureSmtpPassword { get; set; }

        /// <summary>
        /// SMTP server host domain
        /// </summary>
        /// <value>SMTP server host domain</value>
        [DataMember(Name = "smtpServerHost", IsRequired = true, EmitDefaultValue = true)]
        public string SmtpServerHost { get; set; }

        /// <summary>
        /// SMTP server host port
        /// </summary>
        /// <value>SMTP server host port</value>
        [DataMember(Name = "smtpServerPort", IsRequired = true, EmitDefaultValue = true)]
        public int SmtpServerPort { get; set; }

        /// <summary>
        /// SMTP username for login
        /// </summary>
        /// <value>SMTP username for login</value>
        [DataMember(Name = "smtpUsername", IsRequired = true, EmitDefaultValue = true)]
        public string SmtpUsername { get; set; }

        /// <summary>
        /// SMTP password for login
        /// </summary>
        /// <value>SMTP password for login</value>
        [DataMember(Name = "smtpPassword", IsRequired = true, EmitDefaultValue = true)]
        public string SmtpPassword { get; set; }

        /// <summary>
        /// Secure TLS IMAP server host domain
        /// </summary>
        /// <value>Secure TLS IMAP server host domain</value>
        [DataMember(Name = "secureImapServerHost", IsRequired = true, EmitDefaultValue = true)]
        public string SecureImapServerHost { get; set; }

        /// <summary>
        /// Secure TLS IMAP server host port
        /// </summary>
        /// <value>Secure TLS IMAP server host port</value>
        [DataMember(Name = "secureImapServerPort", IsRequired = true, EmitDefaultValue = true)]
        public int SecureImapServerPort { get; set; }

        /// <summary>
        /// Secure TLS IMAP username for login
        /// </summary>
        /// <value>Secure TLS IMAP username for login</value>
        [DataMember(Name = "secureImapUsername", IsRequired = true, EmitDefaultValue = true)]
        public string SecureImapUsername { get; set; }

        /// <summary>
        /// Secure TLS IMAP password for login
        /// </summary>
        /// <value>Secure TLS IMAP password for login</value>
        [DataMember(Name = "secureImapPassword", IsRequired = true, EmitDefaultValue = true)]
        public string SecureImapPassword { get; set; }

        /// <summary>
        /// IMAP server host domain
        /// </summary>
        /// <value>IMAP server host domain</value>
        [DataMember(Name = "imapServerHost", IsRequired = true, EmitDefaultValue = true)]
        public string ImapServerHost { get; set; }

        /// <summary>
        /// IMAP server host port
        /// </summary>
        /// <value>IMAP server host port</value>
        [DataMember(Name = "imapServerPort", IsRequired = true, EmitDefaultValue = true)]
        public int ImapServerPort { get; set; }

        /// <summary>
        /// IMAP username for login
        /// </summary>
        /// <value>IMAP username for login</value>
        [DataMember(Name = "imapUsername", IsRequired = true, EmitDefaultValue = true)]
        public string ImapUsername { get; set; }

        /// <summary>
        /// IMAP password for login
        /// </summary>
        /// <value>IMAP password for login</value>
        [DataMember(Name = "imapPassword", IsRequired = true, EmitDefaultValue = true)]
        public string ImapPassword { get; set; }

        /// <summary>
        /// IMAP mailbox to SELECT
        /// </summary>
        /// <value>IMAP mailbox to SELECT</value>
        [DataMember(Name = "imapMailbox", IsRequired = true, EmitDefaultValue = true)]
        public string ImapMailbox { get; set; }

        /// <summary>
        /// Mail from domain or SMTP HELO value
        /// </summary>
        /// <value>Mail from domain or SMTP HELO value</value>
        [DataMember(Name = "mailFromDomain", EmitDefaultValue = true)]
        public string MailFromDomain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImapSmtpAccessDetails {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  SecureSmtpServerHost: ").Append(SecureSmtpServerHost).Append("\n");
            sb.Append("  SecureSmtpServerPort: ").Append(SecureSmtpServerPort).Append("\n");
            sb.Append("  SecureSmtpUsername: ").Append(SecureSmtpUsername).Append("\n");
            sb.Append("  SecureSmtpPassword: ").Append(SecureSmtpPassword).Append("\n");
            sb.Append("  SmtpServerHost: ").Append(SmtpServerHost).Append("\n");
            sb.Append("  SmtpServerPort: ").Append(SmtpServerPort).Append("\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("  SecureImapServerHost: ").Append(SecureImapServerHost).Append("\n");
            sb.Append("  SecureImapServerPort: ").Append(SecureImapServerPort).Append("\n");
            sb.Append("  SecureImapUsername: ").Append(SecureImapUsername).Append("\n");
            sb.Append("  SecureImapPassword: ").Append(SecureImapPassword).Append("\n");
            sb.Append("  ImapServerHost: ").Append(ImapServerHost).Append("\n");
            sb.Append("  ImapServerPort: ").Append(ImapServerPort).Append("\n");
            sb.Append("  ImapUsername: ").Append(ImapUsername).Append("\n");
            sb.Append("  ImapPassword: ").Append(ImapPassword).Append("\n");
            sb.Append("  ImapMailbox: ").Append(ImapMailbox).Append("\n");
            sb.Append("  MailFromDomain: ").Append(MailFromDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
