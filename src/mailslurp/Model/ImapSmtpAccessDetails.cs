/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// ImapSmtpAccessDetails
    /// </summary>
    [DataContract]
    public partial class ImapSmtpAccessDetails :  IEquatable<ImapSmtpAccessDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapSmtpAccessDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImapSmtpAccessDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapSmtpAccessDetails" /> class.
        /// </summary>
        /// <param name="smtpServerHost">smtpServerHost (required).</param>
        /// <param name="smtpServerPort">smtpServerPort (required).</param>
        /// <param name="smtpUsername">smtpUsername (required).</param>
        /// <param name="smtpPassword">smtpPassword (required).</param>
        /// <param name="imapServerHost">imapServerHost (required).</param>
        /// <param name="imapServerPort">imapServerPort (required).</param>
        /// <param name="imapUsername">imapUsername (required).</param>
        /// <param name="imapPassword">imapPassword (required).</param>
        public ImapSmtpAccessDetails(string smtpServerHost = default(string), int smtpServerPort = default(int), string smtpUsername = default(string), string smtpPassword = default(string), string imapServerHost = default(string), int imapServerPort = default(int), string imapUsername = default(string), string imapPassword = default(string))
        {
            // to ensure "smtpServerHost" is required (not null)
            this.SmtpServerHost = smtpServerHost ?? throw new ArgumentNullException("smtpServerHost is a required property for ImapSmtpAccessDetails and cannot be null");
            this.SmtpServerPort = smtpServerPort;
            // to ensure "smtpUsername" is required (not null)
            this.SmtpUsername = smtpUsername ?? throw new ArgumentNullException("smtpUsername is a required property for ImapSmtpAccessDetails and cannot be null");
            // to ensure "smtpPassword" is required (not null)
            this.SmtpPassword = smtpPassword ?? throw new ArgumentNullException("smtpPassword is a required property for ImapSmtpAccessDetails and cannot be null");
            // to ensure "imapServerHost" is required (not null)
            this.ImapServerHost = imapServerHost ?? throw new ArgumentNullException("imapServerHost is a required property for ImapSmtpAccessDetails and cannot be null");
            this.ImapServerPort = imapServerPort;
            // to ensure "imapUsername" is required (not null)
            this.ImapUsername = imapUsername ?? throw new ArgumentNullException("imapUsername is a required property for ImapSmtpAccessDetails and cannot be null");
            // to ensure "imapPassword" is required (not null)
            this.ImapPassword = imapPassword ?? throw new ArgumentNullException("imapPassword is a required property for ImapSmtpAccessDetails and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets SmtpServerHost
        /// </summary>
        [DataMember(Name="smtpServerHost", EmitDefaultValue=false)]
        public string SmtpServerHost { get; set; }

        /// <summary>
        /// Gets or Sets SmtpServerPort
        /// </summary>
        [DataMember(Name="smtpServerPort", EmitDefaultValue=false)]
        public int SmtpServerPort { get; set; }

        /// <summary>
        /// Gets or Sets SmtpUsername
        /// </summary>
        [DataMember(Name="smtpUsername", EmitDefaultValue=false)]
        public string SmtpUsername { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPassword
        /// </summary>
        [DataMember(Name="smtpPassword", EmitDefaultValue=false)]
        public string SmtpPassword { get; set; }

        /// <summary>
        /// Gets or Sets ImapServerHost
        /// </summary>
        [DataMember(Name="imapServerHost", EmitDefaultValue=false)]
        public string ImapServerHost { get; set; }

        /// <summary>
        /// Gets or Sets ImapServerPort
        /// </summary>
        [DataMember(Name="imapServerPort", EmitDefaultValue=false)]
        public int ImapServerPort { get; set; }

        /// <summary>
        /// Gets or Sets ImapUsername
        /// </summary>
        [DataMember(Name="imapUsername", EmitDefaultValue=false)]
        public string ImapUsername { get; set; }

        /// <summary>
        /// Gets or Sets ImapPassword
        /// </summary>
        [DataMember(Name="imapPassword", EmitDefaultValue=false)]
        public string ImapPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImapSmtpAccessDetails {\n");
            sb.Append("  SmtpServerHost: ").Append(SmtpServerHost).Append("\n");
            sb.Append("  SmtpServerPort: ").Append(SmtpServerPort).Append("\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("  ImapServerHost: ").Append(ImapServerHost).Append("\n");
            sb.Append("  ImapServerPort: ").Append(ImapServerPort).Append("\n");
            sb.Append("  ImapUsername: ").Append(ImapUsername).Append("\n");
            sb.Append("  ImapPassword: ").Append(ImapPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImapSmtpAccessDetails);
        }

        /// <summary>
        /// Returns true if ImapSmtpAccessDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ImapSmtpAccessDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImapSmtpAccessDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SmtpServerHost == input.SmtpServerHost ||
                    (this.SmtpServerHost != null &&
                    this.SmtpServerHost.Equals(input.SmtpServerHost))
                ) && 
                (
                    this.SmtpServerPort == input.SmtpServerPort ||
                    this.SmtpServerPort.Equals(input.SmtpServerPort)
                ) && 
                (
                    this.SmtpUsername == input.SmtpUsername ||
                    (this.SmtpUsername != null &&
                    this.SmtpUsername.Equals(input.SmtpUsername))
                ) && 
                (
                    this.SmtpPassword == input.SmtpPassword ||
                    (this.SmtpPassword != null &&
                    this.SmtpPassword.Equals(input.SmtpPassword))
                ) && 
                (
                    this.ImapServerHost == input.ImapServerHost ||
                    (this.ImapServerHost != null &&
                    this.ImapServerHost.Equals(input.ImapServerHost))
                ) && 
                (
                    this.ImapServerPort == input.ImapServerPort ||
                    this.ImapServerPort.Equals(input.ImapServerPort)
                ) && 
                (
                    this.ImapUsername == input.ImapUsername ||
                    (this.ImapUsername != null &&
                    this.ImapUsername.Equals(input.ImapUsername))
                ) && 
                (
                    this.ImapPassword == input.ImapPassword ||
                    (this.ImapPassword != null &&
                    this.ImapPassword.Equals(input.ImapPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SmtpServerHost != null)
                    hashCode = hashCode * 59 + this.SmtpServerHost.GetHashCode();
                hashCode = hashCode * 59 + this.SmtpServerPort.GetHashCode();
                if (this.SmtpUsername != null)
                    hashCode = hashCode * 59 + this.SmtpUsername.GetHashCode();
                if (this.SmtpPassword != null)
                    hashCode = hashCode * 59 + this.SmtpPassword.GetHashCode();
                if (this.ImapServerHost != null)
                    hashCode = hashCode * 59 + this.ImapServerHost.GetHashCode();
                hashCode = hashCode * 59 + this.ImapServerPort.GetHashCode();
                if (this.ImapUsername != null)
                    hashCode = hashCode * 59 + this.ImapUsername.GetHashCode();
                if (this.ImapPassword != null)
                    hashCode = hashCode * 59 + this.ImapPassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
