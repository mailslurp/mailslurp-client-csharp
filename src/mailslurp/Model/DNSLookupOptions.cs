// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for DNS query.
    /// </summary>
    public partial class DNSLookupOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DNSLookupOptions" /> class.
        /// </summary>
        /// <param name="hostname">List of record types you wish to query such as MX, DNS, TXT, NS, A etc.</param>
        /// <param name="recordTypes">List of record types you wish to query such as MX, DNS, TXT, NS, A etc.</param>
        /// <param name="omitFinalDNSDot">Optionally control whether to omit the final dot in full DNS name values.</param>
        [JsonConstructor]
        public DNSLookupOptions(string hostname, List<DNSLookupOptions.RecordTypesEnum> recordTypes, bool omitFinalDNSDot)
        {
            Hostname = hostname;
            RecordTypes = recordTypes;
            OmitFinalDNSDot = omitFinalDNSDot;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Domain Name Server Record Types
        /// </summary>
        /// <value>Domain Name Server Record Types</value>
        public enum RecordTypesEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            A = 1,

            /// <summary>
            /// Enum NS for value: NS
            /// </summary>
            NS = 2,

            /// <summary>
            /// Enum MD for value: MD
            /// </summary>
            MD = 3,

            /// <summary>
            /// Enum MF for value: MF
            /// </summary>
            MF = 4,

            /// <summary>
            /// Enum CNAME for value: CNAME
            /// </summary>
            CNAME = 5,

            /// <summary>
            /// Enum SOA for value: SOA
            /// </summary>
            SOA = 6,

            /// <summary>
            /// Enum MB for value: MB
            /// </summary>
            MB = 7,

            /// <summary>
            /// Enum MG for value: MG
            /// </summary>
            MG = 8,

            /// <summary>
            /// Enum MR for value: MR
            /// </summary>
            MR = 9,

            /// <summary>
            /// Enum NULL for value: NULL
            /// </summary>
            NULL = 10,

            /// <summary>
            /// Enum WKS for value: WKS
            /// </summary>
            WKS = 11,

            /// <summary>
            /// Enum PTR for value: PTR
            /// </summary>
            PTR = 12,

            /// <summary>
            /// Enum HINFO for value: HINFO
            /// </summary>
            HINFO = 13,

            /// <summary>
            /// Enum MINFO for value: MINFO
            /// </summary>
            MINFO = 14,

            /// <summary>
            /// Enum MX for value: MX
            /// </summary>
            MX = 15,

            /// <summary>
            /// Enum TXT for value: TXT
            /// </summary>
            TXT = 16,

            /// <summary>
            /// Enum RP for value: RP
            /// </summary>
            RP = 17,

            /// <summary>
            /// Enum AFSDB for value: AFSDB
            /// </summary>
            AFSDB = 18,

            /// <summary>
            /// Enum X25 for value: X25
            /// </summary>
            X25 = 19,

            /// <summary>
            /// Enum ISDN for value: ISDN
            /// </summary>
            ISDN = 20,

            /// <summary>
            /// Enum RT for value: RT
            /// </summary>
            RT = 21,

            /// <summary>
            /// Enum NSAP for value: NSAP
            /// </summary>
            NSAP = 22,

            /// <summary>
            /// Enum NSAPPTR for value: NSAP_PTR
            /// </summary>
            NSAPPTR = 23,

            /// <summary>
            /// Enum SIG for value: SIG
            /// </summary>
            SIG = 24,

            /// <summary>
            /// Enum KEY for value: KEY
            /// </summary>
            KEY = 25,

            /// <summary>
            /// Enum PX for value: PX
            /// </summary>
            PX = 26,

            /// <summary>
            /// Enum GPOS for value: GPOS
            /// </summary>
            GPOS = 27,

            /// <summary>
            /// Enum AAAA for value: AAAA
            /// </summary>
            AAAA = 28,

            /// <summary>
            /// Enum LOC for value: LOC
            /// </summary>
            LOC = 29,

            /// <summary>
            /// Enum NXT for value: NXT
            /// </summary>
            NXT = 30,

            /// <summary>
            /// Enum EID for value: EID
            /// </summary>
            EID = 31,

            /// <summary>
            /// Enum NIMLOC for value: NIMLOC
            /// </summary>
            NIMLOC = 32,

            /// <summary>
            /// Enum SRV for value: SRV
            /// </summary>
            SRV = 33,

            /// <summary>
            /// Enum ATMA for value: ATMA
            /// </summary>
            ATMA = 34,

            /// <summary>
            /// Enum NAPTR for value: NAPTR
            /// </summary>
            NAPTR = 35,

            /// <summary>
            /// Enum KX for value: KX
            /// </summary>
            KX = 36,

            /// <summary>
            /// Enum CERT for value: CERT
            /// </summary>
            CERT = 37,

            /// <summary>
            /// Enum A6 for value: A6
            /// </summary>
            A6 = 38,

            /// <summary>
            /// Enum DNAME for value: DNAME
            /// </summary>
            DNAME = 39,

            /// <summary>
            /// Enum SINK for value: SINK
            /// </summary>
            SINK = 40,

            /// <summary>
            /// Enum OPT for value: OPT
            /// </summary>
            OPT = 41,

            /// <summary>
            /// Enum APL for value: APL
            /// </summary>
            APL = 42,

            /// <summary>
            /// Enum DS for value: DS
            /// </summary>
            DS = 43,

            /// <summary>
            /// Enum SSHFP for value: SSHFP
            /// </summary>
            SSHFP = 44,

            /// <summary>
            /// Enum IPSECKEY for value: IPSECKEY
            /// </summary>
            IPSECKEY = 45,

            /// <summary>
            /// Enum RRSIG for value: RRSIG
            /// </summary>
            RRSIG = 46,

            /// <summary>
            /// Enum NSEC for value: NSEC
            /// </summary>
            NSEC = 47,

            /// <summary>
            /// Enum DNSKEY for value: DNSKEY
            /// </summary>
            DNSKEY = 48,

            /// <summary>
            /// Enum DHCID for value: DHCID
            /// </summary>
            DHCID = 49,

            /// <summary>
            /// Enum NSEC3 for value: NSEC3
            /// </summary>
            NSEC3 = 50,

            /// <summary>
            /// Enum NSEC3PARAM for value: NSEC3PARAM
            /// </summary>
            NSEC3PARAM = 51,

            /// <summary>
            /// Enum TLSA for value: TLSA
            /// </summary>
            TLSA = 52,

            /// <summary>
            /// Enum SMIMEA for value: SMIMEA
            /// </summary>
            SMIMEA = 53,

            /// <summary>
            /// Enum HIP for value: HIP
            /// </summary>
            HIP = 54,

            /// <summary>
            /// Enum NINFO for value: NINFO
            /// </summary>
            NINFO = 55,

            /// <summary>
            /// Enum RKEY for value: RKEY
            /// </summary>
            RKEY = 56,

            /// <summary>
            /// Enum TALINK for value: TALINK
            /// </summary>
            TALINK = 57,

            /// <summary>
            /// Enum CDS for value: CDS
            /// </summary>
            CDS = 58,

            /// <summary>
            /// Enum CDNSKEY for value: CDNSKEY
            /// </summary>
            CDNSKEY = 59,

            /// <summary>
            /// Enum OPENPGPKEY for value: OPENPGPKEY
            /// </summary>
            OPENPGPKEY = 60,

            /// <summary>
            /// Enum CSYNC for value: CSYNC
            /// </summary>
            CSYNC = 61,

            /// <summary>
            /// Enum ZONEMD for value: ZONEMD
            /// </summary>
            ZONEMD = 62,

            /// <summary>
            /// Enum SVCB for value: SVCB
            /// </summary>
            SVCB = 63,

            /// <summary>
            /// Enum HTTPS for value: HTTPS
            /// </summary>
            HTTPS = 64,

            /// <summary>
            /// Enum SPF for value: SPF
            /// </summary>
            SPF = 65,

            /// <summary>
            /// Enum UINFO for value: UINFO
            /// </summary>
            UINFO = 66,

            /// <summary>
            /// Enum UID for value: UID
            /// </summary>
            UID = 67,

            /// <summary>
            /// Enum GID for value: GID
            /// </summary>
            GID = 68,

            /// <summary>
            /// Enum UNSPEC for value: UNSPEC
            /// </summary>
            UNSPEC = 69,

            /// <summary>
            /// Enum NID for value: NID
            /// </summary>
            NID = 70,

            /// <summary>
            /// Enum L32 for value: L32
            /// </summary>
            L32 = 71,

            /// <summary>
            /// Enum L64 for value: L64
            /// </summary>
            L64 = 72,

            /// <summary>
            /// Enum LP for value: LP
            /// </summary>
            LP = 73,

            /// <summary>
            /// Enum EUI48 for value: EUI48
            /// </summary>
            EUI48 = 74,

            /// <summary>
            /// Enum EUI64 for value: EUI64
            /// </summary>
            EUI64 = 75,

            /// <summary>
            /// Enum TKEY for value: TKEY
            /// </summary>
            TKEY = 76,

            /// <summary>
            /// Enum TSIG for value: TSIG
            /// </summary>
            TSIG = 77,

            /// <summary>
            /// Enum IXFR for value: IXFR
            /// </summary>
            IXFR = 78,

            /// <summary>
            /// Enum AXFR for value: AXFR
            /// </summary>
            AXFR = 79,

            /// <summary>
            /// Enum MAILB for value: MAILB
            /// </summary>
            MAILB = 80,

            /// <summary>
            /// Enum MAILA for value: MAILA
            /// </summary>
            MAILA = 81,

            /// <summary>
            /// Enum ANY for value: ANY
            /// </summary>
            ANY = 82,

            /// <summary>
            /// Enum URI for value: URI
            /// </summary>
            URI = 83,

            /// <summary>
            /// Enum CAA for value: CAA
            /// </summary>
            CAA = 84,

            /// <summary>
            /// Enum AVC for value: AVC
            /// </summary>
            AVC = 85,

            /// <summary>
            /// Enum DOA for value: DOA
            /// </summary>
            DOA = 86,

            /// <summary>
            /// Enum AMTRELAY for value: AMTRELAY
            /// </summary>
            AMTRELAY = 87,

            /// <summary>
            /// Enum TA for value: TA
            /// </summary>
            TA = 88,

            /// <summary>
            /// Enum DLV for value: DLV
            /// </summary>
            DLV = 89
        }

        /// <summary>
        /// Returns a <see cref="RecordTypesEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RecordTypesEnum RecordTypesEnumFromString(string value)
        {
            if (value.Equals("A"))
                return RecordTypesEnum.A;

            if (value.Equals("NS"))
                return RecordTypesEnum.NS;

            if (value.Equals("MD"))
                return RecordTypesEnum.MD;

            if (value.Equals("MF"))
                return RecordTypesEnum.MF;

            if (value.Equals("CNAME"))
                return RecordTypesEnum.CNAME;

            if (value.Equals("SOA"))
                return RecordTypesEnum.SOA;

            if (value.Equals("MB"))
                return RecordTypesEnum.MB;

            if (value.Equals("MG"))
                return RecordTypesEnum.MG;

            if (value.Equals("MR"))
                return RecordTypesEnum.MR;

            if (value.Equals("NULL"))
                return RecordTypesEnum.NULL;

            if (value.Equals("WKS"))
                return RecordTypesEnum.WKS;

            if (value.Equals("PTR"))
                return RecordTypesEnum.PTR;

            if (value.Equals("HINFO"))
                return RecordTypesEnum.HINFO;

            if (value.Equals("MINFO"))
                return RecordTypesEnum.MINFO;

            if (value.Equals("MX"))
                return RecordTypesEnum.MX;

            if (value.Equals("TXT"))
                return RecordTypesEnum.TXT;

            if (value.Equals("RP"))
                return RecordTypesEnum.RP;

            if (value.Equals("AFSDB"))
                return RecordTypesEnum.AFSDB;

            if (value.Equals("X25"))
                return RecordTypesEnum.X25;

            if (value.Equals("ISDN"))
                return RecordTypesEnum.ISDN;

            if (value.Equals("RT"))
                return RecordTypesEnum.RT;

            if (value.Equals("NSAP"))
                return RecordTypesEnum.NSAP;

            if (value.Equals("NSAP_PTR"))
                return RecordTypesEnum.NSAPPTR;

            if (value.Equals("SIG"))
                return RecordTypesEnum.SIG;

            if (value.Equals("KEY"))
                return RecordTypesEnum.KEY;

            if (value.Equals("PX"))
                return RecordTypesEnum.PX;

            if (value.Equals("GPOS"))
                return RecordTypesEnum.GPOS;

            if (value.Equals("AAAA"))
                return RecordTypesEnum.AAAA;

            if (value.Equals("LOC"))
                return RecordTypesEnum.LOC;

            if (value.Equals("NXT"))
                return RecordTypesEnum.NXT;

            if (value.Equals("EID"))
                return RecordTypesEnum.EID;

            if (value.Equals("NIMLOC"))
                return RecordTypesEnum.NIMLOC;

            if (value.Equals("SRV"))
                return RecordTypesEnum.SRV;

            if (value.Equals("ATMA"))
                return RecordTypesEnum.ATMA;

            if (value.Equals("NAPTR"))
                return RecordTypesEnum.NAPTR;

            if (value.Equals("KX"))
                return RecordTypesEnum.KX;

            if (value.Equals("CERT"))
                return RecordTypesEnum.CERT;

            if (value.Equals("A6"))
                return RecordTypesEnum.A6;

            if (value.Equals("DNAME"))
                return RecordTypesEnum.DNAME;

            if (value.Equals("SINK"))
                return RecordTypesEnum.SINK;

            if (value.Equals("OPT"))
                return RecordTypesEnum.OPT;

            if (value.Equals("APL"))
                return RecordTypesEnum.APL;

            if (value.Equals("DS"))
                return RecordTypesEnum.DS;

            if (value.Equals("SSHFP"))
                return RecordTypesEnum.SSHFP;

            if (value.Equals("IPSECKEY"))
                return RecordTypesEnum.IPSECKEY;

            if (value.Equals("RRSIG"))
                return RecordTypesEnum.RRSIG;

            if (value.Equals("NSEC"))
                return RecordTypesEnum.NSEC;

            if (value.Equals("DNSKEY"))
                return RecordTypesEnum.DNSKEY;

            if (value.Equals("DHCID"))
                return RecordTypesEnum.DHCID;

            if (value.Equals("NSEC3"))
                return RecordTypesEnum.NSEC3;

            if (value.Equals("NSEC3PARAM"))
                return RecordTypesEnum.NSEC3PARAM;

            if (value.Equals("TLSA"))
                return RecordTypesEnum.TLSA;

            if (value.Equals("SMIMEA"))
                return RecordTypesEnum.SMIMEA;

            if (value.Equals("HIP"))
                return RecordTypesEnum.HIP;

            if (value.Equals("NINFO"))
                return RecordTypesEnum.NINFO;

            if (value.Equals("RKEY"))
                return RecordTypesEnum.RKEY;

            if (value.Equals("TALINK"))
                return RecordTypesEnum.TALINK;

            if (value.Equals("CDS"))
                return RecordTypesEnum.CDS;

            if (value.Equals("CDNSKEY"))
                return RecordTypesEnum.CDNSKEY;

            if (value.Equals("OPENPGPKEY"))
                return RecordTypesEnum.OPENPGPKEY;

            if (value.Equals("CSYNC"))
                return RecordTypesEnum.CSYNC;

            if (value.Equals("ZONEMD"))
                return RecordTypesEnum.ZONEMD;

            if (value.Equals("SVCB"))
                return RecordTypesEnum.SVCB;

            if (value.Equals("HTTPS"))
                return RecordTypesEnum.HTTPS;

            if (value.Equals("SPF"))
                return RecordTypesEnum.SPF;

            if (value.Equals("UINFO"))
                return RecordTypesEnum.UINFO;

            if (value.Equals("UID"))
                return RecordTypesEnum.UID;

            if (value.Equals("GID"))
                return RecordTypesEnum.GID;

            if (value.Equals("UNSPEC"))
                return RecordTypesEnum.UNSPEC;

            if (value.Equals("NID"))
                return RecordTypesEnum.NID;

            if (value.Equals("L32"))
                return RecordTypesEnum.L32;

            if (value.Equals("L64"))
                return RecordTypesEnum.L64;

            if (value.Equals("LP"))
                return RecordTypesEnum.LP;

            if (value.Equals("EUI48"))
                return RecordTypesEnum.EUI48;

            if (value.Equals("EUI64"))
                return RecordTypesEnum.EUI64;

            if (value.Equals("TKEY"))
                return RecordTypesEnum.TKEY;

            if (value.Equals("TSIG"))
                return RecordTypesEnum.TSIG;

            if (value.Equals("IXFR"))
                return RecordTypesEnum.IXFR;

            if (value.Equals("AXFR"))
                return RecordTypesEnum.AXFR;

            if (value.Equals("MAILB"))
                return RecordTypesEnum.MAILB;

            if (value.Equals("MAILA"))
                return RecordTypesEnum.MAILA;

            if (value.Equals("ANY"))
                return RecordTypesEnum.ANY;

            if (value.Equals("URI"))
                return RecordTypesEnum.URI;

            if (value.Equals("CAA"))
                return RecordTypesEnum.CAA;

            if (value.Equals("AVC"))
                return RecordTypesEnum.AVC;

            if (value.Equals("DOA"))
                return RecordTypesEnum.DOA;

            if (value.Equals("AMTRELAY"))
                return RecordTypesEnum.AMTRELAY;

            if (value.Equals("TA"))
                return RecordTypesEnum.TA;

            if (value.Equals("DLV"))
                return RecordTypesEnum.DLV;

            throw new NotImplementedException($"Could not convert value to type RecordTypesEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RecordTypesEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RecordTypesEnum? RecordTypesEnumFromStringOrDefault(string value)
        {
            if (value.Equals("A"))
                return RecordTypesEnum.A;

            if (value.Equals("NS"))
                return RecordTypesEnum.NS;

            if (value.Equals("MD"))
                return RecordTypesEnum.MD;

            if (value.Equals("MF"))
                return RecordTypesEnum.MF;

            if (value.Equals("CNAME"))
                return RecordTypesEnum.CNAME;

            if (value.Equals("SOA"))
                return RecordTypesEnum.SOA;

            if (value.Equals("MB"))
                return RecordTypesEnum.MB;

            if (value.Equals("MG"))
                return RecordTypesEnum.MG;

            if (value.Equals("MR"))
                return RecordTypesEnum.MR;

            if (value.Equals("NULL"))
                return RecordTypesEnum.NULL;

            if (value.Equals("WKS"))
                return RecordTypesEnum.WKS;

            if (value.Equals("PTR"))
                return RecordTypesEnum.PTR;

            if (value.Equals("HINFO"))
                return RecordTypesEnum.HINFO;

            if (value.Equals("MINFO"))
                return RecordTypesEnum.MINFO;

            if (value.Equals("MX"))
                return RecordTypesEnum.MX;

            if (value.Equals("TXT"))
                return RecordTypesEnum.TXT;

            if (value.Equals("RP"))
                return RecordTypesEnum.RP;

            if (value.Equals("AFSDB"))
                return RecordTypesEnum.AFSDB;

            if (value.Equals("X25"))
                return RecordTypesEnum.X25;

            if (value.Equals("ISDN"))
                return RecordTypesEnum.ISDN;

            if (value.Equals("RT"))
                return RecordTypesEnum.RT;

            if (value.Equals("NSAP"))
                return RecordTypesEnum.NSAP;

            if (value.Equals("NSAP_PTR"))
                return RecordTypesEnum.NSAPPTR;

            if (value.Equals("SIG"))
                return RecordTypesEnum.SIG;

            if (value.Equals("KEY"))
                return RecordTypesEnum.KEY;

            if (value.Equals("PX"))
                return RecordTypesEnum.PX;

            if (value.Equals("GPOS"))
                return RecordTypesEnum.GPOS;

            if (value.Equals("AAAA"))
                return RecordTypesEnum.AAAA;

            if (value.Equals("LOC"))
                return RecordTypesEnum.LOC;

            if (value.Equals("NXT"))
                return RecordTypesEnum.NXT;

            if (value.Equals("EID"))
                return RecordTypesEnum.EID;

            if (value.Equals("NIMLOC"))
                return RecordTypesEnum.NIMLOC;

            if (value.Equals("SRV"))
                return RecordTypesEnum.SRV;

            if (value.Equals("ATMA"))
                return RecordTypesEnum.ATMA;

            if (value.Equals("NAPTR"))
                return RecordTypesEnum.NAPTR;

            if (value.Equals("KX"))
                return RecordTypesEnum.KX;

            if (value.Equals("CERT"))
                return RecordTypesEnum.CERT;

            if (value.Equals("A6"))
                return RecordTypesEnum.A6;

            if (value.Equals("DNAME"))
                return RecordTypesEnum.DNAME;

            if (value.Equals("SINK"))
                return RecordTypesEnum.SINK;

            if (value.Equals("OPT"))
                return RecordTypesEnum.OPT;

            if (value.Equals("APL"))
                return RecordTypesEnum.APL;

            if (value.Equals("DS"))
                return RecordTypesEnum.DS;

            if (value.Equals("SSHFP"))
                return RecordTypesEnum.SSHFP;

            if (value.Equals("IPSECKEY"))
                return RecordTypesEnum.IPSECKEY;

            if (value.Equals("RRSIG"))
                return RecordTypesEnum.RRSIG;

            if (value.Equals("NSEC"))
                return RecordTypesEnum.NSEC;

            if (value.Equals("DNSKEY"))
                return RecordTypesEnum.DNSKEY;

            if (value.Equals("DHCID"))
                return RecordTypesEnum.DHCID;

            if (value.Equals("NSEC3"))
                return RecordTypesEnum.NSEC3;

            if (value.Equals("NSEC3PARAM"))
                return RecordTypesEnum.NSEC3PARAM;

            if (value.Equals("TLSA"))
                return RecordTypesEnum.TLSA;

            if (value.Equals("SMIMEA"))
                return RecordTypesEnum.SMIMEA;

            if (value.Equals("HIP"))
                return RecordTypesEnum.HIP;

            if (value.Equals("NINFO"))
                return RecordTypesEnum.NINFO;

            if (value.Equals("RKEY"))
                return RecordTypesEnum.RKEY;

            if (value.Equals("TALINK"))
                return RecordTypesEnum.TALINK;

            if (value.Equals("CDS"))
                return RecordTypesEnum.CDS;

            if (value.Equals("CDNSKEY"))
                return RecordTypesEnum.CDNSKEY;

            if (value.Equals("OPENPGPKEY"))
                return RecordTypesEnum.OPENPGPKEY;

            if (value.Equals("CSYNC"))
                return RecordTypesEnum.CSYNC;

            if (value.Equals("ZONEMD"))
                return RecordTypesEnum.ZONEMD;

            if (value.Equals("SVCB"))
                return RecordTypesEnum.SVCB;

            if (value.Equals("HTTPS"))
                return RecordTypesEnum.HTTPS;

            if (value.Equals("SPF"))
                return RecordTypesEnum.SPF;

            if (value.Equals("UINFO"))
                return RecordTypesEnum.UINFO;

            if (value.Equals("UID"))
                return RecordTypesEnum.UID;

            if (value.Equals("GID"))
                return RecordTypesEnum.GID;

            if (value.Equals("UNSPEC"))
                return RecordTypesEnum.UNSPEC;

            if (value.Equals("NID"))
                return RecordTypesEnum.NID;

            if (value.Equals("L32"))
                return RecordTypesEnum.L32;

            if (value.Equals("L64"))
                return RecordTypesEnum.L64;

            if (value.Equals("LP"))
                return RecordTypesEnum.LP;

            if (value.Equals("EUI48"))
                return RecordTypesEnum.EUI48;

            if (value.Equals("EUI64"))
                return RecordTypesEnum.EUI64;

            if (value.Equals("TKEY"))
                return RecordTypesEnum.TKEY;

            if (value.Equals("TSIG"))
                return RecordTypesEnum.TSIG;

            if (value.Equals("IXFR"))
                return RecordTypesEnum.IXFR;

            if (value.Equals("AXFR"))
                return RecordTypesEnum.AXFR;

            if (value.Equals("MAILB"))
                return RecordTypesEnum.MAILB;

            if (value.Equals("MAILA"))
                return RecordTypesEnum.MAILA;

            if (value.Equals("ANY"))
                return RecordTypesEnum.ANY;

            if (value.Equals("URI"))
                return RecordTypesEnum.URI;

            if (value.Equals("CAA"))
                return RecordTypesEnum.CAA;

            if (value.Equals("AVC"))
                return RecordTypesEnum.AVC;

            if (value.Equals("DOA"))
                return RecordTypesEnum.DOA;

            if (value.Equals("AMTRELAY"))
                return RecordTypesEnum.AMTRELAY;

            if (value.Equals("TA"))
                return RecordTypesEnum.TA;

            if (value.Equals("DLV"))
                return RecordTypesEnum.DLV;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RecordTypesEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RecordTypesEnumToJsonValue(RecordTypesEnum value)
        {
            if (value == RecordTypesEnum.A)
                return "A";

            if (value == RecordTypesEnum.NS)
                return "NS";

            if (value == RecordTypesEnum.MD)
                return "MD";

            if (value == RecordTypesEnum.MF)
                return "MF";

            if (value == RecordTypesEnum.CNAME)
                return "CNAME";

            if (value == RecordTypesEnum.SOA)
                return "SOA";

            if (value == RecordTypesEnum.MB)
                return "MB";

            if (value == RecordTypesEnum.MG)
                return "MG";

            if (value == RecordTypesEnum.MR)
                return "MR";

            if (value == RecordTypesEnum.NULL)
                return "NULL";

            if (value == RecordTypesEnum.WKS)
                return "WKS";

            if (value == RecordTypesEnum.PTR)
                return "PTR";

            if (value == RecordTypesEnum.HINFO)
                return "HINFO";

            if (value == RecordTypesEnum.MINFO)
                return "MINFO";

            if (value == RecordTypesEnum.MX)
                return "MX";

            if (value == RecordTypesEnum.TXT)
                return "TXT";

            if (value == RecordTypesEnum.RP)
                return "RP";

            if (value == RecordTypesEnum.AFSDB)
                return "AFSDB";

            if (value == RecordTypesEnum.X25)
                return "X25";

            if (value == RecordTypesEnum.ISDN)
                return "ISDN";

            if (value == RecordTypesEnum.RT)
                return "RT";

            if (value == RecordTypesEnum.NSAP)
                return "NSAP";

            if (value == RecordTypesEnum.NSAPPTR)
                return "NSAP_PTR";

            if (value == RecordTypesEnum.SIG)
                return "SIG";

            if (value == RecordTypesEnum.KEY)
                return "KEY";

            if (value == RecordTypesEnum.PX)
                return "PX";

            if (value == RecordTypesEnum.GPOS)
                return "GPOS";

            if (value == RecordTypesEnum.AAAA)
                return "AAAA";

            if (value == RecordTypesEnum.LOC)
                return "LOC";

            if (value == RecordTypesEnum.NXT)
                return "NXT";

            if (value == RecordTypesEnum.EID)
                return "EID";

            if (value == RecordTypesEnum.NIMLOC)
                return "NIMLOC";

            if (value == RecordTypesEnum.SRV)
                return "SRV";

            if (value == RecordTypesEnum.ATMA)
                return "ATMA";

            if (value == RecordTypesEnum.NAPTR)
                return "NAPTR";

            if (value == RecordTypesEnum.KX)
                return "KX";

            if (value == RecordTypesEnum.CERT)
                return "CERT";

            if (value == RecordTypesEnum.A6)
                return "A6";

            if (value == RecordTypesEnum.DNAME)
                return "DNAME";

            if (value == RecordTypesEnum.SINK)
                return "SINK";

            if (value == RecordTypesEnum.OPT)
                return "OPT";

            if (value == RecordTypesEnum.APL)
                return "APL";

            if (value == RecordTypesEnum.DS)
                return "DS";

            if (value == RecordTypesEnum.SSHFP)
                return "SSHFP";

            if (value == RecordTypesEnum.IPSECKEY)
                return "IPSECKEY";

            if (value == RecordTypesEnum.RRSIG)
                return "RRSIG";

            if (value == RecordTypesEnum.NSEC)
                return "NSEC";

            if (value == RecordTypesEnum.DNSKEY)
                return "DNSKEY";

            if (value == RecordTypesEnum.DHCID)
                return "DHCID";

            if (value == RecordTypesEnum.NSEC3)
                return "NSEC3";

            if (value == RecordTypesEnum.NSEC3PARAM)
                return "NSEC3PARAM";

            if (value == RecordTypesEnum.TLSA)
                return "TLSA";

            if (value == RecordTypesEnum.SMIMEA)
                return "SMIMEA";

            if (value == RecordTypesEnum.HIP)
                return "HIP";

            if (value == RecordTypesEnum.NINFO)
                return "NINFO";

            if (value == RecordTypesEnum.RKEY)
                return "RKEY";

            if (value == RecordTypesEnum.TALINK)
                return "TALINK";

            if (value == RecordTypesEnum.CDS)
                return "CDS";

            if (value == RecordTypesEnum.CDNSKEY)
                return "CDNSKEY";

            if (value == RecordTypesEnum.OPENPGPKEY)
                return "OPENPGPKEY";

            if (value == RecordTypesEnum.CSYNC)
                return "CSYNC";

            if (value == RecordTypesEnum.ZONEMD)
                return "ZONEMD";

            if (value == RecordTypesEnum.SVCB)
                return "SVCB";

            if (value == RecordTypesEnum.HTTPS)
                return "HTTPS";

            if (value == RecordTypesEnum.SPF)
                return "SPF";

            if (value == RecordTypesEnum.UINFO)
                return "UINFO";

            if (value == RecordTypesEnum.UID)
                return "UID";

            if (value == RecordTypesEnum.GID)
                return "GID";

            if (value == RecordTypesEnum.UNSPEC)
                return "UNSPEC";

            if (value == RecordTypesEnum.NID)
                return "NID";

            if (value == RecordTypesEnum.L32)
                return "L32";

            if (value == RecordTypesEnum.L64)
                return "L64";

            if (value == RecordTypesEnum.LP)
                return "LP";

            if (value == RecordTypesEnum.EUI48)
                return "EUI48";

            if (value == RecordTypesEnum.EUI64)
                return "EUI64";

            if (value == RecordTypesEnum.TKEY)
                return "TKEY";

            if (value == RecordTypesEnum.TSIG)
                return "TSIG";

            if (value == RecordTypesEnum.IXFR)
                return "IXFR";

            if (value == RecordTypesEnum.AXFR)
                return "AXFR";

            if (value == RecordTypesEnum.MAILB)
                return "MAILB";

            if (value == RecordTypesEnum.MAILA)
                return "MAILA";

            if (value == RecordTypesEnum.ANY)
                return "ANY";

            if (value == RecordTypesEnum.URI)
                return "URI";

            if (value == RecordTypesEnum.CAA)
                return "CAA";

            if (value == RecordTypesEnum.AVC)
                return "AVC";

            if (value == RecordTypesEnum.DOA)
                return "DOA";

            if (value == RecordTypesEnum.AMTRELAY)
                return "AMTRELAY";

            if (value == RecordTypesEnum.TA)
                return "TA";

            if (value == RecordTypesEnum.DLV)
                return "DLV";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// List of record types you wish to query such as MX, DNS, TXT, NS, A etc.
        /// </summary>
        /// <value>List of record types you wish to query such as MX, DNS, TXT, NS, A etc.</value>
        [JsonPropertyName("hostname")]
        public string Hostname { get; set; }

        /// <summary>
        /// List of record types you wish to query such as MX, DNS, TXT, NS, A etc.
        /// </summary>
        /// <value>List of record types you wish to query such as MX, DNS, TXT, NS, A etc.</value>
        [JsonPropertyName("recordTypes")]
        public List<DNSLookupOptions.RecordTypesEnum> RecordTypes { get; set; }

        /// <summary>
        /// Optionally control whether to omit the final dot in full DNS name values.
        /// </summary>
        /// <value>Optionally control whether to omit the final dot in full DNS name values.</value>
        [JsonPropertyName("omitFinalDNSDot")]
        public bool OmitFinalDNSDot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DNSLookupOptions {\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  RecordTypes: ").Append(RecordTypes).Append("\n");
            sb.Append("  OmitFinalDNSDot: ").Append(OmitFinalDNSDot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DNSLookupOptions" />
    /// </summary>
    public class DNSLookupOptionsJsonConverter : JsonConverter<DNSLookupOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="DNSLookupOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DNSLookupOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> hostname = default;
            Option<List<DNSLookupOptions.RecordTypesEnum>> recordTypes = default;
            Option<bool?> omitFinalDNSDot = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hostname":
                            hostname = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recordTypes":
                            recordTypes = new Option<List<DNSLookupOptions.RecordTypesEnum>>(JsonSerializer.Deserialize<List<DNSLookupOptions.RecordTypesEnum>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "omitFinalDNSDot":
                            omitFinalDNSDot = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!hostname.IsSet)
                throw new ArgumentException("Property is required for class DNSLookupOptions.", nameof(hostname));

            if (!recordTypes.IsSet)
                throw new ArgumentException("Property is required for class DNSLookupOptions.", nameof(recordTypes));

            if (!omitFinalDNSDot.IsSet)
                throw new ArgumentException("Property is required for class DNSLookupOptions.", nameof(omitFinalDNSDot));

            if (hostname.IsSet && hostname.Value == null)
                throw new ArgumentNullException(nameof(hostname), "Property is not nullable for class DNSLookupOptions.");

            if (recordTypes.IsSet && recordTypes.Value == null)
                throw new ArgumentNullException(nameof(recordTypes), "Property is not nullable for class DNSLookupOptions.");

            if (omitFinalDNSDot.IsSet && omitFinalDNSDot.Value == null)
                throw new ArgumentNullException(nameof(omitFinalDNSDot), "Property is not nullable for class DNSLookupOptions.");

            return new DNSLookupOptions(hostname.Value, recordTypes.Value, omitFinalDNSDot.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="DNSLookupOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dNSLookupOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DNSLookupOptions dNSLookupOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dNSLookupOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DNSLookupOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dNSLookupOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DNSLookupOptions dNSLookupOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dNSLookupOptions.Hostname == null)
                throw new ArgumentNullException(nameof(dNSLookupOptions.Hostname), "Property is required for class DNSLookupOptions.");

            if (dNSLookupOptions.RecordTypes == null)
                throw new ArgumentNullException(nameof(dNSLookupOptions.RecordTypes), "Property is required for class DNSLookupOptions.");

            writer.WriteString("hostname", dNSLookupOptions.Hostname);

            writer.WritePropertyName("recordTypes");
            JsonSerializer.Serialize(writer, dNSLookupOptions.RecordTypes, jsonSerializerOptions);
            writer.WriteBoolean("omitFinalDNSDot", dNSLookupOptions.OmitFinalDNSDot);
        }
    }
}
