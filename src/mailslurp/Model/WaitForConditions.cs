/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 67c9a1eda264be4cfe0bb2c76151f0aadf0862bc
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// WaitForConditions
    /// </summary>
    [DataContract]
    public partial class WaitForConditions :  IEquatable<WaitForConditions>
    {
        /// <summary>
        /// Should exactly count number of results be returned or at least that many.
        /// </summary>
        /// <value>Should exactly count number of results be returned or at least that many.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CountTypeEnum
        {
            /// <summary>
            /// Enum EXACTLY for value: EXACTLY
            /// </summary>
            [EnumMember(Value = "EXACTLY")]
            EXACTLY = 1,

            /// <summary>
            /// Enum ATLEAST for value: ATLEAST
            /// </summary>
            [EnumMember(Value = "ATLEAST")]
            ATLEAST = 2

        }

        /// <summary>
        /// Should exactly count number of results be returned or at least that many.
        /// </summary>
        /// <value>Should exactly count number of results be returned or at least that many.</value>
        [DataMember(Name="countType", EmitDefaultValue=false)]
        public CountTypeEnum? CountType { get; set; }
        /// <summary>
        /// Direction to sort matching emails by created time
        /// </summary>
        /// <value>Direction to sort matching emails by created time</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2

        }

        /// <summary>
        /// Direction to sort matching emails by created time
        /// </summary>
        /// <value>Direction to sort matching emails by created time</value>
        [DataMember(Name="sortDirection", EmitDefaultValue=false)]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WaitForConditions" /> class.
        /// </summary>
        /// <param name="count">Number of results that should match conditions.</param>
        /// <param name="countType">Should exactly count number of results be returned or at least that many..</param>
        /// <param name="inboxId">Inbox to search within.</param>
        /// <param name="matches">Conditions that should be matched.</param>
        /// <param name="sortDirection">Direction to sort matching emails by created time.</param>
        /// <param name="timeout">Max time in milliseconds to wait until conditions are met.</param>
        /// <param name="unreadOnly">Apply only to unread emails.</param>
        public WaitForConditions(int count = default(int), CountTypeEnum? countType = default(CountTypeEnum?), Guid inboxId = default(Guid), List<MatchOption> matches = default(List<MatchOption>), SortDirectionEnum? sortDirection = default(SortDirectionEnum?), long timeout = default(long), bool unreadOnly = default(bool))
        {
            this.Count = count;
            this.CountType = countType;
            this.InboxId = inboxId;
            this.Matches = matches;
            this.SortDirection = sortDirection;
            this.Timeout = timeout;
            this.UnreadOnly = unreadOnly;
        }
        
        /// <summary>
        /// Number of results that should match conditions
        /// </summary>
        /// <value>Number of results that should match conditions</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int Count { get; set; }


        /// <summary>
        /// Inbox to search within
        /// </summary>
        /// <value>Inbox to search within</value>
        [DataMember(Name="inboxId", EmitDefaultValue=false)]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Conditions that should be matched
        /// </summary>
        /// <value>Conditions that should be matched</value>
        [DataMember(Name="matches", EmitDefaultValue=false)]
        public List<MatchOption> Matches { get; set; }


        /// <summary>
        /// Max time in milliseconds to wait until conditions are met
        /// </summary>
        /// <value>Max time in milliseconds to wait until conditions are met</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public long Timeout { get; set; }

        /// <summary>
        /// Apply only to unread emails
        /// </summary>
        /// <value>Apply only to unread emails</value>
        [DataMember(Name="unreadOnly", EmitDefaultValue=false)]
        public bool UnreadOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WaitForConditions {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  CountType: ").Append(CountType).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  UnreadOnly: ").Append(UnreadOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WaitForConditions);
        }

        /// <summary>
        /// Returns true if WaitForConditions instances are equal
        /// </summary>
        /// <param name="input">Instance of WaitForConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WaitForConditions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.CountType == input.CountType ||
                    (this.CountType != null &&
                    this.CountType.Equals(input.CountType))
                ) && 
                (
                    this.InboxId == input.InboxId ||
                    (this.InboxId != null &&
                    this.InboxId.Equals(input.InboxId))
                ) && 
                (
                    this.Matches == input.Matches ||
                    this.Matches != null &&
                    input.Matches != null &&
                    this.Matches.SequenceEqual(input.Matches)
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    (this.SortDirection != null &&
                    this.SortDirection.Equals(input.SortDirection))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.UnreadOnly == input.UnreadOnly ||
                    (this.UnreadOnly != null &&
                    this.UnreadOnly.Equals(input.UnreadOnly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.CountType != null)
                    hashCode = hashCode * 59 + this.CountType.GetHashCode();
                if (this.InboxId != null)
                    hashCode = hashCode * 59 + this.InboxId.GetHashCode();
                if (this.Matches != null)
                    hashCode = hashCode * 59 + this.Matches.GetHashCode();
                if (this.SortDirection != null)
                    hashCode = hashCode * 59 + this.SortDirection.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                if (this.UnreadOnly != null)
                    hashCode = hashCode * 59 + this.UnreadOnly.GetHashCode();
                return hashCode;
            }
        }
    }

}
