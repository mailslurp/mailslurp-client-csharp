/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Conditions to apply to emails that you are waiting for
    /// </summary>
    [DataContract]
    public partial class WaitForConditions :  IEquatable<WaitForConditions>, IValidatableObject
    {
        /// <summary>
        /// How result size should be compared with the expected size. Exactly or at-least matching result?
        /// </summary>
        /// <value>How result size should be compared with the expected size. Exactly or at-least matching result?</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CountTypeEnum
        {
            /// <summary>
            /// Enum EXACTLY for value: EXACTLY
            /// </summary>
            [EnumMember(Value = "EXACTLY")]
            EXACTLY = 1,

            /// <summary>
            /// Enum ATLEAST for value: ATLEAST
            /// </summary>
            [EnumMember(Value = "ATLEAST")]
            ATLEAST = 2

        }

        /// <summary>
        /// How result size should be compared with the expected size. Exactly or at-least matching result?
        /// </summary>
        /// <value>How result size should be compared with the expected size. Exactly or at-least matching result?</value>
        [DataMember(Name="countType", EmitDefaultValue=false)]
        public CountTypeEnum? CountType { get; set; }
        /// <summary>
        /// Defines SortDirection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2

        }

        /// <summary>
        /// Gets or Sets SortDirection
        /// </summary>
        [DataMember(Name="sortDirection", EmitDefaultValue=false)]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WaitForConditions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WaitForConditions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WaitForConditions" /> class.
        /// </summary>
        /// <param name="inboxId">inboxId.</param>
        /// <param name="count">Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation..</param>
        /// <param name="delayTimeout">Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified..</param>
        /// <param name="timeout">Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met. (required).</param>
        /// <param name="unreadOnly">Apply conditions only to **unread** emails. All emails begin with &#x60;read&#x3D;false&#x60;. An email is marked &#x60;read&#x3D;true&#x60; when an &#x60;EmailDto&#x60; representation of it has been returned to the user at least once. For example you have called &#x60;getEmail&#x60; or &#x60;waitForLatestEmail&#x60; etc., or you have viewed the email in the dashboard..</param>
        /// <param name="countType">How result size should be compared with the expected size. Exactly or at-least matching result?.</param>
        /// <param name="matches">matches.</param>
        /// <param name="sortDirection">sortDirection.</param>
        /// <param name="since">since.</param>
        /// <param name="before">before.</param>
        public WaitForConditions(Guid inboxId = default(Guid), int count = default(int), long delayTimeout = default(long), long timeout = default(long), bool unreadOnly = default(bool), CountTypeEnum? countType = default(CountTypeEnum?), List<MatchOption> matches = default(List<MatchOption>), SortDirectionEnum? sortDirection = default(SortDirectionEnum?), DateTime since = default(DateTime), DateTime before = default(DateTime))
        {
            this.Timeout = timeout;
            this.InboxId = inboxId;
            this.Count = count;
            this.DelayTimeout = delayTimeout;
            this.UnreadOnly = unreadOnly;
            this.CountType = countType;
            this.Matches = matches;
            this.SortDirection = sortDirection;
            this.Since = since;
            this.Before = before;
        }
        
        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [DataMember(Name="inboxId", EmitDefaultValue=false)]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation.
        /// </summary>
        /// <value>Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation.</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int Count { get; set; }

        /// <summary>
        /// Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified.
        /// </summary>
        /// <value>Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified.</value>
        [DataMember(Name="delayTimeout", EmitDefaultValue=false)]
        public long DelayTimeout { get; set; }

        /// <summary>
        /// Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met.
        /// </summary>
        /// <value>Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met.</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public long Timeout { get; set; }

        /// <summary>
        /// Apply conditions only to **unread** emails. All emails begin with &#x60;read&#x3D;false&#x60;. An email is marked &#x60;read&#x3D;true&#x60; when an &#x60;EmailDto&#x60; representation of it has been returned to the user at least once. For example you have called &#x60;getEmail&#x60; or &#x60;waitForLatestEmail&#x60; etc., or you have viewed the email in the dashboard.
        /// </summary>
        /// <value>Apply conditions only to **unread** emails. All emails begin with &#x60;read&#x3D;false&#x60;. An email is marked &#x60;read&#x3D;true&#x60; when an &#x60;EmailDto&#x60; representation of it has been returned to the user at least once. For example you have called &#x60;getEmail&#x60; or &#x60;waitForLatestEmail&#x60; etc., or you have viewed the email in the dashboard.</value>
        [DataMember(Name="unreadOnly", EmitDefaultValue=false)]
        public bool UnreadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Matches
        /// </summary>
        [DataMember(Name="matches", EmitDefaultValue=false)]
        public List<MatchOption> Matches { get; set; }

        /// <summary>
        /// Gets or Sets Since
        /// </summary>
        [DataMember(Name="since", EmitDefaultValue=false)]
        public DateTime Since { get; set; }

        /// <summary>
        /// Gets or Sets Before
        /// </summary>
        [DataMember(Name="before", EmitDefaultValue=false)]
        public DateTime Before { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WaitForConditions {\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  DelayTimeout: ").Append(DelayTimeout).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  UnreadOnly: ").Append(UnreadOnly).Append("\n");
            sb.Append("  CountType: ").Append(CountType).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WaitForConditions);
        }

        /// <summary>
        /// Returns true if WaitForConditions instances are equal
        /// </summary>
        /// <param name="input">Instance of WaitForConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WaitForConditions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InboxId == input.InboxId ||
                    (this.InboxId != null &&
                    this.InboxId.Equals(input.InboxId))
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.DelayTimeout == input.DelayTimeout ||
                    this.DelayTimeout.Equals(input.DelayTimeout)
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.UnreadOnly == input.UnreadOnly ||
                    this.UnreadOnly.Equals(input.UnreadOnly)
                ) && 
                (
                    this.CountType == input.CountType ||
                    this.CountType.Equals(input.CountType)
                ) && 
                (
                    this.Matches == input.Matches ||
                    this.Matches != null &&
                    input.Matches != null &&
                    this.Matches.SequenceEqual(input.Matches)
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    this.SortDirection.Equals(input.SortDirection)
                ) && 
                (
                    this.Since == input.Since ||
                    (this.Since != null &&
                    this.Since.Equals(input.Since))
                ) && 
                (
                    this.Before == input.Before ||
                    (this.Before != null &&
                    this.Before.Equals(input.Before))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InboxId != null)
                    hashCode = hashCode * 59 + this.InboxId.GetHashCode();
                hashCode = hashCode * 59 + this.Count.GetHashCode();
                hashCode = hashCode * 59 + this.DelayTimeout.GetHashCode();
                hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                hashCode = hashCode * 59 + this.UnreadOnly.GetHashCode();
                hashCode = hashCode * 59 + this.CountType.GetHashCode();
                if (this.Matches != null)
                    hashCode = hashCode * 59 + this.Matches.GetHashCode();
                hashCode = hashCode * 59 + this.SortDirection.GetHashCode();
                if (this.Since != null)
                    hashCode = hashCode * 59 + this.Since.GetHashCode();
                if (this.Before != null)
                    hashCode = hashCode * 59 + this.Before.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
