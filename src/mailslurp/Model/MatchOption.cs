/* 
 * MailSlurp API
 *
 * For documentation see [developer guide](https://www.mailslurp.com/developers). [Create an account](https://app.mailslurp.com) in the MailSlurp Dashboard to [view your API Key](https://app). For all bugs, feature requests, or help please [see support](https://www.mailslurp.com/support/).
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// MatchOption
    /// </summary>
    [DataContract]
    public partial class MatchOption :  IEquatable<MatchOption>
    {
        /// <summary>
        /// The email property to match on. One of SUBJECT, TO, BCC, CC or FROM
        /// </summary>
        /// <value>The email property to match on. One of SUBJECT, TO, BCC, CC or FROM</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldEnum
        {
            /// <summary>
            /// Enum SUBJECT for value: SUBJECT
            /// </summary>
            [EnumMember(Value = "SUBJECT")]
            SUBJECT = 1,

            /// <summary>
            /// Enum TO for value: TO
            /// </summary>
            [EnumMember(Value = "TO")]
            TO = 2,

            /// <summary>
            /// Enum BCC for value: BCC
            /// </summary>
            [EnumMember(Value = "BCC")]
            BCC = 3,

            /// <summary>
            /// Enum CC for value: CC
            /// </summary>
            [EnumMember(Value = "CC")]
            CC = 4,

            /// <summary>
            /// Enum FROM for value: FROM
            /// </summary>
            [EnumMember(Value = "FROM")]
            FROM = 5

        }

        /// <summary>
        /// The email property to match on. One of SUBJECT, TO, BCC, CC or FROM
        /// </summary>
        /// <value>The email property to match on. One of SUBJECT, TO, BCC, CC or FROM</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public FieldEnum? Field { get; set; }
        /// <summary>
        /// What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended due to some SMTP servers adding new lines
        /// </summary>
        /// <value>What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended due to some SMTP servers adding new lines</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShouldEnum
        {
            /// <summary>
            /// Enum CONTAIN for value: CONTAIN
            /// </summary>
            [EnumMember(Value = "CONTAIN")]
            CONTAIN = 1,

            /// <summary>
            /// Enum EQUAL for value: EQUAL
            /// </summary>
            [EnumMember(Value = "EQUAL")]
            EQUAL = 2

        }

        /// <summary>
        /// What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended due to some SMTP servers adding new lines
        /// </summary>
        /// <value>What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended due to some SMTP servers adding new lines</value>
        [DataMember(Name="should", EmitDefaultValue=false)]
        public ShouldEnum? Should { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchOption" /> class.
        /// </summary>
        /// <param name="field">The email property to match on. One of SUBJECT, TO, BCC, CC or FROM.</param>
        /// <param name="should">What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended due to some SMTP servers adding new lines.</param>
        /// <param name="value">The value to compare to the field using EQUAL or CONTAIN.</param>
        public MatchOption(FieldEnum? field = default(FieldEnum?), ShouldEnum? should = default(ShouldEnum?), string value = default(string))
        {
            this.Field = field;
            this.Should = should;
            this.Value = value;
        }
        


        /// <summary>
        /// The value to compare to the field using EQUAL or CONTAIN
        /// </summary>
        /// <value>The value to compare to the field using EQUAL or CONTAIN</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatchOption {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Should: ").Append(Should).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchOption);
        }

        /// <summary>
        /// Returns true if MatchOption instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Should == input.Should ||
                    (this.Should != null &&
                    this.Should.Equals(input.Should))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.Should != null)
                    hashCode = hashCode * 59 + this.Should.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }
    }

}
