/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: d1659dc1567a5b62f65d0612107a50aace03e085
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for matching emails in an inbox. Each match option object contains a &#x60;field&#x60;, &#x60;should&#x60; and &#x60;value&#x60; property. Together they form logical conditions such as &#x60;SUBJECT&#x60; should &#x60;CONTAIN&#x60; value.
    /// </summary>
    [DataContract]
    public partial class MatchOption :  IEquatable<MatchOption>, IValidatableObject
    {
        /// <summary>
        /// The email property to match on. One of SUBJECT, TO, BCC, CC or FROM
        /// </summary>
        /// <value>The email property to match on. One of SUBJECT, TO, BCC, CC or FROM</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldEnum
        {
            /// <summary>
            /// Enum SUBJECT for value: SUBJECT
            /// </summary>
            [EnumMember(Value = "SUBJECT")]
            SUBJECT = 1,

            /// <summary>
            /// Enum TO for value: TO
            /// </summary>
            [EnumMember(Value = "TO")]
            TO = 2,

            /// <summary>
            /// Enum BCC for value: BCC
            /// </summary>
            [EnumMember(Value = "BCC")]
            BCC = 3,

            /// <summary>
            /// Enum CC for value: CC
            /// </summary>
            [EnumMember(Value = "CC")]
            CC = 4,

            /// <summary>
            /// Enum FROM for value: FROM
            /// </summary>
            [EnumMember(Value = "FROM")]
            FROM = 5

        }

        /// <summary>
        /// The email property to match on. One of SUBJECT, TO, BCC, CC or FROM
        /// </summary>
        /// <value>The email property to match on. One of SUBJECT, TO, BCC, CC or FROM</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public FieldEnum? Field { get; set; }
        /// <summary>
        /// What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended due to some SMTP servers adding new lines to fields and body content.
        /// </summary>
        /// <value>What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended due to some SMTP servers adding new lines to fields and body content.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShouldEnum
        {
            /// <summary>
            /// Enum CONTAIN for value: CONTAIN
            /// </summary>
            [EnumMember(Value = "CONTAIN")]
            CONTAIN = 1,

            /// <summary>
            /// Enum EQUAL for value: EQUAL
            /// </summary>
            [EnumMember(Value = "EQUAL")]
            EQUAL = 2

        }

        /// <summary>
        /// What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended due to some SMTP servers adding new lines to fields and body content.
        /// </summary>
        /// <value>What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended due to some SMTP servers adding new lines to fields and body content.</value>
        [DataMember(Name="should", EmitDefaultValue=false)]
        public ShouldEnum? Should { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchOption" /> class.
        /// </summary>
        /// <param name="field">The email property to match on. One of SUBJECT, TO, BCC, CC or FROM.</param>
        /// <param name="should">What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended due to some SMTP servers adding new lines to fields and body content..</param>
        /// <param name="value">The value you wish to compare with the value of the field specified using the &#x60;should&#x60; value passed. For example &#x60;BODY&#x60; should &#x60;CONTAIN&#x60; a value passed..</param>
        public MatchOption(FieldEnum? field = default(FieldEnum?), ShouldEnum? should = default(ShouldEnum?), string value = default(string))
        {
            this.Field = field;
            this.Should = should;
            this.Value = value;
        }
        
        /// <summary>
        /// The value you wish to compare with the value of the field specified using the &#x60;should&#x60; value passed. For example &#x60;BODY&#x60; should &#x60;CONTAIN&#x60; a value passed.
        /// </summary>
        /// <value>The value you wish to compare with the value of the field specified using the &#x60;should&#x60; value passed. For example &#x60;BODY&#x60; should &#x60;CONTAIN&#x60; a value passed.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatchOption {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Should: ").Append(Should).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchOption);
        }

        /// <summary>
        /// Returns true if MatchOption instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Field == input.Field ||
                    this.Field.Equals(input.Field)
                ) && 
                (
                    this.Should == input.Should ||
                    this.Should.Equals(input.Should)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Field.GetHashCode();
                hashCode = hashCode * 59 + this.Should.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
