/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating an inbox connection with an external mail provider including extra settings
    /// </summary>
    [DataContract(Name = "CreateConnectorWithOptions")]
    public partial class CreateConnectorWithOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorWithOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateConnectorWithOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorWithOptions" /> class.
        /// </summary>
        /// <param name="createConnectorOptions">createConnectorOptions (required).</param>
        /// <param name="createConnectorImapConnectionOptions">createConnectorImapConnectionOptions.</param>
        /// <param name="createConnectorSmtpConnectionOptions">createConnectorSmtpConnectionOptions.</param>
        /// <param name="createConnectorSyncSettingsOptions">createConnectorSyncSettingsOptions.</param>
        public CreateConnectorWithOptions(CreateConnectorOptions createConnectorOptions = default, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions = default)
        {
            // to ensure "createConnectorOptions" is required (not null)
            if (createConnectorOptions == null)
            {
                throw new ArgumentNullException("createConnectorOptions is a required property for CreateConnectorWithOptions and cannot be null");
            }
            this.CreateConnectorOptions = createConnectorOptions;
            this.CreateConnectorImapConnectionOptions = createConnectorImapConnectionOptions;
            this.CreateConnectorSmtpConnectionOptions = createConnectorSmtpConnectionOptions;
            this.CreateConnectorSyncSettingsOptions = createConnectorSyncSettingsOptions;
        }

        /// <summary>
        /// Gets or Sets CreateConnectorOptions
        /// </summary>
        [DataMember(Name = "createConnectorOptions", IsRequired = true, EmitDefaultValue = true)]
        public CreateConnectorOptions CreateConnectorOptions { get; set; }

        /// <summary>
        /// Gets or Sets CreateConnectorImapConnectionOptions
        /// </summary>
        [DataMember(Name = "createConnectorImapConnectionOptions", EmitDefaultValue = false)]
        public CreateConnectorImapConnectionOptions CreateConnectorImapConnectionOptions { get; set; }

        /// <summary>
        /// Gets or Sets CreateConnectorSmtpConnectionOptions
        /// </summary>
        [DataMember(Name = "createConnectorSmtpConnectionOptions", EmitDefaultValue = false)]
        public CreateConnectorSmtpConnectionOptions CreateConnectorSmtpConnectionOptions { get; set; }

        /// <summary>
        /// Gets or Sets CreateConnectorSyncSettingsOptions
        /// </summary>
        [DataMember(Name = "createConnectorSyncSettingsOptions", EmitDefaultValue = false)]
        public CreateConnectorSyncSettingsOptions CreateConnectorSyncSettingsOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectorWithOptions {\n");
            sb.Append("  CreateConnectorOptions: ").Append(CreateConnectorOptions).Append("\n");
            sb.Append("  CreateConnectorImapConnectionOptions: ").Append(CreateConnectorImapConnectionOptions).Append("\n");
            sb.Append("  CreateConnectorSmtpConnectionOptions: ").Append(CreateConnectorSmtpConnectionOptions).Append("\n");
            sb.Append("  CreateConnectorSyncSettingsOptions: ").Append(CreateConnectorSyncSettingsOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
