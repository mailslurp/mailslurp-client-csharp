// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating an inbox connection with an external mail provider including extra settings
    /// </summary>
    public partial class CreateConnectorWithOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorWithOptions" /> class.
        /// </summary>
        /// <param name="createConnectorOptions">createConnectorOptions</param>
        /// <param name="createConnectorImapConnectionOptions">createConnectorImapConnectionOptions</param>
        /// <param name="createConnectorSmtpConnectionOptions">createConnectorSmtpConnectionOptions</param>
        /// <param name="createConnectorSyncSettingsOptions">createConnectorSyncSettingsOptions</param>
        [JsonConstructor]
        public CreateConnectorWithOptions(CreateConnectorOptions createConnectorOptions, Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions = default, Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions = default, Option<CreateConnectorSyncSettingsOptions> createConnectorSyncSettingsOptions = default)
        {
            CreateConnectorOptions = createConnectorOptions;
            CreateConnectorImapConnectionOptionsOption = createConnectorImapConnectionOptions;
            CreateConnectorSmtpConnectionOptionsOption = createConnectorSmtpConnectionOptions;
            CreateConnectorSyncSettingsOptionsOption = createConnectorSyncSettingsOptions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CreateConnectorOptions
        /// </summary>
        [JsonPropertyName("createConnectorOptions")]
        public CreateConnectorOptions CreateConnectorOptions { get; set; }

        /// <summary>
        /// Used to track the state of CreateConnectorImapConnectionOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateConnectorImapConnectionOptions> CreateConnectorImapConnectionOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateConnectorImapConnectionOptions
        /// </summary>
        [JsonPropertyName("createConnectorImapConnectionOptions")]
        public CreateConnectorImapConnectionOptions CreateConnectorImapConnectionOptions { get { return this.CreateConnectorImapConnectionOptionsOption; } set { this.CreateConnectorImapConnectionOptionsOption = new Option<CreateConnectorImapConnectionOptions>(value); } }

        /// <summary>
        /// Used to track the state of CreateConnectorSmtpConnectionOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateConnectorSmtpConnectionOptions> CreateConnectorSmtpConnectionOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateConnectorSmtpConnectionOptions
        /// </summary>
        [JsonPropertyName("createConnectorSmtpConnectionOptions")]
        public CreateConnectorSmtpConnectionOptions CreateConnectorSmtpConnectionOptions { get { return this.CreateConnectorSmtpConnectionOptionsOption; } set { this.CreateConnectorSmtpConnectionOptionsOption = new Option<CreateConnectorSmtpConnectionOptions>(value); } }

        /// <summary>
        /// Used to track the state of CreateConnectorSyncSettingsOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateConnectorSyncSettingsOptions> CreateConnectorSyncSettingsOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateConnectorSyncSettingsOptions
        /// </summary>
        [JsonPropertyName("createConnectorSyncSettingsOptions")]
        public CreateConnectorSyncSettingsOptions CreateConnectorSyncSettingsOptions { get { return this.CreateConnectorSyncSettingsOptionsOption; } set { this.CreateConnectorSyncSettingsOptionsOption = new Option<CreateConnectorSyncSettingsOptions>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectorWithOptions {\n");
            sb.Append("  CreateConnectorOptions: ").Append(CreateConnectorOptions).Append("\n");
            sb.Append("  CreateConnectorImapConnectionOptions: ").Append(CreateConnectorImapConnectionOptions).Append("\n");
            sb.Append("  CreateConnectorSmtpConnectionOptions: ").Append(CreateConnectorSmtpConnectionOptions).Append("\n");
            sb.Append("  CreateConnectorSyncSettingsOptions: ").Append(CreateConnectorSyncSettingsOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateConnectorWithOptions" />
    /// </summary>
    public class CreateConnectorWithOptionsJsonConverter : JsonConverter<CreateConnectorWithOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateConnectorWithOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateConnectorWithOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateConnectorOptions> createConnectorOptions = default;
            Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions = default;
            Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions = default;
            Option<CreateConnectorSyncSettingsOptions> createConnectorSyncSettingsOptions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createConnectorOptions":
                            createConnectorOptions = new Option<CreateConnectorOptions>(JsonSerializer.Deserialize<CreateConnectorOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createConnectorImapConnectionOptions":
                            createConnectorImapConnectionOptions = new Option<CreateConnectorImapConnectionOptions>(JsonSerializer.Deserialize<CreateConnectorImapConnectionOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createConnectorSmtpConnectionOptions":
                            createConnectorSmtpConnectionOptions = new Option<CreateConnectorSmtpConnectionOptions>(JsonSerializer.Deserialize<CreateConnectorSmtpConnectionOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createConnectorSyncSettingsOptions":
                            createConnectorSyncSettingsOptions = new Option<CreateConnectorSyncSettingsOptions>(JsonSerializer.Deserialize<CreateConnectorSyncSettingsOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createConnectorOptions.IsSet)
                throw new ArgumentException("Property is required for class CreateConnectorWithOptions.", nameof(createConnectorOptions));

            if (createConnectorOptions.IsSet && createConnectorOptions.Value == null)
                throw new ArgumentNullException(nameof(createConnectorOptions), "Property is not nullable for class CreateConnectorWithOptions.");

            if (createConnectorImapConnectionOptions.IsSet && createConnectorImapConnectionOptions.Value == null)
                throw new ArgumentNullException(nameof(createConnectorImapConnectionOptions), "Property is not nullable for class CreateConnectorWithOptions.");

            if (createConnectorSmtpConnectionOptions.IsSet && createConnectorSmtpConnectionOptions.Value == null)
                throw new ArgumentNullException(nameof(createConnectorSmtpConnectionOptions), "Property is not nullable for class CreateConnectorWithOptions.");

            if (createConnectorSyncSettingsOptions.IsSet && createConnectorSyncSettingsOptions.Value == null)
                throw new ArgumentNullException(nameof(createConnectorSyncSettingsOptions), "Property is not nullable for class CreateConnectorWithOptions.");

            return new CreateConnectorWithOptions(createConnectorOptions.Value, createConnectorImapConnectionOptions, createConnectorSmtpConnectionOptions, createConnectorSyncSettingsOptions);
        }

        /// <summary>
        /// Serializes a <see cref="CreateConnectorWithOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateConnectorWithOptions createConnectorWithOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createConnectorWithOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateConnectorWithOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateConnectorWithOptions createConnectorWithOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createConnectorWithOptions.CreateConnectorOptions == null)
                throw new ArgumentNullException(nameof(createConnectorWithOptions.CreateConnectorOptions), "Property is required for class CreateConnectorWithOptions.");

            if (createConnectorWithOptions.CreateConnectorImapConnectionOptionsOption.IsSet && createConnectorWithOptions.CreateConnectorImapConnectionOptions == null)
                throw new ArgumentNullException(nameof(createConnectorWithOptions.CreateConnectorImapConnectionOptions), "Property is required for class CreateConnectorWithOptions.");

            if (createConnectorWithOptions.CreateConnectorSmtpConnectionOptionsOption.IsSet && createConnectorWithOptions.CreateConnectorSmtpConnectionOptions == null)
                throw new ArgumentNullException(nameof(createConnectorWithOptions.CreateConnectorSmtpConnectionOptions), "Property is required for class CreateConnectorWithOptions.");

            if (createConnectorWithOptions.CreateConnectorSyncSettingsOptionsOption.IsSet && createConnectorWithOptions.CreateConnectorSyncSettingsOptions == null)
                throw new ArgumentNullException(nameof(createConnectorWithOptions.CreateConnectorSyncSettingsOptions), "Property is required for class CreateConnectorWithOptions.");

            writer.WritePropertyName("createConnectorOptions");
            JsonSerializer.Serialize(writer, createConnectorWithOptions.CreateConnectorOptions, jsonSerializerOptions);
            if (createConnectorWithOptions.CreateConnectorImapConnectionOptionsOption.IsSet)
            {
                writer.WritePropertyName("createConnectorImapConnectionOptions");
                JsonSerializer.Serialize(writer, createConnectorWithOptions.CreateConnectorImapConnectionOptions, jsonSerializerOptions);
            }
            if (createConnectorWithOptions.CreateConnectorSmtpConnectionOptionsOption.IsSet)
            {
                writer.WritePropertyName("createConnectorSmtpConnectionOptions");
                JsonSerializer.Serialize(writer, createConnectorWithOptions.CreateConnectorSmtpConnectionOptions, jsonSerializerOptions);
            }
            if (createConnectorWithOptions.CreateConnectorSyncSettingsOptionsOption.IsSet)
            {
                writer.WritePropertyName("createConnectorSyncSettingsOptions");
                JsonSerializer.Serialize(writer, createConnectorWithOptions.CreateConnectorSyncSettingsOptions, jsonSerializerOptions);
            }
        }
    }
}
