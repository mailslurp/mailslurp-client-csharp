// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// PlusAddressDto
    /// </summary>
    public partial class PlusAddressDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlusAddressDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="plusAddress">plusAddress</param>
        /// <param name="fullAddress">fullAddress</param>
        /// <param name="userId">userId</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public PlusAddressDto(Guid id, string plusAddress, string fullAddress, Guid userId, Guid inboxId, DateTime createdAt, DateTime updatedAt)
        {
            Id = id;
            PlusAddress = plusAddress;
            FullAddress = fullAddress;
            UserId = userId;
            InboxId = inboxId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets PlusAddress
        /// </summary>
        [JsonPropertyName("plusAddress")]
        public string PlusAddress { get; set; }

        /// <summary>
        /// Gets or Sets FullAddress
        /// </summary>
        [JsonPropertyName("fullAddress")]
        public string FullAddress { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlusAddressDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlusAddress: ").Append(PlusAddress).Append("\n");
            sb.Append("  FullAddress: ").Append(FullAddress).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlusAddressDto" />
    /// </summary>
    public class PlusAddressDtoJsonConverter : JsonConverter<PlusAddressDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PlusAddressDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlusAddressDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> plusAddress = default;
            Option<string> fullAddress = default;
            Option<Guid?> userId = default;
            Option<Guid?> inboxId = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "plusAddress":
                            plusAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fullAddress":
                            fullAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PlusAddressDto.", nameof(id));

            if (!plusAddress.IsSet)
                throw new ArgumentException("Property is required for class PlusAddressDto.", nameof(plusAddress));

            if (!fullAddress.IsSet)
                throw new ArgumentException("Property is required for class PlusAddressDto.", nameof(fullAddress));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class PlusAddressDto.", nameof(userId));

            if (!inboxId.IsSet)
                throw new ArgumentException("Property is required for class PlusAddressDto.", nameof(inboxId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class PlusAddressDto.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class PlusAddressDto.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PlusAddressDto.");

            if (plusAddress.IsSet && plusAddress.Value == null)
                throw new ArgumentNullException(nameof(plusAddress), "Property is not nullable for class PlusAddressDto.");

            if (fullAddress.IsSet && fullAddress.Value == null)
                throw new ArgumentNullException(nameof(fullAddress), "Property is not nullable for class PlusAddressDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class PlusAddressDto.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class PlusAddressDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class PlusAddressDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class PlusAddressDto.");

            return new PlusAddressDto(id.Value.Value, plusAddress.Value, fullAddress.Value, userId.Value.Value, inboxId.Value.Value, createdAt.Value.Value, updatedAt.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="PlusAddressDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="plusAddressDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlusAddressDto plusAddressDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, plusAddressDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlusAddressDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="plusAddressDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlusAddressDto plusAddressDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (plusAddressDto.PlusAddress == null)
                throw new ArgumentNullException(nameof(plusAddressDto.PlusAddress), "Property is required for class PlusAddressDto.");

            if (plusAddressDto.FullAddress == null)
                throw new ArgumentNullException(nameof(plusAddressDto.FullAddress), "Property is required for class PlusAddressDto.");

            writer.WriteString("id", plusAddressDto.Id);

            writer.WriteString("plusAddress", plusAddressDto.PlusAddress);

            writer.WriteString("fullAddress", plusAddressDto.FullAddress);

            writer.WriteString("userId", plusAddressDto.UserId);

            writer.WriteString("inboxId", plusAddressDto.InboxId);

            writer.WriteString("createdAt", plusAddressDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", plusAddressDto.UpdatedAt.ToString(UpdatedAtFormat));
        }
    }
}
