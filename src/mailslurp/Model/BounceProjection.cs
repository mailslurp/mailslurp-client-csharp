// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Bounced email event
    /// </summary>
    public partial class BounceProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BounceProjection" /> class.
        /// </summary>
        /// <param name="sender">sender</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="bounceType">bounceType</param>
        /// <param name="bounceMta">bounceMta</param>
        /// <param name="subject">subject</param>
        /// <param name="id">id</param>
        [JsonConstructor]
        public BounceProjection(string sender, DateTime createdAt, Option<string> bounceType = default, Option<string> bounceMta = default, Option<string> subject = default, Option<Guid?> id = default)
        {
            Sender = sender;
            CreatedAt = createdAt;
            BounceTypeOption = bounceType;
            BounceMtaOption = bounceMta;
            SubjectOption = subject;
            IdOption = id;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public string Sender { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of BounceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BounceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BounceType
        /// </summary>
        [JsonPropertyName("bounceType")]
        public string BounceType { get { return this.BounceTypeOption; } set { this.BounceTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BounceMta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BounceMtaOption { get; private set; }

        /// <summary>
        /// Gets or Sets BounceMta
        /// </summary>
        [JsonPropertyName("bounceMta")]
        public string BounceMta { get { return this.BounceMtaOption; } set { this.BounceMtaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid? Id { get { return this.IdOption; } set { this.IdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BounceProjection {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  BounceType: ").Append(BounceType).Append("\n");
            sb.Append("  BounceMta: ").Append(BounceMta).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BounceProjection" />
    /// </summary>
    public class BounceProjectionJsonConverter : JsonConverter<BounceProjection>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BounceProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BounceProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> sender = default;
            Option<DateTime?> createdAt = default;
            Option<string> bounceType = default;
            Option<string> bounceMta = default;
            Option<string> subject = default;
            Option<Guid?> id = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sender":
                            sender = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bounceType":
                            bounceType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bounceMta":
                            bounceMta = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sender.IsSet)
                throw new ArgumentException("Property is required for class BounceProjection.", nameof(sender));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class BounceProjection.", nameof(createdAt));

            if (sender.IsSet && sender.Value == null)
                throw new ArgumentNullException(nameof(sender), "Property is not nullable for class BounceProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class BounceProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BounceProjection.");

            return new BounceProjection(sender.Value, createdAt.Value.Value, bounceType, bounceMta, subject, id);
        }

        /// <summary>
        /// Serializes a <see cref="BounceProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bounceProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BounceProjection bounceProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bounceProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BounceProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bounceProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BounceProjection bounceProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bounceProjection.Sender == null)
                throw new ArgumentNullException(nameof(bounceProjection.Sender), "Property is required for class BounceProjection.");

            writer.WriteString("sender", bounceProjection.Sender);

            writer.WriteString("createdAt", bounceProjection.CreatedAt.ToString(CreatedAtFormat));

            if (bounceProjection.BounceTypeOption.IsSet)
                if (bounceProjection.BounceTypeOption.Value != null)
                    writer.WriteString("bounceType", bounceProjection.BounceType);
                else
                    writer.WriteNull("bounceType");

            if (bounceProjection.BounceMtaOption.IsSet)
                if (bounceProjection.BounceMtaOption.Value != null)
                    writer.WriteString("bounceMta", bounceProjection.BounceMta);
                else
                    writer.WriteNull("bounceMta");

            if (bounceProjection.SubjectOption.IsSet)
                if (bounceProjection.SubjectOption.Value != null)
                    writer.WriteString("subject", bounceProjection.Subject);
                else
                    writer.WriteNull("subject");

            if (bounceProjection.IdOption.IsSet)
                writer.WriteString("id", bounceProjection.IdOption.Value.Value);
        }
    }
}
