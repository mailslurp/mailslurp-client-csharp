/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// IMAP server search options
    /// </summary>
    [DataContract(Name = "ImapServerSearchOptions")]
    public partial class ImapServerSearchOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapServerSearchOptions" /> class.
        /// </summary>
        /// <param name="seqNum">seqNum.</param>
        /// <param name="uid">uid.</param>
        /// <param name="since">since.</param>
        /// <param name="before">before.</param>
        /// <param name="sentSince">sentSince.</param>
        /// <param name="sentBefore">sentBefore.</param>
        /// <param name="header">header.</param>
        /// <param name="body">body.</param>
        /// <param name="text">text.</param>
        /// <param name="withFlags">withFlags.</param>
        /// <param name="withoutFlags">withoutFlags.</param>
        public ImapServerSearchOptions(string seqNum = default, string uid = default, DateTime? since = default, DateTime? before = default, DateTime? sentSince = default, DateTime? sentBefore = default, Dictionary<string, List<string>> header = default, List<string> body = default, List<string> text = default, List<string> withFlags = default, List<string> withoutFlags = default)
        {
            this.SeqNum = seqNum;
            this.Uid = uid;
            this.Since = since;
            this.Before = before;
            this.SentSince = sentSince;
            this.SentBefore = sentBefore;
            this.Header = header;
            this.Body = body;
            this.Text = text;
            this.WithFlags = withFlags;
            this.WithoutFlags = withoutFlags;
        }

        /// <summary>
        /// Gets or Sets SeqNum
        /// </summary>
        [DataMember(Name = "seqNum", EmitDefaultValue = true)]
        public string SeqNum { get; set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name = "uid", EmitDefaultValue = true)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets Since
        /// </summary>
        [DataMember(Name = "since", EmitDefaultValue = true)]
        public DateTime? Since { get; set; }

        /// <summary>
        /// Gets or Sets Before
        /// </summary>
        [DataMember(Name = "before", EmitDefaultValue = true)]
        public DateTime? Before { get; set; }

        /// <summary>
        /// Gets or Sets SentSince
        /// </summary>
        [DataMember(Name = "sentSince", EmitDefaultValue = true)]
        public DateTime? SentSince { get; set; }

        /// <summary>
        /// Gets or Sets SentBefore
        /// </summary>
        [DataMember(Name = "sentBefore", EmitDefaultValue = true)]
        public DateTime? SentBefore { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "header", EmitDefaultValue = true)]
        public Dictionary<string, List<string>> Header { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = true)]
        public List<string> Body { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public List<string> Text { get; set; }

        /// <summary>
        /// Gets or Sets WithFlags
        /// </summary>
        [DataMember(Name = "withFlags", EmitDefaultValue = true)]
        public List<string> WithFlags { get; set; }

        /// <summary>
        /// Gets or Sets WithoutFlags
        /// </summary>
        [DataMember(Name = "withoutFlags", EmitDefaultValue = true)]
        public List<string> WithoutFlags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImapServerSearchOptions {\n");
            sb.Append("  SeqNum: ").Append(SeqNum).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  SentSince: ").Append(SentSince).Append("\n");
            sb.Append("  SentBefore: ").Append(SentBefore).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  WithFlags: ").Append(WithFlags).Append("\n");
            sb.Append("  WithoutFlags: ").Append(WithoutFlags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
