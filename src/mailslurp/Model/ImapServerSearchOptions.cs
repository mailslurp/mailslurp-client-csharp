// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// IMAP server search options
    /// </summary>
    public partial class ImapServerSearchOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImapServerSearchOptions" /> class.
        /// </summary>
        /// <param name="seqNum">seqNum</param>
        /// <param name="uid">uid</param>
        /// <param name="since">since</param>
        /// <param name="before">before</param>
        /// <param name="sentSince">sentSince</param>
        /// <param name="sentBefore">sentBefore</param>
        /// <param name="header">header</param>
        /// <param name="body">body</param>
        /// <param name="text">text</param>
        /// <param name="withFlags">withFlags</param>
        /// <param name="withoutFlags">withoutFlags</param>
        [JsonConstructor]
        public ImapServerSearchOptions(Option<string> seqNum = default, Option<string> uid = default, Option<DateTime?> since = default, Option<DateTime?> before = default, Option<DateTime?> sentSince = default, Option<DateTime?> sentBefore = default, Option<Dictionary<string, List<string>>> header = default, Option<List<string>> body = default, Option<List<string>> text = default, Option<List<string>> withFlags = default, Option<List<string>> withoutFlags = default)
        {
            SeqNumOption = seqNum;
            UidOption = uid;
            SinceOption = since;
            BeforeOption = before;
            SentSinceOption = sentSince;
            SentBeforeOption = sentBefore;
            HeaderOption = header;
            BodyOption = body;
            TextOption = text;
            WithFlagsOption = withFlags;
            WithoutFlagsOption = withoutFlags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SeqNum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SeqNumOption { get; private set; }

        /// <summary>
        /// Gets or Sets SeqNum
        /// </summary>
        [JsonPropertyName("seqNum")]
        public string SeqNum { get { return this.SeqNumOption; } set { this.SeqNumOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Uid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UidOption { get; private set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [JsonPropertyName("uid")]
        public string Uid { get { return this.UidOption; } set { this.UidOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Since
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SinceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Since
        /// </summary>
        [JsonPropertyName("since")]
        public DateTime? Since { get { return this.SinceOption; } set { this.SinceOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Before
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BeforeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Before
        /// </summary>
        [JsonPropertyName("before")]
        public DateTime? Before { get { return this.BeforeOption; } set { this.BeforeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of SentSince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SentSinceOption { get; private set; }

        /// <summary>
        /// Gets or Sets SentSince
        /// </summary>
        [JsonPropertyName("sentSince")]
        public DateTime? SentSince { get { return this.SentSinceOption; } set { this.SentSinceOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of SentBefore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SentBeforeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SentBefore
        /// </summary>
        [JsonPropertyName("sentBefore")]
        public DateTime? SentBefore { get { return this.SentBeforeOption; } set { this.SentBeforeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Header
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, List<string>>> HeaderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [JsonPropertyName("header")]
        public Dictionary<string, List<string>> Header { get { return this.HeaderOption; } set { this.HeaderOption = new Option<Dictionary<string, List<string>>>(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public List<string> Body { get { return this.BodyOption; } set { this.BodyOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public List<string> Text { get { return this.TextOption; } set { this.TextOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of WithFlags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> WithFlagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets WithFlags
        /// </summary>
        [JsonPropertyName("withFlags")]
        public List<string> WithFlags { get { return this.WithFlagsOption; } set { this.WithFlagsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of WithoutFlags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> WithoutFlagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets WithoutFlags
        /// </summary>
        [JsonPropertyName("withoutFlags")]
        public List<string> WithoutFlags { get { return this.WithoutFlagsOption; } set { this.WithoutFlagsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImapServerSearchOptions {\n");
            sb.Append("  SeqNum: ").Append(SeqNum).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  SentSince: ").Append(SentSince).Append("\n");
            sb.Append("  SentBefore: ").Append(SentBefore).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  WithFlags: ").Append(WithFlags).Append("\n");
            sb.Append("  WithoutFlags: ").Append(WithoutFlags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImapServerSearchOptions" />
    /// </summary>
    public class ImapServerSearchOptionsJsonConverter : JsonConverter<ImapServerSearchOptions>
    {
        /// <summary>
        /// The format to use to serialize Since
        /// </summary>
        public static string SinceFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Before
        /// </summary>
        public static string BeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize SentSince
        /// </summary>
        public static string SentSinceFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize SentBefore
        /// </summary>
        public static string SentBeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ImapServerSearchOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImapServerSearchOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> seqNum = default;
            Option<string> uid = default;
            Option<DateTime?> since = default;
            Option<DateTime?> before = default;
            Option<DateTime?> sentSince = default;
            Option<DateTime?> sentBefore = default;
            Option<Dictionary<string, List<string>>> header = default;
            Option<List<string>> body = default;
            Option<List<string>> text = default;
            Option<List<string>> withFlags = default;
            Option<List<string>> withoutFlags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "seqNum":
                            seqNum = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "uid":
                            uid = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "since":
                            since = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "before":
                            before = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sentSince":
                            sentSince = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sentBefore":
                            sentBefore = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "header":
                            header = new Option<Dictionary<string, List<string>>>(JsonSerializer.Deserialize<Dictionary<string, List<string>>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "body":
                            body = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "text":
                            text = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "withFlags":
                            withFlags = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "withoutFlags":
                            withoutFlags = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ImapServerSearchOptions(seqNum, uid, since, before, sentSince, sentBefore, header, body, text, withFlags, withoutFlags);
        }

        /// <summary>
        /// Serializes a <see cref="ImapServerSearchOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapServerSearchOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImapServerSearchOptions imapServerSearchOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imapServerSearchOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImapServerSearchOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imapServerSearchOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImapServerSearchOptions imapServerSearchOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imapServerSearchOptions.SeqNumOption.IsSet)
                if (imapServerSearchOptions.SeqNumOption.Value != null)
                    writer.WriteString("seqNum", imapServerSearchOptions.SeqNum);
                else
                    writer.WriteNull("seqNum");

            if (imapServerSearchOptions.UidOption.IsSet)
                if (imapServerSearchOptions.UidOption.Value != null)
                    writer.WriteString("uid", imapServerSearchOptions.Uid);
                else
                    writer.WriteNull("uid");

            if (imapServerSearchOptions.SinceOption.IsSet)
                if (imapServerSearchOptions.SinceOption.Value != null)
                    writer.WriteString("since", imapServerSearchOptions.SinceOption.Value.Value.ToString(SinceFormat));
                else
                    writer.WriteNull("since");

            if (imapServerSearchOptions.BeforeOption.IsSet)
                if (imapServerSearchOptions.BeforeOption.Value != null)
                    writer.WriteString("before", imapServerSearchOptions.BeforeOption.Value.Value.ToString(BeforeFormat));
                else
                    writer.WriteNull("before");

            if (imapServerSearchOptions.SentSinceOption.IsSet)
                if (imapServerSearchOptions.SentSinceOption.Value != null)
                    writer.WriteString("sentSince", imapServerSearchOptions.SentSinceOption.Value.Value.ToString(SentSinceFormat));
                else
                    writer.WriteNull("sentSince");

            if (imapServerSearchOptions.SentBeforeOption.IsSet)
                if (imapServerSearchOptions.SentBeforeOption.Value != null)
                    writer.WriteString("sentBefore", imapServerSearchOptions.SentBeforeOption.Value.Value.ToString(SentBeforeFormat));
                else
                    writer.WriteNull("sentBefore");

            if (imapServerSearchOptions.HeaderOption.IsSet)
                if (imapServerSearchOptions.HeaderOption.Value != null)
                {
                    writer.WritePropertyName("header");
                    JsonSerializer.Serialize(writer, imapServerSearchOptions.Header, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("header");
            if (imapServerSearchOptions.BodyOption.IsSet)
                if (imapServerSearchOptions.BodyOption.Value != null)
                {
                    writer.WritePropertyName("body");
                    JsonSerializer.Serialize(writer, imapServerSearchOptions.Body, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("body");
            if (imapServerSearchOptions.TextOption.IsSet)
                if (imapServerSearchOptions.TextOption.Value != null)
                {
                    writer.WritePropertyName("text");
                    JsonSerializer.Serialize(writer, imapServerSearchOptions.Text, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("text");
            if (imapServerSearchOptions.WithFlagsOption.IsSet)
                if (imapServerSearchOptions.WithFlagsOption.Value != null)
                {
                    writer.WritePropertyName("withFlags");
                    JsonSerializer.Serialize(writer, imapServerSearchOptions.WithFlags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("withFlags");
            if (imapServerSearchOptions.WithoutFlagsOption.IsSet)
                if (imapServerSearchOptions.WithoutFlagsOption.Value != null)
                {
                    writer.WritePropertyName("withoutFlags");
                    JsonSerializer.Serialize(writer, imapServerSearchOptions.WithoutFlags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("withoutFlags");
        }
    }
}
