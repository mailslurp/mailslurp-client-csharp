// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for updating an inbox replier
    /// </summary>
    public partial class UpdateInboxReplierOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateInboxReplierOptions" /> class.
        /// </summary>
        /// <param name="inboxId">Inbox ID to attach replier to</param>
        /// <param name="field">Field to match against to trigger inbox replier for inbound email</param>
        /// <param name="match">String or wildcard style match for field specified when evaluating reply rules</param>
        /// <param name="name">Name for replier</param>
        /// <param name="replyTo">Reply-to email address when sending replying</param>
        /// <param name="subject">Subject override when replying to email</param>
        /// <param name="from">Send email from address</param>
        /// <param name="charset">Email reply charset</param>
        /// <param name="isHTML">Send HTML email</param>
        /// <param name="ignoreReplyTo">Ignore sender replyTo when responding. Send directly to the sender if enabled.</param>
        /// <param name="body">Email body for reply</param>
        /// <param name="templateId">ID of template to use when sending a reply</param>
        /// <param name="templateVariables">Template variable values</param>
        [JsonConstructor]
        public UpdateInboxReplierOptions(Guid inboxId, FieldEnum field, string match, Option<string> name = default, Option<string> replyTo = default, Option<string> subject = default, Option<string> from = default, Option<string> charset = default, Option<bool?> isHTML = default, Option<bool?> ignoreReplyTo = default, Option<string> body = default, Option<Guid?> templateId = default, Option<Dictionary<string, Object>> templateVariables = default)
        {
            InboxId = inboxId;
            Field = field;
            Match = match;
            NameOption = name;
            ReplyToOption = replyTo;
            SubjectOption = subject;
            FromOption = from;
            CharsetOption = charset;
            IsHTMLOption = isHTML;
            IgnoreReplyToOption = ignoreReplyTo;
            BodyOption = body;
            TemplateIdOption = templateId;
            TemplateVariablesOption = templateVariables;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Field to match against to trigger inbox replier for inbound email
        /// </summary>
        /// <value>Field to match against to trigger inbox replier for inbound email</value>
        public enum FieldEnum
        {
            /// <summary>
            /// Enum RECIPIENTS for value: RECIPIENTS
            /// </summary>
            RECIPIENTS = 1,

            /// <summary>
            /// Enum SENDER for value: SENDER
            /// </summary>
            SENDER = 2,

            /// <summary>
            /// Enum SUBJECT for value: SUBJECT
            /// </summary>
            SUBJECT = 3,

            /// <summary>
            /// Enum ATTACHMENTS for value: ATTACHMENTS
            /// </summary>
            ATTACHMENTS = 4
        }

        /// <summary>
        /// Returns a <see cref="FieldEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FieldEnum FieldEnumFromString(string value)
        {
            if (value.Equals("RECIPIENTS"))
                return FieldEnum.RECIPIENTS;

            if (value.Equals("SENDER"))
                return FieldEnum.SENDER;

            if (value.Equals("SUBJECT"))
                return FieldEnum.SUBJECT;

            if (value.Equals("ATTACHMENTS"))
                return FieldEnum.ATTACHMENTS;

            throw new NotImplementedException($"Could not convert value to type FieldEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FieldEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FieldEnum? FieldEnumFromStringOrDefault(string value)
        {
            if (value.Equals("RECIPIENTS"))
                return FieldEnum.RECIPIENTS;

            if (value.Equals("SENDER"))
                return FieldEnum.SENDER;

            if (value.Equals("SUBJECT"))
                return FieldEnum.SUBJECT;

            if (value.Equals("ATTACHMENTS"))
                return FieldEnum.ATTACHMENTS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FieldEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FieldEnumToJsonValue(FieldEnum value)
        {
            if (value == FieldEnum.RECIPIENTS)
                return "RECIPIENTS";

            if (value == FieldEnum.SENDER)
                return "SENDER";

            if (value == FieldEnum.SUBJECT)
                return "SUBJECT";

            if (value == FieldEnum.ATTACHMENTS)
                return "ATTACHMENTS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Field to match against to trigger inbox replier for inbound email
        /// </summary>
        /// <value>Field to match against to trigger inbox replier for inbound email</value>
        [JsonPropertyName("field")]
        public FieldEnum Field { get; set; }

        /// <summary>
        /// Inbox ID to attach replier to
        /// </summary>
        /// <value>Inbox ID to attach replier to</value>
        [JsonPropertyName("inboxId")]
        public Guid InboxId { get; set; }

        /// <summary>
        /// String or wildcard style match for field specified when evaluating reply rules
        /// </summary>
        /// <value>String or wildcard style match for field specified when evaluating reply rules</value>
        [JsonPropertyName("match")]
        public string Match { get; set; }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Name for replier
        /// </summary>
        /// <value>Name for replier</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReplyToOption { get; private set; }

        /// <summary>
        /// Reply-to email address when sending replying
        /// </summary>
        /// <value>Reply-to email address when sending replying</value>
        [JsonPropertyName("replyTo")]
        public string ReplyTo { get { return this.ReplyToOption; } set { this.ReplyToOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Subject override when replying to email
        /// </summary>
        /// <value>Subject override when replying to email</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// Send email from address
        /// </summary>
        /// <value>Send email from address</value>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Charset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CharsetOption { get; private set; }

        /// <summary>
        /// Email reply charset
        /// </summary>
        /// <value>Email reply charset</value>
        [JsonPropertyName("charset")]
        public string Charset { get { return this.CharsetOption; } set { this.CharsetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsHTML
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsHTMLOption { get; private set; }

        /// <summary>
        /// Send HTML email
        /// </summary>
        /// <value>Send HTML email</value>
        [JsonPropertyName("isHTML")]
        public bool? IsHTML { get { return this.IsHTMLOption; } set { this.IsHTMLOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IgnoreReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IgnoreReplyToOption { get; private set; }

        /// <summary>
        /// Ignore sender replyTo when responding. Send directly to the sender if enabled.
        /// </summary>
        /// <value>Ignore sender replyTo when responding. Send directly to the sender if enabled.</value>
        [JsonPropertyName("ignoreReplyTo")]
        public bool? IgnoreReplyTo { get { return this.IgnoreReplyToOption; } set { this.IgnoreReplyToOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyOption { get; private set; }

        /// <summary>
        /// Email body for reply
        /// </summary>
        /// <value>Email body for reply</value>
        [JsonPropertyName("body")]
        public string Body { get { return this.BodyOption; } set { this.BodyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TemplateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> TemplateIdOption { get; private set; }

        /// <summary>
        /// ID of template to use when sending a reply
        /// </summary>
        /// <value>ID of template to use when sending a reply</value>
        [JsonPropertyName("templateId")]
        public Guid? TemplateId { get { return this.TemplateIdOption; } set { this.TemplateIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of TemplateVariables
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>> TemplateVariablesOption { get; private set; }

        /// <summary>
        /// Template variable values
        /// </summary>
        /// <value>Template variable values</value>
        [JsonPropertyName("templateVariables")]
        public Dictionary<string, Object> TemplateVariables { get { return this.TemplateVariablesOption; } set { this.TemplateVariablesOption = new Option<Dictionary<string, Object>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateInboxReplierOptions {\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Charset: ").Append(Charset).Append("\n");
            sb.Append("  IsHTML: ").Append(IsHTML).Append("\n");
            sb.Append("  IgnoreReplyTo: ").Append(IgnoreReplyTo).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateVariables: ").Append(TemplateVariables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateInboxReplierOptions" />
    /// </summary>
    public class UpdateInboxReplierOptionsJsonConverter : JsonConverter<UpdateInboxReplierOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateInboxReplierOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateInboxReplierOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> inboxId = default;
            Option<UpdateInboxReplierOptions.FieldEnum?> field = default;
            Option<string> match = default;
            Option<string> name = default;
            Option<string> replyTo = default;
            Option<string> subject = default;
            Option<string> from = default;
            Option<string> charset = default;
            Option<bool?> isHTML = default;
            Option<bool?> ignoreReplyTo = default;
            Option<string> body = default;
            Option<Guid?> templateId = default;
            Option<Dictionary<string, Object>> templateVariables = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "field":
                            string fieldRawValue = utf8JsonReader.GetString();
                            if (fieldRawValue != null)
                                field = new Option<UpdateInboxReplierOptions.FieldEnum?>(UpdateInboxReplierOptions.FieldEnumFromStringOrDefault(fieldRawValue));
                            break;
                        case "match":
                            match = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "replyTo":
                            replyTo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "charset":
                            charset = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isHTML":
                            isHTML = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ignoreReplyTo":
                            ignoreReplyTo = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "templateId":
                            templateId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "templateVariables":
                            templateVariables = new Option<Dictionary<string, Object>>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!inboxId.IsSet)
                throw new ArgumentException("Property is required for class UpdateInboxReplierOptions.", nameof(inboxId));

            if (!field.IsSet)
                throw new ArgumentException("Property is required for class UpdateInboxReplierOptions.", nameof(field));

            if (!match.IsSet)
                throw new ArgumentException("Property is required for class UpdateInboxReplierOptions.", nameof(match));

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class UpdateInboxReplierOptions.");

            if (field.IsSet && field.Value == null)
                throw new ArgumentNullException(nameof(field), "Property is not nullable for class UpdateInboxReplierOptions.");

            if (match.IsSet && match.Value == null)
                throw new ArgumentNullException(nameof(match), "Property is not nullable for class UpdateInboxReplierOptions.");

            return new UpdateInboxReplierOptions(inboxId.Value.Value, field.Value.Value, match.Value, name, replyTo, subject, from, charset, isHTML, ignoreReplyTo, body, templateId, templateVariables);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateInboxReplierOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateInboxReplierOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateInboxReplierOptions updateInboxReplierOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateInboxReplierOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateInboxReplierOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateInboxReplierOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateInboxReplierOptions updateInboxReplierOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateInboxReplierOptions.Match == null)
                throw new ArgumentNullException(nameof(updateInboxReplierOptions.Match), "Property is required for class UpdateInboxReplierOptions.");

            writer.WriteString("inboxId", updateInboxReplierOptions.InboxId);

            var fieldRawValue = UpdateInboxReplierOptions.FieldEnumToJsonValue(updateInboxReplierOptions.Field);
            writer.WriteString("field", fieldRawValue);
            writer.WriteString("match", updateInboxReplierOptions.Match);

            if (updateInboxReplierOptions.NameOption.IsSet)
                if (updateInboxReplierOptions.NameOption.Value != null)
                    writer.WriteString("name", updateInboxReplierOptions.Name);
                else
                    writer.WriteNull("name");

            if (updateInboxReplierOptions.ReplyToOption.IsSet)
                if (updateInboxReplierOptions.ReplyToOption.Value != null)
                    writer.WriteString("replyTo", updateInboxReplierOptions.ReplyTo);
                else
                    writer.WriteNull("replyTo");

            if (updateInboxReplierOptions.SubjectOption.IsSet)
                if (updateInboxReplierOptions.SubjectOption.Value != null)
                    writer.WriteString("subject", updateInboxReplierOptions.Subject);
                else
                    writer.WriteNull("subject");

            if (updateInboxReplierOptions.FromOption.IsSet)
                if (updateInboxReplierOptions.FromOption.Value != null)
                    writer.WriteString("from", updateInboxReplierOptions.From);
                else
                    writer.WriteNull("from");

            if (updateInboxReplierOptions.CharsetOption.IsSet)
                if (updateInboxReplierOptions.CharsetOption.Value != null)
                    writer.WriteString("charset", updateInboxReplierOptions.Charset);
                else
                    writer.WriteNull("charset");

            if (updateInboxReplierOptions.IsHTMLOption.IsSet)
                if (updateInboxReplierOptions.IsHTMLOption.Value != null)
                    writer.WriteBoolean("isHTML", updateInboxReplierOptions.IsHTMLOption.Value.Value);
                else
                    writer.WriteNull("isHTML");

            if (updateInboxReplierOptions.IgnoreReplyToOption.IsSet)
                if (updateInboxReplierOptions.IgnoreReplyToOption.Value != null)
                    writer.WriteBoolean("ignoreReplyTo", updateInboxReplierOptions.IgnoreReplyToOption.Value.Value);
                else
                    writer.WriteNull("ignoreReplyTo");

            if (updateInboxReplierOptions.BodyOption.IsSet)
                if (updateInboxReplierOptions.BodyOption.Value != null)
                    writer.WriteString("body", updateInboxReplierOptions.Body);
                else
                    writer.WriteNull("body");

            if (updateInboxReplierOptions.TemplateIdOption.IsSet)
                if (updateInboxReplierOptions.TemplateIdOption.Value != null)
                    writer.WriteString("templateId", updateInboxReplierOptions.TemplateIdOption.Value.Value);
                else
                    writer.WriteNull("templateId");

            if (updateInboxReplierOptions.TemplateVariablesOption.IsSet)
                if (updateInboxReplierOptions.TemplateVariablesOption.Value != null)
                {
                    writer.WritePropertyName("templateVariables");
                    JsonSerializer.Serialize(writer, updateInboxReplierOptions.TemplateVariables, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("templateVariables");
        }
    }
}
