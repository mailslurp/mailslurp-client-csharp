// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// FakeEmailDto
    /// </summary>
    public partial class FakeEmailDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FakeEmailDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="emailAddress">emailAddress</param>
        /// <param name="attachmentNames">attachmentNames</param>
        /// <param name="body">body</param>
        /// <param name="seen">seen</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="contentType">contentType</param>
        /// <param name="bodyUrl">bodyUrl</param>
        /// <param name="sender">sender</param>
        /// <param name="recipients">recipients</param>
        /// <param name="subject">subject</param>
        /// <param name="preview">preview</param>
        [JsonConstructor]
        public FakeEmailDto(Guid id, string emailAddress, List<string> attachmentNames, string body, bool seen, DateTime createdAt, string contentType, string bodyUrl, Option<Sender> sender = default, Option<EmailRecipients> recipients = default, Option<string> subject = default, Option<string> preview = default)
        {
            Id = id;
            EmailAddress = emailAddress;
            AttachmentNames = attachmentNames;
            Body = body;
            Seen = seen;
            CreatedAt = createdAt;
            ContentType = contentType;
            BodyUrl = bodyUrl;
            SenderOption = sender;
            RecipientsOption = recipients;
            SubjectOption = subject;
            PreviewOption = preview;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentNames
        /// </summary>
        [JsonPropertyName("attachmentNames")]
        public List<string> AttachmentNames { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Seen
        /// </summary>
        [JsonPropertyName("seen")]
        public bool Seen { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [JsonPropertyName("contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets BodyUrl
        /// </summary>
        [JsonPropertyName("bodyUrl")]
        public string BodyUrl { get; set; }

        /// <summary>
        /// Used to track the state of Sender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Sender> SenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public Sender Sender { get { return this.SenderOption; } set { this.SenderOption = new Option<Sender>(value); } }

        /// <summary>
        /// Used to track the state of Recipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailRecipients> RecipientsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [JsonPropertyName("recipients")]
        public EmailRecipients Recipients { get { return this.RecipientsOption; } set { this.RecipientsOption = new Option<EmailRecipients>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Preview
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PreviewOption { get; private set; }

        /// <summary>
        /// Gets or Sets Preview
        /// </summary>
        [JsonPropertyName("preview")]
        public string Preview { get { return this.PreviewOption; } set { this.PreviewOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FakeEmailDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  AttachmentNames: ").Append(AttachmentNames).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Seen: ").Append(Seen).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  BodyUrl: ").Append(BodyUrl).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Preview: ").Append(Preview).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FakeEmailDto" />
    /// </summary>
    public class FakeEmailDtoJsonConverter : JsonConverter<FakeEmailDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="FakeEmailDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FakeEmailDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> emailAddress = default;
            Option<List<string>> attachmentNames = default;
            Option<string> body = default;
            Option<bool?> seen = default;
            Option<DateTime?> createdAt = default;
            Option<string> contentType = default;
            Option<string> bodyUrl = default;
            Option<Sender> sender = default;
            Option<EmailRecipients> recipients = default;
            Option<string> subject = default;
            Option<string> preview = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "attachmentNames":
                            attachmentNames = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "seen":
                            seen = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "contentType":
                            contentType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bodyUrl":
                            bodyUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sender":
                            sender = new Option<Sender>(JsonSerializer.Deserialize<Sender>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recipients":
                            recipients = new Option<EmailRecipients>(JsonSerializer.Deserialize<EmailRecipients>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "preview":
                            preview = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class FakeEmailDto.", nameof(id));

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class FakeEmailDto.", nameof(emailAddress));

            if (!attachmentNames.IsSet)
                throw new ArgumentException("Property is required for class FakeEmailDto.", nameof(attachmentNames));

            if (!body.IsSet)
                throw new ArgumentException("Property is required for class FakeEmailDto.", nameof(body));

            if (!seen.IsSet)
                throw new ArgumentException("Property is required for class FakeEmailDto.", nameof(seen));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class FakeEmailDto.", nameof(createdAt));

            if (!contentType.IsSet)
                throw new ArgumentException("Property is required for class FakeEmailDto.", nameof(contentType));

            if (!bodyUrl.IsSet)
                throw new ArgumentException("Property is required for class FakeEmailDto.", nameof(bodyUrl));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FakeEmailDto.");

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress), "Property is not nullable for class FakeEmailDto.");

            if (attachmentNames.IsSet && attachmentNames.Value == null)
                throw new ArgumentNullException(nameof(attachmentNames), "Property is not nullable for class FakeEmailDto.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class FakeEmailDto.");

            if (seen.IsSet && seen.Value == null)
                throw new ArgumentNullException(nameof(seen), "Property is not nullable for class FakeEmailDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class FakeEmailDto.");

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class FakeEmailDto.");

            if (bodyUrl.IsSet && bodyUrl.Value == null)
                throw new ArgumentNullException(nameof(bodyUrl), "Property is not nullable for class FakeEmailDto.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class FakeEmailDto.");

            if (preview.IsSet && preview.Value == null)
                throw new ArgumentNullException(nameof(preview), "Property is not nullable for class FakeEmailDto.");

            return new FakeEmailDto(id.Value.Value, emailAddress.Value, attachmentNames.Value, body.Value, seen.Value.Value, createdAt.Value.Value, contentType.Value, bodyUrl.Value, sender, recipients, subject, preview);
        }

        /// <summary>
        /// Serializes a <see cref="FakeEmailDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fakeEmailDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FakeEmailDto fakeEmailDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fakeEmailDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FakeEmailDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fakeEmailDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FakeEmailDto fakeEmailDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fakeEmailDto.EmailAddress == null)
                throw new ArgumentNullException(nameof(fakeEmailDto.EmailAddress), "Property is required for class FakeEmailDto.");

            if (fakeEmailDto.AttachmentNames == null)
                throw new ArgumentNullException(nameof(fakeEmailDto.AttachmentNames), "Property is required for class FakeEmailDto.");

            if (fakeEmailDto.Body == null)
                throw new ArgumentNullException(nameof(fakeEmailDto.Body), "Property is required for class FakeEmailDto.");

            if (fakeEmailDto.ContentType == null)
                throw new ArgumentNullException(nameof(fakeEmailDto.ContentType), "Property is required for class FakeEmailDto.");

            if (fakeEmailDto.BodyUrl == null)
                throw new ArgumentNullException(nameof(fakeEmailDto.BodyUrl), "Property is required for class FakeEmailDto.");

            if (fakeEmailDto.SubjectOption.IsSet && fakeEmailDto.Subject == null)
                throw new ArgumentNullException(nameof(fakeEmailDto.Subject), "Property is required for class FakeEmailDto.");

            if (fakeEmailDto.PreviewOption.IsSet && fakeEmailDto.Preview == null)
                throw new ArgumentNullException(nameof(fakeEmailDto.Preview), "Property is required for class FakeEmailDto.");

            writer.WriteString("id", fakeEmailDto.Id);

            writer.WriteString("emailAddress", fakeEmailDto.EmailAddress);

            writer.WritePropertyName("attachmentNames");
            JsonSerializer.Serialize(writer, fakeEmailDto.AttachmentNames, jsonSerializerOptions);
            writer.WriteString("body", fakeEmailDto.Body);

            writer.WriteBoolean("seen", fakeEmailDto.Seen);

            writer.WriteString("createdAt", fakeEmailDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("contentType", fakeEmailDto.ContentType);

            writer.WriteString("bodyUrl", fakeEmailDto.BodyUrl);

            if (fakeEmailDto.SenderOption.IsSet)
                if (fakeEmailDto.SenderOption.Value != null)
                {
                    writer.WritePropertyName("sender");
                    JsonSerializer.Serialize(writer, fakeEmailDto.Sender, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sender");
            if (fakeEmailDto.RecipientsOption.IsSet)
                if (fakeEmailDto.RecipientsOption.Value != null)
                {
                    writer.WritePropertyName("recipients");
                    JsonSerializer.Serialize(writer, fakeEmailDto.Recipients, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("recipients");
            if (fakeEmailDto.SubjectOption.IsSet)
                writer.WriteString("subject", fakeEmailDto.Subject);

            if (fakeEmailDto.PreviewOption.IsSet)
                writer.WriteString("preview", fakeEmailDto.Preview);
        }
    }
}
