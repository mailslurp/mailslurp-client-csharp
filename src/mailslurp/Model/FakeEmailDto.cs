/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// FakeEmailDto
    /// </summary>
    [DataContract(Name = "FakeEmailDto")]
    public partial class FakeEmailDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FakeEmailDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FakeEmailDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FakeEmailDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="emailAddress">emailAddress (required).</param>
        /// <param name="sender">sender.</param>
        /// <param name="recipients">recipients.</param>
        /// <param name="attachmentNames">attachmentNames (required).</param>
        /// <param name="subject">subject.</param>
        /// <param name="preview">preview.</param>
        /// <param name="body">body (required).</param>
        /// <param name="seen">seen (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="contentType">contentType (required).</param>
        /// <param name="bodyUrl">bodyUrl (required).</param>
        public FakeEmailDto(Guid id = default, string emailAddress = default, Sender sender = default, EmailRecipients recipients = default, List<string> attachmentNames = default, string subject = default, string preview = default, string body = default, bool seen = default, DateTime createdAt = default, string contentType = default, string bodyUrl = default)
        {
            this.Id = id;
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new ArgumentNullException("emailAddress is a required property for FakeEmailDto and cannot be null");
            }
            this.EmailAddress = emailAddress;
            // to ensure "attachmentNames" is required (not null)
            if (attachmentNames == null)
            {
                throw new ArgumentNullException("attachmentNames is a required property for FakeEmailDto and cannot be null");
            }
            this.AttachmentNames = attachmentNames;
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new ArgumentNullException("body is a required property for FakeEmailDto and cannot be null");
            }
            this.Body = body;
            this.Seen = seen;
            this.CreatedAt = createdAt;
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new ArgumentNullException("contentType is a required property for FakeEmailDto and cannot be null");
            }
            this.ContentType = contentType;
            // to ensure "bodyUrl" is required (not null)
            if (bodyUrl == null)
            {
                throw new ArgumentNullException("bodyUrl is a required property for FakeEmailDto and cannot be null");
            }
            this.BodyUrl = bodyUrl;
            this.Sender = sender;
            this.Recipients = recipients;
            this.Subject = subject;
            this.Preview = preview;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "emailAddress", IsRequired = true, EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = true)]
        public Sender Sender { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name = "recipients", EmitDefaultValue = true)]
        public EmailRecipients Recipients { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentNames
        /// </summary>
        [DataMember(Name = "attachmentNames", IsRequired = true, EmitDefaultValue = true)]
        public List<string> AttachmentNames { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Preview
        /// </summary>
        [DataMember(Name = "preview", EmitDefaultValue = false)]
        public string Preview { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", IsRequired = true, EmitDefaultValue = true)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Seen
        /// </summary>
        [DataMember(Name = "seen", IsRequired = true, EmitDefaultValue = true)]
        public bool Seen { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "contentType", IsRequired = true, EmitDefaultValue = true)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets BodyUrl
        /// </summary>
        [DataMember(Name = "bodyUrl", IsRequired = true, EmitDefaultValue = true)]
        public string BodyUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FakeEmailDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  AttachmentNames: ").Append(AttachmentNames).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Preview: ").Append(Preview).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Seen: ").Append(Seen).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  BodyUrl: ").Append(BodyUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
