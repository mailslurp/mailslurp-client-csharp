/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// EntityAutomationItemProjection
    /// </summary>
    [DataContract(Name = "EntityAutomationItemProjection")]
    public partial class EntityAutomationItemProjection : IValidatableObject
    {
        /// <summary>
        /// Defines AutomationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AutomationTypeEnum
        {
            /// <summary>
            /// Enum INBOXFORWARDER for value: INBOX_FORWARDER
            /// </summary>
            [EnumMember(Value = "INBOX_FORWARDER")]
            INBOXFORWARDER = 1,

            /// <summary>
            /// Enum INBOXREPLIER for value: INBOX_REPLIER
            /// </summary>
            [EnumMember(Value = "INBOX_REPLIER")]
            INBOXREPLIER = 2,

            /// <summary>
            /// Enum INBOXRULESET for value: INBOX_RULESET
            /// </summary>
            [EnumMember(Value = "INBOX_RULESET")]
            INBOXRULESET = 3
        }


        /// <summary>
        /// Gets or Sets AutomationType
        /// </summary>
        [DataMember(Name = "automationType", IsRequired = true, EmitDefaultValue = true)]
        public AutomationTypeEnum AutomationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityAutomationItemProjection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EntityAutomationItemProjection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityAutomationItemProjection" /> class.
        /// </summary>
        /// <param name="inboxId">inboxId.</param>
        /// <param name="phoneId">phoneId.</param>
        /// <param name="action">action.</param>
        /// <param name="automationType">automationType (required).</param>
        /// <param name="name">name.</param>
        /// <param name="id">id (required).</param>
        public EntityAutomationItemProjection(Guid inboxId = default, Guid phoneId = default, string action = default, AutomationTypeEnum automationType = default, string name = default, Guid id = default)
        {
            this.AutomationType = automationType;
            this.Id = id;
            this.InboxId = inboxId;
            this.PhoneId = phoneId;
            this.Action = action;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [DataMember(Name = "inboxId", EmitDefaultValue = false)]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets PhoneId
        /// </summary>
        [DataMember(Name = "phoneId", EmitDefaultValue = false)]
        public Guid PhoneId { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityAutomationItemProjection {\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  PhoneId: ").Append(PhoneId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  AutomationType: ").Append(AutomationType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
