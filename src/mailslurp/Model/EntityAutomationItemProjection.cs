// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EntityAutomationItemProjection
    /// </summary>
    public partial class EntityAutomationItemProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityAutomationItemProjection" /> class.
        /// </summary>
        /// <param name="automationType">automationType</param>
        /// <param name="id">id</param>
        /// <param name="inboxId">inboxId</param>
        /// <param name="phoneId">phoneId</param>
        /// <param name="action">action</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public EntityAutomationItemProjection(AutomationTypeEnum automationType, Guid id, Option<Guid?> inboxId = default, Option<Guid?> phoneId = default, Option<string> action = default, Option<string> name = default)
        {
            AutomationType = automationType;
            Id = id;
            InboxIdOption = inboxId;
            PhoneIdOption = phoneId;
            ActionOption = action;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines AutomationType
        /// </summary>
        public enum AutomationTypeEnum
        {
            /// <summary>
            /// Enum INBOXFORWARDER for value: INBOX_FORWARDER
            /// </summary>
            INBOXFORWARDER = 1,

            /// <summary>
            /// Enum INBOXREPLIER for value: INBOX_REPLIER
            /// </summary>
            INBOXREPLIER = 2,

            /// <summary>
            /// Enum INBOXRULESET for value: INBOX_RULESET
            /// </summary>
            INBOXRULESET = 3
        }

        /// <summary>
        /// Returns a <see cref="AutomationTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AutomationTypeEnum AutomationTypeEnumFromString(string value)
        {
            if (value.Equals("INBOX_FORWARDER"))
                return AutomationTypeEnum.INBOXFORWARDER;

            if (value.Equals("INBOX_REPLIER"))
                return AutomationTypeEnum.INBOXREPLIER;

            if (value.Equals("INBOX_RULESET"))
                return AutomationTypeEnum.INBOXRULESET;

            throw new NotImplementedException($"Could not convert value to type AutomationTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AutomationTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AutomationTypeEnum? AutomationTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("INBOX_FORWARDER"))
                return AutomationTypeEnum.INBOXFORWARDER;

            if (value.Equals("INBOX_REPLIER"))
                return AutomationTypeEnum.INBOXREPLIER;

            if (value.Equals("INBOX_RULESET"))
                return AutomationTypeEnum.INBOXRULESET;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AutomationTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AutomationTypeEnumToJsonValue(AutomationTypeEnum value)
        {
            if (value == AutomationTypeEnum.INBOXFORWARDER)
                return "INBOX_FORWARDER";

            if (value == AutomationTypeEnum.INBOXREPLIER)
                return "INBOX_REPLIER";

            if (value == AutomationTypeEnum.INBOXRULESET)
                return "INBOX_RULESET";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets AutomationType
        /// </summary>
        [JsonPropertyName("automationType")]
        public AutomationTypeEnum AutomationType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of PhoneId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> PhoneIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhoneId
        /// </summary>
        [JsonPropertyName("phoneId")]
        public Guid? PhoneId { get { return this.PhoneIdOption; } set { this.PhoneIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Action
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ActionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonPropertyName("action")]
        public string Action { get { return this.ActionOption; } set { this.ActionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityAutomationItemProjection {\n");
            sb.Append("  AutomationType: ").Append(AutomationType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  PhoneId: ").Append(PhoneId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EntityAutomationItemProjection" />
    /// </summary>
    public class EntityAutomationItemProjectionJsonConverter : JsonConverter<EntityAutomationItemProjection>
    {
        /// <summary>
        /// Deserializes json to <see cref="EntityAutomationItemProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EntityAutomationItemProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EntityAutomationItemProjection.AutomationTypeEnum?> automationType = default;
            Option<Guid?> id = default;
            Option<Guid?> inboxId = default;
            Option<Guid?> phoneId = default;
            Option<string> action = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "automationType":
                            string automationTypeRawValue = utf8JsonReader.GetString();
                            if (automationTypeRawValue != null)
                                automationType = new Option<EntityAutomationItemProjection.AutomationTypeEnum?>(EntityAutomationItemProjection.AutomationTypeEnumFromStringOrDefault(automationTypeRawValue));
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "phoneId":
                            phoneId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "action":
                            action = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!automationType.IsSet)
                throw new ArgumentException("Property is required for class EntityAutomationItemProjection.", nameof(automationType));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class EntityAutomationItemProjection.", nameof(id));

            if (automationType.IsSet && automationType.Value == null)
                throw new ArgumentNullException(nameof(automationType), "Property is not nullable for class EntityAutomationItemProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EntityAutomationItemProjection.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class EntityAutomationItemProjection.");

            if (phoneId.IsSet && phoneId.Value == null)
                throw new ArgumentNullException(nameof(phoneId), "Property is not nullable for class EntityAutomationItemProjection.");

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class EntityAutomationItemProjection.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class EntityAutomationItemProjection.");

            return new EntityAutomationItemProjection(automationType.Value.Value, id.Value.Value, inboxId, phoneId, action, name);
        }

        /// <summary>
        /// Serializes a <see cref="EntityAutomationItemProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityAutomationItemProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EntityAutomationItemProjection entityAutomationItemProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, entityAutomationItemProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EntityAutomationItemProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityAutomationItemProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EntityAutomationItemProjection entityAutomationItemProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (entityAutomationItemProjection.ActionOption.IsSet && entityAutomationItemProjection.Action == null)
                throw new ArgumentNullException(nameof(entityAutomationItemProjection.Action), "Property is required for class EntityAutomationItemProjection.");

            if (entityAutomationItemProjection.NameOption.IsSet && entityAutomationItemProjection.Name == null)
                throw new ArgumentNullException(nameof(entityAutomationItemProjection.Name), "Property is required for class EntityAutomationItemProjection.");

            var automationTypeRawValue = EntityAutomationItemProjection.AutomationTypeEnumToJsonValue(entityAutomationItemProjection.AutomationType);
            writer.WriteString("automationType", automationTypeRawValue);
            writer.WriteString("id", entityAutomationItemProjection.Id);

            if (entityAutomationItemProjection.InboxIdOption.IsSet)
                writer.WriteString("inboxId", entityAutomationItemProjection.InboxIdOption.Value.Value);

            if (entityAutomationItemProjection.PhoneIdOption.IsSet)
                writer.WriteString("phoneId", entityAutomationItemProjection.PhoneIdOption.Value.Value);

            if (entityAutomationItemProjection.ActionOption.IsSet)
                writer.WriteString("action", entityAutomationItemProjection.Action);

            if (entityAutomationItemProjection.NameOption.IsSet)
                writer.WriteString("name", entityAutomationItemProjection.Name);
        }
    }
}
