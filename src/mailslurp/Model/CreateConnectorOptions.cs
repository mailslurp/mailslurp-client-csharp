// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating an inbox connection with an external mail provider
    /// </summary>
    public partial class CreateConnectorOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorOptions" /> class.
        /// </summary>
        /// <param name="name">Name of connector</param>
        /// <param name="emailAddress">Email address of external inbox</param>
        /// <param name="enabled">Is connector enabled</param>
        [JsonConstructor]
        public CreateConnectorOptions(Option<string> name = default, Option<string> emailAddress = default, Option<bool?> enabled = default)
        {
            NameOption = name;
            EmailAddressOption = emailAddress;
            EnabledOption = enabled;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Name of connector
        /// </summary>
        /// <value>Name of connector</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailAddressOption { get; private set; }

        /// <summary>
        /// Email address of external inbox
        /// </summary>
        /// <value>Email address of external inbox</value>
        [JsonPropertyName("emailAddress")]
        public string EmailAddress { get { return this.EmailAddressOption; } set { this.EmailAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// Is connector enabled
        /// </summary>
        /// <value>Is connector enabled</value>
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectorOptions {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateConnectorOptions" />
    /// </summary>
    public class CreateConnectorOptionsJsonConverter : JsonConverter<CreateConnectorOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateConnectorOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateConnectorOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<string> emailAddress = default;
            Option<bool?> enabled = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "emailAddress":
                            emailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new CreateConnectorOptions(name, emailAddress, enabled);
        }

        /// <summary>
        /// Serializes a <see cref="CreateConnectorOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateConnectorOptions createConnectorOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createConnectorOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateConnectorOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateConnectorOptions createConnectorOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createConnectorOptions.NameOption.IsSet)
                if (createConnectorOptions.NameOption.Value != null)
                    writer.WriteString("name", createConnectorOptions.Name);
                else
                    writer.WriteNull("name");

            if (createConnectorOptions.EmailAddressOption.IsSet)
                if (createConnectorOptions.EmailAddressOption.Value != null)
                    writer.WriteString("emailAddress", createConnectorOptions.EmailAddress);
                else
                    writer.WriteNull("emailAddress");

            if (createConnectorOptions.EnabledOption.IsSet)
                if (createConnectorOptions.EnabledOption.Value != null)
                    writer.WriteBoolean("enabled", createConnectorOptions.EnabledOption.Value.Value);
                else
                    writer.WriteNull("enabled");
        }
    }
}
