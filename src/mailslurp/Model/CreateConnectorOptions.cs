/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating an inbox connection with an external mail provider
    /// </summary>
    [DataContract(Name = "CreateConnectorOptions")]
    public partial class CreateConnectorOptions : IEquatable<CreateConnectorOptions>, IValidatableObject
    {
        /// <summary>
        /// Sync schedule type
        /// </summary>
        /// <value>Sync schedule type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SyncScheduleTypeEnum
        {
            /// <summary>
            /// Enum INTERVAL for value: INTERVAL
            /// </summary>
            [EnumMember(Value = "INTERVAL")]
            INTERVAL = 1

        }


        /// <summary>
        /// Sync schedule type
        /// </summary>
        /// <value>Sync schedule type</value>
        [DataMember(Name = "syncScheduleType", EmitDefaultValue = true)]
        public SyncScheduleTypeEnum? SyncScheduleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConnectorOptions" /> class.
        /// </summary>
        /// <param name="syncEnabled">Enable automatic background sync.</param>
        /// <param name="syncScheduleType">Sync schedule type.</param>
        /// <param name="syncInterval">Sync interval in minutes.</param>
        /// <param name="name">Name of connector.</param>
        /// <param name="emailAddress">Email address of external inbox.</param>
        /// <param name="enabled">Is connector enabled.</param>
        public CreateConnectorOptions(bool? syncEnabled = default(bool?), SyncScheduleTypeEnum? syncScheduleType = default(SyncScheduleTypeEnum?), int? syncInterval = default(int?), string name = default(string), string emailAddress = default(string), bool? enabled = default(bool?))
        {
            this.SyncEnabled = syncEnabled;
            this.SyncScheduleType = syncScheduleType;
            this.SyncInterval = syncInterval;
            this.Name = name;
            this.EmailAddress = emailAddress;
            this.Enabled = enabled;
        }

        /// <summary>
        /// Enable automatic background sync
        /// </summary>
        /// <value>Enable automatic background sync</value>
        [DataMember(Name = "syncEnabled", EmitDefaultValue = true)]
        public bool? SyncEnabled { get; set; }

        /// <summary>
        /// Sync interval in minutes
        /// </summary>
        /// <value>Sync interval in minutes</value>
        [DataMember(Name = "syncInterval", EmitDefaultValue = true)]
        public int? SyncInterval { get; set; }

        /// <summary>
        /// Name of connector
        /// </summary>
        /// <value>Name of connector</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Email address of external inbox
        /// </summary>
        /// <value>Email address of external inbox</value>
        [DataMember(Name = "emailAddress", EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Is connector enabled
        /// </summary>
        /// <value>Is connector enabled</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConnectorOptions {\n");
            sb.Append("  SyncEnabled: ").Append(SyncEnabled).Append("\n");
            sb.Append("  SyncScheduleType: ").Append(SyncScheduleType).Append("\n");
            sb.Append("  SyncInterval: ").Append(SyncInterval).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateConnectorOptions);
        }

        /// <summary>
        /// Returns true if CreateConnectorOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateConnectorOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateConnectorOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SyncEnabled == input.SyncEnabled ||
                    (this.SyncEnabled != null &&
                    this.SyncEnabled.Equals(input.SyncEnabled))
                ) && 
                (
                    this.SyncScheduleType == input.SyncScheduleType ||
                    this.SyncScheduleType.Equals(input.SyncScheduleType)
                ) && 
                (
                    this.SyncInterval == input.SyncInterval ||
                    (this.SyncInterval != null &&
                    this.SyncInterval.Equals(input.SyncInterval))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SyncEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.SyncEnabled.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SyncScheduleType.GetHashCode();
                if (this.SyncInterval != null)
                {
                    hashCode = (hashCode * 59) + this.SyncInterval.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.Enabled != null)
                {
                    hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
