// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Test options for inbox ruleset receiving test
    /// </summary>
    public partial class TestInboxRulesetReceivingOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestInboxRulesetReceivingOptions" /> class.
        /// </summary>
        /// <param name="inboxId">inboxId</param>
        /// <param name="fromSender">fromSender</param>
        [JsonConstructor]
        public TestInboxRulesetReceivingOptions(Guid inboxId, string fromSender)
        {
            InboxId = inboxId;
            FromSender = fromSender;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets FromSender
        /// </summary>
        [JsonPropertyName("fromSender")]
        public string FromSender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestInboxRulesetReceivingOptions {\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  FromSender: ").Append(FromSender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TestInboxRulesetReceivingOptions" />
    /// </summary>
    public class TestInboxRulesetReceivingOptionsJsonConverter : JsonConverter<TestInboxRulesetReceivingOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="TestInboxRulesetReceivingOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TestInboxRulesetReceivingOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> inboxId = default;
            Option<string> fromSender = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "fromSender":
                            fromSender = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!inboxId.IsSet)
                throw new ArgumentException("Property is required for class TestInboxRulesetReceivingOptions.", nameof(inboxId));

            if (!fromSender.IsSet)
                throw new ArgumentException("Property is required for class TestInboxRulesetReceivingOptions.", nameof(fromSender));

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class TestInboxRulesetReceivingOptions.");

            if (fromSender.IsSet && fromSender.Value == null)
                throw new ArgumentNullException(nameof(fromSender), "Property is not nullable for class TestInboxRulesetReceivingOptions.");

            return new TestInboxRulesetReceivingOptions(inboxId.Value.Value, fromSender.Value);
        }

        /// <summary>
        /// Serializes a <see cref="TestInboxRulesetReceivingOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, testInboxRulesetReceivingOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TestInboxRulesetReceivingOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (testInboxRulesetReceivingOptions.FromSender == null)
                throw new ArgumentNullException(nameof(testInboxRulesetReceivingOptions.FromSender), "Property is required for class TestInboxRulesetReceivingOptions.");

            writer.WriteString("inboxId", testInboxRulesetReceivingOptions.InboxId);

            writer.WriteString("fromSender", testInboxRulesetReceivingOptions.FromSender);
        }
    }
}
