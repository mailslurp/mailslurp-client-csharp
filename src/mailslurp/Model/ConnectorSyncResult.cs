// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorSyncResult
    /// </summary>
    public partial class ConnectorSyncResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorSyncResult" /> class.
        /// </summary>
        /// <param name="emailSyncCount">emailSyncCount</param>
        /// <param name="logs">logs</param>
        /// <param name="emailIds">emailIds</param>
        [JsonConstructor]
        public ConnectorSyncResult(int emailSyncCount, Option<List<string>> logs = default, Option<List<Guid>> emailIds = default)
        {
            EmailSyncCount = emailSyncCount;
            LogsOption = logs;
            EmailIdsOption = emailIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EmailSyncCount
        /// </summary>
        [JsonPropertyName("emailSyncCount")]
        public int EmailSyncCount { get; set; }

        /// <summary>
        /// Used to track the state of Logs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> LogsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Logs
        /// </summary>
        [JsonPropertyName("logs")]
        public List<string> Logs { get { return this.LogsOption; } set { this.LogsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of EmailIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>> EmailIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailIds
        /// </summary>
        [JsonPropertyName("emailIds")]
        public List<Guid> EmailIds { get { return this.EmailIdsOption; } set { this.EmailIdsOption = new Option<List<Guid>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorSyncResult {\n");
            sb.Append("  EmailSyncCount: ").Append(EmailSyncCount).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  EmailIds: ").Append(EmailIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConnectorSyncResult" />
    /// </summary>
    public class ConnectorSyncResultJsonConverter : JsonConverter<ConnectorSyncResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="ConnectorSyncResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConnectorSyncResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> emailSyncCount = default;
            Option<List<string>> logs = default;
            Option<List<Guid>> emailIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "emailSyncCount":
                            emailSyncCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "logs":
                            logs = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "emailIds":
                            emailIds = new Option<List<Guid>>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!emailSyncCount.IsSet)
                throw new ArgumentException("Property is required for class ConnectorSyncResult.", nameof(emailSyncCount));

            if (emailSyncCount.IsSet && emailSyncCount.Value == null)
                throw new ArgumentNullException(nameof(emailSyncCount), "Property is not nullable for class ConnectorSyncResult.");

            if (logs.IsSet && logs.Value == null)
                throw new ArgumentNullException(nameof(logs), "Property is not nullable for class ConnectorSyncResult.");

            if (emailIds.IsSet && emailIds.Value == null)
                throw new ArgumentNullException(nameof(emailIds), "Property is not nullable for class ConnectorSyncResult.");

            return new ConnectorSyncResult(emailSyncCount.Value.Value, logs, emailIds);
        }

        /// <summary>
        /// Serializes a <see cref="ConnectorSyncResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectorSyncResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConnectorSyncResult connectorSyncResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, connectorSyncResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConnectorSyncResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectorSyncResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ConnectorSyncResult connectorSyncResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (connectorSyncResult.LogsOption.IsSet && connectorSyncResult.Logs == null)
                throw new ArgumentNullException(nameof(connectorSyncResult.Logs), "Property is required for class ConnectorSyncResult.");

            if (connectorSyncResult.EmailIdsOption.IsSet && connectorSyncResult.EmailIds == null)
                throw new ArgumentNullException(nameof(connectorSyncResult.EmailIds), "Property is required for class ConnectorSyncResult.");

            writer.WriteNumber("emailSyncCount", connectorSyncResult.EmailSyncCount);

            if (connectorSyncResult.LogsOption.IsSet)
            {
                writer.WritePropertyName("logs");
                JsonSerializer.Serialize(writer, connectorSyncResult.Logs, jsonSerializerOptions);
            }
            if (connectorSyncResult.EmailIdsOption.IsSet)
            {
                writer.WritePropertyName("emailIds");
                JsonSerializer.Serialize(writer, connectorSyncResult.EmailIds, jsonSerializerOptions);
            }
        }
    }
}
