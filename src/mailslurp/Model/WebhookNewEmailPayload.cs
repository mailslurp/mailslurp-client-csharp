// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// NEW_EMAIL webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is received by the inbox that your webhook is attached to. Use the email ID to fetch the full email body or attachments.
    /// </summary>
    public partial class WebhookNewEmailPayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookNewEmailPayload" /> class.
        /// </summary>
        /// <param name="messageId">Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</param>
        /// <param name="webhookId">ID of webhook entity being triggered</param>
        /// <param name="eventName">Name of the event type webhook is being triggered for.</param>
        /// <param name="inboxId">Id of the inbox</param>
        /// <param name="emailId">ID of the email that was received. Use this ID for fetching the email with the &#x60;EmailController&#x60;.</param>
        /// <param name="createdAt">Date time of event creation</param>
        /// <param name="to">List of &#x60;To&#x60; recipient email addresses that the email was addressed to. See recipients object for names.</param>
        /// <param name="from">Who the email was sent from. An email address - see fromName for the sender name.</param>
        /// <param name="cc">List of &#x60;CC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.</param>
        /// <param name="bcc">List of &#x60;BCC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.</param>
        /// <param name="attachmentMetaDatas">List of attachment meta data objects if attachments present</param>
        /// <param name="webhookName">Name of the webhook being triggered</param>
        /// <param name="domainId">Id of the domain that received an email</param>
        /// <param name="subject">The subject line of the email message as specified by SMTP subject header</param>
        [JsonConstructor]
        public WebhookNewEmailPayload(string messageId, Guid webhookId, EventNameEnum eventName, Guid inboxId, Guid emailId, DateTime createdAt, List<string> to, string from, List<string> cc, List<string> bcc, List<AttachmentMetaData> attachmentMetaDatas, Option<string> webhookName = default, Option<Guid?> domainId = default, Option<string> subject = default)
        {
            MessageId = messageId;
            WebhookId = webhookId;
            EventName = eventName;
            InboxId = inboxId;
            EmailId = emailId;
            CreatedAt = createdAt;
            To = to;
            From = from;
            Cc = cc;
            Bcc = bcc;
            AttachmentMetaDatas = attachmentMetaDatas;
            WebhookNameOption = webhookName;
            DomainIdOption = domainId;
            SubjectOption = subject;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the event type webhook is being triggered for.
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for.</value>
        public enum EventNameEnum
        {
            /// <summary>
            /// Enum EMAILRECEIVED for value: EMAIL_RECEIVED
            /// </summary>
            EMAILRECEIVED = 1,

            /// <summary>
            /// Enum NEWEMAIL for value: NEW_EMAIL
            /// </summary>
            NEWEMAIL = 2,

            /// <summary>
            /// Enum NEWCONTACT for value: NEW_CONTACT
            /// </summary>
            NEWCONTACT = 3,

            /// <summary>
            /// Enum NEWATTACHMENT for value: NEW_ATTACHMENT
            /// </summary>
            NEWATTACHMENT = 4,

            /// <summary>
            /// Enum EMAILOPENED for value: EMAIL_OPENED
            /// </summary>
            EMAILOPENED = 5,

            /// <summary>
            /// Enum EMAILREAD for value: EMAIL_READ
            /// </summary>
            EMAILREAD = 6,

            /// <summary>
            /// Enum DELIVERYSTATUS for value: DELIVERY_STATUS
            /// </summary>
            DELIVERYSTATUS = 7,

            /// <summary>
            /// Enum BOUNCE for value: BOUNCE
            /// </summary>
            BOUNCE = 8,

            /// <summary>
            /// Enum BOUNCERECIPIENT for value: BOUNCE_RECIPIENT
            /// </summary>
            BOUNCERECIPIENT = 9,

            /// <summary>
            /// Enum NEWSMS for value: NEW_SMS
            /// </summary>
            NEWSMS = 10,

            /// <summary>
            /// Enum NEWGUESTUSER for value: NEW_GUEST_USER
            /// </summary>
            NEWGUESTUSER = 11
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventNameEnum EventNameEnumFromString(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            throw new NotImplementedException($"Could not convert value to type EventNameEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventNameEnum? EventNameEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventNameEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventNameEnumToJsonValue(EventNameEnum value)
        {
            if (value == EventNameEnum.EMAILRECEIVED)
                return "EMAIL_RECEIVED";

            if (value == EventNameEnum.NEWEMAIL)
                return "NEW_EMAIL";

            if (value == EventNameEnum.NEWCONTACT)
                return "NEW_CONTACT";

            if (value == EventNameEnum.NEWATTACHMENT)
                return "NEW_ATTACHMENT";

            if (value == EventNameEnum.EMAILOPENED)
                return "EMAIL_OPENED";

            if (value == EventNameEnum.EMAILREAD)
                return "EMAIL_READ";

            if (value == EventNameEnum.DELIVERYSTATUS)
                return "DELIVERY_STATUS";

            if (value == EventNameEnum.BOUNCE)
                return "BOUNCE";

            if (value == EventNameEnum.BOUNCERECIPIENT)
                return "BOUNCE_RECIPIENT";

            if (value == EventNameEnum.NEWSMS)
                return "NEW_SMS";

            if (value == EventNameEnum.NEWGUESTUSER)
                return "NEW_GUEST_USER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Name of the event type webhook is being triggered for.
        /// </summary>
        /// <value>Name of the event type webhook is being triggered for.</value>
        [JsonPropertyName("eventName")]
        public EventNameEnum EventName { get; set; }

        /// <summary>
        /// Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
        /// </summary>
        /// <value>Idempotent message ID. Store this ID locally or in a database to prevent message duplication.</value>
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// ID of webhook entity being triggered
        /// </summary>
        /// <value>ID of webhook entity being triggered</value>
        [JsonPropertyName("webhookId")]
        public Guid WebhookId { get; set; }

        /// <summary>
        /// Id of the inbox
        /// </summary>
        /// <value>Id of the inbox</value>
        [JsonPropertyName("inboxId")]
        public Guid InboxId { get; set; }

        /// <summary>
        /// ID of the email that was received. Use this ID for fetching the email with the &#x60;EmailController&#x60;.
        /// </summary>
        /// <value>ID of the email that was received. Use this ID for fetching the email with the &#x60;EmailController&#x60;.</value>
        [JsonPropertyName("emailId")]
        public Guid EmailId { get; set; }

        /// <summary>
        /// Date time of event creation
        /// </summary>
        /// <value>Date time of event creation</value>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// List of &#x60;To&#x60; recipient email addresses that the email was addressed to. See recipients object for names.
        /// </summary>
        /// <value>List of &#x60;To&#x60; recipient email addresses that the email was addressed to. See recipients object for names.</value>
        [JsonPropertyName("to")]
        public List<string> To { get; set; }

        /// <summary>
        /// Who the email was sent from. An email address - see fromName for the sender name.
        /// </summary>
        /// <value>Who the email was sent from. An email address - see fromName for the sender name.</value>
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        /// List of &#x60;CC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.
        /// </summary>
        /// <value>List of &#x60;CC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.</value>
        [JsonPropertyName("cc")]
        public List<string> Cc { get; set; }

        /// <summary>
        /// List of &#x60;BCC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.
        /// </summary>
        /// <value>List of &#x60;BCC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.</value>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get; set; }

        /// <summary>
        /// List of attachment meta data objects if attachments present
        /// </summary>
        /// <value>List of attachment meta data objects if attachments present</value>
        [JsonPropertyName("attachmentMetaDatas")]
        public List<AttachmentMetaData> AttachmentMetaDatas { get; set; }

        /// <summary>
        /// Used to track the state of WebhookName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WebhookNameOption { get; private set; }

        /// <summary>
        /// Name of the webhook being triggered
        /// </summary>
        /// <value>Name of the webhook being triggered</value>
        [JsonPropertyName("webhookName")]
        public string WebhookName { get { return this.WebhookNameOption; } set { this.WebhookNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DomainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DomainIdOption { get; private set; }

        /// <summary>
        /// Id of the domain that received an email
        /// </summary>
        /// <value>Id of the domain that received an email</value>
        [JsonPropertyName("domainId")]
        public Guid? DomainId { get { return this.DomainIdOption; } set { this.DomainIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// The subject line of the email message as specified by SMTP subject header
        /// </summary>
        /// <value>The subject line of the email message as specified by SMTP subject header</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookNewEmailPayload {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  AttachmentMetaDatas: ").Append(AttachmentMetaDatas).Append("\n");
            sb.Append("  WebhookName: ").Append(WebhookName).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookNewEmailPayload" />
    /// </summary>
    public class WebhookNewEmailPayloadJsonConverter : JsonConverter<WebhookNewEmailPayload>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WebhookNewEmailPayload" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookNewEmailPayload Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> messageId = default;
            Option<Guid?> webhookId = default;
            Option<WebhookNewEmailPayload.EventNameEnum?> eventName = default;
            Option<Guid?> inboxId = default;
            Option<Guid?> emailId = default;
            Option<DateTime?> createdAt = default;
            Option<List<string>> to = default;
            Option<string> from = default;
            Option<List<string>> cc = default;
            Option<List<string>> bcc = default;
            Option<List<AttachmentMetaData>> attachmentMetaDatas = default;
            Option<string> webhookName = default;
            Option<Guid?> domainId = default;
            Option<string> subject = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "messageId":
                            messageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "webhookId":
                            webhookId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "eventName":
                            string eventNameRawValue = utf8JsonReader.GetString();
                            if (eventNameRawValue != null)
                                eventName = new Option<WebhookNewEmailPayload.EventNameEnum?>(WebhookNewEmailPayload.EventNameEnumFromStringOrDefault(eventNameRawValue));
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emailId":
                            emailId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachmentMetaDatas":
                            attachmentMetaDatas = new Option<List<AttachmentMetaData>>(JsonSerializer.Deserialize<List<AttachmentMetaData>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "webhookName":
                            webhookName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "domainId":
                            domainId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(messageId));

            if (!webhookId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(webhookId));

            if (!eventName.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(eventName));

            if (!inboxId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(inboxId));

            if (!emailId.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(emailId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(createdAt));

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(to));

            if (!from.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(from));

            if (!cc.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(cc));

            if (!bcc.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(bcc));

            if (!attachmentMetaDatas.IsSet)
                throw new ArgumentException("Property is required for class WebhookNewEmailPayload.", nameof(attachmentMetaDatas));

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class WebhookNewEmailPayload.");

            if (webhookId.IsSet && webhookId.Value == null)
                throw new ArgumentNullException(nameof(webhookId), "Property is not nullable for class WebhookNewEmailPayload.");

            if (eventName.IsSet && eventName.Value == null)
                throw new ArgumentNullException(nameof(eventName), "Property is not nullable for class WebhookNewEmailPayload.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class WebhookNewEmailPayload.");

            if (emailId.IsSet && emailId.Value == null)
                throw new ArgumentNullException(nameof(emailId), "Property is not nullable for class WebhookNewEmailPayload.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebhookNewEmailPayload.");

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class WebhookNewEmailPayload.");

            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from), "Property is not nullable for class WebhookNewEmailPayload.");

            if (cc.IsSet && cc.Value == null)
                throw new ArgumentNullException(nameof(cc), "Property is not nullable for class WebhookNewEmailPayload.");

            if (bcc.IsSet && bcc.Value == null)
                throw new ArgumentNullException(nameof(bcc), "Property is not nullable for class WebhookNewEmailPayload.");

            if (attachmentMetaDatas.IsSet && attachmentMetaDatas.Value == null)
                throw new ArgumentNullException(nameof(attachmentMetaDatas), "Property is not nullable for class WebhookNewEmailPayload.");

            return new WebhookNewEmailPayload(messageId.Value, webhookId.Value.Value, eventName.Value.Value, inboxId.Value.Value, emailId.Value.Value, createdAt.Value.Value, to.Value, from.Value, cc.Value, bcc.Value, attachmentMetaDatas.Value, webhookName, domainId, subject);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookNewEmailPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookNewEmailPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookNewEmailPayload webhookNewEmailPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookNewEmailPayload, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookNewEmailPayload" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookNewEmailPayload"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookNewEmailPayload webhookNewEmailPayload, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookNewEmailPayload.MessageId == null)
                throw new ArgumentNullException(nameof(webhookNewEmailPayload.MessageId), "Property is required for class WebhookNewEmailPayload.");

            if (webhookNewEmailPayload.To == null)
                throw new ArgumentNullException(nameof(webhookNewEmailPayload.To), "Property is required for class WebhookNewEmailPayload.");

            if (webhookNewEmailPayload.From == null)
                throw new ArgumentNullException(nameof(webhookNewEmailPayload.From), "Property is required for class WebhookNewEmailPayload.");

            if (webhookNewEmailPayload.Cc == null)
                throw new ArgumentNullException(nameof(webhookNewEmailPayload.Cc), "Property is required for class WebhookNewEmailPayload.");

            if (webhookNewEmailPayload.Bcc == null)
                throw new ArgumentNullException(nameof(webhookNewEmailPayload.Bcc), "Property is required for class WebhookNewEmailPayload.");

            if (webhookNewEmailPayload.AttachmentMetaDatas == null)
                throw new ArgumentNullException(nameof(webhookNewEmailPayload.AttachmentMetaDatas), "Property is required for class WebhookNewEmailPayload.");

            writer.WriteString("messageId", webhookNewEmailPayload.MessageId);

            writer.WriteString("webhookId", webhookNewEmailPayload.WebhookId);

            var eventNameRawValue = WebhookNewEmailPayload.EventNameEnumToJsonValue(webhookNewEmailPayload.EventName);
            writer.WriteString("eventName", eventNameRawValue);
            writer.WriteString("inboxId", webhookNewEmailPayload.InboxId);

            writer.WriteString("emailId", webhookNewEmailPayload.EmailId);

            writer.WriteString("createdAt", webhookNewEmailPayload.CreatedAt.ToString(CreatedAtFormat));

            writer.WritePropertyName("to");
            JsonSerializer.Serialize(writer, webhookNewEmailPayload.To, jsonSerializerOptions);
            writer.WriteString("from", webhookNewEmailPayload.From);

            writer.WritePropertyName("cc");
            JsonSerializer.Serialize(writer, webhookNewEmailPayload.Cc, jsonSerializerOptions);
            writer.WritePropertyName("bcc");
            JsonSerializer.Serialize(writer, webhookNewEmailPayload.Bcc, jsonSerializerOptions);
            writer.WritePropertyName("attachmentMetaDatas");
            JsonSerializer.Serialize(writer, webhookNewEmailPayload.AttachmentMetaDatas, jsonSerializerOptions);
            if (webhookNewEmailPayload.WebhookNameOption.IsSet)
                if (webhookNewEmailPayload.WebhookNameOption.Value != null)
                    writer.WriteString("webhookName", webhookNewEmailPayload.WebhookName);
                else
                    writer.WriteNull("webhookName");

            if (webhookNewEmailPayload.DomainIdOption.IsSet)
                if (webhookNewEmailPayload.DomainIdOption.Value != null)
                    writer.WriteString("domainId", webhookNewEmailPayload.DomainIdOption.Value.Value);
                else
                    writer.WriteNull("domainId");

            if (webhookNewEmailPayload.SubjectOption.IsSet)
                if (webhookNewEmailPayload.SubjectOption.Value != null)
                    writer.WriteString("subject", webhookNewEmailPayload.Subject);
                else
                    writer.WriteNull("subject");
        }
    }
}
