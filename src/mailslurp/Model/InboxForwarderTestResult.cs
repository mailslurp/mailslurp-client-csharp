// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Results of inbox forwarder test
    /// </summary>
    public partial class InboxForwarderTestResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderTestResult" /> class.
        /// </summary>
        /// <param name="matches">matches</param>
        /// <param name="doesMatch">doesMatch</param>
        [JsonConstructor]
        public InboxForwarderTestResult(Dictionary<string, bool> matches, bool doesMatch)
        {
            Matches = matches;
            DoesMatch = doesMatch;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Matches
        /// </summary>
        [JsonPropertyName("matches")]
        public Dictionary<string, bool> Matches { get; set; }

        /// <summary>
        /// Gets or Sets DoesMatch
        /// </summary>
        [JsonPropertyName("doesMatch")]
        public bool DoesMatch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboxForwarderTestResult {\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("  DoesMatch: ").Append(DoesMatch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InboxForwarderTestResult" />
    /// </summary>
    public class InboxForwarderTestResultJsonConverter : JsonConverter<InboxForwarderTestResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="InboxForwarderTestResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InboxForwarderTestResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, bool>> matches = default;
            Option<bool?> doesMatch = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "matches":
                            matches = new Option<Dictionary<string, bool>>(JsonSerializer.Deserialize<Dictionary<string, bool>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "doesMatch":
                            doesMatch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!matches.IsSet)
                throw new ArgumentException("Property is required for class InboxForwarderTestResult.", nameof(matches));

            if (!doesMatch.IsSet)
                throw new ArgumentException("Property is required for class InboxForwarderTestResult.", nameof(doesMatch));

            if (matches.IsSet && matches.Value == null)
                throw new ArgumentNullException(nameof(matches), "Property is not nullable for class InboxForwarderTestResult.");

            if (doesMatch.IsSet && doesMatch.Value == null)
                throw new ArgumentNullException(nameof(doesMatch), "Property is not nullable for class InboxForwarderTestResult.");

            return new InboxForwarderTestResult(matches.Value, doesMatch.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="InboxForwarderTestResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxForwarderTestResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InboxForwarderTestResult inboxForwarderTestResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, inboxForwarderTestResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InboxForwarderTestResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxForwarderTestResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InboxForwarderTestResult inboxForwarderTestResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (inboxForwarderTestResult.Matches == null)
                throw new ArgumentNullException(nameof(inboxForwarderTestResult.Matches), "Property is required for class InboxForwarderTestResult.");

            writer.WritePropertyName("matches");
            JsonSerializer.Serialize(writer, inboxForwarderTestResult.Matches, jsonSerializerOptions);
            writer.WriteBoolean("doesMatch", inboxForwarderTestResult.DoesMatch);
        }
    }
}
