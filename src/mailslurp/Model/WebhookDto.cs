// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Representation of a webhook for an inbox. The URL specified will be using by MailSlurp whenever an email is received by the attached inbox. A webhook entity should have a URL that points to your server. Your server should accept HTTP/S POST requests and return a success 200. MailSlurp will retry your webhooks if they fail. See https://csharp.api.mailslurp.com/schemas/webhook-payload for the payload schema.
    /// </summary>
    public partial class WebhookDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookDto" /> class.
        /// </summary>
        /// <param name="id">ID of the Webhook</param>
        /// <param name="userId">User ID of the Webhook</param>
        /// <param name="basicAuth">Does webhook expect basic authentication? If true it means you created this webhook with a username and password. MailSlurp will use these in the URL to authenticate itself.</param>
        /// <param name="url">URL of your server that the webhook will be sent to. The schema of the JSON that is sent is described by the payloadJsonSchema.</param>
        /// <param name="method">HTTP method that your server endpoint must listen for</param>
        /// <param name="payloadJsonSchema">Deprecated. Fetch JSON Schema for webhook using the getJsonSchemaForWebhookPayload method</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="name">Name of the webhook</param>
        /// <param name="phoneId">The phoneNumberId that the Webhook will be triggered by. If null then webhook triggered at account level or inbox level if inboxId set</param>
        /// <param name="inboxId">The inbox that the Webhook will be triggered by. If null then webhook triggered at account level or phone level if phoneId set</param>
        /// <param name="requestBodyTemplate">Request body template for HTTP request that will be sent for the webhook. Use Moustache style template variables to insert values from the original event payload.</param>
        /// <param name="createdAt">When the webhook was created</param>
        /// <param name="eventName">Webhook trigger event name</param>
        /// <param name="requestHeaders">requestHeaders</param>
        /// <param name="ignoreInsecureSslCertificates">Should notifier ignore insecure SSL certificates</param>
        /// <param name="useStaticIpRange">Should notifier use static IP range when sending webhook payload</param>
        /// <param name="healthStatus">Webhook health</param>
        [JsonConstructor]
        public WebhookDto(Guid id, Guid userId, bool basicAuth, string url, MethodEnum method, string payloadJsonSchema, DateTime updatedAt, Option<string> name = default, Option<Guid?> phoneId = default, Option<Guid?> inboxId = default, Option<string> requestBodyTemplate = default, DateTime? createdAt = default, Option<EventNameEnum?> eventName = default, Option<WebhookHeaders> requestHeaders = default, Option<bool?> ignoreInsecureSslCertificates = default, Option<bool?> useStaticIpRange = default, Option<HealthStatusEnum?> healthStatus = default)
        {
            Id = id;
            UserId = userId;
            BasicAuth = basicAuth;
            Url = url;
            Method = method;
            PayloadJsonSchema = payloadJsonSchema;
            UpdatedAt = updatedAt;
            NameOption = name;
            PhoneIdOption = phoneId;
            InboxIdOption = inboxId;
            RequestBodyTemplateOption = requestBodyTemplate;
            CreatedAt = createdAt;
            EventNameOption = eventName;
            RequestHeadersOption = requestHeaders;
            IgnoreInsecureSslCertificatesOption = ignoreInsecureSslCertificates;
            UseStaticIpRangeOption = useStaticIpRange;
            HealthStatusOption = healthStatus;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// HTTP method that your server endpoint must listen for
        /// </summary>
        /// <value>HTTP method that your server endpoint must listen for</value>
        public enum MethodEnum
        {
            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            POST = 1,

            /// <summary>
            /// Enum DELETE for value: DELETE
            /// </summary>
            DELETE = 2,

            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            GET = 3,

            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            PUT = 4,

            /// <summary>
            /// Enum PATCH for value: PATCH
            /// </summary>
            PATCH = 5,

            /// <summary>
            /// Enum HEAD for value: HEAD
            /// </summary>
            HEAD = 6,

            /// <summary>
            /// Enum OPTIONS for value: OPTIONS
            /// </summary>
            OPTIONS = 7,

            /// <summary>
            /// Enum TRACE for value: TRACE
            /// </summary>
            TRACE = 8
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MethodEnum MethodEnumFromString(string value)
        {
            if (value.Equals("POST"))
                return MethodEnum.POST;

            if (value.Equals("DELETE"))
                return MethodEnum.DELETE;

            if (value.Equals("GET"))
                return MethodEnum.GET;

            if (value.Equals("PUT"))
                return MethodEnum.PUT;

            if (value.Equals("PATCH"))
                return MethodEnum.PATCH;

            if (value.Equals("HEAD"))
                return MethodEnum.HEAD;

            if (value.Equals("OPTIONS"))
                return MethodEnum.OPTIONS;

            if (value.Equals("TRACE"))
                return MethodEnum.TRACE;

            throw new NotImplementedException($"Could not convert value to type MethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MethodEnum? MethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("POST"))
                return MethodEnum.POST;

            if (value.Equals("DELETE"))
                return MethodEnum.DELETE;

            if (value.Equals("GET"))
                return MethodEnum.GET;

            if (value.Equals("PUT"))
                return MethodEnum.PUT;

            if (value.Equals("PATCH"))
                return MethodEnum.PATCH;

            if (value.Equals("HEAD"))
                return MethodEnum.HEAD;

            if (value.Equals("OPTIONS"))
                return MethodEnum.OPTIONS;

            if (value.Equals("TRACE"))
                return MethodEnum.TRACE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MethodEnumToJsonValue(MethodEnum value)
        {
            if (value == MethodEnum.POST)
                return "POST";

            if (value == MethodEnum.DELETE)
                return "DELETE";

            if (value == MethodEnum.GET)
                return "GET";

            if (value == MethodEnum.PUT)
                return "PUT";

            if (value == MethodEnum.PATCH)
                return "PATCH";

            if (value == MethodEnum.HEAD)
                return "HEAD";

            if (value == MethodEnum.OPTIONS)
                return "OPTIONS";

            if (value == MethodEnum.TRACE)
                return "TRACE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// HTTP method that your server endpoint must listen for
        /// </summary>
        /// <value>HTTP method that your server endpoint must listen for</value>
        [JsonPropertyName("method")]
        public MethodEnum Method { get; set; }

        /// <summary>
        /// Webhook trigger event name
        /// </summary>
        /// <value>Webhook trigger event name</value>
        public enum EventNameEnum
        {
            /// <summary>
            /// Enum EMAILRECEIVED for value: EMAIL_RECEIVED
            /// </summary>
            EMAILRECEIVED = 1,

            /// <summary>
            /// Enum NEWEMAIL for value: NEW_EMAIL
            /// </summary>
            NEWEMAIL = 2,

            /// <summary>
            /// Enum NEWCONTACT for value: NEW_CONTACT
            /// </summary>
            NEWCONTACT = 3,

            /// <summary>
            /// Enum NEWATTACHMENT for value: NEW_ATTACHMENT
            /// </summary>
            NEWATTACHMENT = 4,

            /// <summary>
            /// Enum EMAILOPENED for value: EMAIL_OPENED
            /// </summary>
            EMAILOPENED = 5,

            /// <summary>
            /// Enum EMAILREAD for value: EMAIL_READ
            /// </summary>
            EMAILREAD = 6,

            /// <summary>
            /// Enum DELIVERYSTATUS for value: DELIVERY_STATUS
            /// </summary>
            DELIVERYSTATUS = 7,

            /// <summary>
            /// Enum BOUNCE for value: BOUNCE
            /// </summary>
            BOUNCE = 8,

            /// <summary>
            /// Enum BOUNCERECIPIENT for value: BOUNCE_RECIPIENT
            /// </summary>
            BOUNCERECIPIENT = 9,

            /// <summary>
            /// Enum NEWSMS for value: NEW_SMS
            /// </summary>
            NEWSMS = 10,

            /// <summary>
            /// Enum NEWGUESTUSER for value: NEW_GUEST_USER
            /// </summary>
            NEWGUESTUSER = 11
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventNameEnum EventNameEnumFromString(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            throw new NotImplementedException($"Could not convert value to type EventNameEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventNameEnum? EventNameEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EMAIL_RECEIVED"))
                return EventNameEnum.EMAILRECEIVED;

            if (value.Equals("NEW_EMAIL"))
                return EventNameEnum.NEWEMAIL;

            if (value.Equals("NEW_CONTACT"))
                return EventNameEnum.NEWCONTACT;

            if (value.Equals("NEW_ATTACHMENT"))
                return EventNameEnum.NEWATTACHMENT;

            if (value.Equals("EMAIL_OPENED"))
                return EventNameEnum.EMAILOPENED;

            if (value.Equals("EMAIL_READ"))
                return EventNameEnum.EMAILREAD;

            if (value.Equals("DELIVERY_STATUS"))
                return EventNameEnum.DELIVERYSTATUS;

            if (value.Equals("BOUNCE"))
                return EventNameEnum.BOUNCE;

            if (value.Equals("BOUNCE_RECIPIENT"))
                return EventNameEnum.BOUNCERECIPIENT;

            if (value.Equals("NEW_SMS"))
                return EventNameEnum.NEWSMS;

            if (value.Equals("NEW_GUEST_USER"))
                return EventNameEnum.NEWGUESTUSER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventNameEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventNameEnumToJsonValue(EventNameEnum? value)
        {
            if (value == null)
                return null;

            if (value == EventNameEnum.EMAILRECEIVED)
                return "EMAIL_RECEIVED";

            if (value == EventNameEnum.NEWEMAIL)
                return "NEW_EMAIL";

            if (value == EventNameEnum.NEWCONTACT)
                return "NEW_CONTACT";

            if (value == EventNameEnum.NEWATTACHMENT)
                return "NEW_ATTACHMENT";

            if (value == EventNameEnum.EMAILOPENED)
                return "EMAIL_OPENED";

            if (value == EventNameEnum.EMAILREAD)
                return "EMAIL_READ";

            if (value == EventNameEnum.DELIVERYSTATUS)
                return "DELIVERY_STATUS";

            if (value == EventNameEnum.BOUNCE)
                return "BOUNCE";

            if (value == EventNameEnum.BOUNCERECIPIENT)
                return "BOUNCE_RECIPIENT";

            if (value == EventNameEnum.NEWSMS)
                return "NEW_SMS";

            if (value == EventNameEnum.NEWGUESTUSER)
                return "NEW_GUEST_USER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of EventName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EventNameEnum?> EventNameOption { get; private set; }

        /// <summary>
        /// Webhook trigger event name
        /// </summary>
        /// <value>Webhook trigger event name</value>
        [JsonPropertyName("eventName")]
        public EventNameEnum? EventName { get { return this.EventNameOption; } set { this.EventNameOption = new Option<EventNameEnum?>(value); } }

        /// <summary>
        /// Webhook health
        /// </summary>
        /// <value>Webhook health</value>
        public enum HealthStatusEnum
        {
            /// <summary>
            /// Enum HEALTHY for value: HEALTHY
            /// </summary>
            HEALTHY = 1,

            /// <summary>
            /// Enum UNHEALTHY for value: UNHEALTHY
            /// </summary>
            UNHEALTHY = 2
        }

        /// <summary>
        /// Returns a <see cref="HealthStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static HealthStatusEnum HealthStatusEnumFromString(string value)
        {
            if (value.Equals("HEALTHY"))
                return HealthStatusEnum.HEALTHY;

            if (value.Equals("UNHEALTHY"))
                return HealthStatusEnum.UNHEALTHY;

            throw new NotImplementedException($"Could not convert value to type HealthStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="HealthStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static HealthStatusEnum? HealthStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("HEALTHY"))
                return HealthStatusEnum.HEALTHY;

            if (value.Equals("UNHEALTHY"))
                return HealthStatusEnum.UNHEALTHY;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="HealthStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string HealthStatusEnumToJsonValue(HealthStatusEnum? value)
        {
            if (value == null)
                return null;

            if (value == HealthStatusEnum.HEALTHY)
                return "HEALTHY";

            if (value == HealthStatusEnum.UNHEALTHY)
                return "UNHEALTHY";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of HealthStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HealthStatusEnum?> HealthStatusOption { get; private set; }

        /// <summary>
        /// Webhook health
        /// </summary>
        /// <value>Webhook health</value>
        [JsonPropertyName("healthStatus")]
        public HealthStatusEnum? HealthStatus { get { return this.HealthStatusOption; } set { this.HealthStatusOption = new Option<HealthStatusEnum?>(value); } }

        /// <summary>
        /// ID of the Webhook
        /// </summary>
        /// <value>ID of the Webhook</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// User ID of the Webhook
        /// </summary>
        /// <value>User ID of the Webhook</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Does webhook expect basic authentication? If true it means you created this webhook with a username and password. MailSlurp will use these in the URL to authenticate itself.
        /// </summary>
        /// <value>Does webhook expect basic authentication? If true it means you created this webhook with a username and password. MailSlurp will use these in the URL to authenticate itself.</value>
        [JsonPropertyName("basicAuth")]
        public bool BasicAuth { get; set; }

        /// <summary>
        /// URL of your server that the webhook will be sent to. The schema of the JSON that is sent is described by the payloadJsonSchema.
        /// </summary>
        /// <value>URL of your server that the webhook will be sent to. The schema of the JSON that is sent is described by the payloadJsonSchema.</value>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Deprecated. Fetch JSON Schema for webhook using the getJsonSchemaForWebhookPayload method
        /// </summary>
        /// <value>Deprecated. Fetch JSON Schema for webhook using the getJsonSchemaForWebhookPayload method</value>
        [JsonPropertyName("payloadJsonSchema")]
        public string PayloadJsonSchema { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Name of the webhook
        /// </summary>
        /// <value>Name of the webhook</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PhoneId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> PhoneIdOption { get; private set; }

        /// <summary>
        /// The phoneNumberId that the Webhook will be triggered by. If null then webhook triggered at account level or inbox level if inboxId set
        /// </summary>
        /// <value>The phoneNumberId that the Webhook will be triggered by. If null then webhook triggered at account level or inbox level if inboxId set</value>
        [JsonPropertyName("phoneId")]
        public Guid? PhoneId { get { return this.PhoneIdOption; } set { this.PhoneIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// The inbox that the Webhook will be triggered by. If null then webhook triggered at account level or phone level if phoneId set
        /// </summary>
        /// <value>The inbox that the Webhook will be triggered by. If null then webhook triggered at account level or phone level if phoneId set</value>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of RequestBodyTemplate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RequestBodyTemplateOption { get; private set; }

        /// <summary>
        /// Request body template for HTTP request that will be sent for the webhook. Use Moustache style template variables to insert values from the original event payload.
        /// </summary>
        /// <value>Request body template for HTTP request that will be sent for the webhook. Use Moustache style template variables to insert values from the original event payload.</value>
        [JsonPropertyName("requestBodyTemplate")]
        public string RequestBodyTemplate { get { return this.RequestBodyTemplateOption; } set { this.RequestBodyTemplateOption = new Option<string>(value); } }

        /// <summary>
        /// When the webhook was created
        /// </summary>
        /// <value>When the webhook was created</value>
        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of RequestHeaders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebhookHeaders> RequestHeadersOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequestHeaders
        /// </summary>
        [JsonPropertyName("requestHeaders")]
        public WebhookHeaders RequestHeaders { get { return this.RequestHeadersOption; } set { this.RequestHeadersOption = new Option<WebhookHeaders>(value); } }

        /// <summary>
        /// Used to track the state of IgnoreInsecureSslCertificates
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IgnoreInsecureSslCertificatesOption { get; private set; }

        /// <summary>
        /// Should notifier ignore insecure SSL certificates
        /// </summary>
        /// <value>Should notifier ignore insecure SSL certificates</value>
        [JsonPropertyName("ignoreInsecureSslCertificates")]
        public bool? IgnoreInsecureSslCertificates { get { return this.IgnoreInsecureSslCertificatesOption; } set { this.IgnoreInsecureSslCertificatesOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of UseStaticIpRange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseStaticIpRangeOption { get; private set; }

        /// <summary>
        /// Should notifier use static IP range when sending webhook payload
        /// </summary>
        /// <value>Should notifier use static IP range when sending webhook payload</value>
        [JsonPropertyName("useStaticIpRange")]
        public bool? UseStaticIpRange { get { return this.UseStaticIpRangeOption; } set { this.UseStaticIpRangeOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  BasicAuth: ").Append(BasicAuth).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  PayloadJsonSchema: ").Append(PayloadJsonSchema).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PhoneId: ").Append(PhoneId).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  RequestBodyTemplate: ").Append(RequestBodyTemplate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  RequestHeaders: ").Append(RequestHeaders).Append("\n");
            sb.Append("  IgnoreInsecureSslCertificates: ").Append(IgnoreInsecureSslCertificates).Append("\n");
            sb.Append("  UseStaticIpRange: ").Append(UseStaticIpRange).Append("\n");
            sb.Append("  HealthStatus: ").Append(HealthStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookDto" />
    /// </summary>
    public class WebhookDtoJsonConverter : JsonConverter<WebhookDto>
    {
        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WebhookDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<bool?> basicAuth = default;
            Option<string> url = default;
            Option<WebhookDto.MethodEnum?> method = default;
            Option<string> payloadJsonSchema = default;
            Option<DateTime?> updatedAt = default;
            Option<string> name = default;
            Option<Guid?> phoneId = default;
            Option<Guid?> inboxId = default;
            Option<string> requestBodyTemplate = default;
            Option<DateTime?> createdAt = default;
            Option<WebhookDto.EventNameEnum?> eventName = default;
            Option<WebhookHeaders> requestHeaders = default;
            Option<bool?> ignoreInsecureSslCertificates = default;
            Option<bool?> useStaticIpRange = default;
            Option<WebhookDto.HealthStatusEnum?> healthStatus = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "basicAuth":
                            basicAuth = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "method":
                            string methodRawValue = utf8JsonReader.GetString();
                            if (methodRawValue != null)
                                method = new Option<WebhookDto.MethodEnum?>(WebhookDto.MethodEnumFromStringOrDefault(methodRawValue));
                            break;
                        case "payloadJsonSchema":
                            payloadJsonSchema = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneId":
                            phoneId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "requestBodyTemplate":
                            requestBodyTemplate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "eventName":
                            string eventNameRawValue = utf8JsonReader.GetString();
                            if (eventNameRawValue != null)
                                eventName = new Option<WebhookDto.EventNameEnum?>(WebhookDto.EventNameEnumFromStringOrDefault(eventNameRawValue));
                            break;
                        case "requestHeaders":
                            requestHeaders = new Option<WebhookHeaders>(JsonSerializer.Deserialize<WebhookHeaders>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ignoreInsecureSslCertificates":
                            ignoreInsecureSslCertificates = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "useStaticIpRange":
                            useStaticIpRange = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "healthStatus":
                            string healthStatusRawValue = utf8JsonReader.GetString();
                            if (healthStatusRawValue != null)
                                healthStatus = new Option<WebhookDto.HealthStatusEnum?>(WebhookDto.HealthStatusEnumFromStringOrDefault(healthStatusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class WebhookDto.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class WebhookDto.", nameof(userId));

            if (!basicAuth.IsSet)
                throw new ArgumentException("Property is required for class WebhookDto.", nameof(basicAuth));

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class WebhookDto.", nameof(url));

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class WebhookDto.", nameof(method));

            if (!payloadJsonSchema.IsSet)
                throw new ArgumentException("Property is required for class WebhookDto.", nameof(payloadJsonSchema));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class WebhookDto.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class WebhookDto.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebhookDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class WebhookDto.");

            if (basicAuth.IsSet && basicAuth.Value == null)
                throw new ArgumentNullException(nameof(basicAuth), "Property is not nullable for class WebhookDto.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class WebhookDto.");

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class WebhookDto.");

            if (payloadJsonSchema.IsSet && payloadJsonSchema.Value == null)
                throw new ArgumentNullException(nameof(payloadJsonSchema), "Property is not nullable for class WebhookDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebhookDto.");

            if (requestHeaders.IsSet && requestHeaders.Value == null)
                throw new ArgumentNullException(nameof(requestHeaders), "Property is not nullable for class WebhookDto.");

            return new WebhookDto(id.Value.Value, userId.Value.Value, basicAuth.Value.Value, url.Value, method.Value.Value, payloadJsonSchema.Value, updatedAt.Value.Value, name, phoneId, inboxId, requestBodyTemplate, createdAt.Value, eventName, requestHeaders, ignoreInsecureSslCertificates, useStaticIpRange, healthStatus);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookDto webhookDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookDto webhookDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookDto.Url == null)
                throw new ArgumentNullException(nameof(webhookDto.Url), "Property is required for class WebhookDto.");

            if (webhookDto.PayloadJsonSchema == null)
                throw new ArgumentNullException(nameof(webhookDto.PayloadJsonSchema), "Property is required for class WebhookDto.");

            if (webhookDto.RequestHeadersOption.IsSet && webhookDto.RequestHeaders == null)
                throw new ArgumentNullException(nameof(webhookDto.RequestHeaders), "Property is required for class WebhookDto.");

            writer.WriteString("id", webhookDto.Id);

            writer.WriteString("userId", webhookDto.UserId);

            writer.WriteBoolean("basicAuth", webhookDto.BasicAuth);

            writer.WriteString("url", webhookDto.Url);

            var methodRawValue = WebhookDto.MethodEnumToJsonValue(webhookDto.Method);
            writer.WriteString("method", methodRawValue);
            writer.WriteString("payloadJsonSchema", webhookDto.PayloadJsonSchema);

            writer.WriteString("updatedAt", webhookDto.UpdatedAt.ToString(UpdatedAtFormat));

            if (webhookDto.NameOption.IsSet)
                if (webhookDto.NameOption.Value != null)
                    writer.WriteString("name", webhookDto.Name);
                else
                    writer.WriteNull("name");

            if (webhookDto.PhoneIdOption.IsSet)
                if (webhookDto.PhoneIdOption.Value != null)
                    writer.WriteString("phoneId", webhookDto.PhoneIdOption.Value.Value);
                else
                    writer.WriteNull("phoneId");

            if (webhookDto.InboxIdOption.IsSet)
                if (webhookDto.InboxIdOption.Value != null)
                    writer.WriteString("inboxId", webhookDto.InboxIdOption.Value.Value);
                else
                    writer.WriteNull("inboxId");

            if (webhookDto.RequestBodyTemplateOption.IsSet)
                if (webhookDto.RequestBodyTemplateOption.Value != null)
                    writer.WriteString("requestBodyTemplate", webhookDto.RequestBodyTemplate);
                else
                    writer.WriteNull("requestBodyTemplate");

            if (webhookDto.CreatedAt != null)
                writer.WriteString("createdAt", webhookDto.CreatedAt.Value.ToString(CreatedAtFormat));
            else
                writer.WriteNull("createdAt");

            var eventNameRawValue = WebhookDto.EventNameEnumToJsonValue(webhookDto.EventNameOption.Value.Value);
            if (eventNameRawValue != null)
                writer.WriteString("eventName", eventNameRawValue);
            else
                writer.WriteNull("eventName");

            if (webhookDto.RequestHeadersOption.IsSet)
            {
                writer.WritePropertyName("requestHeaders");
                JsonSerializer.Serialize(writer, webhookDto.RequestHeaders, jsonSerializerOptions);
            }
            if (webhookDto.IgnoreInsecureSslCertificatesOption.IsSet)
                if (webhookDto.IgnoreInsecureSslCertificatesOption.Value != null)
                    writer.WriteBoolean("ignoreInsecureSslCertificates", webhookDto.IgnoreInsecureSslCertificatesOption.Value.Value);
                else
                    writer.WriteNull("ignoreInsecureSslCertificates");

            if (webhookDto.UseStaticIpRangeOption.IsSet)
                if (webhookDto.UseStaticIpRangeOption.Value != null)
                    writer.WriteBoolean("useStaticIpRange", webhookDto.UseStaticIpRangeOption.Value.Value);
                else
                    writer.WriteNull("useStaticIpRange");

            var healthStatusRawValue = WebhookDto.HealthStatusEnumToJsonValue(webhookDto.HealthStatusOption.Value.Value);
            if (healthStatusRawValue != null)
                writer.WriteString("healthStatus", healthStatusRawValue);
            else
                writer.WriteNull("healthStatus");
        }
    }
}
