// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Complaint
    /// </summary>
    public partial class Complaint : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Complaint" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="complaintRecipient">complaintRecipient</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="userId">userId</param>
        /// <param name="eventType">eventType</param>
        /// <param name="mailSource">mailSource</param>
        /// <param name="mailMessageId">mailMessageId</param>
        [JsonConstructor]
        public Complaint(Guid id, string complaintRecipient, DateTime createdAt, DateTime updatedAt, Option<Guid?> userId = default, Option<string> eventType = default, Option<string> mailSource = default, Option<string> mailMessageId = default)
        {
            Id = id;
            ComplaintRecipient = complaintRecipient;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            UserIdOption = userId;
            EventTypeOption = eventType;
            MailSourceOption = mailSource;
            MailMessageIdOption = mailMessageId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ComplaintRecipient
        /// </summary>
        [JsonPropertyName("complaintRecipient")]
        public string ComplaintRecipient { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of EventType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EventTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [JsonPropertyName("eventType")]
        public string EventType { get { return this.EventTypeOption; } set { this.EventTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MailSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MailSourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets MailSource
        /// </summary>
        [JsonPropertyName("mailSource")]
        public string MailSource { get { return this.MailSourceOption; } set { this.MailSourceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MailMessageId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MailMessageIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets MailMessageId
        /// </summary>
        [JsonPropertyName("mailMessageId")]
        public string MailMessageId { get { return this.MailMessageIdOption; } set { this.MailMessageIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Complaint {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ComplaintRecipient: ").Append(ComplaintRecipient).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  MailSource: ").Append(MailSource).Append("\n");
            sb.Append("  MailMessageId: ").Append(MailMessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Complaint" />
    /// </summary>
    public class ComplaintJsonConverter : JsonConverter<Complaint>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Complaint" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Complaint Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string> complaintRecipient = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<Guid?> userId = default;
            Option<string> eventType = default;
            Option<string> mailSource = default;
            Option<string> mailMessageId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "complaintRecipient":
                            complaintRecipient = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "eventType":
                            eventType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mailSource":
                            mailSource = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mailMessageId":
                            mailMessageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Complaint.", nameof(id));

            if (!complaintRecipient.IsSet)
                throw new ArgumentException("Property is required for class Complaint.", nameof(complaintRecipient));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Complaint.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class Complaint.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Complaint.");

            if (complaintRecipient.IsSet && complaintRecipient.Value == null)
                throw new ArgumentNullException(nameof(complaintRecipient), "Property is not nullable for class Complaint.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Complaint.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class Complaint.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class Complaint.");

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType), "Property is not nullable for class Complaint.");

            if (mailSource.IsSet && mailSource.Value == null)
                throw new ArgumentNullException(nameof(mailSource), "Property is not nullable for class Complaint.");

            if (mailMessageId.IsSet && mailMessageId.Value == null)
                throw new ArgumentNullException(nameof(mailMessageId), "Property is not nullable for class Complaint.");

            return new Complaint(id.Value.Value, complaintRecipient.Value, createdAt.Value.Value, updatedAt.Value.Value, userId, eventType, mailSource, mailMessageId);
        }

        /// <summary>
        /// Serializes a <see cref="Complaint" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="complaint"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Complaint complaint, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, complaint, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Complaint" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="complaint"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Complaint complaint, JsonSerializerOptions jsonSerializerOptions)
        {
            if (complaint.ComplaintRecipient == null)
                throw new ArgumentNullException(nameof(complaint.ComplaintRecipient), "Property is required for class Complaint.");

            if (complaint.EventTypeOption.IsSet && complaint.EventType == null)
                throw new ArgumentNullException(nameof(complaint.EventType), "Property is required for class Complaint.");

            if (complaint.MailSourceOption.IsSet && complaint.MailSource == null)
                throw new ArgumentNullException(nameof(complaint.MailSource), "Property is required for class Complaint.");

            if (complaint.MailMessageIdOption.IsSet && complaint.MailMessageId == null)
                throw new ArgumentNullException(nameof(complaint.MailMessageId), "Property is required for class Complaint.");

            writer.WriteString("id", complaint.Id);

            writer.WriteString("complaintRecipient", complaint.ComplaintRecipient);

            writer.WriteString("createdAt", complaint.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", complaint.UpdatedAt.ToString(UpdatedAtFormat));

            if (complaint.UserIdOption.IsSet)
                writer.WriteString("userId", complaint.UserIdOption.Value.Value);

            if (complaint.EventTypeOption.IsSet)
                writer.WriteString("eventType", complaint.EventType);

            if (complaint.MailSourceOption.IsSet)
                writer.WriteString("mailSource", complaint.MailSource);

            if (complaint.MailMessageIdOption.IsSet)
                writer.WriteString("mailMessageId", complaint.MailMessageId);
        }
    }
}
