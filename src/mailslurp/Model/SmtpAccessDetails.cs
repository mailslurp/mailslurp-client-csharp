// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Access details for inbox using SMTP
    /// </summary>
    public partial class SmtpAccessDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpAccessDetails" /> class.
        /// </summary>
        /// <param name="secureSmtpServerHost">Secure TLS SMTP server host domain</param>
        /// <param name="secureSmtpServerPort">Secure TLS SMTP server host port</param>
        /// <param name="secureSmtpUsername">Secure TLS SMTP username for login</param>
        /// <param name="secureSmtpPassword">Secure TLS SMTP password for login</param>
        /// <param name="smtpServerHost">SMTP server host domain</param>
        /// <param name="smtpServerPort">SMTP server host port</param>
        /// <param name="smtpUsername">SMTP username for login</param>
        /// <param name="smtpPassword">SMTP password for login</param>
        /// <param name="mailFromDomain">Mail from domain or SMTP HELO value</param>
        [JsonConstructor]
        public SmtpAccessDetails(string secureSmtpServerHost, int secureSmtpServerPort, string secureSmtpUsername, string secureSmtpPassword, string smtpServerHost, int smtpServerPort, string smtpUsername, string smtpPassword, Option<string> mailFromDomain = default)
        {
            SecureSmtpServerHost = secureSmtpServerHost;
            SecureSmtpServerPort = secureSmtpServerPort;
            SecureSmtpUsername = secureSmtpUsername;
            SecureSmtpPassword = secureSmtpPassword;
            SmtpServerHost = smtpServerHost;
            SmtpServerPort = smtpServerPort;
            SmtpUsername = smtpUsername;
            SmtpPassword = smtpPassword;
            MailFromDomainOption = mailFromDomain;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Secure TLS SMTP server host domain
        /// </summary>
        /// <value>Secure TLS SMTP server host domain</value>
        [JsonPropertyName("secureSmtpServerHost")]
        public string SecureSmtpServerHost { get; set; }

        /// <summary>
        /// Secure TLS SMTP server host port
        /// </summary>
        /// <value>Secure TLS SMTP server host port</value>
        [JsonPropertyName("secureSmtpServerPort")]
        public int SecureSmtpServerPort { get; set; }

        /// <summary>
        /// Secure TLS SMTP username for login
        /// </summary>
        /// <value>Secure TLS SMTP username for login</value>
        [JsonPropertyName("secureSmtpUsername")]
        public string SecureSmtpUsername { get; set; }

        /// <summary>
        /// Secure TLS SMTP password for login
        /// </summary>
        /// <value>Secure TLS SMTP password for login</value>
        [JsonPropertyName("secureSmtpPassword")]
        public string SecureSmtpPassword { get; set; }

        /// <summary>
        /// SMTP server host domain
        /// </summary>
        /// <value>SMTP server host domain</value>
        [JsonPropertyName("smtpServerHost")]
        public string SmtpServerHost { get; set; }

        /// <summary>
        /// SMTP server host port
        /// </summary>
        /// <value>SMTP server host port</value>
        [JsonPropertyName("smtpServerPort")]
        public int SmtpServerPort { get; set; }

        /// <summary>
        /// SMTP username for login
        /// </summary>
        /// <value>SMTP username for login</value>
        [JsonPropertyName("smtpUsername")]
        public string SmtpUsername { get; set; }

        /// <summary>
        /// SMTP password for login
        /// </summary>
        /// <value>SMTP password for login</value>
        [JsonPropertyName("smtpPassword")]
        public string SmtpPassword { get; set; }

        /// <summary>
        /// Used to track the state of MailFromDomain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MailFromDomainOption { get; private set; }

        /// <summary>
        /// Mail from domain or SMTP HELO value
        /// </summary>
        /// <value>Mail from domain or SMTP HELO value</value>
        [JsonPropertyName("mailFromDomain")]
        public string MailFromDomain { get { return this.MailFromDomainOption; } set { this.MailFromDomainOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmtpAccessDetails {\n");
            sb.Append("  SecureSmtpServerHost: ").Append(SecureSmtpServerHost).Append("\n");
            sb.Append("  SecureSmtpServerPort: ").Append(SecureSmtpServerPort).Append("\n");
            sb.Append("  SecureSmtpUsername: ").Append(SecureSmtpUsername).Append("\n");
            sb.Append("  SecureSmtpPassword: ").Append(SecureSmtpPassword).Append("\n");
            sb.Append("  SmtpServerHost: ").Append(SmtpServerHost).Append("\n");
            sb.Append("  SmtpServerPort: ").Append(SmtpServerPort).Append("\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("  MailFromDomain: ").Append(MailFromDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SmtpAccessDetails" />
    /// </summary>
    public class SmtpAccessDetailsJsonConverter : JsonConverter<SmtpAccessDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="SmtpAccessDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SmtpAccessDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> secureSmtpServerHost = default;
            Option<int?> secureSmtpServerPort = default;
            Option<string> secureSmtpUsername = default;
            Option<string> secureSmtpPassword = default;
            Option<string> smtpServerHost = default;
            Option<int?> smtpServerPort = default;
            Option<string> smtpUsername = default;
            Option<string> smtpPassword = default;
            Option<string> mailFromDomain = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "secureSmtpServerHost":
                            secureSmtpServerHost = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "secureSmtpServerPort":
                            secureSmtpServerPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "secureSmtpUsername":
                            secureSmtpUsername = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "secureSmtpPassword":
                            secureSmtpPassword = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "smtpServerHost":
                            smtpServerHost = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "smtpServerPort":
                            smtpServerPort = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "smtpUsername":
                            smtpUsername = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "smtpPassword":
                            smtpPassword = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mailFromDomain":
                            mailFromDomain = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!secureSmtpServerHost.IsSet)
                throw new ArgumentException("Property is required for class SmtpAccessDetails.", nameof(secureSmtpServerHost));

            if (!secureSmtpServerPort.IsSet)
                throw new ArgumentException("Property is required for class SmtpAccessDetails.", nameof(secureSmtpServerPort));

            if (!secureSmtpUsername.IsSet)
                throw new ArgumentException("Property is required for class SmtpAccessDetails.", nameof(secureSmtpUsername));

            if (!secureSmtpPassword.IsSet)
                throw new ArgumentException("Property is required for class SmtpAccessDetails.", nameof(secureSmtpPassword));

            if (!smtpServerHost.IsSet)
                throw new ArgumentException("Property is required for class SmtpAccessDetails.", nameof(smtpServerHost));

            if (!smtpServerPort.IsSet)
                throw new ArgumentException("Property is required for class SmtpAccessDetails.", nameof(smtpServerPort));

            if (!smtpUsername.IsSet)
                throw new ArgumentException("Property is required for class SmtpAccessDetails.", nameof(smtpUsername));

            if (!smtpPassword.IsSet)
                throw new ArgumentException("Property is required for class SmtpAccessDetails.", nameof(smtpPassword));

            if (secureSmtpServerHost.IsSet && secureSmtpServerHost.Value == null)
                throw new ArgumentNullException(nameof(secureSmtpServerHost), "Property is not nullable for class SmtpAccessDetails.");

            if (secureSmtpServerPort.IsSet && secureSmtpServerPort.Value == null)
                throw new ArgumentNullException(nameof(secureSmtpServerPort), "Property is not nullable for class SmtpAccessDetails.");

            if (secureSmtpUsername.IsSet && secureSmtpUsername.Value == null)
                throw new ArgumentNullException(nameof(secureSmtpUsername), "Property is not nullable for class SmtpAccessDetails.");

            if (secureSmtpPassword.IsSet && secureSmtpPassword.Value == null)
                throw new ArgumentNullException(nameof(secureSmtpPassword), "Property is not nullable for class SmtpAccessDetails.");

            if (smtpServerHost.IsSet && smtpServerHost.Value == null)
                throw new ArgumentNullException(nameof(smtpServerHost), "Property is not nullable for class SmtpAccessDetails.");

            if (smtpServerPort.IsSet && smtpServerPort.Value == null)
                throw new ArgumentNullException(nameof(smtpServerPort), "Property is not nullable for class SmtpAccessDetails.");

            if (smtpUsername.IsSet && smtpUsername.Value == null)
                throw new ArgumentNullException(nameof(smtpUsername), "Property is not nullable for class SmtpAccessDetails.");

            if (smtpPassword.IsSet && smtpPassword.Value == null)
                throw new ArgumentNullException(nameof(smtpPassword), "Property is not nullable for class SmtpAccessDetails.");

            return new SmtpAccessDetails(secureSmtpServerHost.Value, secureSmtpServerPort.Value.Value, secureSmtpUsername.Value, secureSmtpPassword.Value, smtpServerHost.Value, smtpServerPort.Value.Value, smtpUsername.Value, smtpPassword.Value, mailFromDomain);
        }

        /// <summary>
        /// Serializes a <see cref="SmtpAccessDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="smtpAccessDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SmtpAccessDetails smtpAccessDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, smtpAccessDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SmtpAccessDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="smtpAccessDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SmtpAccessDetails smtpAccessDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (smtpAccessDetails.SecureSmtpServerHost == null)
                throw new ArgumentNullException(nameof(smtpAccessDetails.SecureSmtpServerHost), "Property is required for class SmtpAccessDetails.");

            if (smtpAccessDetails.SecureSmtpUsername == null)
                throw new ArgumentNullException(nameof(smtpAccessDetails.SecureSmtpUsername), "Property is required for class SmtpAccessDetails.");

            if (smtpAccessDetails.SecureSmtpPassword == null)
                throw new ArgumentNullException(nameof(smtpAccessDetails.SecureSmtpPassword), "Property is required for class SmtpAccessDetails.");

            if (smtpAccessDetails.SmtpServerHost == null)
                throw new ArgumentNullException(nameof(smtpAccessDetails.SmtpServerHost), "Property is required for class SmtpAccessDetails.");

            if (smtpAccessDetails.SmtpUsername == null)
                throw new ArgumentNullException(nameof(smtpAccessDetails.SmtpUsername), "Property is required for class SmtpAccessDetails.");

            if (smtpAccessDetails.SmtpPassword == null)
                throw new ArgumentNullException(nameof(smtpAccessDetails.SmtpPassword), "Property is required for class SmtpAccessDetails.");

            writer.WriteString("secureSmtpServerHost", smtpAccessDetails.SecureSmtpServerHost);

            writer.WriteNumber("secureSmtpServerPort", smtpAccessDetails.SecureSmtpServerPort);

            writer.WriteString("secureSmtpUsername", smtpAccessDetails.SecureSmtpUsername);

            writer.WriteString("secureSmtpPassword", smtpAccessDetails.SecureSmtpPassword);

            writer.WriteString("smtpServerHost", smtpAccessDetails.SmtpServerHost);

            writer.WriteNumber("smtpServerPort", smtpAccessDetails.SmtpServerPort);

            writer.WriteString("smtpUsername", smtpAccessDetails.SmtpUsername);

            writer.WriteString("smtpPassword", smtpAccessDetails.SmtpPassword);

            if (smtpAccessDetails.MailFromDomainOption.IsSet)
                if (smtpAccessDetails.MailFromDomainOption.Value != null)
                    writer.WriteString("mailFromDomain", smtpAccessDetails.MailFromDomain);
                else
                    writer.WriteNull("mailFromDomain");
        }
    }
}
