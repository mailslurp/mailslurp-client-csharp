/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Access details for inbox using SMTP
    /// </summary>
    [DataContract(Name = "SmtpAccessDetails")]
    public partial class SmtpAccessDetails : IEquatable<SmtpAccessDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpAccessDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmtpAccessDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpAccessDetails" /> class.
        /// </summary>
        /// <param name="secureSmtpServerHost">Secure TLS SMTP server host domain (required).</param>
        /// <param name="secureSmtpServerPort">Secure TLS SMTP server host port (required).</param>
        /// <param name="secureSmtpUsername">Secure TLS SMTP username for login (required).</param>
        /// <param name="secureSmtpPassword">Secure TLS SMTP password for login (required).</param>
        /// <param name="smtpServerHost">SMTP server host domain (required).</param>
        /// <param name="smtpServerPort">SMTP server host port (required).</param>
        /// <param name="smtpUsername">SMTP username for login (required).</param>
        /// <param name="smtpPassword">SMTP password for login (required).</param>
        /// <param name="mailFromDomain">Mail from domain or SMTP HELO value.</param>
        public SmtpAccessDetails(string secureSmtpServerHost = default(string), int secureSmtpServerPort = default(int), string secureSmtpUsername = default(string), string secureSmtpPassword = default(string), string smtpServerHost = default(string), int smtpServerPort = default(int), string smtpUsername = default(string), string smtpPassword = default(string), string mailFromDomain = default(string))
        {
            // to ensure "secureSmtpServerHost" is required (not null)
            if (secureSmtpServerHost == null)
            {
                throw new ArgumentNullException("secureSmtpServerHost is a required property for SmtpAccessDetails and cannot be null");
            }
            this.SecureSmtpServerHost = secureSmtpServerHost;
            this.SecureSmtpServerPort = secureSmtpServerPort;
            // to ensure "secureSmtpUsername" is required (not null)
            if (secureSmtpUsername == null)
            {
                throw new ArgumentNullException("secureSmtpUsername is a required property for SmtpAccessDetails and cannot be null");
            }
            this.SecureSmtpUsername = secureSmtpUsername;
            // to ensure "secureSmtpPassword" is required (not null)
            if (secureSmtpPassword == null)
            {
                throw new ArgumentNullException("secureSmtpPassword is a required property for SmtpAccessDetails and cannot be null");
            }
            this.SecureSmtpPassword = secureSmtpPassword;
            // to ensure "smtpServerHost" is required (not null)
            if (smtpServerHost == null)
            {
                throw new ArgumentNullException("smtpServerHost is a required property for SmtpAccessDetails and cannot be null");
            }
            this.SmtpServerHost = smtpServerHost;
            this.SmtpServerPort = smtpServerPort;
            // to ensure "smtpUsername" is required (not null)
            if (smtpUsername == null)
            {
                throw new ArgumentNullException("smtpUsername is a required property for SmtpAccessDetails and cannot be null");
            }
            this.SmtpUsername = smtpUsername;
            // to ensure "smtpPassword" is required (not null)
            if (smtpPassword == null)
            {
                throw new ArgumentNullException("smtpPassword is a required property for SmtpAccessDetails and cannot be null");
            }
            this.SmtpPassword = smtpPassword;
            this.MailFromDomain = mailFromDomain;
        }

        /// <summary>
        /// Secure TLS SMTP server host domain
        /// </summary>
        /// <value>Secure TLS SMTP server host domain</value>
        [DataMember(Name = "secureSmtpServerHost", IsRequired = true, EmitDefaultValue = true)]
        public string SecureSmtpServerHost { get; set; }

        /// <summary>
        /// Secure TLS SMTP server host port
        /// </summary>
        /// <value>Secure TLS SMTP server host port</value>
        [DataMember(Name = "secureSmtpServerPort", IsRequired = true, EmitDefaultValue = true)]
        public int SecureSmtpServerPort { get; set; }

        /// <summary>
        /// Secure TLS SMTP username for login
        /// </summary>
        /// <value>Secure TLS SMTP username for login</value>
        [DataMember(Name = "secureSmtpUsername", IsRequired = true, EmitDefaultValue = true)]
        public string SecureSmtpUsername { get; set; }

        /// <summary>
        /// Secure TLS SMTP password for login
        /// </summary>
        /// <value>Secure TLS SMTP password for login</value>
        [DataMember(Name = "secureSmtpPassword", IsRequired = true, EmitDefaultValue = true)]
        public string SecureSmtpPassword { get; set; }

        /// <summary>
        /// SMTP server host domain
        /// </summary>
        /// <value>SMTP server host domain</value>
        [DataMember(Name = "smtpServerHost", IsRequired = true, EmitDefaultValue = true)]
        public string SmtpServerHost { get; set; }

        /// <summary>
        /// SMTP server host port
        /// </summary>
        /// <value>SMTP server host port</value>
        [DataMember(Name = "smtpServerPort", IsRequired = true, EmitDefaultValue = true)]
        public int SmtpServerPort { get; set; }

        /// <summary>
        /// SMTP username for login
        /// </summary>
        /// <value>SMTP username for login</value>
        [DataMember(Name = "smtpUsername", IsRequired = true, EmitDefaultValue = true)]
        public string SmtpUsername { get; set; }

        /// <summary>
        /// SMTP password for login
        /// </summary>
        /// <value>SMTP password for login</value>
        [DataMember(Name = "smtpPassword", IsRequired = true, EmitDefaultValue = true)]
        public string SmtpPassword { get; set; }

        /// <summary>
        /// Mail from domain or SMTP HELO value
        /// </summary>
        /// <value>Mail from domain or SMTP HELO value</value>
        [DataMember(Name = "mailFromDomain", EmitDefaultValue = true)]
        public string MailFromDomain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmtpAccessDetails {\n");
            sb.Append("  SecureSmtpServerHost: ").Append(SecureSmtpServerHost).Append("\n");
            sb.Append("  SecureSmtpServerPort: ").Append(SecureSmtpServerPort).Append("\n");
            sb.Append("  SecureSmtpUsername: ").Append(SecureSmtpUsername).Append("\n");
            sb.Append("  SecureSmtpPassword: ").Append(SecureSmtpPassword).Append("\n");
            sb.Append("  SmtpServerHost: ").Append(SmtpServerHost).Append("\n");
            sb.Append("  SmtpServerPort: ").Append(SmtpServerPort).Append("\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpPassword: ").Append(SmtpPassword).Append("\n");
            sb.Append("  MailFromDomain: ").Append(MailFromDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmtpAccessDetails);
        }

        /// <summary>
        /// Returns true if SmtpAccessDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SmtpAccessDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmtpAccessDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SecureSmtpServerHost == input.SecureSmtpServerHost ||
                    (this.SecureSmtpServerHost != null &&
                    this.SecureSmtpServerHost.Equals(input.SecureSmtpServerHost))
                ) && 
                (
                    this.SecureSmtpServerPort == input.SecureSmtpServerPort ||
                    this.SecureSmtpServerPort.Equals(input.SecureSmtpServerPort)
                ) && 
                (
                    this.SecureSmtpUsername == input.SecureSmtpUsername ||
                    (this.SecureSmtpUsername != null &&
                    this.SecureSmtpUsername.Equals(input.SecureSmtpUsername))
                ) && 
                (
                    this.SecureSmtpPassword == input.SecureSmtpPassword ||
                    (this.SecureSmtpPassword != null &&
                    this.SecureSmtpPassword.Equals(input.SecureSmtpPassword))
                ) && 
                (
                    this.SmtpServerHost == input.SmtpServerHost ||
                    (this.SmtpServerHost != null &&
                    this.SmtpServerHost.Equals(input.SmtpServerHost))
                ) && 
                (
                    this.SmtpServerPort == input.SmtpServerPort ||
                    this.SmtpServerPort.Equals(input.SmtpServerPort)
                ) && 
                (
                    this.SmtpUsername == input.SmtpUsername ||
                    (this.SmtpUsername != null &&
                    this.SmtpUsername.Equals(input.SmtpUsername))
                ) && 
                (
                    this.SmtpPassword == input.SmtpPassword ||
                    (this.SmtpPassword != null &&
                    this.SmtpPassword.Equals(input.SmtpPassword))
                ) && 
                (
                    this.MailFromDomain == input.MailFromDomain ||
                    (this.MailFromDomain != null &&
                    this.MailFromDomain.Equals(input.MailFromDomain))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecureSmtpServerHost != null)
                {
                    hashCode = (hashCode * 59) + this.SecureSmtpServerHost.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SecureSmtpServerPort.GetHashCode();
                if (this.SecureSmtpUsername != null)
                {
                    hashCode = (hashCode * 59) + this.SecureSmtpUsername.GetHashCode();
                }
                if (this.SecureSmtpPassword != null)
                {
                    hashCode = (hashCode * 59) + this.SecureSmtpPassword.GetHashCode();
                }
                if (this.SmtpServerHost != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpServerHost.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SmtpServerPort.GetHashCode();
                if (this.SmtpUsername != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpUsername.GetHashCode();
                }
                if (this.SmtpPassword != null)
                {
                    hashCode = (hashCode * 59) + this.SmtpPassword.GetHashCode();
                }
                if (this.MailFromDomain != null)
                {
                    hashCode = (hashCode * 59) + this.MailFromDomain.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
