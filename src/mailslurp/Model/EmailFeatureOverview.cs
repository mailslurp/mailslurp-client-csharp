// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EmailFeatureOverview
    /// </summary>
    public partial class EmailFeatureOverview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailFeatureOverview" /> class.
        /// </summary>
        /// <param name="feature">feature</param>
        /// <param name="statuses">statuses</param>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="category">category</param>
        /// <param name="notes">notes</param>
        /// <param name="notesNumbers">notesNumbers</param>
        /// <param name="featureStatistics">featureStatistics</param>
        [JsonConstructor]
        public EmailFeatureOverview(FeatureEnum feature, List<EmailFeatureOverview.StatusesEnum> statuses, Option<string> title = default, Option<string> description = default, Option<CategoryEnum?> category = default, Option<string> notes = default, Option<Dictionary<string, string>> notesNumbers = default, Option<List<EmailFeatureFamilyStatistics>> featureStatistics = default)
        {
            Feature = feature;
            Statuses = statuses;
            TitleOption = title;
            DescriptionOption = description;
            CategoryOption = category;
            NotesOption = notes;
            NotesNumbersOption = notesNumbers;
            FeatureStatisticsOption = featureStatistics;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Feature
        /// </summary>
        public enum FeatureEnum
        {
            /// <summary>
            /// Enum Amp for value: amp
            /// </summary>
            Amp = 1,

            /// <summary>
            /// Enum CssAccentColor for value: css-accent-color
            /// </summary>
            CssAccentColor = 2,

            /// <summary>
            /// Enum CssAlignItems for value: css-align-items
            /// </summary>
            CssAlignItems = 3,

            /// <summary>
            /// Enum CssAnimation for value: css-animation
            /// </summary>
            CssAnimation = 4,

            /// <summary>
            /// Enum CssAspectRatio for value: css-aspect-ratio
            /// </summary>
            CssAspectRatio = 5,

            /// <summary>
            /// Enum CssAtFontFace for value: css-at-font-face
            /// </summary>
            CssAtFontFace = 6,

            /// <summary>
            /// Enum CssAtImport for value: css-at-import
            /// </summary>
            CssAtImport = 7,

            /// <summary>
            /// Enum CssAtKeyframes for value: css-at-keyframes
            /// </summary>
            CssAtKeyframes = 8,

            /// <summary>
            /// Enum CssAtMedia for value: css-at-media
            /// </summary>
            CssAtMedia = 9,

            /// <summary>
            /// Enum CssAtSupports for value: css-at-supports
            /// </summary>
            CssAtSupports = 10,

            /// <summary>
            /// Enum CssBackgroundBlendMode for value: css-background-blend-mode
            /// </summary>
            CssBackgroundBlendMode = 11,

            /// <summary>
            /// Enum CssBackgroundClip for value: css-background-clip
            /// </summary>
            CssBackgroundClip = 12,

            /// <summary>
            /// Enum CssBackgroundColor for value: css-background-color
            /// </summary>
            CssBackgroundColor = 13,

            /// <summary>
            /// Enum CssBackgroundImage for value: css-background-image
            /// </summary>
            CssBackgroundImage = 14,

            /// <summary>
            /// Enum CssBackgroundOrigin for value: css-background-origin
            /// </summary>
            CssBackgroundOrigin = 15,

            /// <summary>
            /// Enum CssBackgroundPosition for value: css-background-position
            /// </summary>
            CssBackgroundPosition = 16,

            /// <summary>
            /// Enum CssBackgroundRepeat for value: css-background-repeat
            /// </summary>
            CssBackgroundRepeat = 17,

            /// <summary>
            /// Enum CssBackgroundSize for value: css-background-size
            /// </summary>
            CssBackgroundSize = 18,

            /// <summary>
            /// Enum CssBackground for value: css-background
            /// </summary>
            CssBackground = 19,

            /// <summary>
            /// Enum CssBlockInlineSize for value: css-block-inline-size
            /// </summary>
            CssBlockInlineSize = 20,

            /// <summary>
            /// Enum CssBorderImage for value: css-border-image
            /// </summary>
            CssBorderImage = 21,

            /// <summary>
            /// Enum CssBorderInlineBlockIndividual for value: css-border-inline-block-individual
            /// </summary>
            CssBorderInlineBlockIndividual = 22,

            /// <summary>
            /// Enum CssBorderInlineBlockLonghand for value: css-border-inline-block-longhand
            /// </summary>
            CssBorderInlineBlockLonghand = 23,

            /// <summary>
            /// Enum CssBorderInlineBlock for value: css-border-inline-block
            /// </summary>
            CssBorderInlineBlock = 24,

            /// <summary>
            /// Enum CssBorderRadiusLogical for value: css-border-radius-logical
            /// </summary>
            CssBorderRadiusLogical = 25,

            /// <summary>
            /// Enum CssBorderRadius for value: css-border-radius
            /// </summary>
            CssBorderRadius = 26,

            /// <summary>
            /// Enum CssBorder for value: css-border
            /// </summary>
            CssBorder = 27,

            /// <summary>
            /// Enum CssBoxShadow for value: css-box-shadow
            /// </summary>
            CssBoxShadow = 28,

            /// <summary>
            /// Enum CssBoxSizing for value: css-box-sizing
            /// </summary>
            CssBoxSizing = 29,

            /// <summary>
            /// Enum CssCaptionSide for value: css-caption-side
            /// </summary>
            CssCaptionSide = 30,

            /// <summary>
            /// Enum CssClipPath for value: css-clip-path
            /// </summary>
            CssClipPath = 31,

            /// <summary>
            /// Enum CssColumnCount for value: css-column-count
            /// </summary>
            CssColumnCount = 32,

            /// <summary>
            /// Enum CssColumnLayoutProperties for value: css-column-layout-properties
            /// </summary>
            CssColumnLayoutProperties = 33,

            /// <summary>
            /// Enum CssDirection for value: css-direction
            /// </summary>
            CssDirection = 34,

            /// <summary>
            /// Enum CssDisplayFlex for value: css-display-flex
            /// </summary>
            CssDisplayFlex = 35,

            /// <summary>
            /// Enum CssDisplayGrid for value: css-display-grid
            /// </summary>
            CssDisplayGrid = 36,

            /// <summary>
            /// Enum CssDisplayNone for value: css-display-none
            /// </summary>
            CssDisplayNone = 37,

            /// <summary>
            /// Enum CssDisplay for value: css-display
            /// </summary>
            CssDisplay = 38,

            /// <summary>
            /// Enum CssFilter for value: css-filter
            /// </summary>
            CssFilter = 39,

            /// <summary>
            /// Enum CssFlexDirection for value: css-flex-direction
            /// </summary>
            CssFlexDirection = 40,

            /// <summary>
            /// Enum CssFlexWrap for value: css-flex-wrap
            /// </summary>
            CssFlexWrap = 41,

            /// <summary>
            /// Enum CssFloat for value: css-float
            /// </summary>
            CssFloat = 42,

            /// <summary>
            /// Enum CssFontKerning for value: css-font-kerning
            /// </summary>
            CssFontKerning = 43,

            /// <summary>
            /// Enum CssFontWeight for value: css-font-weight
            /// </summary>
            CssFontWeight = 44,

            /// <summary>
            /// Enum CssFont for value: css-font
            /// </summary>
            CssFont = 45,

            /// <summary>
            /// Enum CssGap for value: css-gap
            /// </summary>
            CssGap = 46,

            /// <summary>
            /// Enum CssGridTemplate for value: css-grid-template
            /// </summary>
            CssGridTemplate = 47,

            /// <summary>
            /// Enum CssHeight for value: css-height
            /// </summary>
            CssHeight = 48,

            /// <summary>
            /// Enum CssHyphens for value: css-hyphens
            /// </summary>
            CssHyphens = 49,

            /// <summary>
            /// Enum CssInlineSize for value: css-inline-size
            /// </summary>
            CssInlineSize = 50,

            /// <summary>
            /// Enum CssJustifyContent for value: css-justify-content
            /// </summary>
            CssJustifyContent = 51,

            /// <summary>
            /// Enum CssLeftRightTopBottom for value: css-left-right-top-bottom
            /// </summary>
            CssLeftRightTopBottom = 52,

            /// <summary>
            /// Enum CssLetterSpacing for value: css-letter-spacing
            /// </summary>
            CssLetterSpacing = 53,

            /// <summary>
            /// Enum CssLineHeight for value: css-line-height
            /// </summary>
            CssLineHeight = 54,

            /// <summary>
            /// Enum CssListStyleImage for value: css-list-style-image
            /// </summary>
            CssListStyleImage = 55,

            /// <summary>
            /// Enum CssListStylePosition for value: css-list-style-position
            /// </summary>
            CssListStylePosition = 56,

            /// <summary>
            /// Enum CssListStyleType for value: css-list-style-type
            /// </summary>
            CssListStyleType = 57,

            /// <summary>
            /// Enum CssListStyle for value: css-list-style
            /// </summary>
            CssListStyle = 58,

            /// <summary>
            /// Enum CssMarginBlockStartEnd for value: css-margin-block-start-end
            /// </summary>
            CssMarginBlockStartEnd = 59,

            /// <summary>
            /// Enum CssMarginInlineBlock for value: css-margin-inline-block
            /// </summary>
            CssMarginInlineBlock = 60,

            /// <summary>
            /// Enum CssMarginInlineStartEnd for value: css-margin-inline-start-end
            /// </summary>
            CssMarginInlineStartEnd = 61,

            /// <summary>
            /// Enum CssMarginInline for value: css-margin-inline
            /// </summary>
            CssMarginInline = 62,

            /// <summary>
            /// Enum CssMargin for value: css-margin
            /// </summary>
            CssMargin = 63,

            /// <summary>
            /// Enum CssMaxBlockSize for value: css-max-block-size
            /// </summary>
            CssMaxBlockSize = 64,

            /// <summary>
            /// Enum CssMaxHeight for value: css-max-height
            /// </summary>
            CssMaxHeight = 65,

            /// <summary>
            /// Enum CssMaxWidth for value: css-max-width
            /// </summary>
            CssMaxWidth = 66,

            /// <summary>
            /// Enum CssMinHeight for value: css-min-height
            /// </summary>
            CssMinHeight = 67,

            /// <summary>
            /// Enum CssMinInlineSize for value: css-min-inline-size
            /// </summary>
            CssMinInlineSize = 68,

            /// <summary>
            /// Enum CssMinWidth for value: css-min-width
            /// </summary>
            CssMinWidth = 69,

            /// <summary>
            /// Enum CssMixBlendMode for value: css-mix-blend-mode
            /// </summary>
            CssMixBlendMode = 70,

            /// <summary>
            /// Enum CssObjectFit for value: css-object-fit
            /// </summary>
            CssObjectFit = 71,

            /// <summary>
            /// Enum CssObjectPosition for value: css-object-position
            /// </summary>
            CssObjectPosition = 72,

            /// <summary>
            /// Enum CssOpacity for value: css-opacity
            /// </summary>
            CssOpacity = 73,

            /// <summary>
            /// Enum CssOutlineOffset for value: css-outline-offset
            /// </summary>
            CssOutlineOffset = 74,

            /// <summary>
            /// Enum CssOutline for value: css-outline
            /// </summary>
            CssOutline = 75,

            /// <summary>
            /// Enum CssOverflowWrap for value: css-overflow-wrap
            /// </summary>
            CssOverflowWrap = 76,

            /// <summary>
            /// Enum CssOverflow for value: css-overflow
            /// </summary>
            CssOverflow = 77,

            /// <summary>
            /// Enum CssPaddingBlockStartEnd for value: css-padding-block-start-end
            /// </summary>
            CssPaddingBlockStartEnd = 78,

            /// <summary>
            /// Enum CssPaddingInlineBlock for value: css-padding-inline-block
            /// </summary>
            CssPaddingInlineBlock = 79,

            /// <summary>
            /// Enum CssPaddingInlineStartEnd for value: css-padding-inline-start-end
            /// </summary>
            CssPaddingInlineStartEnd = 80,

            /// <summary>
            /// Enum CssPadding for value: css-padding
            /// </summary>
            CssPadding = 81,

            /// <summary>
            /// Enum CssPosition for value: css-position
            /// </summary>
            CssPosition = 82,

            /// <summary>
            /// Enum CssTabSize for value: css-tab-size
            /// </summary>
            CssTabSize = 83,

            /// <summary>
            /// Enum CssTableLayout for value: css-table-layout
            /// </summary>
            CssTableLayout = 84,

            /// <summary>
            /// Enum CssTextAlignLast for value: css-text-align-last
            /// </summary>
            CssTextAlignLast = 85,

            /// <summary>
            /// Enum CssTextAlign for value: css-text-align
            /// </summary>
            CssTextAlign = 86,

            /// <summary>
            /// Enum CssTextDecorationColor for value: css-text-decoration-color
            /// </summary>
            CssTextDecorationColor = 87,

            /// <summary>
            /// Enum CssTextDecorationThickness for value: css-text-decoration-thickness
            /// </summary>
            CssTextDecorationThickness = 88,

            /// <summary>
            /// Enum CssTextDecoration for value: css-text-decoration
            /// </summary>
            CssTextDecoration = 89,

            /// <summary>
            /// Enum CssTextEmphasisPosition for value: css-text-emphasis-position
            /// </summary>
            CssTextEmphasisPosition = 90,

            /// <summary>
            /// Enum CssTextEmphasis for value: css-text-emphasis
            /// </summary>
            CssTextEmphasis = 91,

            /// <summary>
            /// Enum CssTextIndent for value: css-text-indent
            /// </summary>
            CssTextIndent = 92,

            /// <summary>
            /// Enum CssTextOverflow for value: css-text-overflow
            /// </summary>
            CssTextOverflow = 93,

            /// <summary>
            /// Enum CssTextShadow for value: css-text-shadow
            /// </summary>
            CssTextShadow = 94,

            /// <summary>
            /// Enum CssTextTransform for value: css-text-transform
            /// </summary>
            CssTextTransform = 95,

            /// <summary>
            /// Enum CssTextUnderlineOffset for value: css-text-underline-offset
            /// </summary>
            CssTextUnderlineOffset = 96,

            /// <summary>
            /// Enum CssTransform for value: css-transform
            /// </summary>
            CssTransform = 97,

            /// <summary>
            /// Enum CssVerticalAlign for value: css-vertical-align
            /// </summary>
            CssVerticalAlign = 98,

            /// <summary>
            /// Enum CssVisibility for value: css-visibility
            /// </summary>
            CssVisibility = 99,

            /// <summary>
            /// Enum CssWhiteSpace for value: css-white-space
            /// </summary>
            CssWhiteSpace = 100,

            /// <summary>
            /// Enum CssWidth for value: css-width
            /// </summary>
            CssWidth = 101,

            /// <summary>
            /// Enum CssWordBreak for value: css-word-break
            /// </summary>
            CssWordBreak = 102,

            /// <summary>
            /// Enum CssWritingMode for value: css-writing-mode
            /// </summary>
            CssWritingMode = 103,

            /// <summary>
            /// Enum CssZIndex for value: css-z-index
            /// </summary>
            CssZIndex = 104,

            /// <summary>
            /// Enum HtmlAbbr for value: html-abbr
            /// </summary>
            HtmlAbbr = 105,

            /// <summary>
            /// Enum HtmlAddress for value: html-address
            /// </summary>
            HtmlAddress = 106,

            /// <summary>
            /// Enum HtmlAlign for value: html-align
            /// </summary>
            HtmlAlign = 107,

            /// <summary>
            /// Enum HtmlAnchorLinks for value: html-anchor-links
            /// </summary>
            HtmlAnchorLinks = 108,

            /// <summary>
            /// Enum HtmlAriaDescribedby for value: html-aria-describedby
            /// </summary>
            HtmlAriaDescribedby = 109,

            /// <summary>
            /// Enum HtmlAriaHidden for value: html-aria-hidden
            /// </summary>
            HtmlAriaHidden = 110,

            /// <summary>
            /// Enum HtmlAriaLabel for value: html-aria-label
            /// </summary>
            HtmlAriaLabel = 111,

            /// <summary>
            /// Enum HtmlAriaLabelledby for value: html-aria-labelledby
            /// </summary>
            HtmlAriaLabelledby = 112,

            /// <summary>
            /// Enum HtmlAriaLive for value: html-aria-live
            /// </summary>
            HtmlAriaLive = 113,

            /// <summary>
            /// Enum HtmlAudio for value: html-audio
            /// </summary>
            HtmlAudio = 114,

            /// <summary>
            /// Enum HtmlBackground for value: html-background
            /// </summary>
            HtmlBackground = 115,

            /// <summary>
            /// Enum HtmlBase for value: html-base
            /// </summary>
            HtmlBase = 116,

            /// <summary>
            /// Enum HtmlBlockquote for value: html-blockquote
            /// </summary>
            HtmlBlockquote = 117,

            /// <summary>
            /// Enum HtmlBody for value: html-body
            /// </summary>
            HtmlBody = 118,

            /// <summary>
            /// Enum HtmlButtonReset for value: html-button-reset
            /// </summary>
            HtmlButtonReset = 119,

            /// <summary>
            /// Enum HtmlButtonSubmit for value: html-button-submit
            /// </summary>
            HtmlButtonSubmit = 120,

            /// <summary>
            /// Enum HtmlCode for value: html-code
            /// </summary>
            HtmlCode = 121,

            /// <summary>
            /// Enum HtmlDel for value: html-del
            /// </summary>
            HtmlDel = 122,

            /// <summary>
            /// Enum HtmlDfn for value: html-dfn
            /// </summary>
            HtmlDfn = 123,

            /// <summary>
            /// Enum HtmlDialog for value: html-dialog
            /// </summary>
            HtmlDialog = 124,

            /// <summary>
            /// Enum HtmlDir for value: html-dir
            /// </summary>
            HtmlDir = 125,

            /// <summary>
            /// Enum HtmlDiv for value: html-div
            /// </summary>
            HtmlDiv = 126,

            /// <summary>
            /// Enum HtmlDoctype for value: html-doctype
            /// </summary>
            HtmlDoctype = 127,

            /// <summary>
            /// Enum HtmlForm for value: html-form
            /// </summary>
            HtmlForm = 128,

            /// <summary>
            /// Enum HtmlH1H6 for value: html-h1-h6
            /// </summary>
            HtmlH1H6 = 129,

            /// <summary>
            /// Enum HtmlHeight for value: html-height
            /// </summary>
            HtmlHeight = 130,

            /// <summary>
            /// Enum HtmlImageMaps for value: html-image-maps
            /// </summary>
            HtmlImageMaps = 131,

            /// <summary>
            /// Enum HtmlInputCheckbox for value: html-input-checkbox
            /// </summary>
            HtmlInputCheckbox = 132,

            /// <summary>
            /// Enum HtmlInputHidden for value: html-input-hidden
            /// </summary>
            HtmlInputHidden = 133,

            /// <summary>
            /// Enum HtmlInputRadio for value: html-input-radio
            /// </summary>
            HtmlInputRadio = 134,

            /// <summary>
            /// Enum HtmlInputReset for value: html-input-reset
            /// </summary>
            HtmlInputReset = 135,

            /// <summary>
            /// Enum HtmlInputSubmit for value: html-input-submit
            /// </summary>
            HtmlInputSubmit = 136,

            /// <summary>
            /// Enum HtmlInputText for value: html-input-text
            /// </summary>
            HtmlInputText = 137,

            /// <summary>
            /// Enum HtmlLang for value: html-lang
            /// </summary>
            HtmlLang = 138,

            /// <summary>
            /// Enum HtmlLink for value: html-link
            /// </summary>
            HtmlLink = 139,

            /// <summary>
            /// Enum HtmlLists for value: html-lists
            /// </summary>
            HtmlLists = 140,

            /// <summary>
            /// Enum HtmlLoadingAttribute for value: html-loading-attribute
            /// </summary>
            HtmlLoadingAttribute = 141,

            /// <summary>
            /// Enum HtmlMailtoLinks for value: html-mailto-links
            /// </summary>
            HtmlMailtoLinks = 142,

            /// <summary>
            /// Enum HtmlMarquee for value: html-marquee
            /// </summary>
            HtmlMarquee = 143,

            /// <summary>
            /// Enum HtmlMeter for value: html-meter
            /// </summary>
            HtmlMeter = 144,

            /// <summary>
            /// Enum HtmlObject for value: html-object
            /// </summary>
            HtmlObject = 145,

            /// <summary>
            /// Enum HtmlP for value: html-p
            /// </summary>
            HtmlP = 146,

            /// <summary>
            /// Enum HtmlPicture for value: html-picture
            /// </summary>
            HtmlPicture = 147,

            /// <summary>
            /// Enum HtmlPre for value: html-pre
            /// </summary>
            HtmlPre = 148,

            /// <summary>
            /// Enum HtmlProgress for value: html-progress
            /// </summary>
            HtmlProgress = 149,

            /// <summary>
            /// Enum HtmlRequired for value: html-required
            /// </summary>
            HtmlRequired = 150,

            /// <summary>
            /// Enum HtmlRole for value: html-role
            /// </summary>
            HtmlRole = 151,

            /// <summary>
            /// Enum HtmlRp for value: html-rp
            /// </summary>
            HtmlRp = 152,

            /// <summary>
            /// Enum HtmlRt for value: html-rt
            /// </summary>
            HtmlRt = 153,

            /// <summary>
            /// Enum HtmlRuby for value: html-ruby
            /// </summary>
            HtmlRuby = 154,

            /// <summary>
            /// Enum HtmlSelect for value: html-select
            /// </summary>
            HtmlSelect = 155,

            /// <summary>
            /// Enum HtmlSemantics for value: html-semantics
            /// </summary>
            HtmlSemantics = 156,

            /// <summary>
            /// Enum HtmlSmall for value: html-small
            /// </summary>
            HtmlSmall = 157,

            /// <summary>
            /// Enum HtmlSpan for value: html-span
            /// </summary>
            HtmlSpan = 158,

            /// <summary>
            /// Enum HtmlSrcset for value: html-srcset
            /// </summary>
            HtmlSrcset = 159,

            /// <summary>
            /// Enum HtmlStrike for value: html-strike
            /// </summary>
            HtmlStrike = 160,

            /// <summary>
            /// Enum HtmlStrong for value: html-strong
            /// </summary>
            HtmlStrong = 161,

            /// <summary>
            /// Enum HtmlStyle for value: html-style
            /// </summary>
            HtmlStyle = 162,

            /// <summary>
            /// Enum HtmlSvg for value: html-svg
            /// </summary>
            HtmlSvg = 163,

            /// <summary>
            /// Enum HtmlTable for value: html-table
            /// </summary>
            HtmlTable = 164,

            /// <summary>
            /// Enum HtmlTarget for value: html-target
            /// </summary>
            HtmlTarget = 165,

            /// <summary>
            /// Enum HtmlTextarea for value: html-textarea
            /// </summary>
            HtmlTextarea = 166,

            /// <summary>
            /// Enum HtmlValign for value: html-valign
            /// </summary>
            HtmlValign = 167,

            /// <summary>
            /// Enum HtmlVideo for value: html-video
            /// </summary>
            HtmlVideo = 168,

            /// <summary>
            /// Enum HtmlWbr for value: html-wbr
            /// </summary>
            HtmlWbr = 169,

            /// <summary>
            /// Enum HtmlWidth for value: html-width
            /// </summary>
            HtmlWidth = 170,

            /// <summary>
            /// Enum ImageAvif for value: image-avif
            /// </summary>
            ImageAvif = 171,

            /// <summary>
            /// Enum ImageBase64 for value: image-base64
            /// </summary>
            ImageBase64 = 172,

            /// <summary>
            /// Enum ImageBmp for value: image-bmp
            /// </summary>
            ImageBmp = 173,

            /// <summary>
            /// Enum ImageGif for value: image-gif
            /// </summary>
            ImageGif = 174,

            /// <summary>
            /// Enum ImageIco for value: image-ico
            /// </summary>
            ImageIco = 175,

            /// <summary>
            /// Enum ImageJpg for value: image-jpg
            /// </summary>
            ImageJpg = 176,

            /// <summary>
            /// Enum ImagePng for value: image-png
            /// </summary>
            ImagePng = 177,

            /// <summary>
            /// Enum ImageSvg for value: image-svg
            /// </summary>
            ImageSvg = 178,

            /// <summary>
            /// Enum ImageWebp for value: image-webp
            /// </summary>
            ImageWebp = 179,

            /// <summary>
            /// Enum Unsupported for value: unsupported
            /// </summary>
            Unsupported = 180
        }

        /// <summary>
        /// Returns a <see cref="FeatureEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FeatureEnum FeatureEnumFromString(string value)
        {
            if (value.Equals("amp"))
                return FeatureEnum.Amp;

            if (value.Equals("css-accent-color"))
                return FeatureEnum.CssAccentColor;

            if (value.Equals("css-align-items"))
                return FeatureEnum.CssAlignItems;

            if (value.Equals("css-animation"))
                return FeatureEnum.CssAnimation;

            if (value.Equals("css-aspect-ratio"))
                return FeatureEnum.CssAspectRatio;

            if (value.Equals("css-at-font-face"))
                return FeatureEnum.CssAtFontFace;

            if (value.Equals("css-at-import"))
                return FeatureEnum.CssAtImport;

            if (value.Equals("css-at-keyframes"))
                return FeatureEnum.CssAtKeyframes;

            if (value.Equals("css-at-media"))
                return FeatureEnum.CssAtMedia;

            if (value.Equals("css-at-supports"))
                return FeatureEnum.CssAtSupports;

            if (value.Equals("css-background-blend-mode"))
                return FeatureEnum.CssBackgroundBlendMode;

            if (value.Equals("css-background-clip"))
                return FeatureEnum.CssBackgroundClip;

            if (value.Equals("css-background-color"))
                return FeatureEnum.CssBackgroundColor;

            if (value.Equals("css-background-image"))
                return FeatureEnum.CssBackgroundImage;

            if (value.Equals("css-background-origin"))
                return FeatureEnum.CssBackgroundOrigin;

            if (value.Equals("css-background-position"))
                return FeatureEnum.CssBackgroundPosition;

            if (value.Equals("css-background-repeat"))
                return FeatureEnum.CssBackgroundRepeat;

            if (value.Equals("css-background-size"))
                return FeatureEnum.CssBackgroundSize;

            if (value.Equals("css-background"))
                return FeatureEnum.CssBackground;

            if (value.Equals("css-block-inline-size"))
                return FeatureEnum.CssBlockInlineSize;

            if (value.Equals("css-border-image"))
                return FeatureEnum.CssBorderImage;

            if (value.Equals("css-border-inline-block-individual"))
                return FeatureEnum.CssBorderInlineBlockIndividual;

            if (value.Equals("css-border-inline-block-longhand"))
                return FeatureEnum.CssBorderInlineBlockLonghand;

            if (value.Equals("css-border-inline-block"))
                return FeatureEnum.CssBorderInlineBlock;

            if (value.Equals("css-border-radius-logical"))
                return FeatureEnum.CssBorderRadiusLogical;

            if (value.Equals("css-border-radius"))
                return FeatureEnum.CssBorderRadius;

            if (value.Equals("css-border"))
                return FeatureEnum.CssBorder;

            if (value.Equals("css-box-shadow"))
                return FeatureEnum.CssBoxShadow;

            if (value.Equals("css-box-sizing"))
                return FeatureEnum.CssBoxSizing;

            if (value.Equals("css-caption-side"))
                return FeatureEnum.CssCaptionSide;

            if (value.Equals("css-clip-path"))
                return FeatureEnum.CssClipPath;

            if (value.Equals("css-column-count"))
                return FeatureEnum.CssColumnCount;

            if (value.Equals("css-column-layout-properties"))
                return FeatureEnum.CssColumnLayoutProperties;

            if (value.Equals("css-direction"))
                return FeatureEnum.CssDirection;

            if (value.Equals("css-display-flex"))
                return FeatureEnum.CssDisplayFlex;

            if (value.Equals("css-display-grid"))
                return FeatureEnum.CssDisplayGrid;

            if (value.Equals("css-display-none"))
                return FeatureEnum.CssDisplayNone;

            if (value.Equals("css-display"))
                return FeatureEnum.CssDisplay;

            if (value.Equals("css-filter"))
                return FeatureEnum.CssFilter;

            if (value.Equals("css-flex-direction"))
                return FeatureEnum.CssFlexDirection;

            if (value.Equals("css-flex-wrap"))
                return FeatureEnum.CssFlexWrap;

            if (value.Equals("css-float"))
                return FeatureEnum.CssFloat;

            if (value.Equals("css-font-kerning"))
                return FeatureEnum.CssFontKerning;

            if (value.Equals("css-font-weight"))
                return FeatureEnum.CssFontWeight;

            if (value.Equals("css-font"))
                return FeatureEnum.CssFont;

            if (value.Equals("css-gap"))
                return FeatureEnum.CssGap;

            if (value.Equals("css-grid-template"))
                return FeatureEnum.CssGridTemplate;

            if (value.Equals("css-height"))
                return FeatureEnum.CssHeight;

            if (value.Equals("css-hyphens"))
                return FeatureEnum.CssHyphens;

            if (value.Equals("css-inline-size"))
                return FeatureEnum.CssInlineSize;

            if (value.Equals("css-justify-content"))
                return FeatureEnum.CssJustifyContent;

            if (value.Equals("css-left-right-top-bottom"))
                return FeatureEnum.CssLeftRightTopBottom;

            if (value.Equals("css-letter-spacing"))
                return FeatureEnum.CssLetterSpacing;

            if (value.Equals("css-line-height"))
                return FeatureEnum.CssLineHeight;

            if (value.Equals("css-list-style-image"))
                return FeatureEnum.CssListStyleImage;

            if (value.Equals("css-list-style-position"))
                return FeatureEnum.CssListStylePosition;

            if (value.Equals("css-list-style-type"))
                return FeatureEnum.CssListStyleType;

            if (value.Equals("css-list-style"))
                return FeatureEnum.CssListStyle;

            if (value.Equals("css-margin-block-start-end"))
                return FeatureEnum.CssMarginBlockStartEnd;

            if (value.Equals("css-margin-inline-block"))
                return FeatureEnum.CssMarginInlineBlock;

            if (value.Equals("css-margin-inline-start-end"))
                return FeatureEnum.CssMarginInlineStartEnd;

            if (value.Equals("css-margin-inline"))
                return FeatureEnum.CssMarginInline;

            if (value.Equals("css-margin"))
                return FeatureEnum.CssMargin;

            if (value.Equals("css-max-block-size"))
                return FeatureEnum.CssMaxBlockSize;

            if (value.Equals("css-max-height"))
                return FeatureEnum.CssMaxHeight;

            if (value.Equals("css-max-width"))
                return FeatureEnum.CssMaxWidth;

            if (value.Equals("css-min-height"))
                return FeatureEnum.CssMinHeight;

            if (value.Equals("css-min-inline-size"))
                return FeatureEnum.CssMinInlineSize;

            if (value.Equals("css-min-width"))
                return FeatureEnum.CssMinWidth;

            if (value.Equals("css-mix-blend-mode"))
                return FeatureEnum.CssMixBlendMode;

            if (value.Equals("css-object-fit"))
                return FeatureEnum.CssObjectFit;

            if (value.Equals("css-object-position"))
                return FeatureEnum.CssObjectPosition;

            if (value.Equals("css-opacity"))
                return FeatureEnum.CssOpacity;

            if (value.Equals("css-outline-offset"))
                return FeatureEnum.CssOutlineOffset;

            if (value.Equals("css-outline"))
                return FeatureEnum.CssOutline;

            if (value.Equals("css-overflow-wrap"))
                return FeatureEnum.CssOverflowWrap;

            if (value.Equals("css-overflow"))
                return FeatureEnum.CssOverflow;

            if (value.Equals("css-padding-block-start-end"))
                return FeatureEnum.CssPaddingBlockStartEnd;

            if (value.Equals("css-padding-inline-block"))
                return FeatureEnum.CssPaddingInlineBlock;

            if (value.Equals("css-padding-inline-start-end"))
                return FeatureEnum.CssPaddingInlineStartEnd;

            if (value.Equals("css-padding"))
                return FeatureEnum.CssPadding;

            if (value.Equals("css-position"))
                return FeatureEnum.CssPosition;

            if (value.Equals("css-tab-size"))
                return FeatureEnum.CssTabSize;

            if (value.Equals("css-table-layout"))
                return FeatureEnum.CssTableLayout;

            if (value.Equals("css-text-align-last"))
                return FeatureEnum.CssTextAlignLast;

            if (value.Equals("css-text-align"))
                return FeatureEnum.CssTextAlign;

            if (value.Equals("css-text-decoration-color"))
                return FeatureEnum.CssTextDecorationColor;

            if (value.Equals("css-text-decoration-thickness"))
                return FeatureEnum.CssTextDecorationThickness;

            if (value.Equals("css-text-decoration"))
                return FeatureEnum.CssTextDecoration;

            if (value.Equals("css-text-emphasis-position"))
                return FeatureEnum.CssTextEmphasisPosition;

            if (value.Equals("css-text-emphasis"))
                return FeatureEnum.CssTextEmphasis;

            if (value.Equals("css-text-indent"))
                return FeatureEnum.CssTextIndent;

            if (value.Equals("css-text-overflow"))
                return FeatureEnum.CssTextOverflow;

            if (value.Equals("css-text-shadow"))
                return FeatureEnum.CssTextShadow;

            if (value.Equals("css-text-transform"))
                return FeatureEnum.CssTextTransform;

            if (value.Equals("css-text-underline-offset"))
                return FeatureEnum.CssTextUnderlineOffset;

            if (value.Equals("css-transform"))
                return FeatureEnum.CssTransform;

            if (value.Equals("css-vertical-align"))
                return FeatureEnum.CssVerticalAlign;

            if (value.Equals("css-visibility"))
                return FeatureEnum.CssVisibility;

            if (value.Equals("css-white-space"))
                return FeatureEnum.CssWhiteSpace;

            if (value.Equals("css-width"))
                return FeatureEnum.CssWidth;

            if (value.Equals("css-word-break"))
                return FeatureEnum.CssWordBreak;

            if (value.Equals("css-writing-mode"))
                return FeatureEnum.CssWritingMode;

            if (value.Equals("css-z-index"))
                return FeatureEnum.CssZIndex;

            if (value.Equals("html-abbr"))
                return FeatureEnum.HtmlAbbr;

            if (value.Equals("html-address"))
                return FeatureEnum.HtmlAddress;

            if (value.Equals("html-align"))
                return FeatureEnum.HtmlAlign;

            if (value.Equals("html-anchor-links"))
                return FeatureEnum.HtmlAnchorLinks;

            if (value.Equals("html-aria-describedby"))
                return FeatureEnum.HtmlAriaDescribedby;

            if (value.Equals("html-aria-hidden"))
                return FeatureEnum.HtmlAriaHidden;

            if (value.Equals("html-aria-label"))
                return FeatureEnum.HtmlAriaLabel;

            if (value.Equals("html-aria-labelledby"))
                return FeatureEnum.HtmlAriaLabelledby;

            if (value.Equals("html-aria-live"))
                return FeatureEnum.HtmlAriaLive;

            if (value.Equals("html-audio"))
                return FeatureEnum.HtmlAudio;

            if (value.Equals("html-background"))
                return FeatureEnum.HtmlBackground;

            if (value.Equals("html-base"))
                return FeatureEnum.HtmlBase;

            if (value.Equals("html-blockquote"))
                return FeatureEnum.HtmlBlockquote;

            if (value.Equals("html-body"))
                return FeatureEnum.HtmlBody;

            if (value.Equals("html-button-reset"))
                return FeatureEnum.HtmlButtonReset;

            if (value.Equals("html-button-submit"))
                return FeatureEnum.HtmlButtonSubmit;

            if (value.Equals("html-code"))
                return FeatureEnum.HtmlCode;

            if (value.Equals("html-del"))
                return FeatureEnum.HtmlDel;

            if (value.Equals("html-dfn"))
                return FeatureEnum.HtmlDfn;

            if (value.Equals("html-dialog"))
                return FeatureEnum.HtmlDialog;

            if (value.Equals("html-dir"))
                return FeatureEnum.HtmlDir;

            if (value.Equals("html-div"))
                return FeatureEnum.HtmlDiv;

            if (value.Equals("html-doctype"))
                return FeatureEnum.HtmlDoctype;

            if (value.Equals("html-form"))
                return FeatureEnum.HtmlForm;

            if (value.Equals("html-h1-h6"))
                return FeatureEnum.HtmlH1H6;

            if (value.Equals("html-height"))
                return FeatureEnum.HtmlHeight;

            if (value.Equals("html-image-maps"))
                return FeatureEnum.HtmlImageMaps;

            if (value.Equals("html-input-checkbox"))
                return FeatureEnum.HtmlInputCheckbox;

            if (value.Equals("html-input-hidden"))
                return FeatureEnum.HtmlInputHidden;

            if (value.Equals("html-input-radio"))
                return FeatureEnum.HtmlInputRadio;

            if (value.Equals("html-input-reset"))
                return FeatureEnum.HtmlInputReset;

            if (value.Equals("html-input-submit"))
                return FeatureEnum.HtmlInputSubmit;

            if (value.Equals("html-input-text"))
                return FeatureEnum.HtmlInputText;

            if (value.Equals("html-lang"))
                return FeatureEnum.HtmlLang;

            if (value.Equals("html-link"))
                return FeatureEnum.HtmlLink;

            if (value.Equals("html-lists"))
                return FeatureEnum.HtmlLists;

            if (value.Equals("html-loading-attribute"))
                return FeatureEnum.HtmlLoadingAttribute;

            if (value.Equals("html-mailto-links"))
                return FeatureEnum.HtmlMailtoLinks;

            if (value.Equals("html-marquee"))
                return FeatureEnum.HtmlMarquee;

            if (value.Equals("html-meter"))
                return FeatureEnum.HtmlMeter;

            if (value.Equals("html-object"))
                return FeatureEnum.HtmlObject;

            if (value.Equals("html-p"))
                return FeatureEnum.HtmlP;

            if (value.Equals("html-picture"))
                return FeatureEnum.HtmlPicture;

            if (value.Equals("html-pre"))
                return FeatureEnum.HtmlPre;

            if (value.Equals("html-progress"))
                return FeatureEnum.HtmlProgress;

            if (value.Equals("html-required"))
                return FeatureEnum.HtmlRequired;

            if (value.Equals("html-role"))
                return FeatureEnum.HtmlRole;

            if (value.Equals("html-rp"))
                return FeatureEnum.HtmlRp;

            if (value.Equals("html-rt"))
                return FeatureEnum.HtmlRt;

            if (value.Equals("html-ruby"))
                return FeatureEnum.HtmlRuby;

            if (value.Equals("html-select"))
                return FeatureEnum.HtmlSelect;

            if (value.Equals("html-semantics"))
                return FeatureEnum.HtmlSemantics;

            if (value.Equals("html-small"))
                return FeatureEnum.HtmlSmall;

            if (value.Equals("html-span"))
                return FeatureEnum.HtmlSpan;

            if (value.Equals("html-srcset"))
                return FeatureEnum.HtmlSrcset;

            if (value.Equals("html-strike"))
                return FeatureEnum.HtmlStrike;

            if (value.Equals("html-strong"))
                return FeatureEnum.HtmlStrong;

            if (value.Equals("html-style"))
                return FeatureEnum.HtmlStyle;

            if (value.Equals("html-svg"))
                return FeatureEnum.HtmlSvg;

            if (value.Equals("html-table"))
                return FeatureEnum.HtmlTable;

            if (value.Equals("html-target"))
                return FeatureEnum.HtmlTarget;

            if (value.Equals("html-textarea"))
                return FeatureEnum.HtmlTextarea;

            if (value.Equals("html-valign"))
                return FeatureEnum.HtmlValign;

            if (value.Equals("html-video"))
                return FeatureEnum.HtmlVideo;

            if (value.Equals("html-wbr"))
                return FeatureEnum.HtmlWbr;

            if (value.Equals("html-width"))
                return FeatureEnum.HtmlWidth;

            if (value.Equals("image-avif"))
                return FeatureEnum.ImageAvif;

            if (value.Equals("image-base64"))
                return FeatureEnum.ImageBase64;

            if (value.Equals("image-bmp"))
                return FeatureEnum.ImageBmp;

            if (value.Equals("image-gif"))
                return FeatureEnum.ImageGif;

            if (value.Equals("image-ico"))
                return FeatureEnum.ImageIco;

            if (value.Equals("image-jpg"))
                return FeatureEnum.ImageJpg;

            if (value.Equals("image-png"))
                return FeatureEnum.ImagePng;

            if (value.Equals("image-svg"))
                return FeatureEnum.ImageSvg;

            if (value.Equals("image-webp"))
                return FeatureEnum.ImageWebp;

            if (value.Equals("unsupported"))
                return FeatureEnum.Unsupported;

            throw new NotImplementedException($"Could not convert value to type FeatureEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FeatureEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FeatureEnum? FeatureEnumFromStringOrDefault(string value)
        {
            if (value.Equals("amp"))
                return FeatureEnum.Amp;

            if (value.Equals("css-accent-color"))
                return FeatureEnum.CssAccentColor;

            if (value.Equals("css-align-items"))
                return FeatureEnum.CssAlignItems;

            if (value.Equals("css-animation"))
                return FeatureEnum.CssAnimation;

            if (value.Equals("css-aspect-ratio"))
                return FeatureEnum.CssAspectRatio;

            if (value.Equals("css-at-font-face"))
                return FeatureEnum.CssAtFontFace;

            if (value.Equals("css-at-import"))
                return FeatureEnum.CssAtImport;

            if (value.Equals("css-at-keyframes"))
                return FeatureEnum.CssAtKeyframes;

            if (value.Equals("css-at-media"))
                return FeatureEnum.CssAtMedia;

            if (value.Equals("css-at-supports"))
                return FeatureEnum.CssAtSupports;

            if (value.Equals("css-background-blend-mode"))
                return FeatureEnum.CssBackgroundBlendMode;

            if (value.Equals("css-background-clip"))
                return FeatureEnum.CssBackgroundClip;

            if (value.Equals("css-background-color"))
                return FeatureEnum.CssBackgroundColor;

            if (value.Equals("css-background-image"))
                return FeatureEnum.CssBackgroundImage;

            if (value.Equals("css-background-origin"))
                return FeatureEnum.CssBackgroundOrigin;

            if (value.Equals("css-background-position"))
                return FeatureEnum.CssBackgroundPosition;

            if (value.Equals("css-background-repeat"))
                return FeatureEnum.CssBackgroundRepeat;

            if (value.Equals("css-background-size"))
                return FeatureEnum.CssBackgroundSize;

            if (value.Equals("css-background"))
                return FeatureEnum.CssBackground;

            if (value.Equals("css-block-inline-size"))
                return FeatureEnum.CssBlockInlineSize;

            if (value.Equals("css-border-image"))
                return FeatureEnum.CssBorderImage;

            if (value.Equals("css-border-inline-block-individual"))
                return FeatureEnum.CssBorderInlineBlockIndividual;

            if (value.Equals("css-border-inline-block-longhand"))
                return FeatureEnum.CssBorderInlineBlockLonghand;

            if (value.Equals("css-border-inline-block"))
                return FeatureEnum.CssBorderInlineBlock;

            if (value.Equals("css-border-radius-logical"))
                return FeatureEnum.CssBorderRadiusLogical;

            if (value.Equals("css-border-radius"))
                return FeatureEnum.CssBorderRadius;

            if (value.Equals("css-border"))
                return FeatureEnum.CssBorder;

            if (value.Equals("css-box-shadow"))
                return FeatureEnum.CssBoxShadow;

            if (value.Equals("css-box-sizing"))
                return FeatureEnum.CssBoxSizing;

            if (value.Equals("css-caption-side"))
                return FeatureEnum.CssCaptionSide;

            if (value.Equals("css-clip-path"))
                return FeatureEnum.CssClipPath;

            if (value.Equals("css-column-count"))
                return FeatureEnum.CssColumnCount;

            if (value.Equals("css-column-layout-properties"))
                return FeatureEnum.CssColumnLayoutProperties;

            if (value.Equals("css-direction"))
                return FeatureEnum.CssDirection;

            if (value.Equals("css-display-flex"))
                return FeatureEnum.CssDisplayFlex;

            if (value.Equals("css-display-grid"))
                return FeatureEnum.CssDisplayGrid;

            if (value.Equals("css-display-none"))
                return FeatureEnum.CssDisplayNone;

            if (value.Equals("css-display"))
                return FeatureEnum.CssDisplay;

            if (value.Equals("css-filter"))
                return FeatureEnum.CssFilter;

            if (value.Equals("css-flex-direction"))
                return FeatureEnum.CssFlexDirection;

            if (value.Equals("css-flex-wrap"))
                return FeatureEnum.CssFlexWrap;

            if (value.Equals("css-float"))
                return FeatureEnum.CssFloat;

            if (value.Equals("css-font-kerning"))
                return FeatureEnum.CssFontKerning;

            if (value.Equals("css-font-weight"))
                return FeatureEnum.CssFontWeight;

            if (value.Equals("css-font"))
                return FeatureEnum.CssFont;

            if (value.Equals("css-gap"))
                return FeatureEnum.CssGap;

            if (value.Equals("css-grid-template"))
                return FeatureEnum.CssGridTemplate;

            if (value.Equals("css-height"))
                return FeatureEnum.CssHeight;

            if (value.Equals("css-hyphens"))
                return FeatureEnum.CssHyphens;

            if (value.Equals("css-inline-size"))
                return FeatureEnum.CssInlineSize;

            if (value.Equals("css-justify-content"))
                return FeatureEnum.CssJustifyContent;

            if (value.Equals("css-left-right-top-bottom"))
                return FeatureEnum.CssLeftRightTopBottom;

            if (value.Equals("css-letter-spacing"))
                return FeatureEnum.CssLetterSpacing;

            if (value.Equals("css-line-height"))
                return FeatureEnum.CssLineHeight;

            if (value.Equals("css-list-style-image"))
                return FeatureEnum.CssListStyleImage;

            if (value.Equals("css-list-style-position"))
                return FeatureEnum.CssListStylePosition;

            if (value.Equals("css-list-style-type"))
                return FeatureEnum.CssListStyleType;

            if (value.Equals("css-list-style"))
                return FeatureEnum.CssListStyle;

            if (value.Equals("css-margin-block-start-end"))
                return FeatureEnum.CssMarginBlockStartEnd;

            if (value.Equals("css-margin-inline-block"))
                return FeatureEnum.CssMarginInlineBlock;

            if (value.Equals("css-margin-inline-start-end"))
                return FeatureEnum.CssMarginInlineStartEnd;

            if (value.Equals("css-margin-inline"))
                return FeatureEnum.CssMarginInline;

            if (value.Equals("css-margin"))
                return FeatureEnum.CssMargin;

            if (value.Equals("css-max-block-size"))
                return FeatureEnum.CssMaxBlockSize;

            if (value.Equals("css-max-height"))
                return FeatureEnum.CssMaxHeight;

            if (value.Equals("css-max-width"))
                return FeatureEnum.CssMaxWidth;

            if (value.Equals("css-min-height"))
                return FeatureEnum.CssMinHeight;

            if (value.Equals("css-min-inline-size"))
                return FeatureEnum.CssMinInlineSize;

            if (value.Equals("css-min-width"))
                return FeatureEnum.CssMinWidth;

            if (value.Equals("css-mix-blend-mode"))
                return FeatureEnum.CssMixBlendMode;

            if (value.Equals("css-object-fit"))
                return FeatureEnum.CssObjectFit;

            if (value.Equals("css-object-position"))
                return FeatureEnum.CssObjectPosition;

            if (value.Equals("css-opacity"))
                return FeatureEnum.CssOpacity;

            if (value.Equals("css-outline-offset"))
                return FeatureEnum.CssOutlineOffset;

            if (value.Equals("css-outline"))
                return FeatureEnum.CssOutline;

            if (value.Equals("css-overflow-wrap"))
                return FeatureEnum.CssOverflowWrap;

            if (value.Equals("css-overflow"))
                return FeatureEnum.CssOverflow;

            if (value.Equals("css-padding-block-start-end"))
                return FeatureEnum.CssPaddingBlockStartEnd;

            if (value.Equals("css-padding-inline-block"))
                return FeatureEnum.CssPaddingInlineBlock;

            if (value.Equals("css-padding-inline-start-end"))
                return FeatureEnum.CssPaddingInlineStartEnd;

            if (value.Equals("css-padding"))
                return FeatureEnum.CssPadding;

            if (value.Equals("css-position"))
                return FeatureEnum.CssPosition;

            if (value.Equals("css-tab-size"))
                return FeatureEnum.CssTabSize;

            if (value.Equals("css-table-layout"))
                return FeatureEnum.CssTableLayout;

            if (value.Equals("css-text-align-last"))
                return FeatureEnum.CssTextAlignLast;

            if (value.Equals("css-text-align"))
                return FeatureEnum.CssTextAlign;

            if (value.Equals("css-text-decoration-color"))
                return FeatureEnum.CssTextDecorationColor;

            if (value.Equals("css-text-decoration-thickness"))
                return FeatureEnum.CssTextDecorationThickness;

            if (value.Equals("css-text-decoration"))
                return FeatureEnum.CssTextDecoration;

            if (value.Equals("css-text-emphasis-position"))
                return FeatureEnum.CssTextEmphasisPosition;

            if (value.Equals("css-text-emphasis"))
                return FeatureEnum.CssTextEmphasis;

            if (value.Equals("css-text-indent"))
                return FeatureEnum.CssTextIndent;

            if (value.Equals("css-text-overflow"))
                return FeatureEnum.CssTextOverflow;

            if (value.Equals("css-text-shadow"))
                return FeatureEnum.CssTextShadow;

            if (value.Equals("css-text-transform"))
                return FeatureEnum.CssTextTransform;

            if (value.Equals("css-text-underline-offset"))
                return FeatureEnum.CssTextUnderlineOffset;

            if (value.Equals("css-transform"))
                return FeatureEnum.CssTransform;

            if (value.Equals("css-vertical-align"))
                return FeatureEnum.CssVerticalAlign;

            if (value.Equals("css-visibility"))
                return FeatureEnum.CssVisibility;

            if (value.Equals("css-white-space"))
                return FeatureEnum.CssWhiteSpace;

            if (value.Equals("css-width"))
                return FeatureEnum.CssWidth;

            if (value.Equals("css-word-break"))
                return FeatureEnum.CssWordBreak;

            if (value.Equals("css-writing-mode"))
                return FeatureEnum.CssWritingMode;

            if (value.Equals("css-z-index"))
                return FeatureEnum.CssZIndex;

            if (value.Equals("html-abbr"))
                return FeatureEnum.HtmlAbbr;

            if (value.Equals("html-address"))
                return FeatureEnum.HtmlAddress;

            if (value.Equals("html-align"))
                return FeatureEnum.HtmlAlign;

            if (value.Equals("html-anchor-links"))
                return FeatureEnum.HtmlAnchorLinks;

            if (value.Equals("html-aria-describedby"))
                return FeatureEnum.HtmlAriaDescribedby;

            if (value.Equals("html-aria-hidden"))
                return FeatureEnum.HtmlAriaHidden;

            if (value.Equals("html-aria-label"))
                return FeatureEnum.HtmlAriaLabel;

            if (value.Equals("html-aria-labelledby"))
                return FeatureEnum.HtmlAriaLabelledby;

            if (value.Equals("html-aria-live"))
                return FeatureEnum.HtmlAriaLive;

            if (value.Equals("html-audio"))
                return FeatureEnum.HtmlAudio;

            if (value.Equals("html-background"))
                return FeatureEnum.HtmlBackground;

            if (value.Equals("html-base"))
                return FeatureEnum.HtmlBase;

            if (value.Equals("html-blockquote"))
                return FeatureEnum.HtmlBlockquote;

            if (value.Equals("html-body"))
                return FeatureEnum.HtmlBody;

            if (value.Equals("html-button-reset"))
                return FeatureEnum.HtmlButtonReset;

            if (value.Equals("html-button-submit"))
                return FeatureEnum.HtmlButtonSubmit;

            if (value.Equals("html-code"))
                return FeatureEnum.HtmlCode;

            if (value.Equals("html-del"))
                return FeatureEnum.HtmlDel;

            if (value.Equals("html-dfn"))
                return FeatureEnum.HtmlDfn;

            if (value.Equals("html-dialog"))
                return FeatureEnum.HtmlDialog;

            if (value.Equals("html-dir"))
                return FeatureEnum.HtmlDir;

            if (value.Equals("html-div"))
                return FeatureEnum.HtmlDiv;

            if (value.Equals("html-doctype"))
                return FeatureEnum.HtmlDoctype;

            if (value.Equals("html-form"))
                return FeatureEnum.HtmlForm;

            if (value.Equals("html-h1-h6"))
                return FeatureEnum.HtmlH1H6;

            if (value.Equals("html-height"))
                return FeatureEnum.HtmlHeight;

            if (value.Equals("html-image-maps"))
                return FeatureEnum.HtmlImageMaps;

            if (value.Equals("html-input-checkbox"))
                return FeatureEnum.HtmlInputCheckbox;

            if (value.Equals("html-input-hidden"))
                return FeatureEnum.HtmlInputHidden;

            if (value.Equals("html-input-radio"))
                return FeatureEnum.HtmlInputRadio;

            if (value.Equals("html-input-reset"))
                return FeatureEnum.HtmlInputReset;

            if (value.Equals("html-input-submit"))
                return FeatureEnum.HtmlInputSubmit;

            if (value.Equals("html-input-text"))
                return FeatureEnum.HtmlInputText;

            if (value.Equals("html-lang"))
                return FeatureEnum.HtmlLang;

            if (value.Equals("html-link"))
                return FeatureEnum.HtmlLink;

            if (value.Equals("html-lists"))
                return FeatureEnum.HtmlLists;

            if (value.Equals("html-loading-attribute"))
                return FeatureEnum.HtmlLoadingAttribute;

            if (value.Equals("html-mailto-links"))
                return FeatureEnum.HtmlMailtoLinks;

            if (value.Equals("html-marquee"))
                return FeatureEnum.HtmlMarquee;

            if (value.Equals("html-meter"))
                return FeatureEnum.HtmlMeter;

            if (value.Equals("html-object"))
                return FeatureEnum.HtmlObject;

            if (value.Equals("html-p"))
                return FeatureEnum.HtmlP;

            if (value.Equals("html-picture"))
                return FeatureEnum.HtmlPicture;

            if (value.Equals("html-pre"))
                return FeatureEnum.HtmlPre;

            if (value.Equals("html-progress"))
                return FeatureEnum.HtmlProgress;

            if (value.Equals("html-required"))
                return FeatureEnum.HtmlRequired;

            if (value.Equals("html-role"))
                return FeatureEnum.HtmlRole;

            if (value.Equals("html-rp"))
                return FeatureEnum.HtmlRp;

            if (value.Equals("html-rt"))
                return FeatureEnum.HtmlRt;

            if (value.Equals("html-ruby"))
                return FeatureEnum.HtmlRuby;

            if (value.Equals("html-select"))
                return FeatureEnum.HtmlSelect;

            if (value.Equals("html-semantics"))
                return FeatureEnum.HtmlSemantics;

            if (value.Equals("html-small"))
                return FeatureEnum.HtmlSmall;

            if (value.Equals("html-span"))
                return FeatureEnum.HtmlSpan;

            if (value.Equals("html-srcset"))
                return FeatureEnum.HtmlSrcset;

            if (value.Equals("html-strike"))
                return FeatureEnum.HtmlStrike;

            if (value.Equals("html-strong"))
                return FeatureEnum.HtmlStrong;

            if (value.Equals("html-style"))
                return FeatureEnum.HtmlStyle;

            if (value.Equals("html-svg"))
                return FeatureEnum.HtmlSvg;

            if (value.Equals("html-table"))
                return FeatureEnum.HtmlTable;

            if (value.Equals("html-target"))
                return FeatureEnum.HtmlTarget;

            if (value.Equals("html-textarea"))
                return FeatureEnum.HtmlTextarea;

            if (value.Equals("html-valign"))
                return FeatureEnum.HtmlValign;

            if (value.Equals("html-video"))
                return FeatureEnum.HtmlVideo;

            if (value.Equals("html-wbr"))
                return FeatureEnum.HtmlWbr;

            if (value.Equals("html-width"))
                return FeatureEnum.HtmlWidth;

            if (value.Equals("image-avif"))
                return FeatureEnum.ImageAvif;

            if (value.Equals("image-base64"))
                return FeatureEnum.ImageBase64;

            if (value.Equals("image-bmp"))
                return FeatureEnum.ImageBmp;

            if (value.Equals("image-gif"))
                return FeatureEnum.ImageGif;

            if (value.Equals("image-ico"))
                return FeatureEnum.ImageIco;

            if (value.Equals("image-jpg"))
                return FeatureEnum.ImageJpg;

            if (value.Equals("image-png"))
                return FeatureEnum.ImagePng;

            if (value.Equals("image-svg"))
                return FeatureEnum.ImageSvg;

            if (value.Equals("image-webp"))
                return FeatureEnum.ImageWebp;

            if (value.Equals("unsupported"))
                return FeatureEnum.Unsupported;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FeatureEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FeatureEnumToJsonValue(FeatureEnum value)
        {
            if (value == FeatureEnum.Amp)
                return "amp";

            if (value == FeatureEnum.CssAccentColor)
                return "css-accent-color";

            if (value == FeatureEnum.CssAlignItems)
                return "css-align-items";

            if (value == FeatureEnum.CssAnimation)
                return "css-animation";

            if (value == FeatureEnum.CssAspectRatio)
                return "css-aspect-ratio";

            if (value == FeatureEnum.CssAtFontFace)
                return "css-at-font-face";

            if (value == FeatureEnum.CssAtImport)
                return "css-at-import";

            if (value == FeatureEnum.CssAtKeyframes)
                return "css-at-keyframes";

            if (value == FeatureEnum.CssAtMedia)
                return "css-at-media";

            if (value == FeatureEnum.CssAtSupports)
                return "css-at-supports";

            if (value == FeatureEnum.CssBackgroundBlendMode)
                return "css-background-blend-mode";

            if (value == FeatureEnum.CssBackgroundClip)
                return "css-background-clip";

            if (value == FeatureEnum.CssBackgroundColor)
                return "css-background-color";

            if (value == FeatureEnum.CssBackgroundImage)
                return "css-background-image";

            if (value == FeatureEnum.CssBackgroundOrigin)
                return "css-background-origin";

            if (value == FeatureEnum.CssBackgroundPosition)
                return "css-background-position";

            if (value == FeatureEnum.CssBackgroundRepeat)
                return "css-background-repeat";

            if (value == FeatureEnum.CssBackgroundSize)
                return "css-background-size";

            if (value == FeatureEnum.CssBackground)
                return "css-background";

            if (value == FeatureEnum.CssBlockInlineSize)
                return "css-block-inline-size";

            if (value == FeatureEnum.CssBorderImage)
                return "css-border-image";

            if (value == FeatureEnum.CssBorderInlineBlockIndividual)
                return "css-border-inline-block-individual";

            if (value == FeatureEnum.CssBorderInlineBlockLonghand)
                return "css-border-inline-block-longhand";

            if (value == FeatureEnum.CssBorderInlineBlock)
                return "css-border-inline-block";

            if (value == FeatureEnum.CssBorderRadiusLogical)
                return "css-border-radius-logical";

            if (value == FeatureEnum.CssBorderRadius)
                return "css-border-radius";

            if (value == FeatureEnum.CssBorder)
                return "css-border";

            if (value == FeatureEnum.CssBoxShadow)
                return "css-box-shadow";

            if (value == FeatureEnum.CssBoxSizing)
                return "css-box-sizing";

            if (value == FeatureEnum.CssCaptionSide)
                return "css-caption-side";

            if (value == FeatureEnum.CssClipPath)
                return "css-clip-path";

            if (value == FeatureEnum.CssColumnCount)
                return "css-column-count";

            if (value == FeatureEnum.CssColumnLayoutProperties)
                return "css-column-layout-properties";

            if (value == FeatureEnum.CssDirection)
                return "css-direction";

            if (value == FeatureEnum.CssDisplayFlex)
                return "css-display-flex";

            if (value == FeatureEnum.CssDisplayGrid)
                return "css-display-grid";

            if (value == FeatureEnum.CssDisplayNone)
                return "css-display-none";

            if (value == FeatureEnum.CssDisplay)
                return "css-display";

            if (value == FeatureEnum.CssFilter)
                return "css-filter";

            if (value == FeatureEnum.CssFlexDirection)
                return "css-flex-direction";

            if (value == FeatureEnum.CssFlexWrap)
                return "css-flex-wrap";

            if (value == FeatureEnum.CssFloat)
                return "css-float";

            if (value == FeatureEnum.CssFontKerning)
                return "css-font-kerning";

            if (value == FeatureEnum.CssFontWeight)
                return "css-font-weight";

            if (value == FeatureEnum.CssFont)
                return "css-font";

            if (value == FeatureEnum.CssGap)
                return "css-gap";

            if (value == FeatureEnum.CssGridTemplate)
                return "css-grid-template";

            if (value == FeatureEnum.CssHeight)
                return "css-height";

            if (value == FeatureEnum.CssHyphens)
                return "css-hyphens";

            if (value == FeatureEnum.CssInlineSize)
                return "css-inline-size";

            if (value == FeatureEnum.CssJustifyContent)
                return "css-justify-content";

            if (value == FeatureEnum.CssLeftRightTopBottom)
                return "css-left-right-top-bottom";

            if (value == FeatureEnum.CssLetterSpacing)
                return "css-letter-spacing";

            if (value == FeatureEnum.CssLineHeight)
                return "css-line-height";

            if (value == FeatureEnum.CssListStyleImage)
                return "css-list-style-image";

            if (value == FeatureEnum.CssListStylePosition)
                return "css-list-style-position";

            if (value == FeatureEnum.CssListStyleType)
                return "css-list-style-type";

            if (value == FeatureEnum.CssListStyle)
                return "css-list-style";

            if (value == FeatureEnum.CssMarginBlockStartEnd)
                return "css-margin-block-start-end";

            if (value == FeatureEnum.CssMarginInlineBlock)
                return "css-margin-inline-block";

            if (value == FeatureEnum.CssMarginInlineStartEnd)
                return "css-margin-inline-start-end";

            if (value == FeatureEnum.CssMarginInline)
                return "css-margin-inline";

            if (value == FeatureEnum.CssMargin)
                return "css-margin";

            if (value == FeatureEnum.CssMaxBlockSize)
                return "css-max-block-size";

            if (value == FeatureEnum.CssMaxHeight)
                return "css-max-height";

            if (value == FeatureEnum.CssMaxWidth)
                return "css-max-width";

            if (value == FeatureEnum.CssMinHeight)
                return "css-min-height";

            if (value == FeatureEnum.CssMinInlineSize)
                return "css-min-inline-size";

            if (value == FeatureEnum.CssMinWidth)
                return "css-min-width";

            if (value == FeatureEnum.CssMixBlendMode)
                return "css-mix-blend-mode";

            if (value == FeatureEnum.CssObjectFit)
                return "css-object-fit";

            if (value == FeatureEnum.CssObjectPosition)
                return "css-object-position";

            if (value == FeatureEnum.CssOpacity)
                return "css-opacity";

            if (value == FeatureEnum.CssOutlineOffset)
                return "css-outline-offset";

            if (value == FeatureEnum.CssOutline)
                return "css-outline";

            if (value == FeatureEnum.CssOverflowWrap)
                return "css-overflow-wrap";

            if (value == FeatureEnum.CssOverflow)
                return "css-overflow";

            if (value == FeatureEnum.CssPaddingBlockStartEnd)
                return "css-padding-block-start-end";

            if (value == FeatureEnum.CssPaddingInlineBlock)
                return "css-padding-inline-block";

            if (value == FeatureEnum.CssPaddingInlineStartEnd)
                return "css-padding-inline-start-end";

            if (value == FeatureEnum.CssPadding)
                return "css-padding";

            if (value == FeatureEnum.CssPosition)
                return "css-position";

            if (value == FeatureEnum.CssTabSize)
                return "css-tab-size";

            if (value == FeatureEnum.CssTableLayout)
                return "css-table-layout";

            if (value == FeatureEnum.CssTextAlignLast)
                return "css-text-align-last";

            if (value == FeatureEnum.CssTextAlign)
                return "css-text-align";

            if (value == FeatureEnum.CssTextDecorationColor)
                return "css-text-decoration-color";

            if (value == FeatureEnum.CssTextDecorationThickness)
                return "css-text-decoration-thickness";

            if (value == FeatureEnum.CssTextDecoration)
                return "css-text-decoration";

            if (value == FeatureEnum.CssTextEmphasisPosition)
                return "css-text-emphasis-position";

            if (value == FeatureEnum.CssTextEmphasis)
                return "css-text-emphasis";

            if (value == FeatureEnum.CssTextIndent)
                return "css-text-indent";

            if (value == FeatureEnum.CssTextOverflow)
                return "css-text-overflow";

            if (value == FeatureEnum.CssTextShadow)
                return "css-text-shadow";

            if (value == FeatureEnum.CssTextTransform)
                return "css-text-transform";

            if (value == FeatureEnum.CssTextUnderlineOffset)
                return "css-text-underline-offset";

            if (value == FeatureEnum.CssTransform)
                return "css-transform";

            if (value == FeatureEnum.CssVerticalAlign)
                return "css-vertical-align";

            if (value == FeatureEnum.CssVisibility)
                return "css-visibility";

            if (value == FeatureEnum.CssWhiteSpace)
                return "css-white-space";

            if (value == FeatureEnum.CssWidth)
                return "css-width";

            if (value == FeatureEnum.CssWordBreak)
                return "css-word-break";

            if (value == FeatureEnum.CssWritingMode)
                return "css-writing-mode";

            if (value == FeatureEnum.CssZIndex)
                return "css-z-index";

            if (value == FeatureEnum.HtmlAbbr)
                return "html-abbr";

            if (value == FeatureEnum.HtmlAddress)
                return "html-address";

            if (value == FeatureEnum.HtmlAlign)
                return "html-align";

            if (value == FeatureEnum.HtmlAnchorLinks)
                return "html-anchor-links";

            if (value == FeatureEnum.HtmlAriaDescribedby)
                return "html-aria-describedby";

            if (value == FeatureEnum.HtmlAriaHidden)
                return "html-aria-hidden";

            if (value == FeatureEnum.HtmlAriaLabel)
                return "html-aria-label";

            if (value == FeatureEnum.HtmlAriaLabelledby)
                return "html-aria-labelledby";

            if (value == FeatureEnum.HtmlAriaLive)
                return "html-aria-live";

            if (value == FeatureEnum.HtmlAudio)
                return "html-audio";

            if (value == FeatureEnum.HtmlBackground)
                return "html-background";

            if (value == FeatureEnum.HtmlBase)
                return "html-base";

            if (value == FeatureEnum.HtmlBlockquote)
                return "html-blockquote";

            if (value == FeatureEnum.HtmlBody)
                return "html-body";

            if (value == FeatureEnum.HtmlButtonReset)
                return "html-button-reset";

            if (value == FeatureEnum.HtmlButtonSubmit)
                return "html-button-submit";

            if (value == FeatureEnum.HtmlCode)
                return "html-code";

            if (value == FeatureEnum.HtmlDel)
                return "html-del";

            if (value == FeatureEnum.HtmlDfn)
                return "html-dfn";

            if (value == FeatureEnum.HtmlDialog)
                return "html-dialog";

            if (value == FeatureEnum.HtmlDir)
                return "html-dir";

            if (value == FeatureEnum.HtmlDiv)
                return "html-div";

            if (value == FeatureEnum.HtmlDoctype)
                return "html-doctype";

            if (value == FeatureEnum.HtmlForm)
                return "html-form";

            if (value == FeatureEnum.HtmlH1H6)
                return "html-h1-h6";

            if (value == FeatureEnum.HtmlHeight)
                return "html-height";

            if (value == FeatureEnum.HtmlImageMaps)
                return "html-image-maps";

            if (value == FeatureEnum.HtmlInputCheckbox)
                return "html-input-checkbox";

            if (value == FeatureEnum.HtmlInputHidden)
                return "html-input-hidden";

            if (value == FeatureEnum.HtmlInputRadio)
                return "html-input-radio";

            if (value == FeatureEnum.HtmlInputReset)
                return "html-input-reset";

            if (value == FeatureEnum.HtmlInputSubmit)
                return "html-input-submit";

            if (value == FeatureEnum.HtmlInputText)
                return "html-input-text";

            if (value == FeatureEnum.HtmlLang)
                return "html-lang";

            if (value == FeatureEnum.HtmlLink)
                return "html-link";

            if (value == FeatureEnum.HtmlLists)
                return "html-lists";

            if (value == FeatureEnum.HtmlLoadingAttribute)
                return "html-loading-attribute";

            if (value == FeatureEnum.HtmlMailtoLinks)
                return "html-mailto-links";

            if (value == FeatureEnum.HtmlMarquee)
                return "html-marquee";

            if (value == FeatureEnum.HtmlMeter)
                return "html-meter";

            if (value == FeatureEnum.HtmlObject)
                return "html-object";

            if (value == FeatureEnum.HtmlP)
                return "html-p";

            if (value == FeatureEnum.HtmlPicture)
                return "html-picture";

            if (value == FeatureEnum.HtmlPre)
                return "html-pre";

            if (value == FeatureEnum.HtmlProgress)
                return "html-progress";

            if (value == FeatureEnum.HtmlRequired)
                return "html-required";

            if (value == FeatureEnum.HtmlRole)
                return "html-role";

            if (value == FeatureEnum.HtmlRp)
                return "html-rp";

            if (value == FeatureEnum.HtmlRt)
                return "html-rt";

            if (value == FeatureEnum.HtmlRuby)
                return "html-ruby";

            if (value == FeatureEnum.HtmlSelect)
                return "html-select";

            if (value == FeatureEnum.HtmlSemantics)
                return "html-semantics";

            if (value == FeatureEnum.HtmlSmall)
                return "html-small";

            if (value == FeatureEnum.HtmlSpan)
                return "html-span";

            if (value == FeatureEnum.HtmlSrcset)
                return "html-srcset";

            if (value == FeatureEnum.HtmlStrike)
                return "html-strike";

            if (value == FeatureEnum.HtmlStrong)
                return "html-strong";

            if (value == FeatureEnum.HtmlStyle)
                return "html-style";

            if (value == FeatureEnum.HtmlSvg)
                return "html-svg";

            if (value == FeatureEnum.HtmlTable)
                return "html-table";

            if (value == FeatureEnum.HtmlTarget)
                return "html-target";

            if (value == FeatureEnum.HtmlTextarea)
                return "html-textarea";

            if (value == FeatureEnum.HtmlValign)
                return "html-valign";

            if (value == FeatureEnum.HtmlVideo)
                return "html-video";

            if (value == FeatureEnum.HtmlWbr)
                return "html-wbr";

            if (value == FeatureEnum.HtmlWidth)
                return "html-width";

            if (value == FeatureEnum.ImageAvif)
                return "image-avif";

            if (value == FeatureEnum.ImageBase64)
                return "image-base64";

            if (value == FeatureEnum.ImageBmp)
                return "image-bmp";

            if (value == FeatureEnum.ImageGif)
                return "image-gif";

            if (value == FeatureEnum.ImageIco)
                return "image-ico";

            if (value == FeatureEnum.ImageJpg)
                return "image-jpg";

            if (value == FeatureEnum.ImagePng)
                return "image-png";

            if (value == FeatureEnum.ImageSvg)
                return "image-svg";

            if (value == FeatureEnum.ImageWebp)
                return "image-webp";

            if (value == FeatureEnum.Unsupported)
                return "unsupported";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Feature
        /// </summary>
        [JsonPropertyName("feature")]
        public FeatureEnum Feature { get; set; }

        /// <summary>
        /// Defines Statuses
        /// </summary>
        public enum StatusesEnum
        {
            /// <summary>
            /// Enum SUPPORTED for value: SUPPORTED
            /// </summary>
            SUPPORTED = 1,

            /// <summary>
            /// Enum PARTIAL for value: PARTIAL
            /// </summary>
            PARTIAL = 2,

            /// <summary>
            /// Enum NOTSUPPORTED for value: NOT_SUPPORTED
            /// </summary>
            NOTSUPPORTED = 3,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            UNKNOWN = 4
        }

        /// <summary>
        /// Returns a <see cref="StatusesEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusesEnum StatusesEnumFromString(string value)
        {
            if (value.Equals("SUPPORTED"))
                return StatusesEnum.SUPPORTED;

            if (value.Equals("PARTIAL"))
                return StatusesEnum.PARTIAL;

            if (value.Equals("NOT_SUPPORTED"))
                return StatusesEnum.NOTSUPPORTED;

            if (value.Equals("UNKNOWN"))
                return StatusesEnum.UNKNOWN;

            throw new NotImplementedException($"Could not convert value to type StatusesEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusesEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusesEnum? StatusesEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SUPPORTED"))
                return StatusesEnum.SUPPORTED;

            if (value.Equals("PARTIAL"))
                return StatusesEnum.PARTIAL;

            if (value.Equals("NOT_SUPPORTED"))
                return StatusesEnum.NOTSUPPORTED;

            if (value.Equals("UNKNOWN"))
                return StatusesEnum.UNKNOWN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusesEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusesEnumToJsonValue(StatusesEnum value)
        {
            if (value == StatusesEnum.SUPPORTED)
                return "SUPPORTED";

            if (value == StatusesEnum.PARTIAL)
                return "PARTIAL";

            if (value == StatusesEnum.NOTSUPPORTED)
                return "NOT_SUPPORTED";

            if (value == StatusesEnum.UNKNOWN)
                return "UNKNOWN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Defines Category
        /// </summary>
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Css for value: css
            /// </summary>
            Css = 1,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            Html = 2,

            /// <summary>
            /// Enum Image for value: image
            /// </summary>
            Image = 3,

            /// <summary>
            /// Enum Others for value: others
            /// </summary>
            Others = 4
        }

        /// <summary>
        /// Returns a <see cref="CategoryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CategoryEnum CategoryEnumFromString(string value)
        {
            if (value.Equals("css"))
                return CategoryEnum.Css;

            if (value.Equals("html"))
                return CategoryEnum.Html;

            if (value.Equals("image"))
                return CategoryEnum.Image;

            if (value.Equals("others"))
                return CategoryEnum.Others;

            throw new NotImplementedException($"Could not convert value to type CategoryEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CategoryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CategoryEnum? CategoryEnumFromStringOrDefault(string value)
        {
            if (value.Equals("css"))
                return CategoryEnum.Css;

            if (value.Equals("html"))
                return CategoryEnum.Html;

            if (value.Equals("image"))
                return CategoryEnum.Image;

            if (value.Equals("others"))
                return CategoryEnum.Others;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CategoryEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CategoryEnumToJsonValue(CategoryEnum? value)
        {
            if (value == CategoryEnum.Css)
                return "css";

            if (value == CategoryEnum.Html)
                return "html";

            if (value == CategoryEnum.Image)
                return "image";

            if (value == CategoryEnum.Others)
                return "others";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CategoryEnum?> CategoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [JsonPropertyName("category")]
        public CategoryEnum? Category { get { return this.CategoryOption; } set { this.CategoryOption = new Option<CategoryEnum?>(value); } }

        /// <summary>
        /// Gets or Sets Statuses
        /// </summary>
        [JsonPropertyName("statuses")]
        public List<EmailFeatureOverview.StatusesEnum> Statuses { get; set; }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [JsonPropertyName("notes")]
        public string Notes { get { return this.NotesOption; } set { this.NotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NotesNumbers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> NotesNumbersOption { get; private set; }

        /// <summary>
        /// Gets or Sets NotesNumbers
        /// </summary>
        [JsonPropertyName("notesNumbers")]
        public Dictionary<string, string> NotesNumbers { get { return this.NotesNumbersOption; } set { this.NotesNumbersOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of FeatureStatistics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EmailFeatureFamilyStatistics>> FeatureStatisticsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FeatureStatistics
        /// </summary>
        [JsonPropertyName("featureStatistics")]
        public List<EmailFeatureFamilyStatistics> FeatureStatistics { get { return this.FeatureStatisticsOption; } set { this.FeatureStatisticsOption = new Option<List<EmailFeatureFamilyStatistics>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailFeatureOverview {\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NotesNumbers: ").Append(NotesNumbers).Append("\n");
            sb.Append("  FeatureStatistics: ").Append(FeatureStatistics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailFeatureOverview" />
    /// </summary>
    public class EmailFeatureOverviewJsonConverter : JsonConverter<EmailFeatureOverview>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailFeatureOverview" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailFeatureOverview Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EmailFeatureOverview.FeatureEnum?> feature = default;
            Option<List<EmailFeatureOverview.StatusesEnum>> statuses = default;
            Option<string> title = default;
            Option<string> description = default;
            Option<EmailFeatureOverview.CategoryEnum?> category = default;
            Option<string> notes = default;
            Option<Dictionary<string, string>> notesNumbers = default;
            Option<List<EmailFeatureFamilyStatistics>> featureStatistics = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "feature":
                            string featureRawValue = utf8JsonReader.GetString();
                            if (featureRawValue != null)
                                feature = new Option<EmailFeatureOverview.FeatureEnum?>(EmailFeatureOverview.FeatureEnumFromStringOrDefault(featureRawValue));
                            break;
                        case "statuses":
                            statuses = new Option<List<EmailFeatureOverview.StatusesEnum>>(JsonSerializer.Deserialize<List<EmailFeatureOverview.StatusesEnum>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "title":
                            title = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "category":
                            string categoryRawValue = utf8JsonReader.GetString();
                            if (categoryRawValue != null)
                                category = new Option<EmailFeatureOverview.CategoryEnum?>(EmailFeatureOverview.CategoryEnumFromStringOrDefault(categoryRawValue));
                            break;
                        case "notes":
                            notes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "notesNumbers":
                            notesNumbers = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "featureStatistics":
                            featureStatistics = new Option<List<EmailFeatureFamilyStatistics>>(JsonSerializer.Deserialize<List<EmailFeatureFamilyStatistics>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!feature.IsSet)
                throw new ArgumentException("Property is required for class EmailFeatureOverview.", nameof(feature));

            if (!statuses.IsSet)
                throw new ArgumentException("Property is required for class EmailFeatureOverview.", nameof(statuses));

            if (feature.IsSet && feature.Value == null)
                throw new ArgumentNullException(nameof(feature), "Property is not nullable for class EmailFeatureOverview.");

            if (statuses.IsSet && statuses.Value == null)
                throw new ArgumentNullException(nameof(statuses), "Property is not nullable for class EmailFeatureOverview.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class EmailFeatureOverview.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class EmailFeatureOverview.");

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category), "Property is not nullable for class EmailFeatureOverview.");

            if (notes.IsSet && notes.Value == null)
                throw new ArgumentNullException(nameof(notes), "Property is not nullable for class EmailFeatureOverview.");

            if (notesNumbers.IsSet && notesNumbers.Value == null)
                throw new ArgumentNullException(nameof(notesNumbers), "Property is not nullable for class EmailFeatureOverview.");

            if (featureStatistics.IsSet && featureStatistics.Value == null)
                throw new ArgumentNullException(nameof(featureStatistics), "Property is not nullable for class EmailFeatureOverview.");

            return new EmailFeatureOverview(feature.Value.Value, statuses.Value, title, description, category, notes, notesNumbers, featureStatistics);
        }

        /// <summary>
        /// Serializes a <see cref="EmailFeatureOverview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailFeatureOverview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailFeatureOverview emailFeatureOverview, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailFeatureOverview, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailFeatureOverview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailFeatureOverview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailFeatureOverview emailFeatureOverview, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailFeatureOverview.Statuses == null)
                throw new ArgumentNullException(nameof(emailFeatureOverview.Statuses), "Property is required for class EmailFeatureOverview.");

            if (emailFeatureOverview.TitleOption.IsSet && emailFeatureOverview.Title == null)
                throw new ArgumentNullException(nameof(emailFeatureOverview.Title), "Property is required for class EmailFeatureOverview.");

            if (emailFeatureOverview.DescriptionOption.IsSet && emailFeatureOverview.Description == null)
                throw new ArgumentNullException(nameof(emailFeatureOverview.Description), "Property is required for class EmailFeatureOverview.");

            if (emailFeatureOverview.NotesOption.IsSet && emailFeatureOverview.Notes == null)
                throw new ArgumentNullException(nameof(emailFeatureOverview.Notes), "Property is required for class EmailFeatureOverview.");

            if (emailFeatureOverview.NotesNumbersOption.IsSet && emailFeatureOverview.NotesNumbers == null)
                throw new ArgumentNullException(nameof(emailFeatureOverview.NotesNumbers), "Property is required for class EmailFeatureOverview.");

            if (emailFeatureOverview.FeatureStatisticsOption.IsSet && emailFeatureOverview.FeatureStatistics == null)
                throw new ArgumentNullException(nameof(emailFeatureOverview.FeatureStatistics), "Property is required for class EmailFeatureOverview.");

            var featureRawValue = EmailFeatureOverview.FeatureEnumToJsonValue(emailFeatureOverview.Feature);
            writer.WriteString("feature", featureRawValue);
            writer.WritePropertyName("statuses");
            JsonSerializer.Serialize(writer, emailFeatureOverview.Statuses, jsonSerializerOptions);
            if (emailFeatureOverview.TitleOption.IsSet)
                writer.WriteString("title", emailFeatureOverview.Title);

            if (emailFeatureOverview.DescriptionOption.IsSet)
                writer.WriteString("description", emailFeatureOverview.Description);

            var categoryRawValue = EmailFeatureOverview.CategoryEnumToJsonValue(emailFeatureOverview.CategoryOption.Value.Value);
            writer.WriteString("category", categoryRawValue);
            if (emailFeatureOverview.NotesOption.IsSet)
                writer.WriteString("notes", emailFeatureOverview.Notes);

            if (emailFeatureOverview.NotesNumbersOption.IsSet)
            {
                writer.WritePropertyName("notesNumbers");
                JsonSerializer.Serialize(writer, emailFeatureOverview.NotesNumbers, jsonSerializerOptions);
            }
            if (emailFeatureOverview.FeatureStatisticsOption.IsSet)
            {
                writer.WritePropertyName("featureStatistics");
                JsonSerializer.Serialize(writer, emailFeatureOverview.FeatureStatistics, jsonSerializerOptions);
            }
        }
    }
}
