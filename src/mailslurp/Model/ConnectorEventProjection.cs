/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorEventProjection
    /// </summary>
    [DataContract(Name = "ConnectorEventProjection")]
    public partial class ConnectorEventProjection : IValidatableObject
    {
        /// <summary>
        /// Defines EventType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeEnum
        {
            /// <summary>
            /// Enum SEND for value: SEND
            /// </summary>
            [EnumMember(Value = "SEND")]
            SEND = 1,

            /// <summary>
            /// Enum SYNC for value: SYNC
            /// </summary>
            [EnumMember(Value = "SYNC")]
            SYNC = 2
        }


        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "eventType", IsRequired = true, EmitDefaultValue = true)]
        public EventTypeEnum EventType { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 1,

            /// <summary>
            /// Enum INTERNALERROR for value: INTERNAL_ERROR
            /// </summary>
            [EnumMember(Value = "INTERNAL_ERROR")]
            INTERNALERROR = 2,

            /// <summary>
            /// Enum SUBSCRIPTIONERROR for value: SUBSCRIPTION_ERROR
            /// </summary>
            [EnumMember(Value = "SUBSCRIPTION_ERROR")]
            SUBSCRIPTIONERROR = 3,

            /// <summary>
            /// Enum CONNECTIONERROR for value: CONNECTION_ERROR
            /// </summary>
            [EnumMember(Value = "CONNECTION_ERROR")]
            CONNECTIONERROR = 4,

            /// <summary>
            /// Enum NOTFOUND for value: NOT_FOUND
            /// </summary>
            [EnumMember(Value = "NOT_FOUND")]
            NOTFOUND = 5
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorEventProjection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectorEventProjection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorEventProjection" /> class.
        /// </summary>
        /// <param name="eventType">eventType (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="connectorId">connectorId (required).</param>
        /// <param name="seen">seen.</param>
        /// <param name="message">message.</param>
        /// <param name="id">id.</param>
        /// <param name="size">size (required).</param>
        /// <param name="status">status (required).</param>
        public ConnectorEventProjection(EventTypeEnum eventType = default, DateTime createdAt = default, Guid connectorId = default, bool seen = default, string message = default, Guid id = default, long size = default, StatusEnum status = default)
        {
            this.EventType = eventType;
            this.CreatedAt = createdAt;
            this.ConnectorId = connectorId;
            this.Size = size;
            this.Status = status;
            this.Seen = seen;
            this.Message = message;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorId
        /// </summary>
        [DataMember(Name = "connectorId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ConnectorId { get; set; }

        /// <summary>
        /// Gets or Sets Seen
        /// </summary>
        [DataMember(Name = "seen", EmitDefaultValue = true)]
        public bool Seen { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public long Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorEventProjection {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ConnectorId: ").Append(ConnectorId).Append("\n");
            sb.Append("  Seen: ").Append(Seen).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
