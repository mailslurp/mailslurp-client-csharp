/* 
 * MailSlurp API
 *
 * For documentation see [developer guide](https://www.mailslurp.com/developers). [Create an account](https://app.mailslurp.com) in the MailSlurp Dashboard to [view your API Key](https://app). For all bugs, feature requests, or help please [see support](https://www.mailslurp.com/support/).
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// CreateWebhookOptions
    /// </summary>
    [DataContract]
    public partial class CreateWebhookOptions :  IEquatable<CreateWebhookOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWebhookOptions" /> class.
        /// </summary>
        /// <param name="basicAuth">basicAuth.</param>
        /// <param name="url">Public URL (including protocol) that MailSlurp can post WebhookNotificationObjects to when an email is received.</param>
        /// <param name="name">name.</param>
        public CreateWebhookOptions(BasicAuthOptions basicAuth = default(BasicAuthOptions), string url = default(string), string name = default(string))
        {
            this.BasicAuth = basicAuth;
            this.Url = url;
            this.Name = name;
        }
        
        /// <summary>
        /// Gets or Sets BasicAuth
        /// </summary>
        [DataMember(Name="basicAuth", EmitDefaultValue=false)]
        public BasicAuthOptions BasicAuth { get; set; }

        /// <summary>
        /// Public URL (including protocol) that MailSlurp can post WebhookNotificationObjects to when an email is received
        /// </summary>
        /// <value>Public URL (including protocol) that MailSlurp can post WebhookNotificationObjects to when an email is received</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateWebhookOptions {\n");
            sb.Append("  BasicAuth: ").Append(BasicAuth).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateWebhookOptions);
        }

        /// <summary>
        /// Returns true if CreateWebhookOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateWebhookOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateWebhookOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BasicAuth == input.BasicAuth ||
                    (this.BasicAuth != null &&
                    this.BasicAuth.Equals(input.BasicAuth))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BasicAuth != null)
                    hashCode = hashCode * 59 + this.BasicAuth.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
