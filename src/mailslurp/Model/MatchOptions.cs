// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Optional filter for matching emails based on fields. For instance filter results to only include emails whose &#x60;SUBJECT&#x60; value does &#x60;CONTAIN&#x60; given match value. An example payload would be &#x60;{ matches: [{ field: &#39;SUBJECT&#39;, should: &#39;CONTAIN&#39;, value: &#39;Welcome&#39; }] }&#x60;. You can also pass conditions such as &#x60;HAS_ATTACHMENT&#x60;. If you wish to extract regex matches inside the email content see the &#x60;getEmailContentMatch&#x60; method in the EmailController.
    /// </summary>
    public partial class MatchOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchOptions" /> class.
        /// </summary>
        /// <param name="matches">Zero or more match options such as &#x60;{ field: &#39;SUBJECT&#39;, should: &#39;CONTAIN&#39;, value: &#39;Welcome&#39; }&#x60;. Options are additive so if one does not match the email is excluded from results</param>
        /// <param name="conditions">Zero or more conditions such as &#x60;{ condition: &#39;HAS_ATTACHMENTS&#39;, value: &#39;TRUE&#39; }&#x60;. Note the values are the strings &#x60;TRUE|FALSE&#x60; not booleans.</param>
        [JsonConstructor]
        public MatchOptions(Option<List<MatchOption>> matches = default, Option<List<ConditionOption>> conditions = default)
        {
            MatchesOption = matches;
            ConditionsOption = conditions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Matches
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<MatchOption>> MatchesOption { get; private set; }

        /// <summary>
        /// Zero or more match options such as &#x60;{ field: &#39;SUBJECT&#39;, should: &#39;CONTAIN&#39;, value: &#39;Welcome&#39; }&#x60;. Options are additive so if one does not match the email is excluded from results
        /// </summary>
        /// <value>Zero or more match options such as &#x60;{ field: &#39;SUBJECT&#39;, should: &#39;CONTAIN&#39;, value: &#39;Welcome&#39; }&#x60;. Options are additive so if one does not match the email is excluded from results</value>
        [JsonPropertyName("matches")]
        public List<MatchOption> Matches { get { return this.MatchesOption; } set { this.MatchesOption = new Option<List<MatchOption>>(value); } }

        /// <summary>
        /// Used to track the state of Conditions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ConditionOption>> ConditionsOption { get; private set; }

        /// <summary>
        /// Zero or more conditions such as &#x60;{ condition: &#39;HAS_ATTACHMENTS&#39;, value: &#39;TRUE&#39; }&#x60;. Note the values are the strings &#x60;TRUE|FALSE&#x60; not booleans.
        /// </summary>
        /// <value>Zero or more conditions such as &#x60;{ condition: &#39;HAS_ATTACHMENTS&#39;, value: &#39;TRUE&#39; }&#x60;. Note the values are the strings &#x60;TRUE|FALSE&#x60; not booleans.</value>
        [JsonPropertyName("conditions")]
        public List<ConditionOption> Conditions { get { return this.ConditionsOption; } set { this.ConditionsOption = new Option<List<ConditionOption>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchOptions {\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MatchOptions" />
    /// </summary>
    public class MatchOptionsJsonConverter : JsonConverter<MatchOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="MatchOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MatchOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<MatchOption>> matches = default;
            Option<List<ConditionOption>> conditions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "matches":
                            matches = new Option<List<MatchOption>>(JsonSerializer.Deserialize<List<MatchOption>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "conditions":
                            conditions = new Option<List<ConditionOption>>(JsonSerializer.Deserialize<List<ConditionOption>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new MatchOptions(matches, conditions);
        }

        /// <summary>
        /// Serializes a <see cref="MatchOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="matchOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MatchOptions matchOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, matchOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MatchOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="matchOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MatchOptions matchOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (matchOptions.MatchesOption.IsSet)
                if (matchOptions.MatchesOption.Value != null)
                {
                    writer.WritePropertyName("matches");
                    JsonSerializer.Serialize(writer, matchOptions.Matches, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("matches");
            if (matchOptions.ConditionsOption.IsSet)
                if (matchOptions.ConditionsOption.Value != null)
                {
                    writer.WritePropertyName("conditions");
                    JsonSerializer.Serialize(writer, matchOptions.Conditions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("conditions");
        }
    }
}
