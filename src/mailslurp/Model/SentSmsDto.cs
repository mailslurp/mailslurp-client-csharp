// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// SentSmsDto
    /// </summary>
    public partial class SentSmsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SentSmsDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="phoneNumber">phoneNumber</param>
        /// <param name="fromNumber">fromNumber</param>
        /// <param name="toNumber">toNumber</param>
        /// <param name="body">body</param>
        /// <param name="sid">sid</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="replyToSid">replyToSid</param>
        /// <param name="replyToId">replyToId</param>
        [JsonConstructor]
        public SentSmsDto(Guid id, Guid userId, Guid phoneNumber, string fromNumber, string toNumber, string body, string sid, DateTime createdAt, DateTime updatedAt, Option<string> replyToSid = default, Option<Guid?> replyToId = default)
        {
            Id = id;
            UserId = userId;
            PhoneNumber = phoneNumber;
            FromNumber = fromNumber;
            ToNumber = toNumber;
            Body = body;
            Sid = sid;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            ReplyToSidOption = replyToSid;
            ReplyToIdOption = replyToId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [JsonPropertyName("phoneNumber")]
        public Guid PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets FromNumber
        /// </summary>
        [JsonPropertyName("fromNumber")]
        public string FromNumber { get; set; }

        /// <summary>
        /// Gets or Sets ToNumber
        /// </summary>
        [JsonPropertyName("toNumber")]
        public string ToNumber { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Sid
        /// </summary>
        [JsonPropertyName("sid")]
        public string Sid { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of ReplyToSid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReplyToSidOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReplyToSid
        /// </summary>
        [JsonPropertyName("replyToSid")]
        public string ReplyToSid { get { return this.ReplyToSidOption; } set { this.ReplyToSidOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReplyToId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ReplyToIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReplyToId
        /// </summary>
        [JsonPropertyName("replyToId")]
        public Guid? ReplyToId { get { return this.ReplyToIdOption; } set { this.ReplyToIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SentSmsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FromNumber: ").Append(FromNumber).Append("\n");
            sb.Append("  ToNumber: ").Append(ToNumber).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ReplyToSid: ").Append(ReplyToSid).Append("\n");
            sb.Append("  ReplyToId: ").Append(ReplyToId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SentSmsDto" />
    /// </summary>
    public class SentSmsDtoJsonConverter : JsonConverter<SentSmsDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SentSmsDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SentSmsDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<Guid?> phoneNumber = default;
            Option<string> fromNumber = default;
            Option<string> toNumber = default;
            Option<string> body = default;
            Option<string> sid = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string> replyToSid = default;
            Option<Guid?> replyToId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "phoneNumber":
                            phoneNumber = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "fromNumber":
                            fromNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "toNumber":
                            toNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sid":
                            sid = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "replyToSid":
                            replyToSid = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "replyToId":
                            replyToId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SentSmsDto.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class SentSmsDto.", nameof(userId));

            if (!phoneNumber.IsSet)
                throw new ArgumentException("Property is required for class SentSmsDto.", nameof(phoneNumber));

            if (!fromNumber.IsSet)
                throw new ArgumentException("Property is required for class SentSmsDto.", nameof(fromNumber));

            if (!toNumber.IsSet)
                throw new ArgumentException("Property is required for class SentSmsDto.", nameof(toNumber));

            if (!body.IsSet)
                throw new ArgumentException("Property is required for class SentSmsDto.", nameof(body));

            if (!sid.IsSet)
                throw new ArgumentException("Property is required for class SentSmsDto.", nameof(sid));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class SentSmsDto.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class SentSmsDto.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SentSmsDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class SentSmsDto.");

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class SentSmsDto.");

            if (fromNumber.IsSet && fromNumber.Value == null)
                throw new ArgumentNullException(nameof(fromNumber), "Property is not nullable for class SentSmsDto.");

            if (toNumber.IsSet && toNumber.Value == null)
                throw new ArgumentNullException(nameof(toNumber), "Property is not nullable for class SentSmsDto.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class SentSmsDto.");

            if (sid.IsSet && sid.Value == null)
                throw new ArgumentNullException(nameof(sid), "Property is not nullable for class SentSmsDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SentSmsDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class SentSmsDto.");

            if (replyToSid.IsSet && replyToSid.Value == null)
                throw new ArgumentNullException(nameof(replyToSid), "Property is not nullable for class SentSmsDto.");

            if (replyToId.IsSet && replyToId.Value == null)
                throw new ArgumentNullException(nameof(replyToId), "Property is not nullable for class SentSmsDto.");

            return new SentSmsDto(id.Value.Value, userId.Value.Value, phoneNumber.Value.Value, fromNumber.Value, toNumber.Value, body.Value, sid.Value, createdAt.Value.Value, updatedAt.Value.Value, replyToSid, replyToId);
        }

        /// <summary>
        /// Serializes a <see cref="SentSmsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sentSmsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SentSmsDto sentSmsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sentSmsDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SentSmsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sentSmsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SentSmsDto sentSmsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sentSmsDto.FromNumber == null)
                throw new ArgumentNullException(nameof(sentSmsDto.FromNumber), "Property is required for class SentSmsDto.");

            if (sentSmsDto.ToNumber == null)
                throw new ArgumentNullException(nameof(sentSmsDto.ToNumber), "Property is required for class SentSmsDto.");

            if (sentSmsDto.Body == null)
                throw new ArgumentNullException(nameof(sentSmsDto.Body), "Property is required for class SentSmsDto.");

            if (sentSmsDto.Sid == null)
                throw new ArgumentNullException(nameof(sentSmsDto.Sid), "Property is required for class SentSmsDto.");

            if (sentSmsDto.ReplyToSidOption.IsSet && sentSmsDto.ReplyToSid == null)
                throw new ArgumentNullException(nameof(sentSmsDto.ReplyToSid), "Property is required for class SentSmsDto.");

            writer.WriteString("id", sentSmsDto.Id);

            writer.WriteString("userId", sentSmsDto.UserId);

            writer.WriteString("phoneNumber", sentSmsDto.PhoneNumber);

            writer.WriteString("fromNumber", sentSmsDto.FromNumber);

            writer.WriteString("toNumber", sentSmsDto.ToNumber);

            writer.WriteString("body", sentSmsDto.Body);

            writer.WriteString("sid", sentSmsDto.Sid);

            writer.WriteString("createdAt", sentSmsDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", sentSmsDto.UpdatedAt.ToString(UpdatedAtFormat));

            if (sentSmsDto.ReplyToSidOption.IsSet)
                writer.WriteString("replyToSid", sentSmsDto.ReplyToSid);

            if (sentSmsDto.ReplyToIdOption.IsSet)
                writer.WriteString("replyToId", sentSmsDto.ReplyToIdOption.Value.Value);
        }
    }
}
