// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// ConnectorEventDto
    /// </summary>
    public partial class ConnectorEventDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorEventDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="connectorId">connectorId</param>
        /// <param name="status">status</param>
        /// <param name="eventType">eventType</param>
        /// <param name="size">size</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="message">message</param>
        /// <param name="logs">logs</param>
        /// <param name="seen">seen</param>
        [JsonConstructor]
        public ConnectorEventDto(Guid id, Guid connectorId, StatusEnum status, EventTypeEnum eventType, long size, DateTime createdAt, Option<string> message = default, Option<string> logs = default, Option<bool?> seen = default)
        {
            Id = id;
            ConnectorId = connectorId;
            Status = status;
            EventType = eventType;
            Size = size;
            CreatedAt = createdAt;
            MessageOption = message;
            LogsOption = logs;
            SeenOption = seen;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            SUCCESS = 1,

            /// <summary>
            /// Enum INTERNALERROR for value: INTERNAL_ERROR
            /// </summary>
            INTERNALERROR = 2,

            /// <summary>
            /// Enum SUBSCRIPTIONERROR for value: SUBSCRIPTION_ERROR
            /// </summary>
            SUBSCRIPTIONERROR = 3,

            /// <summary>
            /// Enum CONNECTIONERROR for value: CONNECTION_ERROR
            /// </summary>
            CONNECTIONERROR = 4,

            /// <summary>
            /// Enum NOTFOUND for value: NOT_FOUND
            /// </summary>
            NOTFOUND = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("SUCCESS"))
                return StatusEnum.SUCCESS;

            if (value.Equals("INTERNAL_ERROR"))
                return StatusEnum.INTERNALERROR;

            if (value.Equals("SUBSCRIPTION_ERROR"))
                return StatusEnum.SUBSCRIPTIONERROR;

            if (value.Equals("CONNECTION_ERROR"))
                return StatusEnum.CONNECTIONERROR;

            if (value.Equals("NOT_FOUND"))
                return StatusEnum.NOTFOUND;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SUCCESS"))
                return StatusEnum.SUCCESS;

            if (value.Equals("INTERNAL_ERROR"))
                return StatusEnum.INTERNALERROR;

            if (value.Equals("SUBSCRIPTION_ERROR"))
                return StatusEnum.SUBSCRIPTIONERROR;

            if (value.Equals("CONNECTION_ERROR"))
                return StatusEnum.CONNECTIONERROR;

            if (value.Equals("NOT_FOUND"))
                return StatusEnum.NOTFOUND;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.SUCCESS)
                return "SUCCESS";

            if (value == StatusEnum.INTERNALERROR)
                return "INTERNAL_ERROR";

            if (value == StatusEnum.SUBSCRIPTIONERROR)
                return "SUBSCRIPTION_ERROR";

            if (value == StatusEnum.CONNECTIONERROR)
                return "CONNECTION_ERROR";

            if (value == StatusEnum.NOTFOUND)
                return "NOT_FOUND";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Defines EventType
        /// </summary>
        public enum EventTypeEnum
        {
            /// <summary>
            /// Enum SEND for value: SEND
            /// </summary>
            SEND = 1,

            /// <summary>
            /// Enum SYNC for value: SYNC
            /// </summary>
            SYNC = 2
        }

        /// <summary>
        /// Returns a <see cref="EventTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventTypeEnum EventTypeEnumFromString(string value)
        {
            if (value.Equals("SEND"))
                return EventTypeEnum.SEND;

            if (value.Equals("SYNC"))
                return EventTypeEnum.SYNC;

            throw new NotImplementedException($"Could not convert value to type EventTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventTypeEnum? EventTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SEND"))
                return EventTypeEnum.SEND;

            if (value.Equals("SYNC"))
                return EventTypeEnum.SYNC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventTypeEnumToJsonValue(EventTypeEnum value)
        {
            if (value == EventTypeEnum.SEND)
                return "SEND";

            if (value == EventTypeEnum.SYNC)
                return "SYNC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [JsonPropertyName("eventType")]
        public EventTypeEnum EventType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorId
        /// </summary>
        [JsonPropertyName("connectorId")]
        public Guid ConnectorId { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public long Size { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Logs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LogsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Logs
        /// </summary>
        [JsonPropertyName("logs")]
        public string Logs { get { return this.LogsOption; } set { this.LogsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Seen
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SeenOption { get; private set; }

        /// <summary>
        /// Gets or Sets Seen
        /// </summary>
        [JsonPropertyName("seen")]
        public bool? Seen { get { return this.SeenOption; } set { this.SeenOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectorEventDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConnectorId: ").Append(ConnectorId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Seen: ").Append(Seen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConnectorEventDto" />
    /// </summary>
    public class ConnectorEventDtoJsonConverter : JsonConverter<ConnectorEventDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ConnectorEventDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConnectorEventDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> connectorId = default;
            Option<ConnectorEventDto.StatusEnum?> status = default;
            Option<ConnectorEventDto.EventTypeEnum?> eventType = default;
            Option<long?> size = default;
            Option<DateTime?> createdAt = default;
            Option<string> message = default;
            Option<string> logs = default;
            Option<bool?> seen = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "connectorId":
                            connectorId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ConnectorEventDto.StatusEnum?>(ConnectorEventDto.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "eventType":
                            string eventTypeRawValue = utf8JsonReader.GetString();
                            if (eventTypeRawValue != null)
                                eventType = new Option<ConnectorEventDto.EventTypeEnum?>(ConnectorEventDto.EventTypeEnumFromStringOrDefault(eventTypeRawValue));
                            break;
                        case "size":
                            size = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "message":
                            message = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "logs":
                            logs = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "seen":
                            seen = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ConnectorEventDto.", nameof(id));

            if (!connectorId.IsSet)
                throw new ArgumentException("Property is required for class ConnectorEventDto.", nameof(connectorId));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class ConnectorEventDto.", nameof(status));

            if (!eventType.IsSet)
                throw new ArgumentException("Property is required for class ConnectorEventDto.", nameof(eventType));

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class ConnectorEventDto.", nameof(size));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class ConnectorEventDto.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ConnectorEventDto.");

            if (connectorId.IsSet && connectorId.Value == null)
                throw new ArgumentNullException(nameof(connectorId), "Property is not nullable for class ConnectorEventDto.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ConnectorEventDto.");

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType), "Property is not nullable for class ConnectorEventDto.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class ConnectorEventDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ConnectorEventDto.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class ConnectorEventDto.");

            if (logs.IsSet && logs.Value == null)
                throw new ArgumentNullException(nameof(logs), "Property is not nullable for class ConnectorEventDto.");

            if (seen.IsSet && seen.Value == null)
                throw new ArgumentNullException(nameof(seen), "Property is not nullable for class ConnectorEventDto.");

            return new ConnectorEventDto(id.Value.Value, connectorId.Value.Value, status.Value.Value, eventType.Value.Value, size.Value.Value, createdAt.Value.Value, message, logs, seen);
        }

        /// <summary>
        /// Serializes a <see cref="ConnectorEventDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectorEventDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConnectorEventDto connectorEventDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, connectorEventDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConnectorEventDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectorEventDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ConnectorEventDto connectorEventDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (connectorEventDto.MessageOption.IsSet && connectorEventDto.Message == null)
                throw new ArgumentNullException(nameof(connectorEventDto.Message), "Property is required for class ConnectorEventDto.");

            if (connectorEventDto.LogsOption.IsSet && connectorEventDto.Logs == null)
                throw new ArgumentNullException(nameof(connectorEventDto.Logs), "Property is required for class ConnectorEventDto.");

            writer.WriteString("id", connectorEventDto.Id);

            writer.WriteString("connectorId", connectorEventDto.ConnectorId);

            var statusRawValue = ConnectorEventDto.StatusEnumToJsonValue(connectorEventDto.Status);
            writer.WriteString("status", statusRawValue);
            var eventTypeRawValue = ConnectorEventDto.EventTypeEnumToJsonValue(connectorEventDto.EventType);
            writer.WriteString("eventType", eventTypeRawValue);
            writer.WriteNumber("size", connectorEventDto.Size);

            writer.WriteString("createdAt", connectorEventDto.CreatedAt.ToString(CreatedAtFormat));

            if (connectorEventDto.MessageOption.IsSet)
                writer.WriteString("message", connectorEventDto.Message);

            if (connectorEventDto.LogsOption.IsSet)
                writer.WriteString("logs", connectorEventDto.Logs);

            if (connectorEventDto.SeenOption.IsSet)
                writer.WriteBoolean("seen", connectorEventDto.SeenOption.Value.Value);
        }
    }
}
