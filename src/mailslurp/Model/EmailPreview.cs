// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Preview of an email message. For full message (including body and attachments) call the &#x60;getEmail&#x60; or other email endpoints with the provided email ID.
    /// </summary>
    public partial class EmailPreview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailPreview" /> class.
        /// </summary>
        /// <param name="id">ID of the email entity</param>
        /// <param name="createdAt">When was the email received by MailSlurp</param>
        /// <param name="read">Read flag. Has the email ever been viewed in the dashboard or fetched via the API with a hydrated body? If so the email is marked as read. Paginated results do not affect read status. Read status is different to email opened event as it depends on your own account accessing the email. Email opened is determined by tracking pixels sent to other uses if enable during sending. You can listened for both email read and email opened events using webhooks.</param>
        /// <param name="inboxId">ID of the inbox that received the email</param>
        /// <param name="domainId">ID of the domain that received the email</param>
        /// <param name="subject">The subject line of the email message as specified by SMTP subject header</param>
        /// <param name="to">List of &#x60;To&#x60; recipient email addresses that the email was addressed to. See recipients object for names.</param>
        /// <param name="from">Who the email was sent from. An email address - see fromName for the sender name.</param>
        /// <param name="bcc">List of &#x60;BCC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.</param>
        /// <param name="cc">List of &#x60;CC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.</param>
        /// <param name="attachments">List of IDs of attachments found in the email. Use these IDs with the Inbox and Email Controllers to download attachments and attachment meta data such as filesize, name, extension.</param>
        /// <param name="threadId">MailSlurp thread ID for email chain that enables lookup for In-Reply-To and References fields.</param>
        /// <param name="messageId">RFC 5322 Message-ID header value without angle brackets.</param>
        /// <param name="inReplyTo">Parsed value of In-Reply-To header. A Message-ID in a thread.</param>
        /// <param name="sender">sender</param>
        /// <param name="recipients">recipients</param>
        /// <param name="favourite">favourite</param>
        /// <param name="bodyPartContentTypes">bodyPartContentTypes</param>
        /// <param name="plusAddress">plusAddress</param>
        /// <param name="sizeBytes">sizeBytes</param>
        [JsonConstructor]
        public EmailPreview(Guid id, DateTime createdAt, bool read, Option<Guid?> inboxId = default, Option<Guid?> domainId = default, Option<string> subject = default, List<string> to = default, Option<string> from = default, Option<List<string>> bcc = default, Option<List<string>> cc = default, Option<List<string>> attachments = default, Option<Guid?> threadId = default, Option<string> messageId = default, Option<string> inReplyTo = default, Option<Sender> sender = default, Option<EmailRecipients> recipients = default, Option<bool?> favourite = default, Option<List<string>> bodyPartContentTypes = default, Option<Guid?> plusAddress = default, Option<long?> sizeBytes = default)
        {
            Id = id;
            CreatedAt = createdAt;
            Read = read;
            InboxIdOption = inboxId;
            DomainIdOption = domainId;
            SubjectOption = subject;
            To = to;
            FromOption = from;
            BccOption = bcc;
            CcOption = cc;
            AttachmentsOption = attachments;
            ThreadIdOption = threadId;
            MessageIdOption = messageId;
            InReplyToOption = inReplyTo;
            SenderOption = sender;
            RecipientsOption = recipients;
            FavouriteOption = favourite;
            BodyPartContentTypesOption = bodyPartContentTypes;
            PlusAddressOption = plusAddress;
            SizeBytesOption = sizeBytes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of the email entity
        /// </summary>
        /// <value>ID of the email entity</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// When was the email received by MailSlurp
        /// </summary>
        /// <value>When was the email received by MailSlurp</value>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Read flag. Has the email ever been viewed in the dashboard or fetched via the API with a hydrated body? If so the email is marked as read. Paginated results do not affect read status. Read status is different to email opened event as it depends on your own account accessing the email. Email opened is determined by tracking pixels sent to other uses if enable during sending. You can listened for both email read and email opened events using webhooks.
        /// </summary>
        /// <value>Read flag. Has the email ever been viewed in the dashboard or fetched via the API with a hydrated body? If so the email is marked as read. Paginated results do not affect read status. Read status is different to email opened event as it depends on your own account accessing the email. Email opened is determined by tracking pixels sent to other uses if enable during sending. You can listened for both email read and email opened events using webhooks.</value>
        [JsonPropertyName("read")]
        public bool Read { get; set; }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// ID of the inbox that received the email
        /// </summary>
        /// <value>ID of the inbox that received the email</value>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of DomainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DomainIdOption { get; private set; }

        /// <summary>
        /// ID of the domain that received the email
        /// </summary>
        /// <value>ID of the domain that received the email</value>
        [JsonPropertyName("domainId")]
        public Guid? DomainId { get { return this.DomainIdOption; } set { this.DomainIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// The subject line of the email message as specified by SMTP subject header
        /// </summary>
        /// <value>The subject line of the email message as specified by SMTP subject header</value>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// List of &#x60;To&#x60; recipient email addresses that the email was addressed to. See recipients object for names.
        /// </summary>
        /// <value>List of &#x60;To&#x60; recipient email addresses that the email was addressed to. See recipients object for names.</value>
        [JsonPropertyName("to")]
        public List<string> To { get; set; }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromOption { get; private set; }

        /// <summary>
        /// Who the email was sent from. An email address - see fromName for the sender name.
        /// </summary>
        /// <value>Who the email was sent from. An email address - see fromName for the sender name.</value>
        [JsonPropertyName("from")]
        public string From { get { return this.FromOption; } set { this.FromOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BccOption { get; private set; }

        /// <summary>
        /// List of &#x60;BCC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.
        /// </summary>
        /// <value>List of &#x60;BCC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.</value>
        [JsonPropertyName("bcc")]
        public List<string> Bcc { get { return this.BccOption; } set { this.BccOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CcOption { get; private set; }

        /// <summary>
        /// List of &#x60;CC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.
        /// </summary>
        /// <value>List of &#x60;CC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.</value>
        [JsonPropertyName("cc")]
        public List<string> Cc { get { return this.CcOption; } set { this.CcOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> AttachmentsOption { get; private set; }

        /// <summary>
        /// List of IDs of attachments found in the email. Use these IDs with the Inbox and Email Controllers to download attachments and attachment meta data such as filesize, name, extension.
        /// </summary>
        /// <value>List of IDs of attachments found in the email. Use these IDs with the Inbox and Email Controllers to download attachments and attachment meta data such as filesize, name, extension.</value>
        [JsonPropertyName("attachments")]
        public List<string> Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of ThreadId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ThreadIdOption { get; private set; }

        /// <summary>
        /// MailSlurp thread ID for email chain that enables lookup for In-Reply-To and References fields.
        /// </summary>
        /// <value>MailSlurp thread ID for email chain that enables lookup for In-Reply-To and References fields.</value>
        [JsonPropertyName("threadId")]
        public Guid? ThreadId { get { return this.ThreadIdOption; } set { this.ThreadIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of MessageId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageIdOption { get; private set; }

        /// <summary>
        /// RFC 5322 Message-ID header value without angle brackets.
        /// </summary>
        /// <value>RFC 5322 Message-ID header value without angle brackets.</value>
        [JsonPropertyName("messageId")]
        public string MessageId { get { return this.MessageIdOption; } set { this.MessageIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InReplyToOption { get; private set; }

        /// <summary>
        /// Parsed value of In-Reply-To header. A Message-ID in a thread.
        /// </summary>
        /// <value>Parsed value of In-Reply-To header. A Message-ID in a thread.</value>
        [JsonPropertyName("inReplyTo")]
        public string InReplyTo { get { return this.InReplyToOption; } set { this.InReplyToOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Sender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Sender> SenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public Sender Sender { get { return this.SenderOption; } set { this.SenderOption = new Option<Sender>(value); } }

        /// <summary>
        /// Used to track the state of Recipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmailRecipients> RecipientsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [JsonPropertyName("recipients")]
        public EmailRecipients Recipients { get { return this.RecipientsOption; } set { this.RecipientsOption = new Option<EmailRecipients>(value); } }

        /// <summary>
        /// Used to track the state of Favourite
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FavouriteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Favourite
        /// </summary>
        [JsonPropertyName("favourite")]
        public bool? Favourite { get { return this.FavouriteOption; } set { this.FavouriteOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of BodyPartContentTypes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> BodyPartContentTypesOption { get; private set; }

        /// <summary>
        /// Gets or Sets BodyPartContentTypes
        /// </summary>
        [JsonPropertyName("bodyPartContentTypes")]
        public List<string> BodyPartContentTypes { get { return this.BodyPartContentTypesOption; } set { this.BodyPartContentTypesOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of PlusAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> PlusAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets PlusAddress
        /// </summary>
        [JsonPropertyName("plusAddress")]
        public Guid? PlusAddress { get { return this.PlusAddressOption; } set { this.PlusAddressOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of SizeBytes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SizeBytesOption { get; private set; }

        /// <summary>
        /// Gets or Sets SizeBytes
        /// </summary>
        [JsonPropertyName("sizeBytes")]
        public long? SizeBytes { get { return this.SizeBytesOption; } set { this.SizeBytesOption = new Option<long?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailPreview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  InReplyTo: ").Append(InReplyTo).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Favourite: ").Append(Favourite).Append("\n");
            sb.Append("  BodyPartContentTypes: ").Append(BodyPartContentTypes).Append("\n");
            sb.Append("  PlusAddress: ").Append(PlusAddress).Append("\n");
            sb.Append("  SizeBytes: ").Append(SizeBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailPreview" />
    /// </summary>
    public class EmailPreviewJsonConverter : JsonConverter<EmailPreview>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EmailPreview" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailPreview Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<DateTime?> createdAt = default;
            Option<bool?> read = default;
            Option<Guid?> inboxId = default;
            Option<Guid?> domainId = default;
            Option<string> subject = default;
            Option<List<string>> to = default;
            Option<string> from = default;
            Option<List<string>> bcc = default;
            Option<List<string>> cc = default;
            Option<List<string>> attachments = default;
            Option<Guid?> threadId = default;
            Option<string> messageId = default;
            Option<string> inReplyTo = default;
            Option<Sender> sender = default;
            Option<EmailRecipients> recipients = default;
            Option<bool?> favourite = default;
            Option<List<string>> bodyPartContentTypes = default;
            Option<Guid?> plusAddress = default;
            Option<long?> sizeBytes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "read":
                            read = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "domainId":
                            domainId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "to":
                            to = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "from":
                            from = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bcc":
                            bcc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cc":
                            cc = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachments":
                            attachments = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "threadId":
                            threadId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "messageId":
                            messageId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "inReplyTo":
                            inReplyTo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sender":
                            sender = new Option<Sender>(JsonSerializer.Deserialize<Sender>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recipients":
                            recipients = new Option<EmailRecipients>(JsonSerializer.Deserialize<EmailRecipients>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "favourite":
                            favourite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "bodyPartContentTypes":
                            bodyPartContentTypes = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "plusAddress":
                            plusAddress = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "sizeBytes":
                            sizeBytes = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class EmailPreview.", nameof(id));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class EmailPreview.", nameof(createdAt));

            if (!read.IsSet)
                throw new ArgumentException("Property is required for class EmailPreview.", nameof(read));

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class EmailPreview.", nameof(to));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EmailPreview.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class EmailPreview.");

            if (read.IsSet && read.Value == null)
                throw new ArgumentNullException(nameof(read), "Property is not nullable for class EmailPreview.");

            return new EmailPreview(id.Value.Value, createdAt.Value.Value, read.Value.Value, inboxId, domainId, subject, to.Value, from, bcc, cc, attachments, threadId, messageId, inReplyTo, sender, recipients, favourite, bodyPartContentTypes, plusAddress, sizeBytes);
        }

        /// <summary>
        /// Serializes a <see cref="EmailPreview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailPreview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailPreview emailPreview, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailPreview, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailPreview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailPreview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailPreview emailPreview, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("id", emailPreview.Id);

            writer.WriteString("createdAt", emailPreview.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteBoolean("read", emailPreview.Read);

            if (emailPreview.InboxIdOption.IsSet)
                if (emailPreview.InboxIdOption.Value != null)
                    writer.WriteString("inboxId", emailPreview.InboxIdOption.Value.Value);
                else
                    writer.WriteNull("inboxId");

            if (emailPreview.DomainIdOption.IsSet)
                if (emailPreview.DomainIdOption.Value != null)
                    writer.WriteString("domainId", emailPreview.DomainIdOption.Value.Value);
                else
                    writer.WriteNull("domainId");

            if (emailPreview.SubjectOption.IsSet)
                if (emailPreview.SubjectOption.Value != null)
                    writer.WriteString("subject", emailPreview.Subject);
                else
                    writer.WriteNull("subject");

            if (emailPreview.To != null)
            {
                writer.WritePropertyName("to");
                JsonSerializer.Serialize(writer, emailPreview.To, jsonSerializerOptions);
            }
            else
                writer.WriteNull("to");
            if (emailPreview.FromOption.IsSet)
                if (emailPreview.FromOption.Value != null)
                    writer.WriteString("from", emailPreview.From);
                else
                    writer.WriteNull("from");

            if (emailPreview.BccOption.IsSet)
                if (emailPreview.BccOption.Value != null)
                {
                    writer.WritePropertyName("bcc");
                    JsonSerializer.Serialize(writer, emailPreview.Bcc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("bcc");
            if (emailPreview.CcOption.IsSet)
                if (emailPreview.CcOption.Value != null)
                {
                    writer.WritePropertyName("cc");
                    JsonSerializer.Serialize(writer, emailPreview.Cc, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("cc");
            if (emailPreview.AttachmentsOption.IsSet)
                if (emailPreview.AttachmentsOption.Value != null)
                {
                    writer.WritePropertyName("attachments");
                    JsonSerializer.Serialize(writer, emailPreview.Attachments, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachments");
            if (emailPreview.ThreadIdOption.IsSet)
                if (emailPreview.ThreadIdOption.Value != null)
                    writer.WriteString("threadId", emailPreview.ThreadIdOption.Value.Value);
                else
                    writer.WriteNull("threadId");

            if (emailPreview.MessageIdOption.IsSet)
                if (emailPreview.MessageIdOption.Value != null)
                    writer.WriteString("messageId", emailPreview.MessageId);
                else
                    writer.WriteNull("messageId");

            if (emailPreview.InReplyToOption.IsSet)
                if (emailPreview.InReplyToOption.Value != null)
                    writer.WriteString("inReplyTo", emailPreview.InReplyTo);
                else
                    writer.WriteNull("inReplyTo");

            if (emailPreview.SenderOption.IsSet)
                if (emailPreview.SenderOption.Value != null)
                {
                    writer.WritePropertyName("sender");
                    JsonSerializer.Serialize(writer, emailPreview.Sender, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sender");
            if (emailPreview.RecipientsOption.IsSet)
                if (emailPreview.RecipientsOption.Value != null)
                {
                    writer.WritePropertyName("recipients");
                    JsonSerializer.Serialize(writer, emailPreview.Recipients, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("recipients");
            if (emailPreview.FavouriteOption.IsSet)
                if (emailPreview.FavouriteOption.Value != null)
                    writer.WriteBoolean("favourite", emailPreview.FavouriteOption.Value.Value);
                else
                    writer.WriteNull("favourite");

            if (emailPreview.BodyPartContentTypesOption.IsSet)
                if (emailPreview.BodyPartContentTypesOption.Value != null)
                {
                    writer.WritePropertyName("bodyPartContentTypes");
                    JsonSerializer.Serialize(writer, emailPreview.BodyPartContentTypes, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("bodyPartContentTypes");
            if (emailPreview.PlusAddressOption.IsSet)
                if (emailPreview.PlusAddressOption.Value != null)
                    writer.WriteString("plusAddress", emailPreview.PlusAddressOption.Value.Value);
                else
                    writer.WriteNull("plusAddress");

            if (emailPreview.SizeBytesOption.IsSet)
                if (emailPreview.SizeBytesOption.Value != null)
                    writer.WriteNumber("sizeBytes", emailPreview.SizeBytesOption.Value.Value);
                else
                    writer.WriteNull("sizeBytes");
        }
    }
}
