// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Rules for inbox
    /// </summary>
    public partial class InboxRulesetDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboxRulesetDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="scope">scope</param>
        /// <param name="action">action</param>
        /// <param name="target">target</param>
        /// <param name="handler">handler</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="inboxId">inboxId</param>
        [JsonConstructor]
        public InboxRulesetDto(Guid id, ScopeEnum scope, ActionEnum action, string target, HandlerEnum handler, DateTime createdAt, Option<Guid?> inboxId = default)
        {
            Id = id;
            Scope = scope;
            Action = action;
            Target = target;
            Handler = handler;
            CreatedAt = createdAt;
            InboxIdOption = inboxId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Scope
        /// </summary>
        public enum ScopeEnum
        {
            /// <summary>
            /// Enum RECEIVINGEMAILS for value: RECEIVING_EMAILS
            /// </summary>
            RECEIVINGEMAILS = 1,

            /// <summary>
            /// Enum SENDINGEMAILS for value: SENDING_EMAILS
            /// </summary>
            SENDINGEMAILS = 2
        }

        /// <summary>
        /// Returns a <see cref="ScopeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ScopeEnum ScopeEnumFromString(string value)
        {
            if (value.Equals("RECEIVING_EMAILS"))
                return ScopeEnum.RECEIVINGEMAILS;

            if (value.Equals("SENDING_EMAILS"))
                return ScopeEnum.SENDINGEMAILS;

            throw new NotImplementedException($"Could not convert value to type ScopeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ScopeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ScopeEnum? ScopeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("RECEIVING_EMAILS"))
                return ScopeEnum.RECEIVINGEMAILS;

            if (value.Equals("SENDING_EMAILS"))
                return ScopeEnum.SENDINGEMAILS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ScopeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ScopeEnumToJsonValue(ScopeEnum value)
        {
            if (value == ScopeEnum.RECEIVINGEMAILS)
                return "RECEIVING_EMAILS";

            if (value == ScopeEnum.SENDINGEMAILS)
                return "SENDING_EMAILS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [JsonPropertyName("scope")]
        public ScopeEnum Scope { get; set; }

        /// <summary>
        /// Defines Action
        /// </summary>
        public enum ActionEnum
        {
            /// <summary>
            /// Enum BLOCK for value: BLOCK
            /// </summary>
            BLOCK = 1,

            /// <summary>
            /// Enum ALLOW for value: ALLOW
            /// </summary>
            ALLOW = 2,

            /// <summary>
            /// Enum FILTERREMOVE for value: FILTER_REMOVE
            /// </summary>
            FILTERREMOVE = 3
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionEnum ActionEnumFromString(string value)
        {
            if (value.Equals("BLOCK"))
                return ActionEnum.BLOCK;

            if (value.Equals("ALLOW"))
                return ActionEnum.ALLOW;

            if (value.Equals("FILTER_REMOVE"))
                return ActionEnum.FILTERREMOVE;

            throw new NotImplementedException($"Could not convert value to type ActionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionEnum? ActionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("BLOCK"))
                return ActionEnum.BLOCK;

            if (value.Equals("ALLOW"))
                return ActionEnum.ALLOW;

            if (value.Equals("FILTER_REMOVE"))
                return ActionEnum.FILTERREMOVE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionEnumToJsonValue(ActionEnum value)
        {
            if (value == ActionEnum.BLOCK)
                return "BLOCK";

            if (value == ActionEnum.ALLOW)
                return "ALLOW";

            if (value == ActionEnum.FILTERREMOVE)
                return "FILTER_REMOVE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [JsonPropertyName("action")]
        public ActionEnum Action { get; set; }

        /// <summary>
        /// Defines Handler
        /// </summary>
        public enum HandlerEnum
        {
            /// <summary>
            /// Enum EXCEPTION for value: EXCEPTION
            /// </summary>
            EXCEPTION = 1
        }

        /// <summary>
        /// Returns a <see cref="HandlerEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static HandlerEnum HandlerEnumFromString(string value)
        {
            if (value.Equals("EXCEPTION"))
                return HandlerEnum.EXCEPTION;

            throw new NotImplementedException($"Could not convert value to type HandlerEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="HandlerEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static HandlerEnum? HandlerEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EXCEPTION"))
                return HandlerEnum.EXCEPTION;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="HandlerEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string HandlerEnumToJsonValue(HandlerEnum value)
        {
            if (value == HandlerEnum.EXCEPTION)
                return "EXCEPTION";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Handler
        /// </summary>
        [JsonPropertyName("handler")]
        public HandlerEnum Handler { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [JsonPropertyName("target")]
        public string Target { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboxRulesetDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Handler: ").Append(Handler).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InboxRulesetDto" />
    /// </summary>
    public class InboxRulesetDtoJsonConverter : JsonConverter<InboxRulesetDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="InboxRulesetDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InboxRulesetDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<InboxRulesetDto.ScopeEnum?> scope = default;
            Option<InboxRulesetDto.ActionEnum?> action = default;
            Option<string> target = default;
            Option<InboxRulesetDto.HandlerEnum?> handler = default;
            Option<DateTime?> createdAt = default;
            Option<Guid?> inboxId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "scope":
                            string scopeRawValue = utf8JsonReader.GetString();
                            if (scopeRawValue != null)
                                scope = new Option<InboxRulesetDto.ScopeEnum?>(InboxRulesetDto.ScopeEnumFromStringOrDefault(scopeRawValue));
                            break;
                        case "action":
                            string actionRawValue = utf8JsonReader.GetString();
                            if (actionRawValue != null)
                                action = new Option<InboxRulesetDto.ActionEnum?>(InboxRulesetDto.ActionEnumFromStringOrDefault(actionRawValue));
                            break;
                        case "target":
                            target = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "handler":
                            string handlerRawValue = utf8JsonReader.GetString();
                            if (handlerRawValue != null)
                                handler = new Option<InboxRulesetDto.HandlerEnum?>(InboxRulesetDto.HandlerEnumFromStringOrDefault(handlerRawValue));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class InboxRulesetDto.", nameof(id));

            if (!scope.IsSet)
                throw new ArgumentException("Property is required for class InboxRulesetDto.", nameof(scope));

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class InboxRulesetDto.", nameof(action));

            if (!target.IsSet)
                throw new ArgumentException("Property is required for class InboxRulesetDto.", nameof(target));

            if (!handler.IsSet)
                throw new ArgumentException("Property is required for class InboxRulesetDto.", nameof(handler));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class InboxRulesetDto.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class InboxRulesetDto.");

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope), "Property is not nullable for class InboxRulesetDto.");

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class InboxRulesetDto.");

            if (target.IsSet && target.Value == null)
                throw new ArgumentNullException(nameof(target), "Property is not nullable for class InboxRulesetDto.");

            if (handler.IsSet && handler.Value == null)
                throw new ArgumentNullException(nameof(handler), "Property is not nullable for class InboxRulesetDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class InboxRulesetDto.");

            return new InboxRulesetDto(id.Value.Value, scope.Value.Value, action.Value.Value, target.Value, handler.Value.Value, createdAt.Value.Value, inboxId);
        }

        /// <summary>
        /// Serializes a <see cref="InboxRulesetDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxRulesetDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InboxRulesetDto inboxRulesetDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, inboxRulesetDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InboxRulesetDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inboxRulesetDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InboxRulesetDto inboxRulesetDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (inboxRulesetDto.Target == null)
                throw new ArgumentNullException(nameof(inboxRulesetDto.Target), "Property is required for class InboxRulesetDto.");

            writer.WriteString("id", inboxRulesetDto.Id);

            var scopeRawValue = InboxRulesetDto.ScopeEnumToJsonValue(inboxRulesetDto.Scope);
            writer.WriteString("scope", scopeRawValue);
            var actionRawValue = InboxRulesetDto.ActionEnumToJsonValue(inboxRulesetDto.Action);
            writer.WriteString("action", actionRawValue);
            writer.WriteString("target", inboxRulesetDto.Target);

            var handlerRawValue = InboxRulesetDto.HandlerEnumToJsonValue(inboxRulesetDto.Handler);
            writer.WriteString("handler", handlerRawValue);
            writer.WriteString("createdAt", inboxRulesetDto.CreatedAt.ToString(CreatedAtFormat));

            if (inboxRulesetDto.InboxIdOption.IsSet)
                if (inboxRulesetDto.InboxIdOption.Value != null)
                    writer.WriteString("inboxId", inboxRulesetDto.InboxIdOption.Value.Value);
                else
                    writer.WriteNull("inboxId");
        }
    }
}
