/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Rules for inbox
    /// </summary>
    [DataContract(Name = "InboxRulesetDto")]
    public partial class InboxRulesetDto : IValidatableObject
    {
        /// <summary>
        /// Defines Scope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            /// <summary>
            /// Enum RECEIVINGEMAILS for value: RECEIVING_EMAILS
            /// </summary>
            [EnumMember(Value = "RECEIVING_EMAILS")]
            RECEIVINGEMAILS = 1,

            /// <summary>
            /// Enum SENDINGEMAILS for value: SENDING_EMAILS
            /// </summary>
            [EnumMember(Value = "SENDING_EMAILS")]
            SENDINGEMAILS = 2
        }


        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", IsRequired = true, EmitDefaultValue = true)]
        public ScopeEnum Scope { get; set; }
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum BLOCK for value: BLOCK
            /// </summary>
            [EnumMember(Value = "BLOCK")]
            BLOCK = 1,

            /// <summary>
            /// Enum ALLOW for value: ALLOW
            /// </summary>
            [EnumMember(Value = "ALLOW")]
            ALLOW = 2,

            /// <summary>
            /// Enum FILTERREMOVE for value: FILTER_REMOVE
            /// </summary>
            [EnumMember(Value = "FILTER_REMOVE")]
            FILTERREMOVE = 3
        }


        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Defines Handler
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HandlerEnum
        {
            /// <summary>
            /// Enum EXCEPTION for value: EXCEPTION
            /// </summary>
            [EnumMember(Value = "EXCEPTION")]
            EXCEPTION = 1
        }


        /// <summary>
        /// Gets or Sets Handler
        /// </summary>
        [DataMember(Name = "handler", IsRequired = true, EmitDefaultValue = true)]
        public HandlerEnum Handler { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboxRulesetDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InboxRulesetDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboxRulesetDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="inboxId">inboxId.</param>
        /// <param name="scope">scope (required).</param>
        /// <param name="action">action (required).</param>
        /// <param name="target">target (required).</param>
        /// <param name="handler">handler (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        public InboxRulesetDto(Guid id = default, Guid? inboxId = default, ScopeEnum scope = default, ActionEnum action = default, string target = default, HandlerEnum handler = default, DateTime createdAt = default)
        {
            this.Id = id;
            this.Scope = scope;
            this.Action = action;
            // to ensure "target" is required (not null)
            if (target == null)
            {
                throw new ArgumentNullException("target is a required property for InboxRulesetDto and cannot be null");
            }
            this.Target = target;
            this.Handler = handler;
            this.CreatedAt = createdAt;
            this.InboxId = inboxId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets InboxId
        /// </summary>
        [DataMember(Name = "inboxId", EmitDefaultValue = true)]
        public Guid? InboxId { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", IsRequired = true, EmitDefaultValue = true)]
        public string Target { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboxRulesetDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Handler: ").Append(Handler).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
