// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// SortObject
    /// </summary>
    public partial class SortObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SortObject" /> class.
        /// </summary>
        /// <param name="unsorted">unsorted</param>
        /// <param name="sorted">sorted</param>
        /// <param name="empty">empty</param>
        [JsonConstructor]
        public SortObject(Option<bool?> unsorted = default, Option<bool?> sorted = default, Option<bool?> empty = default)
        {
            UnsortedOption = unsorted;
            SortedOption = sorted;
            EmptyOption = empty;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Unsorted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UnsortedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Unsorted
        /// </summary>
        [JsonPropertyName("unsorted")]
        public bool? Unsorted { get { return this.UnsortedOption; } set { this.UnsortedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Sorted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SortedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sorted
        /// </summary>
        [JsonPropertyName("sorted")]
        public bool? Sorted { get { return this.SortedOption; } set { this.SortedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Empty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmptyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Empty
        /// </summary>
        [JsonPropertyName("empty")]
        public bool? Empty { get { return this.EmptyOption; } set { this.EmptyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SortObject {\n");
            sb.Append("  Unsorted: ").Append(Unsorted).Append("\n");
            sb.Append("  Sorted: ").Append(Sorted).Append("\n");
            sb.Append("  Empty: ").Append(Empty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SortObject" />
    /// </summary>
    public class SortObjectJsonConverter : JsonConverter<SortObject>
    {
        /// <summary>
        /// Deserializes json to <see cref="SortObject" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SortObject Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> unsorted = default;
            Option<bool?> sorted = default;
            Option<bool?> empty = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "unsorted":
                            unsorted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sorted":
                            sorted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "empty":
                            empty = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (unsorted.IsSet && unsorted.Value == null)
                throw new ArgumentNullException(nameof(unsorted), "Property is not nullable for class SortObject.");

            if (sorted.IsSet && sorted.Value == null)
                throw new ArgumentNullException(nameof(sorted), "Property is not nullable for class SortObject.");

            if (empty.IsSet && empty.Value == null)
                throw new ArgumentNullException(nameof(empty), "Property is not nullable for class SortObject.");

            return new SortObject(unsorted, sorted, empty);
        }

        /// <summary>
        /// Serializes a <see cref="SortObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sortObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SortObject sortObject, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sortObject, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SortObject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sortObject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SortObject sortObject, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sortObject.UnsortedOption.IsSet)
                writer.WriteBoolean("unsorted", sortObject.UnsortedOption.Value.Value);

            if (sortObject.SortedOption.IsSet)
                writer.WriteBoolean("sorted", sortObject.SortedOption.Value.Value);

            if (sortObject.EmptyOption.IsSet)
                writer.WriteBoolean("empty", sortObject.EmptyOption.Value.Value);
        }
    }
}
