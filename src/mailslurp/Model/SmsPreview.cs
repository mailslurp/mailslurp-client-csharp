// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// SmsPreview
    /// </summary>
    public partial class SmsPreview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmsPreview" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="body">body</param>
        /// <param name="phoneNumber">phoneNumber</param>
        /// <param name="fromNumber">fromNumber</param>
        /// <param name="read">read</param>
        /// <param name="createdAt">createdAt</param>
        [JsonConstructor]
        public SmsPreview(Guid id, Guid userId, string body, Guid phoneNumber, string fromNumber, bool read, DateTime createdAt)
        {
            Id = id;
            UserId = userId;
            Body = body;
            PhoneNumber = phoneNumber;
            FromNumber = fromNumber;
            Read = read;
            CreatedAt = createdAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [JsonPropertyName("phoneNumber")]
        public Guid PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets FromNumber
        /// </summary>
        [JsonPropertyName("fromNumber")]
        public string FromNumber { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [JsonPropertyName("read")]
        public bool Read { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmsPreview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FromNumber: ").Append(FromNumber).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SmsPreview" />
    /// </summary>
    public class SmsPreviewJsonConverter : JsonConverter<SmsPreview>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SmsPreview" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SmsPreview Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<string> body = default;
            Option<Guid?> phoneNumber = default;
            Option<string> fromNumber = default;
            Option<bool?> read = default;
            Option<DateTime?> createdAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneNumber":
                            phoneNumber = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "fromNumber":
                            fromNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "read":
                            read = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SmsPreview.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class SmsPreview.", nameof(userId));

            if (!body.IsSet)
                throw new ArgumentException("Property is required for class SmsPreview.", nameof(body));

            if (!phoneNumber.IsSet)
                throw new ArgumentException("Property is required for class SmsPreview.", nameof(phoneNumber));

            if (!fromNumber.IsSet)
                throw new ArgumentException("Property is required for class SmsPreview.", nameof(fromNumber));

            if (!read.IsSet)
                throw new ArgumentException("Property is required for class SmsPreview.", nameof(read));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class SmsPreview.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SmsPreview.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class SmsPreview.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class SmsPreview.");

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class SmsPreview.");

            if (fromNumber.IsSet && fromNumber.Value == null)
                throw new ArgumentNullException(nameof(fromNumber), "Property is not nullable for class SmsPreview.");

            if (read.IsSet && read.Value == null)
                throw new ArgumentNullException(nameof(read), "Property is not nullable for class SmsPreview.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class SmsPreview.");

            return new SmsPreview(id.Value.Value, userId.Value.Value, body.Value, phoneNumber.Value.Value, fromNumber.Value, read.Value.Value, createdAt.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="SmsPreview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="smsPreview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SmsPreview smsPreview, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, smsPreview, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SmsPreview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="smsPreview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SmsPreview smsPreview, JsonSerializerOptions jsonSerializerOptions)
        {
            if (smsPreview.Body == null)
                throw new ArgumentNullException(nameof(smsPreview.Body), "Property is required for class SmsPreview.");

            if (smsPreview.FromNumber == null)
                throw new ArgumentNullException(nameof(smsPreview.FromNumber), "Property is required for class SmsPreview.");

            writer.WriteString("id", smsPreview.Id);

            writer.WriteString("userId", smsPreview.UserId);

            writer.WriteString("body", smsPreview.Body);

            writer.WriteString("phoneNumber", smsPreview.PhoneNumber);

            writer.WriteString("fromNumber", smsPreview.FromNumber);

            writer.WriteBoolean("read", smsPreview.Read);

            writer.WriteString("createdAt", smsPreview.CreatedAt.ToString(CreatedAtFormat));
        }
    }
}
