// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// WaitForSingleSmsOptions
    /// </summary>
    public partial class WaitForSingleSmsOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WaitForSingleSmsOptions" /> class.
        /// </summary>
        /// <param name="phoneNumberId">phoneNumberId</param>
        /// <param name="timeout">timeout</param>
        /// <param name="unreadOnly">unreadOnly</param>
        /// <param name="before">before</param>
        /// <param name="since">since</param>
        /// <param name="sortDirection">sortDirection</param>
        /// <param name="delay">delay</param>
        [JsonConstructor]
        public WaitForSingleSmsOptions(Guid phoneNumberId, long timeout, Option<bool?> unreadOnly = default, Option<DateTime?> before = default, Option<DateTime?> since = default, Option<SortDirectionEnum?> sortDirection = default, Option<long?> delay = default)
        {
            PhoneNumberId = phoneNumberId;
            Timeout = timeout;
            UnreadOnlyOption = unreadOnly;
            BeforeOption = before;
            SinceOption = since;
            SortDirectionOption = sortDirection;
            DelayOption = delay;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines SortDirection
        /// </summary>
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="SortDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SortDirectionEnum SortDirectionEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return SortDirectionEnum.ASC;

            if (value.Equals("DESC"))
                return SortDirectionEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type SortDirectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SortDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SortDirectionEnum? SortDirectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return SortDirectionEnum.ASC;

            if (value.Equals("DESC"))
                return SortDirectionEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SortDirectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SortDirectionEnumToJsonValue(SortDirectionEnum? value)
        {
            if (value == SortDirectionEnum.ASC)
                return "ASC";

            if (value == SortDirectionEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SortDirection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SortDirectionEnum?> SortDirectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets SortDirection
        /// </summary>
        [JsonPropertyName("sortDirection")]
        public SortDirectionEnum? SortDirection { get { return this.SortDirectionOption; } set { this.SortDirectionOption = new Option<SortDirectionEnum?>(value); } }

        /// <summary>
        /// Gets or Sets PhoneNumberId
        /// </summary>
        [JsonPropertyName("phoneNumberId")]
        public Guid PhoneNumberId { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [JsonPropertyName("timeout")]
        public long Timeout { get; set; }

        /// <summary>
        /// Used to track the state of UnreadOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UnreadOnlyOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnreadOnly
        /// </summary>
        [JsonPropertyName("unreadOnly")]
        public bool? UnreadOnly { get { return this.UnreadOnlyOption; } set { this.UnreadOnlyOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Before
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BeforeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Before
        /// </summary>
        [JsonPropertyName("before")]
        public DateTime? Before { get { return this.BeforeOption; } set { this.BeforeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Since
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SinceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Since
        /// </summary>
        [JsonPropertyName("since")]
        public DateTime? Since { get { return this.SinceOption; } set { this.SinceOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Delay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DelayOption { get; private set; }

        /// <summary>
        /// Gets or Sets Delay
        /// </summary>
        [JsonPropertyName("delay")]
        public long? Delay { get { return this.DelayOption; } set { this.DelayOption = new Option<long?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WaitForSingleSmsOptions {\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  UnreadOnly: ").Append(UnreadOnly).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WaitForSingleSmsOptions" />
    /// </summary>
    public class WaitForSingleSmsOptionsJsonConverter : JsonConverter<WaitForSingleSmsOptions>
    {
        /// <summary>
        /// The format to use to serialize Before
        /// </summary>
        public static string BeforeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Since
        /// </summary>
        public static string SinceFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WaitForSingleSmsOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WaitForSingleSmsOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> phoneNumberId = default;
            Option<long?> timeout = default;
            Option<bool?> unreadOnly = default;
            Option<DateTime?> before = default;
            Option<DateTime?> since = default;
            Option<WaitForSingleSmsOptions.SortDirectionEnum?> sortDirection = default;
            Option<long?> delay = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "phoneNumberId":
                            phoneNumberId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "timeout":
                            timeout = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "unreadOnly":
                            unreadOnly = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "before":
                            before = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "since":
                            since = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sortDirection":
                            string sortDirectionRawValue = utf8JsonReader.GetString();
                            if (sortDirectionRawValue != null)
                                sortDirection = new Option<WaitForSingleSmsOptions.SortDirectionEnum?>(WaitForSingleSmsOptions.SortDirectionEnumFromStringOrDefault(sortDirectionRawValue));
                            break;
                        case "delay":
                            delay = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!phoneNumberId.IsSet)
                throw new ArgumentException("Property is required for class WaitForSingleSmsOptions.", nameof(phoneNumberId));

            if (!timeout.IsSet)
                throw new ArgumentException("Property is required for class WaitForSingleSmsOptions.", nameof(timeout));

            if (phoneNumberId.IsSet && phoneNumberId.Value == null)
                throw new ArgumentNullException(nameof(phoneNumberId), "Property is not nullable for class WaitForSingleSmsOptions.");

            if (timeout.IsSet && timeout.Value == null)
                throw new ArgumentNullException(nameof(timeout), "Property is not nullable for class WaitForSingleSmsOptions.");

            if (unreadOnly.IsSet && unreadOnly.Value == null)
                throw new ArgumentNullException(nameof(unreadOnly), "Property is not nullable for class WaitForSingleSmsOptions.");

            if (before.IsSet && before.Value == null)
                throw new ArgumentNullException(nameof(before), "Property is not nullable for class WaitForSingleSmsOptions.");

            if (since.IsSet && since.Value == null)
                throw new ArgumentNullException(nameof(since), "Property is not nullable for class WaitForSingleSmsOptions.");

            if (sortDirection.IsSet && sortDirection.Value == null)
                throw new ArgumentNullException(nameof(sortDirection), "Property is not nullable for class WaitForSingleSmsOptions.");

            if (delay.IsSet && delay.Value == null)
                throw new ArgumentNullException(nameof(delay), "Property is not nullable for class WaitForSingleSmsOptions.");

            return new WaitForSingleSmsOptions(phoneNumberId.Value.Value, timeout.Value.Value, unreadOnly, before, since, sortDirection, delay);
        }

        /// <summary>
        /// Serializes a <see cref="WaitForSingleSmsOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="waitForSingleSmsOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WaitForSingleSmsOptions waitForSingleSmsOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, waitForSingleSmsOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WaitForSingleSmsOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="waitForSingleSmsOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WaitForSingleSmsOptions waitForSingleSmsOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("phoneNumberId", waitForSingleSmsOptions.PhoneNumberId);

            writer.WriteNumber("timeout", waitForSingleSmsOptions.Timeout);

            if (waitForSingleSmsOptions.UnreadOnlyOption.IsSet)
                writer.WriteBoolean("unreadOnly", waitForSingleSmsOptions.UnreadOnlyOption.Value.Value);

            if (waitForSingleSmsOptions.BeforeOption.IsSet)
                writer.WriteString("before", waitForSingleSmsOptions.BeforeOption.Value.Value.ToString(BeforeFormat));

            if (waitForSingleSmsOptions.SinceOption.IsSet)
                writer.WriteString("since", waitForSingleSmsOptions.SinceOption.Value.Value.ToString(SinceFormat));

            var sortDirectionRawValue = WaitForSingleSmsOptions.SortDirectionEnumToJsonValue(waitForSingleSmsOptions.SortDirectionOption.Value.Value);
            writer.WriteString("sortDirection", sortDirectionRawValue);
            if (waitForSingleSmsOptions.DelayOption.IsSet)
                writer.WriteNumber("delay", waitForSingleSmsOptions.DelayOption.Value.Value);
        }
    }
}
