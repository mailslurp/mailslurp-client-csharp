/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// WaitForSingleSmsOptions
    /// </summary>
    [DataContract(Name = "WaitForSingleSmsOptions")]
    public partial class WaitForSingleSmsOptions : IValidatableObject
    {
        /// <summary>
        /// Defines SortDirection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }


        /// <summary>
        /// Gets or Sets SortDirection
        /// </summary>
        [DataMember(Name = "sortDirection", EmitDefaultValue = false)]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WaitForSingleSmsOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WaitForSingleSmsOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WaitForSingleSmsOptions" /> class.
        /// </summary>
        /// <param name="phoneNumberId">phoneNumberId (required).</param>
        /// <param name="timeout">timeout (required).</param>
        /// <param name="unreadOnly">unreadOnly.</param>
        /// <param name="before">before.</param>
        /// <param name="since">since.</param>
        /// <param name="sortDirection">sortDirection.</param>
        /// <param name="delay">delay.</param>
        public WaitForSingleSmsOptions(Guid phoneNumberId = default, long timeout = default, bool unreadOnly = default, DateTime before = default, DateTime since = default, SortDirectionEnum? sortDirection = default, long delay = default)
        {
            this.PhoneNumberId = phoneNumberId;
            this.Timeout = timeout;
            this.UnreadOnly = unreadOnly;
            this.Before = before;
            this.Since = since;
            this.SortDirection = sortDirection;
            this.Delay = delay;
        }

        /// <summary>
        /// Gets or Sets PhoneNumberId
        /// </summary>
        [DataMember(Name = "phoneNumberId", IsRequired = true, EmitDefaultValue = true)]
        public Guid PhoneNumberId { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name = "timeout", IsRequired = true, EmitDefaultValue = true)]
        public long Timeout { get; set; }

        /// <summary>
        /// Gets or Sets UnreadOnly
        /// </summary>
        [DataMember(Name = "unreadOnly", EmitDefaultValue = true)]
        public bool UnreadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Before
        /// </summary>
        [DataMember(Name = "before", EmitDefaultValue = false)]
        public DateTime Before { get; set; }

        /// <summary>
        /// Gets or Sets Since
        /// </summary>
        [DataMember(Name = "since", EmitDefaultValue = false)]
        public DateTime Since { get; set; }

        /// <summary>
        /// Gets or Sets Delay
        /// </summary>
        [DataMember(Name = "delay", EmitDefaultValue = false)]
        public long Delay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WaitForSingleSmsOptions {\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  UnreadOnly: ").Append(UnreadOnly).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
