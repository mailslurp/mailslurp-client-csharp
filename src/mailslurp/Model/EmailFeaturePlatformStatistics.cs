// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// EmailFeaturePlatformStatistics
    /// </summary>
    public partial class EmailFeaturePlatformStatistics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailFeaturePlatformStatistics" /> class.
        /// </summary>
        /// <param name="platform">platform</param>
        /// <param name="versions">versions</param>
        [JsonConstructor]
        public EmailFeaturePlatformStatistics(PlatformEnum platform, List<EmailFeatureVersionStatistics> versions)
        {
            Platform = platform;
            Versions = versions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Platform
        /// </summary>
        public enum PlatformEnum
        {
            /// <summary>
            /// Enum Android for value: android
            /// </summary>
            Android = 1,

            /// <summary>
            /// Enum DesktopApp for value: desktop-app
            /// </summary>
            DesktopApp = 2,

            /// <summary>
            /// Enum DesktopWebmail for value: desktop-webmail
            /// </summary>
            DesktopWebmail = 3,

            /// <summary>
            /// Enum Ios for value: ios
            /// </summary>
            Ios = 4,

            /// <summary>
            /// Enum Macos for value: macos
            /// </summary>
            Macos = 5,

            /// <summary>
            /// Enum MobileWebmail for value: mobile-webmail
            /// </summary>
            MobileWebmail = 6,

            /// <summary>
            /// Enum OutlookCom for value: outlook-com
            /// </summary>
            OutlookCom = 7,

            /// <summary>
            /// Enum Webmail for value: webmail
            /// </summary>
            Webmail = 8,

            /// <summary>
            /// Enum Windows for value: windows
            /// </summary>
            Windows = 9,

            /// <summary>
            /// Enum WindowsMail for value: windows-mail
            /// </summary>
            WindowsMail = 10
        }

        /// <summary>
        /// Returns a <see cref="PlatformEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PlatformEnum PlatformEnumFromString(string value)
        {
            if (value.Equals("android"))
                return PlatformEnum.Android;

            if (value.Equals("desktop-app"))
                return PlatformEnum.DesktopApp;

            if (value.Equals("desktop-webmail"))
                return PlatformEnum.DesktopWebmail;

            if (value.Equals("ios"))
                return PlatformEnum.Ios;

            if (value.Equals("macos"))
                return PlatformEnum.Macos;

            if (value.Equals("mobile-webmail"))
                return PlatformEnum.MobileWebmail;

            if (value.Equals("outlook-com"))
                return PlatformEnum.OutlookCom;

            if (value.Equals("webmail"))
                return PlatformEnum.Webmail;

            if (value.Equals("windows"))
                return PlatformEnum.Windows;

            if (value.Equals("windows-mail"))
                return PlatformEnum.WindowsMail;

            throw new NotImplementedException($"Could not convert value to type PlatformEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PlatformEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlatformEnum? PlatformEnumFromStringOrDefault(string value)
        {
            if (value.Equals("android"))
                return PlatformEnum.Android;

            if (value.Equals("desktop-app"))
                return PlatformEnum.DesktopApp;

            if (value.Equals("desktop-webmail"))
                return PlatformEnum.DesktopWebmail;

            if (value.Equals("ios"))
                return PlatformEnum.Ios;

            if (value.Equals("macos"))
                return PlatformEnum.Macos;

            if (value.Equals("mobile-webmail"))
                return PlatformEnum.MobileWebmail;

            if (value.Equals("outlook-com"))
                return PlatformEnum.OutlookCom;

            if (value.Equals("webmail"))
                return PlatformEnum.Webmail;

            if (value.Equals("windows"))
                return PlatformEnum.Windows;

            if (value.Equals("windows-mail"))
                return PlatformEnum.WindowsMail;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PlatformEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PlatformEnumToJsonValue(PlatformEnum value)
        {
            if (value == PlatformEnum.Android)
                return "android";

            if (value == PlatformEnum.DesktopApp)
                return "desktop-app";

            if (value == PlatformEnum.DesktopWebmail)
                return "desktop-webmail";

            if (value == PlatformEnum.Ios)
                return "ios";

            if (value == PlatformEnum.Macos)
                return "macos";

            if (value == PlatformEnum.MobileWebmail)
                return "mobile-webmail";

            if (value == PlatformEnum.OutlookCom)
                return "outlook-com";

            if (value == PlatformEnum.Webmail)
                return "webmail";

            if (value == PlatformEnum.Windows)
                return "windows";

            if (value == PlatformEnum.WindowsMail)
                return "windows-mail";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [JsonPropertyName("platform")]
        public PlatformEnum Platform { get; set; }

        /// <summary>
        /// Gets or Sets Versions
        /// </summary>
        [JsonPropertyName("versions")]
        public List<EmailFeatureVersionStatistics> Versions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailFeaturePlatformStatistics {\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailFeaturePlatformStatistics" />
    /// </summary>
    public class EmailFeaturePlatformStatisticsJsonConverter : JsonConverter<EmailFeaturePlatformStatistics>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailFeaturePlatformStatistics" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailFeaturePlatformStatistics Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<EmailFeaturePlatformStatistics.PlatformEnum?> platform = default;
            Option<List<EmailFeatureVersionStatistics>> versions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "platform":
                            string platformRawValue = utf8JsonReader.GetString();
                            if (platformRawValue != null)
                                platform = new Option<EmailFeaturePlatformStatistics.PlatformEnum?>(EmailFeaturePlatformStatistics.PlatformEnumFromStringOrDefault(platformRawValue));
                            break;
                        case "versions":
                            versions = new Option<List<EmailFeatureVersionStatistics>>(JsonSerializer.Deserialize<List<EmailFeatureVersionStatistics>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!platform.IsSet)
                throw new ArgumentException("Property is required for class EmailFeaturePlatformStatistics.", nameof(platform));

            if (!versions.IsSet)
                throw new ArgumentException("Property is required for class EmailFeaturePlatformStatistics.", nameof(versions));

            if (platform.IsSet && platform.Value == null)
                throw new ArgumentNullException(nameof(platform), "Property is not nullable for class EmailFeaturePlatformStatistics.");

            if (versions.IsSet && versions.Value == null)
                throw new ArgumentNullException(nameof(versions), "Property is not nullable for class EmailFeaturePlatformStatistics.");

            return new EmailFeaturePlatformStatistics(platform.Value.Value, versions.Value);
        }

        /// <summary>
        /// Serializes a <see cref="EmailFeaturePlatformStatistics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailFeaturePlatformStatistics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailFeaturePlatformStatistics emailFeaturePlatformStatistics, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailFeaturePlatformStatistics, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailFeaturePlatformStatistics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailFeaturePlatformStatistics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailFeaturePlatformStatistics emailFeaturePlatformStatistics, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailFeaturePlatformStatistics.Versions == null)
                throw new ArgumentNullException(nameof(emailFeaturePlatformStatistics.Versions), "Property is required for class EmailFeaturePlatformStatistics.");

            var platformRawValue = EmailFeaturePlatformStatistics.PlatformEnumToJsonValue(emailFeaturePlatformStatistics.Platform);
            writer.WriteString("platform", platformRawValue);
            writer.WritePropertyName("versions");
            JsonSerializer.Serialize(writer, emailFeaturePlatformStatistics.Versions, jsonSerializerOptions);
        }
    }
}
