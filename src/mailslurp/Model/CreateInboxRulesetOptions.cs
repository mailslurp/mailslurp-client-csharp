// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for creating inbox rulesets. Inbox rulesets can be used to block, allow, filter, or forward emails when sending or receiving using the inbox.
    /// </summary>
    public partial class CreateInboxRulesetOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInboxRulesetOptions" /> class.
        /// </summary>
        /// <param name="scope">What type of emails actions to apply ruleset to. Either &#x60;SENDING_EMAILS&#x60; or &#x60;RECEIVING_EMAILS&#x60; will apply action and target to any sending or receiving of emails respectively.</param>
        /// <param name="action">Action to be taken when the ruleset matches an email for the given scope. For example: &#x60;BLOCK&#x60; action with target &#x60;*&#x60; and scope &#x60;SENDING_EMAILS&#x60; blocks sending to all recipients. Note &#x60;ALLOW&#x60; takes precedent over &#x60;BLOCK&#x60;. &#x60;FILTER_REMOVE&#x60; is like block but will remove offending email addresses during a send or receive event instead of blocking the action.</param>
        /// <param name="target">Target to match emails with. Can be a wild-card type pattern or a valid email address. For instance &#x60;*@gmail.com&#x60; matches all gmail addresses while &#x60;test@gmail.com&#x60; matches one address exactly. The target is applied to every recipient field email address when &#x60;SENDING_EMAILS&#x60; is the scope and is applied to sender of email when &#x60;RECEIVING_EMAILS&#x60;.</param>
        [JsonConstructor]
        public CreateInboxRulesetOptions(ScopeEnum scope, ActionEnum action, string target)
        {
            Scope = scope;
            Action = action;
            Target = target;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// What type of emails actions to apply ruleset to. Either &#x60;SENDING_EMAILS&#x60; or &#x60;RECEIVING_EMAILS&#x60; will apply action and target to any sending or receiving of emails respectively.
        /// </summary>
        /// <value>What type of emails actions to apply ruleset to. Either &#x60;SENDING_EMAILS&#x60; or &#x60;RECEIVING_EMAILS&#x60; will apply action and target to any sending or receiving of emails respectively.</value>
        public enum ScopeEnum
        {
            /// <summary>
            /// Enum RECEIVINGEMAILS for value: RECEIVING_EMAILS
            /// </summary>
            RECEIVINGEMAILS = 1,

            /// <summary>
            /// Enum SENDINGEMAILS for value: SENDING_EMAILS
            /// </summary>
            SENDINGEMAILS = 2
        }

        /// <summary>
        /// Returns a <see cref="ScopeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ScopeEnum ScopeEnumFromString(string value)
        {
            if (value.Equals("RECEIVING_EMAILS"))
                return ScopeEnum.RECEIVINGEMAILS;

            if (value.Equals("SENDING_EMAILS"))
                return ScopeEnum.SENDINGEMAILS;

            throw new NotImplementedException($"Could not convert value to type ScopeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ScopeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ScopeEnum? ScopeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("RECEIVING_EMAILS"))
                return ScopeEnum.RECEIVINGEMAILS;

            if (value.Equals("SENDING_EMAILS"))
                return ScopeEnum.SENDINGEMAILS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ScopeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ScopeEnumToJsonValue(ScopeEnum value)
        {
            if (value == ScopeEnum.RECEIVINGEMAILS)
                return "RECEIVING_EMAILS";

            if (value == ScopeEnum.SENDINGEMAILS)
                return "SENDING_EMAILS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// What type of emails actions to apply ruleset to. Either &#x60;SENDING_EMAILS&#x60; or &#x60;RECEIVING_EMAILS&#x60; will apply action and target to any sending or receiving of emails respectively.
        /// </summary>
        /// <value>What type of emails actions to apply ruleset to. Either &#x60;SENDING_EMAILS&#x60; or &#x60;RECEIVING_EMAILS&#x60; will apply action and target to any sending or receiving of emails respectively.</value>
        [JsonPropertyName("scope")]
        public ScopeEnum Scope { get; set; }

        /// <summary>
        /// Action to be taken when the ruleset matches an email for the given scope. For example: &#x60;BLOCK&#x60; action with target &#x60;*&#x60; and scope &#x60;SENDING_EMAILS&#x60; blocks sending to all recipients. Note &#x60;ALLOW&#x60; takes precedent over &#x60;BLOCK&#x60;. &#x60;FILTER_REMOVE&#x60; is like block but will remove offending email addresses during a send or receive event instead of blocking the action.
        /// </summary>
        /// <value>Action to be taken when the ruleset matches an email for the given scope. For example: &#x60;BLOCK&#x60; action with target &#x60;*&#x60; and scope &#x60;SENDING_EMAILS&#x60; blocks sending to all recipients. Note &#x60;ALLOW&#x60; takes precedent over &#x60;BLOCK&#x60;. &#x60;FILTER_REMOVE&#x60; is like block but will remove offending email addresses during a send or receive event instead of blocking the action.</value>
        public enum ActionEnum
        {
            /// <summary>
            /// Enum BLOCK for value: BLOCK
            /// </summary>
            BLOCK = 1,

            /// <summary>
            /// Enum ALLOW for value: ALLOW
            /// </summary>
            ALLOW = 2,

            /// <summary>
            /// Enum FILTERREMOVE for value: FILTER_REMOVE
            /// </summary>
            FILTERREMOVE = 3
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionEnum ActionEnumFromString(string value)
        {
            if (value.Equals("BLOCK"))
                return ActionEnum.BLOCK;

            if (value.Equals("ALLOW"))
                return ActionEnum.ALLOW;

            if (value.Equals("FILTER_REMOVE"))
                return ActionEnum.FILTERREMOVE;

            throw new NotImplementedException($"Could not convert value to type ActionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionEnum? ActionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("BLOCK"))
                return ActionEnum.BLOCK;

            if (value.Equals("ALLOW"))
                return ActionEnum.ALLOW;

            if (value.Equals("FILTER_REMOVE"))
                return ActionEnum.FILTERREMOVE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionEnumToJsonValue(ActionEnum value)
        {
            if (value == ActionEnum.BLOCK)
                return "BLOCK";

            if (value == ActionEnum.ALLOW)
                return "ALLOW";

            if (value == ActionEnum.FILTERREMOVE)
                return "FILTER_REMOVE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Action to be taken when the ruleset matches an email for the given scope. For example: &#x60;BLOCK&#x60; action with target &#x60;*&#x60; and scope &#x60;SENDING_EMAILS&#x60; blocks sending to all recipients. Note &#x60;ALLOW&#x60; takes precedent over &#x60;BLOCK&#x60;. &#x60;FILTER_REMOVE&#x60; is like block but will remove offending email addresses during a send or receive event instead of blocking the action.
        /// </summary>
        /// <value>Action to be taken when the ruleset matches an email for the given scope. For example: &#x60;BLOCK&#x60; action with target &#x60;*&#x60; and scope &#x60;SENDING_EMAILS&#x60; blocks sending to all recipients. Note &#x60;ALLOW&#x60; takes precedent over &#x60;BLOCK&#x60;. &#x60;FILTER_REMOVE&#x60; is like block but will remove offending email addresses during a send or receive event instead of blocking the action.</value>
        [JsonPropertyName("action")]
        public ActionEnum Action { get; set; }

        /// <summary>
        /// Target to match emails with. Can be a wild-card type pattern or a valid email address. For instance &#x60;*@gmail.com&#x60; matches all gmail addresses while &#x60;test@gmail.com&#x60; matches one address exactly. The target is applied to every recipient field email address when &#x60;SENDING_EMAILS&#x60; is the scope and is applied to sender of email when &#x60;RECEIVING_EMAILS&#x60;.
        /// </summary>
        /// <value>Target to match emails with. Can be a wild-card type pattern or a valid email address. For instance &#x60;*@gmail.com&#x60; matches all gmail addresses while &#x60;test@gmail.com&#x60; matches one address exactly. The target is applied to every recipient field email address when &#x60;SENDING_EMAILS&#x60; is the scope and is applied to sender of email when &#x60;RECEIVING_EMAILS&#x60;.</value>
        [JsonPropertyName("target")]
        public string Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateInboxRulesetOptions {\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateInboxRulesetOptions" />
    /// </summary>
    public class CreateInboxRulesetOptionsJsonConverter : JsonConverter<CreateInboxRulesetOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateInboxRulesetOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateInboxRulesetOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateInboxRulesetOptions.ScopeEnum?> scope = default;
            Option<CreateInboxRulesetOptions.ActionEnum?> action = default;
            Option<string> target = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "scope":
                            string scopeRawValue = utf8JsonReader.GetString();
                            if (scopeRawValue != null)
                                scope = new Option<CreateInboxRulesetOptions.ScopeEnum?>(CreateInboxRulesetOptions.ScopeEnumFromStringOrDefault(scopeRawValue));
                            break;
                        case "action":
                            string actionRawValue = utf8JsonReader.GetString();
                            if (actionRawValue != null)
                                action = new Option<CreateInboxRulesetOptions.ActionEnum?>(CreateInboxRulesetOptions.ActionEnumFromStringOrDefault(actionRawValue));
                            break;
                        case "target":
                            target = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!scope.IsSet)
                throw new ArgumentException("Property is required for class CreateInboxRulesetOptions.", nameof(scope));

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class CreateInboxRulesetOptions.", nameof(action));

            if (!target.IsSet)
                throw new ArgumentException("Property is required for class CreateInboxRulesetOptions.", nameof(target));

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope), "Property is not nullable for class CreateInboxRulesetOptions.");

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class CreateInboxRulesetOptions.");

            if (target.IsSet && target.Value == null)
                throw new ArgumentNullException(nameof(target), "Property is not nullable for class CreateInboxRulesetOptions.");

            return new CreateInboxRulesetOptions(scope.Value.Value, action.Value.Value, target.Value);
        }

        /// <summary>
        /// Serializes a <see cref="CreateInboxRulesetOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createInboxRulesetOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateInboxRulesetOptions createInboxRulesetOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createInboxRulesetOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateInboxRulesetOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createInboxRulesetOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateInboxRulesetOptions createInboxRulesetOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createInboxRulesetOptions.Target == null)
                throw new ArgumentNullException(nameof(createInboxRulesetOptions.Target), "Property is required for class CreateInboxRulesetOptions.");

            var scopeRawValue = CreateInboxRulesetOptions.ScopeEnumToJsonValue(createInboxRulesetOptions.Scope);
            writer.WriteString("scope", scopeRawValue);
            var actionRawValue = CreateInboxRulesetOptions.ActionEnumToJsonValue(createInboxRulesetOptions.Action);
            writer.WriteString("action", actionRawValue);
            writer.WriteString("target", createInboxRulesetOptions.Target);
        }
    }
}
