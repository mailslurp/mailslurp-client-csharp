// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// PhoneNumberDto
    /// </summary>
    public partial class PhoneNumberDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberDto" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="phoneNumber">phoneNumber</param>
        /// <param name="phoneCountry">phoneCountry</param>
        /// <param name="phonePlan">phonePlan</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="favourite">favourite</param>
        /// <param name="name">name</param>
        /// <param name="description">description</param>
        /// <param name="complianceAddress">complianceAddress</param>
        /// <param name="emergencyAddress">emergencyAddress</param>
        [JsonConstructor]
        public PhoneNumberDto(Guid id, Guid userId, string phoneNumber, PhoneCountryEnum phoneCountry, Guid phonePlan, DateTime createdAt, DateTime updatedAt, bool favourite, Option<string> name = default, Option<string> description = default, Option<Guid?> complianceAddress = default, Option<Guid?> emergencyAddress = default)
        {
            Id = id;
            UserId = userId;
            PhoneNumber = phoneNumber;
            PhoneCountry = phoneCountry;
            PhonePlan = phonePlan;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Favourite = favourite;
            NameOption = name;
            DescriptionOption = description;
            ComplianceAddressOption = complianceAddress;
            EmergencyAddressOption = emergencyAddress;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines PhoneCountry
        /// </summary>
        public enum PhoneCountryEnum
        {
            /// <summary>
            /// Enum US for value: US
            /// </summary>
            US = 1,

            /// <summary>
            /// Enum GB for value: GB
            /// </summary>
            GB = 2,

            /// <summary>
            /// Enum AU for value: AU
            /// </summary>
            AU = 3,

            /// <summary>
            /// Enum CA for value: CA
            /// </summary>
            CA = 4,

            /// <summary>
            /// Enum EE for value: EE
            /// </summary>
            EE = 5,

            /// <summary>
            /// Enum HK for value: HK
            /// </summary>
            HK = 6,

            /// <summary>
            /// Enum PL for value: PL
            /// </summary>
            PL = 7,

            /// <summary>
            /// Enum CH for value: CH
            /// </summary>
            CH = 8,

            /// <summary>
            /// Enum PT for value: PT
            /// </summary>
            PT = 9,

            /// <summary>
            /// Enum NL for value: NL
            /// </summary>
            NL = 10,

            /// <summary>
            /// Enum IL for value: IL
            /// </summary>
            IL = 11,

            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            SE = 12
        }

        /// <summary>
        /// Returns a <see cref="PhoneCountryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PhoneCountryEnum PhoneCountryEnumFromString(string value)
        {
            if (value.Equals("US"))
                return PhoneCountryEnum.US;

            if (value.Equals("GB"))
                return PhoneCountryEnum.GB;

            if (value.Equals("AU"))
                return PhoneCountryEnum.AU;

            if (value.Equals("CA"))
                return PhoneCountryEnum.CA;

            if (value.Equals("EE"))
                return PhoneCountryEnum.EE;

            if (value.Equals("HK"))
                return PhoneCountryEnum.HK;

            if (value.Equals("PL"))
                return PhoneCountryEnum.PL;

            if (value.Equals("CH"))
                return PhoneCountryEnum.CH;

            if (value.Equals("PT"))
                return PhoneCountryEnum.PT;

            if (value.Equals("NL"))
                return PhoneCountryEnum.NL;

            if (value.Equals("IL"))
                return PhoneCountryEnum.IL;

            if (value.Equals("SE"))
                return PhoneCountryEnum.SE;

            throw new NotImplementedException($"Could not convert value to type PhoneCountryEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PhoneCountryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PhoneCountryEnum? PhoneCountryEnumFromStringOrDefault(string value)
        {
            if (value.Equals("US"))
                return PhoneCountryEnum.US;

            if (value.Equals("GB"))
                return PhoneCountryEnum.GB;

            if (value.Equals("AU"))
                return PhoneCountryEnum.AU;

            if (value.Equals("CA"))
                return PhoneCountryEnum.CA;

            if (value.Equals("EE"))
                return PhoneCountryEnum.EE;

            if (value.Equals("HK"))
                return PhoneCountryEnum.HK;

            if (value.Equals("PL"))
                return PhoneCountryEnum.PL;

            if (value.Equals("CH"))
                return PhoneCountryEnum.CH;

            if (value.Equals("PT"))
                return PhoneCountryEnum.PT;

            if (value.Equals("NL"))
                return PhoneCountryEnum.NL;

            if (value.Equals("IL"))
                return PhoneCountryEnum.IL;

            if (value.Equals("SE"))
                return PhoneCountryEnum.SE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PhoneCountryEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PhoneCountryEnumToJsonValue(PhoneCountryEnum value)
        {
            if (value == PhoneCountryEnum.US)
                return "US";

            if (value == PhoneCountryEnum.GB)
                return "GB";

            if (value == PhoneCountryEnum.AU)
                return "AU";

            if (value == PhoneCountryEnum.CA)
                return "CA";

            if (value == PhoneCountryEnum.EE)
                return "EE";

            if (value == PhoneCountryEnum.HK)
                return "HK";

            if (value == PhoneCountryEnum.PL)
                return "PL";

            if (value == PhoneCountryEnum.CH)
                return "CH";

            if (value == PhoneCountryEnum.PT)
                return "PT";

            if (value == PhoneCountryEnum.NL)
                return "NL";

            if (value == PhoneCountryEnum.IL)
                return "IL";

            if (value == PhoneCountryEnum.SE)
                return "SE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets PhoneCountry
        /// </summary>
        [JsonPropertyName("phoneCountry")]
        public PhoneCountryEnum PhoneCountry { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhonePlan
        /// </summary>
        [JsonPropertyName("phonePlan")]
        public Guid PhonePlan { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Favourite
        /// </summary>
        [JsonPropertyName("favourite")]
        public bool Favourite { get; set; }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ComplianceAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ComplianceAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ComplianceAddress
        /// </summary>
        [JsonPropertyName("complianceAddress")]
        public Guid? ComplianceAddress { get { return this.ComplianceAddressOption; } set { this.ComplianceAddressOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of EmergencyAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> EmergencyAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmergencyAddress
        /// </summary>
        [JsonPropertyName("emergencyAddress")]
        public Guid? EmergencyAddress { get { return this.EmergencyAddressOption; } set { this.EmergencyAddressOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhoneNumberDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneCountry: ").Append(PhoneCountry).Append("\n");
            sb.Append("  PhonePlan: ").Append(PhonePlan).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Favourite: ").Append(Favourite).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ComplianceAddress: ").Append(ComplianceAddress).Append("\n");
            sb.Append("  EmergencyAddress: ").Append(EmergencyAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PhoneNumberDto" />
    /// </summary>
    public class PhoneNumberDtoJsonConverter : JsonConverter<PhoneNumberDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PhoneNumberDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PhoneNumberDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<string> phoneNumber = default;
            Option<PhoneNumberDto.PhoneCountryEnum?> phoneCountry = default;
            Option<Guid?> phonePlan = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<bool?> favourite = default;
            Option<string> name = default;
            Option<string> description = default;
            Option<Guid?> complianceAddress = default;
            Option<Guid?> emergencyAddress = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "phoneNumber":
                            phoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneCountry":
                            string phoneCountryRawValue = utf8JsonReader.GetString();
                            if (phoneCountryRawValue != null)
                                phoneCountry = new Option<PhoneNumberDto.PhoneCountryEnum?>(PhoneNumberDto.PhoneCountryEnumFromStringOrDefault(phoneCountryRawValue));
                            break;
                        case "phonePlan":
                            phonePlan = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "favourite":
                            favourite = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "complianceAddress":
                            complianceAddress = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "emergencyAddress":
                            emergencyAddress = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PhoneNumberDto.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class PhoneNumberDto.", nameof(userId));

            if (!phoneNumber.IsSet)
                throw new ArgumentException("Property is required for class PhoneNumberDto.", nameof(phoneNumber));

            if (!phoneCountry.IsSet)
                throw new ArgumentException("Property is required for class PhoneNumberDto.", nameof(phoneCountry));

            if (!phonePlan.IsSet)
                throw new ArgumentException("Property is required for class PhoneNumberDto.", nameof(phonePlan));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class PhoneNumberDto.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class PhoneNumberDto.", nameof(updatedAt));

            if (!favourite.IsSet)
                throw new ArgumentException("Property is required for class PhoneNumberDto.", nameof(favourite));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PhoneNumberDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class PhoneNumberDto.");

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class PhoneNumberDto.");

            if (phoneCountry.IsSet && phoneCountry.Value == null)
                throw new ArgumentNullException(nameof(phoneCountry), "Property is not nullable for class PhoneNumberDto.");

            if (phonePlan.IsSet && phonePlan.Value == null)
                throw new ArgumentNullException(nameof(phonePlan), "Property is not nullable for class PhoneNumberDto.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class PhoneNumberDto.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class PhoneNumberDto.");

            if (favourite.IsSet && favourite.Value == null)
                throw new ArgumentNullException(nameof(favourite), "Property is not nullable for class PhoneNumberDto.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PhoneNumberDto.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class PhoneNumberDto.");

            if (complianceAddress.IsSet && complianceAddress.Value == null)
                throw new ArgumentNullException(nameof(complianceAddress), "Property is not nullable for class PhoneNumberDto.");

            if (emergencyAddress.IsSet && emergencyAddress.Value == null)
                throw new ArgumentNullException(nameof(emergencyAddress), "Property is not nullable for class PhoneNumberDto.");

            return new PhoneNumberDto(id.Value.Value, userId.Value.Value, phoneNumber.Value, phoneCountry.Value.Value, phonePlan.Value.Value, createdAt.Value.Value, updatedAt.Value.Value, favourite.Value.Value, name, description, complianceAddress, emergencyAddress);
        }

        /// <summary>
        /// Serializes a <see cref="PhoneNumberDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="phoneNumberDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PhoneNumberDto phoneNumberDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, phoneNumberDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PhoneNumberDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="phoneNumberDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PhoneNumberDto phoneNumberDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (phoneNumberDto.PhoneNumber == null)
                throw new ArgumentNullException(nameof(phoneNumberDto.PhoneNumber), "Property is required for class PhoneNumberDto.");

            if (phoneNumberDto.NameOption.IsSet && phoneNumberDto.Name == null)
                throw new ArgumentNullException(nameof(phoneNumberDto.Name), "Property is required for class PhoneNumberDto.");

            if (phoneNumberDto.DescriptionOption.IsSet && phoneNumberDto.Description == null)
                throw new ArgumentNullException(nameof(phoneNumberDto.Description), "Property is required for class PhoneNumberDto.");

            writer.WriteString("id", phoneNumberDto.Id);

            writer.WriteString("userId", phoneNumberDto.UserId);

            writer.WriteString("phoneNumber", phoneNumberDto.PhoneNumber);

            var phoneCountryRawValue = PhoneNumberDto.PhoneCountryEnumToJsonValue(phoneNumberDto.PhoneCountry);
            writer.WriteString("phoneCountry", phoneCountryRawValue);
            writer.WriteString("phonePlan", phoneNumberDto.PhonePlan);

            writer.WriteString("createdAt", phoneNumberDto.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", phoneNumberDto.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteBoolean("favourite", phoneNumberDto.Favourite);

            if (phoneNumberDto.NameOption.IsSet)
                writer.WriteString("name", phoneNumberDto.Name);

            if (phoneNumberDto.DescriptionOption.IsSet)
                writer.WriteString("description", phoneNumberDto.Description);

            if (phoneNumberDto.ComplianceAddressOption.IsSet)
                writer.WriteString("complianceAddress", phoneNumberDto.ComplianceAddressOption.Value.Value);

            if (phoneNumberDto.EmergencyAddressOption.IsSet)
                writer.WriteString("emergencyAddress", phoneNumberDto.EmergencyAddressOption.Value.Value);
        }
    }
}
