// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Create template options
    /// </summary>
    public partial class CreateTemplateOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTemplateOptions" /> class.
        /// </summary>
        /// <param name="name">Name of template</param>
        /// <param name="content">Template content. Can include moustache style variables such as {{var_name}}</param>
        [JsonConstructor]
        public CreateTemplateOptions(string name, string content)
        {
            Name = name;
            Content = content;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of template
        /// </summary>
        /// <value>Name of template</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Template content. Can include moustache style variables such as {{var_name}}
        /// </summary>
        /// <value>Template content. Can include moustache style variables such as {{var_name}}</value>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTemplateOptions {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateTemplateOptions" />
    /// </summary>
    public class CreateTemplateOptionsJsonConverter : JsonConverter<CreateTemplateOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateTemplateOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateTemplateOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<string> content = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "content":
                            content = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateTemplateOptions.", nameof(name));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class CreateTemplateOptions.", nameof(content));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateTemplateOptions.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class CreateTemplateOptions.");

            return new CreateTemplateOptions(name.Value, content.Value);
        }

        /// <summary>
        /// Serializes a <see cref="CreateTemplateOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTemplateOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateTemplateOptions createTemplateOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createTemplateOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateTemplateOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTemplateOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateTemplateOptions createTemplateOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createTemplateOptions.Name == null)
                throw new ArgumentNullException(nameof(createTemplateOptions.Name), "Property is required for class CreateTemplateOptions.");

            if (createTemplateOptions.Content == null)
                throw new ArgumentNullException(nameof(createTemplateOptions.Content), "Property is required for class CreateTemplateOptions.");

            writer.WriteString("name", createTemplateOptions.Name);

            writer.WriteString("content", createTemplateOptions.Content);
        }
    }
}
