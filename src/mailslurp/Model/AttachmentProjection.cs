/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Email attachment data
    /// </summary>
    [DataContract(Name = "AttachmentProjection")]
    public partial class AttachmentProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentProjection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttachmentProjection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentProjection" /> class.
        /// </summary>
        /// <param name="userId">userId (required).</param>
        /// <param name="inboxId">Inbox ID.</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="contentId">Content ID of attachment..</param>
        /// <param name="attachmentId">Attachment ID (required).</param>
        /// <param name="name">name.</param>
        /// <param name="id">ID (required).</param>
        /// <param name="contentLength">Content length of attachment in bytes.</param>
        /// <param name="contentType">Content type of attachment..</param>
        public AttachmentProjection(Guid userId = default, Guid inboxId = default, DateTime updatedAt = default, DateTime createdAt = default, string contentId = default, string attachmentId = default, string name = default, Guid id = default, long? contentLength = default, string contentType = default)
        {
            this.UserId = userId;
            this.UpdatedAt = updatedAt;
            this.CreatedAt = createdAt;
            // to ensure "attachmentId" is required (not null)
            if (attachmentId == null)
            {
                throw new ArgumentNullException("attachmentId is a required property for AttachmentProjection and cannot be null");
            }
            this.AttachmentId = attachmentId;
            this.Id = id;
            this.InboxId = inboxId;
            this.ContentId = contentId;
            this.Name = name;
            this.ContentLength = contentLength;
            this.ContentType = contentType;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Inbox ID
        /// </summary>
        /// <value>Inbox ID</value>
        [DataMember(Name = "inboxId", EmitDefaultValue = false)]
        public Guid InboxId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Content ID of attachment.
        /// </summary>
        /// <value>Content ID of attachment.</value>
        [DataMember(Name = "contentId", EmitDefaultValue = true)]
        public string ContentId { get; set; }

        /// <summary>
        /// Attachment ID
        /// </summary>
        /// <value>Attachment ID</value>
        [DataMember(Name = "attachmentId", IsRequired = true, EmitDefaultValue = true)]
        public string AttachmentId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Content length of attachment in bytes
        /// </summary>
        /// <value>Content length of attachment in bytes</value>
        [DataMember(Name = "contentLength", EmitDefaultValue = true)]
        public long? ContentLength { get; set; }

        /// <summary>
        /// Content type of attachment.
        /// </summary>
        /// <value>Content type of attachment.</value>
        /*
        <example>image/png</example>
        */
        [DataMember(Name = "contentType", EmitDefaultValue = true)]
        public string ContentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentProjection {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContentLength: ").Append(ContentLength).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
