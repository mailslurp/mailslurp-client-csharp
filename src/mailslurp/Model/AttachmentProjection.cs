// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Email attachment data
    /// </summary>
    public partial class AttachmentProjection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentProjection" /> class.
        /// </summary>
        /// <param name="userId">userId</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="attachmentId">Attachment ID</param>
        /// <param name="id">ID</param>
        /// <param name="inboxId">Inbox ID</param>
        /// <param name="contentId">Content ID of attachment.</param>
        /// <param name="name">name</param>
        /// <param name="contentLength">Content length of attachment in bytes</param>
        /// <param name="contentType">Content type of attachment.</param>
        [JsonConstructor]
        public AttachmentProjection(Guid userId, DateTime updatedAt, DateTime createdAt, string attachmentId, Guid id, Option<Guid?> inboxId = default, Option<string> contentId = default, Option<string> name = default, Option<long?> contentLength = default, Option<string> contentType = default)
        {
            UserId = userId;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            AttachmentId = attachmentId;
            Id = id;
            InboxIdOption = inboxId;
            ContentIdOption = contentId;
            NameOption = name;
            ContentLengthOption = contentLength;
            ContentTypeOption = contentType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Attachment ID
        /// </summary>
        /// <value>Attachment ID</value>
        [JsonPropertyName("attachmentId")]
        public string AttachmentId { get; set; }

        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Used to track the state of InboxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> InboxIdOption { get; private set; }

        /// <summary>
        /// Inbox ID
        /// </summary>
        /// <value>Inbox ID</value>
        [JsonPropertyName("inboxId")]
        public Guid? InboxId { get { return this.InboxIdOption; } set { this.InboxIdOption = new Option<Guid?>(value); } }

        /// <summary>
        /// Used to track the state of ContentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContentIdOption { get; private set; }

        /// <summary>
        /// Content ID of attachment.
        /// </summary>
        /// <value>Content ID of attachment.</value>
        [JsonPropertyName("contentId")]
        public string ContentId { get { return this.ContentIdOption; } set { this.ContentIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContentLength
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ContentLengthOption { get; private set; }

        /// <summary>
        /// Content length of attachment in bytes
        /// </summary>
        /// <value>Content length of attachment in bytes</value>
        [JsonPropertyName("contentLength")]
        public long? ContentLength { get { return this.ContentLengthOption; } set { this.ContentLengthOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContentTypeOption { get; private set; }

        /// <summary>
        /// Content type of attachment.
        /// </summary>
        /// <value>Content type of attachment.</value>
        /* <example>image/png</example> */
        [JsonPropertyName("contentType")]
        public string ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentProjection {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InboxId: ").Append(InboxId).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContentLength: ").Append(ContentLength).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AttachmentProjection" />
    /// </summary>
    public class AttachmentProjectionJsonConverter : JsonConverter<AttachmentProjection>
    {
        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AttachmentProjection" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AttachmentProjection Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> userId = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> createdAt = default;
            Option<string> attachmentId = default;
            Option<Guid?> id = default;
            Option<Guid?> inboxId = default;
            Option<string> contentId = default;
            Option<string> name = default;
            Option<long?> contentLength = default;
            Option<string> contentType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            userId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachmentId":
                            attachmentId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "inboxId":
                            inboxId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "contentId":
                            contentId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contentLength":
                            contentLength = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "contentType":
                            contentType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class AttachmentProjection.", nameof(userId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class AttachmentProjection.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class AttachmentProjection.", nameof(createdAt));

            if (!attachmentId.IsSet)
                throw new ArgumentException("Property is required for class AttachmentProjection.", nameof(attachmentId));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AttachmentProjection.", nameof(id));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class AttachmentProjection.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class AttachmentProjection.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class AttachmentProjection.");

            if (attachmentId.IsSet && attachmentId.Value == null)
                throw new ArgumentNullException(nameof(attachmentId), "Property is not nullable for class AttachmentProjection.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AttachmentProjection.");

            if (inboxId.IsSet && inboxId.Value == null)
                throw new ArgumentNullException(nameof(inboxId), "Property is not nullable for class AttachmentProjection.");

            return new AttachmentProjection(userId.Value.Value, updatedAt.Value.Value, createdAt.Value.Value, attachmentId.Value, id.Value.Value, inboxId, contentId, name, contentLength, contentType);
        }

        /// <summary>
        /// Serializes a <see cref="AttachmentProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AttachmentProjection attachmentProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, attachmentProjection, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AttachmentProjection" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentProjection"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AttachmentProjection attachmentProjection, JsonSerializerOptions jsonSerializerOptions)
        {
            if (attachmentProjection.AttachmentId == null)
                throw new ArgumentNullException(nameof(attachmentProjection.AttachmentId), "Property is required for class AttachmentProjection.");

            writer.WriteString("userId", attachmentProjection.UserId);

            writer.WriteString("updatedAt", attachmentProjection.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("createdAt", attachmentProjection.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("attachmentId", attachmentProjection.AttachmentId);

            writer.WriteString("id", attachmentProjection.Id);

            if (attachmentProjection.InboxIdOption.IsSet)
                writer.WriteString("inboxId", attachmentProjection.InboxIdOption.Value.Value);

            if (attachmentProjection.ContentIdOption.IsSet)
                if (attachmentProjection.ContentIdOption.Value != null)
                    writer.WriteString("contentId", attachmentProjection.ContentId);
                else
                    writer.WriteNull("contentId");

            if (attachmentProjection.NameOption.IsSet)
                if (attachmentProjection.NameOption.Value != null)
                    writer.WriteString("name", attachmentProjection.Name);
                else
                    writer.WriteNull("name");

            if (attachmentProjection.ContentLengthOption.IsSet)
                if (attachmentProjection.ContentLengthOption.Value != null)
                    writer.WriteNumber("contentLength", attachmentProjection.ContentLengthOption.Value.Value);
                else
                    writer.WriteNull("contentLength");

            if (attachmentProjection.ContentTypeOption.IsSet)
                if (attachmentProjection.ContentTypeOption.Value != null)
                    writer.WriteString("contentType", attachmentProjection.ContentType);
                else
                    writer.WriteNull("contentType");
        }
    }
}
