// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using mailslurp.Client;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for matching emails in an inbox based on a condition such as &#x60;HAS_ATTACHMENTS&#x3D;TRUE&#x60;
    /// </summary>
    public partial class ConditionOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionOption" /> class.
        /// </summary>
        /// <param name="condition">Condition of an email object that can be used to filter results</param>
        /// <param name="value">Expected condition value</param>
        [JsonConstructor]
        public ConditionOption(ConditionEnum condition, ValueEnum value)
        {
            Condition = condition;
            Value = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Condition of an email object that can be used to filter results
        /// </summary>
        /// <value>Condition of an email object that can be used to filter results</value>
        public enum ConditionEnum
        {
            /// <summary>
            /// Enum HASATTACHMENTS for value: HAS_ATTACHMENTS
            /// </summary>
            HASATTACHMENTS = 1
        }

        /// <summary>
        /// Returns a <see cref="ConditionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ConditionEnum ConditionEnumFromString(string value)
        {
            if (value.Equals("HAS_ATTACHMENTS"))
                return ConditionEnum.HASATTACHMENTS;

            throw new NotImplementedException($"Could not convert value to type ConditionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ConditionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConditionEnum? ConditionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("HAS_ATTACHMENTS"))
                return ConditionEnum.HASATTACHMENTS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConditionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ConditionEnumToJsonValue(ConditionEnum value)
        {
            if (value == ConditionEnum.HASATTACHMENTS)
                return "HAS_ATTACHMENTS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Condition of an email object that can be used to filter results
        /// </summary>
        /// <value>Condition of an email object that can be used to filter results</value>
        [JsonPropertyName("condition")]
        public ConditionEnum Condition { get; set; }

        /// <summary>
        /// Expected condition value
        /// </summary>
        /// <value>Expected condition value</value>
        public enum ValueEnum
        {
            /// <summary>
            /// Enum TRUE for value: TRUE
            /// </summary>
            TRUE = 1,

            /// <summary>
            /// Enum FALSE for value: FALSE
            /// </summary>
            FALSE = 2
        }

        /// <summary>
        /// Returns a <see cref="ValueEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ValueEnum ValueEnumFromString(string value)
        {
            if (value.Equals("TRUE"))
                return ValueEnum.TRUE;

            if (value.Equals("FALSE"))
                return ValueEnum.FALSE;

            throw new NotImplementedException($"Could not convert value to type ValueEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ValueEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ValueEnum? ValueEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TRUE"))
                return ValueEnum.TRUE;

            if (value.Equals("FALSE"))
                return ValueEnum.FALSE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ValueEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ValueEnumToJsonValue(ValueEnum value)
        {
            if (value == ValueEnum.TRUE)
                return "TRUE";

            if (value == ValueEnum.FALSE)
                return "FALSE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Expected condition value
        /// </summary>
        /// <value>Expected condition value</value>
        [JsonPropertyName("value")]
        public ValueEnum Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConditionOption {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConditionOption" />
    /// </summary>
    public class ConditionOptionJsonConverter : JsonConverter<ConditionOption>
    {
        /// <summary>
        /// Deserializes json to <see cref="ConditionOption" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConditionOption Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ConditionOption.ConditionEnum?> condition = default;
            Option<ConditionOption.ValueEnum?> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "condition":
                            string conditionRawValue = utf8JsonReader.GetString();
                            if (conditionRawValue != null)
                                condition = new Option<ConditionOption.ConditionEnum?>(ConditionOption.ConditionEnumFromStringOrDefault(conditionRawValue));
                            break;
                        case "value":
                            string valueRawValue = utf8JsonReader.GetString();
                            if (valueRawValue != null)
                                value = new Option<ConditionOption.ValueEnum?>(ConditionOption.ValueEnumFromStringOrDefault(valueRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!condition.IsSet)
                throw new ArgumentException("Property is required for class ConditionOption.", nameof(condition));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class ConditionOption.", nameof(value));

            if (condition.IsSet && condition.Value == null)
                throw new ArgumentNullException(nameof(condition), "Property is not nullable for class ConditionOption.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class ConditionOption.");

            return new ConditionOption(condition.Value.Value, value.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="ConditionOption" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="conditionOption"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConditionOption conditionOption, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, conditionOption, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConditionOption" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="conditionOption"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ConditionOption conditionOption, JsonSerializerOptions jsonSerializerOptions)
        {
            var conditionRawValue = ConditionOption.ConditionEnumToJsonValue(conditionOption.Condition);
            writer.WriteString("condition", conditionRawValue);
            var valueRawValue = ConditionOption.ValueEnumToJsonValue(conditionOption.Value);
            writer.WriteString("value", valueRawValue);
        }
    }
}
