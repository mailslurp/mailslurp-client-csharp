/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = mailslurp.Client.OpenAPIDateConverter;

namespace mailslurp.Model
{
    /// <summary>
    /// Options for matching emails in an inbox based on a condition such as &#x60;HAS_ATTACHMENTS&#x3D;TRUE&#x60;
    /// </summary>
    [DataContract(Name = "ConditionOption")]
    public partial class ConditionOption : IValidatableObject
    {
        /// <summary>
        /// Condition of an email object that can be used to filter results
        /// </summary>
        /// <value>Condition of an email object that can be used to filter results</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionEnum
        {
            /// <summary>
            /// Enum HASATTACHMENTS for value: HAS_ATTACHMENTS
            /// </summary>
            [EnumMember(Value = "HAS_ATTACHMENTS")]
            HASATTACHMENTS = 1
        }


        /// <summary>
        /// Condition of an email object that can be used to filter results
        /// </summary>
        /// <value>Condition of an email object that can be used to filter results</value>
        [DataMember(Name = "condition", IsRequired = true, EmitDefaultValue = true)]
        public ConditionEnum Condition { get; set; }
        /// <summary>
        /// Expected condition value
        /// </summary>
        /// <value>Expected condition value</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValueEnum
        {
            /// <summary>
            /// Enum TRUE for value: TRUE
            /// </summary>
            [EnumMember(Value = "TRUE")]
            TRUE = 1,

            /// <summary>
            /// Enum FALSE for value: FALSE
            /// </summary>
            [EnumMember(Value = "FALSE")]
            FALSE = 2
        }


        /// <summary>
        /// Expected condition value
        /// </summary>
        /// <value>Expected condition value</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public ValueEnum Value { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConditionOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionOption" /> class.
        /// </summary>
        /// <param name="condition">Condition of an email object that can be used to filter results (required).</param>
        /// <param name="value">Expected condition value (required).</param>
        public ConditionOption(ConditionEnum condition = default, ValueEnum value = default)
        {
            this.Condition = condition;
            this.Value = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConditionOption {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
