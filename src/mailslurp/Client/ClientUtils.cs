/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using mailslurp.Model;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("mailslurp.Test")]

namespace mailslurp.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static class ClientUtils
    {

        /// <summary>
        /// A delegate for events.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns></returns>
        public delegate void EventHandler<T>(object sender, T e) where T : EventArgs;

        /// <summary>
        /// An enum of headers
        /// </summary>
        public enum ApiKeyHeader
        {
            /// <summary>
            /// The x-api-key header
            /// </summary>
            X_api_key
        }

        /// <summary>
        /// Converte an ApiKeyHeader to a string
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="System.ComponentModel.InvalidEnumArgumentException"></exception>
        public static string ApiKeyHeaderToString(ApiKeyHeader value)
        {
            switch(value)
            {
                case ApiKeyHeader.X_api_key:
                    return "x-api-key";
                default:
                    throw new System.ComponentModel.InvalidEnumArgumentException(nameof(value), (int)value, typeof(ApiKeyHeader));
            }
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(string json, JsonSerializerOptions options, out T result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(json, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reader"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(ref Utf8JsonReader reader, JsonSerializerOptions options, out T result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(ref reader, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="format">The DateTime serialization format.</param>
        /// <returns>Formatted string.</returns>
        public static string ParameterToString(object obj, string format = ISO8601_DATETIME_FORMAT)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString(format);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString(format);
            if (obj is bool boolean)
                return boolean
                    ? "true"
                    : "false";
            if (obj is AbstractWebhookPayload.EventNameEnum abstractWebhookPayloadEventNameEnum)
                return AbstractWebhookPayload.EventNameEnumToJsonValue(abstractWebhookPayloadEventNameEnum);
            if (obj is ConditionOption.ConditionEnum conditionOptionConditionEnum)
                return ConditionOption.ConditionEnumToJsonValue(conditionOptionConditionEnum);
            if (obj is ConditionOption.ValueEnum conditionOptionValueEnum)
                return ConditionOption.ValueEnumToJsonValue(conditionOptionValueEnum);
            if (obj is ConnectorEventDto.StatusEnum connectorEventDtoStatusEnum)
                return ConnectorEventDto.StatusEnumToJsonValue(connectorEventDtoStatusEnum);
            if (obj is ConnectorEventDto.EventTypeEnum connectorEventDtoEventTypeEnum)
                return ConnectorEventDto.EventTypeEnumToJsonValue(connectorEventDtoEventTypeEnum);
            if (obj is ConnectorEventProjection.EventTypeEnum connectorEventProjectionEventTypeEnum)
                return ConnectorEventProjection.EventTypeEnumToJsonValue(connectorEventProjectionEventTypeEnum);
            if (obj is ConnectorEventProjection.StatusEnum connectorEventProjectionStatusEnum)
                return ConnectorEventProjection.StatusEnumToJsonValue(connectorEventProjectionStatusEnum);
            if (obj is ConnectorSyncSettingsDto.SyncScheduleTypeEnum connectorSyncSettingsDtoSyncScheduleTypeEnum)
                return ConnectorSyncSettingsDto.SyncScheduleTypeEnumToJsonValue(connectorSyncSettingsDtoSyncScheduleTypeEnum);
            if (obj is CreateConnectorSyncSettingsOptions.SyncScheduleTypeEnum createConnectorSyncSettingsOptionsSyncScheduleTypeEnum)
                return CreateConnectorSyncSettingsOptions.SyncScheduleTypeEnumToJsonValue(createConnectorSyncSettingsOptionsSyncScheduleTypeEnum);
            if (obj is CreateDomainOptions.DomainTypeEnum createDomainOptionsDomainTypeEnum)
                return CreateDomainOptions.DomainTypeEnumToJsonValue(createDomainOptionsDomainTypeEnum);
            if (obj is CreateEmergencyAddressOptions.IsoCountryCodeEnum createEmergencyAddressOptionsIsoCountryCodeEnum)
                return CreateEmergencyAddressOptions.IsoCountryCodeEnumToJsonValue(createEmergencyAddressOptionsIsoCountryCodeEnum);
            if (obj is CreateInboxDto.InboxTypeEnum createInboxDtoInboxTypeEnum)
                return CreateInboxDto.InboxTypeEnumToJsonValue(createInboxDtoInboxTypeEnum);
            if (obj is CreateInboxForwarderOptions.FieldEnum createInboxForwarderOptionsFieldEnum)
                return CreateInboxForwarderOptions.FieldEnumToJsonValue(createInboxForwarderOptionsFieldEnum);
            if (obj is CreateInboxReplierOptions.FieldEnum createInboxReplierOptionsFieldEnum)
                return CreateInboxReplierOptions.FieldEnumToJsonValue(createInboxReplierOptionsFieldEnum);
            if (obj is CreateInboxRulesetOptions.ScopeEnum createInboxRulesetOptionsScopeEnum)
                return CreateInboxRulesetOptions.ScopeEnumToJsonValue(createInboxRulesetOptionsScopeEnum);
            if (obj is CreateInboxRulesetOptions.ActionEnum createInboxRulesetOptionsActionEnum)
                return CreateInboxRulesetOptions.ActionEnumToJsonValue(createInboxRulesetOptionsActionEnum);
            if (obj is CreatePhoneNumberOptions.PhoneCountryEnum createPhoneNumberOptionsPhoneCountryEnum)
                return CreatePhoneNumberOptions.PhoneCountryEnumToJsonValue(createPhoneNumberOptionsPhoneCountryEnum);
            if (obj is CreatePhoneNumberOptions.ScheduleEnum createPhoneNumberOptionsScheduleEnum)
                return CreatePhoneNumberOptions.ScheduleEnumToJsonValue(createPhoneNumberOptionsScheduleEnum);
            if (obj is CreateWebhookOptions.EventNameEnum createWebhookOptionsEventNameEnum)
                return CreateWebhookOptions.EventNameEnumToJsonValue(createWebhookOptionsEventNameEnum);
            if (obj is DNSLookupOptions.RecordTypesEnum dNSLookupOptionsRecordTypesEnum)
                return DNSLookupOptions.RecordTypesEnumToJsonValue(dNSLookupOptionsRecordTypesEnum);
            if (obj is DNSLookupResult.RecordTypeEnum dNSLookupResultRecordTypeEnum)
                return DNSLookupResult.RecordTypeEnumToJsonValue(dNSLookupResultRecordTypeEnum);
            if (obj is DomainDto.DomainTypeEnum domainDtoDomainTypeEnum)
                return DomainDto.DomainTypeEnumToJsonValue(domainDtoDomainTypeEnum);
            if (obj is DomainGroup.LabelEnum domainGroupLabelEnum)
                return DomainGroup.LabelEnumToJsonValue(domainGroupLabelEnum);
            if (obj is DomainInformation.DomainTypeEnum domainInformationDomainTypeEnum)
                return DomainInformation.DomainTypeEnumToJsonValue(domainInformationDomainTypeEnum);
            if (obj is DomainNameRecord.LabelEnum domainNameRecordLabelEnum)
                return DomainNameRecord.LabelEnumToJsonValue(domainNameRecordLabelEnum);
            if (obj is DomainNameRecord.RecordTypeEnum domainNameRecordRecordTypeEnum)
                return DomainNameRecord.RecordTypeEnumToJsonValue(domainNameRecordRecordTypeEnum);
            if (obj is DomainPreview.DomainTypeEnum domainPreviewDomainTypeEnum)
                return DomainPreview.DomainTypeEnumToJsonValue(domainPreviewDomainTypeEnum);
            if (obj is EmailFeatureCategoryName.SlugEnum emailFeatureCategoryNameSlugEnum)
                return EmailFeatureCategoryName.SlugEnumToJsonValue(emailFeatureCategoryNameSlugEnum);
            if (obj is EmailFeatureFamilyName.SlugEnum emailFeatureFamilyNameSlugEnum)
                return EmailFeatureFamilyName.SlugEnumToJsonValue(emailFeatureFamilyNameSlugEnum);
            if (obj is EmailFeatureFamilyStatistics.FeatureEnum emailFeatureFamilyStatisticsFeatureEnum)
                return EmailFeatureFamilyStatistics.FeatureEnumToJsonValue(emailFeatureFamilyStatisticsFeatureEnum);
            if (obj is EmailFeatureFamilyStatistics.FamilyEnum emailFeatureFamilyStatisticsFamilyEnum)
                return EmailFeatureFamilyStatistics.FamilyEnumToJsonValue(emailFeatureFamilyStatisticsFamilyEnum);
            if (obj is EmailFeatureOverview.FeatureEnum emailFeatureOverviewFeatureEnum)
                return EmailFeatureOverview.FeatureEnumToJsonValue(emailFeatureOverviewFeatureEnum);
            if (obj is EmailFeatureOverview.StatusesEnum emailFeatureOverviewStatusesEnum)
                return EmailFeatureOverview.StatusesEnumToJsonValue(emailFeatureOverviewStatusesEnum);
            if (obj is EmailFeatureOverview.CategoryEnum emailFeatureOverviewCategoryEnum)
                return EmailFeatureOverview.CategoryEnumToJsonValue(emailFeatureOverviewCategoryEnum);
            if (obj is EmailFeaturePlatformName.SlugEnum emailFeaturePlatformNameSlugEnum)
                return EmailFeaturePlatformName.SlugEnumToJsonValue(emailFeaturePlatformNameSlugEnum);
            if (obj is EmailFeaturePlatformStatistics.PlatformEnum emailFeaturePlatformStatisticsPlatformEnum)
                return EmailFeaturePlatformStatistics.PlatformEnumToJsonValue(emailFeaturePlatformStatisticsPlatformEnum);
            if (obj is EmailFeatureSupportFlags.StatusEnum emailFeatureSupportFlagsStatusEnum)
                return EmailFeatureSupportFlags.StatusEnumToJsonValue(emailFeatureSupportFlagsStatusEnum);
            if (obj is EmailFeatureSupportResult.DetectedFeaturesEnum emailFeatureSupportResultDetectedFeaturesEnum)
                return EmailFeatureSupportResult.DetectedFeaturesEnumToJsonValue(emailFeatureSupportResultDetectedFeaturesEnum);
            if (obj is EmailFeatureSupportStatusPercentage.StatusEnum emailFeatureSupportStatusPercentageStatusEnum)
                return EmailFeatureSupportStatusPercentage.StatusEnumToJsonValue(emailFeatureSupportStatusPercentageStatusEnum);
            if (obj is EmailThreadItem.ItemTypeEnum emailThreadItemItemTypeEnum)
                return EmailThreadItem.ItemTypeEnumToJsonValue(emailThreadItemItemTypeEnum);
            if (obj is EmergencyAddress.PhoneCountryEnum emergencyAddressPhoneCountryEnum)
                return EmergencyAddress.PhoneCountryEnumToJsonValue(emergencyAddressPhoneCountryEnum);
            if (obj is EmergencyAddressDto.PhoneCountryEnum emergencyAddressDtoPhoneCountryEnum)
                return EmergencyAddressDto.PhoneCountryEnumToJsonValue(emergencyAddressDtoPhoneCountryEnum);
            if (obj is EntityAutomationItemProjection.AutomationTypeEnum entityAutomationItemProjectionAutomationTypeEnum)
                return EntityAutomationItemProjection.AutomationTypeEnumToJsonValue(entityAutomationItemProjectionAutomationTypeEnum);
            if (obj is EntityEventItemProjection.EventTypeEnum entityEventItemProjectionEventTypeEnum)
                return EntityEventItemProjection.EventTypeEnumToJsonValue(entityEventItemProjectionEventTypeEnum);
            if (obj is EntityEventItemProjection.SeverityEnum entityEventItemProjectionSeverityEnum)
                return EntityEventItemProjection.SeverityEnumToJsonValue(entityEventItemProjectionSeverityEnum);
            if (obj is EntityFavouriteItemProjection.EntityTypeEnum entityFavouriteItemProjectionEntityTypeEnum)
                return EntityFavouriteItemProjection.EntityTypeEnumToJsonValue(entityFavouriteItemProjectionEntityTypeEnum);
            if (obj is ExportOptions.OutputFormatEnum exportOptionsOutputFormatEnum)
                return ExportOptions.OutputFormatEnumToJsonValue(exportOptionsOutputFormatEnum);
            if (obj is GenerateBimiRecordOptions.VarVersionEnum generateBimiRecordOptionsVarVersionEnum)
                return GenerateBimiRecordOptions.VarVersionEnumToJsonValue(generateBimiRecordOptionsVarVersionEnum);
            if (obj is GenerateBimiRecordResults.TypeEnum generateBimiRecordResultsTypeEnum)
                return GenerateBimiRecordResults.TypeEnumToJsonValue(generateBimiRecordResultsTypeEnum);
            if (obj is GenerateDmarcRecordOptions.VarVersionEnum generateDmarcRecordOptionsVarVersionEnum)
                return GenerateDmarcRecordOptions.VarVersionEnumToJsonValue(generateDmarcRecordOptionsVarVersionEnum);
            if (obj is GenerateDmarcRecordOptions.PolicyEnum generateDmarcRecordOptionsPolicyEnum)
                return GenerateDmarcRecordOptions.PolicyEnumToJsonValue(generateDmarcRecordOptionsPolicyEnum);
            if (obj is GenerateDmarcRecordOptions.SubdomainPolicyEnum generateDmarcRecordOptionsSubdomainPolicyEnum)
                return GenerateDmarcRecordOptions.SubdomainPolicyEnumToJsonValue(generateDmarcRecordOptionsSubdomainPolicyEnum);
            if (obj is GenerateDmarcRecordOptions.ReportFormatEnum generateDmarcRecordOptionsReportFormatEnum)
                return GenerateDmarcRecordOptions.ReportFormatEnumToJsonValue(generateDmarcRecordOptionsReportFormatEnum);
            if (obj is GenerateDmarcRecordOptions.AdkimEnum generateDmarcRecordOptionsAdkimEnum)
                return GenerateDmarcRecordOptions.AdkimEnumToJsonValue(generateDmarcRecordOptionsAdkimEnum);
            if (obj is GenerateDmarcRecordOptions.AspfEnum generateDmarcRecordOptionsAspfEnum)
                return GenerateDmarcRecordOptions.AspfEnumToJsonValue(generateDmarcRecordOptionsAspfEnum);
            if (obj is GenerateDmarcRecordOptions.FoEnum generateDmarcRecordOptionsFoEnum)
                return GenerateDmarcRecordOptions.FoEnumToJsonValue(generateDmarcRecordOptionsFoEnum);
            if (obj is GenerateDmarcRecordResults.TypeEnum generateDmarcRecordResultsTypeEnum)
                return GenerateDmarcRecordResults.TypeEnumToJsonValue(generateDmarcRecordResultsTypeEnum);
            if (obj is GenerateMtaStsRecordOptions.VarVersionEnum generateMtaStsRecordOptionsVarVersionEnum)
                return GenerateMtaStsRecordOptions.VarVersionEnumToJsonValue(generateMtaStsRecordOptionsVarVersionEnum);
            if (obj is GenerateMtaStsRecordOptions.ModeEnum generateMtaStsRecordOptionsModeEnum)
                return GenerateMtaStsRecordOptions.ModeEnumToJsonValue(generateMtaStsRecordOptionsModeEnum);
            if (obj is GenerateMtaStsRecordResults.TypeEnum generateMtaStsRecordResultsTypeEnum)
                return GenerateMtaStsRecordResults.TypeEnumToJsonValue(generateMtaStsRecordResultsTypeEnum);
            if (obj is GenerateStructuredContentEmailOptions.ContentSelectorEnum generateStructuredContentEmailOptionsContentSelectorEnum)
                return GenerateStructuredContentEmailOptions.ContentSelectorEnumToJsonValue(generateStructuredContentEmailOptionsContentSelectorEnum);
            if (obj is GenerateTlsReportingRecordOptions.VarVersionEnum generateTlsReportingRecordOptionsVarVersionEnum)
                return GenerateTlsReportingRecordOptions.VarVersionEnumToJsonValue(generateTlsReportingRecordOptionsVarVersionEnum);
            if (obj is GenerateTlsReportingRecordResults.TypeEnum generateTlsReportingRecordResultsTypeEnum)
                return GenerateTlsReportingRecordResults.TypeEnumToJsonValue(generateTlsReportingRecordResultsTypeEnum);
            if (obj is ImageIssue.SeverityEnum imageIssueSeverityEnum)
                return ImageIssue.SeverityEnumToJsonValue(imageIssueSeverityEnum);
            if (obj is ImapFlagOperationOptions.FlagOperationEnum imapFlagOperationOptionsFlagOperationEnum)
                return ImapFlagOperationOptions.FlagOperationEnumToJsonValue(imapFlagOperationOptionsFlagOperationEnum);
            if (obj is ImapServerStatusOptions.StatusItemsEnum imapServerStatusOptionsStatusItemsEnum)
                return ImapServerStatusOptions.StatusItemsEnumToJsonValue(imapServerStatusOptionsStatusItemsEnum);
            if (obj is InboxDto.InboxTypeEnum inboxDtoInboxTypeEnum)
                return InboxDto.InboxTypeEnumToJsonValue(inboxDtoInboxTypeEnum);
            if (obj is InboxDto.FunctionsAsEnum inboxDtoFunctionsAsEnum)
                return InboxDto.FunctionsAsEnumToJsonValue(inboxDtoFunctionsAsEnum);
            if (obj is InboxDto.AccountRegionEnum inboxDtoAccountRegionEnum)
                return InboxDto.AccountRegionEnumToJsonValue(inboxDtoAccountRegionEnum);
            if (obj is InboxForwarderDto.FieldEnum inboxForwarderDtoFieldEnum)
                return InboxForwarderDto.FieldEnumToJsonValue(inboxForwarderDtoFieldEnum);
            if (obj is InboxForwarderEventDto.StatusEnum inboxForwarderEventDtoStatusEnum)
                return InboxForwarderEventDto.StatusEnumToJsonValue(inboxForwarderEventDtoStatusEnum);
            if (obj is InboxForwarderEventProjection.StatusEnum inboxForwarderEventProjectionStatusEnum)
                return InboxForwarderEventProjection.StatusEnumToJsonValue(inboxForwarderEventProjectionStatusEnum);
            if (obj is InboxPreview.InboxTypeEnum inboxPreviewInboxTypeEnum)
                return InboxPreview.InboxTypeEnumToJsonValue(inboxPreviewInboxTypeEnum);
            if (obj is InboxPreview.FunctionsAsEnum inboxPreviewFunctionsAsEnum)
                return InboxPreview.FunctionsAsEnumToJsonValue(inboxPreviewFunctionsAsEnum);
            if (obj is InboxPreview.AccountRegionEnum inboxPreviewAccountRegionEnum)
                return InboxPreview.AccountRegionEnumToJsonValue(inboxPreviewAccountRegionEnum);
            if (obj is InboxReplierDto.FieldEnum inboxReplierDtoFieldEnum)
                return InboxReplierDto.FieldEnumToJsonValue(inboxReplierDtoFieldEnum);
            if (obj is InboxReplierEventProjection.StatusEnum inboxReplierEventProjectionStatusEnum)
                return InboxReplierEventProjection.StatusEnumToJsonValue(inboxReplierEventProjectionStatusEnum);
            if (obj is InboxRulesetDto.ScopeEnum inboxRulesetDtoScopeEnum)
                return InboxRulesetDto.ScopeEnumToJsonValue(inboxRulesetDtoScopeEnum);
            if (obj is InboxRulesetDto.ActionEnum inboxRulesetDtoActionEnum)
                return InboxRulesetDto.ActionEnumToJsonValue(inboxRulesetDtoActionEnum);
            if (obj is InboxRulesetDto.HandlerEnum inboxRulesetDtoHandlerEnum)
                return InboxRulesetDto.HandlerEnumToJsonValue(inboxRulesetDtoHandlerEnum);
            if (obj is LinkIssue.SeverityEnum linkIssueSeverityEnum)
                return LinkIssue.SeverityEnumToJsonValue(linkIssueSeverityEnum);
            if (obj is MatchOption.FieldEnum matchOptionFieldEnum)
                return MatchOption.FieldEnumToJsonValue(matchOptionFieldEnum);
            if (obj is MatchOption.ShouldEnum matchOptionShouldEnum)
                return MatchOption.ShouldEnumToJsonValue(matchOptionShouldEnum);
            if (obj is OrganizationInboxProjection.InboxTypeEnum organizationInboxProjectionInboxTypeEnum)
                return OrganizationInboxProjection.InboxTypeEnumToJsonValue(organizationInboxProjectionInboxTypeEnum);
            if (obj is OrganizationInboxProjection.FunctionsAsEnum organizationInboxProjectionFunctionsAsEnum)
                return OrganizationInboxProjection.FunctionsAsEnumToJsonValue(organizationInboxProjectionFunctionsAsEnum);
            if (obj is OrganizationInboxProjection.AccountRegionEnum organizationInboxProjectionAccountRegionEnum)
                return OrganizationInboxProjection.AccountRegionEnumToJsonValue(organizationInboxProjectionAccountRegionEnum);
            if (obj is PhoneMessageThreadItemProjection.MessageDirectionEnum phoneMessageThreadItemProjectionMessageDirectionEnum)
                return PhoneMessageThreadItemProjection.MessageDirectionEnumToJsonValue(phoneMessageThreadItemProjectionMessageDirectionEnum);
            if (obj is PhoneMessageThreadProjection.LastMessageDirectionEnum phoneMessageThreadProjectionLastMessageDirectionEnum)
                return PhoneMessageThreadProjection.LastMessageDirectionEnumToJsonValue(phoneMessageThreadProjectionLastMessageDirectionEnum);
            if (obj is PhoneNumberDto.PhoneCountryEnum phoneNumberDtoPhoneCountryEnum)
                return PhoneNumberDto.PhoneCountryEnumToJsonValue(phoneNumberDtoPhoneCountryEnum);
            if (obj is PhoneNumberProjection.PhoneCountryEnum phoneNumberProjectionPhoneCountryEnum)
                return PhoneNumberProjection.PhoneCountryEnumToJsonValue(phoneNumberProjectionPhoneCountryEnum);
            if (obj is PhonePlanAvailabilityItem.PhoneCountryEnum phonePlanAvailabilityItemPhoneCountryEnum)
                return PhonePlanAvailabilityItem.PhoneCountryEnumToJsonValue(phonePlanAvailabilityItemPhoneCountryEnum);
            if (obj is PhonePlanAvailabilityItem.AvailabilityStatusEnum phonePlanAvailabilityItemAvailabilityStatusEnum)
                return PhonePlanAvailabilityItem.AvailabilityStatusEnumToJsonValue(phonePlanAvailabilityItemAvailabilityStatusEnum);
            if (obj is PhonePlanDto.PhoneCountryEnum phonePlanDtoPhoneCountryEnum)
                return PhonePlanDto.PhoneCountryEnumToJsonValue(phonePlanDtoPhoneCountryEnum);
            if (obj is ProviderSettings.MailProviderEnum providerSettingsMailProviderEnum)
                return ProviderSettings.MailProviderEnumToJsonValue(providerSettingsMailProviderEnum);
            if (obj is ReplyToAliasEmailOptions.SendStrategyEnum replyToAliasEmailOptionsSendStrategyEnum)
                return ReplyToAliasEmailOptions.SendStrategyEnumToJsonValue(replyToAliasEmailOptionsSendStrategyEnum);
            if (obj is ReplyToEmailOptions.SendStrategyEnum replyToEmailOptionsSendStrategyEnum)
                return ReplyToEmailOptions.SendStrategyEnumToJsonValue(replyToEmailOptionsSendStrategyEnum);
            if (obj is ReputationItemProjection.ReputationTypeEnum reputationItemProjectionReputationTypeEnum)
                return ReputationItemProjection.ReputationTypeEnumToJsonValue(reputationItemProjectionReputationTypeEnum);
            if (obj is ReputationItemProjection.SeverityEnum reputationItemProjectionSeverityEnum)
                return ReputationItemProjection.SeverityEnumToJsonValue(reputationItemProjectionSeverityEnum);
            if (obj is ScheduledJob.StatusEnum scheduledJobStatusEnum)
                return ScheduledJob.StatusEnumToJsonValue(scheduledJobStatusEnum);
            if (obj is ScheduledJobDto.StatusEnum scheduledJobDtoStatusEnum)
                return ScheduledJobDto.StatusEnumToJsonValue(scheduledJobDtoStatusEnum);
            if (obj is SearchEmailsOptions.SortDirectionEnum searchEmailsOptionsSortDirectionEnum)
                return SearchEmailsOptions.SortDirectionEnumToJsonValue(searchEmailsOptionsSortDirectionEnum);
            if (obj is SearchInboxesOptions.SortDirectionEnum searchInboxesOptionsSortDirectionEnum)
                return SearchInboxesOptions.SortDirectionEnumToJsonValue(searchInboxesOptionsSortDirectionEnum);
            if (obj is SearchInboxesOptions.InboxTypeEnum searchInboxesOptionsInboxTypeEnum)
                return SearchInboxesOptions.InboxTypeEnumToJsonValue(searchInboxesOptionsInboxTypeEnum);
            if (obj is SearchInboxesOptions.InboxFunctionEnum searchInboxesOptionsInboxFunctionEnum)
                return SearchInboxesOptions.InboxFunctionEnumToJsonValue(searchInboxesOptionsInboxFunctionEnum);
            if (obj is SendEmailOptions.SendStrategyEnum sendEmailOptionsSendStrategyEnum)
                return SendEmailOptions.SendStrategyEnumToJsonValue(sendEmailOptionsSendStrategyEnum);
            if (obj is SendEmailOptions.ValidateEmailAddressesEnum sendEmailOptionsValidateEmailAddressesEnum)
                return SendEmailOptions.ValidateEmailAddressesEnumToJsonValue(sendEmailOptionsValidateEmailAddressesEnum);
            if (obj is SmsMatchOption.FieldEnum smsMatchOptionFieldEnum)
                return SmsMatchOption.FieldEnumToJsonValue(smsMatchOptionFieldEnum);
            if (obj is SmsMatchOption.ShouldEnum smsMatchOptionShouldEnum)
                return SmsMatchOption.ShouldEnumToJsonValue(smsMatchOptionShouldEnum);
            if (obj is SpellingIssue.SeverityEnum spellingIssueSeverityEnum)
                return SpellingIssue.SeverityEnumToJsonValue(spellingIssueSeverityEnum);
            if (obj is StructuredOutputSchema.TypeEnum structuredOutputSchemaTypeEnum)
                return StructuredOutputSchema.TypeEnumToJsonValue(structuredOutputSchemaTypeEnum);
            if (obj is TemplateVariable.VariableTypeEnum templateVariableVariableTypeEnum)
                return TemplateVariable.VariableTypeEnumToJsonValue(templateVariableVariableTypeEnum);
            if (obj is UpdateInboxReplierOptions.FieldEnum updateInboxReplierOptionsFieldEnum)
                return UpdateInboxReplierOptions.FieldEnumToJsonValue(updateInboxReplierOptionsFieldEnum);
            if (obj is UserInfoDto.AccountStateEnum userInfoDtoAccountStateEnum)
                return UserInfoDto.AccountStateEnumToJsonValue(userInfoDtoAccountStateEnum);
            if (obj is UserInfoDto.AccountTypeEnum userInfoDtoAccountTypeEnum)
                return UserInfoDto.AccountTypeEnumToJsonValue(userInfoDtoAccountTypeEnum);
            if (obj is UserInfoDto.SubscriptionTypeEnum userInfoDtoSubscriptionTypeEnum)
                return UserInfoDto.SubscriptionTypeEnumToJsonValue(userInfoDtoSubscriptionTypeEnum);
            if (obj is WaitForConditions.CountTypeEnum waitForConditionsCountTypeEnum)
                return WaitForConditions.CountTypeEnumToJsonValue(waitForConditionsCountTypeEnum);
            if (obj is WaitForConditions.SortDirectionEnum waitForConditionsSortDirectionEnum)
                return WaitForConditions.SortDirectionEnumToJsonValue(waitForConditionsSortDirectionEnum);
            if (obj is WaitForSingleSmsOptions.SortDirectionEnum waitForSingleSmsOptionsSortDirectionEnum)
                return WaitForSingleSmsOptions.SortDirectionEnumToJsonValue(waitForSingleSmsOptionsSortDirectionEnum);
            if (obj is WaitForSmsConditions.CountTypeEnum waitForSmsConditionsCountTypeEnum)
                return WaitForSmsConditions.CountTypeEnumToJsonValue(waitForSmsConditionsCountTypeEnum);
            if (obj is WaitForSmsConditions.SortDirectionEnum waitForSmsConditionsSortDirectionEnum)
                return WaitForSmsConditions.SortDirectionEnumToJsonValue(waitForSmsConditionsSortDirectionEnum);
            if (obj is WebhookBouncePayload.EventNameEnum webhookBouncePayloadEventNameEnum)
                return WebhookBouncePayload.EventNameEnumToJsonValue(webhookBouncePayloadEventNameEnum);
            if (obj is WebhookBounceRecipientPayload.EventNameEnum webhookBounceRecipientPayloadEventNameEnum)
                return WebhookBounceRecipientPayload.EventNameEnumToJsonValue(webhookBounceRecipientPayloadEventNameEnum);
            if (obj is WebhookDeliveryStatusPayload.EventNameEnum webhookDeliveryStatusPayloadEventNameEnum)
                return WebhookDeliveryStatusPayload.EventNameEnumToJsonValue(webhookDeliveryStatusPayloadEventNameEnum);
            if (obj is WebhookDto.MethodEnum webhookDtoMethodEnum)
                return WebhookDto.MethodEnumToJsonValue(webhookDtoMethodEnum);
            if (obj is WebhookDto.EventNameEnum webhookDtoEventNameEnum)
                return WebhookDto.EventNameEnumToJsonValue(webhookDtoEventNameEnum);
            if (obj is WebhookDto.HealthStatusEnum webhookDtoHealthStatusEnum)
                return WebhookDto.HealthStatusEnumToJsonValue(webhookDtoHealthStatusEnum);
            if (obj is WebhookEmailOpenedPayload.EventNameEnum webhookEmailOpenedPayloadEventNameEnum)
                return WebhookEmailOpenedPayload.EventNameEnumToJsonValue(webhookEmailOpenedPayloadEventNameEnum);
            if (obj is WebhookEmailReadPayload.EventNameEnum webhookEmailReadPayloadEventNameEnum)
                return WebhookEmailReadPayload.EventNameEnumToJsonValue(webhookEmailReadPayloadEventNameEnum);
            if (obj is WebhookEndpointProjection.HealthEnum webhookEndpointProjectionHealthEnum)
                return WebhookEndpointProjection.HealthEnumToJsonValue(webhookEndpointProjectionHealthEnum);
            if (obj is WebhookNewAttachmentPayload.EventNameEnum webhookNewAttachmentPayloadEventNameEnum)
                return WebhookNewAttachmentPayload.EventNameEnumToJsonValue(webhookNewAttachmentPayloadEventNameEnum);
            if (obj is WebhookNewContactPayload.EventNameEnum webhookNewContactPayloadEventNameEnum)
                return WebhookNewContactPayload.EventNameEnumToJsonValue(webhookNewContactPayloadEventNameEnum);
            if (obj is WebhookNewEmailPayload.EventNameEnum webhookNewEmailPayloadEventNameEnum)
                return WebhookNewEmailPayload.EventNameEnumToJsonValue(webhookNewEmailPayloadEventNameEnum);
            if (obj is WebhookNewSmsPayload.EventNameEnum webhookNewSmsPayloadEventNameEnum)
                return WebhookNewSmsPayload.EventNameEnumToJsonValue(webhookNewSmsPayloadEventNameEnum);
            if (obj is WebhookProjection.EventNameEnum webhookProjectionEventNameEnum)
                return WebhookProjection.EventNameEnumToJsonValue(webhookProjectionEventNameEnum);
            if (obj is WebhookProjection.HealthStatusEnum webhookProjectionHealthStatusEnum)
                return WebhookProjection.HealthStatusEnumToJsonValue(webhookProjectionHealthStatusEnum);
            if (obj is WebhookResultDto.HttpMethodEnum webhookResultDtoHttpMethodEnum)
                return WebhookResultDto.HttpMethodEnumToJsonValue(webhookResultDtoHttpMethodEnum);
            if (obj is WebhookResultDto.WebhookEventEnum webhookResultDtoWebhookEventEnum)
                return WebhookResultDto.WebhookEventEnumToJsonValue(webhookResultDtoWebhookEventEnum);
            if (obj is WebhookResultDto.ResultTypeEnum webhookResultDtoResultTypeEnum)
                return WebhookResultDto.ResultTypeEnumToJsonValue(webhookResultDtoResultTypeEnum);
            if (obj is WebhookTestRequest.MethodEnum webhookTestRequestMethodEnum)
                return WebhookTestRequest.MethodEnumToJsonValue(webhookTestRequestMethodEnum);
            if (obj is ICollection collection)
            {
                List<string> entries = new List<string>();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry));
                return string.Join(",", entries);
            }

            return Convert.ToString(obj, System.Globalization.CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">string to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(global::System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;

            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";

            return string.Join(",", accepts);
        }

        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        private static readonly Regex JsonRegex = new Regex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$");

        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;

            return JsonRegex.IsMatch(mime) || mime.Equals("application/json-patch+json");
        }

        /// <summary>
        /// Get the discriminator
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="discriminator"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public static string GetDiscriminator(Utf8JsonReader utf8JsonReader, string discriminator)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    if (localVarJsonPropertyName != null && localVarJsonPropertyName.Equals(discriminator))
                        return utf8JsonReader.GetString();
                }
            }

            throw new JsonException("The specified discriminator was not found.");
        }

        /// <summary>
        /// The base path of the API
        /// </summary>
        public const string BASE_ADDRESS = "https://csharp.api.mailslurp.com";

        /// <summary>
        /// The scheme of the API
        /// </summary>
        public const string SCHEME = "https";

        /// <summary>
        /// The context path of the API
        /// </summary>
        public const string CONTEXT_PATH = "";

        /// <summary>
        /// The host of the API
        /// </summary>
        public const string HOST = "csharp.api.mailslurp.com";

        /// <summary>
        /// The format to use for DateTime serialization
        /// </summary>
        public const string ISO8601_DATETIME_FORMAT = "o";
    }
}
