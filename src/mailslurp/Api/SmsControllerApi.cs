// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISmsControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SmsControllerApiEvents Events { get; }

        /// <summary>
        /// Delete sent SMS message.
        /// </summary>
        /// <remarks>
        /// Delete a sent SMS message
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sentSmsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSentSmsMessageApiResponse"/>&gt;</returns>
        Task<IDeleteSentSmsMessageApiResponse> DeleteSentSmsMessageAsync(Guid sentSmsId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete sent SMS message.
        /// </summary>
        /// <remarks>
        /// Delete a sent SMS message
        /// </remarks>
        /// <param name="sentSmsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSentSmsMessageApiResponse"/>&gt;</returns>
        Task<IDeleteSentSmsMessageApiResponse> DeleteSentSmsMessageOrDefaultAsync(Guid sentSmsId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all sent SMS messages
        /// </summary>
        /// <remarks>
        /// Delete all sent SMS messages or all messages for a given phone number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSentSmsMessagesApiResponse"/>&gt;</returns>
        Task<IDeleteSentSmsMessagesApiResponse> DeleteSentSmsMessagesAsync(Option<Guid> phoneNumberId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all sent SMS messages
        /// </summary>
        /// <remarks>
        /// Delete all sent SMS messages or all messages for a given phone number
        /// </remarks>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSentSmsMessagesApiResponse"/>&gt;</returns>
        Task<IDeleteSentSmsMessagesApiResponse> DeleteSentSmsMessagesOrDefaultAsync(Option<Guid> phoneNumberId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete SMS message.
        /// </summary>
        /// <remarks>
        /// Delete an SMS message
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSmsMessageApiResponse"/>&gt;</returns>
        Task<IDeleteSmsMessageApiResponse> DeleteSmsMessageAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete SMS message.
        /// </summary>
        /// <remarks>
        /// Delete an SMS message
        /// </remarks>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSmsMessageApiResponse"/>&gt;</returns>
        Task<IDeleteSmsMessageApiResponse> DeleteSmsMessageOrDefaultAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all SMS messages
        /// </summary>
        /// <remarks>
        /// Delete all SMS messages or all messages for a given phone number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSmsMessagesApiResponse"/>&gt;</returns>
        Task<IDeleteSmsMessagesApiResponse> DeleteSmsMessagesAsync(Option<Guid> phoneNumberId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all SMS messages
        /// </summary>
        /// <remarks>
        /// Delete all SMS messages or all messages for a given phone number
        /// </remarks>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSmsMessagesApiResponse"/>&gt;</returns>
        Task<IDeleteSmsMessagesApiResponse> DeleteSmsMessagesOrDefaultAsync(Option<Guid> phoneNumberId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Optional receiving phone number to filter SMS messages for (optional)</param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllSmsMessagesApiResponse"/>&gt;</returns>
        Task<IGetAllSmsMessagesApiResponse> GetAllSmsMessagesAsync(Option<Guid> phoneNumber = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="phoneNumber">Optional receiving phone number to filter SMS messages for (optional)</param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllSmsMessagesApiResponse"/>&gt;</returns>
        Task<IGetAllSmsMessagesApiResponse> GetAllSmsMessagesOrDefaultAsync(Option<Guid> phoneNumber = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get reply for an SMS message
        /// </summary>
        /// <remarks>
        /// Get reply for an SMS message.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReplyForSmsMessageApiResponse"/>&gt;</returns>
        Task<IGetReplyForSmsMessageApiResponse> GetReplyForSmsMessageAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get reply for an SMS message
        /// </summary>
        /// <remarks>
        /// Get reply for an SMS message.
        /// </remarks>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReplyForSmsMessageApiResponse"/>&gt;</returns>
        Task<IGetReplyForSmsMessageApiResponse> GetReplyForSmsMessageOrDefaultAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get sent SMS count
        /// </summary>
        /// <remarks>
        /// Get number of sent SMS
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsCountApiResponse"/>&gt;</returns>
        Task<IGetSentSmsCountApiResponse> GetSentSmsCountAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get sent SMS count
        /// </summary>
        /// <remarks>
        /// Get number of sent SMS
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsCountApiResponse"/>&gt;</returns>
        Task<IGetSentSmsCountApiResponse> GetSentSmsCountOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get sent SMS content including body. Expects sent SMS to exist by ID.
        /// </summary>
        /// <remarks>
        /// Returns an SMS summary object with content.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sentSmsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsMessageApiResponse"/>&gt;</returns>
        Task<IGetSentSmsMessageApiResponse> GetSentSmsMessageAsync(Guid sentSmsId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get sent SMS content including body. Expects sent SMS to exist by ID.
        /// </summary>
        /// <remarks>
        /// Returns an SMS summary object with content.
        /// </remarks>
        /// <param name="sentSmsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsMessageApiResponse"/>&gt;</returns>
        Task<IGetSentSmsMessageApiResponse> GetSentSmsMessageOrDefaultAsync(Guid sentSmsId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all SMS messages in all phone numbers in paginated form. .
        /// </summary>
        /// <remarks>
        /// By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Optional phone number to filter sent SMS messages for (optional)</param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsMessagesPaginatedApiResponse"/>&gt;</returns>
        Task<IGetSentSmsMessagesPaginatedApiResponse> GetSentSmsMessagesPaginatedAsync(Option<Guid> phoneNumber = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all SMS messages in all phone numbers in paginated form. .
        /// </summary>
        /// <remarks>
        /// By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
        /// </remarks>
        /// <param name="phoneNumber">Optional phone number to filter sent SMS messages for (optional)</param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsMessagesPaginatedApiResponse"/>&gt;</returns>
        Task<IGetSentSmsMessagesPaginatedApiResponse> GetSentSmsMessagesPaginatedOrDefaultAsync(Option<Guid> phoneNumber = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SMS count
        /// </summary>
        /// <remarks>
        /// Get number of SMS
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsCountApiResponse"/>&gt;</returns>
        Task<IGetSmsCountApiResponse> GetSmsCountAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SMS count
        /// </summary>
        /// <remarks>
        /// Get number of SMS
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsCountApiResponse"/>&gt;</returns>
        Task<IGetSmsCountApiResponse> GetSmsCountOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
        /// </summary>
        /// <remarks>
        /// Returns a SMS summary object with content.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsMessageApiResponse"/>&gt;</returns>
        Task<IGetSmsMessageApiResponse> GetSmsMessageAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
        /// </summary>
        /// <remarks>
        /// Returns a SMS summary object with content.
        /// </remarks>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsMessageApiResponse"/>&gt;</returns>
        Task<IGetSmsMessageApiResponse> GetSmsMessageOrDefaultAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get unread SMS count
        /// </summary>
        /// <remarks>
        /// Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUnreadSmsCountApiResponse"/>&gt;</returns>
        Task<IGetUnreadSmsCountApiResponse> GetUnreadSmsCountAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get unread SMS count
        /// </summary>
        /// <remarks>
        /// Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUnreadSmsCountApiResponse"/>&gt;</returns>
        Task<IGetUnreadSmsCountApiResponse> GetUnreadSmsCountOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send a reply to a received SMS message. Replies are sent from the receiving number.
        /// </summary>
        /// <remarks>
        /// Reply to an SMS message.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsId"></param>
        /// <param name="smsReplyOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplyToSmsMessageApiResponse"/>&gt;</returns>
        Task<IReplyToSmsMessageApiResponse> ReplyToSmsMessageAsync(Guid smsId, SmsReplyOptions smsReplyOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send a reply to a received SMS message. Replies are sent from the receiving number.
        /// </summary>
        /// <remarks>
        /// Reply to an SMS message.
        /// </remarks>
        /// <param name="smsId"></param>
        /// <param name="smsReplyOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplyToSmsMessageApiResponse"/>&gt;</returns>
        Task<IReplyToSmsMessageApiResponse> ReplyToSmsMessageOrDefaultAsync(Guid smsId, SmsReplyOptions smsReplyOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsSendOptions"></param>
        /// <param name="fromPhoneNumber">Phone number to send from in E.164 format (optional)</param>
        /// <param name="fromPhoneId">Phone number ID to send from in UUID form (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendSmsApiResponse"/>&gt;</returns>
        Task<ISendSmsApiResponse> SendSmsAsync(SmsSendOptions smsSendOptions, Option<string> fromPhoneNumber = default, Option<Guid> fromPhoneId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="smsSendOptions"></param>
        /// <param name="fromPhoneNumber">Phone number to send from in E.164 format (optional)</param>
        /// <param name="fromPhoneId">Phone number ID to send from in UUID form (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendSmsApiResponse"/>&gt;</returns>
        Task<ISendSmsApiResponse> SendSmsOrDefaultAsync(SmsSendOptions smsSendOptions, Option<string> fromPhoneNumber = default, Option<Guid> fromPhoneId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsId">ID of SMS to set favourite state</param>
        /// <param name="favourited"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetSmsFavouritedApiResponse"/>&gt;</returns>
        Task<ISetSmsFavouritedApiResponse> SetSmsFavouritedAsync(Guid smsId, bool favourited, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="smsId">ID of SMS to set favourite state</param>
        /// <param name="favourited"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetSmsFavouritedApiResponse"/>&gt;</returns>
        Task<ISetSmsFavouritedApiResponse> SetSmsFavouritedOrDefaultAsync(Guid smsId, bool favourited, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteSentSmsMessageApiResponse"/>
    /// </summary>
    public interface IDeleteSentSmsMessageApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSentSmsMessagesApiResponse"/>
    /// </summary>
    public interface IDeleteSentSmsMessagesApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSmsMessageApiResponse"/>
    /// </summary>
    public interface IDeleteSmsMessageApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSmsMessagesApiResponse"/>
    /// </summary>
    public interface IDeleteSmsMessagesApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllSmsMessagesApiResponse"/>
    /// </summary>
    public interface IGetAllSmsMessagesApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageSmsProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetReplyForSmsMessageApiResponse"/>
    /// </summary>
    public interface IGetReplyForSmsMessageApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ReplyForSms>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSentSmsCountApiResponse"/>
    /// </summary>
    public interface IGetSentSmsCountApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.CountDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSentSmsMessageApiResponse"/>
    /// </summary>
    public interface IGetSentSmsMessageApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.SentSmsDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSentSmsMessagesPaginatedApiResponse"/>
    /// </summary>
    public interface IGetSentSmsMessagesPaginatedApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageSentSmsProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSmsCountApiResponse"/>
    /// </summary>
    public interface IGetSmsCountApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.CountDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSmsMessageApiResponse"/>
    /// </summary>
    public interface IGetSmsMessageApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.SmsDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUnreadSmsCountApiResponse"/>
    /// </summary>
    public interface IGetUnreadSmsCountApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.UnreadCount>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IReplyToSmsMessageApiResponse"/>
    /// </summary>
    public interface IReplyToSmsMessageApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.SentSmsDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISendSmsApiResponse"/>
    /// </summary>
    public interface ISendSmsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.SentSmsDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISetSmsFavouritedApiResponse"/>
    /// </summary>
    public interface ISetSmsFavouritedApiResponse : mailslurp.Client.IApiResponse, INoContent<mailslurp.Model.SmsDto>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SmsControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteSentSmsMessage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteSentSmsMessage;

        internal void ExecuteOnDeleteSentSmsMessage(SmsControllerApi.DeleteSentSmsMessageApiResponse apiResponse)
        {
            OnDeleteSentSmsMessage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSentSmsMessage(Exception exception)
        {
            OnErrorDeleteSentSmsMessage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteSentSmsMessages;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteSentSmsMessages;

        internal void ExecuteOnDeleteSentSmsMessages(SmsControllerApi.DeleteSentSmsMessagesApiResponse apiResponse)
        {
            OnDeleteSentSmsMessages?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSentSmsMessages(Exception exception)
        {
            OnErrorDeleteSentSmsMessages?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteSmsMessage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteSmsMessage;

        internal void ExecuteOnDeleteSmsMessage(SmsControllerApi.DeleteSmsMessageApiResponse apiResponse)
        {
            OnDeleteSmsMessage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSmsMessage(Exception exception)
        {
            OnErrorDeleteSmsMessage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteSmsMessages;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteSmsMessages;

        internal void ExecuteOnDeleteSmsMessages(SmsControllerApi.DeleteSmsMessagesApiResponse apiResponse)
        {
            OnDeleteSmsMessages?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSmsMessages(Exception exception)
        {
            OnErrorDeleteSmsMessages?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllSmsMessages;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllSmsMessages;

        internal void ExecuteOnGetAllSmsMessages(SmsControllerApi.GetAllSmsMessagesApiResponse apiResponse)
        {
            OnGetAllSmsMessages?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllSmsMessages(Exception exception)
        {
            OnErrorGetAllSmsMessages?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetReplyForSmsMessage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetReplyForSmsMessage;

        internal void ExecuteOnGetReplyForSmsMessage(SmsControllerApi.GetReplyForSmsMessageApiResponse apiResponse)
        {
            OnGetReplyForSmsMessage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetReplyForSmsMessage(Exception exception)
        {
            OnErrorGetReplyForSmsMessage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetSentSmsCount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetSentSmsCount;

        internal void ExecuteOnGetSentSmsCount(SmsControllerApi.GetSentSmsCountApiResponse apiResponse)
        {
            OnGetSentSmsCount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSentSmsCount(Exception exception)
        {
            OnErrorGetSentSmsCount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetSentSmsMessage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetSentSmsMessage;

        internal void ExecuteOnGetSentSmsMessage(SmsControllerApi.GetSentSmsMessageApiResponse apiResponse)
        {
            OnGetSentSmsMessage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSentSmsMessage(Exception exception)
        {
            OnErrorGetSentSmsMessage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetSentSmsMessagesPaginated;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetSentSmsMessagesPaginated;

        internal void ExecuteOnGetSentSmsMessagesPaginated(SmsControllerApi.GetSentSmsMessagesPaginatedApiResponse apiResponse)
        {
            OnGetSentSmsMessagesPaginated?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSentSmsMessagesPaginated(Exception exception)
        {
            OnErrorGetSentSmsMessagesPaginated?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetSmsCount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetSmsCount;

        internal void ExecuteOnGetSmsCount(SmsControllerApi.GetSmsCountApiResponse apiResponse)
        {
            OnGetSmsCount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSmsCount(Exception exception)
        {
            OnErrorGetSmsCount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetSmsMessage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetSmsMessage;

        internal void ExecuteOnGetSmsMessage(SmsControllerApi.GetSmsMessageApiResponse apiResponse)
        {
            OnGetSmsMessage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSmsMessage(Exception exception)
        {
            OnErrorGetSmsMessage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetUnreadSmsCount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetUnreadSmsCount;

        internal void ExecuteOnGetUnreadSmsCount(SmsControllerApi.GetUnreadSmsCountApiResponse apiResponse)
        {
            OnGetUnreadSmsCount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUnreadSmsCount(Exception exception)
        {
            OnErrorGetUnreadSmsCount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnReplyToSmsMessage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorReplyToSmsMessage;

        internal void ExecuteOnReplyToSmsMessage(SmsControllerApi.ReplyToSmsMessageApiResponse apiResponse)
        {
            OnReplyToSmsMessage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReplyToSmsMessage(Exception exception)
        {
            OnErrorReplyToSmsMessage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendSms;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendSms;

        internal void ExecuteOnSendSms(SmsControllerApi.SendSmsApiResponse apiResponse)
        {
            OnSendSms?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendSms(Exception exception)
        {
            OnErrorSendSms?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSetSmsFavourited;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSetSmsFavourited;

        internal void ExecuteOnSetSmsFavourited(SmsControllerApi.SetSmsFavouritedApiResponse apiResponse)
        {
            OnSetSmsFavourited?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetSmsFavourited(Exception exception)
        {
            OnErrorSetSmsFavourited?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SmsControllerApi : ISmsControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SmsControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SmsControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SmsControllerApi(ILogger<SmsControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SmsControllerApiEvents smsControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SmsControllerApi>();
            HttpClient = httpClient;
            Events = smsControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatDeleteSentSmsMessage(ref Guid sentSmsId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sentSmsId"></param>
        private void AfterDeleteSentSmsMessageDefaultImplementation(IDeleteSentSmsMessageApiResponse apiResponseLocalVar, Guid sentSmsId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSentSmsMessage(ref suppressDefaultLog, apiResponseLocalVar, sentSmsId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sentSmsId"></param>
        partial void AfterDeleteSentSmsMessage(ref bool suppressDefaultLog, IDeleteSentSmsMessageApiResponse apiResponseLocalVar, Guid sentSmsId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sentSmsId"></param>
        private void OnErrorDeleteSentSmsMessageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid sentSmsId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSentSmsMessage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sentSmsId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sentSmsId"></param>
        partial void OnErrorDeleteSentSmsMessage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid sentSmsId);

        /// <summary>
        /// Delete sent SMS message. Delete a sent SMS message
        /// </summary>
        /// <param name="sentSmsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSentSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IDeleteSentSmsMessageApiResponse> DeleteSentSmsMessageOrDefaultAsync(Guid sentSmsId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSentSmsMessageAsync(sentSmsId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete sent SMS message. Delete a sent SMS message
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sentSmsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSentSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IDeleteSentSmsMessageApiResponse> DeleteSentSmsMessageAsync(Guid sentSmsId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteSentSmsMessage(ref sentSmsId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/sent/{sentSmsId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/sent/{sentSmsId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsentSmsId%7D", Uri.EscapeDataString(sentSmsId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteSentSmsMessageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSentSmsMessageApiResponse>();

                        DeleteSentSmsMessageApiResponse apiResponseLocalVar = new DeleteSentSmsMessageApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/sent/{sentSmsId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSentSmsMessageDefaultImplementation(apiResponseLocalVar, sentSmsId);

                        Events.ExecuteOnDeleteSentSmsMessage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSentSmsMessageDefaultImplementation(e, "/sms/sent/{sentSmsId}", uriBuilderLocalVar.Path, sentSmsId);
                Events.ExecuteOnErrorDeleteSentSmsMessage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSentSmsMessageApiResponse"/>
        /// </summary>
        public partial class DeleteSentSmsMessageApiResponse : mailslurp.Client.ApiResponse, IDeleteSentSmsMessageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSentSmsMessageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSentSmsMessageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSentSmsMessageApiResponse(ILogger<DeleteSentSmsMessageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSentSmsMessages(ref Option<Guid> phoneNumberId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        private void AfterDeleteSentSmsMessagesDefaultImplementation(IDeleteSentSmsMessagesApiResponse apiResponseLocalVar, Option<Guid> phoneNumberId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSentSmsMessages(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        partial void AfterDeleteSentSmsMessages(ref bool suppressDefaultLog, IDeleteSentSmsMessagesApiResponse apiResponseLocalVar, Option<Guid> phoneNumberId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        private void OnErrorDeleteSentSmsMessagesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> phoneNumberId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSentSmsMessages(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        partial void OnErrorDeleteSentSmsMessages(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> phoneNumberId);

        /// <summary>
        /// Delete all sent SMS messages Delete all sent SMS messages or all messages for a given phone number
        /// </summary>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSentSmsMessagesApiResponse"/>&gt;</returns>
        public async Task<IDeleteSentSmsMessagesApiResponse> DeleteSentSmsMessagesOrDefaultAsync(Option<Guid> phoneNumberId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSentSmsMessagesAsync(phoneNumberId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete all sent SMS messages Delete all sent SMS messages or all messages for a given phone number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSentSmsMessagesApiResponse"/>&gt;</returns>
        public async Task<IDeleteSentSmsMessagesApiResponse> DeleteSentSmsMessagesAsync(Option<Guid> phoneNumberId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteSentSmsMessages(ref phoneNumberId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/sent"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/sent");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (phoneNumberId.IsSet)
                        parseQueryStringLocalVar["phoneNumberId"] = ClientUtils.ParameterToString(phoneNumberId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteSentSmsMessagesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSentSmsMessagesApiResponse>();

                        DeleteSentSmsMessagesApiResponse apiResponseLocalVar = new DeleteSentSmsMessagesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/sent", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSentSmsMessagesDefaultImplementation(apiResponseLocalVar, phoneNumberId);

                        Events.ExecuteOnDeleteSentSmsMessages(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSentSmsMessagesDefaultImplementation(e, "/sms/sent", uriBuilderLocalVar.Path, phoneNumberId);
                Events.ExecuteOnErrorDeleteSentSmsMessages(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSentSmsMessagesApiResponse"/>
        /// </summary>
        public partial class DeleteSentSmsMessagesApiResponse : mailslurp.Client.ApiResponse, IDeleteSentSmsMessagesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSentSmsMessagesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSentSmsMessagesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSentSmsMessagesApiResponse(ILogger<DeleteSentSmsMessagesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSmsMessage(ref Guid smsId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsId"></param>
        private void AfterDeleteSmsMessageDefaultImplementation(IDeleteSmsMessageApiResponse apiResponseLocalVar, Guid smsId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSmsMessage(ref suppressDefaultLog, apiResponseLocalVar, smsId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsId"></param>
        partial void AfterDeleteSmsMessage(ref bool suppressDefaultLog, IDeleteSmsMessageApiResponse apiResponseLocalVar, Guid smsId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsId"></param>
        private void OnErrorDeleteSmsMessageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid smsId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSmsMessage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, smsId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsId"></param>
        partial void OnErrorDeleteSmsMessage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid smsId);

        /// <summary>
        /// Delete SMS message. Delete an SMS message
        /// </summary>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IDeleteSmsMessageApiResponse> DeleteSmsMessageOrDefaultAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSmsMessageAsync(smsId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete SMS message. Delete an SMS message
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IDeleteSmsMessageApiResponse> DeleteSmsMessageAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteSmsMessage(ref smsId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/{smsId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/{smsId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsmsId%7D", Uri.EscapeDataString(smsId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteSmsMessageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSmsMessageApiResponse>();

                        DeleteSmsMessageApiResponse apiResponseLocalVar = new DeleteSmsMessageApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/{smsId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSmsMessageDefaultImplementation(apiResponseLocalVar, smsId);

                        Events.ExecuteOnDeleteSmsMessage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSmsMessageDefaultImplementation(e, "/sms/{smsId}", uriBuilderLocalVar.Path, smsId);
                Events.ExecuteOnErrorDeleteSmsMessage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSmsMessageApiResponse"/>
        /// </summary>
        public partial class DeleteSmsMessageApiResponse : mailslurp.Client.ApiResponse, IDeleteSmsMessageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSmsMessageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSmsMessageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSmsMessageApiResponse(ILogger<DeleteSmsMessageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSmsMessages(ref Option<Guid> phoneNumberId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        private void AfterDeleteSmsMessagesDefaultImplementation(IDeleteSmsMessagesApiResponse apiResponseLocalVar, Option<Guid> phoneNumberId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSmsMessages(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        partial void AfterDeleteSmsMessages(ref bool suppressDefaultLog, IDeleteSmsMessagesApiResponse apiResponseLocalVar, Option<Guid> phoneNumberId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        private void OnErrorDeleteSmsMessagesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> phoneNumberId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSmsMessages(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        partial void OnErrorDeleteSmsMessages(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> phoneNumberId);

        /// <summary>
        /// Delete all SMS messages Delete all SMS messages or all messages for a given phone number
        /// </summary>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSmsMessagesApiResponse"/>&gt;</returns>
        public async Task<IDeleteSmsMessagesApiResponse> DeleteSmsMessagesOrDefaultAsync(Option<Guid> phoneNumberId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSmsMessagesAsync(phoneNumberId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete all SMS messages Delete all SMS messages or all messages for a given phone number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSmsMessagesApiResponse"/>&gt;</returns>
        public async Task<IDeleteSmsMessagesApiResponse> DeleteSmsMessagesAsync(Option<Guid> phoneNumberId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteSmsMessages(ref phoneNumberId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (phoneNumberId.IsSet)
                        parseQueryStringLocalVar["phoneNumberId"] = ClientUtils.ParameterToString(phoneNumberId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteSmsMessagesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSmsMessagesApiResponse>();

                        DeleteSmsMessagesApiResponse apiResponseLocalVar = new DeleteSmsMessagesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSmsMessagesDefaultImplementation(apiResponseLocalVar, phoneNumberId);

                        Events.ExecuteOnDeleteSmsMessages(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSmsMessagesDefaultImplementation(e, "/sms", uriBuilderLocalVar.Path, phoneNumberId);
                Events.ExecuteOnErrorDeleteSmsMessages(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSmsMessagesApiResponse"/>
        /// </summary>
        public partial class DeleteSmsMessagesApiResponse : mailslurp.Client.ApiResponse, IDeleteSmsMessagesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSmsMessagesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSmsMessagesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSmsMessagesApiResponse(ILogger<DeleteSmsMessagesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllSmsMessages(ref Option<Guid> phoneNumber, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> search, ref Option<bool> favourite);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        private void ValidateGetAllSmsMessages(Option<string> sort, Option<string> search)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="favourite"></param>
        private void AfterGetAllSmsMessagesDefaultImplementation(IGetAllSmsMessagesApiResponse apiResponseLocalVar, Option<Guid> phoneNumber, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<bool> favourite)
        {
            bool suppressDefaultLog = false;
            AfterGetAllSmsMessages(ref suppressDefaultLog, apiResponseLocalVar, phoneNumber, page, size, sort, since, before, search, favourite);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="favourite"></param>
        partial void AfterGetAllSmsMessages(ref bool suppressDefaultLog, IGetAllSmsMessagesApiResponse apiResponseLocalVar, Option<Guid> phoneNumber, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<bool> favourite);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="favourite"></param>
        private void OnErrorGetAllSmsMessagesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> phoneNumber, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<bool> favourite)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllSmsMessages(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumber, page, size, sort, since, before, search, favourite);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="favourite"></param>
        partial void OnErrorGetAllSmsMessages(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> phoneNumber, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<bool> favourite);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="phoneNumber">Optional receiving phone number to filter SMS messages for (optional)</param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllSmsMessagesApiResponse"/>&gt;</returns>
        public async Task<IGetAllSmsMessagesApiResponse> GetAllSmsMessagesOrDefaultAsync(Option<Guid> phoneNumber = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllSmsMessagesAsync(phoneNumber, page, size, sort, since, before, search, favourite, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Optional receiving phone number to filter SMS messages for (optional)</param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllSmsMessagesApiResponse"/>&gt;</returns>
        public async Task<IGetAllSmsMessagesApiResponse> GetAllSmsMessagesAsync(Option<Guid> phoneNumber = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllSmsMessages(sort, search);

                FormatGetAllSmsMessages(ref phoneNumber, ref page, ref size, ref sort, ref since, ref before, ref search, ref favourite);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (phoneNumber.IsSet)
                        parseQueryStringLocalVar["phoneNumber"] = ClientUtils.ParameterToString(phoneNumber.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (favourite.IsSet)
                        parseQueryStringLocalVar["favourite"] = ClientUtils.ParameterToString(favourite.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllSmsMessagesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllSmsMessagesApiResponse>();

                        GetAllSmsMessagesApiResponse apiResponseLocalVar = new GetAllSmsMessagesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllSmsMessagesDefaultImplementation(apiResponseLocalVar, phoneNumber, page, size, sort, since, before, search, favourite);

                        Events.ExecuteOnGetAllSmsMessages(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllSmsMessagesDefaultImplementation(e, "/sms", uriBuilderLocalVar.Path, phoneNumber, page, size, sort, since, before, search, favourite);
                Events.ExecuteOnErrorGetAllSmsMessages(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllSmsMessagesApiResponse"/>
        /// </summary>
        public partial class GetAllSmsMessagesApiResponse : mailslurp.Client.ApiResponse, IGetAllSmsMessagesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllSmsMessagesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllSmsMessagesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllSmsMessagesApiResponse(ILogger<GetAllSmsMessagesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageSmsProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageSmsProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageSmsProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetReplyForSmsMessage(ref Guid smsId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsId"></param>
        private void AfterGetReplyForSmsMessageDefaultImplementation(IGetReplyForSmsMessageApiResponse apiResponseLocalVar, Guid smsId)
        {
            bool suppressDefaultLog = false;
            AfterGetReplyForSmsMessage(ref suppressDefaultLog, apiResponseLocalVar, smsId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsId"></param>
        partial void AfterGetReplyForSmsMessage(ref bool suppressDefaultLog, IGetReplyForSmsMessageApiResponse apiResponseLocalVar, Guid smsId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsId"></param>
        private void OnErrorGetReplyForSmsMessageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid smsId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetReplyForSmsMessage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, smsId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsId"></param>
        partial void OnErrorGetReplyForSmsMessage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid smsId);

        /// <summary>
        /// Get reply for an SMS message Get reply for an SMS message.
        /// </summary>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReplyForSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IGetReplyForSmsMessageApiResponse> GetReplyForSmsMessageOrDefaultAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetReplyForSmsMessageAsync(smsId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get reply for an SMS message Get reply for an SMS message.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetReplyForSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IGetReplyForSmsMessageApiResponse> GetReplyForSmsMessageAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetReplyForSmsMessage(ref smsId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/{smsId}/reply"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/{smsId}/reply");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsmsId%7D", Uri.EscapeDataString(smsId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetReplyForSmsMessageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetReplyForSmsMessageApiResponse>();

                        GetReplyForSmsMessageApiResponse apiResponseLocalVar = new GetReplyForSmsMessageApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/{smsId}/reply", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetReplyForSmsMessageDefaultImplementation(apiResponseLocalVar, smsId);

                        Events.ExecuteOnGetReplyForSmsMessage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetReplyForSmsMessageDefaultImplementation(e, "/sms/{smsId}/reply", uriBuilderLocalVar.Path, smsId);
                Events.ExecuteOnErrorGetReplyForSmsMessage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetReplyForSmsMessageApiResponse"/>
        /// </summary>
        public partial class GetReplyForSmsMessageApiResponse : mailslurp.Client.ApiResponse, IGetReplyForSmsMessageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetReplyForSmsMessageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetReplyForSmsMessageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetReplyForSmsMessageApiResponse(ILogger<GetReplyForSmsMessageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ReplyForSms Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ReplyForSms>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ReplyForSms result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetSentSmsCountDefaultImplementation(IGetSentSmsCountApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetSentSmsCount(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetSentSmsCount(ref bool suppressDefaultLog, IGetSentSmsCountApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetSentSmsCountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSentSmsCount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetSentSmsCount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get sent SMS count Get number of sent SMS
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsCountApiResponse"/>&gt;</returns>
        public async Task<IGetSentSmsCountApiResponse> GetSentSmsCountOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSentSmsCountAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get sent SMS count Get number of sent SMS
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsCountApiResponse"/>&gt;</returns>
        public async Task<IGetSentSmsCountApiResponse> GetSentSmsCountAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/sent/count"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/sent/count");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetSentSmsCountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSentSmsCountApiResponse>();

                        GetSentSmsCountApiResponse apiResponseLocalVar = new GetSentSmsCountApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/sent/count", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSentSmsCountDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetSentSmsCount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSentSmsCountDefaultImplementation(e, "/sms/sent/count", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetSentSmsCount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSentSmsCountApiResponse"/>
        /// </summary>
        public partial class GetSentSmsCountApiResponse : mailslurp.Client.ApiResponse, IGetSentSmsCountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSentSmsCountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSentSmsCountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSentSmsCountApiResponse(ILogger<GetSentSmsCountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.CountDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.CountDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.CountDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSentSmsMessage(ref Guid sentSmsId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sentSmsId"></param>
        private void AfterGetSentSmsMessageDefaultImplementation(IGetSentSmsMessageApiResponse apiResponseLocalVar, Guid sentSmsId)
        {
            bool suppressDefaultLog = false;
            AfterGetSentSmsMessage(ref suppressDefaultLog, apiResponseLocalVar, sentSmsId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sentSmsId"></param>
        partial void AfterGetSentSmsMessage(ref bool suppressDefaultLog, IGetSentSmsMessageApiResponse apiResponseLocalVar, Guid sentSmsId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sentSmsId"></param>
        private void OnErrorGetSentSmsMessageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid sentSmsId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSentSmsMessage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sentSmsId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sentSmsId"></param>
        partial void OnErrorGetSentSmsMessage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid sentSmsId);

        /// <summary>
        /// Get sent SMS content including body. Expects sent SMS to exist by ID. Returns an SMS summary object with content.
        /// </summary>
        /// <param name="sentSmsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IGetSentSmsMessageApiResponse> GetSentSmsMessageOrDefaultAsync(Guid sentSmsId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSentSmsMessageAsync(sentSmsId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get sent SMS content including body. Expects sent SMS to exist by ID. Returns an SMS summary object with content.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sentSmsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IGetSentSmsMessageApiResponse> GetSentSmsMessageAsync(Guid sentSmsId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSentSmsMessage(ref sentSmsId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/sent/{sentSmsId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/sent/{sentSmsId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsentSmsId%7D", Uri.EscapeDataString(sentSmsId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetSentSmsMessageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSentSmsMessageApiResponse>();

                        GetSentSmsMessageApiResponse apiResponseLocalVar = new GetSentSmsMessageApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/sent/{sentSmsId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSentSmsMessageDefaultImplementation(apiResponseLocalVar, sentSmsId);

                        Events.ExecuteOnGetSentSmsMessage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSentSmsMessageDefaultImplementation(e, "/sms/sent/{sentSmsId}", uriBuilderLocalVar.Path, sentSmsId);
                Events.ExecuteOnErrorGetSentSmsMessage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSentSmsMessageApiResponse"/>
        /// </summary>
        public partial class GetSentSmsMessageApiResponse : mailslurp.Client.ApiResponse, IGetSentSmsMessageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSentSmsMessageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSentSmsMessageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSentSmsMessageApiResponse(ILogger<GetSentSmsMessageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.SentSmsDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.SentSmsDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.SentSmsDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSentSmsMessagesPaginated(ref Option<Guid> phoneNumber, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> search);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        private void ValidateGetSentSmsMessagesPaginated(Option<string> sort, Option<string> search)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        private void AfterGetSentSmsMessagesPaginatedDefaultImplementation(IGetSentSmsMessagesPaginatedApiResponse apiResponseLocalVar, Option<Guid> phoneNumber, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search)
        {
            bool suppressDefaultLog = false;
            AfterGetSentSmsMessagesPaginated(ref suppressDefaultLog, apiResponseLocalVar, phoneNumber, page, size, sort, since, before, search);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        partial void AfterGetSentSmsMessagesPaginated(ref bool suppressDefaultLog, IGetSentSmsMessagesPaginatedApiResponse apiResponseLocalVar, Option<Guid> phoneNumber, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        private void OnErrorGetSentSmsMessagesPaginatedDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> phoneNumber, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSentSmsMessagesPaginated(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumber, page, size, sort, since, before, search);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        partial void OnErrorGetSentSmsMessagesPaginated(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> phoneNumber, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search);

        /// <summary>
        /// Get all SMS messages in all phone numbers in paginated form. . By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
        /// </summary>
        /// <param name="phoneNumber">Optional phone number to filter sent SMS messages for (optional)</param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsMessagesPaginatedApiResponse"/>&gt;</returns>
        public async Task<IGetSentSmsMessagesPaginatedApiResponse> GetSentSmsMessagesPaginatedOrDefaultAsync(Option<Guid> phoneNumber = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSentSmsMessagesPaginatedAsync(phoneNumber, page, size, sort, since, before, search, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all SMS messages in all phone numbers in paginated form. . By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Optional phone number to filter sent SMS messages for (optional)</param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsMessagesPaginatedApiResponse"/>&gt;</returns>
        public async Task<IGetSentSmsMessagesPaginatedApiResponse> GetSentSmsMessagesPaginatedAsync(Option<Guid> phoneNumber = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSentSmsMessagesPaginated(sort, search);

                FormatGetSentSmsMessagesPaginated(ref phoneNumber, ref page, ref size, ref sort, ref since, ref before, ref search);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/sent"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/sent");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (phoneNumber.IsSet)
                        parseQueryStringLocalVar["phoneNumber"] = ClientUtils.ParameterToString(phoneNumber.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetSentSmsMessagesPaginatedApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSentSmsMessagesPaginatedApiResponse>();

                        GetSentSmsMessagesPaginatedApiResponse apiResponseLocalVar = new GetSentSmsMessagesPaginatedApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/sent", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSentSmsMessagesPaginatedDefaultImplementation(apiResponseLocalVar, phoneNumber, page, size, sort, since, before, search);

                        Events.ExecuteOnGetSentSmsMessagesPaginated(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSentSmsMessagesPaginatedDefaultImplementation(e, "/sms/sent", uriBuilderLocalVar.Path, phoneNumber, page, size, sort, since, before, search);
                Events.ExecuteOnErrorGetSentSmsMessagesPaginated(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSentSmsMessagesPaginatedApiResponse"/>
        /// </summary>
        public partial class GetSentSmsMessagesPaginatedApiResponse : mailslurp.Client.ApiResponse, IGetSentSmsMessagesPaginatedApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSentSmsMessagesPaginatedApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSentSmsMessagesPaginatedApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSentSmsMessagesPaginatedApiResponse(ILogger<GetSentSmsMessagesPaginatedApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageSentSmsProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageSentSmsProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageSentSmsProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetSmsCountDefaultImplementation(IGetSmsCountApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetSmsCount(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetSmsCount(ref bool suppressDefaultLog, IGetSmsCountApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetSmsCountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSmsCount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetSmsCount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get SMS count Get number of SMS
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsCountApiResponse"/>&gt;</returns>
        public async Task<IGetSmsCountApiResponse> GetSmsCountOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSmsCountAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get SMS count Get number of SMS
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsCountApiResponse"/>&gt;</returns>
        public async Task<IGetSmsCountApiResponse> GetSmsCountAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/count"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/count");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetSmsCountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSmsCountApiResponse>();

                        GetSmsCountApiResponse apiResponseLocalVar = new GetSmsCountApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/count", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSmsCountDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetSmsCount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSmsCountDefaultImplementation(e, "/sms/count", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetSmsCount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSmsCountApiResponse"/>
        /// </summary>
        public partial class GetSmsCountApiResponse : mailslurp.Client.ApiResponse, IGetSmsCountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSmsCountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSmsCountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSmsCountApiResponse(ILogger<GetSmsCountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.CountDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.CountDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.CountDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSmsMessage(ref Guid smsId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsId"></param>
        private void AfterGetSmsMessageDefaultImplementation(IGetSmsMessageApiResponse apiResponseLocalVar, Guid smsId)
        {
            bool suppressDefaultLog = false;
            AfterGetSmsMessage(ref suppressDefaultLog, apiResponseLocalVar, smsId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsId"></param>
        partial void AfterGetSmsMessage(ref bool suppressDefaultLog, IGetSmsMessageApiResponse apiResponseLocalVar, Guid smsId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsId"></param>
        private void OnErrorGetSmsMessageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid smsId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSmsMessage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, smsId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsId"></param>
        partial void OnErrorGetSmsMessage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid smsId);

        /// <summary>
        /// Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController. Returns a SMS summary object with content.
        /// </summary>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IGetSmsMessageApiResponse> GetSmsMessageOrDefaultAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSmsMessageAsync(smsId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController. Returns a SMS summary object with content.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IGetSmsMessageApiResponse> GetSmsMessageAsync(Guid smsId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSmsMessage(ref smsId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/{smsId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/{smsId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsmsId%7D", Uri.EscapeDataString(smsId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetSmsMessageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSmsMessageApiResponse>();

                        GetSmsMessageApiResponse apiResponseLocalVar = new GetSmsMessageApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/{smsId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSmsMessageDefaultImplementation(apiResponseLocalVar, smsId);

                        Events.ExecuteOnGetSmsMessage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSmsMessageDefaultImplementation(e, "/sms/{smsId}", uriBuilderLocalVar.Path, smsId);
                Events.ExecuteOnErrorGetSmsMessage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSmsMessageApiResponse"/>
        /// </summary>
        public partial class GetSmsMessageApiResponse : mailslurp.Client.ApiResponse, IGetSmsMessageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSmsMessageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSmsMessageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSmsMessageApiResponse(ILogger<GetSmsMessageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.SmsDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.SmsDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.SmsDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUnreadSmsCountDefaultImplementation(IGetUnreadSmsCountApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUnreadSmsCount(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUnreadSmsCount(ref bool suppressDefaultLog, IGetUnreadSmsCountApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUnreadSmsCountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUnreadSmsCount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUnreadSmsCount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get unread SMS count Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUnreadSmsCountApiResponse"/>&gt;</returns>
        public async Task<IGetUnreadSmsCountApiResponse> GetUnreadSmsCountOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUnreadSmsCountAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get unread SMS count Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUnreadSmsCountApiResponse"/>&gt;</returns>
        public async Task<IGetUnreadSmsCountApiResponse> GetUnreadSmsCountAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/unreadCount"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/unreadCount");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetUnreadSmsCountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUnreadSmsCountApiResponse>();

                        GetUnreadSmsCountApiResponse apiResponseLocalVar = new GetUnreadSmsCountApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/unreadCount", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUnreadSmsCountDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUnreadSmsCount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUnreadSmsCountDefaultImplementation(e, "/sms/unreadCount", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUnreadSmsCount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUnreadSmsCountApiResponse"/>
        /// </summary>
        public partial class GetUnreadSmsCountApiResponse : mailslurp.Client.ApiResponse, IGetUnreadSmsCountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUnreadSmsCountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUnreadSmsCountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUnreadSmsCountApiResponse(ILogger<GetUnreadSmsCountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.UnreadCount Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.UnreadCount>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.UnreadCount result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReplyToSmsMessage(ref Guid smsId, SmsReplyOptions smsReplyOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="smsReplyOptions"></param>
        /// <returns></returns>
        private void ValidateReplyToSmsMessage(SmsReplyOptions smsReplyOptions)
        {
            if (smsReplyOptions == null)
                throw new ArgumentNullException(nameof(smsReplyOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsId"></param>
        /// <param name="smsReplyOptions"></param>
        private void AfterReplyToSmsMessageDefaultImplementation(IReplyToSmsMessageApiResponse apiResponseLocalVar, Guid smsId, SmsReplyOptions smsReplyOptions)
        {
            bool suppressDefaultLog = false;
            AfterReplyToSmsMessage(ref suppressDefaultLog, apiResponseLocalVar, smsId, smsReplyOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsId"></param>
        /// <param name="smsReplyOptions"></param>
        partial void AfterReplyToSmsMessage(ref bool suppressDefaultLog, IReplyToSmsMessageApiResponse apiResponseLocalVar, Guid smsId, SmsReplyOptions smsReplyOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsId"></param>
        /// <param name="smsReplyOptions"></param>
        private void OnErrorReplyToSmsMessageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid smsId, SmsReplyOptions smsReplyOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReplyToSmsMessage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, smsId, smsReplyOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsId"></param>
        /// <param name="smsReplyOptions"></param>
        partial void OnErrorReplyToSmsMessage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid smsId, SmsReplyOptions smsReplyOptions);

        /// <summary>
        /// Send a reply to a received SMS message. Replies are sent from the receiving number. Reply to an SMS message.
        /// </summary>
        /// <param name="smsId"></param>
        /// <param name="smsReplyOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplyToSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IReplyToSmsMessageApiResponse> ReplyToSmsMessageOrDefaultAsync(Guid smsId, SmsReplyOptions smsReplyOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReplyToSmsMessageAsync(smsId, smsReplyOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send a reply to a received SMS message. Replies are sent from the receiving number. Reply to an SMS message.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsId"></param>
        /// <param name="smsReplyOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReplyToSmsMessageApiResponse"/>&gt;</returns>
        public async Task<IReplyToSmsMessageApiResponse> ReplyToSmsMessageAsync(Guid smsId, SmsReplyOptions smsReplyOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReplyToSmsMessage(smsReplyOptions);

                FormatReplyToSmsMessage(ref smsId, smsReplyOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/{smsId}/reply"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/{smsId}/reply");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsmsId%7D", Uri.EscapeDataString(smsId.ToString()));

                    httpRequestMessageLocalVar.Content = (smsReplyOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(smsReplyOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ReplyToSmsMessageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReplyToSmsMessageApiResponse>();

                        ReplyToSmsMessageApiResponse apiResponseLocalVar = new ReplyToSmsMessageApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/{smsId}/reply", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReplyToSmsMessageDefaultImplementation(apiResponseLocalVar, smsId, smsReplyOptions);

                        Events.ExecuteOnReplyToSmsMessage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReplyToSmsMessageDefaultImplementation(e, "/sms/{smsId}/reply", uriBuilderLocalVar.Path, smsId, smsReplyOptions);
                Events.ExecuteOnErrorReplyToSmsMessage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReplyToSmsMessageApiResponse"/>
        /// </summary>
        public partial class ReplyToSmsMessageApiResponse : mailslurp.Client.ApiResponse, IReplyToSmsMessageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReplyToSmsMessageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReplyToSmsMessageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReplyToSmsMessageApiResponse(ILogger<ReplyToSmsMessageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.SentSmsDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.SentSmsDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.SentSmsDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendSms(SmsSendOptions smsSendOptions, ref Option<string> fromPhoneNumber, ref Option<Guid> fromPhoneId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="smsSendOptions"></param>
        /// <param name="fromPhoneNumber"></param>
        /// <returns></returns>
        private void ValidateSendSms(SmsSendOptions smsSendOptions, Option<string> fromPhoneNumber)
        {
            if (smsSendOptions == null)
                throw new ArgumentNullException(nameof(smsSendOptions));

            if (fromPhoneNumber.IsSet && fromPhoneNumber.Value == null)
                throw new ArgumentNullException(nameof(fromPhoneNumber));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="fromPhoneNumber"></param>
        /// <param name="fromPhoneId"></param>
        private void AfterSendSmsDefaultImplementation(ISendSmsApiResponse apiResponseLocalVar, SmsSendOptions smsSendOptions, Option<string> fromPhoneNumber, Option<Guid> fromPhoneId)
        {
            bool suppressDefaultLog = false;
            AfterSendSms(ref suppressDefaultLog, apiResponseLocalVar, smsSendOptions, fromPhoneNumber, fromPhoneId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="fromPhoneNumber"></param>
        /// <param name="fromPhoneId"></param>
        partial void AfterSendSms(ref bool suppressDefaultLog, ISendSmsApiResponse apiResponseLocalVar, SmsSendOptions smsSendOptions, Option<string> fromPhoneNumber, Option<Guid> fromPhoneId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="fromPhoneNumber"></param>
        /// <param name="fromPhoneId"></param>
        private void OnErrorSendSmsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SmsSendOptions smsSendOptions, Option<string> fromPhoneNumber, Option<Guid> fromPhoneId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendSms(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, smsSendOptions, fromPhoneNumber, fromPhoneId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="fromPhoneNumber"></param>
        /// <param name="fromPhoneId"></param>
        partial void OnErrorSendSms(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SmsSendOptions smsSendOptions, Option<string> fromPhoneNumber, Option<Guid> fromPhoneId);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="smsSendOptions"></param>
        /// <param name="fromPhoneNumber">Phone number to send from in E.164 format (optional)</param>
        /// <param name="fromPhoneId">Phone number ID to send from in UUID form (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendSmsApiResponse"/>&gt;</returns>
        public async Task<ISendSmsApiResponse> SendSmsOrDefaultAsync(SmsSendOptions smsSendOptions, Option<string> fromPhoneNumber = default, Option<Guid> fromPhoneId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendSmsAsync(smsSendOptions, fromPhoneNumber, fromPhoneId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsSendOptions"></param>
        /// <param name="fromPhoneNumber">Phone number to send from in E.164 format (optional)</param>
        /// <param name="fromPhoneId">Phone number ID to send from in UUID form (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendSmsApiResponse"/>&gt;</returns>
        public async Task<ISendSmsApiResponse> SendSmsAsync(SmsSendOptions smsSendOptions, Option<string> fromPhoneNumber = default, Option<Guid> fromPhoneId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendSms(smsSendOptions, fromPhoneNumber);

                FormatSendSms(smsSendOptions, ref fromPhoneNumber, ref fromPhoneId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/send"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/send");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fromPhoneNumber.IsSet)
                        parseQueryStringLocalVar["fromPhoneNumber"] = ClientUtils.ParameterToString(fromPhoneNumber.Value);

                    if (fromPhoneId.IsSet)
                        parseQueryStringLocalVar["fromPhoneId"] = ClientUtils.ParameterToString(fromPhoneId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (smsSendOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(smsSendOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendSmsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendSmsApiResponse>();

                        SendSmsApiResponse apiResponseLocalVar = new SendSmsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/send", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendSmsDefaultImplementation(apiResponseLocalVar, smsSendOptions, fromPhoneNumber, fromPhoneId);

                        Events.ExecuteOnSendSms(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendSmsDefaultImplementation(e, "/sms/send", uriBuilderLocalVar.Path, smsSendOptions, fromPhoneNumber, fromPhoneId);
                Events.ExecuteOnErrorSendSms(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendSmsApiResponse"/>
        /// </summary>
        public partial class SendSmsApiResponse : mailslurp.Client.ApiResponse, ISendSmsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendSmsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendSmsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendSmsApiResponse(ILogger<SendSmsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.SentSmsDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.SentSmsDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.SentSmsDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetSmsFavourited(ref Guid smsId, ref bool favourited);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsId"></param>
        /// <param name="favourited"></param>
        private void AfterSetSmsFavouritedDefaultImplementation(ISetSmsFavouritedApiResponse apiResponseLocalVar, Guid smsId, bool favourited)
        {
            bool suppressDefaultLog = false;
            AfterSetSmsFavourited(ref suppressDefaultLog, apiResponseLocalVar, smsId, favourited);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="smsId"></param>
        /// <param name="favourited"></param>
        partial void AfterSetSmsFavourited(ref bool suppressDefaultLog, ISetSmsFavouritedApiResponse apiResponseLocalVar, Guid smsId, bool favourited);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsId"></param>
        /// <param name="favourited"></param>
        private void OnErrorSetSmsFavouritedDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid smsId, bool favourited)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetSmsFavourited(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, smsId, favourited);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="smsId"></param>
        /// <param name="favourited"></param>
        partial void OnErrorSetSmsFavourited(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid smsId, bool favourited);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="smsId">ID of SMS to set favourite state</param>
        /// <param name="favourited"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetSmsFavouritedApiResponse"/>&gt;</returns>
        public async Task<ISetSmsFavouritedApiResponse> SetSmsFavouritedOrDefaultAsync(Guid smsId, bool favourited, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetSmsFavouritedAsync(smsId, favourited, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsId">ID of SMS to set favourite state</param>
        /// <param name="favourited"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetSmsFavouritedApiResponse"/>&gt;</returns>
        public async Task<ISetSmsFavouritedApiResponse> SetSmsFavouritedAsync(Guid smsId, bool favourited, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatSetSmsFavourited(ref smsId, ref favourited);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/sms/{smsId}/favourite"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/sms/{smsId}/favourite");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsmsId%7D", Uri.EscapeDataString(smsId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["favourited"] = ClientUtils.ParameterToString(favourited);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SetSmsFavouritedApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetSmsFavouritedApiResponse>();

                        SetSmsFavouritedApiResponse apiResponseLocalVar = new SetSmsFavouritedApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sms/{smsId}/favourite", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetSmsFavouritedDefaultImplementation(apiResponseLocalVar, smsId, favourited);

                        Events.ExecuteOnSetSmsFavourited(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetSmsFavouritedDefaultImplementation(e, "/sms/{smsId}/favourite", uriBuilderLocalVar.Path, smsId, favourited);
                Events.ExecuteOnErrorSetSmsFavourited(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetSmsFavouritedApiResponse"/>
        /// </summary>
        public partial class SetSmsFavouritedApiResponse : mailslurp.Client.ApiResponse, ISetSmsFavouritedApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetSmsFavouritedApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetSmsFavouritedApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetSmsFavouritedApiResponse(ILogger<SetSmsFavouritedApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.SmsDto NoContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNoContent
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.SmsDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNoContent(out mailslurp.Model.SmsDto result)
            {
                result = null;

                try
                {
                    result = NoContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)204);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
