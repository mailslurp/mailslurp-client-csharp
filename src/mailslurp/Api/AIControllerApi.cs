/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generate structured content for an email
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an email using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredContentResult</returns>
        StructuredContentResult GenerateStructuredContentFromEmail(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0);

        /// <summary>
        /// Generate structured content for an email
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an email using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredContentResult</returns>
        ApiResponse<StructuredContentResult> GenerateStructuredContentFromEmailWithHttpInfo(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0);
        /// <summary>
        /// Validate structured content schema
        /// </summary>
        /// <remarks>
        /// Check if a schema is valid and can be used to extract data using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredOutputSchemaValidation</returns>
        StructuredOutputSchemaValidation ValidateStructuredOutputSchema(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0);

        /// <summary>
        /// Validate structured content schema
        /// </summary>
        /// <remarks>
        /// Check if a schema is valid and can be used to extract data using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredOutputSchemaValidation</returns>
        ApiResponse<StructuredOutputSchemaValidation> ValidateStructuredOutputSchemaWithHttpInfo(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Generate structured content for an email
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an email using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredContentResult</returns>
        System.Threading.Tasks.Task<StructuredContentResult> GenerateStructuredContentFromEmailAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate structured content for an email
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an email using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredContentResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StructuredContentResult>> GenerateStructuredContentFromEmailWithHttpInfoAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Validate structured content schema
        /// </summary>
        /// <remarks>
        /// Check if a schema is valid and can be used to extract data using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredOutputSchemaValidation</returns>
        System.Threading.Tasks.Task<StructuredOutputSchemaValidation> ValidateStructuredOutputSchemaAsync(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate structured content schema
        /// </summary>
        /// <remarks>
        /// Check if a schema is valid and can be used to extract data using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredOutputSchemaValidation)</returns>
        System.Threading.Tasks.Task<ApiResponse<StructuredOutputSchemaValidation>> ValidateStructuredOutputSchemaWithHttpInfoAsync(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIControllerApi : IAIControllerApiSync, IAIControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AIControllerApi : IAIControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AIControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AIControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AIControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AIControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AIControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Generate structured content for an email Use output schemas to extract data from an email using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredContentResult</returns>
        public StructuredContentResult GenerateStructuredContentFromEmail(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<StructuredContentResult> localVarResponse = GenerateStructuredContentFromEmailWithHttpInfo(generateStructuredContentEmailOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate structured content for an email Use output schemas to extract data from an email using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredContentResult</returns>
        public mailslurp.Client.ApiResponse<StructuredContentResult> GenerateStructuredContentFromEmailWithHttpInfo(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0)
        {
            // verify the required parameter 'generateStructuredContentEmailOptions' is set
            if (generateStructuredContentEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateStructuredContentEmailOptions' when calling AIControllerApi->GenerateStructuredContentFromEmail");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateStructuredContentEmailOptions;

            localVarRequestOptions.Operation = "AIControllerApi.GenerateStructuredContentFromEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StructuredContentResult>("/ai/structured-content/email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateStructuredContentFromEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate structured content for an email Use output schemas to extract data from an email using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredContentResult</returns>
        public async System.Threading.Tasks.Task<StructuredContentResult> GenerateStructuredContentFromEmailAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<StructuredContentResult> localVarResponse = await GenerateStructuredContentFromEmailWithHttpInfoAsync(generateStructuredContentEmailOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate structured content for an email Use output schemas to extract data from an email using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredContentResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<StructuredContentResult>> GenerateStructuredContentFromEmailWithHttpInfoAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'generateStructuredContentEmailOptions' is set
            if (generateStructuredContentEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateStructuredContentEmailOptions' when calling AIControllerApi->GenerateStructuredContentFromEmail");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateStructuredContentEmailOptions;

            localVarRequestOptions.Operation = "AIControllerApi.GenerateStructuredContentFromEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StructuredContentResult>("/ai/structured-content/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateStructuredContentFromEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate structured content schema Check if a schema is valid and can be used to extract data using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredOutputSchemaValidation</returns>
        public StructuredOutputSchemaValidation ValidateStructuredOutputSchema(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<StructuredOutputSchemaValidation> localVarResponse = ValidateStructuredOutputSchemaWithHttpInfo(structuredOutputSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate structured content schema Check if a schema is valid and can be used to extract data using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredOutputSchemaValidation</returns>
        public mailslurp.Client.ApiResponse<StructuredOutputSchemaValidation> ValidateStructuredOutputSchemaWithHttpInfo(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0)
        {
            // verify the required parameter 'structuredOutputSchema' is set
            if (structuredOutputSchema == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'structuredOutputSchema' when calling AIControllerApi->ValidateStructuredOutputSchema");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = structuredOutputSchema;

            localVarRequestOptions.Operation = "AIControllerApi.ValidateStructuredOutputSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StructuredOutputSchemaValidation>("/ai/structured-content/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateStructuredOutputSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate structured content schema Check if a schema is valid and can be used to extract data using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredOutputSchemaValidation</returns>
        public async System.Threading.Tasks.Task<StructuredOutputSchemaValidation> ValidateStructuredOutputSchemaAsync(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<StructuredOutputSchemaValidation> localVarResponse = await ValidateStructuredOutputSchemaWithHttpInfoAsync(structuredOutputSchema, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate structured content schema Check if a schema is valid and can be used to extract data using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredOutputSchemaValidation)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<StructuredOutputSchemaValidation>> ValidateStructuredOutputSchemaWithHttpInfoAsync(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'structuredOutputSchema' is set
            if (structuredOutputSchema == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'structuredOutputSchema' when calling AIControllerApi->ValidateStructuredOutputSchema");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = structuredOutputSchema;

            localVarRequestOptions.Operation = "AIControllerApi.ValidateStructuredOutputSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StructuredOutputSchemaValidation>("/ai/structured-content/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateStructuredOutputSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
