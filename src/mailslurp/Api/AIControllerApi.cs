/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List transformers
        /// </summary>
        /// <remarks>
        /// List all AI transforms
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageAITransformProjection</returns>
        PageAITransformProjection CreateTransformer(AITranformCreateOptions options, int? page = default, int? size = default, string sort = default, int operationIndex = 0);

        /// <summary>
        /// List transformers
        /// </summary>
        /// <remarks>
        /// List all AI transforms
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageAITransformProjection</returns>
        ApiResponse<PageAITransformProjection> CreateTransformerWithHttpInfo(AITranformCreateOptions options, int? page = default, int? size = default, string sort = default, int operationIndex = 0);
        /// <summary>
        /// Create a transformer for reuse in automations
        /// </summary>
        /// <remarks>
        /// Save an AI transform instructions and schema for use with webhooks and automations
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aITranformCreateOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AITransformDto</returns>
        AITransformDto CreateTransformer1(AITranformCreateOptions aITranformCreateOptions, int operationIndex = 0);

        /// <summary>
        /// Create a transformer for reuse in automations
        /// </summary>
        /// <remarks>
        /// Save an AI transform instructions and schema for use with webhooks and automations
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aITranformCreateOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AITransformDto</returns>
        ApiResponse<AITransformDto> CreateTransformer1WithHttpInfo(AITranformCreateOptions aITranformCreateOptions, int operationIndex = 0);
        /// <summary>
        /// Create transformer mapping
        /// </summary>
        /// <remarks>
        /// Create AI transformer mappings to other entities
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAITransformerMappingOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AITransformMappingDto</returns>
        AITransformMappingDto CreateTransformerMappings(CreateAITransformerMappingOptions createAITransformerMappingOptions, int operationIndex = 0);

        /// <summary>
        /// Create transformer mapping
        /// </summary>
        /// <remarks>
        /// Create AI transformer mappings to other entities
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAITransformerMappingOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AITransformMappingDto</returns>
        ApiResponse<AITransformMappingDto> CreateTransformerMappingsWithHttpInfo(CreateAITransformerMappingOptions createAITransformerMappingOptions, int operationIndex = 0);
        /// <summary>
        /// Delete a transformer
        /// </summary>
        /// <remarks>
        /// Delete an AI transformer and schemas by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTransformer(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete a transformer
        /// </summary>
        /// <remarks>
        /// Delete an AI transformer and schemas by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransformerWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Delete transformer mapping
        /// </summary>
        /// <remarks>
        /// Delete an AI transformer mapping
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTransformerMapping(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete transformer mapping
        /// </summary>
        /// <remarks>
        /// Delete an AI transformer mapping
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransformerMappingWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Delete all transformers
        /// </summary>
        /// <remarks>
        /// Delete all AI transformers and schemas
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTransformers(int operationIndex = 0);

        /// <summary>
        /// Delete all transformers
        /// </summary>
        /// <remarks>
        /// Delete all AI transformers and schemas
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransformersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Generate structured content for an attachment
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an attachment using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentAttachmentOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredContentResultDto</returns>
        StructuredContentResultDto GenerateStructuredContentFromAttachment(GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, int operationIndex = 0);

        /// <summary>
        /// Generate structured content for an attachment
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an attachment using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentAttachmentOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredContentResultDto</returns>
        ApiResponse<StructuredContentResultDto> GenerateStructuredContentFromAttachmentWithHttpInfo(GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, int operationIndex = 0);
        /// <summary>
        /// Generate structured content for an email
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an email using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredContentResultDto</returns>
        StructuredContentResultDto GenerateStructuredContentFromEmail(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0);

        /// <summary>
        /// Generate structured content for an email
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an email using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredContentResultDto</returns>
        ApiResponse<StructuredContentResultDto> GenerateStructuredContentFromEmailWithHttpInfo(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0);
        /// <summary>
        /// Generate structured content for a TXT message
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an SMS using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentSmsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredContentResultDto</returns>
        StructuredContentResultDto GenerateStructuredContentFromSms(GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, int operationIndex = 0);

        /// <summary>
        /// Generate structured content for a TXT message
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an SMS using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentSmsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredContentResultDto</returns>
        ApiResponse<StructuredContentResultDto> GenerateStructuredContentFromSmsWithHttpInfo(GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, int operationIndex = 0);
        /// <summary>
        /// Get a transformer
        /// </summary>
        /// <remarks>
        /// Get AI transformer and schemas by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AITransformDto</returns>
        AITransformDto GetTransformer(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get a transformer
        /// </summary>
        /// <remarks>
        /// Get AI transformer and schemas by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AITransformDto</returns>
        ApiResponse<AITransformDto> GetTransformerWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get transformer mapping
        /// </summary>
        /// <remarks>
        /// Get an AI transformer mapping
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AITransformMappingDto</returns>
        AITransformMappingDto GetTransformerMapping(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get transformer mapping
        /// </summary>
        /// <remarks>
        /// Get an AI transformer mapping
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AITransformMappingDto</returns>
        ApiResponse<AITransformMappingDto> GetTransformerMappingWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get transformer mappings
        /// </summary>
        /// <remarks>
        /// Get AI transformer mappings to other entities
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageAITransformMappingProjection</returns>
        PageAITransformMappingProjection GetTransformerMappings(Guid? aiTransformId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0);

        /// <summary>
        /// Get transformer mappings
        /// </summary>
        /// <remarks>
        /// Get AI transformer mappings to other entities
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageAITransformMappingProjection</returns>
        ApiResponse<PageAITransformMappingProjection> GetTransformerMappingsWithHttpInfo(Guid? aiTransformId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0);
        /// <summary>
        /// Get transformer result
        /// </summary>
        /// <remarks>
        /// Get AI transformer result
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform result</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AITransformResultDto</returns>
        AITransformResultDto GetTransformerResult(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get transformer result
        /// </summary>
        /// <remarks>
        /// Get AI transformer result
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform result</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AITransformResultDto</returns>
        ApiResponse<AITransformResultDto> GetTransformerResultWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get transformer results
        /// </summary>
        /// <remarks>
        /// Get AI transformer results
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="aiTransformMappingId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageAITransformResultProjection</returns>
        PageAITransformResultProjection GetTransformerResults(Guid? aiTransformId = default, Guid? aiTransformMappingId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0);

        /// <summary>
        /// Get transformer results
        /// </summary>
        /// <remarks>
        /// Get AI transformer results
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="aiTransformMappingId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageAITransformResultProjection</returns>
        ApiResponse<PageAITransformResultProjection> GetTransformerResultsWithHttpInfo(Guid? aiTransformId = default, Guid? aiTransformMappingId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0);
        /// <summary>
        /// Validate structured content schema
        /// </summary>
        /// <remarks>
        /// Check if a schema is valid and can be used to extract data using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredOutputSchemaValidation</returns>
        StructuredOutputSchemaValidation ValidateStructuredOutputSchema(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0);

        /// <summary>
        /// Validate structured content schema
        /// </summary>
        /// <remarks>
        /// Check if a schema is valid and can be used to extract data using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredOutputSchemaValidation</returns>
        ApiResponse<StructuredOutputSchemaValidation> ValidateStructuredOutputSchemaWithHttpInfo(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List transformers
        /// </summary>
        /// <remarks>
        /// List all AI transforms
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageAITransformProjection</returns>
        System.Threading.Tasks.Task<PageAITransformProjection> CreateTransformerAsync(AITranformCreateOptions options, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List transformers
        /// </summary>
        /// <remarks>
        /// List all AI transforms
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageAITransformProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAITransformProjection>> CreateTransformerWithHttpInfoAsync(AITranformCreateOptions options, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create a transformer for reuse in automations
        /// </summary>
        /// <remarks>
        /// Save an AI transform instructions and schema for use with webhooks and automations
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aITranformCreateOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AITransformDto</returns>
        System.Threading.Tasks.Task<AITransformDto> CreateTransformer1Async(AITranformCreateOptions aITranformCreateOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a transformer for reuse in automations
        /// </summary>
        /// <remarks>
        /// Save an AI transform instructions and schema for use with webhooks and automations
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aITranformCreateOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AITransformDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AITransformDto>> CreateTransformer1WithHttpInfoAsync(AITranformCreateOptions aITranformCreateOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create transformer mapping
        /// </summary>
        /// <remarks>
        /// Create AI transformer mappings to other entities
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAITransformerMappingOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AITransformMappingDto</returns>
        System.Threading.Tasks.Task<AITransformMappingDto> CreateTransformerMappingsAsync(CreateAITransformerMappingOptions createAITransformerMappingOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create transformer mapping
        /// </summary>
        /// <remarks>
        /// Create AI transformer mappings to other entities
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAITransformerMappingOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AITransformMappingDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AITransformMappingDto>> CreateTransformerMappingsWithHttpInfoAsync(CreateAITransformerMappingOptions createAITransformerMappingOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete a transformer
        /// </summary>
        /// <remarks>
        /// Delete an AI transformer and schemas by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransformerAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a transformer
        /// </summary>
        /// <remarks>
        /// Delete an AI transformer and schemas by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransformerWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete transformer mapping
        /// </summary>
        /// <remarks>
        /// Delete an AI transformer mapping
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransformerMappingAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete transformer mapping
        /// </summary>
        /// <remarks>
        /// Delete an AI transformer mapping
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransformerMappingWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete all transformers
        /// </summary>
        /// <remarks>
        /// Delete all AI transformers and schemas
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransformersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all transformers
        /// </summary>
        /// <remarks>
        /// Delete all AI transformers and schemas
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransformersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Generate structured content for an attachment
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an attachment using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentAttachmentOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredContentResultDto</returns>
        System.Threading.Tasks.Task<StructuredContentResultDto> GenerateStructuredContentFromAttachmentAsync(GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate structured content for an attachment
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an attachment using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentAttachmentOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredContentResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<StructuredContentResultDto>> GenerateStructuredContentFromAttachmentWithHttpInfoAsync(GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Generate structured content for an email
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an email using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredContentResultDto</returns>
        System.Threading.Tasks.Task<StructuredContentResultDto> GenerateStructuredContentFromEmailAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate structured content for an email
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an email using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredContentResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<StructuredContentResultDto>> GenerateStructuredContentFromEmailWithHttpInfoAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Generate structured content for a TXT message
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an SMS using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentSmsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredContentResultDto</returns>
        System.Threading.Tasks.Task<StructuredContentResultDto> GenerateStructuredContentFromSmsAsync(GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate structured content for a TXT message
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an SMS using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentSmsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredContentResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<StructuredContentResultDto>> GenerateStructuredContentFromSmsWithHttpInfoAsync(GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a transformer
        /// </summary>
        /// <remarks>
        /// Get AI transformer and schemas by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AITransformDto</returns>
        System.Threading.Tasks.Task<AITransformDto> GetTransformerAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a transformer
        /// </summary>
        /// <remarks>
        /// Get AI transformer and schemas by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AITransformDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AITransformDto>> GetTransformerWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get transformer mapping
        /// </summary>
        /// <remarks>
        /// Get an AI transformer mapping
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AITransformMappingDto</returns>
        System.Threading.Tasks.Task<AITransformMappingDto> GetTransformerMappingAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get transformer mapping
        /// </summary>
        /// <remarks>
        /// Get an AI transformer mapping
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AITransformMappingDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AITransformMappingDto>> GetTransformerMappingWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get transformer mappings
        /// </summary>
        /// <remarks>
        /// Get AI transformer mappings to other entities
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageAITransformMappingProjection</returns>
        System.Threading.Tasks.Task<PageAITransformMappingProjection> GetTransformerMappingsAsync(Guid? aiTransformId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get transformer mappings
        /// </summary>
        /// <remarks>
        /// Get AI transformer mappings to other entities
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageAITransformMappingProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAITransformMappingProjection>> GetTransformerMappingsWithHttpInfoAsync(Guid? aiTransformId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get transformer result
        /// </summary>
        /// <remarks>
        /// Get AI transformer result
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform result</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AITransformResultDto</returns>
        System.Threading.Tasks.Task<AITransformResultDto> GetTransformerResultAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get transformer result
        /// </summary>
        /// <remarks>
        /// Get AI transformer result
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform result</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AITransformResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AITransformResultDto>> GetTransformerResultWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get transformer results
        /// </summary>
        /// <remarks>
        /// Get AI transformer results
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="aiTransformMappingId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageAITransformResultProjection</returns>
        System.Threading.Tasks.Task<PageAITransformResultProjection> GetTransformerResultsAsync(Guid? aiTransformId = default, Guid? aiTransformMappingId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get transformer results
        /// </summary>
        /// <remarks>
        /// Get AI transformer results
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="aiTransformMappingId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageAITransformResultProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAITransformResultProjection>> GetTransformerResultsWithHttpInfoAsync(Guid? aiTransformId = default, Guid? aiTransformMappingId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Validate structured content schema
        /// </summary>
        /// <remarks>
        /// Check if a schema is valid and can be used to extract data using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredOutputSchemaValidation</returns>
        System.Threading.Tasks.Task<StructuredOutputSchemaValidation> ValidateStructuredOutputSchemaAsync(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate structured content schema
        /// </summary>
        /// <remarks>
        /// Check if a schema is valid and can be used to extract data using AI
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredOutputSchemaValidation)</returns>
        System.Threading.Tasks.Task<ApiResponse<StructuredOutputSchemaValidation>> ValidateStructuredOutputSchemaWithHttpInfoAsync(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAIControllerApi : IAIControllerApiSync, IAIControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AIControllerApi : IAIControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AIControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AIControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AIControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AIControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AIControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List transformers List all AI transforms
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageAITransformProjection</returns>
        public PageAITransformProjection CreateTransformer(AITranformCreateOptions options, int? page = default, int? size = default, string sort = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageAITransformProjection> localVarResponse = CreateTransformerWithHttpInfo(options, page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transformers List all AI transforms
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageAITransformProjection</returns>
        public mailslurp.Client.ApiResponse<PageAITransformProjection> CreateTransformerWithHttpInfo(AITranformCreateOptions options, int? page = default, int? size = default, string sort = default, int operationIndex = 0)
        {
            // verify the required parameter 'options' is set
            if (options == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'options' when calling AIControllerApi->CreateTransformer");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "options", options));

            localVarRequestOptions.Operation = "AIControllerApi.CreateTransformer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageAITransformProjection>("/ai/transformer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransformer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transformers List all AI transforms
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageAITransformProjection</returns>
        public async System.Threading.Tasks.Task<PageAITransformProjection> CreateTransformerAsync(AITranformCreateOptions options, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PageAITransformProjection> localVarResponse = await CreateTransformerWithHttpInfoAsync(options, page, size, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transformers List all AI transforms
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageAITransformProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageAITransformProjection>> CreateTransformerWithHttpInfoAsync(AITranformCreateOptions options, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'options' is set
            if (options == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'options' when calling AIControllerApi->CreateTransformer");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "options", options));

            localVarRequestOptions.Operation = "AIControllerApi.CreateTransformer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageAITransformProjection>("/ai/transformer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransformer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a transformer for reuse in automations Save an AI transform instructions and schema for use with webhooks and automations
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aITranformCreateOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AITransformDto</returns>
        public AITransformDto CreateTransformer1(AITranformCreateOptions aITranformCreateOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<AITransformDto> localVarResponse = CreateTransformer1WithHttpInfo(aITranformCreateOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transformer for reuse in automations Save an AI transform instructions and schema for use with webhooks and automations
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aITranformCreateOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AITransformDto</returns>
        public mailslurp.Client.ApiResponse<AITransformDto> CreateTransformer1WithHttpInfo(AITranformCreateOptions aITranformCreateOptions, int operationIndex = 0)
        {
            // verify the required parameter 'aITranformCreateOptions' is set
            if (aITranformCreateOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'aITranformCreateOptions' when calling AIControllerApi->CreateTransformer1");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aITranformCreateOptions;

            localVarRequestOptions.Operation = "AIControllerApi.CreateTransformer1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AITransformDto>("/ai/transformer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransformer1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a transformer for reuse in automations Save an AI transform instructions and schema for use with webhooks and automations
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aITranformCreateOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AITransformDto</returns>
        public async System.Threading.Tasks.Task<AITransformDto> CreateTransformer1Async(AITranformCreateOptions aITranformCreateOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<AITransformDto> localVarResponse = await CreateTransformer1WithHttpInfoAsync(aITranformCreateOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transformer for reuse in automations Save an AI transform instructions and schema for use with webhooks and automations
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aITranformCreateOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AITransformDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AITransformDto>> CreateTransformer1WithHttpInfoAsync(AITranformCreateOptions aITranformCreateOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'aITranformCreateOptions' is set
            if (aITranformCreateOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'aITranformCreateOptions' when calling AIControllerApi->CreateTransformer1");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aITranformCreateOptions;

            localVarRequestOptions.Operation = "AIControllerApi.CreateTransformer1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AITransformDto>("/ai/transformer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransformer1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create transformer mapping Create AI transformer mappings to other entities
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAITransformerMappingOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AITransformMappingDto</returns>
        public AITransformMappingDto CreateTransformerMappings(CreateAITransformerMappingOptions createAITransformerMappingOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<AITransformMappingDto> localVarResponse = CreateTransformerMappingsWithHttpInfo(createAITransformerMappingOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create transformer mapping Create AI transformer mappings to other entities
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAITransformerMappingOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AITransformMappingDto</returns>
        public mailslurp.Client.ApiResponse<AITransformMappingDto> CreateTransformerMappingsWithHttpInfo(CreateAITransformerMappingOptions createAITransformerMappingOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createAITransformerMappingOptions' is set
            if (createAITransformerMappingOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createAITransformerMappingOptions' when calling AIControllerApi->CreateTransformerMappings");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAITransformerMappingOptions;

            localVarRequestOptions.Operation = "AIControllerApi.CreateTransformerMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AITransformMappingDto>("/ai/transformer/mappings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransformerMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create transformer mapping Create AI transformer mappings to other entities
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAITransformerMappingOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AITransformMappingDto</returns>
        public async System.Threading.Tasks.Task<AITransformMappingDto> CreateTransformerMappingsAsync(CreateAITransformerMappingOptions createAITransformerMappingOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<AITransformMappingDto> localVarResponse = await CreateTransformerMappingsWithHttpInfoAsync(createAITransformerMappingOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create transformer mapping Create AI transformer mappings to other entities
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAITransformerMappingOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AITransformMappingDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AITransformMappingDto>> CreateTransformerMappingsWithHttpInfoAsync(CreateAITransformerMappingOptions createAITransformerMappingOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createAITransformerMappingOptions' is set
            if (createAITransformerMappingOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createAITransformerMappingOptions' when calling AIControllerApi->CreateTransformerMappings");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAITransformerMappingOptions;

            localVarRequestOptions.Operation = "AIControllerApi.CreateTransformerMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AITransformMappingDto>("/ai/transformer/mappings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransformerMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a transformer Delete an AI transformer and schemas by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTransformer(Guid id, int operationIndex = 0)
        {
            DeleteTransformerWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a transformer Delete an AI transformer and schemas by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteTransformerWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AIControllerApi.DeleteTransformer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ai/transformer/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransformer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a transformer Delete an AI transformer and schemas by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransformerAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteTransformerWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a transformer Delete an AI transformer and schemas by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteTransformerWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AIControllerApi.DeleteTransformer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ai/transformer/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransformer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete transformer mapping Delete an AI transformer mapping
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTransformerMapping(Guid id, int operationIndex = 0)
        {
            DeleteTransformerMappingWithHttpInfo(id);
        }

        /// <summary>
        /// Delete transformer mapping Delete an AI transformer mapping
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteTransformerMappingWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AIControllerApi.DeleteTransformerMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ai/transformer/mappings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransformerMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete transformer mapping Delete an AI transformer mapping
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransformerMappingAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteTransformerMappingWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete transformer mapping Delete an AI transformer mapping
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteTransformerMappingWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AIControllerApi.DeleteTransformerMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ai/transformer/mappings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransformerMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all transformers Delete all AI transformers and schemas
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTransformers(int operationIndex = 0)
        {
            DeleteTransformersWithHttpInfo();
        }

        /// <summary>
        /// Delete all transformers Delete all AI transformers and schemas
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteTransformersWithHttpInfo(int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AIControllerApi.DeleteTransformers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ai/transformer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransformers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all transformers Delete all AI transformers and schemas
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransformersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteTransformersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all transformers Delete all AI transformers and schemas
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteTransformersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AIControllerApi.DeleteTransformers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ai/transformer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransformers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate structured content for an attachment Use output schemas to extract data from an attachment using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentAttachmentOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredContentResultDto</returns>
        public StructuredContentResultDto GenerateStructuredContentFromAttachment(GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<StructuredContentResultDto> localVarResponse = GenerateStructuredContentFromAttachmentWithHttpInfo(generateStructuredContentAttachmentOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate structured content for an attachment Use output schemas to extract data from an attachment using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentAttachmentOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredContentResultDto</returns>
        public mailslurp.Client.ApiResponse<StructuredContentResultDto> GenerateStructuredContentFromAttachmentWithHttpInfo(GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, int operationIndex = 0)
        {
            // verify the required parameter 'generateStructuredContentAttachmentOptions' is set
            if (generateStructuredContentAttachmentOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateStructuredContentAttachmentOptions' when calling AIControllerApi->GenerateStructuredContentFromAttachment");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateStructuredContentAttachmentOptions;

            localVarRequestOptions.Operation = "AIControllerApi.GenerateStructuredContentFromAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StructuredContentResultDto>("/ai/structured-content/attachment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateStructuredContentFromAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate structured content for an attachment Use output schemas to extract data from an attachment using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentAttachmentOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredContentResultDto</returns>
        public async System.Threading.Tasks.Task<StructuredContentResultDto> GenerateStructuredContentFromAttachmentAsync(GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<StructuredContentResultDto> localVarResponse = await GenerateStructuredContentFromAttachmentWithHttpInfoAsync(generateStructuredContentAttachmentOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate structured content for an attachment Use output schemas to extract data from an attachment using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentAttachmentOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredContentResultDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<StructuredContentResultDto>> GenerateStructuredContentFromAttachmentWithHttpInfoAsync(GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'generateStructuredContentAttachmentOptions' is set
            if (generateStructuredContentAttachmentOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateStructuredContentAttachmentOptions' when calling AIControllerApi->GenerateStructuredContentFromAttachment");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateStructuredContentAttachmentOptions;

            localVarRequestOptions.Operation = "AIControllerApi.GenerateStructuredContentFromAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StructuredContentResultDto>("/ai/structured-content/attachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateStructuredContentFromAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate structured content for an email Use output schemas to extract data from an email using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredContentResultDto</returns>
        public StructuredContentResultDto GenerateStructuredContentFromEmail(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<StructuredContentResultDto> localVarResponse = GenerateStructuredContentFromEmailWithHttpInfo(generateStructuredContentEmailOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate structured content for an email Use output schemas to extract data from an email using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredContentResultDto</returns>
        public mailslurp.Client.ApiResponse<StructuredContentResultDto> GenerateStructuredContentFromEmailWithHttpInfo(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0)
        {
            // verify the required parameter 'generateStructuredContentEmailOptions' is set
            if (generateStructuredContentEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateStructuredContentEmailOptions' when calling AIControllerApi->GenerateStructuredContentFromEmail");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateStructuredContentEmailOptions;

            localVarRequestOptions.Operation = "AIControllerApi.GenerateStructuredContentFromEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StructuredContentResultDto>("/ai/structured-content/email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateStructuredContentFromEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate structured content for an email Use output schemas to extract data from an email using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredContentResultDto</returns>
        public async System.Threading.Tasks.Task<StructuredContentResultDto> GenerateStructuredContentFromEmailAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<StructuredContentResultDto> localVarResponse = await GenerateStructuredContentFromEmailWithHttpInfoAsync(generateStructuredContentEmailOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate structured content for an email Use output schemas to extract data from an email using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredContentResultDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<StructuredContentResultDto>> GenerateStructuredContentFromEmailWithHttpInfoAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'generateStructuredContentEmailOptions' is set
            if (generateStructuredContentEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateStructuredContentEmailOptions' when calling AIControllerApi->GenerateStructuredContentFromEmail");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateStructuredContentEmailOptions;

            localVarRequestOptions.Operation = "AIControllerApi.GenerateStructuredContentFromEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StructuredContentResultDto>("/ai/structured-content/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateStructuredContentFromEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate structured content for a TXT message Use output schemas to extract data from an SMS using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentSmsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredContentResultDto</returns>
        public StructuredContentResultDto GenerateStructuredContentFromSms(GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<StructuredContentResultDto> localVarResponse = GenerateStructuredContentFromSmsWithHttpInfo(generateStructuredContentSmsOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate structured content for a TXT message Use output schemas to extract data from an SMS using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentSmsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredContentResultDto</returns>
        public mailslurp.Client.ApiResponse<StructuredContentResultDto> GenerateStructuredContentFromSmsWithHttpInfo(GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, int operationIndex = 0)
        {
            // verify the required parameter 'generateStructuredContentSmsOptions' is set
            if (generateStructuredContentSmsOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateStructuredContentSmsOptions' when calling AIControllerApi->GenerateStructuredContentFromSms");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateStructuredContentSmsOptions;

            localVarRequestOptions.Operation = "AIControllerApi.GenerateStructuredContentFromSms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StructuredContentResultDto>("/ai/structured-content/sms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateStructuredContentFromSms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate structured content for a TXT message Use output schemas to extract data from an SMS using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentSmsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredContentResultDto</returns>
        public async System.Threading.Tasks.Task<StructuredContentResultDto> GenerateStructuredContentFromSmsAsync(GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<StructuredContentResultDto> localVarResponse = await GenerateStructuredContentFromSmsWithHttpInfoAsync(generateStructuredContentSmsOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate structured content for a TXT message Use output schemas to extract data from an SMS using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentSmsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredContentResultDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<StructuredContentResultDto>> GenerateStructuredContentFromSmsWithHttpInfoAsync(GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'generateStructuredContentSmsOptions' is set
            if (generateStructuredContentSmsOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateStructuredContentSmsOptions' when calling AIControllerApi->GenerateStructuredContentFromSms");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateStructuredContentSmsOptions;

            localVarRequestOptions.Operation = "AIControllerApi.GenerateStructuredContentFromSms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StructuredContentResultDto>("/ai/structured-content/sms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateStructuredContentFromSms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a transformer Get AI transformer and schemas by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AITransformDto</returns>
        public AITransformDto GetTransformer(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<AITransformDto> localVarResponse = GetTransformerWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a transformer Get AI transformer and schemas by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AITransformDto</returns>
        public mailslurp.Client.ApiResponse<AITransformDto> GetTransformerWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AIControllerApi.GetTransformer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AITransformDto>("/ai/transformer/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a transformer Get AI transformer and schemas by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AITransformDto</returns>
        public async System.Threading.Tasks.Task<AITransformDto> GetTransformerAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<AITransformDto> localVarResponse = await GetTransformerWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a transformer Get AI transformer and schemas by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AITransformDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AITransformDto>> GetTransformerWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AIControllerApi.GetTransformer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AITransformDto>("/ai/transformer/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transformer mapping Get an AI transformer mapping
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AITransformMappingDto</returns>
        public AITransformMappingDto GetTransformerMapping(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<AITransformMappingDto> localVarResponse = GetTransformerMappingWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transformer mapping Get an AI transformer mapping
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AITransformMappingDto</returns>
        public mailslurp.Client.ApiResponse<AITransformMappingDto> GetTransformerMappingWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AIControllerApi.GetTransformerMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AITransformMappingDto>("/ai/transformer/mappings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformerMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transformer mapping Get an AI transformer mapping
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AITransformMappingDto</returns>
        public async System.Threading.Tasks.Task<AITransformMappingDto> GetTransformerMappingAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<AITransformMappingDto> localVarResponse = await GetTransformerMappingWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transformer mapping Get an AI transformer mapping
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AITransformMappingDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AITransformMappingDto>> GetTransformerMappingWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AIControllerApi.GetTransformerMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AITransformMappingDto>("/ai/transformer/mappings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformerMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transformer mappings Get AI transformer mappings to other entities
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageAITransformMappingProjection</returns>
        public PageAITransformMappingProjection GetTransformerMappings(Guid? aiTransformId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageAITransformMappingProjection> localVarResponse = GetTransformerMappingsWithHttpInfo(aiTransformId, entityId, entityType, page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transformer mappings Get AI transformer mappings to other entities
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageAITransformMappingProjection</returns>
        public mailslurp.Client.ApiResponse<PageAITransformMappingProjection> GetTransformerMappingsWithHttpInfo(Guid? aiTransformId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aiTransformId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "aiTransformId", aiTransformId));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }
            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "entityType", entityType));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "AIControllerApi.GetTransformerMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageAITransformMappingProjection>("/ai/transformer/mappings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformerMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transformer mappings Get AI transformer mappings to other entities
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageAITransformMappingProjection</returns>
        public async System.Threading.Tasks.Task<PageAITransformMappingProjection> GetTransformerMappingsAsync(Guid? aiTransformId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PageAITransformMappingProjection> localVarResponse = await GetTransformerMappingsWithHttpInfoAsync(aiTransformId, entityId, entityType, page, size, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transformer mappings Get AI transformer mappings to other entities
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageAITransformMappingProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageAITransformMappingProjection>> GetTransformerMappingsWithHttpInfoAsync(Guid? aiTransformId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aiTransformId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "aiTransformId", aiTransformId));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }
            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "entityType", entityType));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "AIControllerApi.GetTransformerMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageAITransformMappingProjection>("/ai/transformer/mappings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformerMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transformer result Get AI transformer result
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform result</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AITransformResultDto</returns>
        public AITransformResultDto GetTransformerResult(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<AITransformResultDto> localVarResponse = GetTransformerResultWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transformer result Get AI transformer result
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform result</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AITransformResultDto</returns>
        public mailslurp.Client.ApiResponse<AITransformResultDto> GetTransformerResultWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AIControllerApi.GetTransformerResult";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AITransformResultDto>("/ai/transformer/results/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformerResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transformer result Get AI transformer result
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform result</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AITransformResultDto</returns>
        public async System.Threading.Tasks.Task<AITransformResultDto> GetTransformerResultAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<AITransformResultDto> localVarResponse = await GetTransformerResultWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transformer result Get AI transformer result
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of transform result</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AITransformResultDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AITransformResultDto>> GetTransformerResultWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AIControllerApi.GetTransformerResult";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AITransformResultDto>("/ai/transformer/results/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformerResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transformer results Get AI transformer results
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="aiTransformMappingId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageAITransformResultProjection</returns>
        public PageAITransformResultProjection GetTransformerResults(Guid? aiTransformId = default, Guid? aiTransformMappingId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageAITransformResultProjection> localVarResponse = GetTransformerResultsWithHttpInfo(aiTransformId, aiTransformMappingId, entityId, entityType, page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transformer results Get AI transformer results
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="aiTransformMappingId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageAITransformResultProjection</returns>
        public mailslurp.Client.ApiResponse<PageAITransformResultProjection> GetTransformerResultsWithHttpInfo(Guid? aiTransformId = default, Guid? aiTransformMappingId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aiTransformId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "aiTransformId", aiTransformId));
            }
            if (aiTransformMappingId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "aiTransformMappingId", aiTransformMappingId));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }
            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "entityType", entityType));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "AIControllerApi.GetTransformerResults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageAITransformResultProjection>("/ai/transformer/results", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformerResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transformer results Get AI transformer results
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="aiTransformMappingId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageAITransformResultProjection</returns>
        public async System.Threading.Tasks.Task<PageAITransformResultProjection> GetTransformerResultsAsync(Guid? aiTransformId = default, Guid? aiTransformMappingId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PageAITransformResultProjection> localVarResponse = await GetTransformerResultsWithHttpInfoAsync(aiTransformId, aiTransformMappingId, entityId, entityType, page, size, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transformer results Get AI transformer results
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aiTransformId"> (optional)</param>
        /// <param name="aiTransformMappingId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="entityType"> (optional)</param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageAITransformResultProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageAITransformResultProjection>> GetTransformerResultsWithHttpInfoAsync(Guid? aiTransformId = default, Guid? aiTransformMappingId = default, Guid? entityId = default, string entityType = default, int? page = default, int? size = default, string sort = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (aiTransformId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "aiTransformId", aiTransformId));
            }
            if (aiTransformMappingId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "aiTransformMappingId", aiTransformMappingId));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }
            if (entityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "entityType", entityType));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "AIControllerApi.GetTransformerResults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageAITransformResultProjection>("/ai/transformer/results", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformerResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate structured content schema Check if a schema is valid and can be used to extract data using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StructuredOutputSchemaValidation</returns>
        public StructuredOutputSchemaValidation ValidateStructuredOutputSchema(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<StructuredOutputSchemaValidation> localVarResponse = ValidateStructuredOutputSchemaWithHttpInfo(structuredOutputSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate structured content schema Check if a schema is valid and can be used to extract data using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StructuredOutputSchemaValidation</returns>
        public mailslurp.Client.ApiResponse<StructuredOutputSchemaValidation> ValidateStructuredOutputSchemaWithHttpInfo(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0)
        {
            // verify the required parameter 'structuredOutputSchema' is set
            if (structuredOutputSchema == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'structuredOutputSchema' when calling AIControllerApi->ValidateStructuredOutputSchema");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = structuredOutputSchema;

            localVarRequestOptions.Operation = "AIControllerApi.ValidateStructuredOutputSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StructuredOutputSchemaValidation>("/ai/structured-content/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateStructuredOutputSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate structured content schema Check if a schema is valid and can be used to extract data using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StructuredOutputSchemaValidation</returns>
        public async System.Threading.Tasks.Task<StructuredOutputSchemaValidation> ValidateStructuredOutputSchemaAsync(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<StructuredOutputSchemaValidation> localVarResponse = await ValidateStructuredOutputSchemaWithHttpInfoAsync(structuredOutputSchema, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate structured content schema Check if a schema is valid and can be used to extract data using AI
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredOutputSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StructuredOutputSchemaValidation)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<StructuredOutputSchemaValidation>> ValidateStructuredOutputSchemaWithHttpInfoAsync(StructuredOutputSchema structuredOutputSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'structuredOutputSchema' is set
            if (structuredOutputSchema == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'structuredOutputSchema' when calling AIControllerApi->ValidateStructuredOutputSchema");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = structuredOutputSchema;

            localVarRequestOptions.Operation = "AIControllerApi.ValidateStructuredOutputSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StructuredOutputSchemaValidation>("/ai/structured-content/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateStructuredOutputSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
