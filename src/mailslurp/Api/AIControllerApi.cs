// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAIControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AIControllerApiEvents Events { get; }

        /// <summary>
        /// Generate structured content for an email
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an email using AI
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateStructuredContentFromEmailApiResponse"/>&gt;</returns>
        Task<IGenerateStructuredContentFromEmailApiResponse> GenerateStructuredContentFromEmailAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate structured content for an email
        /// </summary>
        /// <remarks>
        /// Use output schemas to extract data from an email using AI
        /// </remarks>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateStructuredContentFromEmailApiResponse"/>&gt;</returns>
        Task<IGenerateStructuredContentFromEmailApiResponse> GenerateStructuredContentFromEmailOrDefaultAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGenerateStructuredContentFromEmailApiResponse"/>
    /// </summary>
    public interface IGenerateStructuredContentFromEmailApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.StructuredContentResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AIControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGenerateStructuredContentFromEmail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGenerateStructuredContentFromEmail;

        internal void ExecuteOnGenerateStructuredContentFromEmail(AIControllerApi.GenerateStructuredContentFromEmailApiResponse apiResponse)
        {
            OnGenerateStructuredContentFromEmail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateStructuredContentFromEmail(Exception exception)
        {
            OnErrorGenerateStructuredContentFromEmail?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AIControllerApi : IAIControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AIControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AIControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AIControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AIControllerApi(ILogger<AIControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AIControllerApiEvents aIControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AIControllerApi>();
            HttpClient = httpClient;
            Events = aIControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGenerateStructuredContentFromEmail(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <returns></returns>
        private void ValidateGenerateStructuredContentFromEmail(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions)
        {
            if (generateStructuredContentEmailOptions == null)
                throw new ArgumentNullException(nameof(generateStructuredContentEmailOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateStructuredContentEmailOptions"></param>
        private void AfterGenerateStructuredContentFromEmailDefaultImplementation(IGenerateStructuredContentFromEmailApiResponse apiResponseLocalVar, GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions)
        {
            bool suppressDefaultLog = false;
            AfterGenerateStructuredContentFromEmail(ref suppressDefaultLog, apiResponseLocalVar, generateStructuredContentEmailOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateStructuredContentEmailOptions"></param>
        partial void AfterGenerateStructuredContentFromEmail(ref bool suppressDefaultLog, IGenerateStructuredContentFromEmailApiResponse apiResponseLocalVar, GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateStructuredContentEmailOptions"></param>
        private void OnErrorGenerateStructuredContentFromEmailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateStructuredContentFromEmail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateStructuredContentEmailOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateStructuredContentEmailOptions"></param>
        partial void OnErrorGenerateStructuredContentFromEmail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions);

        /// <summary>
        /// Generate structured content for an email Use output schemas to extract data from an email using AI
        /// </summary>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateStructuredContentFromEmailApiResponse"/>&gt;</returns>
        public async Task<IGenerateStructuredContentFromEmailApiResponse> GenerateStructuredContentFromEmailOrDefaultAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateStructuredContentFromEmailAsync(generateStructuredContentEmailOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate structured content for an email Use output schemas to extract data from an email using AI
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateStructuredContentEmailOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateStructuredContentFromEmailApiResponse"/>&gt;</returns>
        public async Task<IGenerateStructuredContentFromEmailApiResponse> GenerateStructuredContentFromEmailAsync(GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateStructuredContentFromEmail(generateStructuredContentEmailOptions);

                FormatGenerateStructuredContentFromEmail(generateStructuredContentEmailOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ai/structured-content/email"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ai/structured-content/email");

                    httpRequestMessageLocalVar.Content = (generateStructuredContentEmailOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateStructuredContentEmailOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GenerateStructuredContentFromEmailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateStructuredContentFromEmailApiResponse>();

                        GenerateStructuredContentFromEmailApiResponse apiResponseLocalVar = new GenerateStructuredContentFromEmailApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ai/structured-content/email", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateStructuredContentFromEmailDefaultImplementation(apiResponseLocalVar, generateStructuredContentEmailOptions);

                        Events.ExecuteOnGenerateStructuredContentFromEmail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateStructuredContentFromEmailDefaultImplementation(e, "/ai/structured-content/email", uriBuilderLocalVar.Path, generateStructuredContentEmailOptions);
                Events.ExecuteOnErrorGenerateStructuredContentFromEmail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateStructuredContentFromEmailApiResponse"/>
        /// </summary>
        public partial class GenerateStructuredContentFromEmailApiResponse : mailslurp.Client.ApiResponse, IGenerateStructuredContentFromEmailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateStructuredContentFromEmailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateStructuredContentFromEmailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateStructuredContentFromEmailApiResponse(ILogger<GenerateStructuredContentFromEmailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.StructuredContentResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.StructuredContentResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.StructuredContentResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
