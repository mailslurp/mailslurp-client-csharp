/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository  ## Basic Concepts  ### Inboxes  Inboxes have real email addresses that can send and receive emails. You can create inboxes with specific email addresses (using custom domains). You can also use randomly assigned MailSlurp addresses as unique, disposable test addresses.   See the InboxController or [inbox and email address guide](https://www.mailslurp.com/guides/) for more information.  ### Receive Emails You can receive emails in a number of ways. You can fetch emails and attachments directly from an inbox. Or you can use `waitFor` endpoints to hold a connection open until an email is received that matches given criteria (such as subject or body content). You can also use webhooks to have emails from multiple inboxes forwarded to your server via HTTP POST.  InboxController methods with `waitFor` in the name have a long timeout period and instruct MailSlurp to wait until an expected email is received. You can set conditions on email counts, subject or body matches, and more.  Most receive methods only return an email ID and not the full email (to keep response sizes low). To fetch the full body or attachments for an email use the email's ID with EmailController endpoints.  See the InboxController or [receiving emails guide](https://www.mailslurp.com/guides/) for more information.  ### Send Emails You can send templated HTML emails in several ways. You must first create an inbox to send an email. An inbox can have a specific address or a randomly assigned one. You can send emails from an inbox using `to`, `cc`, and `bcc` recipient lists or with contacts and contact groups.   Emails can contain plain-text or HTML bodies. You can also use email templates that support [moustache](https://mustache.github.io/) template variables. You can send attachments by first posting files to the AttachmentController and then using the returned IDs in the `attachments` field of the send options.  See the InboxController or [sending emails guide](https://www.mailslurp.com/guides/) for more information.  ### Templates MailSlurp emails support templates. You can create templates in the dashboard or API that contain [moustache](https://mustache.github.io/) style variables: for instance `Hello {{name}}`. Then when sending emails you can pass a map of variables names and values to be used. Additionally, when sending emails with contact groups you can use properties of the contact in your templates like `{{firstName}}` and `{{lastName}}`.  > You can do a lot more with MailSlurp so see the included documentation for more information.  
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupControllerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add contacts to a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>GroupContactsDto</returns>
        GroupContactsDto AddContactsToGroup (Guid groupId, UpdateGroupContacts updateGroupContactsOption);

        /// <summary>
        /// Add contacts to a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>ApiResponse of GroupContactsDto</returns>
        ApiResponse<GroupContactsDto> AddContactsToGroupWithHttpInfo (Guid groupId, UpdateGroupContacts updateGroupContactsOption);
        /// <summary>
        /// Create a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupOptions">createGroupOptions</param>
        /// <returns>GroupDto</returns>
        GroupDto CreateGroup (CreateGroupOptions createGroupOptions);

        /// <summary>
        /// Create a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupOptions">createGroupOptions</param>
        /// <returns>ApiResponse of GroupDto</returns>
        ApiResponse<GroupDto> CreateGroupWithHttpInfo (CreateGroupOptions createGroupOptions);
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns></returns>
        void DeleteGroup (Guid groupId);

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo (Guid groupId);
        /// <summary>
        /// Get all Contact Groups in paginated format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageGroupProjection</returns>
        PageGroupProjection GetAllGroups (int page = default(int), int size = default(int), string sort = default(string));

        /// <summary>
        /// Get all Contact Groups in paginated format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageGroupProjection</returns>
        ApiResponse<PageGroupProjection> GetAllGroupsWithHttpInfo (int page = default(int), int size = default(int), string sort = default(string));
        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>GroupDto</returns>
        GroupDto GetGroup (Guid groupId);

        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>ApiResponse of GroupDto</returns>
        ApiResponse<GroupDto> GetGroupWithHttpInfo (Guid groupId);
        /// <summary>
        /// Get group and contacts belonging to it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>GroupContactsDto</returns>
        GroupContactsDto GetGroupWithContacts (Guid groupId);

        /// <summary>
        /// Get group and contacts belonging to it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>ApiResponse of GroupContactsDto</returns>
        ApiResponse<GroupContactsDto> GetGroupWithContactsWithHttpInfo (Guid groupId);
        /// <summary>
        /// Get all groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GroupProjection&gt;</returns>
        List<GroupProjection> GetGroups ();

        /// <summary>
        /// Get all groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GroupProjection&gt;</returns>
        ApiResponse<List<GroupProjection>> GetGroupsWithHttpInfo ();
        /// <summary>
        /// Remove contacts from a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>GroupContactsDto</returns>
        GroupContactsDto RemoveContactsFromGroup (Guid groupId, UpdateGroupContacts updateGroupContactsOption);

        /// <summary>
        /// Remove contacts from a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>ApiResponse of GroupContactsDto</returns>
        ApiResponse<GroupContactsDto> RemoveContactsFromGroupWithHttpInfo (Guid groupId, UpdateGroupContacts updateGroupContactsOption);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add contacts to a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>Task of GroupContactsDto</returns>
        System.Threading.Tasks.Task<GroupContactsDto> AddContactsToGroupAsync (Guid groupId, UpdateGroupContacts updateGroupContactsOption);

        /// <summary>
        /// Add contacts to a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>Task of ApiResponse (GroupContactsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupContactsDto>> AddContactsToGroupAsyncWithHttpInfo (Guid groupId, UpdateGroupContacts updateGroupContactsOption);
        /// <summary>
        /// Create a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupOptions">createGroupOptions</param>
        /// <returns>Task of GroupDto</returns>
        System.Threading.Tasks.Task<GroupDto> CreateGroupAsync (CreateGroupOptions createGroupOptions);

        /// <summary>
        /// Create a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupOptions">createGroupOptions</param>
        /// <returns>Task of ApiResponse (GroupDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupDto>> CreateGroupAsyncWithHttpInfo (CreateGroupOptions createGroupOptions);
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync (Guid groupId);

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupAsyncWithHttpInfo (Guid groupId);
        /// <summary>
        /// Get all Contact Groups in paginated format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageGroupProjection</returns>
        System.Threading.Tasks.Task<PageGroupProjection> GetAllGroupsAsync (int page = default(int), int size = default(int), string sort = default(string));

        /// <summary>
        /// Get all Contact Groups in paginated format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageGroupProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageGroupProjection>> GetAllGroupsAsyncWithHttpInfo (int page = default(int), int size = default(int), string sort = default(string));
        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of GroupDto</returns>
        System.Threading.Tasks.Task<GroupDto> GetGroupAsync (Guid groupId);

        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of ApiResponse (GroupDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupDto>> GetGroupAsyncWithHttpInfo (Guid groupId);
        /// <summary>
        /// Get group and contacts belonging to it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of GroupContactsDto</returns>
        System.Threading.Tasks.Task<GroupContactsDto> GetGroupWithContactsAsync (Guid groupId);

        /// <summary>
        /// Get group and contacts belonging to it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of ApiResponse (GroupContactsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupContactsDto>> GetGroupWithContactsAsyncWithHttpInfo (Guid groupId);
        /// <summary>
        /// Get all groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GroupProjection&gt;</returns>
        System.Threading.Tasks.Task<List<GroupProjection>> GetGroupsAsync ();

        /// <summary>
        /// Get all groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GroupProjection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupProjection>>> GetGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// Remove contacts from a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>Task of GroupContactsDto</returns>
        System.Threading.Tasks.Task<GroupContactsDto> RemoveContactsFromGroupAsync (Guid groupId, UpdateGroupContacts updateGroupContactsOption);

        /// <summary>
        /// Remove contacts from a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>Task of ApiResponse (GroupContactsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupContactsDto>> RemoveContactsFromGroupAsyncWithHttpInfo (Guid groupId, UpdateGroupContacts updateGroupContactsOption);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupControllerApi : IGroupControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupControllerApi(String basePath)
        {
            this.Configuration = new mailslurp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupControllerApi"/> class
        /// </summary>
        /// <returns></returns>
        public GroupControllerApi()
        {
            this.Configuration = mailslurp.Client.Configuration.Default;

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupControllerApi(mailslurp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mailslurp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add contacts to a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>GroupContactsDto</returns>
        public GroupContactsDto AddContactsToGroup (Guid groupId, UpdateGroupContacts updateGroupContactsOption)
        {
             ApiResponse<GroupContactsDto> localVarResponse = AddContactsToGroupWithHttpInfo(groupId, updateGroupContactsOption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add contacts to a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>ApiResponse of GroupContactsDto</returns>
        public ApiResponse<GroupContactsDto> AddContactsToGroupWithHttpInfo (Guid groupId, UpdateGroupContacts updateGroupContactsOption)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupControllerApi->AddContactsToGroup");
            // verify the required parameter 'updateGroupContactsOption' is set
            if (updateGroupContactsOption == null)
                throw new ApiException(400, "Missing required parameter 'updateGroupContactsOption' when calling GroupControllerApi->AddContactsToGroup");

            var localVarPath = "./groups/{groupId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (updateGroupContactsOption != null && updateGroupContactsOption.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGroupContactsOption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGroupContactsOption; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactsToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupContactsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupContactsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupContactsDto)));
        }

        /// <summary>
        /// Add contacts to a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>Task of GroupContactsDto</returns>
        public async System.Threading.Tasks.Task<GroupContactsDto> AddContactsToGroupAsync (Guid groupId, UpdateGroupContacts updateGroupContactsOption)
        {
             ApiResponse<GroupContactsDto> localVarResponse = await AddContactsToGroupAsyncWithHttpInfo(groupId, updateGroupContactsOption);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add contacts to a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>Task of ApiResponse (GroupContactsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupContactsDto>> AddContactsToGroupAsyncWithHttpInfo (Guid groupId, UpdateGroupContacts updateGroupContactsOption)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupControllerApi->AddContactsToGroup");
            // verify the required parameter 'updateGroupContactsOption' is set
            if (updateGroupContactsOption == null)
                throw new ApiException(400, "Missing required parameter 'updateGroupContactsOption' when calling GroupControllerApi->AddContactsToGroup");

            var localVarPath = "./groups/{groupId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (updateGroupContactsOption != null && updateGroupContactsOption.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGroupContactsOption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGroupContactsOption; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactsToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupContactsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupContactsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupContactsDto)));
        }

        /// <summary>
        /// Create a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupOptions">createGroupOptions</param>
        /// <returns>GroupDto</returns>
        public GroupDto CreateGroup (CreateGroupOptions createGroupOptions)
        {
             ApiResponse<GroupDto> localVarResponse = CreateGroupWithHttpInfo(createGroupOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupOptions">createGroupOptions</param>
        /// <returns>ApiResponse of GroupDto</returns>
        public ApiResponse<GroupDto> CreateGroupWithHttpInfo (CreateGroupOptions createGroupOptions)
        {
            // verify the required parameter 'createGroupOptions' is set
            if (createGroupOptions == null)
                throw new ApiException(400, "Missing required parameter 'createGroupOptions' when calling GroupControllerApi->CreateGroup");

            var localVarPath = "./groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createGroupOptions != null && createGroupOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGroupOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGroupOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupDto)));
        }

        /// <summary>
        /// Create a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupOptions">createGroupOptions</param>
        /// <returns>Task of GroupDto</returns>
        public async System.Threading.Tasks.Task<GroupDto> CreateGroupAsync (CreateGroupOptions createGroupOptions)
        {
             ApiResponse<GroupDto> localVarResponse = await CreateGroupAsyncWithHttpInfo(createGroupOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGroupOptions">createGroupOptions</param>
        /// <returns>Task of ApiResponse (GroupDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupDto>> CreateGroupAsyncWithHttpInfo (CreateGroupOptions createGroupOptions)
        {
            // verify the required parameter 'createGroupOptions' is set
            if (createGroupOptions == null)
                throw new ApiException(400, "Missing required parameter 'createGroupOptions' when calling GroupControllerApi->CreateGroup");

            var localVarPath = "./groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createGroupOptions != null && createGroupOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGroupOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGroupOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupDto)));
        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns></returns>
        public void DeleteGroup (Guid groupId)
        {
             DeleteGroupWithHttpInfo(groupId);
        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGroupWithHttpInfo (Guid groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupControllerApi->DeleteGroup");

            var localVarPath = "./groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync (Guid groupId)
        {
             await DeleteGroupAsyncWithHttpInfo(groupId);

        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupAsyncWithHttpInfo (Guid groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupControllerApi->DeleteGroup");

            var localVarPath = "./groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get all Contact Groups in paginated format 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageGroupProjection</returns>
        public PageGroupProjection GetAllGroups (int page = default(int), int size = default(int), string sort = default(string))
        {
             ApiResponse<PageGroupProjection> localVarResponse = GetAllGroupsWithHttpInfo(page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Contact Groups in paginated format 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageGroupProjection</returns>
        public ApiResponse<PageGroupProjection> GetAllGroupsWithHttpInfo (int page = default(int), int size = default(int), string sort = default(string))
        {

            var localVarPath = "./groups/paginated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageGroupProjection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PageGroupProjection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageGroupProjection)));
        }

        /// <summary>
        /// Get all Contact Groups in paginated format 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageGroupProjection</returns>
        public async System.Threading.Tasks.Task<PageGroupProjection> GetAllGroupsAsync (int page = default(int), int size = default(int), string sort = default(string))
        {
             ApiResponse<PageGroupProjection> localVarResponse = await GetAllGroupsAsyncWithHttpInfo(page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Contact Groups in paginated format 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageGroupProjection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageGroupProjection>> GetAllGroupsAsyncWithHttpInfo (int page = default(int), int size = default(int), string sort = default(string))
        {

            var localVarPath = "./groups/paginated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageGroupProjection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PageGroupProjection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageGroupProjection)));
        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>GroupDto</returns>
        public GroupDto GetGroup (Guid groupId)
        {
             ApiResponse<GroupDto> localVarResponse = GetGroupWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>ApiResponse of GroupDto</returns>
        public ApiResponse<GroupDto> GetGroupWithHttpInfo (Guid groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupControllerApi->GetGroup");

            var localVarPath = "./groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupDto)));
        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of GroupDto</returns>
        public async System.Threading.Tasks.Task<GroupDto> GetGroupAsync (Guid groupId)
        {
             ApiResponse<GroupDto> localVarResponse = await GetGroupAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of ApiResponse (GroupDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupDto>> GetGroupAsyncWithHttpInfo (Guid groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupControllerApi->GetGroup");

            var localVarPath = "./groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupDto)));
        }

        /// <summary>
        /// Get group and contacts belonging to it 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>GroupContactsDto</returns>
        public GroupContactsDto GetGroupWithContacts (Guid groupId)
        {
             ApiResponse<GroupContactsDto> localVarResponse = GetGroupWithContactsWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group and contacts belonging to it 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>ApiResponse of GroupContactsDto</returns>
        public ApiResponse<GroupContactsDto> GetGroupWithContactsWithHttpInfo (Guid groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupControllerApi->GetGroupWithContacts");

            var localVarPath = "./groups/{groupId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupWithContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupContactsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupContactsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupContactsDto)));
        }

        /// <summary>
        /// Get group and contacts belonging to it 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of GroupContactsDto</returns>
        public async System.Threading.Tasks.Task<GroupContactsDto> GetGroupWithContactsAsync (Guid groupId)
        {
             ApiResponse<GroupContactsDto> localVarResponse = await GetGroupWithContactsAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group and contacts belonging to it 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <returns>Task of ApiResponse (GroupContactsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupContactsDto>> GetGroupWithContactsAsyncWithHttpInfo (Guid groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupControllerApi->GetGroupWithContacts");

            var localVarPath = "./groups/{groupId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupWithContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupContactsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupContactsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupContactsDto)));
        }

        /// <summary>
        /// Get all groups 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GroupProjection&gt;</returns>
        public List<GroupProjection> GetGroups ()
        {
             ApiResponse<List<GroupProjection>> localVarResponse = GetGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all groups 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GroupProjection&gt;</returns>
        public ApiResponse<List<GroupProjection>> GetGroupsWithHttpInfo ()
        {

            var localVarPath = "./groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupProjection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<GroupProjection>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupProjection>)));
        }

        /// <summary>
        /// Get all groups 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GroupProjection&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupProjection>> GetGroupsAsync ()
        {
             ApiResponse<List<GroupProjection>> localVarResponse = await GetGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all groups 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GroupProjection&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GroupProjection>>> GetGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "./groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupProjection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<GroupProjection>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupProjection>)));
        }

        /// <summary>
        /// Remove contacts from a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>GroupContactsDto</returns>
        public GroupContactsDto RemoveContactsFromGroup (Guid groupId, UpdateGroupContacts updateGroupContactsOption)
        {
             ApiResponse<GroupContactsDto> localVarResponse = RemoveContactsFromGroupWithHttpInfo(groupId, updateGroupContactsOption);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove contacts from a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>ApiResponse of GroupContactsDto</returns>
        public ApiResponse<GroupContactsDto> RemoveContactsFromGroupWithHttpInfo (Guid groupId, UpdateGroupContacts updateGroupContactsOption)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupControllerApi->RemoveContactsFromGroup");
            // verify the required parameter 'updateGroupContactsOption' is set
            if (updateGroupContactsOption == null)
                throw new ApiException(400, "Missing required parameter 'updateGroupContactsOption' when calling GroupControllerApi->RemoveContactsFromGroup");

            var localVarPath = "./groups/{groupId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (updateGroupContactsOption != null && updateGroupContactsOption.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGroupContactsOption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGroupContactsOption; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveContactsFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupContactsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupContactsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupContactsDto)));
        }

        /// <summary>
        /// Remove contacts from a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>Task of GroupContactsDto</returns>
        public async System.Threading.Tasks.Task<GroupContactsDto> RemoveContactsFromGroupAsync (Guid groupId, UpdateGroupContacts updateGroupContactsOption)
        {
             ApiResponse<GroupContactsDto> localVarResponse = await RemoveContactsFromGroupAsyncWithHttpInfo(groupId, updateGroupContactsOption);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove contacts from a group 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">groupId</param>
        /// <param name="updateGroupContactsOption">updateGroupContactsOption</param>
        /// <returns>Task of ApiResponse (GroupContactsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupContactsDto>> RemoveContactsFromGroupAsyncWithHttpInfo (Guid groupId, UpdateGroupContacts updateGroupContactsOption)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupControllerApi->RemoveContactsFromGroup");
            // verify the required parameter 'updateGroupContactsOption' is set
            if (updateGroupContactsOption == null)
                throw new ApiException(400, "Missing required parameter 'updateGroupContactsOption' when calling GroupControllerApi->RemoveContactsFromGroup");

            var localVarPath = "./groups/{groupId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (updateGroupContactsOption != null && updateGroupContactsOption.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGroupContactsOption); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGroupContactsOption; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveContactsFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupContactsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupContactsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupContactsDto)));
        }

    }
}
