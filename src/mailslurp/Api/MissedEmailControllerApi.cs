// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMissedEmailControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MissedEmailControllerApiEvents Events { get; }

        /// <summary>
        /// Get all MissedEmails in paginated format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllMissedEmailsApiResponse"/>&gt;</returns>
        Task<IGetAllMissedEmailsApiResponse> GetAllMissedEmailsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all MissedEmails in paginated format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllMissedEmailsApiResponse"/>&gt;</returns>
        Task<IGetAllMissedEmailsApiResponse> GetAllMissedEmailsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all unknown missed emails in paginated format
        /// </summary>
        /// <remarks>
        /// Unknown missed emails are emails that were sent to MailSlurp but could not be assigned to an existing inbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUnknownMissedEmailsApiResponse"/>&gt;</returns>
        Task<IGetAllUnknownMissedEmailsApiResponse> GetAllUnknownMissedEmailsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all unknown missed emails in paginated format
        /// </summary>
        /// <remarks>
        /// Unknown missed emails are emails that were sent to MailSlurp but could not be assigned to an existing inbox.
        /// </remarks>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUnknownMissedEmailsApiResponse"/>&gt;</returns>
        Task<IGetAllUnknownMissedEmailsApiResponse> GetAllUnknownMissedEmailsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get MissedEmail
        /// </summary>
        /// <remarks>
        /// List emails that were missed due to plan limits.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="missedEmailId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMissedEmailApiResponse"/>&gt;</returns>
        Task<IGetMissedEmailApiResponse> GetMissedEmailAsync(Guid missedEmailId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get MissedEmail
        /// </summary>
        /// <remarks>
        /// List emails that were missed due to plan limits.
        /// </remarks>
        /// <param name="missedEmailId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMissedEmailApiResponse"/>&gt;</returns>
        Task<IGetMissedEmailApiResponse> GetMissedEmailOrDefaultAsync(Guid missedEmailId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Restore missed emails
        /// </summary>
        /// <remarks>
        /// If emails were missed due to a plan limit they are saved as missed emails. If support team enables the canRestore flag these emails can be reload into your account using this method.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreMissedEmailsApiResponse"/>&gt;</returns>
        Task<IRestoreMissedEmailsApiResponse> RestoreMissedEmailsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Restore missed emails
        /// </summary>
        /// <remarks>
        /// If emails were missed due to a plan limit they are saved as missed emails. If support team enables the canRestore flag these emails can be reload into your account using this method.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreMissedEmailsApiResponse"/>&gt;</returns>
        Task<IRestoreMissedEmailsApiResponse> RestoreMissedEmailsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Wait for Nth missed email
        /// </summary>
        /// <remarks>
        /// Wait for 0 based index missed email
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="timeout">Optional timeout milliseconds (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWaitForNthMissedEmailApiResponse"/>&gt;</returns>
        Task<IWaitForNthMissedEmailApiResponse> WaitForNthMissedEmailAsync(int index, Option<Guid> inboxId = default, Option<long> timeout = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Wait for Nth missed email
        /// </summary>
        /// <remarks>
        /// Wait for 0 based index missed email
        /// </remarks>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="timeout">Optional timeout milliseconds (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWaitForNthMissedEmailApiResponse"/>&gt;</returns>
        Task<IWaitForNthMissedEmailApiResponse> WaitForNthMissedEmailOrDefaultAsync(int index, Option<Guid> inboxId = default, Option<long> timeout = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAllMissedEmailsApiResponse"/>
    /// </summary>
    public interface IGetAllMissedEmailsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageMissedEmailProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllUnknownMissedEmailsApiResponse"/>
    /// </summary>
    public interface IGetAllUnknownMissedEmailsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageUnknownMissedEmailProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMissedEmailApiResponse"/>
    /// </summary>
    public interface IGetMissedEmailApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.MissedEmailDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IRestoreMissedEmailsApiResponse"/>
    /// </summary>
    public interface IRestoreMissedEmailsApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWaitForNthMissedEmailApiResponse"/>
    /// </summary>
    public interface IWaitForNthMissedEmailApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.MissedEmailDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MissedEmailControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllMissedEmails;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllMissedEmails;

        internal void ExecuteOnGetAllMissedEmails(MissedEmailControllerApi.GetAllMissedEmailsApiResponse apiResponse)
        {
            OnGetAllMissedEmails?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllMissedEmails(Exception exception)
        {
            OnErrorGetAllMissedEmails?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllUnknownMissedEmails;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllUnknownMissedEmails;

        internal void ExecuteOnGetAllUnknownMissedEmails(MissedEmailControllerApi.GetAllUnknownMissedEmailsApiResponse apiResponse)
        {
            OnGetAllUnknownMissedEmails?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllUnknownMissedEmails(Exception exception)
        {
            OnErrorGetAllUnknownMissedEmails?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetMissedEmail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetMissedEmail;

        internal void ExecuteOnGetMissedEmail(MissedEmailControllerApi.GetMissedEmailApiResponse apiResponse)
        {
            OnGetMissedEmail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMissedEmail(Exception exception)
        {
            OnErrorGetMissedEmail?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRestoreMissedEmails;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRestoreMissedEmails;

        internal void ExecuteOnRestoreMissedEmails(MissedEmailControllerApi.RestoreMissedEmailsApiResponse apiResponse)
        {
            OnRestoreMissedEmails?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRestoreMissedEmails(Exception exception)
        {
            OnErrorRestoreMissedEmails?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWaitForNthMissedEmail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWaitForNthMissedEmail;

        internal void ExecuteOnWaitForNthMissedEmail(MissedEmailControllerApi.WaitForNthMissedEmailApiResponse apiResponse)
        {
            OnWaitForNthMissedEmail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWaitForNthMissedEmail(Exception exception)
        {
            OnErrorWaitForNthMissedEmail?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MissedEmailControllerApi : IMissedEmailControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MissedEmailControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MissedEmailControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MissedEmailControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MissedEmailControllerApi(ILogger<MissedEmailControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MissedEmailControllerApiEvents missedEmailControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MissedEmailControllerApi>();
            HttpClient = httpClient;
            Events = missedEmailControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetAllMissedEmails(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<string> searchFilter, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<Guid> inboxId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <returns></returns>
        private void ValidateGetAllMissedEmails(Option<string> sort, Option<string> searchFilter)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        private void AfterGetAllMissedEmailsDefaultImplementation(IGetAllMissedEmailsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId)
        {
            bool suppressDefaultLog = false;
            AfterGetAllMissedEmails(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, searchFilter, since, before, inboxId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        partial void AfterGetAllMissedEmails(ref bool suppressDefaultLog, IGetAllMissedEmailsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        private void OnErrorGetAllMissedEmailsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllMissedEmails(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, searchFilter, since, before, inboxId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        partial void OnErrorGetAllMissedEmails(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId);

        /// <summary>
        /// Get all MissedEmails in paginated format 
        /// </summary>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllMissedEmailsApiResponse"/>&gt;</returns>
        public async Task<IGetAllMissedEmailsApiResponse> GetAllMissedEmailsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllMissedEmailsAsync(page, size, sort, searchFilter, since, before, inboxId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all MissedEmails in paginated format 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllMissedEmailsApiResponse"/>&gt;</returns>
        public async Task<IGetAllMissedEmailsApiResponse> GetAllMissedEmailsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllMissedEmails(sort, searchFilter);

                FormatGetAllMissedEmails(ref page, ref size, ref sort, ref searchFilter, ref since, ref before, ref inboxId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/missed-emails"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/missed-emails");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllMissedEmailsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllMissedEmailsApiResponse>();

                        GetAllMissedEmailsApiResponse apiResponseLocalVar = new GetAllMissedEmailsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/missed-emails", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllMissedEmailsDefaultImplementation(apiResponseLocalVar, page, size, sort, searchFilter, since, before, inboxId);

                        Events.ExecuteOnGetAllMissedEmails(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllMissedEmailsDefaultImplementation(e, "/missed-emails", uriBuilderLocalVar.Path, page, size, sort, searchFilter, since, before, inboxId);
                Events.ExecuteOnErrorGetAllMissedEmails(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllMissedEmailsApiResponse"/>
        /// </summary>
        public partial class GetAllMissedEmailsApiResponse : mailslurp.Client.ApiResponse, IGetAllMissedEmailsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllMissedEmailsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllMissedEmailsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllMissedEmailsApiResponse(ILogger<GetAllMissedEmailsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageMissedEmailProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageMissedEmailProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageMissedEmailProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllUnknownMissedEmails(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<string> searchFilter, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<Guid> inboxId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <returns></returns>
        private void ValidateGetAllUnknownMissedEmails(Option<string> sort, Option<string> searchFilter)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        private void AfterGetAllUnknownMissedEmailsDefaultImplementation(IGetAllUnknownMissedEmailsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId)
        {
            bool suppressDefaultLog = false;
            AfterGetAllUnknownMissedEmails(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, searchFilter, since, before, inboxId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        partial void AfterGetAllUnknownMissedEmails(ref bool suppressDefaultLog, IGetAllUnknownMissedEmailsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        private void OnErrorGetAllUnknownMissedEmailsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllUnknownMissedEmails(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, searchFilter, since, before, inboxId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        partial void OnErrorGetAllUnknownMissedEmails(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId);

        /// <summary>
        /// Get all unknown missed emails in paginated format Unknown missed emails are emails that were sent to MailSlurp but could not be assigned to an existing inbox.
        /// </summary>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUnknownMissedEmailsApiResponse"/>&gt;</returns>
        public async Task<IGetAllUnknownMissedEmailsApiResponse> GetAllUnknownMissedEmailsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllUnknownMissedEmailsAsync(page, size, sort, searchFilter, since, before, inboxId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all unknown missed emails in paginated format Unknown missed emails are emails that were sent to MailSlurp but could not be assigned to an existing inbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUnknownMissedEmailsApiResponse"/>&gt;</returns>
        public async Task<IGetAllUnknownMissedEmailsApiResponse> GetAllUnknownMissedEmailsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllUnknownMissedEmails(sort, searchFilter);

                FormatGetAllUnknownMissedEmails(ref page, ref size, ref sort, ref searchFilter, ref since, ref before, ref inboxId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/missed-emails/unknown"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/missed-emails/unknown");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllUnknownMissedEmailsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllUnknownMissedEmailsApiResponse>();

                        GetAllUnknownMissedEmailsApiResponse apiResponseLocalVar = new GetAllUnknownMissedEmailsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/missed-emails/unknown", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllUnknownMissedEmailsDefaultImplementation(apiResponseLocalVar, page, size, sort, searchFilter, since, before, inboxId);

                        Events.ExecuteOnGetAllUnknownMissedEmails(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllUnknownMissedEmailsDefaultImplementation(e, "/missed-emails/unknown", uriBuilderLocalVar.Path, page, size, sort, searchFilter, since, before, inboxId);
                Events.ExecuteOnErrorGetAllUnknownMissedEmails(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllUnknownMissedEmailsApiResponse"/>
        /// </summary>
        public partial class GetAllUnknownMissedEmailsApiResponse : mailslurp.Client.ApiResponse, IGetAllUnknownMissedEmailsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllUnknownMissedEmailsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllUnknownMissedEmailsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllUnknownMissedEmailsApiResponse(ILogger<GetAllUnknownMissedEmailsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageUnknownMissedEmailProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageUnknownMissedEmailProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageUnknownMissedEmailProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetMissedEmail(ref Guid missedEmailId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="missedEmailId"></param>
        private void AfterGetMissedEmailDefaultImplementation(IGetMissedEmailApiResponse apiResponseLocalVar, Guid missedEmailId)
        {
            bool suppressDefaultLog = false;
            AfterGetMissedEmail(ref suppressDefaultLog, apiResponseLocalVar, missedEmailId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="missedEmailId"></param>
        partial void AfterGetMissedEmail(ref bool suppressDefaultLog, IGetMissedEmailApiResponse apiResponseLocalVar, Guid missedEmailId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="missedEmailId"></param>
        private void OnErrorGetMissedEmailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid missedEmailId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetMissedEmail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, missedEmailId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="missedEmailId"></param>
        partial void OnErrorGetMissedEmail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid missedEmailId);

        /// <summary>
        /// Get MissedEmail List emails that were missed due to plan limits.
        /// </summary>
        /// <param name="missedEmailId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMissedEmailApiResponse"/>&gt;</returns>
        public async Task<IGetMissedEmailApiResponse> GetMissedEmailOrDefaultAsync(Guid missedEmailId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMissedEmailAsync(missedEmailId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get MissedEmail List emails that were missed due to plan limits.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="missedEmailId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMissedEmailApiResponse"/>&gt;</returns>
        public async Task<IGetMissedEmailApiResponse> GetMissedEmailAsync(Guid missedEmailId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetMissedEmail(ref missedEmailId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/missed-emails/{missedEmailId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/missed-emails/{missedEmailId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BmissedEmailId%7D", Uri.EscapeDataString(missedEmailId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetMissedEmailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMissedEmailApiResponse>();

                        GetMissedEmailApiResponse apiResponseLocalVar = new GetMissedEmailApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/missed-emails/{missedEmailId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMissedEmailDefaultImplementation(apiResponseLocalVar, missedEmailId);

                        Events.ExecuteOnGetMissedEmail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMissedEmailDefaultImplementation(e, "/missed-emails/{missedEmailId}", uriBuilderLocalVar.Path, missedEmailId);
                Events.ExecuteOnErrorGetMissedEmail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMissedEmailApiResponse"/>
        /// </summary>
        public partial class GetMissedEmailApiResponse : mailslurp.Client.ApiResponse, IGetMissedEmailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMissedEmailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMissedEmailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMissedEmailApiResponse(ILogger<GetMissedEmailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.MissedEmailDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.MissedEmailDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.MissedEmailDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterRestoreMissedEmailsDefaultImplementation(IRestoreMissedEmailsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterRestoreMissedEmails(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterRestoreMissedEmails(ref bool suppressDefaultLog, IRestoreMissedEmailsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorRestoreMissedEmailsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRestoreMissedEmails(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorRestoreMissedEmails(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Restore missed emails If emails were missed due to a plan limit they are saved as missed emails. If support team enables the canRestore flag these emails can be reload into your account using this method.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreMissedEmailsApiResponse"/>&gt;</returns>
        public async Task<IRestoreMissedEmailsApiResponse> RestoreMissedEmailsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RestoreMissedEmailsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Restore missed emails If emails were missed due to a plan limit they are saved as missed emails. If support team enables the canRestore flag these emails can be reload into your account using this method.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRestoreMissedEmailsApiResponse"/>&gt;</returns>
        public async Task<IRestoreMissedEmailsApiResponse> RestoreMissedEmailsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/missed-emails/restore"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/missed-emails/restore");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<RestoreMissedEmailsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RestoreMissedEmailsApiResponse>();

                        RestoreMissedEmailsApiResponse apiResponseLocalVar = new RestoreMissedEmailsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/missed-emails/restore", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRestoreMissedEmailsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnRestoreMissedEmails(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRestoreMissedEmailsDefaultImplementation(e, "/missed-emails/restore", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorRestoreMissedEmails(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RestoreMissedEmailsApiResponse"/>
        /// </summary>
        public partial class RestoreMissedEmailsApiResponse : mailslurp.Client.ApiResponse, IRestoreMissedEmailsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RestoreMissedEmailsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RestoreMissedEmailsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RestoreMissedEmailsApiResponse(ILogger<RestoreMissedEmailsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWaitForNthMissedEmail(ref int index, ref Option<Guid> inboxId, ref Option<long> timeout, ref Option<DateTime> since, ref Option<DateTime> before);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="index"></param>
        /// <param name="inboxId"></param>
        /// <param name="timeout"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void AfterWaitForNthMissedEmailDefaultImplementation(IWaitForNthMissedEmailApiResponse apiResponseLocalVar, int index, Option<Guid> inboxId, Option<long> timeout, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLog = false;
            AfterWaitForNthMissedEmail(ref suppressDefaultLog, apiResponseLocalVar, index, inboxId, timeout, since, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="index"></param>
        /// <param name="inboxId"></param>
        /// <param name="timeout"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void AfterWaitForNthMissedEmail(ref bool suppressDefaultLog, IWaitForNthMissedEmailApiResponse apiResponseLocalVar, int index, Option<Guid> inboxId, Option<long> timeout, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="index"></param>
        /// <param name="inboxId"></param>
        /// <param name="timeout"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void OnErrorWaitForNthMissedEmailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int index, Option<Guid> inboxId, Option<long> timeout, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWaitForNthMissedEmail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, index, inboxId, timeout, since, before);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="index"></param>
        /// <param name="inboxId"></param>
        /// <param name="timeout"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void OnErrorWaitForNthMissedEmail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int index, Option<Guid> inboxId, Option<long> timeout, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Wait for Nth missed email Wait for 0 based index missed email
        /// </summary>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="timeout">Optional timeout milliseconds (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWaitForNthMissedEmailApiResponse"/>&gt;</returns>
        public async Task<IWaitForNthMissedEmailApiResponse> WaitForNthMissedEmailOrDefaultAsync(int index, Option<Guid> inboxId = default, Option<long> timeout = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WaitForNthMissedEmailAsync(index, inboxId, timeout, since, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Wait for Nth missed email Wait for 0 based index missed email
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1</param>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="timeout">Optional timeout milliseconds (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWaitForNthMissedEmailApiResponse"/>&gt;</returns>
        public async Task<IWaitForNthMissedEmailApiResponse> WaitForNthMissedEmailAsync(int index, Option<Guid> inboxId = default, Option<long> timeout = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatWaitForNthMissedEmail(ref index, ref inboxId, ref timeout, ref since, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/missed-emails/waitForNthMissedEmail"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/missed-emails/waitForNthMissedEmail");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["index"] = ClientUtils.ParameterToString(index);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (timeout.IsSet)
                        parseQueryStringLocalVar["timeout"] = ClientUtils.ParameterToString(timeout.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WaitForNthMissedEmailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WaitForNthMissedEmailApiResponse>();

                        WaitForNthMissedEmailApiResponse apiResponseLocalVar = new WaitForNthMissedEmailApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/missed-emails/waitForNthMissedEmail", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWaitForNthMissedEmailDefaultImplementation(apiResponseLocalVar, index, inboxId, timeout, since, before);

                        Events.ExecuteOnWaitForNthMissedEmail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWaitForNthMissedEmailDefaultImplementation(e, "/missed-emails/waitForNthMissedEmail", uriBuilderLocalVar.Path, index, inboxId, timeout, since, before);
                Events.ExecuteOnErrorWaitForNthMissedEmail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WaitForNthMissedEmailApiResponse"/>
        /// </summary>
        public partial class WaitForNthMissedEmailApiResponse : mailslurp.Client.ApiResponse, IWaitForNthMissedEmailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WaitForNthMissedEmailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WaitForNthMissedEmailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WaitForNthMissedEmailApiResponse(ILogger<WaitForNthMissedEmailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.MissedEmailDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.MissedEmailDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.MissedEmailDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
