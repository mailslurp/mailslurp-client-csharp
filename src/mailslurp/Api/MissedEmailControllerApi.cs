/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMissedEmailControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all MissedEmails in paginated format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageMissedEmailProjection</returns>
        PageMissedEmailProjection GetAllMissedEmails (Guid? inboxId = default(Guid?), int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get all MissedEmails in paginated format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageMissedEmailProjection</returns>
        ApiResponse<PageMissedEmailProjection> GetAllMissedEmailsWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get MissedEmail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="missedEmailId">missedEmailId</param>
        /// <returns>MissedEmail</returns>
        MissedEmail GetMissedEmail (Guid missedEmailId);

        /// <summary>
        /// Get MissedEmail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="missedEmailId">missedEmailId</param>
        /// <returns>ApiResponse of MissedEmail</returns>
        ApiResponse<MissedEmail> GetMissedEmailWithHttpInfo (Guid missedEmailId);
        /// <summary>
        /// Wait for Nth missed email
        /// </summary>
        /// <remarks>
        /// Wait for 0 based index missed email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter</param>
        /// <param name="timeout">Optional timeout milliseconds</param>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1 (optional)</param>
        /// <returns>MissedEmail</returns>
        MissedEmail WaitForNthMissedEmail (Guid inboxId, long timeout, int? index = default(int?));

        /// <summary>
        /// Wait for Nth missed email
        /// </summary>
        /// <remarks>
        /// Wait for 0 based index missed email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter</param>
        /// <param name="timeout">Optional timeout milliseconds</param>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1 (optional)</param>
        /// <returns>ApiResponse of MissedEmail</returns>
        ApiResponse<MissedEmail> WaitForNthMissedEmailWithHttpInfo (Guid inboxId, long timeout, int? index = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMissedEmailControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get all MissedEmails in paginated format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageMissedEmailProjection</returns>
        System.Threading.Tasks.Task<PageMissedEmailProjection> GetAllMissedEmailsAsync (Guid? inboxId = default(Guid?), int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get all MissedEmails in paginated format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageMissedEmailProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageMissedEmailProjection>> GetAllMissedEmailsAsyncWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get MissedEmail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="missedEmailId">missedEmailId</param>
        /// <returns>Task of MissedEmail</returns>
        System.Threading.Tasks.Task<MissedEmail> GetMissedEmailAsync (Guid missedEmailId);

        /// <summary>
        /// Get MissedEmail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="missedEmailId">missedEmailId</param>
        /// <returns>Task of ApiResponse (MissedEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<MissedEmail>> GetMissedEmailAsyncWithHttpInfo (Guid missedEmailId);
        /// <summary>
        /// Wait for Nth missed email
        /// </summary>
        /// <remarks>
        /// Wait for 0 based index missed email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter</param>
        /// <param name="timeout">Optional timeout milliseconds</param>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1 (optional)</param>
        /// <returns>Task of MissedEmail</returns>
        System.Threading.Tasks.Task<MissedEmail> WaitForNthMissedEmailAsync (Guid inboxId, long timeout, int? index = default(int?));

        /// <summary>
        /// Wait for Nth missed email
        /// </summary>
        /// <remarks>
        /// Wait for 0 based index missed email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter</param>
        /// <param name="timeout">Optional timeout milliseconds</param>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1 (optional)</param>
        /// <returns>Task of ApiResponse (MissedEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<MissedEmail>> WaitForNthMissedEmailAsyncWithHttpInfo (Guid inboxId, long timeout, int? index = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMissedEmailControllerApi : IMissedEmailControllerApiSync, IMissedEmailControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MissedEmailControllerApi : IMissedEmailControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MissedEmailControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MissedEmailControllerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MissedEmailControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MissedEmailControllerApi(String basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MissedEmailControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MissedEmailControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MissedEmailControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MissedEmailControllerApi(mailslurp.Client.ISynchronousClient client,mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all MissedEmails in paginated format 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageMissedEmailProjection</returns>
        public PageMissedEmailProjection GetAllMissedEmails (Guid? inboxId = default(Guid?), int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageMissedEmailProjection> localVarResponse = GetAllMissedEmailsWithHttpInfo(inboxId, page, searchFilter, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all MissedEmails in paginated format 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageMissedEmailProjection</returns>
        public mailslurp.Client.ApiResponse< PageMissedEmailProjection > GetAllMissedEmailsWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageMissedEmailProjection >("/missed-emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllMissedEmails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all MissedEmails in paginated format 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageMissedEmailProjection</returns>
        public async System.Threading.Tasks.Task<PageMissedEmailProjection> GetAllMissedEmailsAsync (Guid? inboxId = default(Guid?), int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageMissedEmailProjection> localVarResponse = await GetAllMissedEmailsAsyncWithHttpInfo(inboxId, page, searchFilter, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all MissedEmails in paginated format 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageMissedEmailProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageMissedEmailProjection>> GetAllMissedEmailsAsyncWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageMissedEmailProjection>("/missed-emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllMissedEmails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MissedEmail 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="missedEmailId">missedEmailId</param>
        /// <returns>MissedEmail</returns>
        public MissedEmail GetMissedEmail (Guid missedEmailId)
        {
             mailslurp.Client.ApiResponse<MissedEmail> localVarResponse = GetMissedEmailWithHttpInfo(missedEmailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get MissedEmail 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="missedEmailId">missedEmailId</param>
        /// <returns>ApiResponse of MissedEmail</returns>
        public mailslurp.Client.ApiResponse< MissedEmail > GetMissedEmailWithHttpInfo (Guid missedEmailId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("missedEmailId", mailslurp.Client.ClientUtils.ParameterToString(missedEmailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MissedEmail >("/missed-emails/{missedEmailId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMissedEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get MissedEmail 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="missedEmailId">missedEmailId</param>
        /// <returns>Task of MissedEmail</returns>
        public async System.Threading.Tasks.Task<MissedEmail> GetMissedEmailAsync (Guid missedEmailId)
        {
             mailslurp.Client.ApiResponse<MissedEmail> localVarResponse = await GetMissedEmailAsyncWithHttpInfo(missedEmailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get MissedEmail 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="missedEmailId">missedEmailId</param>
        /// <returns>Task of ApiResponse (MissedEmail)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<MissedEmail>> GetMissedEmailAsyncWithHttpInfo (Guid missedEmailId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("missedEmailId", mailslurp.Client.ClientUtils.ParameterToString(missedEmailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MissedEmail>("/missed-emails/{missedEmailId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMissedEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wait for Nth missed email Wait for 0 based index missed email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter</param>
        /// <param name="timeout">Optional timeout milliseconds</param>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1 (optional)</param>
        /// <returns>MissedEmail</returns>
        public MissedEmail WaitForNthMissedEmail (Guid inboxId, long timeout, int? index = default(int?))
        {
             mailslurp.Client.ApiResponse<MissedEmail> localVarResponse = WaitForNthMissedEmailWithHttpInfo(inboxId, timeout, index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wait for Nth missed email Wait for 0 based index missed email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter</param>
        /// <param name="timeout">Optional timeout milliseconds</param>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1 (optional)</param>
        /// <returns>ApiResponse of MissedEmail</returns>
        public mailslurp.Client.ApiResponse< MissedEmail > WaitForNthMissedEmailWithHttpInfo (Guid inboxId, long timeout, int? index = default(int?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.PathParameters.Add("timeout", mailslurp.Client.ClientUtils.ParameterToString(timeout)); // path parameter
            if (index != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "index", index));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MissedEmail >("/missed-emails/waitForNthMissedEmail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WaitForNthMissedEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wait for Nth missed email Wait for 0 based index missed email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter</param>
        /// <param name="timeout">Optional timeout milliseconds</param>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1 (optional)</param>
        /// <returns>Task of MissedEmail</returns>
        public async System.Threading.Tasks.Task<MissedEmail> WaitForNthMissedEmailAsync (Guid inboxId, long timeout, int? index = default(int?))
        {
             mailslurp.Client.ApiResponse<MissedEmail> localVarResponse = await WaitForNthMissedEmailAsyncWithHttpInfo(inboxId, timeout, index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wait for Nth missed email Wait for 0 based index missed email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ID filter</param>
        /// <param name="timeout">Optional timeout milliseconds</param>
        /// <param name="index">Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1 (optional)</param>
        /// <returns>Task of ApiResponse (MissedEmail)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<MissedEmail>> WaitForNthMissedEmailAsyncWithHttpInfo (Guid inboxId, long timeout, int? index = default(int?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.PathParameters.Add("timeout", mailslurp.Client.ClientUtils.ParameterToString(timeout)); // path parameter
            if (index != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "index", index));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MissedEmail>("/missed-emails/waitForNthMissedEmail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WaitForNthMissedEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
