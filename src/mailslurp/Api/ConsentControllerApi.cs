// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IConsentControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ConsentControllerApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to check consent for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckSendingConsentForEmailAddressApiResponse"/>&gt;</returns>
        Task<ICheckSendingConsentForEmailAddressApiResponse> CheckSendingConsentForEmailAddressAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="emailAddress">Email address to check consent for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckSendingConsentForEmailAddressApiResponse"/>&gt;</returns>
        Task<ICheckSendingConsentForEmailAddressApiResponse> CheckSendingConsentForEmailAddressOrDefaultAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOptInIdentitiesApiResponse"/>&gt;</returns>
        Task<IGetOptInIdentitiesApiResponse> GetOptInIdentitiesAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOptInIdentitiesApiResponse"/>&gt;</returns>
        Task<IGetOptInIdentitiesApiResponse> GetOptInIdentitiesOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to revoke consent for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeOptInConsentForEmailAddressApiResponse"/>&gt;</returns>
        Task<IRevokeOptInConsentForEmailAddressApiResponse> RevokeOptInConsentForEmailAddressAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="emailAddress">Email address to revoke consent for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeOptInConsentForEmailAddressApiResponse"/>&gt;</returns>
        Task<IRevokeOptInConsentForEmailAddressApiResponse> RevokeOptInConsentForEmailAddressOrDefaultAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send a verification code to a user once they have explicitly submitted their email address
        /// </summary>
        /// <remarks>
        /// Send double-opt in consent for an email address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="optInConsentOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendOptInConsentForEmailAddressApiResponse"/>&gt;</returns>
        Task<ISendOptInConsentForEmailAddressApiResponse> SendOptInConsentForEmailAddressAsync(OptInConsentOptions optInConsentOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send a verification code to a user once they have explicitly submitted their email address
        /// </summary>
        /// <remarks>
        /// Send double-opt in consent for an email address
        /// </remarks>
        /// <param name="optInConsentOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendOptInConsentForEmailAddressApiResponse"/>&gt;</returns>
        Task<ISendOptInConsentForEmailAddressApiResponse> SendOptInConsentForEmailAddressOrDefaultAsync(OptInConsentOptions optInConsentOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICheckSendingConsentForEmailAddressApiResponse"/>
    /// </summary>
    public interface ICheckSendingConsentForEmailAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.OptInSendingConsentDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetOptInIdentitiesApiResponse"/>
    /// </summary>
    public interface IGetOptInIdentitiesApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageOptInIdentityProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IRevokeOptInConsentForEmailAddressApiResponse"/>
    /// </summary>
    public interface IRevokeOptInConsentForEmailAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.OptInSendingConsentDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISendOptInConsentForEmailAddressApiResponse"/>
    /// </summary>
    public interface ISendOptInConsentForEmailAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.OptInConsentSendResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ConsentControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCheckSendingConsentForEmailAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCheckSendingConsentForEmailAddress;

        internal void ExecuteOnCheckSendingConsentForEmailAddress(ConsentControllerApi.CheckSendingConsentForEmailAddressApiResponse apiResponse)
        {
            OnCheckSendingConsentForEmailAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCheckSendingConsentForEmailAddress(Exception exception)
        {
            OnErrorCheckSendingConsentForEmailAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetOptInIdentities;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetOptInIdentities;

        internal void ExecuteOnGetOptInIdentities(ConsentControllerApi.GetOptInIdentitiesApiResponse apiResponse)
        {
            OnGetOptInIdentities?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOptInIdentities(Exception exception)
        {
            OnErrorGetOptInIdentities?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRevokeOptInConsentForEmailAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRevokeOptInConsentForEmailAddress;

        internal void ExecuteOnRevokeOptInConsentForEmailAddress(ConsentControllerApi.RevokeOptInConsentForEmailAddressApiResponse apiResponse)
        {
            OnRevokeOptInConsentForEmailAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRevokeOptInConsentForEmailAddress(Exception exception)
        {
            OnErrorRevokeOptInConsentForEmailAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendOptInConsentForEmailAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendOptInConsentForEmailAddress;

        internal void ExecuteOnSendOptInConsentForEmailAddress(ConsentControllerApi.SendOptInConsentForEmailAddressApiResponse apiResponse)
        {
            OnSendOptInConsentForEmailAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendOptInConsentForEmailAddress(Exception exception)
        {
            OnErrorSendOptInConsentForEmailAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ConsentControllerApi : IConsentControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ConsentControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ConsentControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConsentControllerApi(ILogger<ConsentControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ConsentControllerApiEvents consentControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ConsentControllerApi>();
            HttpClient = httpClient;
            Events = consentControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCheckSendingConsentForEmailAddress(ref string emailAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <returns></returns>
        private void ValidateCheckSendingConsentForEmailAddress(string emailAddress)
        {
            if (emailAddress == null)
                throw new ArgumentNullException(nameof(emailAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        private void AfterCheckSendingConsentForEmailAddressDefaultImplementation(ICheckSendingConsentForEmailAddressApiResponse apiResponseLocalVar, string emailAddress)
        {
            bool suppressDefaultLog = false;
            AfterCheckSendingConsentForEmailAddress(ref suppressDefaultLog, apiResponseLocalVar, emailAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        partial void AfterCheckSendingConsentForEmailAddress(ref bool suppressDefaultLog, ICheckSendingConsentForEmailAddressApiResponse apiResponseLocalVar, string emailAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        private void OnErrorCheckSendingConsentForEmailAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCheckSendingConsentForEmailAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, emailAddress);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        partial void OnErrorCheckSendingConsentForEmailAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="emailAddress">Email address to check consent for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckSendingConsentForEmailAddressApiResponse"/>&gt;</returns>
        public async Task<ICheckSendingConsentForEmailAddressApiResponse> CheckSendingConsentForEmailAddressOrDefaultAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CheckSendingConsentForEmailAddressAsync(emailAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to check consent for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckSendingConsentForEmailAddressApiResponse"/>&gt;</returns>
        public async Task<ICheckSendingConsentForEmailAddressApiResponse> CheckSendingConsentForEmailAddressAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCheckSendingConsentForEmailAddress(emailAddress);

                FormatCheckSendingConsentForEmailAddress(ref emailAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/consent/opt-in/sending-consent"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/consent/opt-in/sending-consent");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["emailAddress"] = ClientUtils.ParameterToString(emailAddress);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CheckSendingConsentForEmailAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CheckSendingConsentForEmailAddressApiResponse>();

                        CheckSendingConsentForEmailAddressApiResponse apiResponseLocalVar = new CheckSendingConsentForEmailAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/consent/opt-in/sending-consent", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCheckSendingConsentForEmailAddressDefaultImplementation(apiResponseLocalVar, emailAddress);

                        Events.ExecuteOnCheckSendingConsentForEmailAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCheckSendingConsentForEmailAddressDefaultImplementation(e, "/consent/opt-in/sending-consent", uriBuilderLocalVar.Path, emailAddress);
                Events.ExecuteOnErrorCheckSendingConsentForEmailAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CheckSendingConsentForEmailAddressApiResponse"/>
        /// </summary>
        public partial class CheckSendingConsentForEmailAddressApiResponse : mailslurp.Client.ApiResponse, ICheckSendingConsentForEmailAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CheckSendingConsentForEmailAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CheckSendingConsentForEmailAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CheckSendingConsentForEmailAddressApiResponse(ILogger<CheckSendingConsentForEmailAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.OptInSendingConsentDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.OptInSendingConsentDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.OptInSendingConsentDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOptInIdentities(ref Option<int> page, ref Option<int> size, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetOptInIdentities(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        private void AfterGetOptInIdentitiesDefaultImplementation(IGetOptInIdentitiesApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetOptInIdentities(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        partial void AfterGetOptInIdentities(ref bool suppressDefaultLog, IGetOptInIdentitiesApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        private void OnErrorGetOptInIdentitiesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOptInIdentities(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetOptInIdentities(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOptInIdentitiesApiResponse"/>&gt;</returns>
        public async Task<IGetOptInIdentitiesApiResponse> GetOptInIdentitiesOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOptInIdentitiesAsync(page, size, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOptInIdentitiesApiResponse"/>&gt;</returns>
        public async Task<IGetOptInIdentitiesApiResponse> GetOptInIdentitiesAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOptInIdentities(sort);

                FormatGetOptInIdentities(ref page, ref size, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/consent/opt-in"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/consent/opt-in");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetOptInIdentitiesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOptInIdentitiesApiResponse>();

                        GetOptInIdentitiesApiResponse apiResponseLocalVar = new GetOptInIdentitiesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/consent/opt-in", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOptInIdentitiesDefaultImplementation(apiResponseLocalVar, page, size, sort);

                        Events.ExecuteOnGetOptInIdentities(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOptInIdentitiesDefaultImplementation(e, "/consent/opt-in", uriBuilderLocalVar.Path, page, size, sort);
                Events.ExecuteOnErrorGetOptInIdentities(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOptInIdentitiesApiResponse"/>
        /// </summary>
        public partial class GetOptInIdentitiesApiResponse : mailslurp.Client.ApiResponse, IGetOptInIdentitiesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOptInIdentitiesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOptInIdentitiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOptInIdentitiesApiResponse(ILogger<GetOptInIdentitiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageOptInIdentityProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageOptInIdentityProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageOptInIdentityProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRevokeOptInConsentForEmailAddress(ref string emailAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <returns></returns>
        private void ValidateRevokeOptInConsentForEmailAddress(string emailAddress)
        {
            if (emailAddress == null)
                throw new ArgumentNullException(nameof(emailAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        private void AfterRevokeOptInConsentForEmailAddressDefaultImplementation(IRevokeOptInConsentForEmailAddressApiResponse apiResponseLocalVar, string emailAddress)
        {
            bool suppressDefaultLog = false;
            AfterRevokeOptInConsentForEmailAddress(ref suppressDefaultLog, apiResponseLocalVar, emailAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        partial void AfterRevokeOptInConsentForEmailAddress(ref bool suppressDefaultLog, IRevokeOptInConsentForEmailAddressApiResponse apiResponseLocalVar, string emailAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        private void OnErrorRevokeOptInConsentForEmailAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRevokeOptInConsentForEmailAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, emailAddress);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        partial void OnErrorRevokeOptInConsentForEmailAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="emailAddress">Email address to revoke consent for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeOptInConsentForEmailAddressApiResponse"/>&gt;</returns>
        public async Task<IRevokeOptInConsentForEmailAddressApiResponse> RevokeOptInConsentForEmailAddressOrDefaultAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RevokeOptInConsentForEmailAddressAsync(emailAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to revoke consent for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeOptInConsentForEmailAddressApiResponse"/>&gt;</returns>
        public async Task<IRevokeOptInConsentForEmailAddressApiResponse> RevokeOptInConsentForEmailAddressAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRevokeOptInConsentForEmailAddress(emailAddress);

                FormatRevokeOptInConsentForEmailAddress(ref emailAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/consent/opt-in"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/consent/opt-in");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["emailAddress"] = ClientUtils.ParameterToString(emailAddress);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<RevokeOptInConsentForEmailAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RevokeOptInConsentForEmailAddressApiResponse>();

                        RevokeOptInConsentForEmailAddressApiResponse apiResponseLocalVar = new RevokeOptInConsentForEmailAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/consent/opt-in", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRevokeOptInConsentForEmailAddressDefaultImplementation(apiResponseLocalVar, emailAddress);

                        Events.ExecuteOnRevokeOptInConsentForEmailAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRevokeOptInConsentForEmailAddressDefaultImplementation(e, "/consent/opt-in", uriBuilderLocalVar.Path, emailAddress);
                Events.ExecuteOnErrorRevokeOptInConsentForEmailAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RevokeOptInConsentForEmailAddressApiResponse"/>
        /// </summary>
        public partial class RevokeOptInConsentForEmailAddressApiResponse : mailslurp.Client.ApiResponse, IRevokeOptInConsentForEmailAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RevokeOptInConsentForEmailAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RevokeOptInConsentForEmailAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RevokeOptInConsentForEmailAddressApiResponse(ILogger<RevokeOptInConsentForEmailAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.OptInSendingConsentDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.OptInSendingConsentDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.OptInSendingConsentDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendOptInConsentForEmailAddress(OptInConsentOptions optInConsentOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="optInConsentOptions"></param>
        /// <returns></returns>
        private void ValidateSendOptInConsentForEmailAddress(OptInConsentOptions optInConsentOptions)
        {
            if (optInConsentOptions == null)
                throw new ArgumentNullException(nameof(optInConsentOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="optInConsentOptions"></param>
        private void AfterSendOptInConsentForEmailAddressDefaultImplementation(ISendOptInConsentForEmailAddressApiResponse apiResponseLocalVar, OptInConsentOptions optInConsentOptions)
        {
            bool suppressDefaultLog = false;
            AfterSendOptInConsentForEmailAddress(ref suppressDefaultLog, apiResponseLocalVar, optInConsentOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="optInConsentOptions"></param>
        partial void AfterSendOptInConsentForEmailAddress(ref bool suppressDefaultLog, ISendOptInConsentForEmailAddressApiResponse apiResponseLocalVar, OptInConsentOptions optInConsentOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="optInConsentOptions"></param>
        private void OnErrorSendOptInConsentForEmailAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, OptInConsentOptions optInConsentOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendOptInConsentForEmailAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, optInConsentOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="optInConsentOptions"></param>
        partial void OnErrorSendOptInConsentForEmailAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, OptInConsentOptions optInConsentOptions);

        /// <summary>
        /// Send a verification code to a user once they have explicitly submitted their email address Send double-opt in consent for an email address
        /// </summary>
        /// <param name="optInConsentOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendOptInConsentForEmailAddressApiResponse"/>&gt;</returns>
        public async Task<ISendOptInConsentForEmailAddressApiResponse> SendOptInConsentForEmailAddressOrDefaultAsync(OptInConsentOptions optInConsentOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendOptInConsentForEmailAddressAsync(optInConsentOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send a verification code to a user once they have explicitly submitted their email address Send double-opt in consent for an email address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="optInConsentOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendOptInConsentForEmailAddressApiResponse"/>&gt;</returns>
        public async Task<ISendOptInConsentForEmailAddressApiResponse> SendOptInConsentForEmailAddressAsync(OptInConsentOptions optInConsentOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendOptInConsentForEmailAddress(optInConsentOptions);

                FormatSendOptInConsentForEmailAddress(optInConsentOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/consent/opt-in/send"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/consent/opt-in/send");

                    httpRequestMessageLocalVar.Content = (optInConsentOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(optInConsentOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendOptInConsentForEmailAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendOptInConsentForEmailAddressApiResponse>();

                        SendOptInConsentForEmailAddressApiResponse apiResponseLocalVar = new SendOptInConsentForEmailAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/consent/opt-in/send", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendOptInConsentForEmailAddressDefaultImplementation(apiResponseLocalVar, optInConsentOptions);

                        Events.ExecuteOnSendOptInConsentForEmailAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendOptInConsentForEmailAddressDefaultImplementation(e, "/consent/opt-in/send", uriBuilderLocalVar.Path, optInConsentOptions);
                Events.ExecuteOnErrorSendOptInConsentForEmailAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendOptInConsentForEmailAddressApiResponse"/>
        /// </summary>
        public partial class SendOptInConsentForEmailAddressApiResponse : mailslurp.Client.ApiResponse, ISendOptInConsentForEmailAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendOptInConsentForEmailAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendOptInConsentForEmailAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendOptInConsentForEmailAddressApiResponse(ILogger<SendOptInConsentForEmailAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.OptInConsentSendResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.OptInConsentSendResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.OptInConsentSendResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
