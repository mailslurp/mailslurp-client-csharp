/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository  ## Basic Concepts  ### Inboxes  Inboxes have real email addresses that can send and receive emails. You can create inboxes with specific email addresses (using custom domains). You can also use randomly assigned MailSlurp addresses as unique, disposable test addresses.   See the InboxController or [inbox and email address guide](https://www.mailslurp.com/guides/) for more information.  ### Receive Emails You can receive emails in a number of ways. You can fetch emails and attachments directly from an inbox. Or you can use `waitFor` endpoints to hold a connection open until an email is received that matches given criteria (such as subject or body content). You can also use webhooks to have emails from multiple inboxes forwarded to your server via HTTP POST.  InboxController methods with `waitFor` in the name have a long timeout period and instruct MailSlurp to wait until an expected email is received. You can set conditions on email counts, subject or body matches, and more.  Most receive methods only return an email ID and not the full email (to keep response sizes low). To fetch the full body or attachments for an email use the email's ID with EmailController endpoints.  See the InboxController or [receiving emails guide](https://www.mailslurp.com/guides/) for more information.  ### Send Emails You can send templated HTML emails in several ways. You must first create an inbox to send an email. An inbox can have a specific address or a randomly assigned one. You can send emails from an inbox using `to`, `cc`, and `bcc` recipient lists or with contacts and contact groups.   Emails can contain plain-text or HTML bodies. You can also use email templates that support [moustache](https://mustache.github.io/) template variables. You can send attachments by first posting files to the AttachmentController and then using the returned IDs in the `attachments` field of the send options.  See the InboxController or [sending emails guide](https://www.mailslurp.com/guides/) for more information.  ### Templates MailSlurp emails support templates. You can create templates in the dashboard or API that contain [moustache](https://mustache.github.io/) style variables: for instance `Hello {{name}}`. Then when sending emails you can pass a map of variables names and values to be used. Additionally, when sending emails with contact groups you can use properties of the contact in your templates like `{{firstName}}` and `{{lastName}}`.  > You can do a lot more with MailSlurp so see the included documentation for more information.  
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxControllerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Inbox (email address)
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Optional description for an inbox. (optional)</param>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <param name="expiresAt">Optional expires at timestamp. If your plan supports this feature you can specify when an inbox should expire. If left empty inbox will exist permanently or expire when your plan dictates (optional)</param>
        /// <param name="favourite">Is inbox favourited. (optional)</param>
        /// <param name="name">Optional name for an inbox. (optional)</param>
        /// <param name="tags">Optional tags for an inbox. Can be used for searching and filtering inboxes. (optional)</param>
        /// <returns>Inbox</returns>
        Inbox CreateInbox (string description = default(string), string emailAddress = default(string), DateTime expiresAt = default(DateTime), bool favourite = default(bool), string name = default(string), List<string> tags = default(List<string>));

        /// <summary>
        /// Create an Inbox (email address)
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Optional description for an inbox. (optional)</param>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <param name="expiresAt">Optional expires at timestamp. If your plan supports this feature you can specify when an inbox should expire. If left empty inbox will exist permanently or expire when your plan dictates (optional)</param>
        /// <param name="favourite">Is inbox favourited. (optional)</param>
        /// <param name="name">Optional name for an inbox. (optional)</param>
        /// <param name="tags">Optional tags for an inbox. Can be used for searching and filtering inboxes. (optional)</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> CreateInboxWithHttpInfo (string description = default(string), string emailAddress = default(string), DateTime expiresAt = default(DateTime), bool favourite = default(bool), string name = default(string), List<string> tags = default(List<string>));
        /// <summary>
        /// Delete all inboxes
        /// </summary>
        /// <remarks>
        /// Permanently delete all inboxes and associated email addresses and all emails within the given inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAllInboxes ();

        /// <summary>
        /// Delete all inboxes
        /// </summary>
        /// <remarks>
        /// Permanently delete all inboxes and associated email addresses and all emails within the given inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllInboxesWithHttpInfo ();
        /// <summary>
        /// Delete Inbox / Email Address
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address and all emails within the given inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        void DeleteInbox (Guid inboxId);

        /// <summary>
        /// Delete Inbox / Email Address
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address and all emails within the given inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboxWithHttpInfo (Guid inboxId);
        /// <summary>
        /// List Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageInboxProjection</returns>
        PageInboxProjection GetAllInboxes (bool favourite = default(bool), int page = default(int), string search = default(string), int size = default(int), string sort = default(string));

        /// <summary>
        /// List Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageInboxProjection</returns>
        ApiResponse<PageInboxProjection> GetAllInboxesWithHttpInfo (bool favourite = default(bool), int page = default(int), string search = default(string), int size = default(int), string sort = default(string));
        /// <summary>
        /// Get emails in an Inbox
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>List&lt;EmailPreview&gt;</returns>
        List<EmailPreview> GetEmails (Guid inboxId, int limit = default(int), long minCount = default(long), long retryTimeout = default(long), DateTime since = default(DateTime), string sort = default(string));

        /// <summary>
        /// Get emails in an Inbox
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailPreview&gt;</returns>
        ApiResponse<List<EmailPreview>> GetEmailsWithHttpInfo (Guid inboxId, int limit = default(int), long minCount = default(long), long retryTimeout = default(long), DateTime since = default(DateTime), string sort = default(string));
        /// <summary>
        /// Get Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Inbox</returns>
        Inbox GetInbox (Guid inboxId);

        /// <summary>
        /// Get Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> GetInboxWithHttpInfo (Guid inboxId);
        /// <summary>
        /// Get inbox emails paginated
        /// </summary>
        /// <remarks>
        /// Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageEmailPreview</returns>
        PageEmailPreview GetInboxEmailsPaginated (Guid inboxId, int page = default(int), int size = default(int), string sort = default(string));

        /// <summary>
        /// Get inbox emails paginated
        /// </summary>
        /// <remarks>
        /// Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageEmailPreview</returns>
        ApiResponse<PageEmailPreview> GetInboxEmailsPaginatedWithHttpInfo (Guid inboxId, int page = default(int), int size = default(int), string sort = default(string));
        /// <summary>
        /// List Inboxes / Email Addresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Inbox&gt;</returns>
        List<Inbox> GetInboxes ();

        /// <summary>
        /// List Inboxes / Email Addresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Inbox&gt;</returns>
        ApiResponse<List<Inbox>> GetInboxesWithHttpInfo ();
        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns></returns>
        void SendEmail (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));

        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));
        /// <summary>
        /// Set inbox favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favourite state for an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Inbox</returns>
        Inbox SetInboxFavourited (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions);

        /// <summary>
        /// Set inbox favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favourite state for an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> SetInboxFavouritedWithHttpInfo (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an Inbox (email address)
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Optional description for an inbox. (optional)</param>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <param name="expiresAt">Optional expires at timestamp. If your plan supports this feature you can specify when an inbox should expire. If left empty inbox will exist permanently or expire when your plan dictates (optional)</param>
        /// <param name="favourite">Is inbox favourited. (optional)</param>
        /// <param name="name">Optional name for an inbox. (optional)</param>
        /// <param name="tags">Optional tags for an inbox. Can be used for searching and filtering inboxes. (optional)</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> CreateInboxAsync (string description = default(string), string emailAddress = default(string), DateTime expiresAt = default(DateTime), bool favourite = default(bool), string name = default(string), List<string> tags = default(List<string>));

        /// <summary>
        /// Create an Inbox (email address)
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Optional description for an inbox. (optional)</param>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <param name="expiresAt">Optional expires at timestamp. If your plan supports this feature you can specify when an inbox should expire. If left empty inbox will exist permanently or expire when your plan dictates (optional)</param>
        /// <param name="favourite">Is inbox favourited. (optional)</param>
        /// <param name="name">Optional name for an inbox. (optional)</param>
        /// <param name="tags">Optional tags for an inbox. Can be used for searching and filtering inboxes. (optional)</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateInboxAsyncWithHttpInfo (string description = default(string), string emailAddress = default(string), DateTime expiresAt = default(DateTime), bool favourite = default(bool), string name = default(string), List<string> tags = default(List<string>));
        /// <summary>
        /// Delete all inboxes
        /// </summary>
        /// <remarks>
        /// Permanently delete all inboxes and associated email addresses and all emails within the given inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllInboxesAsync ();

        /// <summary>
        /// Delete all inboxes
        /// </summary>
        /// <remarks>
        /// Permanently delete all inboxes and associated email addresses and all emails within the given inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllInboxesAsyncWithHttpInfo ();
        /// <summary>
        /// Delete Inbox / Email Address
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address and all emails within the given inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboxAsync (Guid inboxId);

        /// <summary>
        /// Delete Inbox / Email Address
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address and all emails within the given inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboxAsyncWithHttpInfo (Guid inboxId);
        /// <summary>
        /// List Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageInboxProjection</returns>
        System.Threading.Tasks.Task<PageInboxProjection> GetAllInboxesAsync (bool favourite = default(bool), int page = default(int), string search = default(string), int size = default(int), string sort = default(string));

        /// <summary>
        /// List Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageInboxProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageInboxProjection>> GetAllInboxesAsyncWithHttpInfo (bool favourite = default(bool), int page = default(int), string search = default(string), int size = default(int), string sort = default(string));
        /// <summary>
        /// Get emails in an Inbox
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>Task of List&lt;EmailPreview&gt;</returns>
        System.Threading.Tasks.Task<List<EmailPreview>> GetEmailsAsync (Guid inboxId, int limit = default(int), long minCount = default(long), long retryTimeout = default(long), DateTime since = default(DateTime), string sort = default(string));

        /// <summary>
        /// Get emails in an Inbox
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailPreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailPreview>>> GetEmailsAsyncWithHttpInfo (Guid inboxId, int limit = default(int), long minCount = default(long), long retryTimeout = default(long), DateTime since = default(DateTime), string sort = default(string));
        /// <summary>
        /// Get Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> GetInboxAsync (Guid inboxId);

        /// <summary>
        /// Get Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> GetInboxAsyncWithHttpInfo (Guid inboxId);
        /// <summary>
        /// Get inbox emails paginated
        /// </summary>
        /// <remarks>
        /// Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageEmailPreview</returns>
        System.Threading.Tasks.Task<PageEmailPreview> GetInboxEmailsPaginatedAsync (Guid inboxId, int page = default(int), int size = default(int), string sort = default(string));

        /// <summary>
        /// Get inbox emails paginated
        /// </summary>
        /// <remarks>
        /// Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageEmailPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageEmailPreview>> GetInboxEmailsPaginatedAsyncWithHttpInfo (Guid inboxId, int page = default(int), int size = default(int), string sort = default(string));
        /// <summary>
        /// List Inboxes / Email Addresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Inbox&gt;</returns>
        System.Threading.Tasks.Task<List<Inbox>> GetInboxesAsync ();

        /// <summary>
        /// List Inboxes / Email Addresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Inbox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Inbox>>> GetInboxesAsyncWithHttpInfo ();
        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailAsync (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));

        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailAsyncWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));
        /// <summary>
        /// Set inbox favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favourite state for an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> SetInboxFavouritedAsync (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions);

        /// <summary>
        /// Set inbox favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favourite state for an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> SetInboxFavouritedAsyncWithHttpInfo (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InboxControllerApi : IInboxControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxControllerApi(String basePath)
        {
            this.Configuration = new mailslurp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxControllerApi"/> class
        /// </summary>
        /// <returns></returns>
        public InboxControllerApi()
        {
            this.Configuration = mailslurp.Client.Configuration.Default;

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InboxControllerApi(mailslurp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mailslurp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an Inbox (email address) Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Optional description for an inbox. (optional)</param>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <param name="expiresAt">Optional expires at timestamp. If your plan supports this feature you can specify when an inbox should expire. If left empty inbox will exist permanently or expire when your plan dictates (optional)</param>
        /// <param name="favourite">Is inbox favourited. (optional)</param>
        /// <param name="name">Optional name for an inbox. (optional)</param>
        /// <param name="tags">Optional tags for an inbox. Can be used for searching and filtering inboxes. (optional)</param>
        /// <returns>Inbox</returns>
        public Inbox CreateInbox (string description = default(string), string emailAddress = default(string), DateTime expiresAt = default(DateTime), bool favourite = default(bool), string name = default(string), List<string> tags = default(List<string>))
        {
             ApiResponse<Inbox> localVarResponse = CreateInboxWithHttpInfo(description, emailAddress, expiresAt, favourite, name, tags);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Inbox (email address) Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Optional description for an inbox. (optional)</param>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <param name="expiresAt">Optional expires at timestamp. If your plan supports this feature you can specify when an inbox should expire. If left empty inbox will exist permanently or expire when your plan dictates (optional)</param>
        /// <param name="favourite">Is inbox favourited. (optional)</param>
        /// <param name="name">Optional name for an inbox. (optional)</param>
        /// <param name="tags">Optional tags for an inbox. Can be used for searching and filtering inboxes. (optional)</param>
        /// <returns>ApiResponse of Inbox</returns>
        public ApiResponse<Inbox> CreateInboxWithHttpInfo (string description = default(string), string emailAddress = default(string), DateTime expiresAt = default(DateTime), bool favourite = default(bool), string name = default(string), List<string> tags = default(List<string>))
        {

            var localVarPath = "./inboxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (emailAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "emailAddress", emailAddress)); // query parameter
            if (expiresAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiresAt", expiresAt)); // query parameter
            if (favourite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favourite", favourite)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tags", tags)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Inbox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Inbox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Inbox)));
        }

        /// <summary>
        /// Create an Inbox (email address) Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Optional description for an inbox. (optional)</param>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <param name="expiresAt">Optional expires at timestamp. If your plan supports this feature you can specify when an inbox should expire. If left empty inbox will exist permanently or expire when your plan dictates (optional)</param>
        /// <param name="favourite">Is inbox favourited. (optional)</param>
        /// <param name="name">Optional name for an inbox. (optional)</param>
        /// <param name="tags">Optional tags for an inbox. Can be used for searching and filtering inboxes. (optional)</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> CreateInboxAsync (string description = default(string), string emailAddress = default(string), DateTime expiresAt = default(DateTime), bool favourite = default(bool), string name = default(string), List<string> tags = default(List<string>))
        {
             ApiResponse<Inbox> localVarResponse = await CreateInboxAsyncWithHttpInfo(description, emailAddress, expiresAt, favourite, name, tags);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Inbox (email address) Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Optional description for an inbox. (optional)</param>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <param name="expiresAt">Optional expires at timestamp. If your plan supports this feature you can specify when an inbox should expire. If left empty inbox will exist permanently or expire when your plan dictates (optional)</param>
        /// <param name="favourite">Is inbox favourited. (optional)</param>
        /// <param name="name">Optional name for an inbox. (optional)</param>
        /// <param name="tags">Optional tags for an inbox. Can be used for searching and filtering inboxes. (optional)</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateInboxAsyncWithHttpInfo (string description = default(string), string emailAddress = default(string), DateTime expiresAt = default(DateTime), bool favourite = default(bool), string name = default(string), List<string> tags = default(List<string>))
        {

            var localVarPath = "./inboxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (emailAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "emailAddress", emailAddress)); // query parameter
            if (expiresAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiresAt", expiresAt)); // query parameter
            if (favourite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favourite", favourite)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tags", tags)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Inbox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Inbox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Inbox)));
        }

        /// <summary>
        /// Delete all inboxes Permanently delete all inboxes and associated email addresses and all emails within the given inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAllInboxes ()
        {
             DeleteAllInboxesWithHttpInfo();
        }

        /// <summary>
        /// Delete all inboxes Permanently delete all inboxes and associated email addresses and all emails within the given inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllInboxesWithHttpInfo ()
        {

            var localVarPath = "./inboxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllInboxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete all inboxes Permanently delete all inboxes and associated email addresses and all emails within the given inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllInboxesAsync ()
        {
             await DeleteAllInboxesAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all inboxes Permanently delete all inboxes and associated email addresses and all emails within the given inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllInboxesAsyncWithHttpInfo ()
        {

            var localVarPath = "./inboxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllInboxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Inbox / Email Address Permanently delete an inbox and associated email address and all emails within the given inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        public void DeleteInbox (Guid inboxId)
        {
             DeleteInboxWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete Inbox / Email Address Permanently delete an inbox and associated email address and all emails within the given inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInboxWithHttpInfo (Guid inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->DeleteInbox");

            var localVarPath = "./inboxes/{inboxId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Inbox / Email Address Permanently delete an inbox and associated email address and all emails within the given inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboxAsync (Guid inboxId)
        {
             await DeleteInboxAsyncWithHttpInfo(inboxId);

        }

        /// <summary>
        /// Delete Inbox / Email Address Permanently delete an inbox and associated email address and all emails within the given inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboxAsyncWithHttpInfo (Guid inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->DeleteInbox");

            var localVarPath = "./inboxes/{inboxId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List Inboxes Paginated List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageInboxProjection</returns>
        public PageInboxProjection GetAllInboxes (bool favourite = default(bool), int page = default(int), string search = default(string), int size = default(int), string sort = default(string))
        {
             ApiResponse<PageInboxProjection> localVarResponse = GetAllInboxesWithHttpInfo(favourite, page, search, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Inboxes Paginated List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageInboxProjection</returns>
        public ApiResponse<PageInboxProjection> GetAllInboxesWithHttpInfo (bool favourite = default(bool), int page = default(int), string search = default(string), int size = default(int), string sort = default(string))
        {

            var localVarPath = "./inboxes/paginated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favourite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favourite", favourite)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInboxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageInboxProjection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PageInboxProjection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageInboxProjection)));
        }

        /// <summary>
        /// List Inboxes Paginated List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageInboxProjection</returns>
        public async System.Threading.Tasks.Task<PageInboxProjection> GetAllInboxesAsync (bool favourite = default(bool), int page = default(int), string search = default(string), int size = default(int), string sort = default(string))
        {
             ApiResponse<PageInboxProjection> localVarResponse = await GetAllInboxesAsyncWithHttpInfo(favourite, page, search, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Inboxes Paginated List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageInboxProjection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageInboxProjection>> GetAllInboxesAsyncWithHttpInfo (bool favourite = default(bool), int page = default(int), string search = default(string), int size = default(int), string sort = default(string))
        {

            var localVarPath = "./inboxes/paginated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (favourite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favourite", favourite)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInboxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageInboxProjection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PageInboxProjection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageInboxProjection)));
        }

        /// <summary>
        /// Get emails in an Inbox List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>List&lt;EmailPreview&gt;</returns>
        public List<EmailPreview> GetEmails (Guid inboxId, int limit = default(int), long minCount = default(long), long retryTimeout = default(long), DateTime since = default(DateTime), string sort = default(string))
        {
             ApiResponse<List<EmailPreview>> localVarResponse = GetEmailsWithHttpInfo(inboxId, limit, minCount, retryTimeout, since, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get emails in an Inbox List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailPreview&gt;</returns>
        public ApiResponse<List<EmailPreview>> GetEmailsWithHttpInfo (Guid inboxId, int limit = default(int), long minCount = default(long), long retryTimeout = default(long), DateTime since = default(DateTime), string sort = default(string))
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->GetEmails");

            var localVarPath = "./inboxes/{inboxId}/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minCount", minCount)); // query parameter
            if (retryTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "retryTimeout", retryTimeout)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EmailPreview>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<EmailPreview>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EmailPreview>)));
        }

        /// <summary>
        /// Get emails in an Inbox List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>Task of List&lt;EmailPreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmailPreview>> GetEmailsAsync (Guid inboxId, int limit = default(int), long minCount = default(long), long retryTimeout = default(long), DateTime since = default(DateTime), string sort = default(string))
        {
             ApiResponse<List<EmailPreview>> localVarResponse = await GetEmailsAsyncWithHttpInfo(inboxId, limit, minCount, retryTimeout, since, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get emails in an Inbox List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailPreview&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EmailPreview>>> GetEmailsAsyncWithHttpInfo (Guid inboxId, int limit = default(int), long minCount = default(long), long retryTimeout = default(long), DateTime since = default(DateTime), string sort = default(string))
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->GetEmails");

            var localVarPath = "./inboxes/{inboxId}/emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minCount", minCount)); // query parameter
            if (retryTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "retryTimeout", retryTimeout)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EmailPreview>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<EmailPreview>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EmailPreview>)));
        }

        /// <summary>
        /// Get Inbox / EmailAddress Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Inbox</returns>
        public Inbox GetInbox (Guid inboxId)
        {
             ApiResponse<Inbox> localVarResponse = GetInboxWithHttpInfo(inboxId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inbox / EmailAddress Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Inbox</returns>
        public ApiResponse<Inbox> GetInboxWithHttpInfo (Guid inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->GetInbox");

            var localVarPath = "./inboxes/{inboxId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Inbox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Inbox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Inbox)));
        }

        /// <summary>
        /// Get Inbox / EmailAddress Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> GetInboxAsync (Guid inboxId)
        {
             ApiResponse<Inbox> localVarResponse = await GetInboxAsyncWithHttpInfo(inboxId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inbox / EmailAddress Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Inbox>> GetInboxAsyncWithHttpInfo (Guid inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->GetInbox");

            var localVarPath = "./inboxes/{inboxId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Inbox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Inbox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Inbox)));
        }

        /// <summary>
        /// Get inbox emails paginated Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageEmailPreview</returns>
        public PageEmailPreview GetInboxEmailsPaginated (Guid inboxId, int page = default(int), int size = default(int), string sort = default(string))
        {
             ApiResponse<PageEmailPreview> localVarResponse = GetInboxEmailsPaginatedWithHttpInfo(inboxId, page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get inbox emails paginated Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageEmailPreview</returns>
        public ApiResponse<PageEmailPreview> GetInboxEmailsPaginatedWithHttpInfo (Guid inboxId, int page = default(int), int size = default(int), string sort = default(string))
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->GetInboxEmailsPaginated");

            var localVarPath = "./inboxes/{inboxId}/emails/paginated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboxEmailsPaginated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageEmailPreview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PageEmailPreview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageEmailPreview)));
        }

        /// <summary>
        /// Get inbox emails paginated Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageEmailPreview</returns>
        public async System.Threading.Tasks.Task<PageEmailPreview> GetInboxEmailsPaginatedAsync (Guid inboxId, int page = default(int), int size = default(int), string sort = default(string))
        {
             ApiResponse<PageEmailPreview> localVarResponse = await GetInboxEmailsPaginatedAsyncWithHttpInfo(inboxId, page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get inbox emails paginated Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageEmailPreview)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageEmailPreview>> GetInboxEmailsPaginatedAsyncWithHttpInfo (Guid inboxId, int page = default(int), int size = default(int), string sort = default(string))
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->GetInboxEmailsPaginated");

            var localVarPath = "./inboxes/{inboxId}/emails/paginated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboxEmailsPaginated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageEmailPreview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PageEmailPreview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageEmailPreview)));
        }

        /// <summary>
        /// List Inboxes / Email Addresses List the inboxes you have created
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Inbox&gt;</returns>
        public List<Inbox> GetInboxes ()
        {
             ApiResponse<List<Inbox>> localVarResponse = GetInboxesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Inboxes / Email Addresses List the inboxes you have created
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Inbox&gt;</returns>
        public ApiResponse<List<Inbox>> GetInboxesWithHttpInfo ()
        {

            var localVarPath = "./inboxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Inbox>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Inbox>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Inbox>)));
        }

        /// <summary>
        /// List Inboxes / Email Addresses List the inboxes you have created
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Inbox&gt;</returns>
        public async System.Threading.Tasks.Task<List<Inbox>> GetInboxesAsync ()
        {
             ApiResponse<List<Inbox>> localVarResponse = await GetInboxesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Inboxes / Email Addresses List the inboxes you have created
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Inbox&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Inbox>>> GetInboxesAsyncWithHttpInfo ()
        {

            var localVarPath = "./inboxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Inbox>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Inbox>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Inbox>)));
        }

        /// <summary>
        /// Send Email Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns></returns>
        public void SendEmail (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
             SendEmailWithHttpInfo(inboxId, sendEmailOptions);
        }

        /// <summary>
        /// Send Email Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendEmailWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->SendEmail");

            var localVarPath = "./inboxes/{inboxId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter
            if (sendEmailOptions != null && sendEmailOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendEmailOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendEmailOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Send Email Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailAsync (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
             await SendEmailAsyncWithHttpInfo(inboxId, sendEmailOptions);

        }

        /// <summary>
        /// Send Email Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailAsyncWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->SendEmail");

            var localVarPath = "./inboxes/{inboxId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter
            if (sendEmailOptions != null && sendEmailOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendEmailOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendEmailOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Set inbox favourited state Set and return new favourite state for an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Inbox</returns>
        public Inbox SetInboxFavourited (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions)
        {
             ApiResponse<Inbox> localVarResponse = SetInboxFavouritedWithHttpInfo(inboxId, setInboxFavouritedOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set inbox favourited state Set and return new favourite state for an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>ApiResponse of Inbox</returns>
        public ApiResponse<Inbox> SetInboxFavouritedWithHttpInfo (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->SetInboxFavourited");
            // verify the required parameter 'setInboxFavouritedOptions' is set
            if (setInboxFavouritedOptions == null)
                throw new ApiException(400, "Missing required parameter 'setInboxFavouritedOptions' when calling InboxControllerApi->SetInboxFavourited");

            var localVarPath = "./inboxes/{inboxId}/favourite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter
            if (setInboxFavouritedOptions != null && setInboxFavouritedOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setInboxFavouritedOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setInboxFavouritedOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetInboxFavourited", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Inbox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Inbox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Inbox)));
        }

        /// <summary>
        /// Set inbox favourited state Set and return new favourite state for an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> SetInboxFavouritedAsync (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions)
        {
             ApiResponse<Inbox> localVarResponse = await SetInboxFavouritedAsyncWithHttpInfo(inboxId, setInboxFavouritedOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set inbox favourited state Set and return new favourite state for an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Inbox>> SetInboxFavouritedAsyncWithHttpInfo (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new ApiException(400, "Missing required parameter 'inboxId' when calling InboxControllerApi->SetInboxFavourited");
            // verify the required parameter 'setInboxFavouritedOptions' is set
            if (setInboxFavouritedOptions == null)
                throw new ApiException(400, "Missing required parameter 'setInboxFavouritedOptions' when calling InboxControllerApi->SetInboxFavourited");

            var localVarPath = "./inboxes/{inboxId}/favourite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarPathParams.Add("inboxId", this.Configuration.ApiClient.ParameterToString(inboxId)); // path parameter
            if (setInboxFavouritedOptions != null && setInboxFavouritedOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setInboxFavouritedOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setInboxFavouritedOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetInboxFavourited", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Inbox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Inbox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Inbox)));
        }

    }
}
