/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an inbox email address. An inbox has a real email address and can send and receive emails.
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)</param>
        /// <param name="description">Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)</param>
        /// <param name="emailAddress">A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)</param>
        /// <param name="expiresAt">Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)</param>
        /// <param name="expiresIn">Number of milliseconds that inbox should exist for (optional)</param>
        /// <param name="favourite">Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering (optional)</param>
        /// <param name="name">Optional name of the inbox. Displayed in the dashboard for easier search (optional)</param>
        /// <param name="tags">Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)</param>
        /// <param name="useDomainPool">Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. (optional)</param>
        /// <returns>Inbox</returns>
        Inbox CreateInbox (bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?));

        /// <summary>
        /// Create an inbox email address. An inbox has a real email address and can send and receive emails.
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)</param>
        /// <param name="description">Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)</param>
        /// <param name="emailAddress">A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)</param>
        /// <param name="expiresAt">Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)</param>
        /// <param name="expiresIn">Number of milliseconds that inbox should exist for (optional)</param>
        /// <param name="favourite">Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering (optional)</param>
        /// <param name="name">Optional name of the inbox. Displayed in the dashboard for easier search (optional)</param>
        /// <param name="tags">Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)</param>
        /// <param name="useDomainPool">Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. (optional)</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> CreateInboxWithHttpInfo (bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?));
        /// <summary>
        /// Create an inbox with default options. Uses MailSlurp domain pool address and is private.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Inbox</returns>
        Inbox CreateInboxWithDefaults ();

        /// <summary>
        /// Create an inbox with default options. Uses MailSlurp domain pool address and is private.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> CreateInboxWithDefaultsWithHttpInfo ();
        /// <summary>
        /// Create an inbox with options. Extended options for inbox creation.
        /// </summary>
        /// <remarks>
        /// Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxDto">createInboxDto</param>
        /// <returns>Inbox</returns>
        Inbox CreateInboxWithOptions (CreateInboxDto createInboxDto);

        /// <summary>
        /// Create an inbox with options. Extended options for inbox creation.
        /// </summary>
        /// <remarks>
        /// Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxDto">createInboxDto</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> CreateInboxWithOptionsWithHttpInfo (CreateInboxDto createInboxDto);
        /// <summary>
        /// Delete all inboxes
        /// </summary>
        /// <remarks>
        /// Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAllInboxes ();

        /// <summary>
        /// Delete all inboxes
        /// </summary>
        /// <remarks>
        /// Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllInboxesWithHttpInfo ();
        /// <summary>
        /// Delete inbox
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        void DeleteInbox (Guid inboxId);

        /// <summary>
        /// Delete inbox
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboxWithHttpInfo (Guid inboxId);
        /// <summary>
        /// List All Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results. Results do not include team access inboxes by default. Use organization method to list team inboxes or set &#x60;teamAccess&#x60; to true.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="tag">Optionally filter by tags. Will return inboxes that include given tags (optional)</param>
        /// <param name="teamAccess">Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)</param>
        /// <returns>PageInboxProjection</returns>
        PageInboxProjection GetAllInboxes (bool? favourite = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), string sort = default(string), string tag = default(string), bool? teamAccess = default(bool?));

        /// <summary>
        /// List All Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results. Results do not include team access inboxes by default. Use organization method to list team inboxes or set &#x60;teamAccess&#x60; to true.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="tag">Optionally filter by tags. Will return inboxes that include given tags (optional)</param>
        /// <param name="teamAccess">Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)</param>
        /// <returns>ApiResponse of PageInboxProjection</returns>
        ApiResponse<PageInboxProjection> GetAllInboxesWithHttpInfo (bool? favourite = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), string sort = default(string), string tag = default(string), bool? teamAccess = default(bool?));
        /// <summary>
        /// Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="size">Alias for limit. Assessed first before assessing any passed limit. (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>List&lt;EmailPreview&gt;</returns>
        List<EmailPreview> GetEmails (Guid inboxId, int? limit = default(int?), long? minCount = default(long?), long? retryTimeout = default(long?), DateTime? since = default(DateTime?), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="size">Alias for limit. Assessed first before assessing any passed limit. (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailPreview&gt;</returns>
        ApiResponse<List<EmailPreview>> GetEmailsWithHttpInfo (Guid inboxId, int? limit = default(int?), long? minCount = default(long?), long? retryTimeout = default(long?), DateTime? since = default(DateTime?), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get Inbox. Returns properties of an inbox.
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Inbox</returns>
        Inbox GetInbox (Guid inboxId);

        /// <summary>
        /// Get Inbox. Returns properties of an inbox.
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> GetInboxWithHttpInfo (Guid inboxId);
        /// <summary>
        /// Get inbox emails paginated
        /// </summary>
        /// <remarks>
        /// Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageEmailPreview</returns>
        PageEmailPreview GetInboxEmailsPaginated (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get inbox emails paginated
        /// </summary>
        /// <remarks>
        /// Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageEmailPreview</returns>
        ApiResponse<PageEmailPreview> GetInboxEmailsPaginatedWithHttpInfo (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get Inbox Sent Emails
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in inbox sent email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox sent email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageSentEmailProjection</returns>
        PageSentEmailProjection GetInboxSentEmails (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get Inbox Sent Emails
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in inbox sent email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox sent email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageSentEmailProjection</returns>
        ApiResponse<PageSentEmailProjection> GetInboxSentEmailsWithHttpInfo (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get inbox tags
        /// </summary>
        /// <remarks>
        /// Get all inbox tags
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetInboxTags ();

        /// <summary>
        /// Get inbox tags
        /// </summary>
        /// <remarks>
        /// Get all inbox tags
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetInboxTagsWithHttpInfo ();
        /// <summary>
        /// List Inboxes and email eddresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended. You can provide a limit and sort parameter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>List&lt;Inbox&gt;</returns>
        List<Inbox> GetInboxes (int? size = default(int?), string sort = default(string));

        /// <summary>
        /// List Inboxes and email eddresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended. You can provide a limit and sort parameter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of List&lt;Inbox&gt;</returns>
        ApiResponse<List<Inbox>> GetInboxesWithHttpInfo (int? size = default(int?), string sort = default(string));
        /// <summary>
        /// List Organization Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageOrganizationInboxProjection</returns>
        PageOrganizationInboxProjection GetOrganizationInboxes (int? page = default(int?), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// List Organization Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageOrganizationInboxProjection</returns>
        ApiResponse<PageOrganizationInboxProjection> GetOrganizationInboxesWithHttpInfo (int? page = default(int?), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns></returns>
        void SendEmail (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));

        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));
        /// <summary>
        /// Send email and return sent confirmation
        /// </summary>
        /// <remarks>
        /// Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>SentEmailDto</returns>
        SentEmailDto SendEmailAndConfirm (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));

        /// <summary>
        /// Send email and return sent confirmation
        /// </summary>
        /// <remarks>
        /// Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        ApiResponse<SentEmailDto> SendEmailAndConfirmWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));
        /// <summary>
        /// Send a test email to inbox
        /// </summary>
        /// <remarks>
        /// Send an inbox a test email to test email receiving is working
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        void SendTestEmail (Guid inboxId);

        /// <summary>
        /// Send a test email to inbox
        /// </summary>
        /// <remarks>
        /// Send an inbox a test email to test email receiving is working
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendTestEmailWithHttpInfo (Guid inboxId);
        /// <summary>
        /// Set inbox favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favourite state for an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Inbox</returns>
        Inbox SetInboxFavourited (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions);

        /// <summary>
        /// Set inbox favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favourite state for an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> SetInboxFavouritedWithHttpInfo (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions);
        /// <summary>
        /// Update Inbox. Change name and description. Email address is not editable.
        /// </summary>
        /// <remarks>
        /// Update editable fields on an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="updateInboxOptions">updateInboxOptions</param>
        /// <returns>Inbox</returns>
        Inbox UpdateInbox (Guid inboxId, UpdateInboxOptions updateInboxOptions);

        /// <summary>
        /// Update Inbox. Change name and description. Email address is not editable.
        /// </summary>
        /// <remarks>
        /// Update editable fields on an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="updateInboxOptions">updateInboxOptions</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> UpdateInboxWithHttpInfo (Guid inboxId, UpdateInboxOptions updateInboxOptions);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an inbox email address. An inbox has a real email address and can send and receive emails.
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)</param>
        /// <param name="description">Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)</param>
        /// <param name="emailAddress">A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)</param>
        /// <param name="expiresAt">Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)</param>
        /// <param name="expiresIn">Number of milliseconds that inbox should exist for (optional)</param>
        /// <param name="favourite">Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering (optional)</param>
        /// <param name="name">Optional name of the inbox. Displayed in the dashboard for easier search (optional)</param>
        /// <param name="tags">Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)</param>
        /// <param name="useDomainPool">Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. (optional)</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> CreateInboxAsync (bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?));

        /// <summary>
        /// Create an inbox email address. An inbox has a real email address and can send and receive emails.
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)</param>
        /// <param name="description">Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)</param>
        /// <param name="emailAddress">A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)</param>
        /// <param name="expiresAt">Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)</param>
        /// <param name="expiresIn">Number of milliseconds that inbox should exist for (optional)</param>
        /// <param name="favourite">Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering (optional)</param>
        /// <param name="name">Optional name of the inbox. Displayed in the dashboard for easier search (optional)</param>
        /// <param name="tags">Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)</param>
        /// <param name="useDomainPool">Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. (optional)</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateInboxAsyncWithHttpInfo (bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?));
        /// <summary>
        /// Create an inbox with default options. Uses MailSlurp domain pool address and is private.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> CreateInboxWithDefaultsAsync ();

        /// <summary>
        /// Create an inbox with default options. Uses MailSlurp domain pool address and is private.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateInboxWithDefaultsAsyncWithHttpInfo ();
        /// <summary>
        /// Create an inbox with options. Extended options for inbox creation.
        /// </summary>
        /// <remarks>
        /// Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxDto">createInboxDto</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> CreateInboxWithOptionsAsync (CreateInboxDto createInboxDto);

        /// <summary>
        /// Create an inbox with options. Extended options for inbox creation.
        /// </summary>
        /// <remarks>
        /// Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxDto">createInboxDto</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateInboxWithOptionsAsyncWithHttpInfo (CreateInboxDto createInboxDto);
        /// <summary>
        /// Delete all inboxes
        /// </summary>
        /// <remarks>
        /// Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllInboxesAsync ();

        /// <summary>
        /// Delete all inboxes
        /// </summary>
        /// <remarks>
        /// Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllInboxesAsyncWithHttpInfo ();
        /// <summary>
        /// Delete inbox
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboxAsync (Guid inboxId);

        /// <summary>
        /// Delete inbox
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboxAsyncWithHttpInfo (Guid inboxId);
        /// <summary>
        /// List All Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results. Results do not include team access inboxes by default. Use organization method to list team inboxes or set &#x60;teamAccess&#x60; to true.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="tag">Optionally filter by tags. Will return inboxes that include given tags (optional)</param>
        /// <param name="teamAccess">Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)</param>
        /// <returns>Task of PageInboxProjection</returns>
        System.Threading.Tasks.Task<PageInboxProjection> GetAllInboxesAsync (bool? favourite = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), string sort = default(string), string tag = default(string), bool? teamAccess = default(bool?));

        /// <summary>
        /// List All Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results. Results do not include team access inboxes by default. Use organization method to list team inboxes or set &#x60;teamAccess&#x60; to true.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="tag">Optionally filter by tags. Will return inboxes that include given tags (optional)</param>
        /// <param name="teamAccess">Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)</param>
        /// <returns>Task of ApiResponse (PageInboxProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageInboxProjection>> GetAllInboxesAsyncWithHttpInfo (bool? favourite = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), string sort = default(string), string tag = default(string), bool? teamAccess = default(bool?));
        /// <summary>
        /// Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="size">Alias for limit. Assessed first before assessing any passed limit. (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>Task of List&lt;EmailPreview&gt;</returns>
        System.Threading.Tasks.Task<List<EmailPreview>> GetEmailsAsync (Guid inboxId, int? limit = default(int?), long? minCount = default(long?), long? retryTimeout = default(long?), DateTime? since = default(DateTime?), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="size">Alias for limit. Assessed first before assessing any passed limit. (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailPreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailPreview>>> GetEmailsAsyncWithHttpInfo (Guid inboxId, int? limit = default(int?), long? minCount = default(long?), long? retryTimeout = default(long?), DateTime? since = default(DateTime?), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get Inbox. Returns properties of an inbox.
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> GetInboxAsync (Guid inboxId);

        /// <summary>
        /// Get Inbox. Returns properties of an inbox.
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> GetInboxAsyncWithHttpInfo (Guid inboxId);
        /// <summary>
        /// Get inbox emails paginated
        /// </summary>
        /// <remarks>
        /// Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageEmailPreview</returns>
        System.Threading.Tasks.Task<PageEmailPreview> GetInboxEmailsPaginatedAsync (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get inbox emails paginated
        /// </summary>
        /// <remarks>
        /// Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageEmailPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageEmailPreview>> GetInboxEmailsPaginatedAsyncWithHttpInfo (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get Inbox Sent Emails
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in inbox sent email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox sent email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageSentEmailProjection</returns>
        System.Threading.Tasks.Task<PageSentEmailProjection> GetInboxSentEmailsAsync (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get Inbox Sent Emails
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in inbox sent email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox sent email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageSentEmailProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSentEmailProjection>> GetInboxSentEmailsAsyncWithHttpInfo (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get inbox tags
        /// </summary>
        /// <remarks>
        /// Get all inbox tags
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetInboxTagsAsync ();

        /// <summary>
        /// Get inbox tags
        /// </summary>
        /// <remarks>
        /// Get all inbox tags
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetInboxTagsAsyncWithHttpInfo ();
        /// <summary>
        /// List Inboxes and email eddresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended. You can provide a limit and sort parameter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of List&lt;Inbox&gt;</returns>
        System.Threading.Tasks.Task<List<Inbox>> GetInboxesAsync (int? size = default(int?), string sort = default(string));

        /// <summary>
        /// List Inboxes and email eddresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended. You can provide a limit and sort parameter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (List&lt;Inbox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Inbox>>> GetInboxesAsyncWithHttpInfo (int? size = default(int?), string sort = default(string));
        /// <summary>
        /// List Organization Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageOrganizationInboxProjection</returns>
        System.Threading.Tasks.Task<PageOrganizationInboxProjection> GetOrganizationInboxesAsync (int? page = default(int?), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// List Organization Inboxes Paginated
        /// </summary>
        /// <remarks>
        /// List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageOrganizationInboxProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageOrganizationInboxProjection>> GetOrganizationInboxesAsyncWithHttpInfo (int? page = default(int?), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailAsync (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));

        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailAsyncWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));
        /// <summary>
        /// Send email and return sent confirmation
        /// </summary>
        /// <remarks>
        /// Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of SentEmailDto</returns>
        System.Threading.Tasks.Task<SentEmailDto> SendEmailAndConfirmAsync (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));

        /// <summary>
        /// Send email and return sent confirmation
        /// </summary>
        /// <remarks>
        /// Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentEmailDto>> SendEmailAndConfirmAsyncWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions));
        /// <summary>
        /// Send a test email to inbox
        /// </summary>
        /// <remarks>
        /// Send an inbox a test email to test email receiving is working
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendTestEmailAsync (Guid inboxId);

        /// <summary>
        /// Send a test email to inbox
        /// </summary>
        /// <remarks>
        /// Send an inbox a test email to test email receiving is working
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendTestEmailAsyncWithHttpInfo (Guid inboxId);
        /// <summary>
        /// Set inbox favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favourite state for an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> SetInboxFavouritedAsync (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions);

        /// <summary>
        /// Set inbox favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favourite state for an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> SetInboxFavouritedAsyncWithHttpInfo (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions);
        /// <summary>
        /// Update Inbox. Change name and description. Email address is not editable.
        /// </summary>
        /// <remarks>
        /// Update editable fields on an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="updateInboxOptions">updateInboxOptions</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> UpdateInboxAsync (Guid inboxId, UpdateInboxOptions updateInboxOptions);

        /// <summary>
        /// Update Inbox. Change name and description. Email address is not editable.
        /// </summary>
        /// <remarks>
        /// Update editable fields on an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="updateInboxOptions">updateInboxOptions</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> UpdateInboxAsyncWithHttpInfo (Guid inboxId, UpdateInboxOptions updateInboxOptions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxControllerApi : IInboxControllerApiSync, IInboxControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InboxControllerApi : IInboxControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxControllerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxControllerApi(String basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InboxControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InboxControllerApi(mailslurp.Client.ISynchronousClient client,mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an inbox email address. An inbox has a real email address and can send and receive emails. Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)</param>
        /// <param name="description">Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)</param>
        /// <param name="emailAddress">A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)</param>
        /// <param name="expiresAt">Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)</param>
        /// <param name="expiresIn">Number of milliseconds that inbox should exist for (optional)</param>
        /// <param name="favourite">Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering (optional)</param>
        /// <param name="name">Optional name of the inbox. Displayed in the dashboard for easier search (optional)</param>
        /// <param name="tags">Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)</param>
        /// <param name="useDomainPool">Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. (optional)</param>
        /// <returns>Inbox</returns>
        public Inbox CreateInbox (bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?))
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = CreateInboxWithHttpInfo(allowTeamAccess, description, emailAddress, expiresAt, expiresIn, favourite, name, tags, useDomainPool);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox email address. An inbox has a real email address and can send and receive emails. Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)</param>
        /// <param name="description">Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)</param>
        /// <param name="emailAddress">A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)</param>
        /// <param name="expiresAt">Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)</param>
        /// <param name="expiresIn">Number of milliseconds that inbox should exist for (optional)</param>
        /// <param name="favourite">Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering (optional)</param>
        /// <param name="name">Optional name of the inbox. Displayed in the dashboard for easier search (optional)</param>
        /// <param name="tags">Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)</param>
        /// <param name="useDomainPool">Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. (optional)</param>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > CreateInboxWithHttpInfo (bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (allowTeamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "allowTeamAccess", allowTeamAccess));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (expiresAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresAt", expiresAt));
            }
            if (expiresIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresIn", expiresIn));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (useDomainPool != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useDomainPool", useDomainPool));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Inbox >("/inboxes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox email address. An inbox has a real email address and can send and receive emails. Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)</param>
        /// <param name="description">Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)</param>
        /// <param name="emailAddress">A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)</param>
        /// <param name="expiresAt">Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)</param>
        /// <param name="expiresIn">Number of milliseconds that inbox should exist for (optional)</param>
        /// <param name="favourite">Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering (optional)</param>
        /// <param name="name">Optional name of the inbox. Displayed in the dashboard for easier search (optional)</param>
        /// <param name="tags">Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)</param>
        /// <param name="useDomainPool">Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. (optional)</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> CreateInboxAsync (bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?))
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await CreateInboxAsyncWithHttpInfo(allowTeamAccess, description, emailAddress, expiresAt, expiresIn, favourite, name, tags, useDomainPool);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an inbox email address. An inbox has a real email address and can send and receive emails. Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess">Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)</param>
        /// <param name="description">Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)</param>
        /// <param name="emailAddress">A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)</param>
        /// <param name="expiresAt">Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)</param>
        /// <param name="expiresIn">Number of milliseconds that inbox should exist for (optional)</param>
        /// <param name="favourite">Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering (optional)</param>
        /// <param name="name">Optional name of the inbox. Displayed in the dashboard for easier search (optional)</param>
        /// <param name="tags">Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)</param>
        /// <param name="useDomainPool">Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. (optional)</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> CreateInboxAsyncWithHttpInfo (bool? allowTeamAccess = default(bool?), string description = default(string), string emailAddress = default(string), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), bool? favourite = default(bool?), string name = default(string), List<string> tags = default(List<string>), bool? useDomainPool = default(bool?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (allowTeamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "allowTeamAccess", allowTeamAccess));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (expiresAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresAt", expiresAt));
            }
            if (expiresIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresIn", expiresIn));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (useDomainPool != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useDomainPool", useDomainPool));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Inbox>("/inboxes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox with default options. Uses MailSlurp domain pool address and is private. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Inbox</returns>
        public Inbox CreateInboxWithDefaults ()
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = CreateInboxWithDefaultsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox with default options. Uses MailSlurp domain pool address and is private. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > CreateInboxWithDefaultsWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Inbox >("/inboxes/withDefaults", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInboxWithDefaults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox with default options. Uses MailSlurp domain pool address and is private. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> CreateInboxWithDefaultsAsync ()
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await CreateInboxWithDefaultsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an inbox with default options. Uses MailSlurp domain pool address and is private. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> CreateInboxWithDefaultsAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Inbox>("/inboxes/withDefaults", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInboxWithDefaults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox with options. Extended options for inbox creation. Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxDto">createInboxDto</param>
        /// <returns>Inbox</returns>
        public Inbox CreateInboxWithOptions (CreateInboxDto createInboxDto)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = CreateInboxWithOptionsWithHttpInfo(createInboxDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox with options. Extended options for inbox creation. Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxDto">createInboxDto</param>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > CreateInboxWithOptionsWithHttpInfo (CreateInboxDto createInboxDto)
        {
            // verify the required parameter 'createInboxDto' is set
            if (createInboxDto == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createInboxDto' when calling InboxControllerApi->CreateInboxWithOptions");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createInboxDto;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Inbox >("/inboxes/withOptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInboxWithOptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox with options. Extended options for inbox creation. Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxDto">createInboxDto</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> CreateInboxWithOptionsAsync (CreateInboxDto createInboxDto)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await CreateInboxWithOptionsAsyncWithHttpInfo(createInboxDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an inbox with options. Extended options for inbox creation. Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxDto">createInboxDto</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> CreateInboxWithOptionsAsyncWithHttpInfo (CreateInboxDto createInboxDto)
        {
            // verify the required parameter 'createInboxDto' is set
            if (createInboxDto == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createInboxDto' when calling InboxControllerApi->CreateInboxWithOptions");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = createInboxDto;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Inbox>("/inboxes/withOptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInboxWithOptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all inboxes Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAllInboxes ()
        {
             DeleteAllInboxesWithHttpInfo();
        }

        /// <summary>
        /// Delete all inboxes Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteAllInboxesWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/inboxes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllInboxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all inboxes Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllInboxesAsync ()
        {
             await DeleteAllInboxesAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all inboxes Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteAllInboxesAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/inboxes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllInboxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete inbox Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        public void DeleteInbox (Guid inboxId)
        {
             DeleteInboxWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete inbox Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteInboxWithHttpInfo (Guid inboxId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/inboxes/{inboxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete inbox Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboxAsync (Guid inboxId)
        {
             await DeleteInboxAsyncWithHttpInfo(inboxId);

        }

        /// <summary>
        /// Delete inbox Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteInboxAsyncWithHttpInfo (Guid inboxId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/inboxes/{inboxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Inboxes Paginated List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results. Results do not include team access inboxes by default. Use organization method to list team inboxes or set &#x60;teamAccess&#x60; to true.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="tag">Optionally filter by tags. Will return inboxes that include given tags (optional)</param>
        /// <param name="teamAccess">Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)</param>
        /// <returns>PageInboxProjection</returns>
        public PageInboxProjection GetAllInboxes (bool? favourite = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), string sort = default(string), string tag = default(string), bool? teamAccess = default(bool?))
        {
             mailslurp.Client.ApiResponse<PageInboxProjection> localVarResponse = GetAllInboxesWithHttpInfo(favourite, page, search, size, sort, tag, teamAccess);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List All Inboxes Paginated List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results. Results do not include team access inboxes by default. Use organization method to list team inboxes or set &#x60;teamAccess&#x60; to true.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="tag">Optionally filter by tags. Will return inboxes that include given tags (optional)</param>
        /// <param name="teamAccess">Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)</param>
        /// <returns>ApiResponse of PageInboxProjection</returns>
        public mailslurp.Client.ApiResponse< PageInboxProjection > GetAllInboxesWithHttpInfo (bool? favourite = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), string sort = default(string), string tag = default(string), bool? teamAccess = default(bool?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }
            if (teamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "teamAccess", teamAccess));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageInboxProjection >("/inboxes/paginated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllInboxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Inboxes Paginated List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results. Results do not include team access inboxes by default. Use organization method to list team inboxes or set &#x60;teamAccess&#x60; to true.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="tag">Optionally filter by tags. Will return inboxes that include given tags (optional)</param>
        /// <param name="teamAccess">Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)</param>
        /// <returns>Task of PageInboxProjection</returns>
        public async System.Threading.Tasks.Task<PageInboxProjection> GetAllInboxesAsync (bool? favourite = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), string sort = default(string), string tag = default(string), bool? teamAccess = default(bool?))
        {
             mailslurp.Client.ApiResponse<PageInboxProjection> localVarResponse = await GetAllInboxesAsyncWithHttpInfo(favourite, page, search, size, sort, tag, teamAccess);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List All Inboxes Paginated List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results. Results do not include team access inboxes by default. Use organization method to list team inboxes or set &#x60;teamAccess&#x60; to true.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="search">Optionally filter by search words partial matching ID, tags, name, and email address (optional)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="tag">Optionally filter by tags. Will return inboxes that include given tags (optional)</param>
        /// <param name="teamAccess">Optionally filter by team access. Defaults to false so organization inboxes are not included (optional, default to false)</param>
        /// <returns>Task of ApiResponse (PageInboxProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageInboxProjection>> GetAllInboxesAsyncWithHttpInfo (bool? favourite = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), string sort = default(string), string tag = default(string), bool? teamAccess = default(bool?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }
            if (teamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "teamAccess", teamAccess));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageInboxProjection>("/inboxes/paginated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllInboxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead. List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="size">Alias for limit. Assessed first before assessing any passed limit. (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>List&lt;EmailPreview&gt;</returns>
        public List<EmailPreview> GetEmails (Guid inboxId, int? limit = default(int?), long? minCount = default(long?), long? retryTimeout = default(long?), DateTime? since = default(DateTime?), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<List<EmailPreview>> localVarResponse = GetEmailsWithHttpInfo(inboxId, limit, minCount, retryTimeout, since, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead. List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="size">Alias for limit. Assessed first before assessing any passed limit. (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailPreview&gt;</returns>
        public mailslurp.Client.ApiResponse< List<EmailPreview> > GetEmailsWithHttpInfo (Guid inboxId, int? limit = default(int?), long? minCount = default(long?), long? retryTimeout = default(long?), DateTime? since = default(DateTime?), int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "minCount", minCount));
            }
            if (retryTimeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "retryTimeout", retryTimeout));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<EmailPreview> >("/inboxes/{inboxId}/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead. List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="size">Alias for limit. Assessed first before assessing any passed limit. (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>Task of List&lt;EmailPreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmailPreview>> GetEmailsAsync (Guid inboxId, int? limit = default(int?), long? minCount = default(long?), long? retryTimeout = default(long?), DateTime? since = default(DateTime?), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<List<EmailPreview>> localVarResponse = await GetEmailsAsyncWithHttpInfo(inboxId, limit, minCount, retryTimeout, since, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead. List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <param name="size">Alias for limit. Assessed first before assessing any passed limit. (optional)</param>
        /// <param name="sort">Sort the results by received date and direction ASC or DESC (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailPreview&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<EmailPreview>>> GetEmailsAsyncWithHttpInfo (Guid inboxId, int? limit = default(int?), long? minCount = default(long?), long? retryTimeout = default(long?), DateTime? since = default(DateTime?), int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (minCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "minCount", minCount));
            }
            if (retryTimeout != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "retryTimeout", retryTimeout));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EmailPreview>>("/inboxes/{inboxId}/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Inbox. Returns properties of an inbox. Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Inbox</returns>
        public Inbox GetInbox (Guid inboxId)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = GetInboxWithHttpInfo(inboxId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inbox. Returns properties of an inbox. Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > GetInboxWithHttpInfo (Guid inboxId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Inbox >("/inboxes/{inboxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Inbox. Returns properties of an inbox. Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> GetInboxAsync (Guid inboxId)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await GetInboxAsyncWithHttpInfo(inboxId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inbox. Returns properties of an inbox. Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> GetInboxAsyncWithHttpInfo (Guid inboxId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Inbox>("/inboxes/{inboxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get inbox emails paginated Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageEmailPreview</returns>
        public PageEmailPreview GetInboxEmailsPaginated (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageEmailPreview> localVarResponse = GetInboxEmailsPaginatedWithHttpInfo(inboxId, page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get inbox emails paginated Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageEmailPreview</returns>
        public mailslurp.Client.ApiResponse< PageEmailPreview > GetInboxEmailsPaginatedWithHttpInfo (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageEmailPreview >("/inboxes/{inboxId}/emails/paginated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxEmailsPaginated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get inbox emails paginated Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageEmailPreview</returns>
        public async System.Threading.Tasks.Task<PageEmailPreview> GetInboxEmailsPaginatedAsync (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageEmailPreview> localVarResponse = await GetInboxEmailsPaginatedAsyncWithHttpInfo(inboxId, page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get inbox emails paginated Get a paginated list of emails in an inbox. Does not hold connections open.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="page">Optional page index in inbox emails list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox emails list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageEmailPreview)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageEmailPreview>> GetInboxEmailsPaginatedAsyncWithHttpInfo (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageEmailPreview>("/inboxes/{inboxId}/emails/paginated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxEmailsPaginated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Inbox Sent Emails Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in inbox sent email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox sent email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageSentEmailProjection</returns>
        public PageSentEmailProjection GetInboxSentEmails (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageSentEmailProjection> localVarResponse = GetInboxSentEmailsWithHttpInfo(inboxId, page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inbox Sent Emails Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in inbox sent email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox sent email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageSentEmailProjection</returns>
        public mailslurp.Client.ApiResponse< PageSentEmailProjection > GetInboxSentEmailsWithHttpInfo (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageSentEmailProjection >("/inboxes/{inboxId}/sent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxSentEmails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Inbox Sent Emails Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in inbox sent email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox sent email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageSentEmailProjection</returns>
        public async System.Threading.Tasks.Task<PageSentEmailProjection> GetInboxSentEmailsAsync (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageSentEmailProjection> localVarResponse = await GetInboxSentEmailsAsyncWithHttpInfo(inboxId, page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inbox Sent Emails Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in inbox sent email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox sent email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageSentEmailProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageSentEmailProjection>> GetInboxSentEmailsAsyncWithHttpInfo (Guid inboxId, int? page = default(int?), int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageSentEmailProjection>("/inboxes/{inboxId}/sent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxSentEmails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get inbox tags Get all inbox tags
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetInboxTags ()
        {
             mailslurp.Client.ApiResponse<List<string>> localVarResponse = GetInboxTagsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get inbox tags Get all inbox tags
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public mailslurp.Client.ApiResponse< List<string> > GetInboxTagsWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<string> >("/inboxes/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get inbox tags Get all inbox tags
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetInboxTagsAsync ()
        {
             mailslurp.Client.ApiResponse<List<string>> localVarResponse = await GetInboxTagsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get inbox tags Get all inbox tags
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<string>>> GetInboxTagsAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/inboxes/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Inboxes and email eddresses List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended. You can provide a limit and sort parameter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>List&lt;Inbox&gt;</returns>
        public List<Inbox> GetInboxes (int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<List<Inbox>> localVarResponse = GetInboxesWithHttpInfo(size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Inboxes and email eddresses List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended. You can provide a limit and sort parameter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of List&lt;Inbox&gt;</returns>
        public mailslurp.Client.ApiResponse< List<Inbox> > GetInboxesWithHttpInfo (int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Inbox> >("/inboxes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Inboxes and email eddresses List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended. You can provide a limit and sort parameter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of List&lt;Inbox&gt;</returns>
        public async System.Threading.Tasks.Task<List<Inbox>> GetInboxesAsync (int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<List<Inbox>> localVarResponse = await GetInboxesAsyncWithHttpInfo(size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Inboxes and email eddresses List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended. You can provide a limit and sort parameter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (List&lt;Inbox&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<Inbox>>> GetInboxesAsyncWithHttpInfo (int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Inbox>>("/inboxes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Organization Inboxes Paginated List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageOrganizationInboxProjection</returns>
        public PageOrganizationInboxProjection GetOrganizationInboxes (int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageOrganizationInboxProjection> localVarResponse = GetOrganizationInboxesWithHttpInfo(page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Organization Inboxes Paginated List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageOrganizationInboxProjection</returns>
        public mailslurp.Client.ApiResponse< PageOrganizationInboxProjection > GetOrganizationInboxesWithHttpInfo (int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageOrganizationInboxProjection >("/inboxes/organization", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationInboxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Organization Inboxes Paginated List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageOrganizationInboxProjection</returns>
        public async System.Threading.Tasks.Task<PageOrganizationInboxProjection> GetOrganizationInboxesAsync (int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageOrganizationInboxProjection> localVarResponse = await GetOrganizationInboxesAsyncWithHttpInfo(page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Organization Inboxes Paginated List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageOrganizationInboxProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageOrganizationInboxProjection>> GetOrganizationInboxesAsyncWithHttpInfo (int? page = default(int?), int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageOrganizationInboxProjection>("/inboxes/organization", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganizationInboxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Email Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns></returns>
        public void SendEmail (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
             SendEmailWithHttpInfo(inboxId, sendEmailOptions);
        }

        /// <summary>
        /// Send Email Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> SendEmailWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.Data = sendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/inboxes/{inboxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Email Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailAsync (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
             await SendEmailAsyncWithHttpInfo(inboxId, sendEmailOptions);

        }

        /// <summary>
        /// Send Email Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> SendEmailAsyncWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.Data = sendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/inboxes/{inboxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send email and return sent confirmation Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>SentEmailDto</returns>
        public SentEmailDto SendEmailAndConfirm (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
             mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = SendEmailAndConfirmWithHttpInfo(inboxId, sendEmailOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send email and return sent confirmation Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        public mailslurp.Client.ApiResponse< SentEmailDto > SendEmailAndConfirmWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.Data = sendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SentEmailDto >("/inboxes/{inboxId}/confirm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailAndConfirm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send email and return sent confirmation Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of SentEmailDto</returns>
        public async System.Threading.Tasks.Task<SentEmailDto> SendEmailAndConfirmAsync (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {
             mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = await SendEmailAndConfirmAsyncWithHttpInfo(inboxId, sendEmailOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send email and return sent confirmation Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of the inbox you want to send the email from</param>
        /// <param name="sendEmailOptions">Options for the email (optional)</param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<SentEmailDto>> SendEmailAndConfirmAsyncWithHttpInfo (Guid inboxId, SendEmailOptions sendEmailOptions = default(SendEmailOptions))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.Data = sendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SentEmailDto>("/inboxes/{inboxId}/confirm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailAndConfirm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a test email to inbox Send an inbox a test email to test email receiving is working
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        public void SendTestEmail (Guid inboxId)
        {
             SendTestEmailWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Send a test email to inbox Send an inbox a test email to test email receiving is working
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> SendTestEmailWithHttpInfo (Guid inboxId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/inboxes/{inboxId}/send-test-email", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTestEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a test email to inbox Send an inbox a test email to test email receiving is working
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendTestEmailAsync (Guid inboxId)
        {
             await SendTestEmailAsyncWithHttpInfo(inboxId);

        }

        /// <summary>
        /// Send a test email to inbox Send an inbox a test email to test email receiving is working
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> SendTestEmailAsyncWithHttpInfo (Guid inboxId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/inboxes/{inboxId}/send-test-email", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTestEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set inbox favourited state Set and return new favourite state for an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Inbox</returns>
        public Inbox SetInboxFavourited (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = SetInboxFavouritedWithHttpInfo(inboxId, setInboxFavouritedOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set inbox favourited state Set and return new favourite state for an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > SetInboxFavouritedWithHttpInfo (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions)
        {
            // verify the required parameter 'setInboxFavouritedOptions' is set
            if (setInboxFavouritedOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'setInboxFavouritedOptions' when calling InboxControllerApi->SetInboxFavourited");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.Data = setInboxFavouritedOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Inbox >("/inboxes/{inboxId}/favourite", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetInboxFavourited", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set inbox favourited state Set and return new favourite state for an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> SetInboxFavouritedAsync (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await SetInboxFavouritedAsyncWithHttpInfo(inboxId, setInboxFavouritedOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set inbox favourited state Set and return new favourite state for an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="setInboxFavouritedOptions">setInboxFavouritedOptions</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> SetInboxFavouritedAsyncWithHttpInfo (Guid inboxId, SetInboxFavouritedOptions setInboxFavouritedOptions)
        {
            // verify the required parameter 'setInboxFavouritedOptions' is set
            if (setInboxFavouritedOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'setInboxFavouritedOptions' when calling InboxControllerApi->SetInboxFavourited");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.Data = setInboxFavouritedOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Inbox>("/inboxes/{inboxId}/favourite", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetInboxFavourited", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Inbox. Change name and description. Email address is not editable. Update editable fields on an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="updateInboxOptions">updateInboxOptions</param>
        /// <returns>Inbox</returns>
        public Inbox UpdateInbox (Guid inboxId, UpdateInboxOptions updateInboxOptions)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = UpdateInboxWithHttpInfo(inboxId, updateInboxOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Inbox. Change name and description. Email address is not editable. Update editable fields on an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="updateInboxOptions">updateInboxOptions</param>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > UpdateInboxWithHttpInfo (Guid inboxId, UpdateInboxOptions updateInboxOptions)
        {
            // verify the required parameter 'updateInboxOptions' is set
            if (updateInboxOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'updateInboxOptions' when calling InboxControllerApi->UpdateInbox");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.Data = updateInboxOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Inbox >("/inboxes/{inboxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Inbox. Change name and description. Email address is not editable. Update editable fields on an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="updateInboxOptions">updateInboxOptions</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> UpdateInboxAsync (Guid inboxId, UpdateInboxOptions updateInboxOptions)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await UpdateInboxAsyncWithHttpInfo(inboxId, updateInboxOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Inbox. Change name and description. Email address is not editable. Update editable fields on an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="updateInboxOptions">updateInboxOptions</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> UpdateInboxAsyncWithHttpInfo (Guid inboxId, UpdateInboxOptions updateInboxOptions)
        {
            // verify the required parameter 'updateInboxOptions' is set
            if (updateInboxOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'updateInboxOptions' when calling InboxControllerApi->UpdateInbox");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.Data = updateInboxOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Inbox>("/inboxes/{inboxId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
