// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBulkActionsControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BulkActionsControllerApiEvents Events { get; }

        /// <summary>
        /// Bulk create Inboxes (email addresses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkCreateInboxesApiResponse"/>&gt;</returns>
        Task<IBulkCreateInboxesApiResponse> BulkCreateInboxesAsync(int count, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bulk create Inboxes (email addresses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkCreateInboxesApiResponse"/>&gt;</returns>
        Task<IBulkCreateInboxesApiResponse> BulkCreateInboxesOrDefaultAsync(int count, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bulk Delete Inboxes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkDeleteInboxesApiResponse"/>&gt;</returns>
        Task<IBulkDeleteInboxesApiResponse> BulkDeleteInboxesAsync(List<Guid> requestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bulk Delete Inboxes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkDeleteInboxesApiResponse"/>&gt;</returns>
        Task<IBulkDeleteInboxesApiResponse> BulkDeleteInboxesOrDefaultAsync(List<Guid> requestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bulk Send Emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkSendEmailOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkSendEmailsApiResponse"/>&gt;</returns>
        Task<IBulkSendEmailsApiResponse> BulkSendEmailsAsync(BulkSendEmailOptions bulkSendEmailOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bulk Send Emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="bulkSendEmailOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkSendEmailsApiResponse"/>&gt;</returns>
        Task<IBulkSendEmailsApiResponse> BulkSendEmailsOrDefaultAsync(BulkSendEmailOptions bulkSendEmailOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IBulkCreateInboxesApiResponse"/>
    /// </summary>
    public interface IBulkCreateInboxesApiResponse : mailslurp.Client.IApiResponse, ICreated<List<InboxDto>>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IBulkDeleteInboxesApiResponse"/>
    /// </summary>
    public interface IBulkDeleteInboxesApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IBulkSendEmailsApiResponse"/>
    /// </summary>
    public interface IBulkSendEmailsApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BulkActionsControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnBulkCreateInboxes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorBulkCreateInboxes;

        internal void ExecuteOnBulkCreateInboxes(BulkActionsControllerApi.BulkCreateInboxesApiResponse apiResponse)
        {
            OnBulkCreateInboxes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorBulkCreateInboxes(Exception exception)
        {
            OnErrorBulkCreateInboxes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnBulkDeleteInboxes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorBulkDeleteInboxes;

        internal void ExecuteOnBulkDeleteInboxes(BulkActionsControllerApi.BulkDeleteInboxesApiResponse apiResponse)
        {
            OnBulkDeleteInboxes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorBulkDeleteInboxes(Exception exception)
        {
            OnErrorBulkDeleteInboxes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnBulkSendEmails;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorBulkSendEmails;

        internal void ExecuteOnBulkSendEmails(BulkActionsControllerApi.BulkSendEmailsApiResponse apiResponse)
        {
            OnBulkSendEmails?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorBulkSendEmails(Exception exception)
        {
            OnErrorBulkSendEmails?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BulkActionsControllerApi : IBulkActionsControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BulkActionsControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BulkActionsControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkActionsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BulkActionsControllerApi(ILogger<BulkActionsControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BulkActionsControllerApiEvents bulkActionsControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BulkActionsControllerApi>();
            HttpClient = httpClient;
            Events = bulkActionsControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatBulkCreateInboxes(ref int count);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="count"></param>
        private void AfterBulkCreateInboxesDefaultImplementation(IBulkCreateInboxesApiResponse apiResponseLocalVar, int count)
        {
            bool suppressDefaultLog = false;
            AfterBulkCreateInboxes(ref suppressDefaultLog, apiResponseLocalVar, count);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="count"></param>
        partial void AfterBulkCreateInboxes(ref bool suppressDefaultLog, IBulkCreateInboxesApiResponse apiResponseLocalVar, int count);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="count"></param>
        private void OnErrorBulkCreateInboxesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int count)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorBulkCreateInboxes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, count);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="count"></param>
        partial void OnErrorBulkCreateInboxes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int count);

        /// <summary>
        /// Bulk create Inboxes (email addresses) 
        /// </summary>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkCreateInboxesApiResponse"/>&gt;</returns>
        public async Task<IBulkCreateInboxesApiResponse> BulkCreateInboxesOrDefaultAsync(int count, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await BulkCreateInboxesAsync(count, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Bulk create Inboxes (email addresses) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkCreateInboxesApiResponse"/>&gt;</returns>
        public async Task<IBulkCreateInboxesApiResponse> BulkCreateInboxesAsync(int count, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatBulkCreateInboxes(ref count);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/bulk/inboxes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/bulk/inboxes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["count"] = ClientUtils.ParameterToString(count);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<BulkCreateInboxesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<BulkCreateInboxesApiResponse>();

                        BulkCreateInboxesApiResponse apiResponseLocalVar = new BulkCreateInboxesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bulk/inboxes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterBulkCreateInboxesDefaultImplementation(apiResponseLocalVar, count);

                        Events.ExecuteOnBulkCreateInboxes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorBulkCreateInboxesDefaultImplementation(e, "/bulk/inboxes", uriBuilderLocalVar.Path, count);
                Events.ExecuteOnErrorBulkCreateInboxes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="BulkCreateInboxesApiResponse"/>
        /// </summary>
        public partial class BulkCreateInboxesApiResponse : mailslurp.Client.ApiResponse, IBulkCreateInboxesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<BulkCreateInboxesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="BulkCreateInboxesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public BulkCreateInboxesApiResponse(ILogger<BulkCreateInboxesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public List<InboxDto> Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InboxDto>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out List<InboxDto> result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatBulkDeleteInboxes(List<Guid> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateBulkDeleteInboxes(List<Guid> requestBody)
        {
            if (requestBody == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestBody"></param>
        private void AfterBulkDeleteInboxesDefaultImplementation(IBulkDeleteInboxesApiResponse apiResponseLocalVar, List<Guid> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterBulkDeleteInboxes(ref suppressDefaultLog, apiResponseLocalVar, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestBody"></param>
        partial void AfterBulkDeleteInboxes(ref bool suppressDefaultLog, IBulkDeleteInboxesApiResponse apiResponseLocalVar, List<Guid> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="requestBody"></param>
        private void OnErrorBulkDeleteInboxesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<Guid> requestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorBulkDeleteInboxes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, requestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorBulkDeleteInboxes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<Guid> requestBody);

        /// <summary>
        /// Bulk Delete Inboxes 
        /// </summary>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkDeleteInboxesApiResponse"/>&gt;</returns>
        public async Task<IBulkDeleteInboxesApiResponse> BulkDeleteInboxesOrDefaultAsync(List<Guid> requestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await BulkDeleteInboxesAsync(requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Bulk Delete Inboxes 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkDeleteInboxesApiResponse"/>&gt;</returns>
        public async Task<IBulkDeleteInboxesApiResponse> BulkDeleteInboxesAsync(List<Guid> requestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateBulkDeleteInboxes(requestBody);

                FormatBulkDeleteInboxes(requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/bulk/inboxes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/bulk/inboxes");

                    httpRequestMessageLocalVar.Content = (requestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<BulkDeleteInboxesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<BulkDeleteInboxesApiResponse>();

                        BulkDeleteInboxesApiResponse apiResponseLocalVar = new BulkDeleteInboxesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bulk/inboxes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterBulkDeleteInboxesDefaultImplementation(apiResponseLocalVar, requestBody);

                        Events.ExecuteOnBulkDeleteInboxes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorBulkDeleteInboxesDefaultImplementation(e, "/bulk/inboxes", uriBuilderLocalVar.Path, requestBody);
                Events.ExecuteOnErrorBulkDeleteInboxes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="BulkDeleteInboxesApiResponse"/>
        /// </summary>
        public partial class BulkDeleteInboxesApiResponse : mailslurp.Client.ApiResponse, IBulkDeleteInboxesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<BulkDeleteInboxesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="BulkDeleteInboxesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public BulkDeleteInboxesApiResponse(ILogger<BulkDeleteInboxesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatBulkSendEmails(BulkSendEmailOptions bulkSendEmailOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="bulkSendEmailOptions"></param>
        /// <returns></returns>
        private void ValidateBulkSendEmails(BulkSendEmailOptions bulkSendEmailOptions)
        {
            if (bulkSendEmailOptions == null)
                throw new ArgumentNullException(nameof(bulkSendEmailOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="bulkSendEmailOptions"></param>
        private void AfterBulkSendEmailsDefaultImplementation(IBulkSendEmailsApiResponse apiResponseLocalVar, BulkSendEmailOptions bulkSendEmailOptions)
        {
            bool suppressDefaultLog = false;
            AfterBulkSendEmails(ref suppressDefaultLog, apiResponseLocalVar, bulkSendEmailOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="bulkSendEmailOptions"></param>
        partial void AfterBulkSendEmails(ref bool suppressDefaultLog, IBulkSendEmailsApiResponse apiResponseLocalVar, BulkSendEmailOptions bulkSendEmailOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="bulkSendEmailOptions"></param>
        private void OnErrorBulkSendEmailsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, BulkSendEmailOptions bulkSendEmailOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorBulkSendEmails(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, bulkSendEmailOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="bulkSendEmailOptions"></param>
        partial void OnErrorBulkSendEmails(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, BulkSendEmailOptions bulkSendEmailOptions);

        /// <summary>
        /// Bulk Send Emails 
        /// </summary>
        /// <param name="bulkSendEmailOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkSendEmailsApiResponse"/>&gt;</returns>
        public async Task<IBulkSendEmailsApiResponse> BulkSendEmailsOrDefaultAsync(BulkSendEmailOptions bulkSendEmailOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await BulkSendEmailsAsync(bulkSendEmailOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Bulk Send Emails 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkSendEmailOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBulkSendEmailsApiResponse"/>&gt;</returns>
        public async Task<IBulkSendEmailsApiResponse> BulkSendEmailsAsync(BulkSendEmailOptions bulkSendEmailOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateBulkSendEmails(bulkSendEmailOptions);

                FormatBulkSendEmails(bulkSendEmailOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/bulk/send"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/bulk/send");

                    httpRequestMessageLocalVar.Content = (bulkSendEmailOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(bulkSendEmailOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<BulkSendEmailsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<BulkSendEmailsApiResponse>();

                        BulkSendEmailsApiResponse apiResponseLocalVar = new BulkSendEmailsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bulk/send", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterBulkSendEmailsDefaultImplementation(apiResponseLocalVar, bulkSendEmailOptions);

                        Events.ExecuteOnBulkSendEmails(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorBulkSendEmailsDefaultImplementation(e, "/bulk/send", uriBuilderLocalVar.Path, bulkSendEmailOptions);
                Events.ExecuteOnErrorBulkSendEmails(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="BulkSendEmailsApiResponse"/>
        /// </summary>
        public partial class BulkSendEmailsApiResponse : mailslurp.Client.ApiResponse, IBulkSendEmailsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<BulkSendEmailsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="BulkSendEmailsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public BulkSendEmailsApiResponse(ILogger<BulkSendEmailsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
