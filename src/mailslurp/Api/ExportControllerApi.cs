// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IExportControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ExportControllerApiEvents Events { get; }

        /// <summary>
        /// Export inboxes link callable via browser
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportType"></param>
        /// <param name="apiKey"></param>
        /// <param name="outputFormat"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="listSeparatorToken"> (optional)</param>
        /// <param name="excludePreviouslyExported"> (optional)</param>
        /// <param name="createdEarliestTime"> (optional)</param>
        /// <param name="createdOldestTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportEntitiesApiResponse"/>&gt;</returns>
        Task<IExportEntitiesApiResponse> ExportEntitiesAsync(string exportType, string apiKey, string outputFormat, Option<string> filter = default, Option<string> listSeparatorToken = default, Option<bool> excludePreviouslyExported = default, Option<DateTime> createdEarliestTime = default, Option<DateTime> createdOldestTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export inboxes link callable via browser
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="exportType"></param>
        /// <param name="apiKey"></param>
        /// <param name="outputFormat"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="listSeparatorToken"> (optional)</param>
        /// <param name="excludePreviouslyExported"> (optional)</param>
        /// <param name="createdEarliestTime"> (optional)</param>
        /// <param name="createdOldestTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportEntitiesApiResponse"/>&gt;</returns>
        Task<IExportEntitiesApiResponse> ExportEntitiesOrDefaultAsync(string exportType, string apiKey, string outputFormat, Option<string> filter = default, Option<string> listSeparatorToken = default, Option<bool> excludePreviouslyExported = default, Option<DateTime> createdEarliestTime = default, Option<DateTime> createdOldestTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get export link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportType"></param>
        /// <param name="exportOptions"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExportLinkApiResponse"/>&gt;</returns>
        Task<IGetExportLinkApiResponse> GetExportLinkAsync(string exportType, ExportOptions exportOptions, Option<string> apiKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get export link
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="exportType"></param>
        /// <param name="exportOptions"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExportLinkApiResponse"/>&gt;</returns>
        Task<IGetExportLinkApiResponse> GetExportLinkOrDefaultAsync(string exportType, ExportOptions exportOptions, Option<string> apiKey = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IExportEntitiesApiResponse"/>
    /// </summary>
    public interface IExportEntitiesApiResponse : mailslurp.Client.IApiResponse, IOk<byte[]>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetExportLinkApiResponse"/>
    /// </summary>
    public interface IGetExportLinkApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ExportLink>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ExportControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnExportEntities;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorExportEntities;

        internal void ExecuteOnExportEntities(ExportControllerApi.ExportEntitiesApiResponse apiResponse)
        {
            OnExportEntities?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExportEntities(Exception exception)
        {
            OnErrorExportEntities?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetExportLink;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetExportLink;

        internal void ExecuteOnGetExportLink(ExportControllerApi.GetExportLinkApiResponse apiResponse)
        {
            OnGetExportLink?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetExportLink(Exception exception)
        {
            OnErrorGetExportLink?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ExportControllerApi : IExportControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ExportControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ExportControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExportControllerApi(ILogger<ExportControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ExportControllerApiEvents exportControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ExportControllerApi>();
            HttpClient = httpClient;
            Events = exportControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatExportEntities(ref string exportType, ref string apiKey, ref string outputFormat, ref Option<string> filter, ref Option<string> listSeparatorToken, ref Option<bool> excludePreviouslyExported, ref Option<DateTime> createdEarliestTime, ref Option<DateTime> createdOldestTime);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="exportType"></param>
        /// <param name="apiKey"></param>
        /// <param name="outputFormat"></param>
        /// <param name="filter"></param>
        /// <param name="listSeparatorToken"></param>
        /// <returns></returns>
        private void ValidateExportEntities(string exportType, string apiKey, string outputFormat, Option<string> filter, Option<string> listSeparatorToken)
        {
            if (exportType == null)
                throw new ArgumentNullException(nameof(exportType));

            if (apiKey == null)
                throw new ArgumentNullException(nameof(apiKey));

            if (outputFormat == null)
                throw new ArgumentNullException(nameof(outputFormat));

            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (listSeparatorToken.IsSet && listSeparatorToken.Value == null)
                throw new ArgumentNullException(nameof(listSeparatorToken));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="exportType"></param>
        /// <param name="apiKey"></param>
        /// <param name="outputFormat"></param>
        /// <param name="filter"></param>
        /// <param name="listSeparatorToken"></param>
        /// <param name="excludePreviouslyExported"></param>
        /// <param name="createdEarliestTime"></param>
        /// <param name="createdOldestTime"></param>
        private void AfterExportEntitiesDefaultImplementation(IExportEntitiesApiResponse apiResponseLocalVar, string exportType, string apiKey, string outputFormat, Option<string> filter, Option<string> listSeparatorToken, Option<bool> excludePreviouslyExported, Option<DateTime> createdEarliestTime, Option<DateTime> createdOldestTime)
        {
            bool suppressDefaultLog = false;
            AfterExportEntities(ref suppressDefaultLog, apiResponseLocalVar, exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="exportType"></param>
        /// <param name="apiKey"></param>
        /// <param name="outputFormat"></param>
        /// <param name="filter"></param>
        /// <param name="listSeparatorToken"></param>
        /// <param name="excludePreviouslyExported"></param>
        /// <param name="createdEarliestTime"></param>
        /// <param name="createdOldestTime"></param>
        partial void AfterExportEntities(ref bool suppressDefaultLog, IExportEntitiesApiResponse apiResponseLocalVar, string exportType, string apiKey, string outputFormat, Option<string> filter, Option<string> listSeparatorToken, Option<bool> excludePreviouslyExported, Option<DateTime> createdEarliestTime, Option<DateTime> createdOldestTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="exportType"></param>
        /// <param name="apiKey"></param>
        /// <param name="outputFormat"></param>
        /// <param name="filter"></param>
        /// <param name="listSeparatorToken"></param>
        /// <param name="excludePreviouslyExported"></param>
        /// <param name="createdEarliestTime"></param>
        /// <param name="createdOldestTime"></param>
        private void OnErrorExportEntitiesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string exportType, string apiKey, string outputFormat, Option<string> filter, Option<string> listSeparatorToken, Option<bool> excludePreviouslyExported, Option<DateTime> createdEarliestTime, Option<DateTime> createdOldestTime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExportEntities(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="exportType"></param>
        /// <param name="apiKey"></param>
        /// <param name="outputFormat"></param>
        /// <param name="filter"></param>
        /// <param name="listSeparatorToken"></param>
        /// <param name="excludePreviouslyExported"></param>
        /// <param name="createdEarliestTime"></param>
        /// <param name="createdOldestTime"></param>
        partial void OnErrorExportEntities(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string exportType, string apiKey, string outputFormat, Option<string> filter, Option<string> listSeparatorToken, Option<bool> excludePreviouslyExported, Option<DateTime> createdEarliestTime, Option<DateTime> createdOldestTime);

        /// <summary>
        /// Export inboxes link callable via browser 
        /// </summary>
        /// <param name="exportType"></param>
        /// <param name="apiKey"></param>
        /// <param name="outputFormat"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="listSeparatorToken"> (optional)</param>
        /// <param name="excludePreviouslyExported"> (optional)</param>
        /// <param name="createdEarliestTime"> (optional)</param>
        /// <param name="createdOldestTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportEntitiesApiResponse"/>&gt;</returns>
        public async Task<IExportEntitiesApiResponse> ExportEntitiesOrDefaultAsync(string exportType, string apiKey, string outputFormat, Option<string> filter = default, Option<string> listSeparatorToken = default, Option<bool> excludePreviouslyExported = default, Option<DateTime> createdEarliestTime = default, Option<DateTime> createdOldestTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExportEntitiesAsync(exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Export inboxes link callable via browser 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportType"></param>
        /// <param name="apiKey"></param>
        /// <param name="outputFormat"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="listSeparatorToken"> (optional)</param>
        /// <param name="excludePreviouslyExported"> (optional)</param>
        /// <param name="createdEarliestTime"> (optional)</param>
        /// <param name="createdOldestTime"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportEntitiesApiResponse"/>&gt;</returns>
        public async Task<IExportEntitiesApiResponse> ExportEntitiesAsync(string exportType, string apiKey, string outputFormat, Option<string> filter = default, Option<string> listSeparatorToken = default, Option<bool> excludePreviouslyExported = default, Option<DateTime> createdEarliestTime = default, Option<DateTime> createdOldestTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateExportEntities(exportType, apiKey, outputFormat, filter, listSeparatorToken);

                FormatExportEntities(ref exportType, ref apiKey, ref outputFormat, ref filter, ref listSeparatorToken, ref excludePreviouslyExported, ref createdEarliestTime, ref createdOldestTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/export"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/export");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["exportType"] = ClientUtils.ParameterToString(exportType);
                    parseQueryStringLocalVar["apiKey"] = ClientUtils.ParameterToString(apiKey);
                    parseQueryStringLocalVar["outputFormat"] = ClientUtils.ParameterToString(outputFormat);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    if (listSeparatorToken.IsSet)
                        parseQueryStringLocalVar["listSeparatorToken"] = ClientUtils.ParameterToString(listSeparatorToken.Value);

                    if (excludePreviouslyExported.IsSet)
                        parseQueryStringLocalVar["excludePreviouslyExported"] = ClientUtils.ParameterToString(excludePreviouslyExported.Value);

                    if (createdEarliestTime.IsSet)
                        parseQueryStringLocalVar["createdEarliestTime"] = ClientUtils.ParameterToString(createdEarliestTime.Value);

                    if (createdOldestTime.IsSet)
                        parseQueryStringLocalVar["createdOldestTime"] = ClientUtils.ParameterToString(createdOldestTime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ExportEntitiesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExportEntitiesApiResponse>();

                        ExportEntitiesApiResponse apiResponseLocalVar = new ExportEntitiesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/export", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExportEntitiesDefaultImplementation(apiResponseLocalVar, exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime);

                        Events.ExecuteOnExportEntities(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExportEntitiesDefaultImplementation(e, "/export", uriBuilderLocalVar.Path, exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime);
                Events.ExecuteOnErrorExportEntities(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExportEntitiesApiResponse"/>
        /// </summary>
        public partial class ExportEntitiesApiResponse : mailslurp.Client.ApiResponse, IExportEntitiesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExportEntitiesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExportEntitiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExportEntitiesApiResponse(ILogger<ExportEntitiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public byte[] Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<byte[]>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out byte[] result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetExportLink(ref string exportType, ExportOptions exportOptions, ref Option<string> apiKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="exportType"></param>
        /// <param name="exportOptions"></param>
        /// <param name="apiKey"></param>
        /// <returns></returns>
        private void ValidateGetExportLink(string exportType, ExportOptions exportOptions, Option<string> apiKey)
        {
            if (exportType == null)
                throw new ArgumentNullException(nameof(exportType));

            if (exportOptions == null)
                throw new ArgumentNullException(nameof(exportOptions));

            if (apiKey.IsSet && apiKey.Value == null)
                throw new ArgumentNullException(nameof(apiKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="exportType"></param>
        /// <param name="exportOptions"></param>
        /// <param name="apiKey"></param>
        private void AfterGetExportLinkDefaultImplementation(IGetExportLinkApiResponse apiResponseLocalVar, string exportType, ExportOptions exportOptions, Option<string> apiKey)
        {
            bool suppressDefaultLog = false;
            AfterGetExportLink(ref suppressDefaultLog, apiResponseLocalVar, exportType, exportOptions, apiKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="exportType"></param>
        /// <param name="exportOptions"></param>
        /// <param name="apiKey"></param>
        partial void AfterGetExportLink(ref bool suppressDefaultLog, IGetExportLinkApiResponse apiResponseLocalVar, string exportType, ExportOptions exportOptions, Option<string> apiKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="exportType"></param>
        /// <param name="exportOptions"></param>
        /// <param name="apiKey"></param>
        private void OnErrorGetExportLinkDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string exportType, ExportOptions exportOptions, Option<string> apiKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetExportLink(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, exportType, exportOptions, apiKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="exportType"></param>
        /// <param name="exportOptions"></param>
        /// <param name="apiKey"></param>
        partial void OnErrorGetExportLink(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string exportType, ExportOptions exportOptions, Option<string> apiKey);

        /// <summary>
        /// Get export link 
        /// </summary>
        /// <param name="exportType"></param>
        /// <param name="exportOptions"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExportLinkApiResponse"/>&gt;</returns>
        public async Task<IGetExportLinkApiResponse> GetExportLinkOrDefaultAsync(string exportType, ExportOptions exportOptions, Option<string> apiKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetExportLinkAsync(exportType, exportOptions, apiKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get export link 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="exportType"></param>
        /// <param name="exportOptions"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExportLinkApiResponse"/>&gt;</returns>
        public async Task<IGetExportLinkApiResponse> GetExportLinkAsync(string exportType, ExportOptions exportOptions, Option<string> apiKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetExportLink(exportType, exportOptions, apiKey);

                FormatGetExportLink(ref exportType, exportOptions, ref apiKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/export"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/export");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["exportType"] = ClientUtils.ParameterToString(exportType);

                    if (apiKey.IsSet)
                        parseQueryStringLocalVar["apiKey"] = ClientUtils.ParameterToString(apiKey.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (exportOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(exportOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetExportLinkApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetExportLinkApiResponse>();

                        GetExportLinkApiResponse apiResponseLocalVar = new GetExportLinkApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/export", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetExportLinkDefaultImplementation(apiResponseLocalVar, exportType, exportOptions, apiKey);

                        Events.ExecuteOnGetExportLink(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetExportLinkDefaultImplementation(e, "/export", uriBuilderLocalVar.Path, exportType, exportOptions, apiKey);
                Events.ExecuteOnErrorGetExportLink(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetExportLinkApiResponse"/>
        /// </summary>
        public partial class GetExportLinkApiResponse : mailslurp.Client.ApiResponse, IGetExportLinkApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetExportLinkApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetExportLinkApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetExportLinkApiResponse(ILogger<GetExportLinkApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ExportLink Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ExportLink>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ExportLink result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
