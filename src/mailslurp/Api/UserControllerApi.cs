// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUserControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UserControllerApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID (optional)</param>
        /// <param name="phoneId">Optional phone ID (optional)</param>
        /// <param name="filter">Optional automation type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityAutomationsApiResponse"/>&gt;</returns>
        Task<IGetEntityAutomationsApiResponse> GetEntityAutomationsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID (optional)</param>
        /// <param name="phoneId">Optional phone ID (optional)</param>
        /// <param name="filter">Optional automation type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityAutomationsApiResponse"/>&gt;</returns>
        Task<IGetEntityAutomationsApiResponse> GetEntityAutomationsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID (optional)</param>
        /// <param name="emailId">Optional email ID (optional)</param>
        /// <param name="phoneId">Optional phone ID (optional)</param>
        /// <param name="smsId">Optional SMS ID (optional)</param>
        /// <param name="attachmentId">Optional attachment ID (optional)</param>
        /// <param name="filter">Optional type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityEventsApiResponse"/>&gt;</returns>
        Task<IGetEntityEventsApiResponse> GetEntityEventsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID (optional)</param>
        /// <param name="emailId">Optional email ID (optional)</param>
        /// <param name="phoneId">Optional phone ID (optional)</param>
        /// <param name="smsId">Optional SMS ID (optional)</param>
        /// <param name="attachmentId">Optional attachment ID (optional)</param>
        /// <param name="filter">Optional type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityEventsApiResponse"/>&gt;</returns>
        Task<IGetEntityEventsApiResponse> GetEntityEventsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="filter">Optional type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityFavoritesApiResponse"/>&gt;</returns>
        Task<IGetEntityFavoritesApiResponse> GetEntityFavoritesAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="filter">Optional type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityFavoritesApiResponse"/>&gt;</returns>
        Task<IGetEntityFavoritesApiResponse> GetEntityFavoritesOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Utility function to extract properties from JSON objects in language where this is cumbersome.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="property">JSON property name or dot separated path selector such as &#x60;a.b.c&#x60;</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonPropertyAsStringApiResponse"/>&gt;</returns>
        Task<IGetJsonPropertyAsStringApiResponse> GetJsonPropertyAsStringAsync(string property, Object body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Utility function to extract properties from JSON objects in language where this is cumbersome.
        /// </remarks>
        /// <param name="property">JSON property name or dot separated path selector such as &#x60;a.b.c&#x60;</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonPropertyAsStringApiResponse"/>&gt;</returns>
        Task<IGetJsonPropertyAsStringApiResponse> GetJsonPropertyAsStringOrDefaultAsync(string property, Object body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get account information for your user
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoApiResponse"/>&gt;</returns>
        Task<IGetUserInfoApiResponse> GetUserInfoAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get account information for your user
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoApiResponse"/>&gt;</returns>
        Task<IGetUserInfoApiResponse> GetUserInfoOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetEntityAutomationsApiResponse"/>
    /// </summary>
    public interface IGetEntityAutomationsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageEntityAutomationItems>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetEntityEventsApiResponse"/>
    /// </summary>
    public interface IGetEntityEventsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageEntityEventItems>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetEntityFavoritesApiResponse"/>
    /// </summary>
    public interface IGetEntityFavoritesApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageEntityFavouriteItems>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetJsonPropertyAsStringApiResponse"/>
    /// </summary>
    public interface IGetJsonPropertyAsStringApiResponse : mailslurp.Client.IApiResponse, IOk<string>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserInfoApiResponse"/>
    /// </summary>
    public interface IGetUserInfoApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.UserInfoDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UserControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetEntityAutomations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetEntityAutomations;

        internal void ExecuteOnGetEntityAutomations(UserControllerApi.GetEntityAutomationsApiResponse apiResponse)
        {
            OnGetEntityAutomations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEntityAutomations(Exception exception)
        {
            OnErrorGetEntityAutomations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetEntityEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetEntityEvents;

        internal void ExecuteOnGetEntityEvents(UserControllerApi.GetEntityEventsApiResponse apiResponse)
        {
            OnGetEntityEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEntityEvents(Exception exception)
        {
            OnErrorGetEntityEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetEntityFavorites;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetEntityFavorites;

        internal void ExecuteOnGetEntityFavorites(UserControllerApi.GetEntityFavoritesApiResponse apiResponse)
        {
            OnGetEntityFavorites?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEntityFavorites(Exception exception)
        {
            OnErrorGetEntityFavorites?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetJsonPropertyAsString;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetJsonPropertyAsString;

        internal void ExecuteOnGetJsonPropertyAsString(UserControllerApi.GetJsonPropertyAsStringApiResponse apiResponse)
        {
            OnGetJsonPropertyAsString?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetJsonPropertyAsString(Exception exception)
        {
            OnErrorGetJsonPropertyAsString?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetUserInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetUserInfo;

        internal void ExecuteOnGetUserInfo(UserControllerApi.GetUserInfoApiResponse apiResponse)
        {
            OnGetUserInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserInfo(Exception exception)
        {
            OnErrorGetUserInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UserControllerApi : IUserControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UserControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UserControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserControllerApi(ILogger<UserControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UserControllerApiEvents userControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UserControllerApi>();
            HttpClient = httpClient;
            Events = userControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetEntityAutomations(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<Guid> inboxId, ref Option<Guid> phoneId, ref Option<string> filter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="filter"></param>
        /// <returns></returns>
        private void ValidateGetEntityAutomations(Option<string> sort, Option<string> filter)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="filter"></param>
        private void AfterGetEntityAutomationsDefaultImplementation(IGetEntityAutomationsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId, Option<Guid> phoneId, Option<string> filter)
        {
            bool suppressDefaultLog = false;
            AfterGetEntityAutomations(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, since, before, inboxId, phoneId, filter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="filter"></param>
        partial void AfterGetEntityAutomations(ref bool suppressDefaultLog, IGetEntityAutomationsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId, Option<Guid> phoneId, Option<string> filter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="filter"></param>
        private void OnErrorGetEntityAutomationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId, Option<Guid> phoneId, Option<string> filter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEntityAutomations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, since, before, inboxId, phoneId, filter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="filter"></param>
        partial void OnErrorGetEntityAutomations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId, Option<Guid> phoneId, Option<string> filter);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID (optional)</param>
        /// <param name="phoneId">Optional phone ID (optional)</param>
        /// <param name="filter">Optional automation type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityAutomationsApiResponse"/>&gt;</returns>
        public async Task<IGetEntityAutomationsApiResponse> GetEntityAutomationsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEntityAutomationsAsync(page, size, sort, since, before, inboxId, phoneId, filter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID (optional)</param>
        /// <param name="phoneId">Optional phone ID (optional)</param>
        /// <param name="filter">Optional automation type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityAutomationsApiResponse"/>&gt;</returns>
        public async Task<IGetEntityAutomationsApiResponse> GetEntityAutomationsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEntityAutomations(sort, filter);

                FormatGetEntityAutomations(ref page, ref size, ref sort, ref since, ref before, ref inboxId, ref phoneId, ref filter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user/automations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user/automations");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (phoneId.IsSet)
                        parseQueryStringLocalVar["phoneId"] = ClientUtils.ParameterToString(phoneId.Value);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetEntityAutomationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEntityAutomationsApiResponse>();

                        GetEntityAutomationsApiResponse apiResponseLocalVar = new GetEntityAutomationsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/automations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEntityAutomationsDefaultImplementation(apiResponseLocalVar, page, size, sort, since, before, inboxId, phoneId, filter);

                        Events.ExecuteOnGetEntityAutomations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEntityAutomationsDefaultImplementation(e, "/user/automations", uriBuilderLocalVar.Path, page, size, sort, since, before, inboxId, phoneId, filter);
                Events.ExecuteOnErrorGetEntityAutomations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEntityAutomationsApiResponse"/>
        /// </summary>
        public partial class GetEntityAutomationsApiResponse : mailslurp.Client.ApiResponse, IGetEntityAutomationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEntityAutomationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEntityAutomationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEntityAutomationsApiResponse(ILogger<GetEntityAutomationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageEntityAutomationItems Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageEntityAutomationItems>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageEntityAutomationItems result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEntityEvents(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<Guid> inboxId, ref Option<Guid> emailId, ref Option<Guid> phoneId, ref Option<Guid> smsId, ref Option<Guid> attachmentId, ref Option<string> filter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="filter"></param>
        /// <returns></returns>
        private void ValidateGetEntityEvents(Option<string> sort, Option<string> filter)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="filter"></param>
        private void AfterGetEntityEventsDefaultImplementation(IGetEntityEventsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> phoneId, Option<Guid> smsId, Option<Guid> attachmentId, Option<string> filter)
        {
            bool suppressDefaultLog = false;
            AfterGetEntityEvents(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="filter"></param>
        partial void AfterGetEntityEvents(ref bool suppressDefaultLog, IGetEntityEventsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> phoneId, Option<Guid> smsId, Option<Guid> attachmentId, Option<string> filter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="filter"></param>
        private void OnErrorGetEntityEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> phoneId, Option<Guid> smsId, Option<Guid> attachmentId, Option<string> filter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEntityEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="filter"></param>
        partial void OnErrorGetEntityEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> phoneId, Option<Guid> smsId, Option<Guid> attachmentId, Option<string> filter);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID (optional)</param>
        /// <param name="emailId">Optional email ID (optional)</param>
        /// <param name="phoneId">Optional phone ID (optional)</param>
        /// <param name="smsId">Optional SMS ID (optional)</param>
        /// <param name="attachmentId">Optional attachment ID (optional)</param>
        /// <param name="filter">Optional type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityEventsApiResponse"/>&gt;</returns>
        public async Task<IGetEntityEventsApiResponse> GetEntityEventsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEntityEventsAsync(page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="inboxId">Optional inbox ID (optional)</param>
        /// <param name="emailId">Optional email ID (optional)</param>
        /// <param name="phoneId">Optional phone ID (optional)</param>
        /// <param name="smsId">Optional SMS ID (optional)</param>
        /// <param name="attachmentId">Optional attachment ID (optional)</param>
        /// <param name="filter">Optional type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityEventsApiResponse"/>&gt;</returns>
        public async Task<IGetEntityEventsApiResponse> GetEntityEventsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEntityEvents(sort, filter);

                FormatGetEntityEvents(ref page, ref size, ref sort, ref since, ref before, ref inboxId, ref emailId, ref phoneId, ref smsId, ref attachmentId, ref filter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user/events"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user/events");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (emailId.IsSet)
                        parseQueryStringLocalVar["emailId"] = ClientUtils.ParameterToString(emailId.Value);

                    if (phoneId.IsSet)
                        parseQueryStringLocalVar["phoneId"] = ClientUtils.ParameterToString(phoneId.Value);

                    if (smsId.IsSet)
                        parseQueryStringLocalVar["smsId"] = ClientUtils.ParameterToString(smsId.Value);

                    if (attachmentId.IsSet)
                        parseQueryStringLocalVar["attachmentId"] = ClientUtils.ParameterToString(attachmentId.Value);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetEntityEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEntityEventsApiResponse>();

                        GetEntityEventsApiResponse apiResponseLocalVar = new GetEntityEventsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEntityEventsDefaultImplementation(apiResponseLocalVar, page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter);

                        Events.ExecuteOnGetEntityEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEntityEventsDefaultImplementation(e, "/user/events", uriBuilderLocalVar.Path, page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter);
                Events.ExecuteOnErrorGetEntityEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEntityEventsApiResponse"/>
        /// </summary>
        public partial class GetEntityEventsApiResponse : mailslurp.Client.ApiResponse, IGetEntityEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEntityEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEntityEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEntityEventsApiResponse(ILogger<GetEntityEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageEntityEventItems Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageEntityEventItems>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageEntityEventItems result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEntityFavorites(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> filter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="filter"></param>
        /// <returns></returns>
        private void ValidateGetEntityFavorites(Option<string> sort, Option<string> filter)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="filter"></param>
        private void AfterGetEntityFavoritesDefaultImplementation(IGetEntityFavoritesApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> filter)
        {
            bool suppressDefaultLog = false;
            AfterGetEntityFavorites(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, since, before, filter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="filter"></param>
        partial void AfterGetEntityFavorites(ref bool suppressDefaultLog, IGetEntityFavoritesApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> filter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="filter"></param>
        private void OnErrorGetEntityFavoritesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> filter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEntityFavorites(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, since, before, filter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="filter"></param>
        partial void OnErrorGetEntityFavorites(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> filter);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="filter">Optional type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityFavoritesApiResponse"/>&gt;</returns>
        public async Task<IGetEntityFavoritesApiResponse> GetEntityFavoritesOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEntityFavoritesAsync(page, size, sort, since, before, filter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index (optional, default to 0)</param>
        /// <param name="size">Optional page size (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="filter">Optional type filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEntityFavoritesApiResponse"/>&gt;</returns>
        public async Task<IGetEntityFavoritesApiResponse> GetEntityFavoritesAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> filter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEntityFavorites(sort, filter);

                FormatGetEntityFavorites(ref page, ref size, ref sort, ref since, ref before, ref filter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user/favorites"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user/favorites");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetEntityFavoritesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEntityFavoritesApiResponse>();

                        GetEntityFavoritesApiResponse apiResponseLocalVar = new GetEntityFavoritesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/favorites", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEntityFavoritesDefaultImplementation(apiResponseLocalVar, page, size, sort, since, before, filter);

                        Events.ExecuteOnGetEntityFavorites(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEntityFavoritesDefaultImplementation(e, "/user/favorites", uriBuilderLocalVar.Path, page, size, sort, since, before, filter);
                Events.ExecuteOnErrorGetEntityFavorites(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEntityFavoritesApiResponse"/>
        /// </summary>
        public partial class GetEntityFavoritesApiResponse : mailslurp.Client.ApiResponse, IGetEntityFavoritesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEntityFavoritesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEntityFavoritesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEntityFavoritesApiResponse(ILogger<GetEntityFavoritesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageEntityFavouriteItems Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageEntityFavouriteItems>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageEntityFavouriteItems result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetJsonPropertyAsString(ref string property, ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="property"></param>
        /// <returns></returns>
        private void ValidateGetJsonPropertyAsString(string property)
        {
            if (property == null)
                throw new ArgumentNullException(nameof(property));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="property"></param>
        /// <param name="body"></param>
        private void AfterGetJsonPropertyAsStringDefaultImplementation(IGetJsonPropertyAsStringApiResponse apiResponseLocalVar, string property, Object body)
        {
            bool suppressDefaultLog = false;
            AfterGetJsonPropertyAsString(ref suppressDefaultLog, apiResponseLocalVar, property, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="property"></param>
        /// <param name="body"></param>
        partial void AfterGetJsonPropertyAsString(ref bool suppressDefaultLog, IGetJsonPropertyAsStringApiResponse apiResponseLocalVar, string property, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="property"></param>
        /// <param name="body"></param>
        private void OnErrorGetJsonPropertyAsStringDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string property, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetJsonPropertyAsString(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, property, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="property"></param>
        /// <param name="body"></param>
        partial void OnErrorGetJsonPropertyAsString(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string property, Object body);

        /// <summary>
        ///  Utility function to extract properties from JSON objects in language where this is cumbersome.
        /// </summary>
        /// <param name="property">JSON property name or dot separated path selector such as &#x60;a.b.c&#x60;</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonPropertyAsStringApiResponse"/>&gt;</returns>
        public async Task<IGetJsonPropertyAsStringApiResponse> GetJsonPropertyAsStringOrDefaultAsync(string property, Object body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetJsonPropertyAsStringAsync(property, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Utility function to extract properties from JSON objects in language where this is cumbersome.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="property">JSON property name or dot separated path selector such as &#x60;a.b.c&#x60;</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonPropertyAsStringApiResponse"/>&gt;</returns>
        public async Task<IGetJsonPropertyAsStringApiResponse> GetJsonPropertyAsStringAsync(string property, Object body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetJsonPropertyAsString(property);

                FormatGetJsonPropertyAsString(ref property, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user/json/pluck"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user/json/pluck");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["property"] = ClientUtils.ParameterToString(property);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetJsonPropertyAsStringApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetJsonPropertyAsStringApiResponse>();

                        GetJsonPropertyAsStringApiResponse apiResponseLocalVar = new GetJsonPropertyAsStringApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/json/pluck", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetJsonPropertyAsStringDefaultImplementation(apiResponseLocalVar, property, body);

                        Events.ExecuteOnGetJsonPropertyAsString(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetJsonPropertyAsStringDefaultImplementation(e, "/user/json/pluck", uriBuilderLocalVar.Path, property, body);
                Events.ExecuteOnErrorGetJsonPropertyAsString(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetJsonPropertyAsStringApiResponse"/>
        /// </summary>
        public partial class GetJsonPropertyAsStringApiResponse : mailslurp.Client.ApiResponse, IGetJsonPropertyAsStringApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetJsonPropertyAsStringApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetJsonPropertyAsStringApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetJsonPropertyAsStringApiResponse(ILogger<GetJsonPropertyAsStringApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out string result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserInfoDefaultImplementation(IGetUserInfoApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserInfo(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserInfo(ref bool suppressDefaultLog, IGetUserInfoApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUserInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUserInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Get account information for your user
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoApiResponse"/>&gt;</returns>
        public async Task<IGetUserInfoApiResponse> GetUserInfoOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserInfoAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get account information for your user
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoApiResponse"/>&gt;</returns>
        public async Task<IGetUserInfoApiResponse> GetUserInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/user/info"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/user/info");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetUserInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserInfoApiResponse>();

                        GetUserInfoApiResponse apiResponseLocalVar = new GetUserInfoApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/user/info", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserInfoDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserInfoDefaultImplementation(e, "/user/info", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserInfoApiResponse"/>
        /// </summary>
        public partial class GetUserInfoApiResponse : mailslurp.Client.ApiResponse, IGetUserInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserInfoApiResponse(ILogger<GetUserInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.UserInfoDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.UserInfoDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.UserInfoDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
