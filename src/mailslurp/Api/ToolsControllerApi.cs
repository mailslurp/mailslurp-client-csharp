// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IToolsControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ToolsControllerApiEvents Events { get; }

        /// <summary>
        /// Check email client support for email HTML and CSS features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckEmailFeaturesClientSupportApiResponse"/>&gt;</returns>
        Task<ICheckEmailFeaturesClientSupportApiResponse> CheckEmailFeaturesClientSupportAsync(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Check email client support for email HTML and CSS features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckEmailFeaturesClientSupportApiResponse"/>&gt;</returns>
        Task<ICheckEmailFeaturesClientSupportApiResponse> CheckEmailFeaturesClientSupportOrDefaultAsync(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new email address using the fake email domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewFakeEmailAddressApiResponse"/>&gt;</returns>
        Task<ICreateNewFakeEmailAddressApiResponse> CreateNewFakeEmailAddressAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new email address using the fake email domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewFakeEmailAddressApiResponse"/>&gt;</returns>
        Task<ICreateNewFakeEmailAddressApiResponse> CreateNewFakeEmailAddressOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a fake email address using the fake email domains
        /// </summary>
        /// <remarks>
        /// Delete a fake email address using the fake email domains
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNewFakeEmailAddressApiResponse"/>&gt;</returns>
        Task<IDeleteNewFakeEmailAddressApiResponse> DeleteNewFakeEmailAddressAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a fake email address using the fake email domains
        /// </summary>
        /// <remarks>
        /// Delete a fake email address using the fake email domains
        /// </remarks>
        /// <param name="emailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNewFakeEmailAddressApiResponse"/>&gt;</returns>
        Task<IDeleteNewFakeEmailAddressApiResponse> DeleteNewFakeEmailAddressOrDefaultAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a BIMI record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateBimiRecordApiResponse"/>&gt;</returns>
        Task<IGenerateBimiRecordApiResponse> GenerateBimiRecordAsync(GenerateBimiRecordOptions generateBimiRecordOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a BIMI record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateBimiRecordApiResponse"/>&gt;</returns>
        Task<IGenerateBimiRecordApiResponse> GenerateBimiRecordOrDefaultAsync(GenerateBimiRecordOptions generateBimiRecordOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a DMARC record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateDmarcRecordApiResponse"/>&gt;</returns>
        Task<IGenerateDmarcRecordApiResponse> GenerateDmarcRecordAsync(GenerateDmarcRecordOptions generateDmarcRecordOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a DMARC record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateDmarcRecordApiResponse"/>&gt;</returns>
        Task<IGenerateDmarcRecordApiResponse> GenerateDmarcRecordOrDefaultAsync(GenerateDmarcRecordOptions generateDmarcRecordOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateMtaStsRecordApiResponse"/>&gt;</returns>
        Task<IGenerateMtaStsRecordApiResponse> GenerateMtaStsRecordAsync(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateMtaStsRecordApiResponse"/>&gt;</returns>
        Task<IGenerateMtaStsRecordApiResponse> GenerateMtaStsRecordOrDefaultAsync(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateTlsReportingRecordApiResponse"/>&gt;</returns>
        Task<IGenerateTlsReportingRecordApiResponse> GenerateTlsReportingRecordAsync(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateTlsReportingRecordApiResponse"/>&gt;</returns>
        Task<IGenerateTlsReportingRecordApiResponse> GenerateTlsReportingRecordOrDefaultAsync(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailByEmailAddressApiResponse"/>&gt;</returns>
        Task<IGetFakeEmailByEmailAddressApiResponse> GetFakeEmailByEmailAddressAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="emailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailByEmailAddressApiResponse"/>&gt;</returns>
        Task<IGetFakeEmailByEmailAddressApiResponse> GetFakeEmailByEmailAddressOrDefaultAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a fake email by its ID
        /// </summary>
        /// <remarks>
        /// Get a fake email by its ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailByIdApiResponse"/>&gt;</returns>
        Task<IGetFakeEmailByIdApiResponse> GetFakeEmailByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a fake email by its ID
        /// </summary>
        /// <remarks>
        /// Get a fake email by its ID
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailByIdApiResponse"/>&gt;</returns>
        Task<IGetFakeEmailByIdApiResponse> GetFakeEmailByIdOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get raw fake email content
        /// </summary>
        /// <remarks>
        /// Retrieve the raw content of a fake email by its ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailRawApiResponse"/>&gt;</returns>
        Task<IGetFakeEmailRawApiResponse> GetFakeEmailRawAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get raw fake email content
        /// </summary>
        /// <remarks>
        /// Retrieve the raw content of a fake email by its ID
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailRawApiResponse"/>&gt;</returns>
        Task<IGetFakeEmailRawApiResponse> GetFakeEmailRawOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get fake emails for an address
        /// </summary>
        /// <remarks>
        /// Get fake emails for an address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailsForAddressApiResponse"/>&gt;</returns>
        Task<IGetFakeEmailsForAddressApiResponse> GetFakeEmailsForAddressAsync(string emailAddress, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get fake emails for an address
        /// </summary>
        /// <remarks>
        /// Get fake emails for an address
        /// </remarks>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailsForAddressApiResponse"/>&gt;</returns>
        Task<IGetFakeEmailsForAddressApiResponse> GetFakeEmailsForAddressOrDefaultAsync(string emailAddress, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup a BIMI record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupBimiDomainApiResponse"/>&gt;</returns>
        Task<ILookupBimiDomainApiResponse> LookupBimiDomainAsync(LookupBimiDomainOptions lookupBimiDomainOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup a BIMI record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupBimiDomainApiResponse"/>&gt;</returns>
        Task<ILookupBimiDomainApiResponse> LookupBimiDomainOrDefaultAsync(LookupBimiDomainOptions lookupBimiDomainOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup a DMARC record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupDmarcDomainApiResponse"/>&gt;</returns>
        Task<ILookupDmarcDomainApiResponse> LookupDmarcDomainAsync(LookupDmarcDomainOptions lookupDmarcDomainOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup a DMARC record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupDmarcDomainApiResponse"/>&gt;</returns>
        Task<ILookupDmarcDomainApiResponse> LookupDmarcDomainOrDefaultAsync(LookupDmarcDomainOptions lookupDmarcDomainOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup a MTA-STS domain policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupMtaStsDomainApiResponse"/>&gt;</returns>
        Task<ILookupMtaStsDomainApiResponse> LookupMtaStsDomainAsync(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup a MTA-STS domain policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupMtaStsDomainApiResponse"/>&gt;</returns>
        Task<ILookupMtaStsDomainApiResponse> LookupMtaStsDomainOrDefaultAsync(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup a TLS reporting domain policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupTlsReportingDomainApiResponse"/>&gt;</returns>
        Task<ILookupTlsReportingDomainApiResponse> LookupTlsReportingDomainAsync(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup a TLS reporting domain policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupTlsReportingDomainApiResponse"/>&gt;</returns>
        Task<ILookupTlsReportingDomainApiResponse> LookupTlsReportingDomainOrDefaultAsync(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICheckEmailFeaturesClientSupportApiResponse"/>
    /// </summary>
    public interface ICheckEmailFeaturesClientSupportApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.CheckEmailFeaturesClientSupportResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICreateNewFakeEmailAddressApiResponse"/>
    /// </summary>
    public interface ICreateNewFakeEmailAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.NewFakeEmailAddressResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteNewFakeEmailAddressApiResponse"/>
    /// </summary>
    public interface IDeleteNewFakeEmailAddressApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateBimiRecordApiResponse"/>
    /// </summary>
    public interface IGenerateBimiRecordApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.GenerateBimiRecordResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateDmarcRecordApiResponse"/>
    /// </summary>
    public interface IGenerateDmarcRecordApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.GenerateDmarcRecordResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateMtaStsRecordApiResponse"/>
    /// </summary>
    public interface IGenerateMtaStsRecordApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.GenerateMtaStsRecordResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateTlsReportingRecordApiResponse"/>
    /// </summary>
    public interface IGenerateTlsReportingRecordApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.GenerateTlsReportingRecordResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetFakeEmailByEmailAddressApiResponse"/>
    /// </summary>
    public interface IGetFakeEmailByEmailAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.FakeEmailResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetFakeEmailByIdApiResponse"/>
    /// </summary>
    public interface IGetFakeEmailByIdApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.FakeEmailResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetFakeEmailRawApiResponse"/>
    /// </summary>
    public interface IGetFakeEmailRawApiResponse : mailslurp.Client.IApiResponse, IOk<string>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetFakeEmailsForAddressApiResponse"/>
    /// </summary>
    public interface IGetFakeEmailsForAddressApiResponse : mailslurp.Client.IApiResponse, IOk<List<FakeEmailPreview>>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ILookupBimiDomainApiResponse"/>
    /// </summary>
    public interface ILookupBimiDomainApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.LookupBimiDomainResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ILookupDmarcDomainApiResponse"/>
    /// </summary>
    public interface ILookupDmarcDomainApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.LookupDmarcDomainResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ILookupMtaStsDomainApiResponse"/>
    /// </summary>
    public interface ILookupMtaStsDomainApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.LookupMtaStsDomainResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ILookupTlsReportingDomainApiResponse"/>
    /// </summary>
    public interface ILookupTlsReportingDomainApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.LookupTlsReportingDomainResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ToolsControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCheckEmailFeaturesClientSupport;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCheckEmailFeaturesClientSupport;

        internal void ExecuteOnCheckEmailFeaturesClientSupport(ToolsControllerApi.CheckEmailFeaturesClientSupportApiResponse apiResponse)
        {
            OnCheckEmailFeaturesClientSupport?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCheckEmailFeaturesClientSupport(Exception exception)
        {
            OnErrorCheckEmailFeaturesClientSupport?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateNewFakeEmailAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateNewFakeEmailAddress;

        internal void ExecuteOnCreateNewFakeEmailAddress(ToolsControllerApi.CreateNewFakeEmailAddressApiResponse apiResponse)
        {
            OnCreateNewFakeEmailAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNewFakeEmailAddress(Exception exception)
        {
            OnErrorCreateNewFakeEmailAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteNewFakeEmailAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteNewFakeEmailAddress;

        internal void ExecuteOnDeleteNewFakeEmailAddress(ToolsControllerApi.DeleteNewFakeEmailAddressApiResponse apiResponse)
        {
            OnDeleteNewFakeEmailAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteNewFakeEmailAddress(Exception exception)
        {
            OnErrorDeleteNewFakeEmailAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGenerateBimiRecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGenerateBimiRecord;

        internal void ExecuteOnGenerateBimiRecord(ToolsControllerApi.GenerateBimiRecordApiResponse apiResponse)
        {
            OnGenerateBimiRecord?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateBimiRecord(Exception exception)
        {
            OnErrorGenerateBimiRecord?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGenerateDmarcRecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGenerateDmarcRecord;

        internal void ExecuteOnGenerateDmarcRecord(ToolsControllerApi.GenerateDmarcRecordApiResponse apiResponse)
        {
            OnGenerateDmarcRecord?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateDmarcRecord(Exception exception)
        {
            OnErrorGenerateDmarcRecord?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGenerateMtaStsRecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGenerateMtaStsRecord;

        internal void ExecuteOnGenerateMtaStsRecord(ToolsControllerApi.GenerateMtaStsRecordApiResponse apiResponse)
        {
            OnGenerateMtaStsRecord?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateMtaStsRecord(Exception exception)
        {
            OnErrorGenerateMtaStsRecord?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGenerateTlsReportingRecord;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGenerateTlsReportingRecord;

        internal void ExecuteOnGenerateTlsReportingRecord(ToolsControllerApi.GenerateTlsReportingRecordApiResponse apiResponse)
        {
            OnGenerateTlsReportingRecord?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateTlsReportingRecord(Exception exception)
        {
            OnErrorGenerateTlsReportingRecord?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetFakeEmailByEmailAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetFakeEmailByEmailAddress;

        internal void ExecuteOnGetFakeEmailByEmailAddress(ToolsControllerApi.GetFakeEmailByEmailAddressApiResponse apiResponse)
        {
            OnGetFakeEmailByEmailAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFakeEmailByEmailAddress(Exception exception)
        {
            OnErrorGetFakeEmailByEmailAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetFakeEmailById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetFakeEmailById;

        internal void ExecuteOnGetFakeEmailById(ToolsControllerApi.GetFakeEmailByIdApiResponse apiResponse)
        {
            OnGetFakeEmailById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFakeEmailById(Exception exception)
        {
            OnErrorGetFakeEmailById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetFakeEmailRaw;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetFakeEmailRaw;

        internal void ExecuteOnGetFakeEmailRaw(ToolsControllerApi.GetFakeEmailRawApiResponse apiResponse)
        {
            OnGetFakeEmailRaw?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFakeEmailRaw(Exception exception)
        {
            OnErrorGetFakeEmailRaw?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetFakeEmailsForAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetFakeEmailsForAddress;

        internal void ExecuteOnGetFakeEmailsForAddress(ToolsControllerApi.GetFakeEmailsForAddressApiResponse apiResponse)
        {
            OnGetFakeEmailsForAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFakeEmailsForAddress(Exception exception)
        {
            OnErrorGetFakeEmailsForAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnLookupBimiDomain;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorLookupBimiDomain;

        internal void ExecuteOnLookupBimiDomain(ToolsControllerApi.LookupBimiDomainApiResponse apiResponse)
        {
            OnLookupBimiDomain?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLookupBimiDomain(Exception exception)
        {
            OnErrorLookupBimiDomain?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnLookupDmarcDomain;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorLookupDmarcDomain;

        internal void ExecuteOnLookupDmarcDomain(ToolsControllerApi.LookupDmarcDomainApiResponse apiResponse)
        {
            OnLookupDmarcDomain?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLookupDmarcDomain(Exception exception)
        {
            OnErrorLookupDmarcDomain?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnLookupMtaStsDomain;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorLookupMtaStsDomain;

        internal void ExecuteOnLookupMtaStsDomain(ToolsControllerApi.LookupMtaStsDomainApiResponse apiResponse)
        {
            OnLookupMtaStsDomain?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLookupMtaStsDomain(Exception exception)
        {
            OnErrorLookupMtaStsDomain?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnLookupTlsReportingDomain;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorLookupTlsReportingDomain;

        internal void ExecuteOnLookupTlsReportingDomain(ToolsControllerApi.LookupTlsReportingDomainApiResponse apiResponse)
        {
            OnLookupTlsReportingDomain?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLookupTlsReportingDomain(Exception exception)
        {
            OnErrorLookupTlsReportingDomain?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ToolsControllerApi : IToolsControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ToolsControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ToolsControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolsControllerApi(ILogger<ToolsControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ToolsControllerApiEvents toolsControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ToolsControllerApi>();
            HttpClient = httpClient;
            Events = toolsControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCheckEmailFeaturesClientSupport(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <returns></returns>
        private void ValidateCheckEmailFeaturesClientSupport(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions)
        {
            if (checkEmailFeaturesClientSupportOptions == null)
                throw new ArgumentNullException(nameof(checkEmailFeaturesClientSupportOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        private void AfterCheckEmailFeaturesClientSupportDefaultImplementation(ICheckEmailFeaturesClientSupportApiResponse apiResponseLocalVar, CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions)
        {
            bool suppressDefaultLog = false;
            AfterCheckEmailFeaturesClientSupport(ref suppressDefaultLog, apiResponseLocalVar, checkEmailFeaturesClientSupportOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        partial void AfterCheckEmailFeaturesClientSupport(ref bool suppressDefaultLog, ICheckEmailFeaturesClientSupportApiResponse apiResponseLocalVar, CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        private void OnErrorCheckEmailFeaturesClientSupportDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCheckEmailFeaturesClientSupport(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, checkEmailFeaturesClientSupportOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        partial void OnErrorCheckEmailFeaturesClientSupport(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions);

        /// <summary>
        /// Check email client support for email HTML and CSS features 
        /// </summary>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckEmailFeaturesClientSupportApiResponse"/>&gt;</returns>
        public async Task<ICheckEmailFeaturesClientSupportApiResponse> CheckEmailFeaturesClientSupportOrDefaultAsync(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CheckEmailFeaturesClientSupportAsync(checkEmailFeaturesClientSupportOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Check email client support for email HTML and CSS features 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICheckEmailFeaturesClientSupportApiResponse"/>&gt;</returns>
        public async Task<ICheckEmailFeaturesClientSupportApiResponse> CheckEmailFeaturesClientSupportAsync(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCheckEmailFeaturesClientSupport(checkEmailFeaturesClientSupportOptions);

                FormatCheckEmailFeaturesClientSupport(checkEmailFeaturesClientSupportOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/check-email-features-client-support"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/check-email-features-client-support");

                    httpRequestMessageLocalVar.Content = (checkEmailFeaturesClientSupportOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(checkEmailFeaturesClientSupportOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CheckEmailFeaturesClientSupportApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CheckEmailFeaturesClientSupportApiResponse>();

                        CheckEmailFeaturesClientSupportApiResponse apiResponseLocalVar = new CheckEmailFeaturesClientSupportApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/check-email-features-client-support", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCheckEmailFeaturesClientSupportDefaultImplementation(apiResponseLocalVar, checkEmailFeaturesClientSupportOptions);

                        Events.ExecuteOnCheckEmailFeaturesClientSupport(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCheckEmailFeaturesClientSupportDefaultImplementation(e, "/tools/check-email-features-client-support", uriBuilderLocalVar.Path, checkEmailFeaturesClientSupportOptions);
                Events.ExecuteOnErrorCheckEmailFeaturesClientSupport(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CheckEmailFeaturesClientSupportApiResponse"/>
        /// </summary>
        public partial class CheckEmailFeaturesClientSupportApiResponse : mailslurp.Client.ApiResponse, ICheckEmailFeaturesClientSupportApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CheckEmailFeaturesClientSupportApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CheckEmailFeaturesClientSupportApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CheckEmailFeaturesClientSupportApiResponse(ILogger<CheckEmailFeaturesClientSupportApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.CheckEmailFeaturesClientSupportResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.CheckEmailFeaturesClientSupportResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.CheckEmailFeaturesClientSupportResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterCreateNewFakeEmailAddressDefaultImplementation(ICreateNewFakeEmailAddressApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterCreateNewFakeEmailAddress(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterCreateNewFakeEmailAddress(ref bool suppressDefaultLog, ICreateNewFakeEmailAddressApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorCreateNewFakeEmailAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateNewFakeEmailAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorCreateNewFakeEmailAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Create a new email address using the fake email domains 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewFakeEmailAddressApiResponse"/>&gt;</returns>
        public async Task<ICreateNewFakeEmailAddressApiResponse> CreateNewFakeEmailAddressOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNewFakeEmailAddressAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new email address using the fake email domains 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewFakeEmailAddressApiResponse"/>&gt;</returns>
        public async Task<ICreateNewFakeEmailAddressApiResponse> CreateNewFakeEmailAddressAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/fake-email"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/fake-email");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateNewFakeEmailAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNewFakeEmailAddressApiResponse>();

                        CreateNewFakeEmailAddressApiResponse apiResponseLocalVar = new CreateNewFakeEmailAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/fake-email", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNewFakeEmailAddressDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnCreateNewFakeEmailAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNewFakeEmailAddressDefaultImplementation(e, "/tools/fake-email", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorCreateNewFakeEmailAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNewFakeEmailAddressApiResponse"/>
        /// </summary>
        public partial class CreateNewFakeEmailAddressApiResponse : mailslurp.Client.ApiResponse, ICreateNewFakeEmailAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNewFakeEmailAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNewFakeEmailAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNewFakeEmailAddressApiResponse(ILogger<CreateNewFakeEmailAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.NewFakeEmailAddressResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.NewFakeEmailAddressResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.NewFakeEmailAddressResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteNewFakeEmailAddress(ref string emailAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <returns></returns>
        private void ValidateDeleteNewFakeEmailAddress(string emailAddress)
        {
            if (emailAddress == null)
                throw new ArgumentNullException(nameof(emailAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        private void AfterDeleteNewFakeEmailAddressDefaultImplementation(IDeleteNewFakeEmailAddressApiResponse apiResponseLocalVar, string emailAddress)
        {
            bool suppressDefaultLog = false;
            AfterDeleteNewFakeEmailAddress(ref suppressDefaultLog, apiResponseLocalVar, emailAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        partial void AfterDeleteNewFakeEmailAddress(ref bool suppressDefaultLog, IDeleteNewFakeEmailAddressApiResponse apiResponseLocalVar, string emailAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        private void OnErrorDeleteNewFakeEmailAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteNewFakeEmailAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, emailAddress);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        partial void OnErrorDeleteNewFakeEmailAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress);

        /// <summary>
        /// Delete a fake email address using the fake email domains Delete a fake email address using the fake email domains
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNewFakeEmailAddressApiResponse"/>&gt;</returns>
        public async Task<IDeleteNewFakeEmailAddressApiResponse> DeleteNewFakeEmailAddressOrDefaultAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteNewFakeEmailAddressAsync(emailAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a fake email address using the fake email domains Delete a fake email address using the fake email domains
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteNewFakeEmailAddressApiResponse"/>&gt;</returns>
        public async Task<IDeleteNewFakeEmailAddressApiResponse> DeleteNewFakeEmailAddressAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteNewFakeEmailAddress(emailAddress);

                FormatDeleteNewFakeEmailAddress(ref emailAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/fake-email"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/fake-email");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["emailAddress"] = ClientUtils.ParameterToString(emailAddress);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteNewFakeEmailAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteNewFakeEmailAddressApiResponse>();

                        DeleteNewFakeEmailAddressApiResponse apiResponseLocalVar = new DeleteNewFakeEmailAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/fake-email", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteNewFakeEmailAddressDefaultImplementation(apiResponseLocalVar, emailAddress);

                        Events.ExecuteOnDeleteNewFakeEmailAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteNewFakeEmailAddressDefaultImplementation(e, "/tools/fake-email", uriBuilderLocalVar.Path, emailAddress);
                Events.ExecuteOnErrorDeleteNewFakeEmailAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteNewFakeEmailAddressApiResponse"/>
        /// </summary>
        public partial class DeleteNewFakeEmailAddressApiResponse : mailslurp.Client.ApiResponse, IDeleteNewFakeEmailAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteNewFakeEmailAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteNewFakeEmailAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteNewFakeEmailAddressApiResponse(ILogger<DeleteNewFakeEmailAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateBimiRecord(GenerateBimiRecordOptions generateBimiRecordOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateBimiRecordOptions"></param>
        /// <returns></returns>
        private void ValidateGenerateBimiRecord(GenerateBimiRecordOptions generateBimiRecordOptions)
        {
            if (generateBimiRecordOptions == null)
                throw new ArgumentNullException(nameof(generateBimiRecordOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateBimiRecordOptions"></param>
        private void AfterGenerateBimiRecordDefaultImplementation(IGenerateBimiRecordApiResponse apiResponseLocalVar, GenerateBimiRecordOptions generateBimiRecordOptions)
        {
            bool suppressDefaultLog = false;
            AfterGenerateBimiRecord(ref suppressDefaultLog, apiResponseLocalVar, generateBimiRecordOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateBimiRecordOptions"></param>
        partial void AfterGenerateBimiRecord(ref bool suppressDefaultLog, IGenerateBimiRecordApiResponse apiResponseLocalVar, GenerateBimiRecordOptions generateBimiRecordOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateBimiRecordOptions"></param>
        private void OnErrorGenerateBimiRecordDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateBimiRecordOptions generateBimiRecordOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateBimiRecord(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateBimiRecordOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateBimiRecordOptions"></param>
        partial void OnErrorGenerateBimiRecord(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateBimiRecordOptions generateBimiRecordOptions);

        /// <summary>
        /// Create a BIMI record policy 
        /// </summary>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateBimiRecordApiResponse"/>&gt;</returns>
        public async Task<IGenerateBimiRecordApiResponse> GenerateBimiRecordOrDefaultAsync(GenerateBimiRecordOptions generateBimiRecordOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateBimiRecordAsync(generateBimiRecordOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a BIMI record policy 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateBimiRecordApiResponse"/>&gt;</returns>
        public async Task<IGenerateBimiRecordApiResponse> GenerateBimiRecordAsync(GenerateBimiRecordOptions generateBimiRecordOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateBimiRecord(generateBimiRecordOptions);

                FormatGenerateBimiRecord(generateBimiRecordOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/generate-bimi-record"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/generate-bimi-record");

                    httpRequestMessageLocalVar.Content = (generateBimiRecordOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateBimiRecordOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GenerateBimiRecordApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateBimiRecordApiResponse>();

                        GenerateBimiRecordApiResponse apiResponseLocalVar = new GenerateBimiRecordApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/generate-bimi-record", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateBimiRecordDefaultImplementation(apiResponseLocalVar, generateBimiRecordOptions);

                        Events.ExecuteOnGenerateBimiRecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateBimiRecordDefaultImplementation(e, "/tools/generate-bimi-record", uriBuilderLocalVar.Path, generateBimiRecordOptions);
                Events.ExecuteOnErrorGenerateBimiRecord(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateBimiRecordApiResponse"/>
        /// </summary>
        public partial class GenerateBimiRecordApiResponse : mailslurp.Client.ApiResponse, IGenerateBimiRecordApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateBimiRecordApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateBimiRecordApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateBimiRecordApiResponse(ILogger<GenerateBimiRecordApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.GenerateBimiRecordResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.GenerateBimiRecordResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.GenerateBimiRecordResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateDmarcRecord(GenerateDmarcRecordOptions generateDmarcRecordOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <returns></returns>
        private void ValidateGenerateDmarcRecord(GenerateDmarcRecordOptions generateDmarcRecordOptions)
        {
            if (generateDmarcRecordOptions == null)
                throw new ArgumentNullException(nameof(generateDmarcRecordOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateDmarcRecordOptions"></param>
        private void AfterGenerateDmarcRecordDefaultImplementation(IGenerateDmarcRecordApiResponse apiResponseLocalVar, GenerateDmarcRecordOptions generateDmarcRecordOptions)
        {
            bool suppressDefaultLog = false;
            AfterGenerateDmarcRecord(ref suppressDefaultLog, apiResponseLocalVar, generateDmarcRecordOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateDmarcRecordOptions"></param>
        partial void AfterGenerateDmarcRecord(ref bool suppressDefaultLog, IGenerateDmarcRecordApiResponse apiResponseLocalVar, GenerateDmarcRecordOptions generateDmarcRecordOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateDmarcRecordOptions"></param>
        private void OnErrorGenerateDmarcRecordDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateDmarcRecordOptions generateDmarcRecordOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateDmarcRecord(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateDmarcRecordOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateDmarcRecordOptions"></param>
        partial void OnErrorGenerateDmarcRecord(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateDmarcRecordOptions generateDmarcRecordOptions);

        /// <summary>
        /// Create a DMARC record policy 
        /// </summary>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateDmarcRecordApiResponse"/>&gt;</returns>
        public async Task<IGenerateDmarcRecordApiResponse> GenerateDmarcRecordOrDefaultAsync(GenerateDmarcRecordOptions generateDmarcRecordOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateDmarcRecordAsync(generateDmarcRecordOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a DMARC record policy 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateDmarcRecordApiResponse"/>&gt;</returns>
        public async Task<IGenerateDmarcRecordApiResponse> GenerateDmarcRecordAsync(GenerateDmarcRecordOptions generateDmarcRecordOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateDmarcRecord(generateDmarcRecordOptions);

                FormatGenerateDmarcRecord(generateDmarcRecordOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/generate-dmarc-record"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/generate-dmarc-record");

                    httpRequestMessageLocalVar.Content = (generateDmarcRecordOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateDmarcRecordOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GenerateDmarcRecordApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateDmarcRecordApiResponse>();

                        GenerateDmarcRecordApiResponse apiResponseLocalVar = new GenerateDmarcRecordApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/generate-dmarc-record", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateDmarcRecordDefaultImplementation(apiResponseLocalVar, generateDmarcRecordOptions);

                        Events.ExecuteOnGenerateDmarcRecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateDmarcRecordDefaultImplementation(e, "/tools/generate-dmarc-record", uriBuilderLocalVar.Path, generateDmarcRecordOptions);
                Events.ExecuteOnErrorGenerateDmarcRecord(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateDmarcRecordApiResponse"/>
        /// </summary>
        public partial class GenerateDmarcRecordApiResponse : mailslurp.Client.ApiResponse, IGenerateDmarcRecordApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateDmarcRecordApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateDmarcRecordApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateDmarcRecordApiResponse(ILogger<GenerateDmarcRecordApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.GenerateDmarcRecordResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.GenerateDmarcRecordResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.GenerateDmarcRecordResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateMtaStsRecord(GenerateMtaStsRecordOptions generateMtaStsRecordOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <returns></returns>
        private void ValidateGenerateMtaStsRecord(GenerateMtaStsRecordOptions generateMtaStsRecordOptions)
        {
            if (generateMtaStsRecordOptions == null)
                throw new ArgumentNullException(nameof(generateMtaStsRecordOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateMtaStsRecordOptions"></param>
        private void AfterGenerateMtaStsRecordDefaultImplementation(IGenerateMtaStsRecordApiResponse apiResponseLocalVar, GenerateMtaStsRecordOptions generateMtaStsRecordOptions)
        {
            bool suppressDefaultLog = false;
            AfterGenerateMtaStsRecord(ref suppressDefaultLog, apiResponseLocalVar, generateMtaStsRecordOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateMtaStsRecordOptions"></param>
        partial void AfterGenerateMtaStsRecord(ref bool suppressDefaultLog, IGenerateMtaStsRecordApiResponse apiResponseLocalVar, GenerateMtaStsRecordOptions generateMtaStsRecordOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateMtaStsRecordOptions"></param>
        private void OnErrorGenerateMtaStsRecordDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateMtaStsRecordOptions generateMtaStsRecordOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateMtaStsRecord(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateMtaStsRecordOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateMtaStsRecordOptions"></param>
        partial void OnErrorGenerateMtaStsRecord(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateMtaStsRecordOptions generateMtaStsRecordOptions);

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateMtaStsRecordApiResponse"/>&gt;</returns>
        public async Task<IGenerateMtaStsRecordApiResponse> GenerateMtaStsRecordOrDefaultAsync(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateMtaStsRecordAsync(generateMtaStsRecordOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateMtaStsRecordApiResponse"/>&gt;</returns>
        public async Task<IGenerateMtaStsRecordApiResponse> GenerateMtaStsRecordAsync(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateMtaStsRecord(generateMtaStsRecordOptions);

                FormatGenerateMtaStsRecord(generateMtaStsRecordOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/generate-mta-sts-record"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/generate-mta-sts-record");

                    httpRequestMessageLocalVar.Content = (generateMtaStsRecordOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateMtaStsRecordOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GenerateMtaStsRecordApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateMtaStsRecordApiResponse>();

                        GenerateMtaStsRecordApiResponse apiResponseLocalVar = new GenerateMtaStsRecordApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/generate-mta-sts-record", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateMtaStsRecordDefaultImplementation(apiResponseLocalVar, generateMtaStsRecordOptions);

                        Events.ExecuteOnGenerateMtaStsRecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateMtaStsRecordDefaultImplementation(e, "/tools/generate-mta-sts-record", uriBuilderLocalVar.Path, generateMtaStsRecordOptions);
                Events.ExecuteOnErrorGenerateMtaStsRecord(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateMtaStsRecordApiResponse"/>
        /// </summary>
        public partial class GenerateMtaStsRecordApiResponse : mailslurp.Client.ApiResponse, IGenerateMtaStsRecordApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateMtaStsRecordApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateMtaStsRecordApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateMtaStsRecordApiResponse(ILogger<GenerateMtaStsRecordApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.GenerateMtaStsRecordResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.GenerateMtaStsRecordResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.GenerateMtaStsRecordResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateTlsReportingRecord(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <returns></returns>
        private void ValidateGenerateTlsReportingRecord(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions)
        {
            if (generateTlsReportingRecordOptions == null)
                throw new ArgumentNullException(nameof(generateTlsReportingRecordOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateTlsReportingRecordOptions"></param>
        private void AfterGenerateTlsReportingRecordDefaultImplementation(IGenerateTlsReportingRecordApiResponse apiResponseLocalVar, GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions)
        {
            bool suppressDefaultLog = false;
            AfterGenerateTlsReportingRecord(ref suppressDefaultLog, apiResponseLocalVar, generateTlsReportingRecordOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateTlsReportingRecordOptions"></param>
        partial void AfterGenerateTlsReportingRecord(ref bool suppressDefaultLog, IGenerateTlsReportingRecordApiResponse apiResponseLocalVar, GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateTlsReportingRecordOptions"></param>
        private void OnErrorGenerateTlsReportingRecordDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateTlsReportingRecord(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateTlsReportingRecordOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateTlsReportingRecordOptions"></param>
        partial void OnErrorGenerateTlsReportingRecord(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions);

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateTlsReportingRecordApiResponse"/>&gt;</returns>
        public async Task<IGenerateTlsReportingRecordApiResponse> GenerateTlsReportingRecordOrDefaultAsync(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateTlsReportingRecordAsync(generateTlsReportingRecordOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateTlsReportingRecordApiResponse"/>&gt;</returns>
        public async Task<IGenerateTlsReportingRecordApiResponse> GenerateTlsReportingRecordAsync(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateTlsReportingRecord(generateTlsReportingRecordOptions);

                FormatGenerateTlsReportingRecord(generateTlsReportingRecordOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/generate-tls-reporting-record"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/generate-tls-reporting-record");

                    httpRequestMessageLocalVar.Content = (generateTlsReportingRecordOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateTlsReportingRecordOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GenerateTlsReportingRecordApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateTlsReportingRecordApiResponse>();

                        GenerateTlsReportingRecordApiResponse apiResponseLocalVar = new GenerateTlsReportingRecordApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/generate-tls-reporting-record", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateTlsReportingRecordDefaultImplementation(apiResponseLocalVar, generateTlsReportingRecordOptions);

                        Events.ExecuteOnGenerateTlsReportingRecord(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateTlsReportingRecordDefaultImplementation(e, "/tools/generate-tls-reporting-record", uriBuilderLocalVar.Path, generateTlsReportingRecordOptions);
                Events.ExecuteOnErrorGenerateTlsReportingRecord(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateTlsReportingRecordApiResponse"/>
        /// </summary>
        public partial class GenerateTlsReportingRecordApiResponse : mailslurp.Client.ApiResponse, IGenerateTlsReportingRecordApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateTlsReportingRecordApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateTlsReportingRecordApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateTlsReportingRecordApiResponse(ILogger<GenerateTlsReportingRecordApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.GenerateTlsReportingRecordResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.GenerateTlsReportingRecordResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.GenerateTlsReportingRecordResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFakeEmailByEmailAddress(ref string emailAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <returns></returns>
        private void ValidateGetFakeEmailByEmailAddress(string emailAddress)
        {
            if (emailAddress == null)
                throw new ArgumentNullException(nameof(emailAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        private void AfterGetFakeEmailByEmailAddressDefaultImplementation(IGetFakeEmailByEmailAddressApiResponse apiResponseLocalVar, string emailAddress)
        {
            bool suppressDefaultLog = false;
            AfterGetFakeEmailByEmailAddress(ref suppressDefaultLog, apiResponseLocalVar, emailAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        partial void AfterGetFakeEmailByEmailAddress(ref bool suppressDefaultLog, IGetFakeEmailByEmailAddressApiResponse apiResponseLocalVar, string emailAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        private void OnErrorGetFakeEmailByEmailAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFakeEmailByEmailAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, emailAddress);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        partial void OnErrorGetFakeEmailByEmailAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailByEmailAddressApiResponse"/>&gt;</returns>
        public async Task<IGetFakeEmailByEmailAddressApiResponse> GetFakeEmailByEmailAddressOrDefaultAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFakeEmailByEmailAddressAsync(emailAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailByEmailAddressApiResponse"/>&gt;</returns>
        public async Task<IGetFakeEmailByEmailAddressApiResponse> GetFakeEmailByEmailAddressAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFakeEmailByEmailAddress(emailAddress);

                FormatGetFakeEmailByEmailAddress(ref emailAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/fake-email/byEmailAddress"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/fake-email/byEmailAddress");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["emailAddress"] = ClientUtils.ParameterToString(emailAddress);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetFakeEmailByEmailAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFakeEmailByEmailAddressApiResponse>();

                        GetFakeEmailByEmailAddressApiResponse apiResponseLocalVar = new GetFakeEmailByEmailAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/fake-email/byEmailAddress", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFakeEmailByEmailAddressDefaultImplementation(apiResponseLocalVar, emailAddress);

                        Events.ExecuteOnGetFakeEmailByEmailAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFakeEmailByEmailAddressDefaultImplementation(e, "/tools/fake-email/byEmailAddress", uriBuilderLocalVar.Path, emailAddress);
                Events.ExecuteOnErrorGetFakeEmailByEmailAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFakeEmailByEmailAddressApiResponse"/>
        /// </summary>
        public partial class GetFakeEmailByEmailAddressApiResponse : mailslurp.Client.ApiResponse, IGetFakeEmailByEmailAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFakeEmailByEmailAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFakeEmailByEmailAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFakeEmailByEmailAddressApiResponse(ILogger<GetFakeEmailByEmailAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.FakeEmailResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.FakeEmailResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.FakeEmailResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFakeEmailById(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetFakeEmailByIdDefaultImplementation(IGetFakeEmailByIdApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetFakeEmailById(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetFakeEmailById(ref bool suppressDefaultLog, IGetFakeEmailByIdApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetFakeEmailByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFakeEmailById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetFakeEmailById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get a fake email by its ID Get a fake email by its ID
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailByIdApiResponse"/>&gt;</returns>
        public async Task<IGetFakeEmailByIdApiResponse> GetFakeEmailByIdOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFakeEmailByIdAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a fake email by its ID Get a fake email by its ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailByIdApiResponse"/>&gt;</returns>
        public async Task<IGetFakeEmailByIdApiResponse> GetFakeEmailByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetFakeEmailById(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/fake-email"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/fake-email");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetFakeEmailByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFakeEmailByIdApiResponse>();

                        GetFakeEmailByIdApiResponse apiResponseLocalVar = new GetFakeEmailByIdApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/fake-email", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFakeEmailByIdDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetFakeEmailById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFakeEmailByIdDefaultImplementation(e, "/tools/fake-email", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetFakeEmailById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFakeEmailByIdApiResponse"/>
        /// </summary>
        public partial class GetFakeEmailByIdApiResponse : mailslurp.Client.ApiResponse, IGetFakeEmailByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFakeEmailByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFakeEmailByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFakeEmailByIdApiResponse(ILogger<GetFakeEmailByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.FakeEmailResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.FakeEmailResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.FakeEmailResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFakeEmailRaw(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetFakeEmailRawDefaultImplementation(IGetFakeEmailRawApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetFakeEmailRaw(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetFakeEmailRaw(ref bool suppressDefaultLog, IGetFakeEmailRawApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetFakeEmailRawDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFakeEmailRaw(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetFakeEmailRaw(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get raw fake email content Retrieve the raw content of a fake email by its ID
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailRawApiResponse"/>&gt;</returns>
        public async Task<IGetFakeEmailRawApiResponse> GetFakeEmailRawOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFakeEmailRawAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get raw fake email content Retrieve the raw content of a fake email by its ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailRawApiResponse"/>&gt;</returns>
        public async Task<IGetFakeEmailRawApiResponse> GetFakeEmailRawAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetFakeEmailRaw(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/fake-email/html"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/fake-email/html");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain;charset=utf-8",
                        "text/html;charset=utf-8",
                        "text/plain; charset=utf-8",
                        "text/html; charset=utf-8"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetFakeEmailRawApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFakeEmailRawApiResponse>();

                        GetFakeEmailRawApiResponse apiResponseLocalVar = new GetFakeEmailRawApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/fake-email/html", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFakeEmailRawDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetFakeEmailRaw(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFakeEmailRawDefaultImplementation(e, "/tools/fake-email/html", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetFakeEmailRaw(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFakeEmailRawApiResponse"/>
        /// </summary>
        public partial class GetFakeEmailRawApiResponse : mailslurp.Client.ApiResponse, IGetFakeEmailRawApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFakeEmailRawApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFakeEmailRawApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFakeEmailRawApiResponse(ILogger<GetFakeEmailRawApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out string result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFakeEmailsForAddress(ref string emailAddress, ref Option<int> page);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <returns></returns>
        private void ValidateGetFakeEmailsForAddress(string emailAddress)
        {
            if (emailAddress == null)
                throw new ArgumentNullException(nameof(emailAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        /// <param name="page"></param>
        private void AfterGetFakeEmailsForAddressDefaultImplementation(IGetFakeEmailsForAddressApiResponse apiResponseLocalVar, string emailAddress, Option<int> page)
        {
            bool suppressDefaultLog = false;
            AfterGetFakeEmailsForAddress(ref suppressDefaultLog, apiResponseLocalVar, emailAddress, page);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        /// <param name="page"></param>
        partial void AfterGetFakeEmailsForAddress(ref bool suppressDefaultLog, IGetFakeEmailsForAddressApiResponse apiResponseLocalVar, string emailAddress, Option<int> page);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        /// <param name="page"></param>
        private void OnErrorGetFakeEmailsForAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress, Option<int> page)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFakeEmailsForAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, emailAddress, page);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        /// <param name="page"></param>
        partial void OnErrorGetFakeEmailsForAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress, Option<int> page);

        /// <summary>
        /// Get fake emails for an address Get fake emails for an address
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailsForAddressApiResponse"/>&gt;</returns>
        public async Task<IGetFakeEmailsForAddressApiResponse> GetFakeEmailsForAddressOrDefaultAsync(string emailAddress, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFakeEmailsForAddressAsync(emailAddress, page, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get fake emails for an address Get fake emails for an address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFakeEmailsForAddressApiResponse"/>&gt;</returns>
        public async Task<IGetFakeEmailsForAddressApiResponse> GetFakeEmailsForAddressAsync(string emailAddress, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFakeEmailsForAddress(emailAddress);

                FormatGetFakeEmailsForAddress(ref emailAddress, ref page);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/fake-emails"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/fake-emails");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["emailAddress"] = ClientUtils.ParameterToString(emailAddress);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetFakeEmailsForAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFakeEmailsForAddressApiResponse>();

                        GetFakeEmailsForAddressApiResponse apiResponseLocalVar = new GetFakeEmailsForAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/fake-emails", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFakeEmailsForAddressDefaultImplementation(apiResponseLocalVar, emailAddress, page);

                        Events.ExecuteOnGetFakeEmailsForAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFakeEmailsForAddressDefaultImplementation(e, "/tools/fake-emails", uriBuilderLocalVar.Path, emailAddress, page);
                Events.ExecuteOnErrorGetFakeEmailsForAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFakeEmailsForAddressApiResponse"/>
        /// </summary>
        public partial class GetFakeEmailsForAddressApiResponse : mailslurp.Client.ApiResponse, IGetFakeEmailsForAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFakeEmailsForAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFakeEmailsForAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFakeEmailsForAddressApiResponse(ILogger<GetFakeEmailsForAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<FakeEmailPreview> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<FakeEmailPreview>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<FakeEmailPreview> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLookupBimiDomain(LookupBimiDomainOptions lookupBimiDomainOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <returns></returns>
        private void ValidateLookupBimiDomain(LookupBimiDomainOptions lookupBimiDomainOptions)
        {
            if (lookupBimiDomainOptions == null)
                throw new ArgumentNullException(nameof(lookupBimiDomainOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="lookupBimiDomainOptions"></param>
        private void AfterLookupBimiDomainDefaultImplementation(ILookupBimiDomainApiResponse apiResponseLocalVar, LookupBimiDomainOptions lookupBimiDomainOptions)
        {
            bool suppressDefaultLog = false;
            AfterLookupBimiDomain(ref suppressDefaultLog, apiResponseLocalVar, lookupBimiDomainOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="lookupBimiDomainOptions"></param>
        partial void AfterLookupBimiDomain(ref bool suppressDefaultLog, ILookupBimiDomainApiResponse apiResponseLocalVar, LookupBimiDomainOptions lookupBimiDomainOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="lookupBimiDomainOptions"></param>
        private void OnErrorLookupBimiDomainDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LookupBimiDomainOptions lookupBimiDomainOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLookupBimiDomain(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, lookupBimiDomainOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="lookupBimiDomainOptions"></param>
        partial void OnErrorLookupBimiDomain(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LookupBimiDomainOptions lookupBimiDomainOptions);

        /// <summary>
        /// Lookup a BIMI record policy 
        /// </summary>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupBimiDomainApiResponse"/>&gt;</returns>
        public async Task<ILookupBimiDomainApiResponse> LookupBimiDomainOrDefaultAsync(LookupBimiDomainOptions lookupBimiDomainOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LookupBimiDomainAsync(lookupBimiDomainOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Lookup a BIMI record policy 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupBimiDomainApiResponse"/>&gt;</returns>
        public async Task<ILookupBimiDomainApiResponse> LookupBimiDomainAsync(LookupBimiDomainOptions lookupBimiDomainOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLookupBimiDomain(lookupBimiDomainOptions);

                FormatLookupBimiDomain(lookupBimiDomainOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/lookup-bimi-domain"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/lookup-bimi-domain");

                    httpRequestMessageLocalVar.Content = (lookupBimiDomainOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(lookupBimiDomainOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<LookupBimiDomainApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LookupBimiDomainApiResponse>();

                        LookupBimiDomainApiResponse apiResponseLocalVar = new LookupBimiDomainApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/lookup-bimi-domain", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLookupBimiDomainDefaultImplementation(apiResponseLocalVar, lookupBimiDomainOptions);

                        Events.ExecuteOnLookupBimiDomain(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLookupBimiDomainDefaultImplementation(e, "/tools/lookup-bimi-domain", uriBuilderLocalVar.Path, lookupBimiDomainOptions);
                Events.ExecuteOnErrorLookupBimiDomain(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LookupBimiDomainApiResponse"/>
        /// </summary>
        public partial class LookupBimiDomainApiResponse : mailslurp.Client.ApiResponse, ILookupBimiDomainApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LookupBimiDomainApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LookupBimiDomainApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LookupBimiDomainApiResponse(ILogger<LookupBimiDomainApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.LookupBimiDomainResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.LookupBimiDomainResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.LookupBimiDomainResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLookupDmarcDomain(LookupDmarcDomainOptions lookupDmarcDomainOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <returns></returns>
        private void ValidateLookupDmarcDomain(LookupDmarcDomainOptions lookupDmarcDomainOptions)
        {
            if (lookupDmarcDomainOptions == null)
                throw new ArgumentNullException(nameof(lookupDmarcDomainOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="lookupDmarcDomainOptions"></param>
        private void AfterLookupDmarcDomainDefaultImplementation(ILookupDmarcDomainApiResponse apiResponseLocalVar, LookupDmarcDomainOptions lookupDmarcDomainOptions)
        {
            bool suppressDefaultLog = false;
            AfterLookupDmarcDomain(ref suppressDefaultLog, apiResponseLocalVar, lookupDmarcDomainOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="lookupDmarcDomainOptions"></param>
        partial void AfterLookupDmarcDomain(ref bool suppressDefaultLog, ILookupDmarcDomainApiResponse apiResponseLocalVar, LookupDmarcDomainOptions lookupDmarcDomainOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="lookupDmarcDomainOptions"></param>
        private void OnErrorLookupDmarcDomainDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LookupDmarcDomainOptions lookupDmarcDomainOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLookupDmarcDomain(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, lookupDmarcDomainOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="lookupDmarcDomainOptions"></param>
        partial void OnErrorLookupDmarcDomain(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LookupDmarcDomainOptions lookupDmarcDomainOptions);

        /// <summary>
        /// Lookup a DMARC record policy 
        /// </summary>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupDmarcDomainApiResponse"/>&gt;</returns>
        public async Task<ILookupDmarcDomainApiResponse> LookupDmarcDomainOrDefaultAsync(LookupDmarcDomainOptions lookupDmarcDomainOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LookupDmarcDomainAsync(lookupDmarcDomainOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Lookup a DMARC record policy 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupDmarcDomainApiResponse"/>&gt;</returns>
        public async Task<ILookupDmarcDomainApiResponse> LookupDmarcDomainAsync(LookupDmarcDomainOptions lookupDmarcDomainOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLookupDmarcDomain(lookupDmarcDomainOptions);

                FormatLookupDmarcDomain(lookupDmarcDomainOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/lookup-dmarc-domain"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/lookup-dmarc-domain");

                    httpRequestMessageLocalVar.Content = (lookupDmarcDomainOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(lookupDmarcDomainOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<LookupDmarcDomainApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LookupDmarcDomainApiResponse>();

                        LookupDmarcDomainApiResponse apiResponseLocalVar = new LookupDmarcDomainApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/lookup-dmarc-domain", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLookupDmarcDomainDefaultImplementation(apiResponseLocalVar, lookupDmarcDomainOptions);

                        Events.ExecuteOnLookupDmarcDomain(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLookupDmarcDomainDefaultImplementation(e, "/tools/lookup-dmarc-domain", uriBuilderLocalVar.Path, lookupDmarcDomainOptions);
                Events.ExecuteOnErrorLookupDmarcDomain(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LookupDmarcDomainApiResponse"/>
        /// </summary>
        public partial class LookupDmarcDomainApiResponse : mailslurp.Client.ApiResponse, ILookupDmarcDomainApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LookupDmarcDomainApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LookupDmarcDomainApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LookupDmarcDomainApiResponse(ILogger<LookupDmarcDomainApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.LookupDmarcDomainResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.LookupDmarcDomainResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.LookupDmarcDomainResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLookupMtaStsDomain(LookupMtaStsDomainOptions lookupMtaStsDomainOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <returns></returns>
        private void ValidateLookupMtaStsDomain(LookupMtaStsDomainOptions lookupMtaStsDomainOptions)
        {
            if (lookupMtaStsDomainOptions == null)
                throw new ArgumentNullException(nameof(lookupMtaStsDomainOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="lookupMtaStsDomainOptions"></param>
        private void AfterLookupMtaStsDomainDefaultImplementation(ILookupMtaStsDomainApiResponse apiResponseLocalVar, LookupMtaStsDomainOptions lookupMtaStsDomainOptions)
        {
            bool suppressDefaultLog = false;
            AfterLookupMtaStsDomain(ref suppressDefaultLog, apiResponseLocalVar, lookupMtaStsDomainOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="lookupMtaStsDomainOptions"></param>
        partial void AfterLookupMtaStsDomain(ref bool suppressDefaultLog, ILookupMtaStsDomainApiResponse apiResponseLocalVar, LookupMtaStsDomainOptions lookupMtaStsDomainOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="lookupMtaStsDomainOptions"></param>
        private void OnErrorLookupMtaStsDomainDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LookupMtaStsDomainOptions lookupMtaStsDomainOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLookupMtaStsDomain(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, lookupMtaStsDomainOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="lookupMtaStsDomainOptions"></param>
        partial void OnErrorLookupMtaStsDomain(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LookupMtaStsDomainOptions lookupMtaStsDomainOptions);

        /// <summary>
        /// Lookup a MTA-STS domain policy 
        /// </summary>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupMtaStsDomainApiResponse"/>&gt;</returns>
        public async Task<ILookupMtaStsDomainApiResponse> LookupMtaStsDomainOrDefaultAsync(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LookupMtaStsDomainAsync(lookupMtaStsDomainOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Lookup a MTA-STS domain policy 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupMtaStsDomainApiResponse"/>&gt;</returns>
        public async Task<ILookupMtaStsDomainApiResponse> LookupMtaStsDomainAsync(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLookupMtaStsDomain(lookupMtaStsDomainOptions);

                FormatLookupMtaStsDomain(lookupMtaStsDomainOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/lookup-mta-sts-domain"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/lookup-mta-sts-domain");

                    httpRequestMessageLocalVar.Content = (lookupMtaStsDomainOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(lookupMtaStsDomainOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<LookupMtaStsDomainApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LookupMtaStsDomainApiResponse>();

                        LookupMtaStsDomainApiResponse apiResponseLocalVar = new LookupMtaStsDomainApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/lookup-mta-sts-domain", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLookupMtaStsDomainDefaultImplementation(apiResponseLocalVar, lookupMtaStsDomainOptions);

                        Events.ExecuteOnLookupMtaStsDomain(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLookupMtaStsDomainDefaultImplementation(e, "/tools/lookup-mta-sts-domain", uriBuilderLocalVar.Path, lookupMtaStsDomainOptions);
                Events.ExecuteOnErrorLookupMtaStsDomain(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LookupMtaStsDomainApiResponse"/>
        /// </summary>
        public partial class LookupMtaStsDomainApiResponse : mailslurp.Client.ApiResponse, ILookupMtaStsDomainApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LookupMtaStsDomainApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LookupMtaStsDomainApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LookupMtaStsDomainApiResponse(ILogger<LookupMtaStsDomainApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.LookupMtaStsDomainResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.LookupMtaStsDomainResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.LookupMtaStsDomainResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLookupTlsReportingDomain(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <returns></returns>
        private void ValidateLookupTlsReportingDomain(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions)
        {
            if (lookupTlsReportingDomainOptions == null)
                throw new ArgumentNullException(nameof(lookupTlsReportingDomainOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        private void AfterLookupTlsReportingDomainDefaultImplementation(ILookupTlsReportingDomainApiResponse apiResponseLocalVar, LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions)
        {
            bool suppressDefaultLog = false;
            AfterLookupTlsReportingDomain(ref suppressDefaultLog, apiResponseLocalVar, lookupTlsReportingDomainOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        partial void AfterLookupTlsReportingDomain(ref bool suppressDefaultLog, ILookupTlsReportingDomainApiResponse apiResponseLocalVar, LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        private void OnErrorLookupTlsReportingDomainDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLookupTlsReportingDomain(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, lookupTlsReportingDomainOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        partial void OnErrorLookupTlsReportingDomain(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions);

        /// <summary>
        /// Lookup a TLS reporting domain policy 
        /// </summary>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupTlsReportingDomainApiResponse"/>&gt;</returns>
        public async Task<ILookupTlsReportingDomainApiResponse> LookupTlsReportingDomainOrDefaultAsync(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LookupTlsReportingDomainAsync(lookupTlsReportingDomainOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Lookup a TLS reporting domain policy 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILookupTlsReportingDomainApiResponse"/>&gt;</returns>
        public async Task<ILookupTlsReportingDomainApiResponse> LookupTlsReportingDomainAsync(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLookupTlsReportingDomain(lookupTlsReportingDomainOptions);

                FormatLookupTlsReportingDomain(lookupTlsReportingDomainOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/tools/lookup-tls-reporting-domain"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/tools/lookup-tls-reporting-domain");

                    httpRequestMessageLocalVar.Content = (lookupTlsReportingDomainOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(lookupTlsReportingDomainOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<LookupTlsReportingDomainApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LookupTlsReportingDomainApiResponse>();

                        LookupTlsReportingDomainApiResponse apiResponseLocalVar = new LookupTlsReportingDomainApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/tools/lookup-tls-reporting-domain", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLookupTlsReportingDomainDefaultImplementation(apiResponseLocalVar, lookupTlsReportingDomainOptions);

                        Events.ExecuteOnLookupTlsReportingDomain(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLookupTlsReportingDomainDefaultImplementation(e, "/tools/lookup-tls-reporting-domain", uriBuilderLocalVar.Path, lookupTlsReportingDomainOptions);
                Events.ExecuteOnErrorLookupTlsReportingDomain(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LookupTlsReportingDomainApiResponse"/>
        /// </summary>
        public partial class LookupTlsReportingDomainApiResponse : mailslurp.Client.ApiResponse, ILookupTlsReportingDomainApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LookupTlsReportingDomainApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LookupTlsReportingDomainApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LookupTlsReportingDomainApiResponse(ILogger<LookupTlsReportingDomainApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.LookupTlsReportingDomainResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.LookupTlsReportingDomainResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.LookupTlsReportingDomainResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
