/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolsControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check email client support for email HTML and CSS features
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CheckEmailFeaturesClientSupportResults</returns>
        CheckEmailFeaturesClientSupportResults CheckEmailFeaturesClientSupport(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, int operationIndex = 0);

        /// <summary>
        /// Check email client support for email HTML and CSS features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CheckEmailFeaturesClientSupportResults</returns>
        ApiResponse<CheckEmailFeaturesClientSupportResults> CheckEmailFeaturesClientSupportWithHttpInfo(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, int operationIndex = 0);
        /// <summary>
        /// Create a new email address using the fake email domains
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NewFakeEmailAddressResult</returns>
        NewFakeEmailAddressResult CreateNewFakeEmailAddress(int operationIndex = 0);

        /// <summary>
        /// Create a new email address using the fake email domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NewFakeEmailAddressResult</returns>
        ApiResponse<NewFakeEmailAddressResult> CreateNewFakeEmailAddressWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Create a BIMI record policy
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateBimiRecordResults</returns>
        GenerateBimiRecordResults GenerateBimiRecord(GenerateBimiRecordOptions generateBimiRecordOptions, int operationIndex = 0);

        /// <summary>
        /// Create a BIMI record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateBimiRecordResults</returns>
        ApiResponse<GenerateBimiRecordResults> GenerateBimiRecordWithHttpInfo(GenerateBimiRecordOptions generateBimiRecordOptions, int operationIndex = 0);
        /// <summary>
        /// Create a DMARC record policy
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateDmarcRecordResults</returns>
        GenerateDmarcRecordResults GenerateDmarcRecord(GenerateDmarcRecordOptions generateDmarcRecordOptions, int operationIndex = 0);

        /// <summary>
        /// Create a DMARC record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateDmarcRecordResults</returns>
        ApiResponse<GenerateDmarcRecordResults> GenerateDmarcRecordWithHttpInfo(GenerateDmarcRecordOptions generateDmarcRecordOptions, int operationIndex = 0);
        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateMtaStsRecordResults</returns>
        GenerateMtaStsRecordResults GenerateMtaStsRecord(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, int operationIndex = 0);

        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateMtaStsRecordResults</returns>
        ApiResponse<GenerateMtaStsRecordResults> GenerateMtaStsRecordWithHttpInfo(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, int operationIndex = 0);
        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateTlsReportingRecordResults</returns>
        GenerateTlsReportingRecordResults GenerateTlsReportingRecord(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, int operationIndex = 0);

        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateTlsReportingRecordResults</returns>
        ApiResponse<GenerateTlsReportingRecordResults> GenerateTlsReportingRecordWithHttpInfo(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FakeEmailResult</returns>
        FakeEmailResult GetFakeEmailById(Guid id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FakeEmailResult</returns>
        ApiResponse<FakeEmailResult> GetFakeEmailByIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FakeEmailPreview&gt;</returns>
        List<FakeEmailPreview> GetFakeEmailsForAddress(string emailAddress, int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FakeEmailPreview&gt;</returns>
        ApiResponse<List<FakeEmailPreview>> GetFakeEmailsForAddressWithHttpInfo(string emailAddress, int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Lookup a BIMI record policy
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LookupBimiDomainResults</returns>
        LookupBimiDomainResults LookupBimiDomain(LookupBimiDomainOptions lookupBimiDomainOptions, int operationIndex = 0);

        /// <summary>
        /// Lookup a BIMI record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LookupBimiDomainResults</returns>
        ApiResponse<LookupBimiDomainResults> LookupBimiDomainWithHttpInfo(LookupBimiDomainOptions lookupBimiDomainOptions, int operationIndex = 0);
        /// <summary>
        /// Lookup a DMARC record policy
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LookupDmarcDomainResults</returns>
        LookupDmarcDomainResults LookupDmarcDomain(LookupDmarcDomainOptions lookupDmarcDomainOptions, int operationIndex = 0);

        /// <summary>
        /// Lookup a DMARC record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LookupDmarcDomainResults</returns>
        ApiResponse<LookupDmarcDomainResults> LookupDmarcDomainWithHttpInfo(LookupDmarcDomainOptions lookupDmarcDomainOptions, int operationIndex = 0);
        /// <summary>
        /// Lookup a MTA-STS domain policy
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LookupMtaStsDomainResults</returns>
        LookupMtaStsDomainResults LookupMtaStsDomain(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, int operationIndex = 0);

        /// <summary>
        /// Lookup a MTA-STS domain policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LookupMtaStsDomainResults</returns>
        ApiResponse<LookupMtaStsDomainResults> LookupMtaStsDomainWithHttpInfo(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, int operationIndex = 0);
        /// <summary>
        /// Lookup a TLS reporting domain policy
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LookupTlsReportingDomainResults</returns>
        LookupTlsReportingDomainResults LookupTlsReportingDomain(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, int operationIndex = 0);

        /// <summary>
        /// Lookup a TLS reporting domain policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LookupTlsReportingDomainResults</returns>
        ApiResponse<LookupTlsReportingDomainResults> LookupTlsReportingDomainWithHttpInfo(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolsControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check email client support for email HTML and CSS features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckEmailFeaturesClientSupportResults</returns>
        System.Threading.Tasks.Task<CheckEmailFeaturesClientSupportResults> CheckEmailFeaturesClientSupportAsync(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check email client support for email HTML and CSS features
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckEmailFeaturesClientSupportResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckEmailFeaturesClientSupportResults>> CheckEmailFeaturesClientSupportWithHttpInfoAsync(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new email address using the fake email domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewFakeEmailAddressResult</returns>
        System.Threading.Tasks.Task<NewFakeEmailAddressResult> CreateNewFakeEmailAddressAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new email address using the fake email domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewFakeEmailAddressResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewFakeEmailAddressResult>> CreateNewFakeEmailAddressWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a BIMI record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateBimiRecordResults</returns>
        System.Threading.Tasks.Task<GenerateBimiRecordResults> GenerateBimiRecordAsync(GenerateBimiRecordOptions generateBimiRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a BIMI record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateBimiRecordResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateBimiRecordResults>> GenerateBimiRecordWithHttpInfoAsync(GenerateBimiRecordOptions generateBimiRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a DMARC record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateDmarcRecordResults</returns>
        System.Threading.Tasks.Task<GenerateDmarcRecordResults> GenerateDmarcRecordAsync(GenerateDmarcRecordOptions generateDmarcRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a DMARC record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateDmarcRecordResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateDmarcRecordResults>> GenerateDmarcRecordWithHttpInfoAsync(GenerateDmarcRecordOptions generateDmarcRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateMtaStsRecordResults</returns>
        System.Threading.Tasks.Task<GenerateMtaStsRecordResults> GenerateMtaStsRecordAsync(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateMtaStsRecordResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateMtaStsRecordResults>> GenerateMtaStsRecordWithHttpInfoAsync(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateTlsReportingRecordResults</returns>
        System.Threading.Tasks.Task<GenerateTlsReportingRecordResults> GenerateTlsReportingRecordAsync(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a TLS reporting record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateTlsReportingRecordResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateTlsReportingRecordResults>> GenerateTlsReportingRecordWithHttpInfoAsync(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FakeEmailResult</returns>
        System.Threading.Tasks.Task<FakeEmailResult> GetFakeEmailByIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FakeEmailResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FakeEmailResult>> GetFakeEmailByIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FakeEmailPreview&gt;</returns>
        System.Threading.Tasks.Task<List<FakeEmailPreview>> GetFakeEmailsForAddressAsync(string emailAddress, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FakeEmailPreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FakeEmailPreview>>> GetFakeEmailsForAddressWithHttpInfoAsync(string emailAddress, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lookup a BIMI record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupBimiDomainResults</returns>
        System.Threading.Tasks.Task<LookupBimiDomainResults> LookupBimiDomainAsync(LookupBimiDomainOptions lookupBimiDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lookup a BIMI record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupBimiDomainResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupBimiDomainResults>> LookupBimiDomainWithHttpInfoAsync(LookupBimiDomainOptions lookupBimiDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lookup a DMARC record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupDmarcDomainResults</returns>
        System.Threading.Tasks.Task<LookupDmarcDomainResults> LookupDmarcDomainAsync(LookupDmarcDomainOptions lookupDmarcDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lookup a DMARC record policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupDmarcDomainResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupDmarcDomainResults>> LookupDmarcDomainWithHttpInfoAsync(LookupDmarcDomainOptions lookupDmarcDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lookup a MTA-STS domain policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupMtaStsDomainResults</returns>
        System.Threading.Tasks.Task<LookupMtaStsDomainResults> LookupMtaStsDomainAsync(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lookup a MTA-STS domain policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupMtaStsDomainResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupMtaStsDomainResults>> LookupMtaStsDomainWithHttpInfoAsync(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lookup a TLS reporting domain policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupTlsReportingDomainResults</returns>
        System.Threading.Tasks.Task<LookupTlsReportingDomainResults> LookupTlsReportingDomainAsync(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lookup a TLS reporting domain policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupTlsReportingDomainResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupTlsReportingDomainResults>> LookupTlsReportingDomainWithHttpInfoAsync(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolsControllerApi : IToolsControllerApiSync, IToolsControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ToolsControllerApi : IToolsControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolsControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolsControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ToolsControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ToolsControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check email client support for email HTML and CSS features 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CheckEmailFeaturesClientSupportResults</returns>
        public CheckEmailFeaturesClientSupportResults CheckEmailFeaturesClientSupport(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<CheckEmailFeaturesClientSupportResults> localVarResponse = CheckEmailFeaturesClientSupportWithHttpInfo(checkEmailFeaturesClientSupportOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check email client support for email HTML and CSS features 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CheckEmailFeaturesClientSupportResults</returns>
        public mailslurp.Client.ApiResponse<CheckEmailFeaturesClientSupportResults> CheckEmailFeaturesClientSupportWithHttpInfo(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, int operationIndex = 0)
        {
            // verify the required parameter 'checkEmailFeaturesClientSupportOptions' is set
            if (checkEmailFeaturesClientSupportOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'checkEmailFeaturesClientSupportOptions' when calling ToolsControllerApi->CheckEmailFeaturesClientSupport");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = checkEmailFeaturesClientSupportOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.CheckEmailFeaturesClientSupport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CheckEmailFeaturesClientSupportResults>("/tools/check-email-features-client-support", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckEmailFeaturesClientSupport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check email client support for email HTML and CSS features 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckEmailFeaturesClientSupportResults</returns>
        public async System.Threading.Tasks.Task<CheckEmailFeaturesClientSupportResults> CheckEmailFeaturesClientSupportAsync(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<CheckEmailFeaturesClientSupportResults> localVarResponse = await CheckEmailFeaturesClientSupportWithHttpInfoAsync(checkEmailFeaturesClientSupportOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check email client support for email HTML and CSS features 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkEmailFeaturesClientSupportOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckEmailFeaturesClientSupportResults)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<CheckEmailFeaturesClientSupportResults>> CheckEmailFeaturesClientSupportWithHttpInfoAsync(CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkEmailFeaturesClientSupportOptions' is set
            if (checkEmailFeaturesClientSupportOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'checkEmailFeaturesClientSupportOptions' when calling ToolsControllerApi->CheckEmailFeaturesClientSupport");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = checkEmailFeaturesClientSupportOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.CheckEmailFeaturesClientSupport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CheckEmailFeaturesClientSupportResults>("/tools/check-email-features-client-support", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckEmailFeaturesClientSupport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new email address using the fake email domains 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NewFakeEmailAddressResult</returns>
        public NewFakeEmailAddressResult CreateNewFakeEmailAddress(int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<NewFakeEmailAddressResult> localVarResponse = CreateNewFakeEmailAddressWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new email address using the fake email domains 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NewFakeEmailAddressResult</returns>
        public mailslurp.Client.ApiResponse<NewFakeEmailAddressResult> CreateNewFakeEmailAddressWithHttpInfo(int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ToolsControllerApi.CreateNewFakeEmailAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NewFakeEmailAddressResult>("/tools/fake-email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewFakeEmailAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new email address using the fake email domains 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewFakeEmailAddressResult</returns>
        public async System.Threading.Tasks.Task<NewFakeEmailAddressResult> CreateNewFakeEmailAddressAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<NewFakeEmailAddressResult> localVarResponse = await CreateNewFakeEmailAddressWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new email address using the fake email domains 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewFakeEmailAddressResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<NewFakeEmailAddressResult>> CreateNewFakeEmailAddressWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ToolsControllerApi.CreateNewFakeEmailAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewFakeEmailAddressResult>("/tools/fake-email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewFakeEmailAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a BIMI record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateBimiRecordResults</returns>
        public GenerateBimiRecordResults GenerateBimiRecord(GenerateBimiRecordOptions generateBimiRecordOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<GenerateBimiRecordResults> localVarResponse = GenerateBimiRecordWithHttpInfo(generateBimiRecordOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a BIMI record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateBimiRecordResults</returns>
        public mailslurp.Client.ApiResponse<GenerateBimiRecordResults> GenerateBimiRecordWithHttpInfo(GenerateBimiRecordOptions generateBimiRecordOptions, int operationIndex = 0)
        {
            // verify the required parameter 'generateBimiRecordOptions' is set
            if (generateBimiRecordOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateBimiRecordOptions' when calling ToolsControllerApi->GenerateBimiRecord");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateBimiRecordOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.GenerateBimiRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateBimiRecordResults>("/tools/generate-bimi-record", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateBimiRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a BIMI record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateBimiRecordResults</returns>
        public async System.Threading.Tasks.Task<GenerateBimiRecordResults> GenerateBimiRecordAsync(GenerateBimiRecordOptions generateBimiRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<GenerateBimiRecordResults> localVarResponse = await GenerateBimiRecordWithHttpInfoAsync(generateBimiRecordOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a BIMI record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateBimiRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateBimiRecordResults)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<GenerateBimiRecordResults>> GenerateBimiRecordWithHttpInfoAsync(GenerateBimiRecordOptions generateBimiRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'generateBimiRecordOptions' is set
            if (generateBimiRecordOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateBimiRecordOptions' when calling ToolsControllerApi->GenerateBimiRecord");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateBimiRecordOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.GenerateBimiRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateBimiRecordResults>("/tools/generate-bimi-record", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateBimiRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a DMARC record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateDmarcRecordResults</returns>
        public GenerateDmarcRecordResults GenerateDmarcRecord(GenerateDmarcRecordOptions generateDmarcRecordOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<GenerateDmarcRecordResults> localVarResponse = GenerateDmarcRecordWithHttpInfo(generateDmarcRecordOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a DMARC record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateDmarcRecordResults</returns>
        public mailslurp.Client.ApiResponse<GenerateDmarcRecordResults> GenerateDmarcRecordWithHttpInfo(GenerateDmarcRecordOptions generateDmarcRecordOptions, int operationIndex = 0)
        {
            // verify the required parameter 'generateDmarcRecordOptions' is set
            if (generateDmarcRecordOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateDmarcRecordOptions' when calling ToolsControllerApi->GenerateDmarcRecord");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateDmarcRecordOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.GenerateDmarcRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateDmarcRecordResults>("/tools/generate-dmarc-record", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateDmarcRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a DMARC record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateDmarcRecordResults</returns>
        public async System.Threading.Tasks.Task<GenerateDmarcRecordResults> GenerateDmarcRecordAsync(GenerateDmarcRecordOptions generateDmarcRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<GenerateDmarcRecordResults> localVarResponse = await GenerateDmarcRecordWithHttpInfoAsync(generateDmarcRecordOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a DMARC record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateDmarcRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateDmarcRecordResults)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<GenerateDmarcRecordResults>> GenerateDmarcRecordWithHttpInfoAsync(GenerateDmarcRecordOptions generateDmarcRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'generateDmarcRecordOptions' is set
            if (generateDmarcRecordOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateDmarcRecordOptions' when calling ToolsControllerApi->GenerateDmarcRecord");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateDmarcRecordOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.GenerateDmarcRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateDmarcRecordResults>("/tools/generate-dmarc-record", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateDmarcRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateMtaStsRecordResults</returns>
        public GenerateMtaStsRecordResults GenerateMtaStsRecord(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<GenerateMtaStsRecordResults> localVarResponse = GenerateMtaStsRecordWithHttpInfo(generateMtaStsRecordOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateMtaStsRecordResults</returns>
        public mailslurp.Client.ApiResponse<GenerateMtaStsRecordResults> GenerateMtaStsRecordWithHttpInfo(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, int operationIndex = 0)
        {
            // verify the required parameter 'generateMtaStsRecordOptions' is set
            if (generateMtaStsRecordOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateMtaStsRecordOptions' when calling ToolsControllerApi->GenerateMtaStsRecord");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateMtaStsRecordOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.GenerateMtaStsRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateMtaStsRecordResults>("/tools/generate-mta-sts-record", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateMtaStsRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateMtaStsRecordResults</returns>
        public async System.Threading.Tasks.Task<GenerateMtaStsRecordResults> GenerateMtaStsRecordAsync(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<GenerateMtaStsRecordResults> localVarResponse = await GenerateMtaStsRecordWithHttpInfoAsync(generateMtaStsRecordOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateMtaStsRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateMtaStsRecordResults)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<GenerateMtaStsRecordResults>> GenerateMtaStsRecordWithHttpInfoAsync(GenerateMtaStsRecordOptions generateMtaStsRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'generateMtaStsRecordOptions' is set
            if (generateMtaStsRecordOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateMtaStsRecordOptions' when calling ToolsControllerApi->GenerateMtaStsRecord");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateMtaStsRecordOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.GenerateMtaStsRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateMtaStsRecordResults>("/tools/generate-mta-sts-record", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateMtaStsRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateTlsReportingRecordResults</returns>
        public GenerateTlsReportingRecordResults GenerateTlsReportingRecord(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<GenerateTlsReportingRecordResults> localVarResponse = GenerateTlsReportingRecordWithHttpInfo(generateTlsReportingRecordOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateTlsReportingRecordResults</returns>
        public mailslurp.Client.ApiResponse<GenerateTlsReportingRecordResults> GenerateTlsReportingRecordWithHttpInfo(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, int operationIndex = 0)
        {
            // verify the required parameter 'generateTlsReportingRecordOptions' is set
            if (generateTlsReportingRecordOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateTlsReportingRecordOptions' when calling ToolsControllerApi->GenerateTlsReportingRecord");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateTlsReportingRecordOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.GenerateTlsReportingRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateTlsReportingRecordResults>("/tools/generate-tls-reporting-record", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateTlsReportingRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateTlsReportingRecordResults</returns>
        public async System.Threading.Tasks.Task<GenerateTlsReportingRecordResults> GenerateTlsReportingRecordAsync(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<GenerateTlsReportingRecordResults> localVarResponse = await GenerateTlsReportingRecordWithHttpInfoAsync(generateTlsReportingRecordOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a TLS reporting record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateTlsReportingRecordOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateTlsReportingRecordResults)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<GenerateTlsReportingRecordResults>> GenerateTlsReportingRecordWithHttpInfoAsync(GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'generateTlsReportingRecordOptions' is set
            if (generateTlsReportingRecordOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'generateTlsReportingRecordOptions' when calling ToolsControllerApi->GenerateTlsReportingRecord");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = generateTlsReportingRecordOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.GenerateTlsReportingRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateTlsReportingRecordResults>("/tools/generate-tls-reporting-record", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateTlsReportingRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FakeEmailResult</returns>
        public FakeEmailResult GetFakeEmailById(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<FakeEmailResult> localVarResponse = GetFakeEmailByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FakeEmailResult</returns>
        public mailslurp.Client.ApiResponse<FakeEmailResult> GetFakeEmailByIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "ToolsControllerApi.GetFakeEmailById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FakeEmailResult>("/tools/fake-email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFakeEmailById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FakeEmailResult</returns>
        public async System.Threading.Tasks.Task<FakeEmailResult> GetFakeEmailByIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<FakeEmailResult> localVarResponse = await GetFakeEmailByIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FakeEmailResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<FakeEmailResult>> GetFakeEmailByIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "ToolsControllerApi.GetFakeEmailById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FakeEmailResult>("/tools/fake-email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFakeEmailById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FakeEmailPreview&gt;</returns>
        public List<FakeEmailPreview> GetFakeEmailsForAddress(string emailAddress, int? page = default(int?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<List<FakeEmailPreview>> localVarResponse = GetFakeEmailsForAddressWithHttpInfo(emailAddress, page);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FakeEmailPreview&gt;</returns>
        public mailslurp.Client.ApiResponse<List<FakeEmailPreview>> GetFakeEmailsForAddressWithHttpInfo(string emailAddress, int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'emailAddress' is set
            if (emailAddress == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailAddress' when calling ToolsControllerApi->GetFakeEmailsForAddress");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));

            localVarRequestOptions.Operation = "ToolsControllerApi.GetFakeEmailsForAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FakeEmailPreview>>("/tools/fake-emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFakeEmailsForAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FakeEmailPreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<FakeEmailPreview>> GetFakeEmailsForAddressAsync(string emailAddress, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<List<FakeEmailPreview>> localVarResponse = await GetFakeEmailsForAddressWithHttpInfoAsync(emailAddress, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FakeEmailPreview&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<FakeEmailPreview>>> GetFakeEmailsForAddressWithHttpInfoAsync(string emailAddress, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'emailAddress' is set
            if (emailAddress == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailAddress' when calling ToolsControllerApi->GetFakeEmailsForAddress");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));

            localVarRequestOptions.Operation = "ToolsControllerApi.GetFakeEmailsForAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FakeEmailPreview>>("/tools/fake-emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFakeEmailsForAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup a BIMI record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LookupBimiDomainResults</returns>
        public LookupBimiDomainResults LookupBimiDomain(LookupBimiDomainOptions lookupBimiDomainOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<LookupBimiDomainResults> localVarResponse = LookupBimiDomainWithHttpInfo(lookupBimiDomainOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup a BIMI record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LookupBimiDomainResults</returns>
        public mailslurp.Client.ApiResponse<LookupBimiDomainResults> LookupBimiDomainWithHttpInfo(LookupBimiDomainOptions lookupBimiDomainOptions, int operationIndex = 0)
        {
            // verify the required parameter 'lookupBimiDomainOptions' is set
            if (lookupBimiDomainOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'lookupBimiDomainOptions' when calling ToolsControllerApi->LookupBimiDomain");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupBimiDomainOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.LookupBimiDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LookupBimiDomainResults>("/tools/lookup-bimi-domain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupBimiDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup a BIMI record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupBimiDomainResults</returns>
        public async System.Threading.Tasks.Task<LookupBimiDomainResults> LookupBimiDomainAsync(LookupBimiDomainOptions lookupBimiDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<LookupBimiDomainResults> localVarResponse = await LookupBimiDomainWithHttpInfoAsync(lookupBimiDomainOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup a BIMI record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupBimiDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupBimiDomainResults)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<LookupBimiDomainResults>> LookupBimiDomainWithHttpInfoAsync(LookupBimiDomainOptions lookupBimiDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lookupBimiDomainOptions' is set
            if (lookupBimiDomainOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'lookupBimiDomainOptions' when calling ToolsControllerApi->LookupBimiDomain");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupBimiDomainOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.LookupBimiDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LookupBimiDomainResults>("/tools/lookup-bimi-domain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupBimiDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup a DMARC record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LookupDmarcDomainResults</returns>
        public LookupDmarcDomainResults LookupDmarcDomain(LookupDmarcDomainOptions lookupDmarcDomainOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<LookupDmarcDomainResults> localVarResponse = LookupDmarcDomainWithHttpInfo(lookupDmarcDomainOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup a DMARC record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LookupDmarcDomainResults</returns>
        public mailslurp.Client.ApiResponse<LookupDmarcDomainResults> LookupDmarcDomainWithHttpInfo(LookupDmarcDomainOptions lookupDmarcDomainOptions, int operationIndex = 0)
        {
            // verify the required parameter 'lookupDmarcDomainOptions' is set
            if (lookupDmarcDomainOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'lookupDmarcDomainOptions' when calling ToolsControllerApi->LookupDmarcDomain");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupDmarcDomainOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.LookupDmarcDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LookupDmarcDomainResults>("/tools/lookup-dmarc-domain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupDmarcDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup a DMARC record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupDmarcDomainResults</returns>
        public async System.Threading.Tasks.Task<LookupDmarcDomainResults> LookupDmarcDomainAsync(LookupDmarcDomainOptions lookupDmarcDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<LookupDmarcDomainResults> localVarResponse = await LookupDmarcDomainWithHttpInfoAsync(lookupDmarcDomainOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup a DMARC record policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupDmarcDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupDmarcDomainResults)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<LookupDmarcDomainResults>> LookupDmarcDomainWithHttpInfoAsync(LookupDmarcDomainOptions lookupDmarcDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lookupDmarcDomainOptions' is set
            if (lookupDmarcDomainOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'lookupDmarcDomainOptions' when calling ToolsControllerApi->LookupDmarcDomain");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupDmarcDomainOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.LookupDmarcDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LookupDmarcDomainResults>("/tools/lookup-dmarc-domain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupDmarcDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup a MTA-STS domain policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LookupMtaStsDomainResults</returns>
        public LookupMtaStsDomainResults LookupMtaStsDomain(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<LookupMtaStsDomainResults> localVarResponse = LookupMtaStsDomainWithHttpInfo(lookupMtaStsDomainOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup a MTA-STS domain policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LookupMtaStsDomainResults</returns>
        public mailslurp.Client.ApiResponse<LookupMtaStsDomainResults> LookupMtaStsDomainWithHttpInfo(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, int operationIndex = 0)
        {
            // verify the required parameter 'lookupMtaStsDomainOptions' is set
            if (lookupMtaStsDomainOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'lookupMtaStsDomainOptions' when calling ToolsControllerApi->LookupMtaStsDomain");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupMtaStsDomainOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.LookupMtaStsDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LookupMtaStsDomainResults>("/tools/lookup-mta-sts-domain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupMtaStsDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup a MTA-STS domain policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupMtaStsDomainResults</returns>
        public async System.Threading.Tasks.Task<LookupMtaStsDomainResults> LookupMtaStsDomainAsync(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<LookupMtaStsDomainResults> localVarResponse = await LookupMtaStsDomainWithHttpInfoAsync(lookupMtaStsDomainOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup a MTA-STS domain policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupMtaStsDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupMtaStsDomainResults)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<LookupMtaStsDomainResults>> LookupMtaStsDomainWithHttpInfoAsync(LookupMtaStsDomainOptions lookupMtaStsDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lookupMtaStsDomainOptions' is set
            if (lookupMtaStsDomainOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'lookupMtaStsDomainOptions' when calling ToolsControllerApi->LookupMtaStsDomain");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupMtaStsDomainOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.LookupMtaStsDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LookupMtaStsDomainResults>("/tools/lookup-mta-sts-domain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupMtaStsDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup a TLS reporting domain policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LookupTlsReportingDomainResults</returns>
        public LookupTlsReportingDomainResults LookupTlsReportingDomain(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<LookupTlsReportingDomainResults> localVarResponse = LookupTlsReportingDomainWithHttpInfo(lookupTlsReportingDomainOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup a TLS reporting domain policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LookupTlsReportingDomainResults</returns>
        public mailslurp.Client.ApiResponse<LookupTlsReportingDomainResults> LookupTlsReportingDomainWithHttpInfo(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, int operationIndex = 0)
        {
            // verify the required parameter 'lookupTlsReportingDomainOptions' is set
            if (lookupTlsReportingDomainOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'lookupTlsReportingDomainOptions' when calling ToolsControllerApi->LookupTlsReportingDomain");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupTlsReportingDomainOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.LookupTlsReportingDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LookupTlsReportingDomainResults>("/tools/lookup-tls-reporting-domain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupTlsReportingDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lookup a TLS reporting domain policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupTlsReportingDomainResults</returns>
        public async System.Threading.Tasks.Task<LookupTlsReportingDomainResults> LookupTlsReportingDomainAsync(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<LookupTlsReportingDomainResults> localVarResponse = await LookupTlsReportingDomainWithHttpInfoAsync(lookupTlsReportingDomainOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup a TLS reporting domain policy 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupTlsReportingDomainOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupTlsReportingDomainResults)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<LookupTlsReportingDomainResults>> LookupTlsReportingDomainWithHttpInfoAsync(LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lookupTlsReportingDomainOptions' is set
            if (lookupTlsReportingDomainOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'lookupTlsReportingDomainOptions' when calling ToolsControllerApi->LookupTlsReportingDomain");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupTlsReportingDomainOptions;

            localVarRequestOptions.Operation = "ToolsControllerApi.LookupTlsReportingDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LookupTlsReportingDomainResults>("/tools/lookup-tls-reporting-domain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupTlsReportingDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
