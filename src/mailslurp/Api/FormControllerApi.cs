// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFormControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FormControllerApiEvents Events { get; }

        /// <summary>
        /// Submit a form to be parsed and sent as an email to an address determined by the form fields
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to submit HTML forms and receive the field values and files via email.   #### Parameters The endpoint looks for special meta parameters in the form fields OR in the URL request parameters. The meta parameters can be used to specify the behaviour of the email.   You must provide at-least a &#x60;_to&#x60; email address to tell the endpoint where the form should be emailed. These can be submitted as hidden HTML input fields with the corresponding &#x60;name&#x60; attributes or as URL query parameters such as &#x60;?_to&#x3D;test@example.com&#x60;  The endpoint takes all other form fields that are named and includes them in the message body of the email. Files are sent as attachments.  #### Submitting This endpoint accepts form submission via POST method. It accepts &#x60;application/x-www-form-urlencoded&#x60;, and &#x60;multipart/form-data&#x60; content-types.  #### HTML Example &#x60;&#x60;&#x60;html &lt;form    action&#x3D;\&quot;https://csharp.api.mailslurp.com/forms\&quot;   method&#x3D;\&quot;post\&quot; &gt;   &lt;input name&#x3D;\&quot;_to\&quot; type&#x3D;\&quot;hidden\&quot; value&#x3D;\&quot;test@example.com\&quot;/&gt;   &lt;textarea name&#x3D;\&quot;feedback\&quot;&gt;&lt;/textarea&gt;   &lt;button type&#x3D;\&quot;submit\&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &#x60;&#x60;&#x60;  #### URL Example &#x60;&#x60;&#x60;html &lt;form    action&#x3D;\&quot;https://csharp.api.mailslurp.com/forms?_to&#x3D;test@example.com\&quot;   method&#x3D;\&quot;post\&quot; &gt;   &lt;textarea name&#x3D;\&quot;feedback\&quot;&gt;&lt;/textarea&gt;   &lt;button type&#x3D;\&quot;submit\&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &#x60;&#x60;&#x60;    The email address is specified by a &#x60;_to&#x60; field OR is extracted from an email alias specified by a &#x60;_toAlias&#x60; field (see the alias controller for more information).  Endpoint accepts .  You can specify a content type in HTML forms using the &#x60;enctype&#x60; attribute, for instance: &#x60;&lt;form enctype&#x3D;\&quot;multipart/form-data\&quot;&gt;&#x60;.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The email address that submitted form should be sent to. (optional)</param>
        /// <param name="subject">Optional subject of the email that will be sent. (optional)</param>
        /// <param name="redirectTo">Optional URL to redirect form submitter to after submission. If not present user will see a success message. (optional)</param>
        /// <param name="emailAddress">Email address of the submitting user. Include this if you wish to record the submitters email address and reply to it later. (optional)</param>
        /// <param name="successMessage">Optional success message to display if no _redirectTo present. (optional)</param>
        /// <param name="spamCheck">Optional but recommended field that catches spammers out. Include as a hidden form field but LEAVE EMPTY. Spam-bots will usually fill every field. If the _spamCheck field is filled the form submission will be ignored. (optional)</param>
        /// <param name="otherParameters">All other parameters or fields will be accepted and attached to the sent email. This includes files and any HTML form field with a name. These fields will become the body of the email that is sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitFormApiResponse"/>&gt;</returns>
        Task<ISubmitFormApiResponse> SubmitFormAsync(Option<string> to = default, Option<string> subject = default, Option<string> redirectTo = default, Option<string> emailAddress = default, Option<string> successMessage = default, Option<string> spamCheck = default, Option<string> otherParameters = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Submit a form to be parsed and sent as an email to an address determined by the form fields
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to submit HTML forms and receive the field values and files via email.   #### Parameters The endpoint looks for special meta parameters in the form fields OR in the URL request parameters. The meta parameters can be used to specify the behaviour of the email.   You must provide at-least a &#x60;_to&#x60; email address to tell the endpoint where the form should be emailed. These can be submitted as hidden HTML input fields with the corresponding &#x60;name&#x60; attributes or as URL query parameters such as &#x60;?_to&#x3D;test@example.com&#x60;  The endpoint takes all other form fields that are named and includes them in the message body of the email. Files are sent as attachments.  #### Submitting This endpoint accepts form submission via POST method. It accepts &#x60;application/x-www-form-urlencoded&#x60;, and &#x60;multipart/form-data&#x60; content-types.  #### HTML Example &#x60;&#x60;&#x60;html &lt;form    action&#x3D;\&quot;https://csharp.api.mailslurp.com/forms\&quot;   method&#x3D;\&quot;post\&quot; &gt;   &lt;input name&#x3D;\&quot;_to\&quot; type&#x3D;\&quot;hidden\&quot; value&#x3D;\&quot;test@example.com\&quot;/&gt;   &lt;textarea name&#x3D;\&quot;feedback\&quot;&gt;&lt;/textarea&gt;   &lt;button type&#x3D;\&quot;submit\&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &#x60;&#x60;&#x60;  #### URL Example &#x60;&#x60;&#x60;html &lt;form    action&#x3D;\&quot;https://csharp.api.mailslurp.com/forms?_to&#x3D;test@example.com\&quot;   method&#x3D;\&quot;post\&quot; &gt;   &lt;textarea name&#x3D;\&quot;feedback\&quot;&gt;&lt;/textarea&gt;   &lt;button type&#x3D;\&quot;submit\&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &#x60;&#x60;&#x60;    The email address is specified by a &#x60;_to&#x60; field OR is extracted from an email alias specified by a &#x60;_toAlias&#x60; field (see the alias controller for more information).  Endpoint accepts .  You can specify a content type in HTML forms using the &#x60;enctype&#x60; attribute, for instance: &#x60;&lt;form enctype&#x3D;\&quot;multipart/form-data\&quot;&gt;&#x60;.  
        /// </remarks>
        /// <param name="to">The email address that submitted form should be sent to. (optional)</param>
        /// <param name="subject">Optional subject of the email that will be sent. (optional)</param>
        /// <param name="redirectTo">Optional URL to redirect form submitter to after submission. If not present user will see a success message. (optional)</param>
        /// <param name="emailAddress">Email address of the submitting user. Include this if you wish to record the submitters email address and reply to it later. (optional)</param>
        /// <param name="successMessage">Optional success message to display if no _redirectTo present. (optional)</param>
        /// <param name="spamCheck">Optional but recommended field that catches spammers out. Include as a hidden form field but LEAVE EMPTY. Spam-bots will usually fill every field. If the _spamCheck field is filled the form submission will be ignored. (optional)</param>
        /// <param name="otherParameters">All other parameters or fields will be accepted and attached to the sent email. This includes files and any HTML form field with a name. These fields will become the body of the email that is sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitFormApiResponse"/>&gt;</returns>
        Task<ISubmitFormApiResponse> SubmitFormOrDefaultAsync(Option<string> to = default, Option<string> subject = default, Option<string> redirectTo = default, Option<string> emailAddress = default, Option<string> successMessage = default, Option<string> spamCheck = default, Option<string> otherParameters = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ISubmitFormApiResponse"/>
    /// </summary>
    public interface ISubmitFormApiResponse : mailslurp.Client.IApiResponse, IOk<string>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FormControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSubmitForm;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSubmitForm;

        internal void ExecuteOnSubmitForm(FormControllerApi.SubmitFormApiResponse apiResponse)
        {
            OnSubmitForm?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSubmitForm(Exception exception)
        {
            OnErrorSubmitForm?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FormControllerApi : IFormControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FormControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FormControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FormControllerApi(ILogger<FormControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FormControllerApiEvents formControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FormControllerApi>();
            HttpClient = httpClient;
            Events = formControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatSubmitForm(ref Option<string> to, ref Option<string> subject, ref Option<string> redirectTo, ref Option<string> emailAddress, ref Option<string> successMessage, ref Option<string> spamCheck, ref Option<string> otherParameters);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="redirectTo"></param>
        /// <param name="emailAddress"></param>
        /// <param name="successMessage"></param>
        /// <param name="spamCheck"></param>
        /// <param name="otherParameters"></param>
        /// <returns></returns>
        private void ValidateSubmitForm(Option<string> to, Option<string> subject, Option<string> redirectTo, Option<string> emailAddress, Option<string> successMessage, Option<string> spamCheck, Option<string> otherParameters)
        {
            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to));

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject));

            if (redirectTo.IsSet && redirectTo.Value == null)
                throw new ArgumentNullException(nameof(redirectTo));

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress));

            if (successMessage.IsSet && successMessage.Value == null)
                throw new ArgumentNullException(nameof(successMessage));

            if (spamCheck.IsSet && spamCheck.Value == null)
                throw new ArgumentNullException(nameof(spamCheck));

            if (otherParameters.IsSet && otherParameters.Value == null)
                throw new ArgumentNullException(nameof(otherParameters));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="redirectTo"></param>
        /// <param name="emailAddress"></param>
        /// <param name="successMessage"></param>
        /// <param name="spamCheck"></param>
        /// <param name="otherParameters"></param>
        private void AfterSubmitFormDefaultImplementation(ISubmitFormApiResponse apiResponseLocalVar, Option<string> to, Option<string> subject, Option<string> redirectTo, Option<string> emailAddress, Option<string> successMessage, Option<string> spamCheck, Option<string> otherParameters)
        {
            bool suppressDefaultLog = false;
            AfterSubmitForm(ref suppressDefaultLog, apiResponseLocalVar, to, subject, redirectTo, emailAddress, successMessage, spamCheck, otherParameters);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="redirectTo"></param>
        /// <param name="emailAddress"></param>
        /// <param name="successMessage"></param>
        /// <param name="spamCheck"></param>
        /// <param name="otherParameters"></param>
        partial void AfterSubmitForm(ref bool suppressDefaultLog, ISubmitFormApiResponse apiResponseLocalVar, Option<string> to, Option<string> subject, Option<string> redirectTo, Option<string> emailAddress, Option<string> successMessage, Option<string> spamCheck, Option<string> otherParameters);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="redirectTo"></param>
        /// <param name="emailAddress"></param>
        /// <param name="successMessage"></param>
        /// <param name="spamCheck"></param>
        /// <param name="otherParameters"></param>
        private void OnErrorSubmitFormDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> to, Option<string> subject, Option<string> redirectTo, Option<string> emailAddress, Option<string> successMessage, Option<string> spamCheck, Option<string> otherParameters)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSubmitForm(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, to, subject, redirectTo, emailAddress, successMessage, spamCheck, otherParameters);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="redirectTo"></param>
        /// <param name="emailAddress"></param>
        /// <param name="successMessage"></param>
        /// <param name="spamCheck"></param>
        /// <param name="otherParameters"></param>
        partial void OnErrorSubmitForm(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> to, Option<string> subject, Option<string> redirectTo, Option<string> emailAddress, Option<string> successMessage, Option<string> spamCheck, Option<string> otherParameters);

        /// <summary>
        /// Submit a form to be parsed and sent as an email to an address determined by the form fields This endpoint allows you to submit HTML forms and receive the field values and files via email.   #### Parameters The endpoint looks for special meta parameters in the form fields OR in the URL request parameters. The meta parameters can be used to specify the behaviour of the email.   You must provide at-least a &#x60;_to&#x60; email address to tell the endpoint where the form should be emailed. These can be submitted as hidden HTML input fields with the corresponding &#x60;name&#x60; attributes or as URL query parameters such as &#x60;?_to&#x3D;test@example.com&#x60;  The endpoint takes all other form fields that are named and includes them in the message body of the email. Files are sent as attachments.  #### Submitting This endpoint accepts form submission via POST method. It accepts &#x60;application/x-www-form-urlencoded&#x60;, and &#x60;multipart/form-data&#x60; content-types.  #### HTML Example &#x60;&#x60;&#x60;html &lt;form    action&#x3D;\&quot;https://csharp.api.mailslurp.com/forms\&quot;   method&#x3D;\&quot;post\&quot; &gt;   &lt;input name&#x3D;\&quot;_to\&quot; type&#x3D;\&quot;hidden\&quot; value&#x3D;\&quot;test@example.com\&quot;/&gt;   &lt;textarea name&#x3D;\&quot;feedback\&quot;&gt;&lt;/textarea&gt;   &lt;button type&#x3D;\&quot;submit\&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &#x60;&#x60;&#x60;  #### URL Example &#x60;&#x60;&#x60;html &lt;form    action&#x3D;\&quot;https://csharp.api.mailslurp.com/forms?_to&#x3D;test@example.com\&quot;   method&#x3D;\&quot;post\&quot; &gt;   &lt;textarea name&#x3D;\&quot;feedback\&quot;&gt;&lt;/textarea&gt;   &lt;button type&#x3D;\&quot;submit\&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &#x60;&#x60;&#x60;    The email address is specified by a &#x60;_to&#x60; field OR is extracted from an email alias specified by a &#x60;_toAlias&#x60; field (see the alias controller for more information).  Endpoint accepts .  You can specify a content type in HTML forms using the &#x60;enctype&#x60; attribute, for instance: &#x60;&lt;form enctype&#x3D;\&quot;multipart/form-data\&quot;&gt;&#x60;.  
        /// </summary>
        /// <param name="to">The email address that submitted form should be sent to. (optional)</param>
        /// <param name="subject">Optional subject of the email that will be sent. (optional)</param>
        /// <param name="redirectTo">Optional URL to redirect form submitter to after submission. If not present user will see a success message. (optional)</param>
        /// <param name="emailAddress">Email address of the submitting user. Include this if you wish to record the submitters email address and reply to it later. (optional)</param>
        /// <param name="successMessage">Optional success message to display if no _redirectTo present. (optional)</param>
        /// <param name="spamCheck">Optional but recommended field that catches spammers out. Include as a hidden form field but LEAVE EMPTY. Spam-bots will usually fill every field. If the _spamCheck field is filled the form submission will be ignored. (optional)</param>
        /// <param name="otherParameters">All other parameters or fields will be accepted and attached to the sent email. This includes files and any HTML form field with a name. These fields will become the body of the email that is sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitFormApiResponse"/>&gt;</returns>
        public async Task<ISubmitFormApiResponse> SubmitFormOrDefaultAsync(Option<string> to = default, Option<string> subject = default, Option<string> redirectTo = default, Option<string> emailAddress = default, Option<string> successMessage = default, Option<string> spamCheck = default, Option<string> otherParameters = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SubmitFormAsync(to, subject, redirectTo, emailAddress, successMessage, spamCheck, otherParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Submit a form to be parsed and sent as an email to an address determined by the form fields This endpoint allows you to submit HTML forms and receive the field values and files via email.   #### Parameters The endpoint looks for special meta parameters in the form fields OR in the URL request parameters. The meta parameters can be used to specify the behaviour of the email.   You must provide at-least a &#x60;_to&#x60; email address to tell the endpoint where the form should be emailed. These can be submitted as hidden HTML input fields with the corresponding &#x60;name&#x60; attributes or as URL query parameters such as &#x60;?_to&#x3D;test@example.com&#x60;  The endpoint takes all other form fields that are named and includes them in the message body of the email. Files are sent as attachments.  #### Submitting This endpoint accepts form submission via POST method. It accepts &#x60;application/x-www-form-urlencoded&#x60;, and &#x60;multipart/form-data&#x60; content-types.  #### HTML Example &#x60;&#x60;&#x60;html &lt;form    action&#x3D;\&quot;https://csharp.api.mailslurp.com/forms\&quot;   method&#x3D;\&quot;post\&quot; &gt;   &lt;input name&#x3D;\&quot;_to\&quot; type&#x3D;\&quot;hidden\&quot; value&#x3D;\&quot;test@example.com\&quot;/&gt;   &lt;textarea name&#x3D;\&quot;feedback\&quot;&gt;&lt;/textarea&gt;   &lt;button type&#x3D;\&quot;submit\&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &#x60;&#x60;&#x60;  #### URL Example &#x60;&#x60;&#x60;html &lt;form    action&#x3D;\&quot;https://csharp.api.mailslurp.com/forms?_to&#x3D;test@example.com\&quot;   method&#x3D;\&quot;post\&quot; &gt;   &lt;textarea name&#x3D;\&quot;feedback\&quot;&gt;&lt;/textarea&gt;   &lt;button type&#x3D;\&quot;submit\&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &#x60;&#x60;&#x60;    The email address is specified by a &#x60;_to&#x60; field OR is extracted from an email alias specified by a &#x60;_toAlias&#x60; field (see the alias controller for more information).  Endpoint accepts .  You can specify a content type in HTML forms using the &#x60;enctype&#x60; attribute, for instance: &#x60;&lt;form enctype&#x3D;\&quot;multipart/form-data\&quot;&gt;&#x60;.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">The email address that submitted form should be sent to. (optional)</param>
        /// <param name="subject">Optional subject of the email that will be sent. (optional)</param>
        /// <param name="redirectTo">Optional URL to redirect form submitter to after submission. If not present user will see a success message. (optional)</param>
        /// <param name="emailAddress">Email address of the submitting user. Include this if you wish to record the submitters email address and reply to it later. (optional)</param>
        /// <param name="successMessage">Optional success message to display if no _redirectTo present. (optional)</param>
        /// <param name="spamCheck">Optional but recommended field that catches spammers out. Include as a hidden form field but LEAVE EMPTY. Spam-bots will usually fill every field. If the _spamCheck field is filled the form submission will be ignored. (optional)</param>
        /// <param name="otherParameters">All other parameters or fields will be accepted and attached to the sent email. This includes files and any HTML form field with a name. These fields will become the body of the email that is sent. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitFormApiResponse"/>&gt;</returns>
        public async Task<ISubmitFormApiResponse> SubmitFormAsync(Option<string> to = default, Option<string> subject = default, Option<string> redirectTo = default, Option<string> emailAddress = default, Option<string> successMessage = default, Option<string> spamCheck = default, Option<string> otherParameters = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSubmitForm(to, subject, redirectTo, emailAddress, successMessage, spamCheck, otherParameters);

                FormatSubmitForm(ref to, ref subject, ref redirectTo, ref emailAddress, ref successMessage, ref spamCheck, ref otherParameters);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forms");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (to.IsSet)
                        parseQueryStringLocalVar["_to"] = ClientUtils.ParameterToString(to.Value);

                    if (subject.IsSet)
                        parseQueryStringLocalVar["_subject"] = ClientUtils.ParameterToString(subject.Value);

                    if (redirectTo.IsSet)
                        parseQueryStringLocalVar["_redirectTo"] = ClientUtils.ParameterToString(redirectTo.Value);

                    if (emailAddress.IsSet)
                        parseQueryStringLocalVar["_emailAddress"] = ClientUtils.ParameterToString(emailAddress.Value);

                    if (successMessage.IsSet)
                        parseQueryStringLocalVar["_successMessage"] = ClientUtils.ParameterToString(successMessage.Value);

                    if (spamCheck.IsSet)
                        parseQueryStringLocalVar["_spamCheck"] = ClientUtils.ParameterToString(spamCheck.Value);

                    if (otherParameters.IsSet)
                        parseQueryStringLocalVar["otherParameters"] = ClientUtils.ParameterToString(otherParameters.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SubmitFormApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SubmitFormApiResponse>();

                        SubmitFormApiResponse apiResponseLocalVar = new SubmitFormApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSubmitFormDefaultImplementation(apiResponseLocalVar, to, subject, redirectTo, emailAddress, successMessage, spamCheck, otherParameters);

                        Events.ExecuteOnSubmitForm(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSubmitFormDefaultImplementation(e, "/forms", uriBuilderLocalVar.Path, to, subject, redirectTo, emailAddress, successMessage, spamCheck, otherParameters);
                Events.ExecuteOnErrorSubmitForm(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SubmitFormApiResponse"/>
        /// </summary>
        public partial class SubmitFormApiResponse : mailslurp.Client.ApiResponse, ISubmitFormApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SubmitFormApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SubmitFormApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubmitFormApiResponse(ILogger<SubmitFormApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out string result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
