/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxForwarderControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderDto</returns>
        InboxForwarderDto CreateNewInboxForwarder(Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0);

        /// <summary>
        /// Create an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderDto</returns>
        ApiResponse<InboxForwarderDto> CreateNewInboxForwarderWithHttpInfo(Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0);
        /// <summary>
        /// Delete an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteInboxForwarder(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboxForwarderWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Delete inbox forwarders
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarders. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteInboxForwarders(Guid? inboxId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Delete inbox forwarders
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarders. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboxForwardersWithHttpInfo(Guid? inboxId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get all inbox forwarder events
        /// </summary>
        /// <remarks>
        /// Get all inbox forwarder events
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageInboxForwarderEvents</returns>
        PageInboxForwarderEvents GetAllInboxForwarderEvents(int? page = default(int?), int? size = default(int?), Guid? inboxId = default(Guid?), string sort = default(string), int operationIndex = 0);

        /// <summary>
        /// Get all inbox forwarder events
        /// </summary>
        /// <remarks>
        /// Get all inbox forwarder events
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageInboxForwarderEvents</returns>
        ApiResponse<PageInboxForwarderEvents> GetAllInboxForwarderEventsWithHttpInfo(int? page = default(int?), int? size = default(int?), Guid? inboxId = default(Guid?), string sort = default(string), int operationIndex = 0);
        /// <summary>
        /// Get a forwarder event
        /// </summary>
        /// <remarks>
        /// Get forwarder event
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderEventDto</returns>
        InboxForwarderEventDto GetForwarderEvent(Guid eventId, int operationIndex = 0);

        /// <summary>
        /// Get a forwarder event
        /// </summary>
        /// <remarks>
        /// Get forwarder event
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderEventDto</returns>
        ApiResponse<InboxForwarderEventDto> GetForwarderEventWithHttpInfo(Guid eventId, int operationIndex = 0);
        /// <summary>
        /// Get an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderDto</returns>
        InboxForwarderDto GetInboxForwarder(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderDto</returns>
        ApiResponse<InboxForwarderDto> GetInboxForwarderWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get an inbox forwarder event
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder event
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderEventDto</returns>
        InboxForwarderEventDto GetInboxForwarderEvent(Guid id, Guid eventId, int operationIndex = 0);

        /// <summary>
        /// Get an inbox forwarder event
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder event
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderEventDto</returns>
        ApiResponse<InboxForwarderEventDto> GetInboxForwarderEventWithHttpInfo(Guid id, Guid eventId, int operationIndex = 0);
        /// <summary>
        /// Get an inbox forwarder event list
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder events
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageInboxForwarderEvents</returns>
        PageInboxForwarderEvents GetInboxForwarderEvents(Guid id, int? page = default(int?), int? size = default(int?), string sort = default(string), int operationIndex = 0);

        /// <summary>
        /// Get an inbox forwarder event list
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder events
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageInboxForwarderEvents</returns>
        ApiResponse<PageInboxForwarderEvents> GetInboxForwarderEventsWithHttpInfo(Guid id, int? page = default(int?), int? size = default(int?), string sort = default(string), int operationIndex = 0);
        /// <summary>
        /// List inbox forwarders
        /// </summary>
        /// <remarks>
        /// List all forwarders attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageInboxForwarderDto</returns>
        PageInboxForwarderDto GetInboxForwarders(Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// List inbox forwarders
        /// </summary>
        /// <remarks>
        /// List all forwarders attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageInboxForwarderDto</returns>
        ApiResponse<PageInboxForwarderDto> GetInboxForwardersWithHttpInfo(Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Test an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test an inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderTestResult</returns>
        InboxForwarderTestResult TestInboxForwarder(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0);

        /// <summary>
        /// Test an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test an inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        ApiResponse<InboxForwarderTestResult> TestInboxForwarderWithHttpInfo(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0);
        /// <summary>
        /// Test inbox forwarders for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox forwarders for inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderTestResult</returns>
        InboxForwarderTestResult TestInboxForwardersForInbox(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0);

        /// <summary>
        /// Test inbox forwarders for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox forwarders for inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        ApiResponse<InboxForwarderTestResult> TestInboxForwardersForInboxWithHttpInfo(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0);
        /// <summary>
        /// Test new inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test new inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderTestResult</returns>
        InboxForwarderTestResult TestNewInboxForwarder(TestNewInboxForwarderOptions testNewInboxForwarderOptions, int operationIndex = 0);

        /// <summary>
        /// Test new inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test new inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        ApiResponse<InboxForwarderTestResult> TestNewInboxForwarderWithHttpInfo(TestNewInboxForwarderOptions testNewInboxForwarderOptions, int operationIndex = 0);
        /// <summary>
        /// Update an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Update inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderDto</returns>
        InboxForwarderDto UpdateInboxForwarder(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0);

        /// <summary>
        /// Update an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Update inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderDto</returns>
        ApiResponse<InboxForwarderDto> UpdateInboxForwarderWithHttpInfo(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxForwarderControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderDto</returns>
        System.Threading.Tasks.Task<InboxForwarderDto> CreateNewInboxForwarderAsync(Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderDto>> CreateNewInboxForwarderWithHttpInfoAsync(Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboxForwarderAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboxForwarderWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete inbox forwarders
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarders. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboxForwardersAsync(Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete inbox forwarders
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarders. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboxForwardersWithHttpInfoAsync(Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all inbox forwarder events
        /// </summary>
        /// <remarks>
        /// Get all inbox forwarder events
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageInboxForwarderEvents</returns>
        System.Threading.Tasks.Task<PageInboxForwarderEvents> GetAllInboxForwarderEventsAsync(int? page = default(int?), int? size = default(int?), Guid? inboxId = default(Guid?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all inbox forwarder events
        /// </summary>
        /// <remarks>
        /// Get all inbox forwarder events
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageInboxForwarderEvents)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageInboxForwarderEvents>> GetAllInboxForwarderEventsWithHttpInfoAsync(int? page = default(int?), int? size = default(int?), Guid? inboxId = default(Guid?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a forwarder event
        /// </summary>
        /// <remarks>
        /// Get forwarder event
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderEventDto</returns>
        System.Threading.Tasks.Task<InboxForwarderEventDto> GetForwarderEventAsync(Guid eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a forwarder event
        /// </summary>
        /// <remarks>
        /// Get forwarder event
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderEventDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderEventDto>> GetForwarderEventWithHttpInfoAsync(Guid eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderDto</returns>
        System.Threading.Tasks.Task<InboxForwarderDto> GetInboxForwarderAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderDto>> GetInboxForwarderWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an inbox forwarder event
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder event
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderEventDto</returns>
        System.Threading.Tasks.Task<InboxForwarderEventDto> GetInboxForwarderEventAsync(Guid id, Guid eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an inbox forwarder event
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder event
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderEventDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderEventDto>> GetInboxForwarderEventWithHttpInfoAsync(Guid id, Guid eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an inbox forwarder event list
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder events
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageInboxForwarderEvents</returns>
        System.Threading.Tasks.Task<PageInboxForwarderEvents> GetInboxForwarderEventsAsync(Guid id, int? page = default(int?), int? size = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an inbox forwarder event list
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder events
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageInboxForwarderEvents)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageInboxForwarderEvents>> GetInboxForwarderEventsWithHttpInfoAsync(Guid id, int? page = default(int?), int? size = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List inbox forwarders
        /// </summary>
        /// <remarks>
        /// List all forwarders attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageInboxForwarderDto</returns>
        System.Threading.Tasks.Task<PageInboxForwarderDto> GetInboxForwardersAsync(Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List inbox forwarders
        /// </summary>
        /// <remarks>
        /// List all forwarders attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageInboxForwarderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageInboxForwarderDto>> GetInboxForwardersWithHttpInfoAsync(Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test an inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        System.Threading.Tasks.Task<InboxForwarderTestResult> TestInboxForwarderAsync(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test an inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderTestResult>> TestInboxForwarderWithHttpInfoAsync(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test inbox forwarders for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox forwarders for inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        System.Threading.Tasks.Task<InboxForwarderTestResult> TestInboxForwardersForInboxAsync(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test inbox forwarders for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox forwarders for inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderTestResult>> TestInboxForwardersForInboxWithHttpInfoAsync(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test new inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test new inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        System.Threading.Tasks.Task<InboxForwarderTestResult> TestNewInboxForwarderAsync(TestNewInboxForwarderOptions testNewInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test new inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test new inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderTestResult>> TestNewInboxForwarderWithHttpInfoAsync(TestNewInboxForwarderOptions testNewInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Update inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderDto</returns>
        System.Threading.Tasks.Task<InboxForwarderDto> UpdateInboxForwarderAsync(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Update inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderDto>> UpdateInboxForwarderWithHttpInfoAsync(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxForwarderControllerApi : IInboxForwarderControllerApiSync, IInboxForwarderControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InboxForwarderControllerApi : IInboxForwarderControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxForwarderControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxForwarderControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InboxForwarderControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InboxForwarderControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an inbox forwarder Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderDto</returns>
        public InboxForwarderDto CreateNewInboxForwarder(Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<InboxForwarderDto> localVarResponse = CreateNewInboxForwarderWithHttpInfo(inboxId, createInboxForwarderOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox forwarder Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderDto</returns>
        public mailslurp.Client.ApiResponse<InboxForwarderDto> CreateNewInboxForwarderWithHttpInfo(Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createInboxForwarderOptions' is set
            if (createInboxForwarderOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createInboxForwarderOptions' when calling InboxForwarderControllerApi->CreateNewInboxForwarder");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            localVarRequestOptions.Data = createInboxForwarderOptions;

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.CreateNewInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InboxForwarderDto>("/forwarders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox forwarder Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderDto</returns>
        public async System.Threading.Tasks.Task<InboxForwarderDto> CreateNewInboxForwarderAsync(Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<InboxForwarderDto> localVarResponse = await CreateNewInboxForwarderWithHttpInfoAsync(inboxId, createInboxForwarderOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox forwarder Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderDto>> CreateNewInboxForwarderWithHttpInfoAsync(Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createInboxForwarderOptions' is set
            if (createInboxForwarderOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createInboxForwarderOptions' when calling InboxForwarderControllerApi->CreateNewInboxForwarder");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            localVarRequestOptions.Data = createInboxForwarderOptions;

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.CreateNewInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InboxForwarderDto>("/forwarders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox forwarder Delete inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteInboxForwarder(Guid id, int operationIndex = 0)
        {
            DeleteInboxForwarderWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an inbox forwarder Delete inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteInboxForwarderWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.DeleteInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/forwarders/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox forwarder Delete inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboxForwarderAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteInboxForwarderWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an inbox forwarder Delete inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteInboxForwarderWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.DeleteInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/forwarders/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete inbox forwarders Delete inbox forwarders. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteInboxForwarders(Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            DeleteInboxForwardersWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete inbox forwarders Delete inbox forwarders. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteInboxForwardersWithHttpInfo(Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.DeleteInboxForwarders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/forwarders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxForwarders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete inbox forwarders Delete inbox forwarders. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboxForwardersAsync(Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteInboxForwardersWithHttpInfoAsync(inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete inbox forwarders Delete inbox forwarders. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteInboxForwardersWithHttpInfoAsync(Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.DeleteInboxForwarders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/forwarders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxForwarders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all inbox forwarder events Get all inbox forwarder events
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageInboxForwarderEvents</returns>
        public PageInboxForwarderEvents GetAllInboxForwarderEvents(int? page = default(int?), int? size = default(int?), Guid? inboxId = default(Guid?), string sort = default(string), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageInboxForwarderEvents> localVarResponse = GetAllInboxForwarderEventsWithHttpInfo(page, size, inboxId, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all inbox forwarder events Get all inbox forwarder events
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageInboxForwarderEvents</returns>
        public mailslurp.Client.ApiResponse<PageInboxForwarderEvents> GetAllInboxForwarderEventsWithHttpInfo(int? page = default(int?), int? size = default(int?), Guid? inboxId = default(Guid?), string sort = default(string), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetAllInboxForwarderEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageInboxForwarderEvents>("/forwarders/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllInboxForwarderEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all inbox forwarder events Get all inbox forwarder events
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageInboxForwarderEvents</returns>
        public async System.Threading.Tasks.Task<PageInboxForwarderEvents> GetAllInboxForwarderEventsAsync(int? page = default(int?), int? size = default(int?), Guid? inboxId = default(Guid?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<PageInboxForwarderEvents> localVarResponse = await GetAllInboxForwarderEventsWithHttpInfoAsync(page, size, inboxId, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all inbox forwarder events Get all inbox forwarder events
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageInboxForwarderEvents)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageInboxForwarderEvents>> GetAllInboxForwarderEventsWithHttpInfoAsync(int? page = default(int?), int? size = default(int?), Guid? inboxId = default(Guid?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetAllInboxForwarderEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageInboxForwarderEvents>("/forwarders/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllInboxForwarderEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a forwarder event Get forwarder event
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderEventDto</returns>
        public InboxForwarderEventDto GetForwarderEvent(Guid eventId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<InboxForwarderEventDto> localVarResponse = GetForwarderEventWithHttpInfo(eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a forwarder event Get forwarder event
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderEventDto</returns>
        public mailslurp.Client.ApiResponse<InboxForwarderEventDto> GetForwarderEventWithHttpInfo(Guid eventId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", mailslurp.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetForwarderEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InboxForwarderEventDto>("/forwarders/events/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetForwarderEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a forwarder event Get forwarder event
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderEventDto</returns>
        public async System.Threading.Tasks.Task<InboxForwarderEventDto> GetForwarderEventAsync(Guid eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<InboxForwarderEventDto> localVarResponse = await GetForwarderEventWithHttpInfoAsync(eventId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a forwarder event Get forwarder event
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderEventDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderEventDto>> GetForwarderEventWithHttpInfoAsync(Guid eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", mailslurp.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetForwarderEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InboxForwarderEventDto>("/forwarders/events/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetForwarderEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox forwarder Get inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderDto</returns>
        public InboxForwarderDto GetInboxForwarder(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<InboxForwarderDto> localVarResponse = GetInboxForwarderWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox forwarder Get inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderDto</returns>
        public mailslurp.Client.ApiResponse<InboxForwarderDto> GetInboxForwarderWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InboxForwarderDto>("/forwarders/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox forwarder Get inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderDto</returns>
        public async System.Threading.Tasks.Task<InboxForwarderDto> GetInboxForwarderAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<InboxForwarderDto> localVarResponse = await GetInboxForwarderWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox forwarder Get inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderDto>> GetInboxForwarderWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InboxForwarderDto>("/forwarders/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox forwarder event Get inbox forwarder event
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderEventDto</returns>
        public InboxForwarderEventDto GetInboxForwarderEvent(Guid id, Guid eventId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<InboxForwarderEventDto> localVarResponse = GetInboxForwarderEventWithHttpInfo(id, eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox forwarder event Get inbox forwarder event
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderEventDto</returns>
        public mailslurp.Client.ApiResponse<InboxForwarderEventDto> GetInboxForwarderEventWithHttpInfo(Guid id, Guid eventId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", mailslurp.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetInboxForwarderEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InboxForwarderEventDto>("/forwarders/{id}/events/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarderEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox forwarder event Get inbox forwarder event
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderEventDto</returns>
        public async System.Threading.Tasks.Task<InboxForwarderEventDto> GetInboxForwarderEventAsync(Guid id, Guid eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<InboxForwarderEventDto> localVarResponse = await GetInboxForwarderEventWithHttpInfoAsync(id, eventId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox forwarder event Get inbox forwarder event
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderEventDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderEventDto>> GetInboxForwarderEventWithHttpInfoAsync(Guid id, Guid eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", mailslurp.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetInboxForwarderEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InboxForwarderEventDto>("/forwarders/{id}/events/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarderEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox forwarder event list Get inbox forwarder events
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageInboxForwarderEvents</returns>
        public PageInboxForwarderEvents GetInboxForwarderEvents(Guid id, int? page = default(int?), int? size = default(int?), string sort = default(string), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageInboxForwarderEvents> localVarResponse = GetInboxForwarderEventsWithHttpInfo(id, page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox forwarder event list Get inbox forwarder events
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageInboxForwarderEvents</returns>
        public mailslurp.Client.ApiResponse<PageInboxForwarderEvents> GetInboxForwarderEventsWithHttpInfo(Guid id, int? page = default(int?), int? size = default(int?), string sort = default(string), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetInboxForwarderEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageInboxForwarderEvents>("/forwarders/{id}/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarderEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox forwarder event list Get inbox forwarder events
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageInboxForwarderEvents</returns>
        public async System.Threading.Tasks.Task<PageInboxForwarderEvents> GetInboxForwarderEventsAsync(Guid id, int? page = default(int?), int? size = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<PageInboxForwarderEvents> localVarResponse = await GetInboxForwarderEventsWithHttpInfoAsync(id, page, size, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox forwarder event list Get inbox forwarder events
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageInboxForwarderEvents)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageInboxForwarderEvents>> GetInboxForwarderEventsWithHttpInfoAsync(Guid id, int? page = default(int?), int? size = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetInboxForwarderEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageInboxForwarderEvents>("/forwarders/{id}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarderEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List inbox forwarders List all forwarders attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageInboxForwarderDto</returns>
        public PageInboxForwarderDto GetInboxForwarders(Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageInboxForwarderDto> localVarResponse = GetInboxForwardersWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List inbox forwarders List all forwarders attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageInboxForwarderDto</returns>
        public mailslurp.Client.ApiResponse<PageInboxForwarderDto> GetInboxForwardersWithHttpInfo(Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetInboxForwarders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageInboxForwarderDto>("/forwarders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List inbox forwarders List all forwarders attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageInboxForwarderDto</returns>
        public async System.Threading.Tasks.Task<PageInboxForwarderDto> GetInboxForwardersAsync(Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<PageInboxForwarderDto> localVarResponse = await GetInboxForwardersWithHttpInfoAsync(inboxId, page, size, sort, searchFilter, since, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List inbox forwarders List all forwarders attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageInboxForwarderDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageInboxForwarderDto>> GetInboxForwardersWithHttpInfoAsync(Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.GetInboxForwarders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageInboxForwarderDto>("/forwarders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox forwarder Test an inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderTestResult</returns>
        public InboxForwarderTestResult TestInboxForwarder(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = TestInboxForwarderWithHttpInfo(id, inboxForwarderTestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox forwarder Test an inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        public mailslurp.Client.ApiResponse<InboxForwarderTestResult> TestInboxForwarderWithHttpInfo(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0)
        {
            // verify the required parameter 'inboxForwarderTestOptions' is set
            if (inboxForwarderTestOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxForwarderTestOptions' when calling InboxForwarderControllerApi->TestInboxForwarder");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inboxForwarderTestOptions;

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.TestInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InboxForwarderTestResult>("/forwarders/{id}/test", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox forwarder Test an inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        public async System.Threading.Tasks.Task<InboxForwarderTestResult> TestInboxForwarderAsync(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = await TestInboxForwarderWithHttpInfoAsync(id, inboxForwarderTestOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox forwarder Test an inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderTestResult>> TestInboxForwarderWithHttpInfoAsync(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inboxForwarderTestOptions' is set
            if (inboxForwarderTestOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxForwarderTestOptions' when calling InboxForwarderControllerApi->TestInboxForwarder");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inboxForwarderTestOptions;

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.TestInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InboxForwarderTestResult>("/forwarders/{id}/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test inbox forwarders for inbox Test inbox forwarders for inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderTestResult</returns>
        public InboxForwarderTestResult TestInboxForwardersForInbox(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = TestInboxForwardersForInboxWithHttpInfo(inboxId, inboxForwarderTestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test inbox forwarders for inbox Test inbox forwarders for inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        public mailslurp.Client.ApiResponse<InboxForwarderTestResult> TestInboxForwardersForInboxWithHttpInfo(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0)
        {
            // verify the required parameter 'inboxForwarderTestOptions' is set
            if (inboxForwarderTestOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxForwarderTestOptions' when calling InboxForwarderControllerApi->TestInboxForwardersForInbox");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            localVarRequestOptions.Data = inboxForwarderTestOptions;

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.TestInboxForwardersForInbox";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<InboxForwarderTestResult>("/forwarders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInboxForwardersForInbox", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test inbox forwarders for inbox Test inbox forwarders for inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        public async System.Threading.Tasks.Task<InboxForwarderTestResult> TestInboxForwardersForInboxAsync(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = await TestInboxForwardersForInboxWithHttpInfoAsync(inboxId, inboxForwarderTestOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test inbox forwarders for inbox Test inbox forwarders for inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderTestResult>> TestInboxForwardersForInboxWithHttpInfoAsync(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inboxForwarderTestOptions' is set
            if (inboxForwarderTestOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxForwarderTestOptions' when calling InboxForwarderControllerApi->TestInboxForwardersForInbox");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            localVarRequestOptions.Data = inboxForwarderTestOptions;

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.TestInboxForwardersForInbox";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<InboxForwarderTestResult>("/forwarders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInboxForwardersForInbox", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test new inbox forwarder Test new inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderTestResult</returns>
        public InboxForwarderTestResult TestNewInboxForwarder(TestNewInboxForwarderOptions testNewInboxForwarderOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = TestNewInboxForwarderWithHttpInfo(testNewInboxForwarderOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test new inbox forwarder Test new inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        public mailslurp.Client.ApiResponse<InboxForwarderTestResult> TestNewInboxForwarderWithHttpInfo(TestNewInboxForwarderOptions testNewInboxForwarderOptions, int operationIndex = 0)
        {
            // verify the required parameter 'testNewInboxForwarderOptions' is set
            if (testNewInboxForwarderOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'testNewInboxForwarderOptions' when calling InboxForwarderControllerApi->TestNewInboxForwarder");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = testNewInboxForwarderOptions;

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.TestNewInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<InboxForwarderTestResult>("/forwarders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestNewInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test new inbox forwarder Test new inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        public async System.Threading.Tasks.Task<InboxForwarderTestResult> TestNewInboxForwarderAsync(TestNewInboxForwarderOptions testNewInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = await TestNewInboxForwarderWithHttpInfoAsync(testNewInboxForwarderOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test new inbox forwarder Test new inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderTestResult>> TestNewInboxForwarderWithHttpInfoAsync(TestNewInboxForwarderOptions testNewInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'testNewInboxForwarderOptions' is set
            if (testNewInboxForwarderOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'testNewInboxForwarderOptions' when calling InboxForwarderControllerApi->TestNewInboxForwarder");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = testNewInboxForwarderOptions;

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.TestNewInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<InboxForwarderTestResult>("/forwarders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestNewInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an inbox forwarder Update inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxForwarderDto</returns>
        public InboxForwarderDto UpdateInboxForwarder(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<InboxForwarderDto> localVarResponse = UpdateInboxForwarderWithHttpInfo(id, createInboxForwarderOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an inbox forwarder Update inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxForwarderDto</returns>
        public mailslurp.Client.ApiResponse<InboxForwarderDto> UpdateInboxForwarderWithHttpInfo(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createInboxForwarderOptions' is set
            if (createInboxForwarderOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createInboxForwarderOptions' when calling InboxForwarderControllerApi->UpdateInboxForwarder");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createInboxForwarderOptions;

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.UpdateInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<InboxForwarderDto>("/forwarders/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an inbox forwarder Update inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxForwarderDto</returns>
        public async System.Threading.Tasks.Task<InboxForwarderDto> UpdateInboxForwarderAsync(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<InboxForwarderDto> localVarResponse = await UpdateInboxForwarderWithHttpInfoAsync(id, createInboxForwarderOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an inbox forwarder Update inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxForwarderDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderDto>> UpdateInboxForwarderWithHttpInfoAsync(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createInboxForwarderOptions' is set
            if (createInboxForwarderOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createInboxForwarderOptions' when calling InboxForwarderControllerApi->UpdateInboxForwarder");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createInboxForwarderOptions;

            localVarRequestOptions.Operation = "InboxForwarderControllerApi.UpdateInboxForwarder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<InboxForwarderDto>("/forwarders/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInboxForwarder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
