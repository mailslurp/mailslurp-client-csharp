// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IInboxForwarderControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        InboxForwarderControllerApiEvents Events { get; }

        /// <summary>
        /// Create an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="inboxId">Inbox id to attach forwarder to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxForwarderApiResponse"/>&gt;</returns>
        Task<ICreateNewInboxForwarderApiResponse> CreateNewInboxForwarderAsync(CreateInboxForwarderOptions createInboxForwarderOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="inboxId">Inbox id to attach forwarder to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxForwarderApiResponse"/>&gt;</returns>
        Task<ICreateNewInboxForwarderApiResponse> CreateNewInboxForwarderOrDefaultAsync(CreateInboxForwarderOptions createInboxForwarderOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarder
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxForwarderApiResponse"/>&gt;</returns>
        Task<IDeleteInboxForwarderApiResponse> DeleteInboxForwarderAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarder
        /// </remarks>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxForwarderApiResponse"/>&gt;</returns>
        Task<IDeleteInboxForwarderApiResponse> DeleteInboxForwarderOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete inbox forwarders
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarders. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxForwardersApiResponse"/>&gt;</returns>
        Task<IDeleteInboxForwardersApiResponse> DeleteInboxForwardersAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete inbox forwarders
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarders. Accepts optional inboxId filter.
        /// </remarks>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxForwardersApiResponse"/>&gt;</returns>
        Task<IDeleteInboxForwardersApiResponse> DeleteInboxForwardersOrDefaultAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all inbox forwarder events
        /// </summary>
        /// <remarks>
        /// Get all inbox forwarder events
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="emailId">Optional email ID to filter for (optional)</param>
        /// <param name="sentId">Optional sent ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllInboxForwarderEventsApiResponse"/>&gt;</returns>
        Task<IGetAllInboxForwarderEventsApiResponse> GetAllInboxForwarderEventsAsync(Option<int> page = default, Option<int> size = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> sentId = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all inbox forwarder events
        /// </summary>
        /// <remarks>
        /// Get all inbox forwarder events
        /// </remarks>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="emailId">Optional email ID to filter for (optional)</param>
        /// <param name="sentId">Optional sent ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllInboxForwarderEventsApiResponse"/>&gt;</returns>
        Task<IGetAllInboxForwarderEventsApiResponse> GetAllInboxForwarderEventsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> sentId = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a forwarder event
        /// </summary>
        /// <remarks>
        /// Get forwarder event
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetForwarderEventApiResponse"/>&gt;</returns>
        Task<IGetForwarderEventApiResponse> GetForwarderEventAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a forwarder event
        /// </summary>
        /// <remarks>
        /// Get forwarder event
        /// </remarks>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetForwarderEventApiResponse"/>&gt;</returns>
        Task<IGetForwarderEventApiResponse> GetForwarderEventOrDefaultAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderApiResponse"/>&gt;</returns>
        Task<IGetInboxForwarderApiResponse> GetInboxForwarderAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder
        /// </remarks>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderApiResponse"/>&gt;</returns>
        Task<IGetInboxForwarderApiResponse> GetInboxForwarderOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox forwarder event
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder event
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderEventApiResponse"/>&gt;</returns>
        Task<IGetInboxForwarderEventApiResponse> GetInboxForwarderEventAsync(Guid id, Guid eventId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox forwarder event
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder event
        /// </remarks>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderEventApiResponse"/>&gt;</returns>
        Task<IGetInboxForwarderEventApiResponse> GetInboxForwarderEventOrDefaultAsync(Guid id, Guid eventId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox forwarder event list
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder events
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderEventsApiResponse"/>&gt;</returns>
        Task<IGetInboxForwarderEventsApiResponse> GetInboxForwarderEventsAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox forwarder event list
        /// </summary>
        /// <remarks>
        /// Get inbox forwarder events
        /// </remarks>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderEventsApiResponse"/>&gt;</returns>
        Task<IGetInboxForwarderEventsApiResponse> GetInboxForwarderEventsOrDefaultAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List inbox forwarders
        /// </summary>
        /// <remarks>
        /// List all forwarders attached to an inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwardersApiResponse"/>&gt;</returns>
        Task<IGetInboxForwardersApiResponse> GetInboxForwardersAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List inbox forwarders
        /// </summary>
        /// <remarks>
        /// List all forwarders attached to an inbox
        /// </remarks>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwardersApiResponse"/>&gt;</returns>
        Task<IGetInboxForwardersApiResponse> GetInboxForwardersOrDefaultAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test an inbox forwarder
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxForwarderApiResponse"/>&gt;</returns>
        Task<ITestInboxForwarderApiResponse> TestInboxForwarderAsync(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test an inbox forwarder
        /// </remarks>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxForwarderApiResponse"/>&gt;</returns>
        Task<ITestInboxForwarderApiResponse> TestInboxForwarderOrDefaultAsync(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test inbox forwarders for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox forwarders for inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxForwardersForInboxApiResponse"/>&gt;</returns>
        Task<ITestInboxForwardersForInboxApiResponse> TestInboxForwardersForInboxAsync(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test inbox forwarders for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox forwarders for inbox
        /// </remarks>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxForwardersForInboxApiResponse"/>&gt;</returns>
        Task<ITestInboxForwardersForInboxApiResponse> TestInboxForwardersForInboxOrDefaultAsync(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test new inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test new inbox forwarder
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestNewInboxForwarderApiResponse"/>&gt;</returns>
        Task<ITestNewInboxForwarderApiResponse> TestNewInboxForwarderAsync(TestNewInboxForwarderOptions testNewInboxForwarderOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test new inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test new inbox forwarder
        /// </remarks>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestNewInboxForwarderApiResponse"/>&gt;</returns>
        Task<ITestNewInboxForwarderApiResponse> TestNewInboxForwarderOrDefaultAsync(TestNewInboxForwarderOptions testNewInboxForwarderOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Update inbox forwarder
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInboxForwarderApiResponse"/>&gt;</returns>
        Task<IUpdateInboxForwarderApiResponse> UpdateInboxForwarderAsync(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Update inbox forwarder
        /// </remarks>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInboxForwarderApiResponse"/>&gt;</returns>
        Task<IUpdateInboxForwarderApiResponse> UpdateInboxForwarderOrDefaultAsync(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateNewInboxForwarderApiResponse"/>
    /// </summary>
    public interface ICreateNewInboxForwarderApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxForwarderDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteInboxForwarderApiResponse"/>
    /// </summary>
    public interface IDeleteInboxForwarderApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteInboxForwardersApiResponse"/>
    /// </summary>
    public interface IDeleteInboxForwardersApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllInboxForwarderEventsApiResponse"/>
    /// </summary>
    public interface IGetAllInboxForwarderEventsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageInboxForwarderEvents>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetForwarderEventApiResponse"/>
    /// </summary>
    public interface IGetForwarderEventApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxForwarderEventDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInboxForwarderApiResponse"/>
    /// </summary>
    public interface IGetInboxForwarderApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxForwarderDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInboxForwarderEventApiResponse"/>
    /// </summary>
    public interface IGetInboxForwarderEventApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxForwarderEventDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInboxForwarderEventsApiResponse"/>
    /// </summary>
    public interface IGetInboxForwarderEventsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageInboxForwarderEvents>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInboxForwardersApiResponse"/>
    /// </summary>
    public interface IGetInboxForwardersApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageInboxForwarderDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestInboxForwarderApiResponse"/>
    /// </summary>
    public interface ITestInboxForwarderApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxForwarderTestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestInboxForwardersForInboxApiResponse"/>
    /// </summary>
    public interface ITestInboxForwardersForInboxApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxForwarderTestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestNewInboxForwarderApiResponse"/>
    /// </summary>
    public interface ITestNewInboxForwarderApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxForwarderTestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateInboxForwarderApiResponse"/>
    /// </summary>
    public interface IUpdateInboxForwarderApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxForwarderDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class InboxForwarderControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateNewInboxForwarder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateNewInboxForwarder;

        internal void ExecuteOnCreateNewInboxForwarder(InboxForwarderControllerApi.CreateNewInboxForwarderApiResponse apiResponse)
        {
            OnCreateNewInboxForwarder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNewInboxForwarder(Exception exception)
        {
            OnErrorCreateNewInboxForwarder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteInboxForwarder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteInboxForwarder;

        internal void ExecuteOnDeleteInboxForwarder(InboxForwarderControllerApi.DeleteInboxForwarderApiResponse apiResponse)
        {
            OnDeleteInboxForwarder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteInboxForwarder(Exception exception)
        {
            OnErrorDeleteInboxForwarder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteInboxForwarders;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteInboxForwarders;

        internal void ExecuteOnDeleteInboxForwarders(InboxForwarderControllerApi.DeleteInboxForwardersApiResponse apiResponse)
        {
            OnDeleteInboxForwarders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteInboxForwarders(Exception exception)
        {
            OnErrorDeleteInboxForwarders?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllInboxForwarderEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllInboxForwarderEvents;

        internal void ExecuteOnGetAllInboxForwarderEvents(InboxForwarderControllerApi.GetAllInboxForwarderEventsApiResponse apiResponse)
        {
            OnGetAllInboxForwarderEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllInboxForwarderEvents(Exception exception)
        {
            OnErrorGetAllInboxForwarderEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetForwarderEvent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetForwarderEvent;

        internal void ExecuteOnGetForwarderEvent(InboxForwarderControllerApi.GetForwarderEventApiResponse apiResponse)
        {
            OnGetForwarderEvent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetForwarderEvent(Exception exception)
        {
            OnErrorGetForwarderEvent?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetInboxForwarder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetInboxForwarder;

        internal void ExecuteOnGetInboxForwarder(InboxForwarderControllerApi.GetInboxForwarderApiResponse apiResponse)
        {
            OnGetInboxForwarder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInboxForwarder(Exception exception)
        {
            OnErrorGetInboxForwarder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetInboxForwarderEvent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetInboxForwarderEvent;

        internal void ExecuteOnGetInboxForwarderEvent(InboxForwarderControllerApi.GetInboxForwarderEventApiResponse apiResponse)
        {
            OnGetInboxForwarderEvent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInboxForwarderEvent(Exception exception)
        {
            OnErrorGetInboxForwarderEvent?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetInboxForwarderEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetInboxForwarderEvents;

        internal void ExecuteOnGetInboxForwarderEvents(InboxForwarderControllerApi.GetInboxForwarderEventsApiResponse apiResponse)
        {
            OnGetInboxForwarderEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInboxForwarderEvents(Exception exception)
        {
            OnErrorGetInboxForwarderEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetInboxForwarders;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetInboxForwarders;

        internal void ExecuteOnGetInboxForwarders(InboxForwarderControllerApi.GetInboxForwardersApiResponse apiResponse)
        {
            OnGetInboxForwarders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInboxForwarders(Exception exception)
        {
            OnErrorGetInboxForwarders?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestInboxForwarder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestInboxForwarder;

        internal void ExecuteOnTestInboxForwarder(InboxForwarderControllerApi.TestInboxForwarderApiResponse apiResponse)
        {
            OnTestInboxForwarder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestInboxForwarder(Exception exception)
        {
            OnErrorTestInboxForwarder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestInboxForwardersForInbox;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestInboxForwardersForInbox;

        internal void ExecuteOnTestInboxForwardersForInbox(InboxForwarderControllerApi.TestInboxForwardersForInboxApiResponse apiResponse)
        {
            OnTestInboxForwardersForInbox?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestInboxForwardersForInbox(Exception exception)
        {
            OnErrorTestInboxForwardersForInbox?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestNewInboxForwarder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestNewInboxForwarder;

        internal void ExecuteOnTestNewInboxForwarder(InboxForwarderControllerApi.TestNewInboxForwarderApiResponse apiResponse)
        {
            OnTestNewInboxForwarder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestNewInboxForwarder(Exception exception)
        {
            OnErrorTestNewInboxForwarder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateInboxForwarder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateInboxForwarder;

        internal void ExecuteOnUpdateInboxForwarder(InboxForwarderControllerApi.UpdateInboxForwarderApiResponse apiResponse)
        {
            OnUpdateInboxForwarder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateInboxForwarder(Exception exception)
        {
            OnErrorUpdateInboxForwarder?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class InboxForwarderControllerApi : IInboxForwarderControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<InboxForwarderControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public InboxForwarderControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxForwarderControllerApi(ILogger<InboxForwarderControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, InboxForwarderControllerApiEvents inboxForwarderControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<InboxForwarderControllerApi>();
            HttpClient = httpClient;
            Events = inboxForwarderControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateNewInboxForwarder(CreateInboxForwarderOptions createInboxForwarderOptions, ref Option<Guid> inboxId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createInboxForwarderOptions"></param>
        /// <returns></returns>
        private void ValidateCreateNewInboxForwarder(CreateInboxForwarderOptions createInboxForwarderOptions)
        {
            if (createInboxForwarderOptions == null)
                throw new ArgumentNullException(nameof(createInboxForwarderOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="inboxId"></param>
        private void AfterCreateNewInboxForwarderDefaultImplementation(ICreateNewInboxForwarderApiResponse apiResponseLocalVar, CreateInboxForwarderOptions createInboxForwarderOptions, Option<Guid> inboxId)
        {
            bool suppressDefaultLog = false;
            AfterCreateNewInboxForwarder(ref suppressDefaultLog, apiResponseLocalVar, createInboxForwarderOptions, inboxId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="inboxId"></param>
        partial void AfterCreateNewInboxForwarder(ref bool suppressDefaultLog, ICreateNewInboxForwarderApiResponse apiResponseLocalVar, CreateInboxForwarderOptions createInboxForwarderOptions, Option<Guid> inboxId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="inboxId"></param>
        private void OnErrorCreateNewInboxForwarderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateInboxForwarderOptions createInboxForwarderOptions, Option<Guid> inboxId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateNewInboxForwarder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createInboxForwarderOptions, inboxId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="inboxId"></param>
        partial void OnErrorCreateNewInboxForwarder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateInboxForwarderOptions createInboxForwarderOptions, Option<Guid> inboxId);

        /// <summary>
        /// Create an inbox forwarder Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="inboxId">Inbox id to attach forwarder to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<ICreateNewInboxForwarderApiResponse> CreateNewInboxForwarderOrDefaultAsync(CreateInboxForwarderOptions createInboxForwarderOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNewInboxForwarderAsync(createInboxForwarderOptions, inboxId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an inbox forwarder Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="inboxId">Inbox id to attach forwarder to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<ICreateNewInboxForwarderApiResponse> CreateNewInboxForwarderAsync(CreateInboxForwarderOptions createInboxForwarderOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNewInboxForwarder(createInboxForwarderOptions);

                FormatCreateNewInboxForwarder(createInboxForwarderOptions, ref inboxId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (createInboxForwarderOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createInboxForwarderOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateNewInboxForwarderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNewInboxForwarderApiResponse>();

                        CreateNewInboxForwarderApiResponse apiResponseLocalVar = new CreateNewInboxForwarderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNewInboxForwarderDefaultImplementation(apiResponseLocalVar, createInboxForwarderOptions, inboxId);

                        Events.ExecuteOnCreateNewInboxForwarder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNewInboxForwarderDefaultImplementation(e, "/forwarders", uriBuilderLocalVar.Path, createInboxForwarderOptions, inboxId);
                Events.ExecuteOnErrorCreateNewInboxForwarder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNewInboxForwarderApiResponse"/>
        /// </summary>
        public partial class CreateNewInboxForwarderApiResponse : mailslurp.Client.ApiResponse, ICreateNewInboxForwarderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNewInboxForwarderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNewInboxForwarderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNewInboxForwarderApiResponse(ILogger<CreateNewInboxForwarderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxForwarderDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxForwarderDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxForwarderDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteInboxForwarder(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteInboxForwarderDefaultImplementation(IDeleteInboxForwarderApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteInboxForwarder(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteInboxForwarder(ref bool suppressDefaultLog, IDeleteInboxForwarderApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteInboxForwarderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteInboxForwarder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteInboxForwarder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Delete an inbox forwarder Delete inbox forwarder
        /// </summary>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxForwarderApiResponse> DeleteInboxForwarderOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteInboxForwarderAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an inbox forwarder Delete inbox forwarder
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxForwarderApiResponse> DeleteInboxForwarderAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteInboxForwarder(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteInboxForwarderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteInboxForwarderApiResponse>();

                        DeleteInboxForwarderApiResponse apiResponseLocalVar = new DeleteInboxForwarderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteInboxForwarderDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteInboxForwarder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteInboxForwarderDefaultImplementation(e, "/forwarders/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteInboxForwarder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteInboxForwarderApiResponse"/>
        /// </summary>
        public partial class DeleteInboxForwarderApiResponse : mailslurp.Client.ApiResponse, IDeleteInboxForwarderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteInboxForwarderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteInboxForwarderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteInboxForwarderApiResponse(ILogger<DeleteInboxForwarderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteInboxForwarders(ref Option<Guid> inboxId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        private void AfterDeleteInboxForwardersDefaultImplementation(IDeleteInboxForwardersApiResponse apiResponseLocalVar, Option<Guid> inboxId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteInboxForwarders(ref suppressDefaultLog, apiResponseLocalVar, inboxId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        partial void AfterDeleteInboxForwarders(ref bool suppressDefaultLog, IDeleteInboxForwardersApiResponse apiResponseLocalVar, Option<Guid> inboxId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        private void OnErrorDeleteInboxForwardersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteInboxForwarders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        partial void OnErrorDeleteInboxForwarders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId);

        /// <summary>
        /// Delete inbox forwarders Delete inbox forwarders. Accepts optional inboxId filter.
        /// </summary>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxForwardersApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxForwardersApiResponse> DeleteInboxForwardersOrDefaultAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteInboxForwardersAsync(inboxId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete inbox forwarders Delete inbox forwarders. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxForwardersApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxForwardersApiResponse> DeleteInboxForwardersAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteInboxForwarders(ref inboxId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteInboxForwardersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteInboxForwardersApiResponse>();

                        DeleteInboxForwardersApiResponse apiResponseLocalVar = new DeleteInboxForwardersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteInboxForwardersDefaultImplementation(apiResponseLocalVar, inboxId);

                        Events.ExecuteOnDeleteInboxForwarders(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteInboxForwardersDefaultImplementation(e, "/forwarders", uriBuilderLocalVar.Path, inboxId);
                Events.ExecuteOnErrorDeleteInboxForwarders(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteInboxForwardersApiResponse"/>
        /// </summary>
        public partial class DeleteInboxForwardersApiResponse : mailslurp.Client.ApiResponse, IDeleteInboxForwardersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteInboxForwardersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteInboxForwardersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteInboxForwardersApiResponse(ILogger<DeleteInboxForwardersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllInboxForwarderEvents(ref Option<int> page, ref Option<int> size, ref Option<Guid> inboxId, ref Option<Guid> emailId, ref Option<Guid> sentId, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetAllInboxForwarderEvents(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="sentId"></param>
        /// <param name="sort"></param>
        private void AfterGetAllInboxForwarderEventsDefaultImplementation(IGetAllInboxForwarderEventsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> sentId, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetAllInboxForwarderEvents(ref suppressDefaultLog, apiResponseLocalVar, page, size, inboxId, emailId, sentId, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="sentId"></param>
        /// <param name="sort"></param>
        partial void AfterGetAllInboxForwarderEvents(ref bool suppressDefaultLog, IGetAllInboxForwarderEventsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> sentId, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="sentId"></param>
        /// <param name="sort"></param>
        private void OnErrorGetAllInboxForwarderEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> sentId, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllInboxForwarderEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, inboxId, emailId, sentId, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="sentId"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetAllInboxForwarderEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> sentId, Option<string> sort);

        /// <summary>
        /// Get all inbox forwarder events Get all inbox forwarder events
        /// </summary>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="emailId">Optional email ID to filter for (optional)</param>
        /// <param name="sentId">Optional sent ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllInboxForwarderEventsApiResponse"/>&gt;</returns>
        public async Task<IGetAllInboxForwarderEventsApiResponse> GetAllInboxForwarderEventsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> sentId = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllInboxForwarderEventsAsync(page, size, inboxId, emailId, sentId, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all inbox forwarder events Get all inbox forwarder events
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="inboxId">Optional inbox ID to filter for (optional)</param>
        /// <param name="emailId">Optional email ID to filter for (optional)</param>
        /// <param name="sentId">Optional sent ID to filter for (optional)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllInboxForwarderEventsApiResponse"/>&gt;</returns>
        public async Task<IGetAllInboxForwarderEventsApiResponse> GetAllInboxForwarderEventsAsync(Option<int> page = default, Option<int> size = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> sentId = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllInboxForwarderEvents(sort);

                FormatGetAllInboxForwarderEvents(ref page, ref size, ref inboxId, ref emailId, ref sentId, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders/events"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders/events");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (emailId.IsSet)
                        parseQueryStringLocalVar["emailId"] = ClientUtils.ParameterToString(emailId.Value);

                    if (sentId.IsSet)
                        parseQueryStringLocalVar["sentId"] = ClientUtils.ParameterToString(sentId.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllInboxForwarderEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllInboxForwarderEventsApiResponse>();

                        GetAllInboxForwarderEventsApiResponse apiResponseLocalVar = new GetAllInboxForwarderEventsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders/events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllInboxForwarderEventsDefaultImplementation(apiResponseLocalVar, page, size, inboxId, emailId, sentId, sort);

                        Events.ExecuteOnGetAllInboxForwarderEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllInboxForwarderEventsDefaultImplementation(e, "/forwarders/events", uriBuilderLocalVar.Path, page, size, inboxId, emailId, sentId, sort);
                Events.ExecuteOnErrorGetAllInboxForwarderEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllInboxForwarderEventsApiResponse"/>
        /// </summary>
        public partial class GetAllInboxForwarderEventsApiResponse : mailslurp.Client.ApiResponse, IGetAllInboxForwarderEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllInboxForwarderEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllInboxForwarderEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllInboxForwarderEventsApiResponse(ILogger<GetAllInboxForwarderEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageInboxForwarderEvents Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageInboxForwarderEvents>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageInboxForwarderEvents result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetForwarderEvent(ref Guid eventId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="eventId"></param>
        private void AfterGetForwarderEventDefaultImplementation(IGetForwarderEventApiResponse apiResponseLocalVar, Guid eventId)
        {
            bool suppressDefaultLog = false;
            AfterGetForwarderEvent(ref suppressDefaultLog, apiResponseLocalVar, eventId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="eventId"></param>
        partial void AfterGetForwarderEvent(ref bool suppressDefaultLog, IGetForwarderEventApiResponse apiResponseLocalVar, Guid eventId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="eventId"></param>
        private void OnErrorGetForwarderEventDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid eventId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetForwarderEvent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, eventId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="eventId"></param>
        partial void OnErrorGetForwarderEvent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid eventId);

        /// <summary>
        /// Get a forwarder event Get forwarder event
        /// </summary>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetForwarderEventApiResponse"/>&gt;</returns>
        public async Task<IGetForwarderEventApiResponse> GetForwarderEventOrDefaultAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetForwarderEventAsync(eventId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a forwarder event Get forwarder event
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetForwarderEventApiResponse"/>&gt;</returns>
        public async Task<IGetForwarderEventApiResponse> GetForwarderEventAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetForwarderEvent(ref eventId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders/events/{eventId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders/events/{eventId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BeventId%7D", Uri.EscapeDataString(eventId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetForwarderEventApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetForwarderEventApiResponse>();

                        GetForwarderEventApiResponse apiResponseLocalVar = new GetForwarderEventApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders/events/{eventId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetForwarderEventDefaultImplementation(apiResponseLocalVar, eventId);

                        Events.ExecuteOnGetForwarderEvent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetForwarderEventDefaultImplementation(e, "/forwarders/events/{eventId}", uriBuilderLocalVar.Path, eventId);
                Events.ExecuteOnErrorGetForwarderEvent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetForwarderEventApiResponse"/>
        /// </summary>
        public partial class GetForwarderEventApiResponse : mailslurp.Client.ApiResponse, IGetForwarderEventApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetForwarderEventApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetForwarderEventApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetForwarderEventApiResponse(ILogger<GetForwarderEventApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxForwarderEventDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxForwarderEventDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxForwarderEventDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInboxForwarder(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetInboxForwarderDefaultImplementation(IGetInboxForwarderApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetInboxForwarder(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetInboxForwarder(ref bool suppressDefaultLog, IGetInboxForwarderApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetInboxForwarderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInboxForwarder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetInboxForwarder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get an inbox forwarder Get inbox forwarder
        /// </summary>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<IGetInboxForwarderApiResponse> GetInboxForwarderOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInboxForwarderAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox forwarder Get inbox forwarder
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<IGetInboxForwarderApiResponse> GetInboxForwarderAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetInboxForwarder(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetInboxForwarderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInboxForwarderApiResponse>();

                        GetInboxForwarderApiResponse apiResponseLocalVar = new GetInboxForwarderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInboxForwarderDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetInboxForwarder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInboxForwarderDefaultImplementation(e, "/forwarders/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetInboxForwarder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInboxForwarderApiResponse"/>
        /// </summary>
        public partial class GetInboxForwarderApiResponse : mailslurp.Client.ApiResponse, IGetInboxForwarderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInboxForwarderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInboxForwarderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInboxForwarderApiResponse(ILogger<GetInboxForwarderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxForwarderDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxForwarderDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxForwarderDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInboxForwarderEvent(ref Guid id, ref Guid eventId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="eventId"></param>
        private void AfterGetInboxForwarderEventDefaultImplementation(IGetInboxForwarderEventApiResponse apiResponseLocalVar, Guid id, Guid eventId)
        {
            bool suppressDefaultLog = false;
            AfterGetInboxForwarderEvent(ref suppressDefaultLog, apiResponseLocalVar, id, eventId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="eventId"></param>
        partial void AfterGetInboxForwarderEvent(ref bool suppressDefaultLog, IGetInboxForwarderEventApiResponse apiResponseLocalVar, Guid id, Guid eventId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="eventId"></param>
        private void OnErrorGetInboxForwarderEventDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Guid eventId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInboxForwarderEvent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, eventId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="eventId"></param>
        partial void OnErrorGetInboxForwarderEvent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Guid eventId);

        /// <summary>
        /// Get an inbox forwarder event Get inbox forwarder event
        /// </summary>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderEventApiResponse"/>&gt;</returns>
        public async Task<IGetInboxForwarderEventApiResponse> GetInboxForwarderEventOrDefaultAsync(Guid id, Guid eventId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInboxForwarderEventAsync(id, eventId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox forwarder event Get inbox forwarder event
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="eventId">ID of inbox forwarder event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderEventApiResponse"/>&gt;</returns>
        public async Task<IGetInboxForwarderEventApiResponse> GetInboxForwarderEventAsync(Guid id, Guid eventId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetInboxForwarderEvent(ref id, ref eventId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders/{id}/events/{eventId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders/{id}/events/{eventId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BeventId%7D", Uri.EscapeDataString(eventId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetInboxForwarderEventApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInboxForwarderEventApiResponse>();

                        GetInboxForwarderEventApiResponse apiResponseLocalVar = new GetInboxForwarderEventApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders/{id}/events/{eventId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInboxForwarderEventDefaultImplementation(apiResponseLocalVar, id, eventId);

                        Events.ExecuteOnGetInboxForwarderEvent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInboxForwarderEventDefaultImplementation(e, "/forwarders/{id}/events/{eventId}", uriBuilderLocalVar.Path, id, eventId);
                Events.ExecuteOnErrorGetInboxForwarderEvent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInboxForwarderEventApiResponse"/>
        /// </summary>
        public partial class GetInboxForwarderEventApiResponse : mailslurp.Client.ApiResponse, IGetInboxForwarderEventApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInboxForwarderEventApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInboxForwarderEventApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInboxForwarderEventApiResponse(ILogger<GetInboxForwarderEventApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxForwarderEventDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxForwarderEventDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxForwarderEventDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInboxForwarderEvents(ref Guid id, ref Option<int> page, ref Option<int> size, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetInboxForwarderEvents(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        private void AfterGetInboxForwarderEventsDefaultImplementation(IGetInboxForwarderEventsApiResponse apiResponseLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetInboxForwarderEvents(ref suppressDefaultLog, apiResponseLocalVar, id, page, size, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        partial void AfterGetInboxForwarderEvents(ref bool suppressDefaultLog, IGetInboxForwarderEventsApiResponse apiResponseLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        private void OnErrorGetInboxForwarderEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInboxForwarderEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, page, size, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetInboxForwarderEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort);

        /// <summary>
        /// Get an inbox forwarder event list Get inbox forwarder events
        /// </summary>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderEventsApiResponse"/>&gt;</returns>
        public async Task<IGetInboxForwarderEventsApiResponse> GetInboxForwarderEventsOrDefaultAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInboxForwarderEventsAsync(id, page, size, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox forwarder event list Get inbox forwarder events
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwarderEventsApiResponse"/>&gt;</returns>
        public async Task<IGetInboxForwarderEventsApiResponse> GetInboxForwarderEventsAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInboxForwarderEvents(sort);

                FormatGetInboxForwarderEvents(ref id, ref page, ref size, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders/{id}/events"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders/{id}/events");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetInboxForwarderEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInboxForwarderEventsApiResponse>();

                        GetInboxForwarderEventsApiResponse apiResponseLocalVar = new GetInboxForwarderEventsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders/{id}/events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInboxForwarderEventsDefaultImplementation(apiResponseLocalVar, id, page, size, sort);

                        Events.ExecuteOnGetInboxForwarderEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInboxForwarderEventsDefaultImplementation(e, "/forwarders/{id}/events", uriBuilderLocalVar.Path, id, page, size, sort);
                Events.ExecuteOnErrorGetInboxForwarderEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInboxForwarderEventsApiResponse"/>
        /// </summary>
        public partial class GetInboxForwarderEventsApiResponse : mailslurp.Client.ApiResponse, IGetInboxForwarderEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInboxForwarderEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInboxForwarderEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInboxForwarderEventsApiResponse(ILogger<GetInboxForwarderEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageInboxForwarderEvents Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageInboxForwarderEvents>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageInboxForwarderEvents result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInboxForwarders(ref Option<Guid> inboxId, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<string> searchFilter, ref Option<DateTime> since, ref Option<DateTime> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <returns></returns>
        private void ValidateGetInboxForwarders(Option<string> sort, Option<string> searchFilter)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void AfterGetInboxForwardersDefaultImplementation(IGetInboxForwardersApiResponse apiResponseLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLog = false;
            AfterGetInboxForwarders(ref suppressDefaultLog, apiResponseLocalVar, inboxId, page, size, sort, searchFilter, since, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void AfterGetInboxForwarders(ref bool suppressDefaultLog, IGetInboxForwardersApiResponse apiResponseLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void OnErrorGetInboxForwardersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInboxForwarders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId, page, size, sort, searchFilter, since, before);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void OnErrorGetInboxForwarders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// List inbox forwarders List all forwarders attached to an inbox
        /// </summary>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwardersApiResponse"/>&gt;</returns>
        public async Task<IGetInboxForwardersApiResponse> GetInboxForwardersOrDefaultAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInboxForwardersAsync(inboxId, page, size, sort, searchFilter, since, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List inbox forwarders List all forwarders attached to an inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxForwardersApiResponse"/>&gt;</returns>
        public async Task<IGetInboxForwardersApiResponse> GetInboxForwardersAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInboxForwarders(sort, searchFilter);

                FormatGetInboxForwarders(ref inboxId, ref page, ref size, ref sort, ref searchFilter, ref since, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetInboxForwardersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInboxForwardersApiResponse>();

                        GetInboxForwardersApiResponse apiResponseLocalVar = new GetInboxForwardersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInboxForwardersDefaultImplementation(apiResponseLocalVar, inboxId, page, size, sort, searchFilter, since, before);

                        Events.ExecuteOnGetInboxForwarders(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInboxForwardersDefaultImplementation(e, "/forwarders", uriBuilderLocalVar.Path, inboxId, page, size, sort, searchFilter, since, before);
                Events.ExecuteOnErrorGetInboxForwarders(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInboxForwardersApiResponse"/>
        /// </summary>
        public partial class GetInboxForwardersApiResponse : mailslurp.Client.ApiResponse, IGetInboxForwardersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInboxForwardersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInboxForwardersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInboxForwardersApiResponse(ILogger<GetInboxForwardersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageInboxForwarderDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageInboxForwarderDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageInboxForwarderDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestInboxForwarder(ref Guid id, InboxForwarderTestOptions inboxForwarderTestOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns></returns>
        private void ValidateTestInboxForwarder(InboxForwarderTestOptions inboxForwarderTestOptions)
        {
            if (inboxForwarderTestOptions == null)
                throw new ArgumentNullException(nameof(inboxForwarderTestOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="inboxForwarderTestOptions"></param>
        private void AfterTestInboxForwarderDefaultImplementation(ITestInboxForwarderApiResponse apiResponseLocalVar, Guid id, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestInboxForwarder(ref suppressDefaultLog, apiResponseLocalVar, id, inboxForwarderTestOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="inboxForwarderTestOptions"></param>
        partial void AfterTestInboxForwarder(ref bool suppressDefaultLog, ITestInboxForwarderApiResponse apiResponseLocalVar, Guid id, InboxForwarderTestOptions inboxForwarderTestOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="inboxForwarderTestOptions"></param>
        private void OnErrorTestInboxForwarderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestInboxForwarder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, inboxForwarderTestOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="inboxForwarderTestOptions"></param>
        partial void OnErrorTestInboxForwarder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, InboxForwarderTestOptions inboxForwarderTestOptions);

        /// <summary>
        /// Test an inbox forwarder Test an inbox forwarder
        /// </summary>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<ITestInboxForwarderApiResponse> TestInboxForwarderOrDefaultAsync(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestInboxForwarderAsync(id, inboxForwarderTestOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test an inbox forwarder Test an inbox forwarder
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<ITestInboxForwarderApiResponse> TestInboxForwarderAsync(Guid id, InboxForwarderTestOptions inboxForwarderTestOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestInboxForwarder(inboxForwarderTestOptions);

                FormatTestInboxForwarder(ref id, inboxForwarderTestOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders/{id}/test"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders/{id}/test");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (inboxForwarderTestOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(inboxForwarderTestOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestInboxForwarderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestInboxForwarderApiResponse>();

                        TestInboxForwarderApiResponse apiResponseLocalVar = new TestInboxForwarderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders/{id}/test", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestInboxForwarderDefaultImplementation(apiResponseLocalVar, id, inboxForwarderTestOptions);

                        Events.ExecuteOnTestInboxForwarder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestInboxForwarderDefaultImplementation(e, "/forwarders/{id}/test", uriBuilderLocalVar.Path, id, inboxForwarderTestOptions);
                Events.ExecuteOnErrorTestInboxForwarder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestInboxForwarderApiResponse"/>
        /// </summary>
        public partial class TestInboxForwarderApiResponse : mailslurp.Client.ApiResponse, ITestInboxForwarderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestInboxForwarderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestInboxForwarderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestInboxForwarderApiResponse(ILogger<TestInboxForwarderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxForwarderTestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxForwarderTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxForwarderTestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestInboxForwardersForInbox(ref Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns></returns>
        private void ValidateTestInboxForwardersForInbox(InboxForwarderTestOptions inboxForwarderTestOptions)
        {
            if (inboxForwarderTestOptions == null)
                throw new ArgumentNullException(nameof(inboxForwarderTestOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="inboxForwarderTestOptions"></param>
        private void AfterTestInboxForwardersForInboxDefaultImplementation(ITestInboxForwardersForInboxApiResponse apiResponseLocalVar, Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestInboxForwardersForInbox(ref suppressDefaultLog, apiResponseLocalVar, inboxId, inboxForwarderTestOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="inboxForwarderTestOptions"></param>
        partial void AfterTestInboxForwardersForInbox(ref bool suppressDefaultLog, ITestInboxForwardersForInboxApiResponse apiResponseLocalVar, Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="inboxForwarderTestOptions"></param>
        private void OnErrorTestInboxForwardersForInboxDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestInboxForwardersForInbox(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId, inboxForwarderTestOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="inboxForwarderTestOptions"></param>
        partial void OnErrorTestInboxForwardersForInbox(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions);

        /// <summary>
        /// Test inbox forwarders for inbox Test inbox forwarders for inbox
        /// </summary>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxForwardersForInboxApiResponse"/>&gt;</returns>
        public async Task<ITestInboxForwardersForInboxApiResponse> TestInboxForwardersForInboxOrDefaultAsync(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestInboxForwardersForInboxAsync(inboxId, inboxForwarderTestOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test inbox forwarders for inbox Test inbox forwarders for inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxForwardersForInboxApiResponse"/>&gt;</returns>
        public async Task<ITestInboxForwardersForInboxApiResponse> TestInboxForwardersForInboxAsync(Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestInboxForwardersForInbox(inboxForwarderTestOptions);

                FormatTestInboxForwardersForInbox(ref inboxId, inboxForwarderTestOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (inboxForwarderTestOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(inboxForwarderTestOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestInboxForwardersForInboxApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestInboxForwardersForInboxApiResponse>();

                        TestInboxForwardersForInboxApiResponse apiResponseLocalVar = new TestInboxForwardersForInboxApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestInboxForwardersForInboxDefaultImplementation(apiResponseLocalVar, inboxId, inboxForwarderTestOptions);

                        Events.ExecuteOnTestInboxForwardersForInbox(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestInboxForwardersForInboxDefaultImplementation(e, "/forwarders", uriBuilderLocalVar.Path, inboxId, inboxForwarderTestOptions);
                Events.ExecuteOnErrorTestInboxForwardersForInbox(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestInboxForwardersForInboxApiResponse"/>
        /// </summary>
        public partial class TestInboxForwardersForInboxApiResponse : mailslurp.Client.ApiResponse, ITestInboxForwardersForInboxApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestInboxForwardersForInboxApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestInboxForwardersForInboxApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestInboxForwardersForInboxApiResponse(ILogger<TestInboxForwardersForInboxApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxForwarderTestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxForwarderTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxForwarderTestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestNewInboxForwarder(TestNewInboxForwarderOptions testNewInboxForwarderOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <returns></returns>
        private void ValidateTestNewInboxForwarder(TestNewInboxForwarderOptions testNewInboxForwarderOptions)
        {
            if (testNewInboxForwarderOptions == null)
                throw new ArgumentNullException(nameof(testNewInboxForwarderOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="testNewInboxForwarderOptions"></param>
        private void AfterTestNewInboxForwarderDefaultImplementation(ITestNewInboxForwarderApiResponse apiResponseLocalVar, TestNewInboxForwarderOptions testNewInboxForwarderOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestNewInboxForwarder(ref suppressDefaultLog, apiResponseLocalVar, testNewInboxForwarderOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="testNewInboxForwarderOptions"></param>
        partial void AfterTestNewInboxForwarder(ref bool suppressDefaultLog, ITestNewInboxForwarderApiResponse apiResponseLocalVar, TestNewInboxForwarderOptions testNewInboxForwarderOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="testNewInboxForwarderOptions"></param>
        private void OnErrorTestNewInboxForwarderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TestNewInboxForwarderOptions testNewInboxForwarderOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestNewInboxForwarder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, testNewInboxForwarderOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="testNewInboxForwarderOptions"></param>
        partial void OnErrorTestNewInboxForwarder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TestNewInboxForwarderOptions testNewInboxForwarderOptions);

        /// <summary>
        /// Test new inbox forwarder Test new inbox forwarder
        /// </summary>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestNewInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<ITestNewInboxForwarderApiResponse> TestNewInboxForwarderOrDefaultAsync(TestNewInboxForwarderOptions testNewInboxForwarderOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestNewInboxForwarderAsync(testNewInboxForwarderOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test new inbox forwarder Test new inbox forwarder
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestNewInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<ITestNewInboxForwarderApiResponse> TestNewInboxForwarderAsync(TestNewInboxForwarderOptions testNewInboxForwarderOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestNewInboxForwarder(testNewInboxForwarderOptions);

                FormatTestNewInboxForwarder(testNewInboxForwarderOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders");

                    httpRequestMessageLocalVar.Content = (testNewInboxForwarderOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(testNewInboxForwarderOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestNewInboxForwarderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestNewInboxForwarderApiResponse>();

                        TestNewInboxForwarderApiResponse apiResponseLocalVar = new TestNewInboxForwarderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestNewInboxForwarderDefaultImplementation(apiResponseLocalVar, testNewInboxForwarderOptions);

                        Events.ExecuteOnTestNewInboxForwarder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestNewInboxForwarderDefaultImplementation(e, "/forwarders", uriBuilderLocalVar.Path, testNewInboxForwarderOptions);
                Events.ExecuteOnErrorTestNewInboxForwarder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestNewInboxForwarderApiResponse"/>
        /// </summary>
        public partial class TestNewInboxForwarderApiResponse : mailslurp.Client.ApiResponse, ITestNewInboxForwarderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestNewInboxForwarderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestNewInboxForwarderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestNewInboxForwarderApiResponse(ILogger<TestNewInboxForwarderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxForwarderTestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxForwarderTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxForwarderTestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateInboxForwarder(ref Guid id, CreateInboxForwarderOptions createInboxForwarderOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createInboxForwarderOptions"></param>
        /// <returns></returns>
        private void ValidateUpdateInboxForwarder(CreateInboxForwarderOptions createInboxForwarderOptions)
        {
            if (createInboxForwarderOptions == null)
                throw new ArgumentNullException(nameof(createInboxForwarderOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createInboxForwarderOptions"></param>
        private void AfterUpdateInboxForwarderDefaultImplementation(IUpdateInboxForwarderApiResponse apiResponseLocalVar, Guid id, CreateInboxForwarderOptions createInboxForwarderOptions)
        {
            bool suppressDefaultLog = false;
            AfterUpdateInboxForwarder(ref suppressDefaultLog, apiResponseLocalVar, id, createInboxForwarderOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createInboxForwarderOptions"></param>
        partial void AfterUpdateInboxForwarder(ref bool suppressDefaultLog, IUpdateInboxForwarderApiResponse apiResponseLocalVar, Guid id, CreateInboxForwarderOptions createInboxForwarderOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createInboxForwarderOptions"></param>
        private void OnErrorUpdateInboxForwarderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateInboxForwarderOptions createInboxForwarderOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateInboxForwarder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, createInboxForwarderOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createInboxForwarderOptions"></param>
        partial void OnErrorUpdateInboxForwarder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateInboxForwarderOptions createInboxForwarderOptions);

        /// <summary>
        /// Update an inbox forwarder Update inbox forwarder
        /// </summary>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<IUpdateInboxForwarderApiResponse> UpdateInboxForwarderOrDefaultAsync(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateInboxForwarderAsync(id, createInboxForwarderOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update an inbox forwarder Update inbox forwarder
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInboxForwarderApiResponse"/>&gt;</returns>
        public async Task<IUpdateInboxForwarderApiResponse> UpdateInboxForwarderAsync(Guid id, CreateInboxForwarderOptions createInboxForwarderOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateInboxForwarder(createInboxForwarderOptions);

                FormatUpdateInboxForwarder(ref id, createInboxForwarderOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/forwarders/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/forwarders/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (createInboxForwarderOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createInboxForwarderOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateInboxForwarderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateInboxForwarderApiResponse>();

                        UpdateInboxForwarderApiResponse apiResponseLocalVar = new UpdateInboxForwarderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/forwarders/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateInboxForwarderDefaultImplementation(apiResponseLocalVar, id, createInboxForwarderOptions);

                        Events.ExecuteOnUpdateInboxForwarder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateInboxForwarderDefaultImplementation(e, "/forwarders/{id}", uriBuilderLocalVar.Path, id, createInboxForwarderOptions);
                Events.ExecuteOnErrorUpdateInboxForwarder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateInboxForwarderApiResponse"/>
        /// </summary>
        public partial class UpdateInboxForwarderApiResponse : mailslurp.Client.ApiResponse, IUpdateInboxForwarderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateInboxForwarderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateInboxForwarderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateInboxForwarderApiResponse(ILogger<UpdateInboxForwarderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxForwarderDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxForwarderDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxForwarderDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
