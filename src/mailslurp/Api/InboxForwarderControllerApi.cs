/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxForwarderControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <returns>InboxForwarderDto</returns>
        InboxForwarderDto CreateNewInboxForwarder (Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions);

        /// <summary>
        /// Create an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <returns>ApiResponse of InboxForwarderDto</returns>
        ApiResponse<InboxForwarderDto> CreateNewInboxForwarderWithHttpInfo (Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions);
        /// <summary>
        /// Delete an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns></returns>
        void DeleteInboxForwarder (Guid id);

        /// <summary>
        /// Delete an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboxForwarderWithHttpInfo (Guid id);
        /// <summary>
        /// Delete inbox forwarders
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarders. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <returns></returns>
        void DeleteInboxForwarders (Guid? inboxId = default(Guid?));

        /// <summary>
        /// Delete inbox forwarders
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarders. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboxForwardersWithHttpInfo (Guid? inboxId = default(Guid?));
        /// <summary>
        /// Get an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>InboxForwarderDto</returns>
        InboxForwarderDto GetInboxForwarder (Guid id);

        /// <summary>
        /// Get an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>ApiResponse of InboxForwarderDto</returns>
        ApiResponse<InboxForwarderDto> GetInboxForwarderWithHttpInfo (Guid id);
        /// <summary>
        /// List inbox forwarders
        /// </summary>
        /// <remarks>
        /// List all forwarders attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>PageInboxForwarderDto</returns>
        PageInboxForwarderDto GetInboxForwarders (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));

        /// <summary>
        /// List inbox forwarders
        /// </summary>
        /// <remarks>
        /// List all forwarders attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>ApiResponse of PageInboxForwarderDto</returns>
        ApiResponse<PageInboxForwarderDto> GetInboxForwardersWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));
        /// <summary>
        /// Test an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test an inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>InboxForwarderTestResult</returns>
        InboxForwarderTestResult TestInboxForwarder (Guid id, InboxForwarderTestOptions inboxForwarderTestOptions);

        /// <summary>
        /// Test an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test an inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        ApiResponse<InboxForwarderTestResult> TestInboxForwarderWithHttpInfo (Guid id, InboxForwarderTestOptions inboxForwarderTestOptions);
        /// <summary>
        /// Test inbox forwarders for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox forwarders for inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>InboxForwarderTestResult</returns>
        InboxForwarderTestResult TestInboxForwardersForInbox (Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions);

        /// <summary>
        /// Test inbox forwarders for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox forwarders for inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        ApiResponse<InboxForwarderTestResult> TestInboxForwardersForInboxWithHttpInfo (Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions);
        /// <summary>
        /// Test new inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test new inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <returns>InboxForwarderTestResult</returns>
        InboxForwarderTestResult TestNewInboxForwarder (TestNewInboxForwarderOptions testNewInboxForwarderOptions);

        /// <summary>
        /// Test new inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test new inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        ApiResponse<InboxForwarderTestResult> TestNewInboxForwarderWithHttpInfo (TestNewInboxForwarderOptions testNewInboxForwarderOptions);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxForwarderControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <returns>Task of InboxForwarderDto</returns>
        System.Threading.Tasks.Task<InboxForwarderDto> CreateNewInboxForwarderAsync (Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions);

        /// <summary>
        /// Create an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <returns>Task of ApiResponse (InboxForwarderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderDto>> CreateNewInboxForwarderAsyncWithHttpInfo (Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions);
        /// <summary>
        /// Delete an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboxForwarderAsync (Guid id);

        /// <summary>
        /// Delete an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboxForwarderAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Delete inbox forwarders
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarders. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboxForwardersAsync (Guid? inboxId = default(Guid?));

        /// <summary>
        /// Delete inbox forwarders
        /// </summary>
        /// <remarks>
        /// Delete inbox forwarders. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboxForwardersAsyncWithHttpInfo (Guid? inboxId = default(Guid?));
        /// <summary>
        /// Get an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>Task of InboxForwarderDto</returns>
        System.Threading.Tasks.Task<InboxForwarderDto> GetInboxForwarderAsync (Guid id);

        /// <summary>
        /// Get an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>Task of ApiResponse (InboxForwarderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderDto>> GetInboxForwarderAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// List inbox forwarders
        /// </summary>
        /// <remarks>
        /// List all forwarders attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>Task of PageInboxForwarderDto</returns>
        System.Threading.Tasks.Task<PageInboxForwarderDto> GetInboxForwardersAsync (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));

        /// <summary>
        /// List inbox forwarders
        /// </summary>
        /// <remarks>
        /// List all forwarders attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>Task of ApiResponse (PageInboxForwarderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageInboxForwarderDto>> GetInboxForwardersAsyncWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));
        /// <summary>
        /// Test an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test an inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        System.Threading.Tasks.Task<InboxForwarderTestResult> TestInboxForwarderAsync (Guid id, InboxForwarderTestOptions inboxForwarderTestOptions);

        /// <summary>
        /// Test an inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test an inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderTestResult>> TestInboxForwarderAsyncWithHttpInfo (Guid id, InboxForwarderTestOptions inboxForwarderTestOptions);
        /// <summary>
        /// Test inbox forwarders for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox forwarders for inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        System.Threading.Tasks.Task<InboxForwarderTestResult> TestInboxForwardersForInboxAsync (Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions);

        /// <summary>
        /// Test inbox forwarders for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox forwarders for inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderTestResult>> TestInboxForwardersForInboxAsyncWithHttpInfo (Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions);
        /// <summary>
        /// Test new inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test new inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        System.Threading.Tasks.Task<InboxForwarderTestResult> TestNewInboxForwarderAsync (TestNewInboxForwarderOptions testNewInboxForwarderOptions);

        /// <summary>
        /// Test new inbox forwarder
        /// </summary>
        /// <remarks>
        /// Test new inbox forwarder
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxForwarderTestResult>> TestNewInboxForwarderAsyncWithHttpInfo (TestNewInboxForwarderOptions testNewInboxForwarderOptions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxForwarderControllerApi : IInboxForwarderControllerApiSync, IInboxForwarderControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InboxForwarderControllerApi : IInboxForwarderControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxForwarderControllerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxForwarderControllerApi(String basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InboxForwarderControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxForwarderControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InboxForwarderControllerApi(mailslurp.Client.ISynchronousClient client,mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an inbox forwarder Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <returns>InboxForwarderDto</returns>
        public InboxForwarderDto CreateNewInboxForwarder (Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions)
        {
             mailslurp.Client.ApiResponse<InboxForwarderDto> localVarResponse = CreateNewInboxForwarderWithHttpInfo(inboxId, createInboxForwarderOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox forwarder Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <returns>ApiResponse of InboxForwarderDto</returns>
        public mailslurp.Client.ApiResponse< InboxForwarderDto > CreateNewInboxForwarderWithHttpInfo (Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions)
        {
            // verify the required parameter 'createInboxForwarderOptions' is set
            if (createInboxForwarderOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createInboxForwarderOptions' when calling InboxForwarderControllerApi->CreateNewInboxForwarder");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            localVarRequestOptions.Data = createInboxForwarderOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InboxForwarderDto >("/forwarders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewInboxForwarder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox forwarder Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <returns>Task of InboxForwarderDto</returns>
        public async System.Threading.Tasks.Task<InboxForwarderDto> CreateNewInboxForwarderAsync (Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions)
        {
             mailslurp.Client.ApiResponse<InboxForwarderDto> localVarResponse = await CreateNewInboxForwarderAsyncWithHttpInfo(inboxId, createInboxForwarderOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an inbox forwarder Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox id to attach forwarder to</param>
        /// <param name="createInboxForwarderOptions"></param>
        /// <returns>Task of ApiResponse (InboxForwarderDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderDto>> CreateNewInboxForwarderAsyncWithHttpInfo (Guid inboxId, CreateInboxForwarderOptions createInboxForwarderOptions)
        {
            // verify the required parameter 'createInboxForwarderOptions' is set
            if (createInboxForwarderOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createInboxForwarderOptions' when calling InboxForwarderControllerApi->CreateNewInboxForwarder");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            localVarRequestOptions.Data = createInboxForwarderOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InboxForwarderDto>("/forwarders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewInboxForwarder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox forwarder Delete inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns></returns>
        public void DeleteInboxForwarder (Guid id)
        {
             DeleteInboxForwarderWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an inbox forwarder Delete inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteInboxForwarderWithHttpInfo (Guid id)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/forwarders/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxForwarder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox forwarder Delete inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboxForwarderAsync (Guid id)
        {
             await DeleteInboxForwarderAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an inbox forwarder Delete inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteInboxForwarderAsyncWithHttpInfo (Guid id)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/forwarders/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxForwarder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete inbox forwarders Delete inbox forwarders. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <returns></returns>
        public void DeleteInboxForwarders (Guid? inboxId = default(Guid?))
        {
             DeleteInboxForwardersWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete inbox forwarders Delete inbox forwarders. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteInboxForwardersWithHttpInfo (Guid? inboxId = default(Guid?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/forwarders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxForwarders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete inbox forwarders Delete inbox forwarders. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboxForwardersAsync (Guid? inboxId = default(Guid?))
        {
             await DeleteInboxForwardersAsyncWithHttpInfo(inboxId);

        }

        /// <summary>
        /// Delete inbox forwarders Delete inbox forwarders. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach forwarder to (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteInboxForwardersAsyncWithHttpInfo (Guid? inboxId = default(Guid?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/forwarders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxForwarders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox forwarder Get inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>InboxForwarderDto</returns>
        public InboxForwarderDto GetInboxForwarder (Guid id)
        {
             mailslurp.Client.ApiResponse<InboxForwarderDto> localVarResponse = GetInboxForwarderWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox forwarder Get inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>ApiResponse of InboxForwarderDto</returns>
        public mailslurp.Client.ApiResponse< InboxForwarderDto > GetInboxForwarderWithHttpInfo (Guid id)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InboxForwarderDto >("/forwarders/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox forwarder Get inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>Task of InboxForwarderDto</returns>
        public async System.Threading.Tasks.Task<InboxForwarderDto> GetInboxForwarderAsync (Guid id)
        {
             mailslurp.Client.ApiResponse<InboxForwarderDto> localVarResponse = await GetInboxForwarderAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an inbox forwarder Get inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <returns>Task of ApiResponse (InboxForwarderDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderDto>> GetInboxForwarderAsyncWithHttpInfo (Guid id)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InboxForwarderDto>("/forwarders/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List inbox forwarders List all forwarders attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>PageInboxForwarderDto</returns>
        public PageInboxForwarderDto GetInboxForwarders (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
             mailslurp.Client.ApiResponse<PageInboxForwarderDto> localVarResponse = GetInboxForwardersWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List inbox forwarders List all forwarders attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>ApiResponse of PageInboxForwarderDto</returns>
        public mailslurp.Client.ApiResponse< PageInboxForwarderDto > GetInboxForwardersWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageInboxForwarderDto >("/forwarders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List inbox forwarders List all forwarders attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>Task of PageInboxForwarderDto</returns>
        public async System.Threading.Tasks.Task<PageInboxForwarderDto> GetInboxForwardersAsync (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
             mailslurp.Client.ApiResponse<PageInboxForwarderDto> localVarResponse = await GetInboxForwardersAsyncWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List inbox forwarders List all forwarders attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get forwarders from (optional)</param>
        /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>Task of ApiResponse (PageInboxForwarderDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageInboxForwarderDto>> GetInboxForwardersAsyncWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string), string searchFilter = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageInboxForwarderDto>("/forwarders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxForwarders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox forwarder Test an inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>InboxForwarderTestResult</returns>
        public InboxForwarderTestResult TestInboxForwarder (Guid id, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
             mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = TestInboxForwarderWithHttpInfo(id, inboxForwarderTestOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox forwarder Test an inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        public mailslurp.Client.ApiResponse< InboxForwarderTestResult > TestInboxForwarderWithHttpInfo (Guid id, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
            // verify the required parameter 'inboxForwarderTestOptions' is set
            if (inboxForwarderTestOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxForwarderTestOptions' when calling InboxForwarderControllerApi->TestInboxForwarder");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inboxForwarderTestOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InboxForwarderTestResult >("/forwarders/{id}/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInboxForwarder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox forwarder Test an inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        public async System.Threading.Tasks.Task<InboxForwarderTestResult> TestInboxForwarderAsync (Guid id, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
             mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = await TestInboxForwarderAsyncWithHttpInfo(id, inboxForwarderTestOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test an inbox forwarder Test an inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox forwarder</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderTestResult>> TestInboxForwarderAsyncWithHttpInfo (Guid id, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
            // verify the required parameter 'inboxForwarderTestOptions' is set
            if (inboxForwarderTestOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxForwarderTestOptions' when calling InboxForwarderControllerApi->TestInboxForwarder");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inboxForwarderTestOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InboxForwarderTestResult>("/forwarders/{id}/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInboxForwarder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test inbox forwarders for inbox Test inbox forwarders for inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>InboxForwarderTestResult</returns>
        public InboxForwarderTestResult TestInboxForwardersForInbox (Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
             mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = TestInboxForwardersForInboxWithHttpInfo(inboxId, inboxForwarderTestOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test inbox forwarders for inbox Test inbox forwarders for inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        public mailslurp.Client.ApiResponse< InboxForwarderTestResult > TestInboxForwardersForInboxWithHttpInfo (Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
            // verify the required parameter 'inboxForwarderTestOptions' is set
            if (inboxForwarderTestOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxForwarderTestOptions' when calling InboxForwarderControllerApi->TestInboxForwardersForInbox");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            localVarRequestOptions.Data = inboxForwarderTestOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< InboxForwarderTestResult >("/forwarders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInboxForwardersForInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test inbox forwarders for inbox Test inbox forwarders for inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        public async System.Threading.Tasks.Task<InboxForwarderTestResult> TestInboxForwardersForInboxAsync (Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
             mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = await TestInboxForwardersForInboxAsyncWithHttpInfo(inboxId, inboxForwarderTestOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test inbox forwarders for inbox Test inbox forwarders for inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxForwarderTestOptions"></param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderTestResult>> TestInboxForwardersForInboxAsyncWithHttpInfo (Guid inboxId, InboxForwarderTestOptions inboxForwarderTestOptions)
        {
            // verify the required parameter 'inboxForwarderTestOptions' is set
            if (inboxForwarderTestOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxForwarderTestOptions' when calling InboxForwarderControllerApi->TestInboxForwardersForInbox");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            localVarRequestOptions.Data = inboxForwarderTestOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<InboxForwarderTestResult>("/forwarders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInboxForwardersForInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test new inbox forwarder Test new inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <returns>InboxForwarderTestResult</returns>
        public InboxForwarderTestResult TestNewInboxForwarder (TestNewInboxForwarderOptions testNewInboxForwarderOptions)
        {
             mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = TestNewInboxForwarderWithHttpInfo(testNewInboxForwarderOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test new inbox forwarder Test new inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <returns>ApiResponse of InboxForwarderTestResult</returns>
        public mailslurp.Client.ApiResponse< InboxForwarderTestResult > TestNewInboxForwarderWithHttpInfo (TestNewInboxForwarderOptions testNewInboxForwarderOptions)
        {
            // verify the required parameter 'testNewInboxForwarderOptions' is set
            if (testNewInboxForwarderOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'testNewInboxForwarderOptions' when calling InboxForwarderControllerApi->TestNewInboxForwarder");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testNewInboxForwarderOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< InboxForwarderTestResult >("/forwarders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestNewInboxForwarder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test new inbox forwarder Test new inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <returns>Task of InboxForwarderTestResult</returns>
        public async System.Threading.Tasks.Task<InboxForwarderTestResult> TestNewInboxForwarderAsync (TestNewInboxForwarderOptions testNewInboxForwarderOptions)
        {
             mailslurp.Client.ApiResponse<InboxForwarderTestResult> localVarResponse = await TestNewInboxForwarderAsyncWithHttpInfo(testNewInboxForwarderOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test new inbox forwarder Test new inbox forwarder
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxForwarderOptions"></param>
        /// <returns>Task of ApiResponse (InboxForwarderTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxForwarderTestResult>> TestNewInboxForwarderAsyncWithHttpInfo (TestNewInboxForwarderOptions testNewInboxForwarderOptions)
        {
            // verify the required parameter 'testNewInboxForwarderOptions' is set
            if (testNewInboxForwarderOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'testNewInboxForwarderOptions' when calling InboxForwarderControllerApi->TestNewInboxForwarder");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = testNewInboxForwarderOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<InboxForwarderTestResult>("/forwarders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestNewInboxForwarder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
