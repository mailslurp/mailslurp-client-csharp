// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IInboxRulesetControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        InboxRulesetControllerApiEvents Events { get; }

        /// <summary>
        /// Create an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxRulesetOptions"></param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxRulesetApiResponse"/>&gt;</returns>
        Task<ICreateNewInboxRulesetApiResponse> CreateNewInboxRulesetAsync(CreateInboxRulesetOptions createInboxRulesetOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <param name="createInboxRulesetOptions"></param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxRulesetApiResponse"/>&gt;</returns>
        Task<ICreateNewInboxRulesetApiResponse> CreateNewInboxRulesetOrDefaultAsync(CreateInboxRulesetOptions createInboxRulesetOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Delete inbox ruleset
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRulesetApiResponse"/>&gt;</returns>
        Task<IDeleteInboxRulesetApiResponse> DeleteInboxRulesetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Delete inbox ruleset
        /// </remarks>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRulesetApiResponse"/>&gt;</returns>
        Task<IDeleteInboxRulesetApiResponse> DeleteInboxRulesetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete inbox rulesets
        /// </summary>
        /// <remarks>
        /// Delete inbox rulesets. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRulesetsApiResponse"/>&gt;</returns>
        Task<IDeleteInboxRulesetsApiResponse> DeleteInboxRulesetsAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete inbox rulesets
        /// </summary>
        /// <remarks>
        /// Delete inbox rulesets. Accepts optional inboxId filter.
        /// </remarks>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRulesetsApiResponse"/>&gt;</returns>
        Task<IDeleteInboxRulesetsApiResponse> DeleteInboxRulesetsOrDefaultAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRulesetApiResponse"/>&gt;</returns>
        Task<IGetInboxRulesetApiResponse> GetInboxRulesetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRulesetApiResponse"/>&gt;</returns>
        Task<IGetInboxRulesetApiResponse> GetInboxRulesetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List inbox rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets attached to an inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRulesetsApiResponse"/>&gt;</returns>
        Task<IGetInboxRulesetsApiResponse> GetInboxRulesetsAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List inbox rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets attached to an inbox
        /// </remarks>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRulesetsApiResponse"/>&gt;</returns>
        Task<IGetInboxRulesetsApiResponse> GetInboxRulesetsOrDefaultAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Test an inbox ruleset
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="inboxRulesetTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetApiResponse"/>&gt;</returns>
        Task<ITestInboxRulesetApiResponse> TestInboxRulesetAsync(Guid id, InboxRulesetTestOptions inboxRulesetTestOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Test an inbox ruleset
        /// </remarks>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="inboxRulesetTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetApiResponse"/>&gt;</returns>
        Task<ITestInboxRulesetApiResponse> TestInboxRulesetOrDefaultAsync(Guid id, InboxRulesetTestOptions inboxRulesetTestOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test receiving with inbox rulesets
        /// </summary>
        /// <remarks>
        /// Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetReceivingApiResponse"/>&gt;</returns>
        Task<ITestInboxRulesetReceivingApiResponse> TestInboxRulesetReceivingAsync(TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test receiving with inbox rulesets
        /// </summary>
        /// <remarks>
        /// Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets
        /// </remarks>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetReceivingApiResponse"/>&gt;</returns>
        Task<ITestInboxRulesetReceivingApiResponse> TestInboxRulesetReceivingOrDefaultAsync(TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test sending with inbox rulesets
        /// </summary>
        /// <remarks>
        /// Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="testInboxRulesetSendingOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetSendingApiResponse"/>&gt;</returns>
        Task<ITestInboxRulesetSendingApiResponse> TestInboxRulesetSendingAsync(TestInboxRulesetSendingOptions testInboxRulesetSendingOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test sending with inbox rulesets
        /// </summary>
        /// <remarks>
        /// Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets
        /// </remarks>
        /// <param name="testInboxRulesetSendingOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetSendingApiResponse"/>&gt;</returns>
        Task<ITestInboxRulesetSendingApiResponse> TestInboxRulesetSendingOrDefaultAsync(TestInboxRulesetSendingOptions testInboxRulesetSendingOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test inbox rulesets for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox rulesets for inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxRulesetTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetsForInboxApiResponse"/>&gt;</returns>
        Task<ITestInboxRulesetsForInboxApiResponse> TestInboxRulesetsForInboxAsync(Guid inboxId, InboxRulesetTestOptions inboxRulesetTestOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test inbox rulesets for inbox
        /// </summary>
        /// <remarks>
        /// Test inbox rulesets for inbox
        /// </remarks>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxRulesetTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetsForInboxApiResponse"/>&gt;</returns>
        Task<ITestInboxRulesetsForInboxApiResponse> TestInboxRulesetsForInboxOrDefaultAsync(Guid inboxId, InboxRulesetTestOptions inboxRulesetTestOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test new inbox ruleset
        /// </summary>
        /// <remarks>
        /// Test new inbox ruleset
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxRulesetOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestNewInboxRulesetApiResponse"/>&gt;</returns>
        Task<ITestNewInboxRulesetApiResponse> TestNewInboxRulesetAsync(TestNewInboxRulesetOptions testNewInboxRulesetOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test new inbox ruleset
        /// </summary>
        /// <remarks>
        /// Test new inbox ruleset
        /// </remarks>
        /// <param name="testNewInboxRulesetOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestNewInboxRulesetApiResponse"/>&gt;</returns>
        Task<ITestNewInboxRulesetApiResponse> TestNewInboxRulesetOrDefaultAsync(TestNewInboxRulesetOptions testNewInboxRulesetOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateNewInboxRulesetApiResponse"/>
    /// </summary>
    public interface ICreateNewInboxRulesetApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxRulesetDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteInboxRulesetApiResponse"/>
    /// </summary>
    public interface IDeleteInboxRulesetApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteInboxRulesetsApiResponse"/>
    /// </summary>
    public interface IDeleteInboxRulesetsApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetInboxRulesetApiResponse"/>
    /// </summary>
    public interface IGetInboxRulesetApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxRulesetDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInboxRulesetsApiResponse"/>
    /// </summary>
    public interface IGetInboxRulesetsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageInboxRulesetDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestInboxRulesetApiResponse"/>
    /// </summary>
    public interface ITestInboxRulesetApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxRulesetTestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestInboxRulesetReceivingApiResponse"/>
    /// </summary>
    public interface ITestInboxRulesetReceivingApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.TestInboxRulesetReceivingResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestInboxRulesetSendingApiResponse"/>
    /// </summary>
    public interface ITestInboxRulesetSendingApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.TestInboxRulesetSendingResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestInboxRulesetsForInboxApiResponse"/>
    /// </summary>
    public interface ITestInboxRulesetsForInboxApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxRulesetTestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestNewInboxRulesetApiResponse"/>
    /// </summary>
    public interface ITestNewInboxRulesetApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxRulesetTestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class InboxRulesetControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateNewInboxRuleset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateNewInboxRuleset;

        internal void ExecuteOnCreateNewInboxRuleset(InboxRulesetControllerApi.CreateNewInboxRulesetApiResponse apiResponse)
        {
            OnCreateNewInboxRuleset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNewInboxRuleset(Exception exception)
        {
            OnErrorCreateNewInboxRuleset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteInboxRuleset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteInboxRuleset;

        internal void ExecuteOnDeleteInboxRuleset(InboxRulesetControllerApi.DeleteInboxRulesetApiResponse apiResponse)
        {
            OnDeleteInboxRuleset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteInboxRuleset(Exception exception)
        {
            OnErrorDeleteInboxRuleset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteInboxRulesets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteInboxRulesets;

        internal void ExecuteOnDeleteInboxRulesets(InboxRulesetControllerApi.DeleteInboxRulesetsApiResponse apiResponse)
        {
            OnDeleteInboxRulesets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteInboxRulesets(Exception exception)
        {
            OnErrorDeleteInboxRulesets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetInboxRuleset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetInboxRuleset;

        internal void ExecuteOnGetInboxRuleset(InboxRulesetControllerApi.GetInboxRulesetApiResponse apiResponse)
        {
            OnGetInboxRuleset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInboxRuleset(Exception exception)
        {
            OnErrorGetInboxRuleset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetInboxRulesets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetInboxRulesets;

        internal void ExecuteOnGetInboxRulesets(InboxRulesetControllerApi.GetInboxRulesetsApiResponse apiResponse)
        {
            OnGetInboxRulesets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInboxRulesets(Exception exception)
        {
            OnErrorGetInboxRulesets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestInboxRuleset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestInboxRuleset;

        internal void ExecuteOnTestInboxRuleset(InboxRulesetControllerApi.TestInboxRulesetApiResponse apiResponse)
        {
            OnTestInboxRuleset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestInboxRuleset(Exception exception)
        {
            OnErrorTestInboxRuleset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestInboxRulesetReceiving;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestInboxRulesetReceiving;

        internal void ExecuteOnTestInboxRulesetReceiving(InboxRulesetControllerApi.TestInboxRulesetReceivingApiResponse apiResponse)
        {
            OnTestInboxRulesetReceiving?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestInboxRulesetReceiving(Exception exception)
        {
            OnErrorTestInboxRulesetReceiving?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestInboxRulesetSending;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestInboxRulesetSending;

        internal void ExecuteOnTestInboxRulesetSending(InboxRulesetControllerApi.TestInboxRulesetSendingApiResponse apiResponse)
        {
            OnTestInboxRulesetSending?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestInboxRulesetSending(Exception exception)
        {
            OnErrorTestInboxRulesetSending?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestInboxRulesetsForInbox;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestInboxRulesetsForInbox;

        internal void ExecuteOnTestInboxRulesetsForInbox(InboxRulesetControllerApi.TestInboxRulesetsForInboxApiResponse apiResponse)
        {
            OnTestInboxRulesetsForInbox?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestInboxRulesetsForInbox(Exception exception)
        {
            OnErrorTestInboxRulesetsForInbox?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestNewInboxRuleset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestNewInboxRuleset;

        internal void ExecuteOnTestNewInboxRuleset(InboxRulesetControllerApi.TestNewInboxRulesetApiResponse apiResponse)
        {
            OnTestNewInboxRuleset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestNewInboxRuleset(Exception exception)
        {
            OnErrorTestNewInboxRuleset?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class InboxRulesetControllerApi : IInboxRulesetControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<InboxRulesetControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public InboxRulesetControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxRulesetControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxRulesetControllerApi(ILogger<InboxRulesetControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, InboxRulesetControllerApiEvents inboxRulesetControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<InboxRulesetControllerApi>();
            HttpClient = httpClient;
            Events = inboxRulesetControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateNewInboxRuleset(CreateInboxRulesetOptions createInboxRulesetOptions, ref Option<Guid> inboxId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createInboxRulesetOptions"></param>
        /// <returns></returns>
        private void ValidateCreateNewInboxRuleset(CreateInboxRulesetOptions createInboxRulesetOptions)
        {
            if (createInboxRulesetOptions == null)
                throw new ArgumentNullException(nameof(createInboxRulesetOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createInboxRulesetOptions"></param>
        /// <param name="inboxId"></param>
        private void AfterCreateNewInboxRulesetDefaultImplementation(ICreateNewInboxRulesetApiResponse apiResponseLocalVar, CreateInboxRulesetOptions createInboxRulesetOptions, Option<Guid> inboxId)
        {
            bool suppressDefaultLog = false;
            AfterCreateNewInboxRuleset(ref suppressDefaultLog, apiResponseLocalVar, createInboxRulesetOptions, inboxId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createInboxRulesetOptions"></param>
        /// <param name="inboxId"></param>
        partial void AfterCreateNewInboxRuleset(ref bool suppressDefaultLog, ICreateNewInboxRulesetApiResponse apiResponseLocalVar, CreateInboxRulesetOptions createInboxRulesetOptions, Option<Guid> inboxId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createInboxRulesetOptions"></param>
        /// <param name="inboxId"></param>
        private void OnErrorCreateNewInboxRulesetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateInboxRulesetOptions createInboxRulesetOptions, Option<Guid> inboxId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateNewInboxRuleset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createInboxRulesetOptions, inboxId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createInboxRulesetOptions"></param>
        /// <param name="inboxId"></param>
        partial void OnErrorCreateNewInboxRuleset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateInboxRulesetOptions createInboxRulesetOptions, Option<Guid> inboxId);

        /// <summary>
        /// Create an inbox ruleset Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <param name="createInboxRulesetOptions"></param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxRulesetApiResponse"/>&gt;</returns>
        public async Task<ICreateNewInboxRulesetApiResponse> CreateNewInboxRulesetOrDefaultAsync(CreateInboxRulesetOptions createInboxRulesetOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNewInboxRulesetAsync(createInboxRulesetOptions, inboxId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an inbox ruleset Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxRulesetOptions"></param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxRulesetApiResponse"/>&gt;</returns>
        public async Task<ICreateNewInboxRulesetApiResponse> CreateNewInboxRulesetAsync(CreateInboxRulesetOptions createInboxRulesetOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNewInboxRuleset(createInboxRulesetOptions);

                FormatCreateNewInboxRuleset(createInboxRulesetOptions, ref inboxId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/rulesets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/rulesets");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (createInboxRulesetOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createInboxRulesetOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateNewInboxRulesetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNewInboxRulesetApiResponse>();

                        CreateNewInboxRulesetApiResponse apiResponseLocalVar = new CreateNewInboxRulesetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/rulesets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNewInboxRulesetDefaultImplementation(apiResponseLocalVar, createInboxRulesetOptions, inboxId);

                        Events.ExecuteOnCreateNewInboxRuleset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNewInboxRulesetDefaultImplementation(e, "/rulesets", uriBuilderLocalVar.Path, createInboxRulesetOptions, inboxId);
                Events.ExecuteOnErrorCreateNewInboxRuleset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNewInboxRulesetApiResponse"/>
        /// </summary>
        public partial class CreateNewInboxRulesetApiResponse : mailslurp.Client.ApiResponse, ICreateNewInboxRulesetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNewInboxRulesetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNewInboxRulesetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNewInboxRulesetApiResponse(ILogger<CreateNewInboxRulesetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxRulesetDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxRulesetDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxRulesetDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteInboxRuleset(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteInboxRulesetDefaultImplementation(IDeleteInboxRulesetApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteInboxRuleset(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteInboxRuleset(ref bool suppressDefaultLog, IDeleteInboxRulesetApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteInboxRulesetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteInboxRuleset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteInboxRuleset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Delete an inbox ruleset Delete inbox ruleset
        /// </summary>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRulesetApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxRulesetApiResponse> DeleteInboxRulesetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteInboxRulesetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an inbox ruleset Delete inbox ruleset
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRulesetApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxRulesetApiResponse> DeleteInboxRulesetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteInboxRuleset(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/rulesets/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/rulesets/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteInboxRulesetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteInboxRulesetApiResponse>();

                        DeleteInboxRulesetApiResponse apiResponseLocalVar = new DeleteInboxRulesetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/rulesets/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteInboxRulesetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteInboxRuleset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteInboxRulesetDefaultImplementation(e, "/rulesets/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteInboxRuleset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteInboxRulesetApiResponse"/>
        /// </summary>
        public partial class DeleteInboxRulesetApiResponse : mailslurp.Client.ApiResponse, IDeleteInboxRulesetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteInboxRulesetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteInboxRulesetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteInboxRulesetApiResponse(ILogger<DeleteInboxRulesetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteInboxRulesets(ref Option<Guid> inboxId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        private void AfterDeleteInboxRulesetsDefaultImplementation(IDeleteInboxRulesetsApiResponse apiResponseLocalVar, Option<Guid> inboxId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteInboxRulesets(ref suppressDefaultLog, apiResponseLocalVar, inboxId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        partial void AfterDeleteInboxRulesets(ref bool suppressDefaultLog, IDeleteInboxRulesetsApiResponse apiResponseLocalVar, Option<Guid> inboxId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        private void OnErrorDeleteInboxRulesetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteInboxRulesets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        partial void OnErrorDeleteInboxRulesets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId);

        /// <summary>
        /// Delete inbox rulesets Delete inbox rulesets. Accepts optional inboxId filter.
        /// </summary>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRulesetsApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxRulesetsApiResponse> DeleteInboxRulesetsOrDefaultAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteInboxRulesetsAsync(inboxId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete inbox rulesets Delete inbox rulesets. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRulesetsApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxRulesetsApiResponse> DeleteInboxRulesetsAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteInboxRulesets(ref inboxId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/rulesets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/rulesets");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteInboxRulesetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteInboxRulesetsApiResponse>();

                        DeleteInboxRulesetsApiResponse apiResponseLocalVar = new DeleteInboxRulesetsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/rulesets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteInboxRulesetsDefaultImplementation(apiResponseLocalVar, inboxId);

                        Events.ExecuteOnDeleteInboxRulesets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteInboxRulesetsDefaultImplementation(e, "/rulesets", uriBuilderLocalVar.Path, inboxId);
                Events.ExecuteOnErrorDeleteInboxRulesets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteInboxRulesetsApiResponse"/>
        /// </summary>
        public partial class DeleteInboxRulesetsApiResponse : mailslurp.Client.ApiResponse, IDeleteInboxRulesetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteInboxRulesetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteInboxRulesetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteInboxRulesetsApiResponse(ILogger<DeleteInboxRulesetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInboxRuleset(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetInboxRulesetDefaultImplementation(IGetInboxRulesetApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetInboxRuleset(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetInboxRuleset(ref bool suppressDefaultLog, IGetInboxRulesetApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetInboxRulesetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInboxRuleset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetInboxRuleset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get an inbox ruleset Get inbox ruleset
        /// </summary>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRulesetApiResponse"/>&gt;</returns>
        public async Task<IGetInboxRulesetApiResponse> GetInboxRulesetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInboxRulesetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox ruleset Get inbox ruleset
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRulesetApiResponse"/>&gt;</returns>
        public async Task<IGetInboxRulesetApiResponse> GetInboxRulesetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetInboxRuleset(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/rulesets/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/rulesets/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetInboxRulesetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInboxRulesetApiResponse>();

                        GetInboxRulesetApiResponse apiResponseLocalVar = new GetInboxRulesetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/rulesets/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInboxRulesetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetInboxRuleset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInboxRulesetDefaultImplementation(e, "/rulesets/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetInboxRuleset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInboxRulesetApiResponse"/>
        /// </summary>
        public partial class GetInboxRulesetApiResponse : mailslurp.Client.ApiResponse, IGetInboxRulesetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInboxRulesetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInboxRulesetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInboxRulesetApiResponse(ILogger<GetInboxRulesetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxRulesetDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxRulesetDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxRulesetDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInboxRulesets(ref Option<Guid> inboxId, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<string> searchFilter, ref Option<DateTime> since, ref Option<DateTime> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <returns></returns>
        private void ValidateGetInboxRulesets(Option<string> sort, Option<string> searchFilter)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void AfterGetInboxRulesetsDefaultImplementation(IGetInboxRulesetsApiResponse apiResponseLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLog = false;
            AfterGetInboxRulesets(ref suppressDefaultLog, apiResponseLocalVar, inboxId, page, size, sort, searchFilter, since, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void AfterGetInboxRulesets(ref bool suppressDefaultLog, IGetInboxRulesetsApiResponse apiResponseLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void OnErrorGetInboxRulesetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInboxRulesets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId, page, size, sort, searchFilter, since, before);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void OnErrorGetInboxRulesets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// List inbox rulesets List all rulesets attached to an inbox
        /// </summary>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRulesetsApiResponse"/>&gt;</returns>
        public async Task<IGetInboxRulesetsApiResponse> GetInboxRulesetsOrDefaultAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInboxRulesetsAsync(inboxId, page, size, sort, searchFilter, since, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List inbox rulesets List all rulesets attached to an inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRulesetsApiResponse"/>&gt;</returns>
        public async Task<IGetInboxRulesetsApiResponse> GetInboxRulesetsAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInboxRulesets(sort, searchFilter);

                FormatGetInboxRulesets(ref inboxId, ref page, ref size, ref sort, ref searchFilter, ref since, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/rulesets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/rulesets");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetInboxRulesetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInboxRulesetsApiResponse>();

                        GetInboxRulesetsApiResponse apiResponseLocalVar = new GetInboxRulesetsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/rulesets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInboxRulesetsDefaultImplementation(apiResponseLocalVar, inboxId, page, size, sort, searchFilter, since, before);

                        Events.ExecuteOnGetInboxRulesets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInboxRulesetsDefaultImplementation(e, "/rulesets", uriBuilderLocalVar.Path, inboxId, page, size, sort, searchFilter, since, before);
                Events.ExecuteOnErrorGetInboxRulesets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInboxRulesetsApiResponse"/>
        /// </summary>
        public partial class GetInboxRulesetsApiResponse : mailslurp.Client.ApiResponse, IGetInboxRulesetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInboxRulesetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInboxRulesetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInboxRulesetsApiResponse(ILogger<GetInboxRulesetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageInboxRulesetDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageInboxRulesetDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageInboxRulesetDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestInboxRuleset(ref Guid id, InboxRulesetTestOptions inboxRulesetTestOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="inboxRulesetTestOptions"></param>
        /// <returns></returns>
        private void ValidateTestInboxRuleset(InboxRulesetTestOptions inboxRulesetTestOptions)
        {
            if (inboxRulesetTestOptions == null)
                throw new ArgumentNullException(nameof(inboxRulesetTestOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="inboxRulesetTestOptions"></param>
        private void AfterTestInboxRulesetDefaultImplementation(ITestInboxRulesetApiResponse apiResponseLocalVar, Guid id, InboxRulesetTestOptions inboxRulesetTestOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestInboxRuleset(ref suppressDefaultLog, apiResponseLocalVar, id, inboxRulesetTestOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="inboxRulesetTestOptions"></param>
        partial void AfterTestInboxRuleset(ref bool suppressDefaultLog, ITestInboxRulesetApiResponse apiResponseLocalVar, Guid id, InboxRulesetTestOptions inboxRulesetTestOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="inboxRulesetTestOptions"></param>
        private void OnErrorTestInboxRulesetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, InboxRulesetTestOptions inboxRulesetTestOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestInboxRuleset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, inboxRulesetTestOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="inboxRulesetTestOptions"></param>
        partial void OnErrorTestInboxRuleset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, InboxRulesetTestOptions inboxRulesetTestOptions);

        /// <summary>
        /// Test an inbox ruleset Test an inbox ruleset
        /// </summary>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="inboxRulesetTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetApiResponse"/>&gt;</returns>
        public async Task<ITestInboxRulesetApiResponse> TestInboxRulesetOrDefaultAsync(Guid id, InboxRulesetTestOptions inboxRulesetTestOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestInboxRulesetAsync(id, inboxRulesetTestOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test an inbox ruleset Test an inbox ruleset
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <param name="inboxRulesetTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetApiResponse"/>&gt;</returns>
        public async Task<ITestInboxRulesetApiResponse> TestInboxRulesetAsync(Guid id, InboxRulesetTestOptions inboxRulesetTestOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestInboxRuleset(inboxRulesetTestOptions);

                FormatTestInboxRuleset(ref id, inboxRulesetTestOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/rulesets/{id}/test"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/rulesets/{id}/test");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (inboxRulesetTestOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(inboxRulesetTestOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestInboxRulesetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestInboxRulesetApiResponse>();

                        TestInboxRulesetApiResponse apiResponseLocalVar = new TestInboxRulesetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/rulesets/{id}/test", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestInboxRulesetDefaultImplementation(apiResponseLocalVar, id, inboxRulesetTestOptions);

                        Events.ExecuteOnTestInboxRuleset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestInboxRulesetDefaultImplementation(e, "/rulesets/{id}/test", uriBuilderLocalVar.Path, id, inboxRulesetTestOptions);
                Events.ExecuteOnErrorTestInboxRuleset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestInboxRulesetApiResponse"/>
        /// </summary>
        public partial class TestInboxRulesetApiResponse : mailslurp.Client.ApiResponse, ITestInboxRulesetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestInboxRulesetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestInboxRulesetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestInboxRulesetApiResponse(ILogger<TestInboxRulesetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxRulesetTestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxRulesetTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxRulesetTestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestInboxRulesetReceiving(TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        /// <returns></returns>
        private void ValidateTestInboxRulesetReceiving(TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions)
        {
            if (testInboxRulesetReceivingOptions == null)
                throw new ArgumentNullException(nameof(testInboxRulesetReceivingOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        private void AfterTestInboxRulesetReceivingDefaultImplementation(ITestInboxRulesetReceivingApiResponse apiResponseLocalVar, TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestInboxRulesetReceiving(ref suppressDefaultLog, apiResponseLocalVar, testInboxRulesetReceivingOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        partial void AfterTestInboxRulesetReceiving(ref bool suppressDefaultLog, ITestInboxRulesetReceivingApiResponse apiResponseLocalVar, TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        private void OnErrorTestInboxRulesetReceivingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestInboxRulesetReceiving(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, testInboxRulesetReceivingOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        partial void OnErrorTestInboxRulesetReceiving(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions);

        /// <summary>
        /// Test receiving with inbox rulesets Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets
        /// </summary>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetReceivingApiResponse"/>&gt;</returns>
        public async Task<ITestInboxRulesetReceivingApiResponse> TestInboxRulesetReceivingOrDefaultAsync(TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestInboxRulesetReceivingAsync(testInboxRulesetReceivingOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test receiving with inbox rulesets Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="testInboxRulesetReceivingOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetReceivingApiResponse"/>&gt;</returns>
        public async Task<ITestInboxRulesetReceivingApiResponse> TestInboxRulesetReceivingAsync(TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestInboxRulesetReceiving(testInboxRulesetReceivingOptions);

                FormatTestInboxRulesetReceiving(testInboxRulesetReceivingOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/rulesets/test-receiving"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/rulesets/test-receiving");

                    httpRequestMessageLocalVar.Content = (testInboxRulesetReceivingOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(testInboxRulesetReceivingOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestInboxRulesetReceivingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestInboxRulesetReceivingApiResponse>();

                        TestInboxRulesetReceivingApiResponse apiResponseLocalVar = new TestInboxRulesetReceivingApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/rulesets/test-receiving", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestInboxRulesetReceivingDefaultImplementation(apiResponseLocalVar, testInboxRulesetReceivingOptions);

                        Events.ExecuteOnTestInboxRulesetReceiving(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestInboxRulesetReceivingDefaultImplementation(e, "/rulesets/test-receiving", uriBuilderLocalVar.Path, testInboxRulesetReceivingOptions);
                Events.ExecuteOnErrorTestInboxRulesetReceiving(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestInboxRulesetReceivingApiResponse"/>
        /// </summary>
        public partial class TestInboxRulesetReceivingApiResponse : mailslurp.Client.ApiResponse, ITestInboxRulesetReceivingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestInboxRulesetReceivingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestInboxRulesetReceivingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestInboxRulesetReceivingApiResponse(ILogger<TestInboxRulesetReceivingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.TestInboxRulesetReceivingResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.TestInboxRulesetReceivingResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.TestInboxRulesetReceivingResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestInboxRulesetSending(TestInboxRulesetSendingOptions testInboxRulesetSendingOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="testInboxRulesetSendingOptions"></param>
        /// <returns></returns>
        private void ValidateTestInboxRulesetSending(TestInboxRulesetSendingOptions testInboxRulesetSendingOptions)
        {
            if (testInboxRulesetSendingOptions == null)
                throw new ArgumentNullException(nameof(testInboxRulesetSendingOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="testInboxRulesetSendingOptions"></param>
        private void AfterTestInboxRulesetSendingDefaultImplementation(ITestInboxRulesetSendingApiResponse apiResponseLocalVar, TestInboxRulesetSendingOptions testInboxRulesetSendingOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestInboxRulesetSending(ref suppressDefaultLog, apiResponseLocalVar, testInboxRulesetSendingOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="testInboxRulesetSendingOptions"></param>
        partial void AfterTestInboxRulesetSending(ref bool suppressDefaultLog, ITestInboxRulesetSendingApiResponse apiResponseLocalVar, TestInboxRulesetSendingOptions testInboxRulesetSendingOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="testInboxRulesetSendingOptions"></param>
        private void OnErrorTestInboxRulesetSendingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TestInboxRulesetSendingOptions testInboxRulesetSendingOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestInboxRulesetSending(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, testInboxRulesetSendingOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="testInboxRulesetSendingOptions"></param>
        partial void OnErrorTestInboxRulesetSending(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TestInboxRulesetSendingOptions testInboxRulesetSendingOptions);

        /// <summary>
        /// Test sending with inbox rulesets Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets
        /// </summary>
        /// <param name="testInboxRulesetSendingOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetSendingApiResponse"/>&gt;</returns>
        public async Task<ITestInboxRulesetSendingApiResponse> TestInboxRulesetSendingOrDefaultAsync(TestInboxRulesetSendingOptions testInboxRulesetSendingOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestInboxRulesetSendingAsync(testInboxRulesetSendingOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test sending with inbox rulesets Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="testInboxRulesetSendingOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetSendingApiResponse"/>&gt;</returns>
        public async Task<ITestInboxRulesetSendingApiResponse> TestInboxRulesetSendingAsync(TestInboxRulesetSendingOptions testInboxRulesetSendingOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestInboxRulesetSending(testInboxRulesetSendingOptions);

                FormatTestInboxRulesetSending(testInboxRulesetSendingOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/rulesets/test-sending"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/rulesets/test-sending");

                    httpRequestMessageLocalVar.Content = (testInboxRulesetSendingOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(testInboxRulesetSendingOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestInboxRulesetSendingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestInboxRulesetSendingApiResponse>();

                        TestInboxRulesetSendingApiResponse apiResponseLocalVar = new TestInboxRulesetSendingApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/rulesets/test-sending", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestInboxRulesetSendingDefaultImplementation(apiResponseLocalVar, testInboxRulesetSendingOptions);

                        Events.ExecuteOnTestInboxRulesetSending(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestInboxRulesetSendingDefaultImplementation(e, "/rulesets/test-sending", uriBuilderLocalVar.Path, testInboxRulesetSendingOptions);
                Events.ExecuteOnErrorTestInboxRulesetSending(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestInboxRulesetSendingApiResponse"/>
        /// </summary>
        public partial class TestInboxRulesetSendingApiResponse : mailslurp.Client.ApiResponse, ITestInboxRulesetSendingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestInboxRulesetSendingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestInboxRulesetSendingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestInboxRulesetSendingApiResponse(ILogger<TestInboxRulesetSendingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.TestInboxRulesetSendingResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.TestInboxRulesetSendingResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.TestInboxRulesetSendingResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestInboxRulesetsForInbox(ref Guid inboxId, InboxRulesetTestOptions inboxRulesetTestOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="inboxRulesetTestOptions"></param>
        /// <returns></returns>
        private void ValidateTestInboxRulesetsForInbox(InboxRulesetTestOptions inboxRulesetTestOptions)
        {
            if (inboxRulesetTestOptions == null)
                throw new ArgumentNullException(nameof(inboxRulesetTestOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="inboxRulesetTestOptions"></param>
        private void AfterTestInboxRulesetsForInboxDefaultImplementation(ITestInboxRulesetsForInboxApiResponse apiResponseLocalVar, Guid inboxId, InboxRulesetTestOptions inboxRulesetTestOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestInboxRulesetsForInbox(ref suppressDefaultLog, apiResponseLocalVar, inboxId, inboxRulesetTestOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="inboxRulesetTestOptions"></param>
        partial void AfterTestInboxRulesetsForInbox(ref bool suppressDefaultLog, ITestInboxRulesetsForInboxApiResponse apiResponseLocalVar, Guid inboxId, InboxRulesetTestOptions inboxRulesetTestOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="inboxRulesetTestOptions"></param>
        private void OnErrorTestInboxRulesetsForInboxDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, InboxRulesetTestOptions inboxRulesetTestOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestInboxRulesetsForInbox(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId, inboxRulesetTestOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="inboxRulesetTestOptions"></param>
        partial void OnErrorTestInboxRulesetsForInbox(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, InboxRulesetTestOptions inboxRulesetTestOptions);

        /// <summary>
        /// Test inbox rulesets for inbox Test inbox rulesets for inbox
        /// </summary>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxRulesetTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetsForInboxApiResponse"/>&gt;</returns>
        public async Task<ITestInboxRulesetsForInboxApiResponse> TestInboxRulesetsForInboxOrDefaultAsync(Guid inboxId, InboxRulesetTestOptions inboxRulesetTestOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestInboxRulesetsForInboxAsync(inboxId, inboxRulesetTestOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test inbox rulesets for inbox Test inbox rulesets for inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">ID of inbox</param>
        /// <param name="inboxRulesetTestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestInboxRulesetsForInboxApiResponse"/>&gt;</returns>
        public async Task<ITestInboxRulesetsForInboxApiResponse> TestInboxRulesetsForInboxAsync(Guid inboxId, InboxRulesetTestOptions inboxRulesetTestOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestInboxRulesetsForInbox(inboxRulesetTestOptions);

                FormatTestInboxRulesetsForInbox(ref inboxId, inboxRulesetTestOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/rulesets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/rulesets");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (inboxRulesetTestOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(inboxRulesetTestOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestInboxRulesetsForInboxApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestInboxRulesetsForInboxApiResponse>();

                        TestInboxRulesetsForInboxApiResponse apiResponseLocalVar = new TestInboxRulesetsForInboxApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/rulesets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestInboxRulesetsForInboxDefaultImplementation(apiResponseLocalVar, inboxId, inboxRulesetTestOptions);

                        Events.ExecuteOnTestInboxRulesetsForInbox(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestInboxRulesetsForInboxDefaultImplementation(e, "/rulesets", uriBuilderLocalVar.Path, inboxId, inboxRulesetTestOptions);
                Events.ExecuteOnErrorTestInboxRulesetsForInbox(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestInboxRulesetsForInboxApiResponse"/>
        /// </summary>
        public partial class TestInboxRulesetsForInboxApiResponse : mailslurp.Client.ApiResponse, ITestInboxRulesetsForInboxApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestInboxRulesetsForInboxApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestInboxRulesetsForInboxApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestInboxRulesetsForInboxApiResponse(ILogger<TestInboxRulesetsForInboxApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxRulesetTestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxRulesetTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxRulesetTestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestNewInboxRuleset(TestNewInboxRulesetOptions testNewInboxRulesetOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="testNewInboxRulesetOptions"></param>
        /// <returns></returns>
        private void ValidateTestNewInboxRuleset(TestNewInboxRulesetOptions testNewInboxRulesetOptions)
        {
            if (testNewInboxRulesetOptions == null)
                throw new ArgumentNullException(nameof(testNewInboxRulesetOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="testNewInboxRulesetOptions"></param>
        private void AfterTestNewInboxRulesetDefaultImplementation(ITestNewInboxRulesetApiResponse apiResponseLocalVar, TestNewInboxRulesetOptions testNewInboxRulesetOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestNewInboxRuleset(ref suppressDefaultLog, apiResponseLocalVar, testNewInboxRulesetOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="testNewInboxRulesetOptions"></param>
        partial void AfterTestNewInboxRuleset(ref bool suppressDefaultLog, ITestNewInboxRulesetApiResponse apiResponseLocalVar, TestNewInboxRulesetOptions testNewInboxRulesetOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="testNewInboxRulesetOptions"></param>
        private void OnErrorTestNewInboxRulesetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TestNewInboxRulesetOptions testNewInboxRulesetOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestNewInboxRuleset(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, testNewInboxRulesetOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="testNewInboxRulesetOptions"></param>
        partial void OnErrorTestNewInboxRuleset(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TestNewInboxRulesetOptions testNewInboxRulesetOptions);

        /// <summary>
        /// Test new inbox ruleset Test new inbox ruleset
        /// </summary>
        /// <param name="testNewInboxRulesetOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestNewInboxRulesetApiResponse"/>&gt;</returns>
        public async Task<ITestNewInboxRulesetApiResponse> TestNewInboxRulesetOrDefaultAsync(TestNewInboxRulesetOptions testNewInboxRulesetOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestNewInboxRulesetAsync(testNewInboxRulesetOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test new inbox ruleset Test new inbox ruleset
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="testNewInboxRulesetOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestNewInboxRulesetApiResponse"/>&gt;</returns>
        public async Task<ITestNewInboxRulesetApiResponse> TestNewInboxRulesetAsync(TestNewInboxRulesetOptions testNewInboxRulesetOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestNewInboxRuleset(testNewInboxRulesetOptions);

                FormatTestNewInboxRuleset(testNewInboxRulesetOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/rulesets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/rulesets");

                    httpRequestMessageLocalVar.Content = (testNewInboxRulesetOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(testNewInboxRulesetOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestNewInboxRulesetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestNewInboxRulesetApiResponse>();

                        TestNewInboxRulesetApiResponse apiResponseLocalVar = new TestNewInboxRulesetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/rulesets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestNewInboxRulesetDefaultImplementation(apiResponseLocalVar, testNewInboxRulesetOptions);

                        Events.ExecuteOnTestNewInboxRuleset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestNewInboxRulesetDefaultImplementation(e, "/rulesets", uriBuilderLocalVar.Path, testNewInboxRulesetOptions);
                Events.ExecuteOnErrorTestNewInboxRuleset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestNewInboxRulesetApiResponse"/>
        /// </summary>
        public partial class TestNewInboxRulesetApiResponse : mailslurp.Client.ApiResponse, ITestNewInboxRulesetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestNewInboxRulesetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestNewInboxRulesetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestNewInboxRulesetApiResponse(ILogger<TestNewInboxRulesetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxRulesetTestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxRulesetTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxRulesetTestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
