/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxRulesetControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxRulesetOptions">createInboxRulesetOptions</param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <returns>InboxRulesetDto</returns>
        InboxRulesetDto CreateNewInboxRuleset (CreateInboxRulesetOptions createInboxRulesetOptions, Guid? inboxId = default(Guid?));

        /// <summary>
        /// Create an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxRulesetOptions">createInboxRulesetOptions</param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <returns>ApiResponse of InboxRulesetDto</returns>
        ApiResponse<InboxRulesetDto> CreateNewInboxRulesetWithHttpInfo (CreateInboxRulesetOptions createInboxRulesetOptions, Guid? inboxId = default(Guid?));
        /// <summary>
        /// Delete an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Delete inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns></returns>
        void DeleteInboxRuleset (Guid id);

        /// <summary>
        /// Delete an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Delete inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboxRulesetWithHttpInfo (Guid id);
        /// <summary>
        /// Delete inbox rulesets
        /// </summary>
        /// <remarks>
        /// Delete inbox rulesets. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <returns></returns>
        void DeleteInboxRulesets (Guid? inboxId = default(Guid?));

        /// <summary>
        /// Delete inbox rulesets
        /// </summary>
        /// <remarks>
        /// Delete inbox rulesets. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboxRulesetsWithHttpInfo (Guid? inboxId = default(Guid?));
        /// <summary>
        /// Get an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>InboxRulesetDto</returns>
        InboxRulesetDto GetInboxRuleset (Guid id);

        /// <summary>
        /// Get an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>ApiResponse of InboxRulesetDto</returns>
        ApiResponse<InboxRulesetDto> GetInboxRulesetWithHttpInfo (Guid id);
        /// <summary>
        /// List inbox rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageInboxRulesetProjection</returns>
        PageInboxRulesetProjection GetInboxRulesets (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// List inbox rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageInboxRulesetProjection</returns>
        ApiResponse<PageInboxRulesetProjection> GetInboxRulesetsWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxRulesetControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxRulesetOptions">createInboxRulesetOptions</param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <returns>Task of InboxRulesetDto</returns>
        System.Threading.Tasks.Task<InboxRulesetDto> CreateNewInboxRulesetAsync (CreateInboxRulesetOptions createInboxRulesetOptions, Guid? inboxId = default(Guid?));

        /// <summary>
        /// Create an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxRulesetOptions">createInboxRulesetOptions</param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <returns>Task of ApiResponse (InboxRulesetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxRulesetDto>> CreateNewInboxRulesetAsyncWithHttpInfo (CreateInboxRulesetOptions createInboxRulesetOptions, Guid? inboxId = default(Guid?));
        /// <summary>
        /// Delete an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Delete inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboxRulesetAsync (Guid id);

        /// <summary>
        /// Delete an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Delete inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboxRulesetAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// Delete inbox rulesets
        /// </summary>
        /// <remarks>
        /// Delete inbox rulesets. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboxRulesetsAsync (Guid? inboxId = default(Guid?));

        /// <summary>
        /// Delete inbox rulesets
        /// </summary>
        /// <remarks>
        /// Delete inbox rulesets. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboxRulesetsAsyncWithHttpInfo (Guid? inboxId = default(Guid?));
        /// <summary>
        /// Get an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>Task of InboxRulesetDto</returns>
        System.Threading.Tasks.Task<InboxRulesetDto> GetInboxRulesetAsync (Guid id);

        /// <summary>
        /// Get an inbox ruleset
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>Task of ApiResponse (InboxRulesetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxRulesetDto>> GetInboxRulesetAsyncWithHttpInfo (Guid id);
        /// <summary>
        /// List inbox rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageInboxRulesetProjection</returns>
        System.Threading.Tasks.Task<PageInboxRulesetProjection> GetInboxRulesetsAsync (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// List inbox rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets attached to an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageInboxRulesetProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageInboxRulesetProjection>> GetInboxRulesetsAsyncWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxRulesetControllerApi : IInboxRulesetControllerApiSync, IInboxRulesetControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InboxRulesetControllerApi : IInboxRulesetControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxRulesetControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxRulesetControllerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxRulesetControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxRulesetControllerApi(String basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxRulesetControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InboxRulesetControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxRulesetControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InboxRulesetControllerApi(mailslurp.Client.ISynchronousClient client,mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an inbox ruleset Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxRulesetOptions">createInboxRulesetOptions</param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <returns>InboxRulesetDto</returns>
        public InboxRulesetDto CreateNewInboxRuleset (CreateInboxRulesetOptions createInboxRulesetOptions, Guid? inboxId = default(Guid?))
        {
             mailslurp.Client.ApiResponse<InboxRulesetDto> localVarResponse = CreateNewInboxRulesetWithHttpInfo(createInboxRulesetOptions, inboxId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox ruleset Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxRulesetOptions">createInboxRulesetOptions</param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <returns>ApiResponse of InboxRulesetDto</returns>
        public mailslurp.Client.ApiResponse< InboxRulesetDto > CreateNewInboxRulesetWithHttpInfo (CreateInboxRulesetOptions createInboxRulesetOptions, Guid? inboxId = default(Guid?))
        {
            // verify the required parameter 'createInboxRulesetOptions' is set
            if (createInboxRulesetOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createInboxRulesetOptions' when calling InboxRulesetControllerApi->CreateNewInboxRuleset");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = createInboxRulesetOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InboxRulesetDto >("/rulesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewInboxRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox ruleset Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxRulesetOptions">createInboxRulesetOptions</param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <returns>Task of InboxRulesetDto</returns>
        public async System.Threading.Tasks.Task<InboxRulesetDto> CreateNewInboxRulesetAsync (CreateInboxRulesetOptions createInboxRulesetOptions, Guid? inboxId = default(Guid?))
        {
             mailslurp.Client.ApiResponse<InboxRulesetDto> localVarResponse = await CreateNewInboxRulesetAsyncWithHttpInfo(createInboxRulesetOptions, inboxId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an inbox ruleset Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxRulesetOptions">createInboxRulesetOptions</param>
        /// <param name="inboxId">Inbox id to attach ruleset to (optional)</param>
        /// <returns>Task of ApiResponse (InboxRulesetDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxRulesetDto>> CreateNewInboxRulesetAsyncWithHttpInfo (CreateInboxRulesetOptions createInboxRulesetOptions, Guid? inboxId = default(Guid?))
        {
            // verify the required parameter 'createInboxRulesetOptions' is set
            if (createInboxRulesetOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createInboxRulesetOptions' when calling InboxRulesetControllerApi->CreateNewInboxRuleset");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = createInboxRulesetOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InboxRulesetDto>("/rulesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewInboxRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox ruleset Delete inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns></returns>
        public void DeleteInboxRuleset (Guid id)
        {
             DeleteInboxRulesetWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an inbox ruleset Delete inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteInboxRulesetWithHttpInfo (Guid id)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/rulesets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox ruleset Delete inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboxRulesetAsync (Guid id)
        {
             await DeleteInboxRulesetAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an inbox ruleset Delete inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteInboxRulesetAsyncWithHttpInfo (Guid id)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/rulesets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete inbox rulesets Delete inbox rulesets. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <returns></returns>
        public void DeleteInboxRulesets (Guid? inboxId = default(Guid?))
        {
             DeleteInboxRulesetsWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete inbox rulesets Delete inbox rulesets. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteInboxRulesetsWithHttpInfo (Guid? inboxId = default(Guid?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/rulesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxRulesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete inbox rulesets Delete inbox rulesets. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboxRulesetsAsync (Guid? inboxId = default(Guid?))
        {
             await DeleteInboxRulesetsAsyncWithHttpInfo(inboxId);

        }

        /// <summary>
        /// Delete inbox rulesets Delete inbox rulesets. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach ruleset to (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteInboxRulesetsAsyncWithHttpInfo (Guid? inboxId = default(Guid?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/rulesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInboxRulesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox ruleset Get inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>InboxRulesetDto</returns>
        public InboxRulesetDto GetInboxRuleset (Guid id)
        {
             mailslurp.Client.ApiResponse<InboxRulesetDto> localVarResponse = GetInboxRulesetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox ruleset Get inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>ApiResponse of InboxRulesetDto</returns>
        public mailslurp.Client.ApiResponse< InboxRulesetDto > GetInboxRulesetWithHttpInfo (Guid id)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InboxRulesetDto >("/rulesets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox ruleset Get inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>Task of InboxRulesetDto</returns>
        public async System.Threading.Tasks.Task<InboxRulesetDto> GetInboxRulesetAsync (Guid id)
        {
             mailslurp.Client.ApiResponse<InboxRulesetDto> localVarResponse = await GetInboxRulesetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an inbox ruleset Get inbox ruleset
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox ruleset</param>
        /// <returns>Task of ApiResponse (InboxRulesetDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxRulesetDto>> GetInboxRulesetAsyncWithHttpInfo (Guid id)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InboxRulesetDto>("/rulesets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxRuleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List inbox rulesets List all rulesets attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageInboxRulesetProjection</returns>
        public PageInboxRulesetProjection GetInboxRulesets (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageInboxRulesetProjection> localVarResponse = GetInboxRulesetsWithHttpInfo(inboxId, page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List inbox rulesets List all rulesets attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageInboxRulesetProjection</returns>
        public mailslurp.Client.ApiResponse< PageInboxRulesetProjection > GetInboxRulesetsWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageInboxRulesetProjection >("/rulesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxRulesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List inbox rulesets List all rulesets attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageInboxRulesetProjection</returns>
        public async System.Threading.Tasks.Task<PageInboxRulesetProjection> GetInboxRulesetsAsync (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageInboxRulesetProjection> localVarResponse = await GetInboxRulesetsAsyncWithHttpInfo(inboxId, page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List inbox rulesets List all rulesets attached to an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get rulesets from (optional)</param>
        /// <param name="page">Optional page index in inbox ruleset list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox ruleset list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageInboxRulesetProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageInboxRulesetProjection>> GetInboxRulesetsAsyncWithHttpInfo (Guid? inboxId = default(Guid?), int? page = default(int?), int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageInboxRulesetProjection>("/rulesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxRulesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
