// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMailServerControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MailServerControllerApiEvents Events { get; }

        /// <summary>
        /// Get DNS Mail Server records for a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="describeDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDescribeMailServerDomainApiResponse"/>&gt;</returns>
        Task<IDescribeMailServerDomainApiResponse> DescribeMailServerDomainAsync(DescribeDomainOptions describeDomainOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DNS Mail Server records for a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="describeDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDescribeMailServerDomainApiResponse"/>&gt;</returns>
        Task<IDescribeMailServerDomainApiResponse> DescribeMailServerDomainOrDefaultAsync(DescribeDomainOptions describeDomainOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup DNS records for a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dNSLookupOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDnsLookupApiResponse"/>&gt;</returns>
        Task<IGetDnsLookupApiResponse> GetDnsLookupAsync(DNSLookupOptions dNSLookupOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup DNS records for a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="dNSLookupOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDnsLookupApiResponse"/>&gt;</returns>
        Task<IGetDnsLookupApiResponse> GetDnsLookupOrDefaultAsync(DNSLookupOptions dNSLookupOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup DNS records for multiple domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dNSLookupsOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDnsLookupsApiResponse"/>&gt;</returns>
        Task<IGetDnsLookupsApiResponse> GetDnsLookupsAsync(DNSLookupsOptions dNSLookupsOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lookup DNS records for multiple domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="dNSLookupsOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDnsLookupsApiResponse"/>&gt;</returns>
        Task<IGetDnsLookupsApiResponse> GetDnsLookupsOrDefaultAsync(DNSLookupsOptions dNSLookupsOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get IP address for a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIpAddressApiResponse"/>&gt;</returns>
        Task<IGetIpAddressApiResponse> GetIpAddressAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get IP address for a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIpAddressApiResponse"/>&gt;</returns>
        Task<IGetIpAddressApiResponse> GetIpAddressOrDefaultAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyEmailAddressOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyEmailAddressApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<IVerifyEmailAddressApiResponse> VerifyEmailAddressAsync(VerifyEmailAddressOptions verifyEmailAddressOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="verifyEmailAddressOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyEmailAddressApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<IVerifyEmailAddressApiResponse> VerifyEmailAddressOrDefaultAsync(VerifyEmailAddressOptions verifyEmailAddressOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDescribeMailServerDomainApiResponse"/>
    /// </summary>
    public interface IDescribeMailServerDomainApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.DescribeMailServerDomainResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetDnsLookupApiResponse"/>
    /// </summary>
    public interface IGetDnsLookupApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.DNSLookupResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetDnsLookupsApiResponse"/>
    /// </summary>
    public interface IGetDnsLookupsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.DNSLookupResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetIpAddressApiResponse"/>
    /// </summary>
    public interface IGetIpAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.IPAddressResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IVerifyEmailAddressApiResponse"/>
    /// </summary>
    public interface IVerifyEmailAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.EmailVerificationResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MailServerControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDescribeMailServerDomain;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDescribeMailServerDomain;

        internal void ExecuteOnDescribeMailServerDomain(MailServerControllerApi.DescribeMailServerDomainApiResponse apiResponse)
        {
            OnDescribeMailServerDomain?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDescribeMailServerDomain(Exception exception)
        {
            OnErrorDescribeMailServerDomain?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetDnsLookup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetDnsLookup;

        internal void ExecuteOnGetDnsLookup(MailServerControllerApi.GetDnsLookupApiResponse apiResponse)
        {
            OnGetDnsLookup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDnsLookup(Exception exception)
        {
            OnErrorGetDnsLookup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetDnsLookups;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetDnsLookups;

        internal void ExecuteOnGetDnsLookups(MailServerControllerApi.GetDnsLookupsApiResponse apiResponse)
        {
            OnGetDnsLookups?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDnsLookups(Exception exception)
        {
            OnErrorGetDnsLookups?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetIpAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetIpAddress;

        internal void ExecuteOnGetIpAddress(MailServerControllerApi.GetIpAddressApiResponse apiResponse)
        {
            OnGetIpAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetIpAddress(Exception exception)
        {
            OnErrorGetIpAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnVerifyEmailAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorVerifyEmailAddress;

        internal void ExecuteOnVerifyEmailAddress(MailServerControllerApi.VerifyEmailAddressApiResponse apiResponse)
        {
            OnVerifyEmailAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifyEmailAddress(Exception exception)
        {
            OnErrorVerifyEmailAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MailServerControllerApi : IMailServerControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MailServerControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MailServerControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MailServerControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MailServerControllerApi(ILogger<MailServerControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MailServerControllerApiEvents mailServerControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MailServerControllerApi>();
            HttpClient = httpClient;
            Events = mailServerControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatDescribeMailServerDomain(DescribeDomainOptions describeDomainOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="describeDomainOptions"></param>
        /// <returns></returns>
        private void ValidateDescribeMailServerDomain(DescribeDomainOptions describeDomainOptions)
        {
            if (describeDomainOptions == null)
                throw new ArgumentNullException(nameof(describeDomainOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="describeDomainOptions"></param>
        private void AfterDescribeMailServerDomainDefaultImplementation(IDescribeMailServerDomainApiResponse apiResponseLocalVar, DescribeDomainOptions describeDomainOptions)
        {
            bool suppressDefaultLog = false;
            AfterDescribeMailServerDomain(ref suppressDefaultLog, apiResponseLocalVar, describeDomainOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="describeDomainOptions"></param>
        partial void AfterDescribeMailServerDomain(ref bool suppressDefaultLog, IDescribeMailServerDomainApiResponse apiResponseLocalVar, DescribeDomainOptions describeDomainOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="describeDomainOptions"></param>
        private void OnErrorDescribeMailServerDomainDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DescribeDomainOptions describeDomainOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDescribeMailServerDomain(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, describeDomainOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="describeDomainOptions"></param>
        partial void OnErrorDescribeMailServerDomain(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DescribeDomainOptions describeDomainOptions);

        /// <summary>
        /// Get DNS Mail Server records for a domain 
        /// </summary>
        /// <param name="describeDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDescribeMailServerDomainApiResponse"/>&gt;</returns>
        public async Task<IDescribeMailServerDomainApiResponse> DescribeMailServerDomainOrDefaultAsync(DescribeDomainOptions describeDomainOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DescribeMailServerDomainAsync(describeDomainOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DNS Mail Server records for a domain 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="describeDomainOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDescribeMailServerDomainApiResponse"/>&gt;</returns>
        public async Task<IDescribeMailServerDomainApiResponse> DescribeMailServerDomainAsync(DescribeDomainOptions describeDomainOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDescribeMailServerDomain(describeDomainOptions);

                FormatDescribeMailServerDomain(describeDomainOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/mail-server/describe/domain"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/mail-server/describe/domain");

                    httpRequestMessageLocalVar.Content = (describeDomainOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(describeDomainOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DescribeMailServerDomainApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DescribeMailServerDomainApiResponse>();

                        DescribeMailServerDomainApiResponse apiResponseLocalVar = new DescribeMailServerDomainApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail-server/describe/domain", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDescribeMailServerDomainDefaultImplementation(apiResponseLocalVar, describeDomainOptions);

                        Events.ExecuteOnDescribeMailServerDomain(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDescribeMailServerDomainDefaultImplementation(e, "/mail-server/describe/domain", uriBuilderLocalVar.Path, describeDomainOptions);
                Events.ExecuteOnErrorDescribeMailServerDomain(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DescribeMailServerDomainApiResponse"/>
        /// </summary>
        public partial class DescribeMailServerDomainApiResponse : mailslurp.Client.ApiResponse, IDescribeMailServerDomainApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DescribeMailServerDomainApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DescribeMailServerDomainApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DescribeMailServerDomainApiResponse(ILogger<DescribeMailServerDomainApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.DescribeMailServerDomainResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.DescribeMailServerDomainResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.DescribeMailServerDomainResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetDnsLookup(DNSLookupOptions dNSLookupOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="dNSLookupOptions"></param>
        /// <returns></returns>
        private void ValidateGetDnsLookup(DNSLookupOptions dNSLookupOptions)
        {
            if (dNSLookupOptions == null)
                throw new ArgumentNullException(nameof(dNSLookupOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dNSLookupOptions"></param>
        private void AfterGetDnsLookupDefaultImplementation(IGetDnsLookupApiResponse apiResponseLocalVar, DNSLookupOptions dNSLookupOptions)
        {
            bool suppressDefaultLog = false;
            AfterGetDnsLookup(ref suppressDefaultLog, apiResponseLocalVar, dNSLookupOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dNSLookupOptions"></param>
        partial void AfterGetDnsLookup(ref bool suppressDefaultLog, IGetDnsLookupApiResponse apiResponseLocalVar, DNSLookupOptions dNSLookupOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dNSLookupOptions"></param>
        private void OnErrorGetDnsLookupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DNSLookupOptions dNSLookupOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDnsLookup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, dNSLookupOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dNSLookupOptions"></param>
        partial void OnErrorGetDnsLookup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DNSLookupOptions dNSLookupOptions);

        /// <summary>
        /// Lookup DNS records for a domain 
        /// </summary>
        /// <param name="dNSLookupOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDnsLookupApiResponse"/>&gt;</returns>
        public async Task<IGetDnsLookupApiResponse> GetDnsLookupOrDefaultAsync(DNSLookupOptions dNSLookupOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDnsLookupAsync(dNSLookupOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Lookup DNS records for a domain 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dNSLookupOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDnsLookupApiResponse"/>&gt;</returns>
        public async Task<IGetDnsLookupApiResponse> GetDnsLookupAsync(DNSLookupOptions dNSLookupOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDnsLookup(dNSLookupOptions);

                FormatGetDnsLookup(dNSLookupOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/mail-server/describe/dns-lookup"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/mail-server/describe/dns-lookup");

                    httpRequestMessageLocalVar.Content = (dNSLookupOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(dNSLookupOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetDnsLookupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDnsLookupApiResponse>();

                        GetDnsLookupApiResponse apiResponseLocalVar = new GetDnsLookupApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail-server/describe/dns-lookup", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDnsLookupDefaultImplementation(apiResponseLocalVar, dNSLookupOptions);

                        Events.ExecuteOnGetDnsLookup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDnsLookupDefaultImplementation(e, "/mail-server/describe/dns-lookup", uriBuilderLocalVar.Path, dNSLookupOptions);
                Events.ExecuteOnErrorGetDnsLookup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDnsLookupApiResponse"/>
        /// </summary>
        public partial class GetDnsLookupApiResponse : mailslurp.Client.ApiResponse, IGetDnsLookupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDnsLookupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDnsLookupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDnsLookupApiResponse(ILogger<GetDnsLookupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.DNSLookupResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.DNSLookupResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.DNSLookupResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetDnsLookups(DNSLookupsOptions dNSLookupsOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="dNSLookupsOptions"></param>
        /// <returns></returns>
        private void ValidateGetDnsLookups(DNSLookupsOptions dNSLookupsOptions)
        {
            if (dNSLookupsOptions == null)
                throw new ArgumentNullException(nameof(dNSLookupsOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dNSLookupsOptions"></param>
        private void AfterGetDnsLookupsDefaultImplementation(IGetDnsLookupsApiResponse apiResponseLocalVar, DNSLookupsOptions dNSLookupsOptions)
        {
            bool suppressDefaultLog = false;
            AfterGetDnsLookups(ref suppressDefaultLog, apiResponseLocalVar, dNSLookupsOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dNSLookupsOptions"></param>
        partial void AfterGetDnsLookups(ref bool suppressDefaultLog, IGetDnsLookupsApiResponse apiResponseLocalVar, DNSLookupsOptions dNSLookupsOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dNSLookupsOptions"></param>
        private void OnErrorGetDnsLookupsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DNSLookupsOptions dNSLookupsOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDnsLookups(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, dNSLookupsOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dNSLookupsOptions"></param>
        partial void OnErrorGetDnsLookups(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DNSLookupsOptions dNSLookupsOptions);

        /// <summary>
        /// Lookup DNS records for multiple domains 
        /// </summary>
        /// <param name="dNSLookupsOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDnsLookupsApiResponse"/>&gt;</returns>
        public async Task<IGetDnsLookupsApiResponse> GetDnsLookupsOrDefaultAsync(DNSLookupsOptions dNSLookupsOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDnsLookupsAsync(dNSLookupsOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Lookup DNS records for multiple domains 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dNSLookupsOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDnsLookupsApiResponse"/>&gt;</returns>
        public async Task<IGetDnsLookupsApiResponse> GetDnsLookupsAsync(DNSLookupsOptions dNSLookupsOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDnsLookups(dNSLookupsOptions);

                FormatGetDnsLookups(dNSLookupsOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/mail-server/describe/dns-lookups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/mail-server/describe/dns-lookups");

                    httpRequestMessageLocalVar.Content = (dNSLookupsOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(dNSLookupsOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetDnsLookupsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDnsLookupsApiResponse>();

                        GetDnsLookupsApiResponse apiResponseLocalVar = new GetDnsLookupsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail-server/describe/dns-lookups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDnsLookupsDefaultImplementation(apiResponseLocalVar, dNSLookupsOptions);

                        Events.ExecuteOnGetDnsLookups(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDnsLookupsDefaultImplementation(e, "/mail-server/describe/dns-lookups", uriBuilderLocalVar.Path, dNSLookupsOptions);
                Events.ExecuteOnErrorGetDnsLookups(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDnsLookupsApiResponse"/>
        /// </summary>
        public partial class GetDnsLookupsApiResponse : mailslurp.Client.ApiResponse, IGetDnsLookupsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDnsLookupsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDnsLookupsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDnsLookupsApiResponse(ILogger<GetDnsLookupsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.DNSLookupResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.DNSLookupResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.DNSLookupResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetIpAddress(ref string name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateGetIpAddress(string name)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        private void AfterGetIpAddressDefaultImplementation(IGetIpAddressApiResponse apiResponseLocalVar, string name)
        {
            bool suppressDefaultLog = false;
            AfterGetIpAddress(ref suppressDefaultLog, apiResponseLocalVar, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        partial void AfterGetIpAddress(ref bool suppressDefaultLog, IGetIpAddressApiResponse apiResponseLocalVar, string name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        private void OnErrorGetIpAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetIpAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        partial void OnErrorGetIpAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name);

        /// <summary>
        /// Get IP address for a domain 
        /// </summary>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIpAddressApiResponse"/>&gt;</returns>
        public async Task<IGetIpAddressApiResponse> GetIpAddressOrDefaultAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetIpAddressAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get IP address for a domain 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIpAddressApiResponse"/>&gt;</returns>
        public async Task<IGetIpAddressApiResponse> GetIpAddressAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetIpAddress(name);

                FormatGetIpAddress(ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/mail-server/describe/ip-address"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/mail-server/describe/ip-address");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetIpAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetIpAddressApiResponse>();

                        GetIpAddressApiResponse apiResponseLocalVar = new GetIpAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail-server/describe/ip-address", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetIpAddressDefaultImplementation(apiResponseLocalVar, name);

                        Events.ExecuteOnGetIpAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetIpAddressDefaultImplementation(e, "/mail-server/describe/ip-address", uriBuilderLocalVar.Path, name);
                Events.ExecuteOnErrorGetIpAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetIpAddressApiResponse"/>
        /// </summary>
        public partial class GetIpAddressApiResponse : mailslurp.Client.ApiResponse, IGetIpAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetIpAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetIpAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetIpAddressApiResponse(ILogger<GetIpAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.IPAddressResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.IPAddressResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.IPAddressResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifyEmailAddress(VerifyEmailAddressOptions verifyEmailAddressOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="verifyEmailAddressOptions"></param>
        /// <returns></returns>
        private void ValidateVerifyEmailAddress(VerifyEmailAddressOptions verifyEmailAddressOptions)
        {
            if (verifyEmailAddressOptions == null)
                throw new ArgumentNullException(nameof(verifyEmailAddressOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="verifyEmailAddressOptions"></param>
        private void AfterVerifyEmailAddressDefaultImplementation(IVerifyEmailAddressApiResponse apiResponseLocalVar, VerifyEmailAddressOptions verifyEmailAddressOptions)
        {
            bool suppressDefaultLog = false;
            AfterVerifyEmailAddress(ref suppressDefaultLog, apiResponseLocalVar, verifyEmailAddressOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="verifyEmailAddressOptions"></param>
        partial void AfterVerifyEmailAddress(ref bool suppressDefaultLog, IVerifyEmailAddressApiResponse apiResponseLocalVar, VerifyEmailAddressOptions verifyEmailAddressOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="verifyEmailAddressOptions"></param>
        private void OnErrorVerifyEmailAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, VerifyEmailAddressOptions verifyEmailAddressOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifyEmailAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, verifyEmailAddressOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="verifyEmailAddressOptions"></param>
        partial void OnErrorVerifyEmailAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, VerifyEmailAddressOptions verifyEmailAddressOptions);

        /// <summary>
        /// Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server. 
        /// </summary>
        /// <param name="verifyEmailAddressOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyEmailAddressApiResponse"/>&gt;</returns>
        public async Task<IVerifyEmailAddressApiResponse> VerifyEmailAddressOrDefaultAsync(VerifyEmailAddressOptions verifyEmailAddressOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyEmailAddressAsync(verifyEmailAddressOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyEmailAddressOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyEmailAddressApiResponse"/>&gt;</returns>
        public async Task<IVerifyEmailAddressApiResponse> VerifyEmailAddressAsync(VerifyEmailAddressOptions verifyEmailAddressOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateVerifyEmailAddress(verifyEmailAddressOptions);

                FormatVerifyEmailAddress(verifyEmailAddressOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/mail-server/verify/email-address"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/mail-server/verify/email-address");

                    httpRequestMessageLocalVar.Content = (verifyEmailAddressOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(verifyEmailAddressOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<VerifyEmailAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifyEmailAddressApiResponse>();

                        VerifyEmailAddressApiResponse apiResponseLocalVar = new VerifyEmailAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/mail-server/verify/email-address", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterVerifyEmailAddressDefaultImplementation(apiResponseLocalVar, verifyEmailAddressOptions);

                        Events.ExecuteOnVerifyEmailAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifyEmailAddressDefaultImplementation(e, "/mail-server/verify/email-address", uriBuilderLocalVar.Path, verifyEmailAddressOptions);
                Events.ExecuteOnErrorVerifyEmailAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifyEmailAddressApiResponse"/>
        /// </summary>
        public partial class VerifyEmailAddressApiResponse : mailslurp.Client.ApiResponse, IVerifyEmailAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifyEmailAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifyEmailAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyEmailAddressApiResponse(ILogger<VerifyEmailAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.EmailVerificationResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.EmailVerificationResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.EmailVerificationResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
