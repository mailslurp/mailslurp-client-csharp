/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete all emails
        /// </summary>
        /// <remarks>
        /// Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAllEmails ();

        /// <summary>
        /// Delete all emails
        /// </summary>
        /// <remarks>
        /// Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllEmailsWithHttpInfo ();
        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to delete</param>
        /// <returns></returns>
        void DeleteEmail (Guid emailId);

        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints.
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DownloadAttachment (string attachmentId, Guid emailId, string apiKey = default(string));

        /// <summary>
        /// Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints.
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadAttachmentWithHttpInfo (string attachmentId, Guid emailId, string apiKey = default(string));
        /// <summary>
        /// Get email attachment as base64 encoded string (alternative to binary responses)
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>DownloadAttachmentDto</returns>
        DownloadAttachmentDto DownloadAttachmentBase64 (string attachmentId, Guid emailId);

        /// <summary>
        /// Get email attachment as base64 encoded string (alternative to binary responses)
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of DownloadAttachmentDto</returns>
        ApiResponse<DownloadAttachmentDto> DownloadAttachmentBase64WithHttpInfo (string attachmentId, Guid emailId);
        /// <summary>
        /// Forward email
        /// </summary>
        /// <remarks>
        /// Forward an existing email to new recipients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns></returns>
        void ForwardEmail (Guid emailId, ForwardEmailOptions forwardEmailOptions);

        /// <summary>
        /// Forward email
        /// </summary>
        /// <remarks>
        /// Forward an existing email to new recipients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ForwardEmailWithHttpInfo (Guid emailId, ForwardEmailOptions forwardEmailOptions);
        /// <summary>
        /// Get email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata such as name and content-type for a given attachment and email.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>AttachmentMetaData</returns>
        AttachmentMetaData GetAttachmentMetaData (string attachmentId, Guid emailId);

        /// <summary>
        /// Get email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata such as name and content-type for a given attachment and email.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of AttachmentMetaData</returns>
        ApiResponse<AttachmentMetaData> GetAttachmentMetaDataWithHttpInfo (string attachmentId, Guid emailId);
        /// <summary>
        /// Get all email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>List&lt;AttachmentMetaData&gt;</returns>
        List<AttachmentMetaData> GetAttachments (Guid emailId);

        /// <summary>
        /// Get all email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of List&lt;AttachmentMetaData&gt;</returns>
        ApiResponse<List<AttachmentMetaData>> GetAttachmentsWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get email content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Email</returns>
        Email GetEmail (Guid emailId, bool? decode = default(bool?));

        /// <summary>
        /// Get email content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>ApiResponse of Email</returns>
        ApiResponse<Email> GetEmailWithHttpInfo (Guid emailId, bool? decode = default(bool?));
        /// <summary>
        /// Get email content regex pattern match results. Runs regex against email body and returns match groups.
        /// </summary>
        /// <remarks>
        /// Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to match against</param>
        /// <param name="contentMatchOptions">contentMatchOptions</param>
        /// <returns>EmailContentMatchResult</returns>
        EmailContentMatchResult GetEmailContentMatch (Guid emailId, ContentMatchOptions contentMatchOptions);

        /// <summary>
        /// Get email content regex pattern match results. Runs regex against email body and returns match groups.
        /// </summary>
        /// <remarks>
        /// Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to match against</param>
        /// <param name="contentMatchOptions">contentMatchOptions</param>
        /// <returns>ApiResponse of EmailContentMatchResult</returns>
        ApiResponse<EmailContentMatchResult> GetEmailContentMatchWithHttpInfo (Guid emailId, ContentMatchOptions contentMatchOptions);
        /// <summary>
        /// Get email content as HTML
        /// </summary>
        /// <remarks>
        /// Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>string</returns>
        string GetEmailHTML (Guid emailId, bool? decode = default(bool?));

        /// <summary>
        /// Get email content as HTML
        /// </summary>
        /// <remarks>
        /// Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetEmailHTMLWithHttpInfo (Guid emailId, bool? decode = default(bool?));
        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters
        /// </summary>
        /// <remarks>
        /// Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to perform HTML query on</param>
        /// <param name="htmlSelector">HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. (optional)</param>
        /// <returns>EmailTextLinesResult</returns>
        EmailTextLinesResult GetEmailHTMLQuery (Guid emailId, string htmlSelector = default(string));

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters
        /// </summary>
        /// <remarks>
        /// Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to perform HTML query on</param>
        /// <param name="htmlSelector">HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. (optional)</param>
        /// <returns>ApiResponse of EmailTextLinesResult</returns>
        ApiResponse<EmailTextLinesResult> GetEmailHTMLQueryWithHttpInfo (Guid emailId, string htmlSelector = default(string));
        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters
        /// </summary>
        /// <remarks>
        /// Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to fetch text for</param>
        /// <param name="decodeHtmlEntities">Decode HTML entities (optional)</param>
        /// <param name="lineSeparator">Line separator character (optional)</param>
        /// <returns>EmailTextLinesResult</returns>
        EmailTextLinesResult GetEmailTextLines (Guid emailId, bool? decodeHtmlEntities = default(bool?), string lineSeparator = default(string));

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters
        /// </summary>
        /// <remarks>
        /// Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to fetch text for</param>
        /// <param name="decodeHtmlEntities">Decode HTML entities (optional)</param>
        /// <param name="lineSeparator">Line separator character (optional)</param>
        /// <returns>ApiResponse of EmailTextLinesResult</returns>
        ApiResponse<EmailTextLinesResult> GetEmailTextLinesWithHttpInfo (Guid emailId, bool? decodeHtmlEntities = default(bool?), string lineSeparator = default(string));
        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>PageEmailProjection</returns>
        PageEmailProjection GetEmailsPaginated (List<Guid> inboxId = default(List<Guid>), int? page = default(int?), int? size = default(int?), string sort = default(string), bool? unreadOnly = default(bool?));

        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>ApiResponse of PageEmailProjection</returns>
        ApiResponse<PageEmailProjection> GetEmailsPaginatedWithHttpInfo (List<Guid> inboxId = default(List<Guid>), int? page = default(int?), int? size = default(int?), string sort = default(string), bool? unreadOnly = default(bool?));
        /// <summary>
        /// Get raw email string
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>string</returns>
        string GetRawEmailContents (Guid emailId);

        /// <summary>
        /// Get raw email string
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetRawEmailContentsWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get raw email in JSON
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>RawEmailJson</returns>
        RawEmailJson GetRawEmailJson (Guid emailId);

        /// <summary>
        /// Get raw email in JSON
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of RawEmailJson</returns>
        ApiResponse<RawEmailJson> GetRawEmailJsonWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get unread email count
        /// </summary>
        /// <remarks>
        /// Get number of emails unread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnreadCount</returns>
        UnreadCount GetUnreadEmailCount ();

        /// <summary>
        /// Get unread email count
        /// </summary>
        /// <remarks>
        /// Get number of emails unread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnreadCount</returns>
        ApiResponse<UnreadCount> GetUnreadEmailCountWithHttpInfo ();
        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToEmailOptions">replyToEmailOptions</param>
        /// <returns>SentEmailDto</returns>
        SentEmailDto ReplyToEmail (Guid emailId, ReplyToEmailOptions replyToEmailOptions);

        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToEmailOptions">replyToEmailOptions</param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        ApiResponse<SentEmailDto> ReplyToEmailWithHttpInfo (Guid emailId, ReplyToEmailOptions replyToEmailOptions);
        /// <summary>
        /// Validate email
        /// </summary>
        /// <remarks>
        /// Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>ValidationDto</returns>
        ValidationDto ValidateEmail (Guid emailId);

        /// <summary>
        /// Validate email
        /// </summary>
        /// <remarks>
        /// Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of ValidationDto</returns>
        ApiResponse<ValidationDto> ValidateEmailWithHttpInfo (Guid emailId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete all emails
        /// </summary>
        /// <remarks>
        /// Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllEmailsAsync ();

        /// <summary>
        /// Delete all emails
        /// </summary>
        /// <remarks>
        /// Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllEmailsAsyncWithHttpInfo ();
        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailAsync (Guid emailId);

        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailAsyncWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints.
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadAttachmentAsync (string attachmentId, Guid emailId, string apiKey = default(string));

        /// <summary>
        /// Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints.
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadAttachmentAsyncWithHttpInfo (string attachmentId, Guid emailId, string apiKey = default(string));
        /// <summary>
        /// Get email attachment as base64 encoded string (alternative to binary responses)
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of DownloadAttachmentDto</returns>
        System.Threading.Tasks.Task<DownloadAttachmentDto> DownloadAttachmentBase64Async (string attachmentId, Guid emailId);

        /// <summary>
        /// Get email attachment as base64 encoded string (alternative to binary responses)
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (DownloadAttachmentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DownloadAttachmentDto>> DownloadAttachmentBase64AsyncWithHttpInfo (string attachmentId, Guid emailId);
        /// <summary>
        /// Forward email
        /// </summary>
        /// <remarks>
        /// Forward an existing email to new recipients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ForwardEmailAsync (Guid emailId, ForwardEmailOptions forwardEmailOptions);

        /// <summary>
        /// Forward email
        /// </summary>
        /// <remarks>
        /// Forward an existing email to new recipients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ForwardEmailAsyncWithHttpInfo (Guid emailId, ForwardEmailOptions forwardEmailOptions);
        /// <summary>
        /// Get email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata such as name and content-type for a given attachment and email.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of AttachmentMetaData</returns>
        System.Threading.Tasks.Task<AttachmentMetaData> GetAttachmentMetaDataAsync (string attachmentId, Guid emailId);

        /// <summary>
        /// Get email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata such as name and content-type for a given attachment and email.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (AttachmentMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentMetaData>> GetAttachmentMetaDataAsyncWithHttpInfo (string attachmentId, Guid emailId);
        /// <summary>
        /// Get all email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of List&lt;AttachmentMetaData&gt;</returns>
        System.Threading.Tasks.Task<List<AttachmentMetaData>> GetAttachmentsAsync (Guid emailId);

        /// <summary>
        /// Get all email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentMetaData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachmentMetaData>>> GetAttachmentsAsyncWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get email content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Task of Email</returns>
        System.Threading.Tasks.Task<Email> GetEmailAsync (Guid emailId, bool? decode = default(bool?));

        /// <summary>
        /// Get email content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Email)</returns>
        System.Threading.Tasks.Task<ApiResponse<Email>> GetEmailAsyncWithHttpInfo (Guid emailId, bool? decode = default(bool?));
        /// <summary>
        /// Get email content regex pattern match results. Runs regex against email body and returns match groups.
        /// </summary>
        /// <remarks>
        /// Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to match against</param>
        /// <param name="contentMatchOptions">contentMatchOptions</param>
        /// <returns>Task of EmailContentMatchResult</returns>
        System.Threading.Tasks.Task<EmailContentMatchResult> GetEmailContentMatchAsync (Guid emailId, ContentMatchOptions contentMatchOptions);

        /// <summary>
        /// Get email content regex pattern match results. Runs regex against email body and returns match groups.
        /// </summary>
        /// <remarks>
        /// Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to match against</param>
        /// <param name="contentMatchOptions">contentMatchOptions</param>
        /// <returns>Task of ApiResponse (EmailContentMatchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailContentMatchResult>> GetEmailContentMatchAsyncWithHttpInfo (Guid emailId, ContentMatchOptions contentMatchOptions);
        /// <summary>
        /// Get email content as HTML
        /// </summary>
        /// <remarks>
        /// Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetEmailHTMLAsync (Guid emailId, bool? decode = default(bool?));

        /// <summary>
        /// Get email content as HTML
        /// </summary>
        /// <remarks>
        /// Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetEmailHTMLAsyncWithHttpInfo (Guid emailId, bool? decode = default(bool?));
        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters
        /// </summary>
        /// <remarks>
        /// Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to perform HTML query on</param>
        /// <param name="htmlSelector">HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. (optional)</param>
        /// <returns>Task of EmailTextLinesResult</returns>
        System.Threading.Tasks.Task<EmailTextLinesResult> GetEmailHTMLQueryAsync (Guid emailId, string htmlSelector = default(string));

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters
        /// </summary>
        /// <remarks>
        /// Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to perform HTML query on</param>
        /// <param name="htmlSelector">HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. (optional)</param>
        /// <returns>Task of ApiResponse (EmailTextLinesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailTextLinesResult>> GetEmailHTMLQueryAsyncWithHttpInfo (Guid emailId, string htmlSelector = default(string));
        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters
        /// </summary>
        /// <remarks>
        /// Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to fetch text for</param>
        /// <param name="decodeHtmlEntities">Decode HTML entities (optional)</param>
        /// <param name="lineSeparator">Line separator character (optional)</param>
        /// <returns>Task of EmailTextLinesResult</returns>
        System.Threading.Tasks.Task<EmailTextLinesResult> GetEmailTextLinesAsync (Guid emailId, bool? decodeHtmlEntities = default(bool?), string lineSeparator = default(string));

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters
        /// </summary>
        /// <remarks>
        /// Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to fetch text for</param>
        /// <param name="decodeHtmlEntities">Decode HTML entities (optional)</param>
        /// <param name="lineSeparator">Line separator character (optional)</param>
        /// <returns>Task of ApiResponse (EmailTextLinesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailTextLinesResult>> GetEmailTextLinesAsyncWithHttpInfo (Guid emailId, bool? decodeHtmlEntities = default(bool?), string lineSeparator = default(string));
        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>Task of PageEmailProjection</returns>
        System.Threading.Tasks.Task<PageEmailProjection> GetEmailsPaginatedAsync (List<Guid> inboxId = default(List<Guid>), int? page = default(int?), int? size = default(int?), string sort = default(string), bool? unreadOnly = default(bool?));

        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>Task of ApiResponse (PageEmailProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageEmailProjection>> GetEmailsPaginatedAsyncWithHttpInfo (List<Guid> inboxId = default(List<Guid>), int? page = default(int?), int? size = default(int?), string sort = default(string), bool? unreadOnly = default(bool?));
        /// <summary>
        /// Get raw email string
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetRawEmailContentsAsync (Guid emailId);

        /// <summary>
        /// Get raw email string
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetRawEmailContentsAsyncWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get raw email in JSON
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of RawEmailJson</returns>
        System.Threading.Tasks.Task<RawEmailJson> GetRawEmailJsonAsync (Guid emailId);

        /// <summary>
        /// Get raw email in JSON
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (RawEmailJson)</returns>
        System.Threading.Tasks.Task<ApiResponse<RawEmailJson>> GetRawEmailJsonAsyncWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get unread email count
        /// </summary>
        /// <remarks>
        /// Get number of emails unread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnreadCount</returns>
        System.Threading.Tasks.Task<UnreadCount> GetUnreadEmailCountAsync ();

        /// <summary>
        /// Get unread email count
        /// </summary>
        /// <remarks>
        /// Get number of emails unread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnreadCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnreadCount>> GetUnreadEmailCountAsyncWithHttpInfo ();
        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToEmailOptions">replyToEmailOptions</param>
        /// <returns>Task of SentEmailDto</returns>
        System.Threading.Tasks.Task<SentEmailDto> ReplyToEmailAsync (Guid emailId, ReplyToEmailOptions replyToEmailOptions);

        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToEmailOptions">replyToEmailOptions</param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentEmailDto>> ReplyToEmailAsyncWithHttpInfo (Guid emailId, ReplyToEmailOptions replyToEmailOptions);
        /// <summary>
        /// Validate email
        /// </summary>
        /// <remarks>
        /// Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ValidationDto</returns>
        System.Threading.Tasks.Task<ValidationDto> ValidateEmailAsync (Guid emailId);

        /// <summary>
        /// Validate email
        /// </summary>
        /// <remarks>
        /// Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (ValidationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationDto>> ValidateEmailAsyncWithHttpInfo (Guid emailId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailControllerApi : IEmailControllerApiSync, IEmailControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailControllerApi : IEmailControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailControllerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailControllerApi(String basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailControllerApi(mailslurp.Client.ISynchronousClient client,mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete all emails Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAllEmails ()
        {
             DeleteAllEmailsWithHttpInfo();
        }

        /// <summary>
        /// Delete all emails Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteAllEmailsWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllEmails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all emails Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllEmailsAsync ()
        {
             await DeleteAllEmailsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all emails Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteAllEmailsAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllEmails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an email Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to delete</param>
        /// <returns></returns>
        public void DeleteEmail (Guid emailId)
        {
             DeleteEmailWithHttpInfo(emailId);
        }

        /// <summary>
        /// Delete an email Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteEmailWithHttpInfo (Guid emailId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/emails/{emailId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an email Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailAsync (Guid emailId)
        {
             await DeleteEmailAsyncWithHttpInfo(emailId);

        }

        /// <summary>
        /// Delete an email Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteEmailAsyncWithHttpInfo (Guid emailId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/emails/{emailId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints. Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadAttachment (string attachmentId, Guid emailId, string apiKey = default(string))
        {
             mailslurp.Client.ApiResponse<byte[]> localVarResponse = DownloadAttachmentWithHttpInfo(attachmentId, emailId, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints. Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public mailslurp.Client.ApiResponse< byte[] > DownloadAttachmentWithHttpInfo (string attachmentId, Guid emailId, string apiKey = default(string))
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling EmailControllerApi->DownloadAttachment");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attachmentId", mailslurp.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (apiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "apiKey", apiKey));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< byte[] >("/emails/{emailId}/attachments/{attachmentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints. Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadAttachmentAsync (string attachmentId, Guid emailId, string apiKey = default(string))
        {
             mailslurp.Client.ApiResponse<byte[]> localVarResponse = await DownloadAttachmentAsyncWithHttpInfo(attachmentId, emailId, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints. Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<byte[]>> DownloadAttachmentAsyncWithHttpInfo (string attachmentId, Guid emailId, string apiKey = default(string))
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling EmailControllerApi->DownloadAttachment");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attachmentId", mailslurp.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (apiKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "apiKey", apiKey));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<byte[]>("/emails/{emailId}/attachments/{attachmentId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email attachment as base64 encoded string (alternative to binary responses) Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>DownloadAttachmentDto</returns>
        public DownloadAttachmentDto DownloadAttachmentBase64 (string attachmentId, Guid emailId)
        {
             mailslurp.Client.ApiResponse<DownloadAttachmentDto> localVarResponse = DownloadAttachmentBase64WithHttpInfo(attachmentId, emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email attachment as base64 encoded string (alternative to binary responses) Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of DownloadAttachmentDto</returns>
        public mailslurp.Client.ApiResponse< DownloadAttachmentDto > DownloadAttachmentBase64WithHttpInfo (string attachmentId, Guid emailId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling EmailControllerApi->DownloadAttachmentBase64");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attachmentId", mailslurp.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< DownloadAttachmentDto >("/emails/{emailId}/attachments/{attachmentId}/base64", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAttachmentBase64", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email attachment as base64 encoded string (alternative to binary responses) Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of DownloadAttachmentDto</returns>
        public async System.Threading.Tasks.Task<DownloadAttachmentDto> DownloadAttachmentBase64Async (string attachmentId, Guid emailId)
        {
             mailslurp.Client.ApiResponse<DownloadAttachmentDto> localVarResponse = await DownloadAttachmentBase64AsyncWithHttpInfo(attachmentId, emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email attachment as base64 encoded string (alternative to binary responses) Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (DownloadAttachmentDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<DownloadAttachmentDto>> DownloadAttachmentBase64AsyncWithHttpInfo (string attachmentId, Guid emailId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling EmailControllerApi->DownloadAttachmentBase64");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attachmentId", mailslurp.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DownloadAttachmentDto>("/emails/{emailId}/attachments/{attachmentId}/base64", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAttachmentBase64", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Forward email Forward an existing email to new recipients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns></returns>
        public void ForwardEmail (Guid emailId, ForwardEmailOptions forwardEmailOptions)
        {
             ForwardEmailWithHttpInfo(emailId, forwardEmailOptions);
        }

        /// <summary>
        /// Forward email Forward an existing email to new recipients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> ForwardEmailWithHttpInfo (Guid emailId, ForwardEmailOptions forwardEmailOptions)
        {
            // verify the required parameter 'forwardEmailOptions' is set
            if (forwardEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'forwardEmailOptions' when calling EmailControllerApi->ForwardEmail");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            localVarRequestOptions.Data = forwardEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/emails/{emailId}/forward", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForwardEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Forward email Forward an existing email to new recipients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ForwardEmailAsync (Guid emailId, ForwardEmailOptions forwardEmailOptions)
        {
             await ForwardEmailAsyncWithHttpInfo(emailId, forwardEmailOptions);

        }

        /// <summary>
        /// Forward email Forward an existing email to new recipients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> ForwardEmailAsyncWithHttpInfo (Guid emailId, ForwardEmailOptions forwardEmailOptions)
        {
            // verify the required parameter 'forwardEmailOptions' is set
            if (forwardEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'forwardEmailOptions' when calling EmailControllerApi->ForwardEmail");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            localVarRequestOptions.Data = forwardEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/emails/{emailId}/forward", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForwardEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email attachment metadata Returns the metadata such as name and content-type for a given attachment and email.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>AttachmentMetaData</returns>
        public AttachmentMetaData GetAttachmentMetaData (string attachmentId, Guid emailId)
        {
             mailslurp.Client.ApiResponse<AttachmentMetaData> localVarResponse = GetAttachmentMetaDataWithHttpInfo(attachmentId, emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email attachment metadata Returns the metadata such as name and content-type for a given attachment and email.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of AttachmentMetaData</returns>
        public mailslurp.Client.ApiResponse< AttachmentMetaData > GetAttachmentMetaDataWithHttpInfo (string attachmentId, Guid emailId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling EmailControllerApi->GetAttachmentMetaData");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("attachmentId", mailslurp.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AttachmentMetaData >("/emails/{emailId}/attachments/{attachmentId}/metadata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachmentMetaData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email attachment metadata Returns the metadata such as name and content-type for a given attachment and email.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of AttachmentMetaData</returns>
        public async System.Threading.Tasks.Task<AttachmentMetaData> GetAttachmentMetaDataAsync (string attachmentId, Guid emailId)
        {
             mailslurp.Client.ApiResponse<AttachmentMetaData> localVarResponse = await GetAttachmentMetaDataAsyncWithHttpInfo(attachmentId, emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email attachment metadata Returns the metadata such as name and content-type for a given attachment and email.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">ID of attachment</param>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (AttachmentMetaData)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AttachmentMetaData>> GetAttachmentMetaDataAsyncWithHttpInfo (string attachmentId, Guid emailId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling EmailControllerApi->GetAttachmentMetaData");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("attachmentId", mailslurp.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AttachmentMetaData>("/emails/{emailId}/attachments/{attachmentId}/metadata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachmentMetaData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all email attachment metadata Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>List&lt;AttachmentMetaData&gt;</returns>
        public List<AttachmentMetaData> GetAttachments (Guid emailId)
        {
             mailslurp.Client.ApiResponse<List<AttachmentMetaData>> localVarResponse = GetAttachmentsWithHttpInfo(emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all email attachment metadata Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of List&lt;AttachmentMetaData&gt;</returns>
        public mailslurp.Client.ApiResponse< List<AttachmentMetaData> > GetAttachmentsWithHttpInfo (Guid emailId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<AttachmentMetaData> >("/emails/{emailId}/attachments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all email attachment metadata Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of List&lt;AttachmentMetaData&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachmentMetaData>> GetAttachmentsAsync (Guid emailId)
        {
             mailslurp.Client.ApiResponse<List<AttachmentMetaData>> localVarResponse = await GetAttachmentsAsyncWithHttpInfo(emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all email attachment metadata Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentMetaData&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<AttachmentMetaData>>> GetAttachmentsAsyncWithHttpInfo (Guid emailId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AttachmentMetaData>>("/emails/{emailId}/attachments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Email</returns>
        public Email GetEmail (Guid emailId, bool? decode = default(bool?))
        {
             mailslurp.Client.ApiResponse<Email> localVarResponse = GetEmailWithHttpInfo(emailId, decode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>ApiResponse of Email</returns>
        public mailslurp.Client.ApiResponse< Email > GetEmailWithHttpInfo (Guid emailId, bool? decode = default(bool?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (decode != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "decode", decode));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Email >("/emails/{emailId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Task of Email</returns>
        public async System.Threading.Tasks.Task<Email> GetEmailAsync (Guid emailId, bool? decode = default(bool?))
        {
             mailslurp.Client.ApiResponse<Email> localVarResponse = await GetEmailAsyncWithHttpInfo(emailId, decode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Email)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Email>> GetEmailAsyncWithHttpInfo (Guid emailId, bool? decode = default(bool?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (decode != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "decode", decode));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Email>("/emails/{emailId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email content regex pattern match results. Runs regex against email body and returns match groups. Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to match against</param>
        /// <param name="contentMatchOptions">contentMatchOptions</param>
        /// <returns>EmailContentMatchResult</returns>
        public EmailContentMatchResult GetEmailContentMatch (Guid emailId, ContentMatchOptions contentMatchOptions)
        {
             mailslurp.Client.ApiResponse<EmailContentMatchResult> localVarResponse = GetEmailContentMatchWithHttpInfo(emailId, contentMatchOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email content regex pattern match results. Runs regex against email body and returns match groups. Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to match against</param>
        /// <param name="contentMatchOptions">contentMatchOptions</param>
        /// <returns>ApiResponse of EmailContentMatchResult</returns>
        public mailslurp.Client.ApiResponse< EmailContentMatchResult > GetEmailContentMatchWithHttpInfo (Guid emailId, ContentMatchOptions contentMatchOptions)
        {
            // verify the required parameter 'contentMatchOptions' is set
            if (contentMatchOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'contentMatchOptions' when calling EmailControllerApi->GetEmailContentMatch");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            localVarRequestOptions.Data = contentMatchOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< EmailContentMatchResult >("/emails/{emailId}/contentMatch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailContentMatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email content regex pattern match results. Runs regex against email body and returns match groups. Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to match against</param>
        /// <param name="contentMatchOptions">contentMatchOptions</param>
        /// <returns>Task of EmailContentMatchResult</returns>
        public async System.Threading.Tasks.Task<EmailContentMatchResult> GetEmailContentMatchAsync (Guid emailId, ContentMatchOptions contentMatchOptions)
        {
             mailslurp.Client.ApiResponse<EmailContentMatchResult> localVarResponse = await GetEmailContentMatchAsyncWithHttpInfo(emailId, contentMatchOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email content regex pattern match results. Runs regex against email body and returns match groups. Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to match against</param>
        /// <param name="contentMatchOptions">contentMatchOptions</param>
        /// <returns>Task of ApiResponse (EmailContentMatchResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<EmailContentMatchResult>> GetEmailContentMatchAsyncWithHttpInfo (Guid emailId, ContentMatchOptions contentMatchOptions)
        {
            // verify the required parameter 'contentMatchOptions' is set
            if (contentMatchOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'contentMatchOptions' when calling EmailControllerApi->GetEmailContentMatch");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            localVarRequestOptions.Data = contentMatchOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailContentMatchResult>("/emails/{emailId}/contentMatch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailContentMatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email content as HTML Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>string</returns>
        public string GetEmailHTML (Guid emailId, bool? decode = default(bool?))
        {
             mailslurp.Client.ApiResponse<string> localVarResponse = GetEmailHTMLWithHttpInfo(emailId, decode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email content as HTML Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        public mailslurp.Client.ApiResponse< string > GetEmailHTMLWithHttpInfo (Guid emailId, bool? decode = default(bool?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/html"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (decode != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "decode", decode));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/emails/{emailId}/html", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailHTML", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get email content as HTML Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetEmailHTMLAsync (Guid emailId, bool? decode = default(bool?))
        {
             mailslurp.Client.ApiResponse<string> localVarResponse = await GetEmailHTMLAsyncWithHttpInfo(emailId, decode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email content as HTML Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<string>> GetEmailHTMLAsyncWithHttpInfo (Guid emailId, bool? decode = default(bool?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/html"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (decode != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "decode", decode));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/emails/{emailId}/html", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailHTML", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to perform HTML query on</param>
        /// <param name="htmlSelector">HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. (optional)</param>
        /// <returns>EmailTextLinesResult</returns>
        public EmailTextLinesResult GetEmailHTMLQuery (Guid emailId, string htmlSelector = default(string))
        {
             mailslurp.Client.ApiResponse<EmailTextLinesResult> localVarResponse = GetEmailHTMLQueryWithHttpInfo(emailId, htmlSelector);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to perform HTML query on</param>
        /// <param name="htmlSelector">HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. (optional)</param>
        /// <returns>ApiResponse of EmailTextLinesResult</returns>
        public mailslurp.Client.ApiResponse< EmailTextLinesResult > GetEmailHTMLQueryWithHttpInfo (Guid emailId, string htmlSelector = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (htmlSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "htmlSelector", htmlSelector));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< EmailTextLinesResult >("/emails/{emailId}/htmlQuery", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailHTMLQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to perform HTML query on</param>
        /// <param name="htmlSelector">HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. (optional)</param>
        /// <returns>Task of EmailTextLinesResult</returns>
        public async System.Threading.Tasks.Task<EmailTextLinesResult> GetEmailHTMLQueryAsync (Guid emailId, string htmlSelector = default(string))
        {
             mailslurp.Client.ApiResponse<EmailTextLinesResult> localVarResponse = await GetEmailHTMLQueryAsyncWithHttpInfo(emailId, htmlSelector);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to perform HTML query on</param>
        /// <param name="htmlSelector">HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. (optional)</param>
        /// <returns>Task of ApiResponse (EmailTextLinesResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<EmailTextLinesResult>> GetEmailHTMLQueryAsyncWithHttpInfo (Guid emailId, string htmlSelector = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (htmlSelector != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "htmlSelector", htmlSelector));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailTextLinesResult>("/emails/{emailId}/htmlQuery", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailHTMLQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to fetch text for</param>
        /// <param name="decodeHtmlEntities">Decode HTML entities (optional)</param>
        /// <param name="lineSeparator">Line separator character (optional)</param>
        /// <returns>EmailTextLinesResult</returns>
        public EmailTextLinesResult GetEmailTextLines (Guid emailId, bool? decodeHtmlEntities = default(bool?), string lineSeparator = default(string))
        {
             mailslurp.Client.ApiResponse<EmailTextLinesResult> localVarResponse = GetEmailTextLinesWithHttpInfo(emailId, decodeHtmlEntities, lineSeparator);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to fetch text for</param>
        /// <param name="decodeHtmlEntities">Decode HTML entities (optional)</param>
        /// <param name="lineSeparator">Line separator character (optional)</param>
        /// <returns>ApiResponse of EmailTextLinesResult</returns>
        public mailslurp.Client.ApiResponse< EmailTextLinesResult > GetEmailTextLinesWithHttpInfo (Guid emailId, bool? decodeHtmlEntities = default(bool?), string lineSeparator = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (decodeHtmlEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "decodeHtmlEntities", decodeHtmlEntities));
            }
            if (lineSeparator != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "lineSeparator", lineSeparator));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< EmailTextLinesResult >("/emails/{emailId}/textLines", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailTextLines", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to fetch text for</param>
        /// <param name="decodeHtmlEntities">Decode HTML entities (optional)</param>
        /// <param name="lineSeparator">Line separator character (optional)</param>
        /// <returns>Task of EmailTextLinesResult</returns>
        public async System.Threading.Tasks.Task<EmailTextLinesResult> GetEmailTextLinesAsync (Guid emailId, bool? decodeHtmlEntities = default(bool?), string lineSeparator = default(string))
        {
             mailslurp.Client.ApiResponse<EmailTextLinesResult> localVarResponse = await GetEmailTextLinesAsyncWithHttpInfo(emailId, decodeHtmlEntities, lineSeparator);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Parse and return text from an email, stripping HTML and decoding encoded characters Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email to fetch text for</param>
        /// <param name="decodeHtmlEntities">Decode HTML entities (optional)</param>
        /// <param name="lineSeparator">Line separator character (optional)</param>
        /// <returns>Task of ApiResponse (EmailTextLinesResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<EmailTextLinesResult>> GetEmailTextLinesAsyncWithHttpInfo (Guid emailId, bool? decodeHtmlEntities = default(bool?), string lineSeparator = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (decodeHtmlEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "decodeHtmlEntities", decodeHtmlEntities));
            }
            if (lineSeparator != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "lineSeparator", lineSeparator));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailTextLinesResult>("/emails/{emailId}/textLines", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailTextLines", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all emails By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>PageEmailProjection</returns>
        public PageEmailProjection GetEmailsPaginated (List<Guid> inboxId = default(List<Guid>), int? page = default(int?), int? size = default(int?), string sort = default(string), bool? unreadOnly = default(bool?))
        {
             mailslurp.Client.ApiResponse<PageEmailProjection> localVarResponse = GetEmailsPaginatedWithHttpInfo(inboxId, page, size, sort, unreadOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all emails By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>ApiResponse of PageEmailProjection</returns>
        public mailslurp.Client.ApiResponse< PageEmailProjection > GetEmailsPaginatedWithHttpInfo (List<Guid> inboxId = default(List<Guid>), int? page = default(int?), int? size = default(int?), string sort = default(string), bool? unreadOnly = default(bool?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("multi", "inboxId", inboxId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (unreadOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "unreadOnly", unreadOnly));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageEmailProjection >("/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailsPaginated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all emails By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>Task of PageEmailProjection</returns>
        public async System.Threading.Tasks.Task<PageEmailProjection> GetEmailsPaginatedAsync (List<Guid> inboxId = default(List<Guid>), int? page = default(int?), int? size = default(int?), string sort = default(string), bool? unreadOnly = default(bool?))
        {
             mailslurp.Client.ApiResponse<PageEmailProjection> localVarResponse = await GetEmailsPaginatedAsyncWithHttpInfo(inboxId, page, size, sort, unreadOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all emails By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>Task of ApiResponse (PageEmailProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageEmailProjection>> GetEmailsPaginatedAsyncWithHttpInfo (List<Guid> inboxId = default(List<Guid>), int? page = default(int?), int? size = default(int?), string sort = default(string), bool? unreadOnly = default(bool?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("multi", "inboxId", inboxId));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (unreadOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "unreadOnly", unreadOnly));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageEmailProjection>("/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailsPaginated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get raw email string Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>string</returns>
        public string GetRawEmailContents (Guid emailId)
        {
             mailslurp.Client.ApiResponse<string> localVarResponse = GetRawEmailContentsWithHttpInfo(emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get raw email string Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of string</returns>
        public mailslurp.Client.ApiResponse< string > GetRawEmailContentsWithHttpInfo (Guid emailId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/emails/{emailId}/raw", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRawEmailContents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get raw email string Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetRawEmailContentsAsync (Guid emailId)
        {
             mailslurp.Client.ApiResponse<string> localVarResponse = await GetRawEmailContentsAsyncWithHttpInfo(emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get raw email string Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<string>> GetRawEmailContentsAsyncWithHttpInfo (Guid emailId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/emails/{emailId}/raw", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRawEmailContents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get raw email in JSON Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>RawEmailJson</returns>
        public RawEmailJson GetRawEmailJson (Guid emailId)
        {
             mailslurp.Client.ApiResponse<RawEmailJson> localVarResponse = GetRawEmailJsonWithHttpInfo(emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get raw email in JSON Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of RawEmailJson</returns>
        public mailslurp.Client.ApiResponse< RawEmailJson > GetRawEmailJsonWithHttpInfo (Guid emailId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RawEmailJson >("/emails/{emailId}/raw/json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRawEmailJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get raw email in JSON Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of RawEmailJson</returns>
        public async System.Threading.Tasks.Task<RawEmailJson> GetRawEmailJsonAsync (Guid emailId)
        {
             mailslurp.Client.ApiResponse<RawEmailJson> localVarResponse = await GetRawEmailJsonAsyncWithHttpInfo(emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get raw email in JSON Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (RawEmailJson)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<RawEmailJson>> GetRawEmailJsonAsyncWithHttpInfo (Guid emailId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RawEmailJson>("/emails/{emailId}/raw/json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRawEmailJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unread email count Get number of emails unread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnreadCount</returns>
        public UnreadCount GetUnreadEmailCount ()
        {
             mailslurp.Client.ApiResponse<UnreadCount> localVarResponse = GetUnreadEmailCountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get unread email count Get number of emails unread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnreadCount</returns>
        public mailslurp.Client.ApiResponse< UnreadCount > GetUnreadEmailCountWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< UnreadCount >("/emails/unreadCount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnreadEmailCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unread email count Get number of emails unread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnreadCount</returns>
        public async System.Threading.Tasks.Task<UnreadCount> GetUnreadEmailCountAsync ()
        {
             mailslurp.Client.ApiResponse<UnreadCount> localVarResponse = await GetUnreadEmailCountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get unread email count Get number of emails unread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnreadCount)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<UnreadCount>> GetUnreadEmailCountAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UnreadCount>("/emails/unreadCount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnreadEmailCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToEmailOptions">replyToEmailOptions</param>
        /// <returns>SentEmailDto</returns>
        public SentEmailDto ReplyToEmail (Guid emailId, ReplyToEmailOptions replyToEmailOptions)
        {
             mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = ReplyToEmailWithHttpInfo(emailId, replyToEmailOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToEmailOptions">replyToEmailOptions</param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        public mailslurp.Client.ApiResponse< SentEmailDto > ReplyToEmailWithHttpInfo (Guid emailId, ReplyToEmailOptions replyToEmailOptions)
        {
            // verify the required parameter 'replyToEmailOptions' is set
            if (replyToEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'replyToEmailOptions' when calling EmailControllerApi->ReplyToEmail");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            localVarRequestOptions.Data = replyToEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< SentEmailDto >("/emails/{emailId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplyToEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToEmailOptions">replyToEmailOptions</param>
        /// <returns>Task of SentEmailDto</returns>
        public async System.Threading.Tasks.Task<SentEmailDto> ReplyToEmailAsync (Guid emailId, ReplyToEmailOptions replyToEmailOptions)
        {
             mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = await ReplyToEmailAsyncWithHttpInfo(emailId, replyToEmailOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToEmailOptions">replyToEmailOptions</param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<SentEmailDto>> ReplyToEmailAsyncWithHttpInfo (Guid emailId, ReplyToEmailOptions replyToEmailOptions)
        {
            // verify the required parameter 'replyToEmailOptions' is set
            if (replyToEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'replyToEmailOptions' when calling EmailControllerApi->ReplyToEmail");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            localVarRequestOptions.Data = replyToEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SentEmailDto>("/emails/{emailId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplyToEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate email Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>ValidationDto</returns>
        public ValidationDto ValidateEmail (Guid emailId)
        {
             mailslurp.Client.ApiResponse<ValidationDto> localVarResponse = ValidateEmailWithHttpInfo(emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate email Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>ApiResponse of ValidationDto</returns>
        public mailslurp.Client.ApiResponse< ValidationDto > ValidateEmailWithHttpInfo (Guid emailId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< ValidationDto >("/emails/{emailId}/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate email Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ValidationDto</returns>
        public async System.Threading.Tasks.Task<ValidationDto> ValidateEmailAsync (Guid emailId)
        {
             mailslurp.Client.ApiResponse<ValidationDto> localVarResponse = await ValidateEmailAsyncWithHttpInfo(emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate email Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">ID of email</param>
        /// <returns>Task of ApiResponse (ValidationDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ValidationDto>> ValidateEmailAsyncWithHttpInfo (Guid emailId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ValidationDto>("/emails/{emailId}/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
