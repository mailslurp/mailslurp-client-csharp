/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 67c9a1eda264be4cfe0bb2c76151f0aadf0862bc
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailControllerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete all emails
        /// </summary>
        /// <remarks>
        /// Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAllEmails ();

        /// <summary>
        /// Delete all emails
        /// </summary>
        /// <remarks>
        /// Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllEmailsWithHttpInfo ();
        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns></returns>
        void DeleteEmail (Guid emailId);

        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get email attachment bytes
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a byte stream (file download). You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DownloadAttachment (string attachmentId, Guid emailId, string apiKey = default(string));

        /// <summary>
        /// Get email attachment bytes
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a byte stream (file download). You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadAttachmentWithHttpInfo (string attachmentId, Guid emailId, string apiKey = default(string));
        /// <summary>
        /// Forward email
        /// </summary>
        /// <remarks>
        /// Forward an existing email to new recipients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns></returns>
        void ForwardEmail (Guid emailId, ForwardEmailOptions forwardEmailOptions);

        /// <summary>
        /// Forward email
        /// </summary>
        /// <remarks>
        /// Forward an existing email to new recipients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ForwardEmailWithHttpInfo (Guid emailId, ForwardEmailOptions forwardEmailOptions);
        /// <summary>
        /// Get email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata such as name and content-type for a given attachment and email.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <returns>AttachmentMetaData</returns>
        AttachmentMetaData GetAttachmentMetaData (string attachmentId, Guid emailId);

        /// <summary>
        /// Get email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata such as name and content-type for a given attachment and email.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of AttachmentMetaData</returns>
        ApiResponse<AttachmentMetaData> GetAttachmentMetaDataWithHttpInfo (string attachmentId, Guid emailId);
        /// <summary>
        /// Get all email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>List&lt;AttachmentMetaData&gt;</returns>
        List<AttachmentMetaData> GetAttachments (Guid emailId);

        /// <summary>
        /// Get all email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of List&lt;AttachmentMetaData&gt;</returns>
        ApiResponse<List<AttachmentMetaData>> GetAttachmentsWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get email content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Email</returns>
        Email GetEmail (Guid emailId, bool decode = default(bool));

        /// <summary>
        /// Get email content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>ApiResponse of Email</returns>
        ApiResponse<Email> GetEmailWithHttpInfo (Guid emailId, bool decode = default(bool));
        /// <summary>
        /// Get email content as HTML
        /// </summary>
        /// <remarks>
        /// Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>string</returns>
        string GetEmailHTML (Guid emailId, bool decode = default(bool));

        /// <summary>
        /// Get email content as HTML
        /// </summary>
        /// <remarks>
        /// Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetEmailHTMLWithHttpInfo (Guid emailId, bool decode = default(bool));
        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>PageEmailProjection</returns>
        PageEmailProjection GetEmailsPaginated (List<Guid> inboxId = default(List<Guid>), int page = default(int), int size = default(int), string sort = default(string), bool unreadOnly = default(bool));

        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>ApiResponse of PageEmailProjection</returns>
        ApiResponse<PageEmailProjection> GetEmailsPaginatedWithHttpInfo (List<Guid> inboxId = default(List<Guid>), int page = default(int), int size = default(int), string sort = default(string), bool unreadOnly = default(bool));
        /// <summary>
        /// Get raw email string
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>string</returns>
        string GetRawEmailContents (Guid emailId);

        /// <summary>
        /// Get raw email string
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetRawEmailContentsWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get raw email in JSON
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>RawEmailJson</returns>
        RawEmailJson GetRawEmailJson (Guid emailId);

        /// <summary>
        /// Get raw email in JSON
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of RawEmailJson</returns>
        ApiResponse<RawEmailJson> GetRawEmailJsonWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get unread email count
        /// </summary>
        /// <remarks>
        /// Get number of emails unread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnreadCount</returns>
        UnreadCount GetUnreadEmailCount ();

        /// <summary>
        /// Get unread email count
        /// </summary>
        /// <remarks>
        /// Get number of emails unread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnreadCount</returns>
        ApiResponse<UnreadCount> GetUnreadEmailCountWithHttpInfo ();
        /// <summary>
        /// Validate email
        /// </summary>
        /// <remarks>
        /// Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ValidationDto</returns>
        ValidationDto ValidateEmail (Guid emailId);

        /// <summary>
        /// Validate email
        /// </summary>
        /// <remarks>
        /// Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of ValidationDto</returns>
        ApiResponse<ValidationDto> ValidateEmailWithHttpInfo (Guid emailId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete all emails
        /// </summary>
        /// <remarks>
        /// Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllEmailsAsync ();

        /// <summary>
        /// Delete all emails
        /// </summary>
        /// <remarks>
        /// Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllEmailsAsyncWithHttpInfo ();
        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailAsync (Guid emailId);

        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailAsyncWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get email attachment bytes
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a byte stream (file download). You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadAttachmentAsync (string attachmentId, Guid emailId, string apiKey = default(string));

        /// <summary>
        /// Get email attachment bytes
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a byte stream (file download). You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadAttachmentAsyncWithHttpInfo (string attachmentId, Guid emailId, string apiKey = default(string));
        /// <summary>
        /// Forward email
        /// </summary>
        /// <remarks>
        /// Forward an existing email to new recipients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ForwardEmailAsync (Guid emailId, ForwardEmailOptions forwardEmailOptions);

        /// <summary>
        /// Forward email
        /// </summary>
        /// <remarks>
        /// Forward an existing email to new recipients.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ForwardEmailAsyncWithHttpInfo (Guid emailId, ForwardEmailOptions forwardEmailOptions);
        /// <summary>
        /// Get email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata such as name and content-type for a given attachment and email.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of AttachmentMetaData</returns>
        System.Threading.Tasks.Task<AttachmentMetaData> GetAttachmentMetaDataAsync (string attachmentId, Guid emailId);

        /// <summary>
        /// Get email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata such as name and content-type for a given attachment and email.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (AttachmentMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentMetaData>> GetAttachmentMetaDataAsyncWithHttpInfo (string attachmentId, Guid emailId);
        /// <summary>
        /// Get all email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of List&lt;AttachmentMetaData&gt;</returns>
        System.Threading.Tasks.Task<List<AttachmentMetaData>> GetAttachmentsAsync (Guid emailId);

        /// <summary>
        /// Get all email attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentMetaData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachmentMetaData>>> GetAttachmentsAsyncWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get email content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Task of Email</returns>
        System.Threading.Tasks.Task<Email> GetEmailAsync (Guid emailId, bool decode = default(bool));

        /// <summary>
        /// Get email content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Email)</returns>
        System.Threading.Tasks.Task<ApiResponse<Email>> GetEmailAsyncWithHttpInfo (Guid emailId, bool decode = default(bool));
        /// <summary>
        /// Get email content as HTML
        /// </summary>
        /// <remarks>
        /// Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetEmailHTMLAsync (Guid emailId, bool decode = default(bool));

        /// <summary>
        /// Get email content as HTML
        /// </summary>
        /// <remarks>
        /// Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetEmailHTMLAsyncWithHttpInfo (Guid emailId, bool decode = default(bool));
        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>Task of PageEmailProjection</returns>
        System.Threading.Tasks.Task<PageEmailProjection> GetEmailsPaginatedAsync (List<Guid> inboxId = default(List<Guid>), int page = default(int), int size = default(int), string sort = default(string), bool unreadOnly = default(bool));

        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>Task of ApiResponse (PageEmailProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageEmailProjection>> GetEmailsPaginatedAsyncWithHttpInfo (List<Guid> inboxId = default(List<Guid>), int page = default(int), int size = default(int), string sort = default(string), bool unreadOnly = default(bool));
        /// <summary>
        /// Get raw email string
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetRawEmailContentsAsync (Guid emailId);

        /// <summary>
        /// Get raw email string
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetRawEmailContentsAsyncWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get raw email in JSON
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of RawEmailJson</returns>
        System.Threading.Tasks.Task<RawEmailJson> GetRawEmailJsonAsync (Guid emailId);

        /// <summary>
        /// Get raw email in JSON
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (RawEmailJson)</returns>
        System.Threading.Tasks.Task<ApiResponse<RawEmailJson>> GetRawEmailJsonAsyncWithHttpInfo (Guid emailId);
        /// <summary>
        /// Get unread email count
        /// </summary>
        /// <remarks>
        /// Get number of emails unread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnreadCount</returns>
        System.Threading.Tasks.Task<UnreadCount> GetUnreadEmailCountAsync ();

        /// <summary>
        /// Get unread email count
        /// </summary>
        /// <remarks>
        /// Get number of emails unread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnreadCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnreadCount>> GetUnreadEmailCountAsyncWithHttpInfo ();
        /// <summary>
        /// Validate email
        /// </summary>
        /// <remarks>
        /// Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ValidationDto</returns>
        System.Threading.Tasks.Task<ValidationDto> ValidateEmailAsync (Guid emailId);

        /// <summary>
        /// Validate email
        /// </summary>
        /// <remarks>
        /// Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (ValidationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationDto>> ValidateEmailAsyncWithHttpInfo (Guid emailId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailControllerApi : IEmailControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailControllerApi(String basePath)
        {
            this.Configuration = new mailslurp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailControllerApi"/> class
        /// </summary>
        /// <returns></returns>
        public EmailControllerApi()
        {
            this.Configuration = mailslurp.Client.Configuration.Default;

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailControllerApi(mailslurp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mailslurp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete all emails Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAllEmails ()
        {
             DeleteAllEmailsWithHttpInfo();
        }

        /// <summary>
        /// Delete all emails Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllEmailsWithHttpInfo ()
        {

            var localVarPath = "./emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete all emails Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllEmailsAsync ()
        {
             await DeleteAllEmailsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all emails Deletes all emails in your account. Be careful as emails cannot be recovered
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllEmailsAsyncWithHttpInfo ()
        {

            var localVarPath = "./emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an email Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns></returns>
        public void DeleteEmail (Guid emailId)
        {
             DeleteEmailWithHttpInfo(emailId);
        }

        /// <summary>
        /// Delete an email Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEmailWithHttpInfo (Guid emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->DeleteEmail");

            var localVarPath = "./emails/{emailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an email Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailAsync (Guid emailId)
        {
             await DeleteEmailAsyncWithHttpInfo(emailId);

        }

        /// <summary>
        /// Delete an email Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailAsyncWithHttpInfo (Guid emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->DeleteEmail");

            var localVarPath = "./emails/{emailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get email attachment bytes Returns the specified attachment for a given email as a byte stream (file download). You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadAttachment (string attachmentId, Guid emailId, string apiKey = default(string))
        {
             ApiResponse<byte[]> localVarResponse = DownloadAttachmentWithHttpInfo(attachmentId, emailId, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email attachment bytes Returns the specified attachment for a given email as a byte stream (file download). You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse<byte[]> DownloadAttachmentWithHttpInfo (string attachmentId, Guid emailId, string apiKey = default(string))
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling EmailControllerApi->DownloadAttachment");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->DownloadAttachment");

            var localVarPath = "./emails/{emailId}/attachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get email attachment bytes Returns the specified attachment for a given email as a byte stream (file download). You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadAttachmentAsync (string attachmentId, Guid emailId, string apiKey = default(string))
        {
             ApiResponse<byte[]> localVarResponse = await DownloadAttachmentAsyncWithHttpInfo(attachmentId, emailId, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email attachment bytes Returns the specified attachment for a given email as a byte stream (file download). You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadAttachmentAsyncWithHttpInfo (string attachmentId, Guid emailId, string apiKey = default(string))
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling EmailControllerApi->DownloadAttachment");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->DownloadAttachment");

            var localVarPath = "./emails/{emailId}/attachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Forward email Forward an existing email to new recipients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns></returns>
        public void ForwardEmail (Guid emailId, ForwardEmailOptions forwardEmailOptions)
        {
             ForwardEmailWithHttpInfo(emailId, forwardEmailOptions);
        }

        /// <summary>
        /// Forward email Forward an existing email to new recipients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ForwardEmailWithHttpInfo (Guid emailId, ForwardEmailOptions forwardEmailOptions)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->ForwardEmail");
            // verify the required parameter 'forwardEmailOptions' is set
            if (forwardEmailOptions == null)
                throw new ApiException(400, "Missing required parameter 'forwardEmailOptions' when calling EmailControllerApi->ForwardEmail");

            var localVarPath = "./emails/{emailId}/forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (forwardEmailOptions != null && forwardEmailOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(forwardEmailOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardEmailOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForwardEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Forward email Forward an existing email to new recipients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ForwardEmailAsync (Guid emailId, ForwardEmailOptions forwardEmailOptions)
        {
             await ForwardEmailAsyncWithHttpInfo(emailId, forwardEmailOptions);

        }

        /// <summary>
        /// Forward email Forward an existing email to new recipients.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ForwardEmailAsyncWithHttpInfo (Guid emailId, ForwardEmailOptions forwardEmailOptions)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->ForwardEmail");
            // verify the required parameter 'forwardEmailOptions' is set
            if (forwardEmailOptions == null)
                throw new ApiException(400, "Missing required parameter 'forwardEmailOptions' when calling EmailControllerApi->ForwardEmail");

            var localVarPath = "./emails/{emailId}/forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (forwardEmailOptions != null && forwardEmailOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(forwardEmailOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardEmailOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForwardEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get email attachment metadata Returns the metadata such as name and content-type for a given attachment and email.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <returns>AttachmentMetaData</returns>
        public AttachmentMetaData GetAttachmentMetaData (string attachmentId, Guid emailId)
        {
             ApiResponse<AttachmentMetaData> localVarResponse = GetAttachmentMetaDataWithHttpInfo(attachmentId, emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email attachment metadata Returns the metadata such as name and content-type for a given attachment and email.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of AttachmentMetaData</returns>
        public ApiResponse<AttachmentMetaData> GetAttachmentMetaDataWithHttpInfo (string attachmentId, Guid emailId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling EmailControllerApi->GetAttachmentMetaData");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetAttachmentMetaData");

            var localVarPath = "./emails/{emailId}/attachments/{attachmentId}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentMetaData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AttachmentMetaData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentMetaData)));
        }

        /// <summary>
        /// Get email attachment metadata Returns the metadata such as name and content-type for a given attachment and email.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of AttachmentMetaData</returns>
        public async System.Threading.Tasks.Task<AttachmentMetaData> GetAttachmentMetaDataAsync (string attachmentId, Guid emailId)
        {
             ApiResponse<AttachmentMetaData> localVarResponse = await GetAttachmentMetaDataAsyncWithHttpInfo(attachmentId, emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email attachment metadata Returns the metadata such as name and content-type for a given attachment and email.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (AttachmentMetaData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentMetaData>> GetAttachmentMetaDataAsyncWithHttpInfo (string attachmentId, Guid emailId)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling EmailControllerApi->GetAttachmentMetaData");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetAttachmentMetaData");

            var localVarPath = "./emails/{emailId}/attachments/{attachmentId}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarPathParams.Add("attachmentId", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentMetaData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AttachmentMetaData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentMetaData)));
        }

        /// <summary>
        /// Get all email attachment metadata Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>List&lt;AttachmentMetaData&gt;</returns>
        public List<AttachmentMetaData> GetAttachments (Guid emailId)
        {
             ApiResponse<List<AttachmentMetaData>> localVarResponse = GetAttachmentsWithHttpInfo(emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all email attachment metadata Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of List&lt;AttachmentMetaData&gt;</returns>
        public ApiResponse<List<AttachmentMetaData>> GetAttachmentsWithHttpInfo (Guid emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetAttachments");

            var localVarPath = "./emails/{emailId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentMetaData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AttachmentMetaData>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentMetaData>)));
        }

        /// <summary>
        /// Get all email attachment metadata Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of List&lt;AttachmentMetaData&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachmentMetaData>> GetAttachmentsAsync (Guid emailId)
        {
             ApiResponse<List<AttachmentMetaData>> localVarResponse = await GetAttachmentsAsyncWithHttpInfo(emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all email attachment metadata Returns an array of attachment metadata such as name and content-type for a given email if present.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentMetaData&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AttachmentMetaData>>> GetAttachmentsAsyncWithHttpInfo (Guid emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetAttachments");

            var localVarPath = "./emails/{emailId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentMetaData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AttachmentMetaData>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentMetaData>)));
        }

        /// <summary>
        /// Get email content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Email</returns>
        public Email GetEmail (Guid emailId, bool decode = default(bool))
        {
             ApiResponse<Email> localVarResponse = GetEmailWithHttpInfo(emailId, decode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>ApiResponse of Email</returns>
        public ApiResponse<Email> GetEmailWithHttpInfo (Guid emailId, bool decode = default(bool))
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetEmail");

            var localVarPath = "./emails/{emailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (decode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "decode", decode)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Email>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Email) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Email)));
        }

        /// <summary>
        /// Get email content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Task of Email</returns>
        public async System.Threading.Tasks.Task<Email> GetEmailAsync (Guid emailId, bool decode = default(bool))
        {
             ApiResponse<Email> localVarResponse = await GetEmailAsyncWithHttpInfo(emailId, decode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Email)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Email>> GetEmailAsyncWithHttpInfo (Guid emailId, bool decode = default(bool))
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetEmail");

            var localVarPath = "./emails/{emailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (decode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "decode", decode)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Email>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Email) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Email)));
        }

        /// <summary>
        /// Get email content as HTML Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>string</returns>
        public string GetEmailHTML (Guid emailId, bool decode = default(bool))
        {
             ApiResponse<string> localVarResponse = GetEmailHTMLWithHttpInfo(emailId, decode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email content as HTML Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetEmailHTMLWithHttpInfo (Guid emailId, bool decode = default(bool))
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetEmailHTML");

            var localVarPath = "./emails/{emailId}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (decode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "decode", decode)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailHTML", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get email content as HTML Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetEmailHTMLAsync (Guid emailId, bool decode = default(bool))
        {
             ApiResponse<string> localVarResponse = await GetEmailHTMLAsyncWithHttpInfo(emailId, decode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email content as HTML Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="decode">decode (optional, default to false)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetEmailHTMLAsyncWithHttpInfo (Guid emailId, bool decode = default(bool))
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetEmailHTML");

            var localVarPath = "./emails/{emailId}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (decode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "decode", decode)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailHTML", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all emails By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>PageEmailProjection</returns>
        public PageEmailProjection GetEmailsPaginated (List<Guid> inboxId = default(List<Guid>), int page = default(int), int size = default(int), string sort = default(string), bool unreadOnly = default(bool))
        {
             ApiResponse<PageEmailProjection> localVarResponse = GetEmailsPaginatedWithHttpInfo(inboxId, page, size, sort, unreadOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all emails By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>ApiResponse of PageEmailProjection</returns>
        public ApiResponse<PageEmailProjection> GetEmailsPaginatedWithHttpInfo (List<Guid> inboxId = default(List<Guid>), int page = default(int), int size = default(int), string sort = default(string), bool unreadOnly = default(bool))
        {

            var localVarPath = "./emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "inboxId", inboxId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (unreadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unreadOnly", unreadOnly)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailsPaginated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageEmailProjection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PageEmailProjection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageEmailProjection)));
        }

        /// <summary>
        /// Get all emails By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>Task of PageEmailProjection</returns>
        public async System.Threading.Tasks.Task<PageEmailProjection> GetEmailsPaginatedAsync (List<Guid> inboxId = default(List<Guid>), int page = default(int), int size = default(int), string sort = default(string), bool unreadOnly = default(bool))
        {
             ApiResponse<PageEmailProjection> localVarResponse = await GetEmailsPaginatedAsyncWithHttpInfo(inboxId, page, size, sort, unreadOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all emails By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)</param>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <returns>Task of ApiResponse (PageEmailProjection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageEmailProjection>> GetEmailsPaginatedAsyncWithHttpInfo (List<Guid> inboxId = default(List<Guid>), int page = default(int), int size = default(int), string sort = default(string), bool unreadOnly = default(bool))
        {

            var localVarPath = "./emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inboxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "inboxId", inboxId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (unreadOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unreadOnly", unreadOnly)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailsPaginated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageEmailProjection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PageEmailProjection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageEmailProjection)));
        }

        /// <summary>
        /// Get raw email string Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>string</returns>
        public string GetRawEmailContents (Guid emailId)
        {
             ApiResponse<string> localVarResponse = GetRawEmailContentsWithHttpInfo(emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get raw email string Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetRawEmailContentsWithHttpInfo (Guid emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetRawEmailContents");

            var localVarPath = "./emails/{emailId}/raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRawEmailContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get raw email string Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetRawEmailContentsAsync (Guid emailId)
        {
             ApiResponse<string> localVarResponse = await GetRawEmailContentsAsyncWithHttpInfo(emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get raw email string Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetRawEmailContentsAsyncWithHttpInfo (Guid emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetRawEmailContents");

            var localVarPath = "./emails/{emailId}/raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRawEmailContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get raw email in JSON Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>RawEmailJson</returns>
        public RawEmailJson GetRawEmailJson (Guid emailId)
        {
             ApiResponse<RawEmailJson> localVarResponse = GetRawEmailJsonWithHttpInfo(emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get raw email in JSON Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of RawEmailJson</returns>
        public ApiResponse<RawEmailJson> GetRawEmailJsonWithHttpInfo (Guid emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetRawEmailJson");

            var localVarPath = "./emails/{emailId}/raw/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRawEmailJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RawEmailJson>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RawEmailJson) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RawEmailJson)));
        }

        /// <summary>
        /// Get raw email in JSON Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of RawEmailJson</returns>
        public async System.Threading.Tasks.Task<RawEmailJson> GetRawEmailJsonAsync (Guid emailId)
        {
             ApiResponse<RawEmailJson> localVarResponse = await GetRawEmailJsonAsyncWithHttpInfo(emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get raw email in JSON Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (RawEmailJson)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RawEmailJson>> GetRawEmailJsonAsyncWithHttpInfo (Guid emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->GetRawEmailJson");

            var localVarPath = "./emails/{emailId}/raw/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRawEmailJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RawEmailJson>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (RawEmailJson) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RawEmailJson)));
        }

        /// <summary>
        /// Get unread email count Get number of emails unread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnreadCount</returns>
        public UnreadCount GetUnreadEmailCount ()
        {
             ApiResponse<UnreadCount> localVarResponse = GetUnreadEmailCountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get unread email count Get number of emails unread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnreadCount</returns>
        public ApiResponse<UnreadCount> GetUnreadEmailCountWithHttpInfo ()
        {

            var localVarPath = "./emails/unreadCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnreadEmailCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnreadCount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UnreadCount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnreadCount)));
        }

        /// <summary>
        /// Get unread email count Get number of emails unread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnreadCount</returns>
        public async System.Threading.Tasks.Task<UnreadCount> GetUnreadEmailCountAsync ()
        {
             ApiResponse<UnreadCount> localVarResponse = await GetUnreadEmailCountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get unread email count Get number of emails unread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnreadCount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnreadCount>> GetUnreadEmailCountAsyncWithHttpInfo ()
        {

            var localVarPath = "./emails/unreadCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnreadEmailCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnreadCount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UnreadCount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnreadCount)));
        }

        /// <summary>
        /// Validate email Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ValidationDto</returns>
        public ValidationDto ValidateEmail (Guid emailId)
        {
             ApiResponse<ValidationDto> localVarResponse = ValidateEmailWithHttpInfo(emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate email Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of ValidationDto</returns>
        public ApiResponse<ValidationDto> ValidateEmailWithHttpInfo (Guid emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->ValidateEmail");

            var localVarPath = "./emails/{emailId}/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ValidationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationDto)));
        }

        /// <summary>
        /// Validate email Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ValidationDto</returns>
        public async System.Threading.Tasks.Task<ValidationDto> ValidateEmailAsync (Guid emailId)
        {
             ApiResponse<ValidationDto> localVarResponse = await ValidateEmailAsyncWithHttpInfo(emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate email Validate the HTML content of email if HTML is found. Considered valid if no HTML.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (ValidationDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidationDto>> ValidateEmailAsyncWithHttpInfo (Guid emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling EmailControllerApi->ValidateEmail");

            var localVarPath = "./emails/{emailId}/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ValidationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidationDto)));
        }

    }
}
