/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthConnectionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an OAuth connection
        /// </summary>
        /// <remarks>
        /// Configure an inbox for OAuth sync with MailSlurp
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateOAuthConnectionResult</returns>
        CreateOAuthConnectionResult CreateOAuthConnection(string redirectBase, string oAuthConnectionType, string emailAddress = default, int operationIndex = 0);

        /// <summary>
        /// Create an OAuth connection
        /// </summary>
        /// <remarks>
        /// Configure an inbox for OAuth sync with MailSlurp
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateOAuthConnectionResult</returns>
        ApiResponse<CreateOAuthConnectionResult> CreateOAuthConnectionWithHttpInfo(string redirectBase, string oAuthConnectionType, string emailAddress = default, int operationIndex = 0);
        /// <summary>
        /// Exchange authorization code for access token and create inbox
        /// </summary>
        /// <remarks>
        /// Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateOAuthExchangeResult</returns>
        CreateOAuthExchangeResult ExchangeAuthorizationTokenAndCreateOrUpdateInbox(string authorizationCode, string redirectUri, int operationIndex = 0);

        /// <summary>
        /// Exchange authorization code for access token and create inbox
        /// </summary>
        /// <remarks>
        /// Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateOAuthExchangeResult</returns>
        ApiResponse<CreateOAuthExchangeResult> ExchangeAuthorizationTokenAndCreateOrUpdateInboxWithHttpInfo(string authorizationCode, string redirectUri, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthConnectionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an OAuth connection
        /// </summary>
        /// <remarks>
        /// Configure an inbox for OAuth sync with MailSlurp
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOAuthConnectionResult</returns>
        System.Threading.Tasks.Task<CreateOAuthConnectionResult> CreateOAuthConnectionAsync(string redirectBase, string oAuthConnectionType, string emailAddress = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an OAuth connection
        /// </summary>
        /// <remarks>
        /// Configure an inbox for OAuth sync with MailSlurp
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOAuthConnectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateOAuthConnectionResult>> CreateOAuthConnectionWithHttpInfoAsync(string redirectBase, string oAuthConnectionType, string emailAddress = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Exchange authorization code for access token and create inbox
        /// </summary>
        /// <remarks>
        /// Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOAuthExchangeResult</returns>
        System.Threading.Tasks.Task<CreateOAuthExchangeResult> ExchangeAuthorizationTokenAndCreateOrUpdateInboxAsync(string authorizationCode, string redirectUri, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Exchange authorization code for access token and create inbox
        /// </summary>
        /// <remarks>
        /// Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOAuthExchangeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateOAuthExchangeResult>> ExchangeAuthorizationTokenAndCreateOrUpdateInboxWithHttpInfoAsync(string authorizationCode, string redirectUri, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthConnectionApi : IOAuthConnectionApiSync, IOAuthConnectionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OAuthConnectionApi : IOAuthConnectionApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthConnectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthConnectionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthConnectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthConnectionApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthConnectionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OAuthConnectionApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthConnectionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OAuthConnectionApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an OAuth connection Configure an inbox for OAuth sync with MailSlurp
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateOAuthConnectionResult</returns>
        public CreateOAuthConnectionResult CreateOAuthConnection(string redirectBase, string oAuthConnectionType, string emailAddress = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<CreateOAuthConnectionResult> localVarResponse = CreateOAuthConnectionWithHttpInfo(redirectBase, oAuthConnectionType, emailAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an OAuth connection Configure an inbox for OAuth sync with MailSlurp
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateOAuthConnectionResult</returns>
        public mailslurp.Client.ApiResponse<CreateOAuthConnectionResult> CreateOAuthConnectionWithHttpInfo(string redirectBase, string oAuthConnectionType, string emailAddress = default, int operationIndex = 0)
        {
            // verify the required parameter 'redirectBase' is set
            if (redirectBase == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'redirectBase' when calling OAuthConnectionApi->CreateOAuthConnection");
            }

            // verify the required parameter 'oAuthConnectionType' is set
            if (oAuthConnectionType == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'oAuthConnectionType' when calling OAuthConnectionApi->CreateOAuthConnection");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "redirectBase", redirectBase));
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "oAuthConnectionType", oAuthConnectionType));
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }

            localVarRequestOptions.Operation = "OAuthConnectionApi.CreateOAuthConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateOAuthConnectionResult>("/oauth-connection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuthConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an OAuth connection Configure an inbox for OAuth sync with MailSlurp
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOAuthConnectionResult</returns>
        public async System.Threading.Tasks.Task<CreateOAuthConnectionResult> CreateOAuthConnectionAsync(string redirectBase, string oAuthConnectionType, string emailAddress = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<CreateOAuthConnectionResult> localVarResponse = await CreateOAuthConnectionWithHttpInfoAsync(redirectBase, oAuthConnectionType, emailAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an OAuth connection Configure an inbox for OAuth sync with MailSlurp
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOAuthConnectionResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<CreateOAuthConnectionResult>> CreateOAuthConnectionWithHttpInfoAsync(string redirectBase, string oAuthConnectionType, string emailAddress = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'redirectBase' is set
            if (redirectBase == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'redirectBase' when calling OAuthConnectionApi->CreateOAuthConnection");
            }

            // verify the required parameter 'oAuthConnectionType' is set
            if (oAuthConnectionType == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'oAuthConnectionType' when calling OAuthConnectionApi->CreateOAuthConnection");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "redirectBase", redirectBase));
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "oAuthConnectionType", oAuthConnectionType));
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }

            localVarRequestOptions.Operation = "OAuthConnectionApi.CreateOAuthConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateOAuthConnectionResult>("/oauth-connection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuthConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exchange authorization code for access token and create inbox Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateOAuthExchangeResult</returns>
        public CreateOAuthExchangeResult ExchangeAuthorizationTokenAndCreateOrUpdateInbox(string authorizationCode, string redirectUri, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<CreateOAuthExchangeResult> localVarResponse = ExchangeAuthorizationTokenAndCreateOrUpdateInboxWithHttpInfo(authorizationCode, redirectUri);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange authorization code for access token and create inbox Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateOAuthExchangeResult</returns>
        public mailslurp.Client.ApiResponse<CreateOAuthExchangeResult> ExchangeAuthorizationTokenAndCreateOrUpdateInboxWithHttpInfo(string authorizationCode, string redirectUri, int operationIndex = 0)
        {
            // verify the required parameter 'authorizationCode' is set
            if (authorizationCode == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'authorizationCode' when calling OAuthConnectionApi->ExchangeAuthorizationTokenAndCreateOrUpdateInbox");
            }

            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'redirectUri' when calling OAuthConnectionApi->ExchangeAuthorizationTokenAndCreateOrUpdateInbox");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "authorizationCode", authorizationCode));
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "redirectUri", redirectUri));

            localVarRequestOptions.Operation = "OAuthConnectionApi.ExchangeAuthorizationTokenAndCreateOrUpdateInbox";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateOAuthExchangeResult>("/oauth-connection/oauth-exchange/google", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExchangeAuthorizationTokenAndCreateOrUpdateInbox", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exchange authorization code for access token and create inbox Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOAuthExchangeResult</returns>
        public async System.Threading.Tasks.Task<CreateOAuthExchangeResult> ExchangeAuthorizationTokenAndCreateOrUpdateInboxAsync(string authorizationCode, string redirectUri, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<CreateOAuthExchangeResult> localVarResponse = await ExchangeAuthorizationTokenAndCreateOrUpdateInboxWithHttpInfoAsync(authorizationCode, redirectUri, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange authorization code for access token and create inbox Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOAuthExchangeResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<CreateOAuthExchangeResult>> ExchangeAuthorizationTokenAndCreateOrUpdateInboxWithHttpInfoAsync(string authorizationCode, string redirectUri, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'authorizationCode' is set
            if (authorizationCode == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'authorizationCode' when calling OAuthConnectionApi->ExchangeAuthorizationTokenAndCreateOrUpdateInbox");
            }

            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'redirectUri' when calling OAuthConnectionApi->ExchangeAuthorizationTokenAndCreateOrUpdateInbox");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "authorizationCode", authorizationCode));
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "redirectUri", redirectUri));

            localVarRequestOptions.Operation = "OAuthConnectionApi.ExchangeAuthorizationTokenAndCreateOrUpdateInbox";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateOAuthExchangeResult>("/oauth-connection/oauth-exchange/google", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExchangeAuthorizationTokenAndCreateOrUpdateInbox", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
