// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOAuthConnectionApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OAuthConnectionApiEvents Events { get; }

        /// <summary>
        /// Create an OAuth connection
        /// </summary>
        /// <remarks>
        /// Configure an inbox for OAuth sync with MailSlurp
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOAuthConnectionApiResponse"/>&gt;</returns>
        Task<ICreateOAuthConnectionApiResponse> CreateOAuthConnectionAsync(string redirectBase, string oAuthConnectionType, Option<string> emailAddress = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an OAuth connection
        /// </summary>
        /// <remarks>
        /// Configure an inbox for OAuth sync with MailSlurp
        /// </remarks>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOAuthConnectionApiResponse"/>&gt;</returns>
        Task<ICreateOAuthConnectionApiResponse> CreateOAuthConnectionOrDefaultAsync(string redirectBase, string oAuthConnectionType, Option<string> emailAddress = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Exchange authorization code for access token and create inbox
        /// </summary>
        /// <remarks>
        /// Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse"/>&gt;</returns>
        Task<IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse> ExchangeAuthorizationTokenAndCreateOrUpdateInboxAsync(string authorizationCode, string redirectUri, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Exchange authorization code for access token and create inbox
        /// </summary>
        /// <remarks>
        /// Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </remarks>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse"/>&gt;</returns>
        Task<IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse> ExchangeAuthorizationTokenAndCreateOrUpdateInboxOrDefaultAsync(string authorizationCode, string redirectUri, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateOAuthConnectionApiResponse"/>
    /// </summary>
    public interface ICreateOAuthConnectionApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.CreateOAuthConnectionResult>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse"/>
    /// </summary>
    public interface IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.CreateOAuthExchangeResult>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OAuthConnectionApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateOAuthConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateOAuthConnection;

        internal void ExecuteOnCreateOAuthConnection(OAuthConnectionApi.CreateOAuthConnectionApiResponse apiResponse)
        {
            OnCreateOAuthConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOAuthConnection(Exception exception)
        {
            OnErrorCreateOAuthConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnExchangeAuthorizationTokenAndCreateOrUpdateInbox;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorExchangeAuthorizationTokenAndCreateOrUpdateInbox;

        internal void ExecuteOnExchangeAuthorizationTokenAndCreateOrUpdateInbox(OAuthConnectionApi.ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse apiResponse)
        {
            OnExchangeAuthorizationTokenAndCreateOrUpdateInbox?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExchangeAuthorizationTokenAndCreateOrUpdateInbox(Exception exception)
        {
            OnErrorExchangeAuthorizationTokenAndCreateOrUpdateInbox?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OAuthConnectionApi : IOAuthConnectionApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OAuthConnectionApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OAuthConnectionApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthConnectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthConnectionApi(ILogger<OAuthConnectionApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OAuthConnectionApiEvents oAuthConnectionApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OAuthConnectionApi>();
            HttpClient = httpClient;
            Events = oAuthConnectionApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateOAuthConnection(ref string redirectBase, ref string oAuthConnectionType, ref Option<string> emailAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"></param>
        /// <returns></returns>
        private void ValidateCreateOAuthConnection(string redirectBase, string oAuthConnectionType, Option<string> emailAddress)
        {
            if (redirectBase == null)
                throw new ArgumentNullException(nameof(redirectBase));

            if (oAuthConnectionType == null)
                throw new ArgumentNullException(nameof(oAuthConnectionType));

            if (emailAddress.IsSet && emailAddress.Value == null)
                throw new ArgumentNullException(nameof(emailAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"></param>
        private void AfterCreateOAuthConnectionDefaultImplementation(ICreateOAuthConnectionApiResponse apiResponseLocalVar, string redirectBase, string oAuthConnectionType, Option<string> emailAddress)
        {
            bool suppressDefaultLog = false;
            AfterCreateOAuthConnection(ref suppressDefaultLog, apiResponseLocalVar, redirectBase, oAuthConnectionType, emailAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"></param>
        partial void AfterCreateOAuthConnection(ref bool suppressDefaultLog, ICreateOAuthConnectionApiResponse apiResponseLocalVar, string redirectBase, string oAuthConnectionType, Option<string> emailAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"></param>
        private void OnErrorCreateOAuthConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string redirectBase, string oAuthConnectionType, Option<string> emailAddress)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOAuthConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, redirectBase, oAuthConnectionType, emailAddress);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"></param>
        partial void OnErrorCreateOAuthConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string redirectBase, string oAuthConnectionType, Option<string> emailAddress);

        /// <summary>
        /// Create an OAuth connection Configure an inbox for OAuth sync with MailSlurp
        /// </summary>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOAuthConnectionApiResponse"/>&gt;</returns>
        public async Task<ICreateOAuthConnectionApiResponse> CreateOAuthConnectionOrDefaultAsync(string redirectBase, string oAuthConnectionType, Option<string> emailAddress = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOAuthConnectionAsync(redirectBase, oAuthConnectionType, emailAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an OAuth connection Configure an inbox for OAuth sync with MailSlurp
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectBase"></param>
        /// <param name="oAuthConnectionType"></param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOAuthConnectionApiResponse"/>&gt;</returns>
        public async Task<ICreateOAuthConnectionApiResponse> CreateOAuthConnectionAsync(string redirectBase, string oAuthConnectionType, Option<string> emailAddress = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOAuthConnection(redirectBase, oAuthConnectionType, emailAddress);

                FormatCreateOAuthConnection(ref redirectBase, ref oAuthConnectionType, ref emailAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/oauth-connection"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/oauth-connection");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["redirectBase"] = ClientUtils.ParameterToString(redirectBase);
                    parseQueryStringLocalVar["oAuthConnectionType"] = ClientUtils.ParameterToString(oAuthConnectionType);

                    if (emailAddress.IsSet)
                        parseQueryStringLocalVar["emailAddress"] = ClientUtils.ParameterToString(emailAddress.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateOAuthConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOAuthConnectionApiResponse>();

                        CreateOAuthConnectionApiResponse apiResponseLocalVar = new CreateOAuthConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/oauth-connection", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateOAuthConnectionDefaultImplementation(apiResponseLocalVar, redirectBase, oAuthConnectionType, emailAddress);

                        Events.ExecuteOnCreateOAuthConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOAuthConnectionDefaultImplementation(e, "/oauth-connection", uriBuilderLocalVar.Path, redirectBase, oAuthConnectionType, emailAddress);
                Events.ExecuteOnErrorCreateOAuthConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOAuthConnectionApiResponse"/>
        /// </summary>
        public partial class CreateOAuthConnectionApiResponse : mailslurp.Client.ApiResponse, ICreateOAuthConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOAuthConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOAuthConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOAuthConnectionApiResponse(ILogger<CreateOAuthConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.CreateOAuthConnectionResult Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.CreateOAuthConnectionResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.CreateOAuthConnectionResult result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatExchangeAuthorizationTokenAndCreateOrUpdateInbox(ref string authorizationCode, ref string redirectUri);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <returns></returns>
        private void ValidateExchangeAuthorizationTokenAndCreateOrUpdateInbox(string authorizationCode, string redirectUri)
        {
            if (authorizationCode == null)
                throw new ArgumentNullException(nameof(authorizationCode));

            if (redirectUri == null)
                throw new ArgumentNullException(nameof(redirectUri));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        private void AfterExchangeAuthorizationTokenAndCreateOrUpdateInboxDefaultImplementation(IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse apiResponseLocalVar, string authorizationCode, string redirectUri)
        {
            bool suppressDefaultLog = false;
            AfterExchangeAuthorizationTokenAndCreateOrUpdateInbox(ref suppressDefaultLog, apiResponseLocalVar, authorizationCode, redirectUri);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        partial void AfterExchangeAuthorizationTokenAndCreateOrUpdateInbox(ref bool suppressDefaultLog, IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse apiResponseLocalVar, string authorizationCode, string redirectUri);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        private void OnErrorExchangeAuthorizationTokenAndCreateOrUpdateInboxDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string authorizationCode, string redirectUri)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExchangeAuthorizationTokenAndCreateOrUpdateInbox(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, authorizationCode, redirectUri);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        partial void OnErrorExchangeAuthorizationTokenAndCreateOrUpdateInbox(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string authorizationCode, string redirectUri);

        /// <summary>
        /// Exchange authorization code for access token and create inbox Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </summary>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse"/>&gt;</returns>
        public async Task<IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse> ExchangeAuthorizationTokenAndCreateOrUpdateInboxOrDefaultAsync(string authorizationCode, string redirectUri, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExchangeAuthorizationTokenAndCreateOrUpdateInboxAsync(authorizationCode, redirectUri, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Exchange authorization code for access token and create inbox Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizationCode"></param>
        /// <param name="redirectUri"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse"/>&gt;</returns>
        public async Task<IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse> ExchangeAuthorizationTokenAndCreateOrUpdateInboxAsync(string authorizationCode, string redirectUri, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateExchangeAuthorizationTokenAndCreateOrUpdateInbox(authorizationCode, redirectUri);

                FormatExchangeAuthorizationTokenAndCreateOrUpdateInbox(ref authorizationCode, ref redirectUri);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/oauth-connection/oauth-exchange/google"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/oauth-connection/oauth-exchange/google");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["authorizationCode"] = ClientUtils.ParameterToString(authorizationCode);
                    parseQueryStringLocalVar["redirectUri"] = ClientUtils.ParameterToString(redirectUri);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse>();

                        ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse apiResponseLocalVar = new ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/oauth-connection/oauth-exchange/google", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExchangeAuthorizationTokenAndCreateOrUpdateInboxDefaultImplementation(apiResponseLocalVar, authorizationCode, redirectUri);

                        Events.ExecuteOnExchangeAuthorizationTokenAndCreateOrUpdateInbox(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExchangeAuthorizationTokenAndCreateOrUpdateInboxDefaultImplementation(e, "/oauth-connection/oauth-exchange/google", uriBuilderLocalVar.Path, authorizationCode, redirectUri);
                Events.ExecuteOnErrorExchangeAuthorizationTokenAndCreateOrUpdateInbox(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse"/>
        /// </summary>
        public partial class ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse : mailslurp.Client.ApiResponse, IExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse(ILogger<ExchangeAuthorizationTokenAndCreateOrUpdateInboxApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.CreateOAuthExchangeResult Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.CreateOAuthExchangeResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.CreateOAuthExchangeResult result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
