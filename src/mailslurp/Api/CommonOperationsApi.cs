/* 
 * MailSlurp API
 *
 * For full documentation and a list of available SDK clients please see the [developer guide](https://www.mailslurp.com/developers). [Create an account](https://app.mailslurp.com) in the MailSlurp Dashboard to [view your API Key](https://app.mailslurp.com). For all bugs, feature requests, or help please [see support](https://www.mailslurp.com/support/). 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonOperationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new email address
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Inbox</returns>
        Inbox CreateNewEmailAddress ();

        /// <summary>
        /// Create new email address
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> CreateNewEmailAddressWithHttpInfo ();
        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns></returns>
        void DeleteEmail (Guid? emailId);

        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailWithHttpInfo (Guid? emailId);
        /// <summary>
        /// Delete email address and its emails
        /// </summary>
        /// <remarks>
        /// Deletes an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        void DeleteEmailAddress (Guid? inboxId);

        /// <summary>
        /// Delete email address and its emails
        /// </summary>
        /// <remarks>
        /// Deletes an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailAddressWithHttpInfo (Guid? inboxId);
        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        void EmptyInbox (Guid? inboxId);

        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EmptyInboxWithHttpInfo (Guid? inboxId);
        /// <summary>
        /// Send an email from a random email address
        /// </summary>
        /// <remarks>
        /// To specify an email address first create an inbox and use that with the other send email methods
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns></returns>
        void SendEmailSimple (SendEmailOptions sendEmailOptions);

        /// <summary>
        /// Send an email from a random email address
        /// </summary>
        /// <remarks>
        /// To specify an email address first create an inbox and use that with the other send email methods
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailSimpleWithHttpInfo (SendEmailOptions sendEmailOptions);
        /// <summary>
        /// Wait for and return count number of emails 
        /// </summary>
        /// <remarks>
        /// Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>List&lt;EmailPreview&gt;</returns>
        List<EmailPreview> WaitForEmailCount (int? count = null, Guid? inboxId = null, long? timeout = null);

        /// <summary>
        /// Wait for and return count number of emails 
        /// </summary>
        /// <remarks>
        /// Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailPreview&gt;</returns>
        ApiResponse<List<EmailPreview>> WaitForEmailCountWithHttpInfo (int? count = null, Guid? inboxId = null, long? timeout = null);
        /// <summary>
        /// Fetch inbox&#39;s latest email or if empty wait for email to arrive
        /// </summary>
        /// <remarks>
        /// Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Email</returns>
        Email WaitForLatestEmail (Guid? inboxId = null, long? timeout = null);

        /// <summary>
        /// Fetch inbox&#39;s latest email or if empty wait for email to arrive
        /// </summary>
        /// <remarks>
        /// Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>ApiResponse of Email</returns>
        ApiResponse<Email> WaitForLatestEmailWithHttpInfo (Guid? inboxId = null, long? timeout = null);
        /// <summary>
        /// Wait or return list of emails that match simple matching patterns
        /// </summary>
        /// <remarks>
        /// Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchOptions">matchOptions</param>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>List&lt;EmailPreview&gt;</returns>
        List<EmailPreview> WaitForMatchingEmail (MatchOptions matchOptions, int? count = null, Guid? inboxId = null, long? timeout = null);

        /// <summary>
        /// Wait or return list of emails that match simple matching patterns
        /// </summary>
        /// <remarks>
        /// Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchOptions">matchOptions</param>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailPreview&gt;</returns>
        ApiResponse<List<EmailPreview>> WaitForMatchingEmailWithHttpInfo (MatchOptions matchOptions, int? count = null, Guid? inboxId = null, long? timeout = null);
        /// <summary>
        /// Wait for or fetch the email with a given index in the inbox specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="index">Zero based index of the email to wait for (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Email</returns>
        Email WaitForNthEmail (Guid? inboxId = null, int? index = null, long? timeout = null);

        /// <summary>
        /// Wait for or fetch the email with a given index in the inbox specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="index">Zero based index of the email to wait for (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>ApiResponse of Email</returns>
        ApiResponse<Email> WaitForNthEmailWithHttpInfo (Guid? inboxId = null, int? index = null, long? timeout = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonOperationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create new email address
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> CreateNewEmailAddressAsync ();

        /// <summary>
        /// Create new email address
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateNewEmailAddressAsyncWithHttpInfo ();
        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailAsync (Guid? emailId);

        /// <summary>
        /// Delete an email
        /// </summary>
        /// <remarks>
        /// Deletes an email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailAsyncWithHttpInfo (Guid? emailId);
        /// <summary>
        /// Delete email address and its emails
        /// </summary>
        /// <remarks>
        /// Deletes an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailAddressAsync (Guid? inboxId);

        /// <summary>
        /// Delete email address and its emails
        /// </summary>
        /// <remarks>
        /// Deletes an inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailAddressAsyncWithHttpInfo (Guid? inboxId);
        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EmptyInboxAsync (Guid? inboxId);

        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EmptyInboxAsyncWithHttpInfo (Guid? inboxId);
        /// <summary>
        /// Send an email from a random email address
        /// </summary>
        /// <remarks>
        /// To specify an email address first create an inbox and use that with the other send email methods
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailSimpleAsync (SendEmailOptions sendEmailOptions);

        /// <summary>
        /// Send an email from a random email address
        /// </summary>
        /// <remarks>
        /// To specify an email address first create an inbox and use that with the other send email methods
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailSimpleAsyncWithHttpInfo (SendEmailOptions sendEmailOptions);
        /// <summary>
        /// Wait for and return count number of emails 
        /// </summary>
        /// <remarks>
        /// Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of List&lt;EmailPreview&gt;</returns>
        System.Threading.Tasks.Task<List<EmailPreview>> WaitForEmailCountAsync (int? count = null, Guid? inboxId = null, long? timeout = null);

        /// <summary>
        /// Wait for and return count number of emails 
        /// </summary>
        /// <remarks>
        /// Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailPreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailPreview>>> WaitForEmailCountAsyncWithHttpInfo (int? count = null, Guid? inboxId = null, long? timeout = null);
        /// <summary>
        /// Fetch inbox&#39;s latest email or if empty wait for email to arrive
        /// </summary>
        /// <remarks>
        /// Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of Email</returns>
        System.Threading.Tasks.Task<Email> WaitForLatestEmailAsync (Guid? inboxId = null, long? timeout = null);

        /// <summary>
        /// Fetch inbox&#39;s latest email or if empty wait for email to arrive
        /// </summary>
        /// <remarks>
        /// Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of ApiResponse (Email)</returns>
        System.Threading.Tasks.Task<ApiResponse<Email>> WaitForLatestEmailAsyncWithHttpInfo (Guid? inboxId = null, long? timeout = null);
        /// <summary>
        /// Wait or return list of emails that match simple matching patterns
        /// </summary>
        /// <remarks>
        /// Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchOptions">matchOptions</param>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of List&lt;EmailPreview&gt;</returns>
        System.Threading.Tasks.Task<List<EmailPreview>> WaitForMatchingEmailAsync (MatchOptions matchOptions, int? count = null, Guid? inboxId = null, long? timeout = null);

        /// <summary>
        /// Wait or return list of emails that match simple matching patterns
        /// </summary>
        /// <remarks>
        /// Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchOptions">matchOptions</param>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailPreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailPreview>>> WaitForMatchingEmailAsyncWithHttpInfo (MatchOptions matchOptions, int? count = null, Guid? inboxId = null, long? timeout = null);
        /// <summary>
        /// Wait for or fetch the email with a given index in the inbox specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="index">Zero based index of the email to wait for (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of Email</returns>
        System.Threading.Tasks.Task<Email> WaitForNthEmailAsync (Guid? inboxId = null, int? index = null, long? timeout = null);

        /// <summary>
        /// Wait for or fetch the email with a given index in the inbox specified
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="index">Zero based index of the email to wait for (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of ApiResponse (Email)</returns>
        System.Threading.Tasks.Task<ApiResponse<Email>> WaitForNthEmailAsyncWithHttpInfo (Guid? inboxId = null, int? index = null, long? timeout = null);
        #endregion Asynchronous Operations
    }

    public interface ICommonOperationsApi : ICommonOperationsApiSync, ICommonOperationsApiAsync
    {
        
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommonOperationsApi : ICommonOperationsApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommonOperationsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommonOperationsApi(String basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommonOperationsApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CommonOperationsApi(mailslurp.Client.ISynchronousClient client,mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");
            
            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create new email address Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Inbox</returns>
        public Inbox CreateNewEmailAddress ()
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = CreateNewEmailAddressWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new email address Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > CreateNewEmailAddressWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post< Inbox >("/newEmailAddress", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateNewEmailAddress", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create new email address Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> CreateNewEmailAddressAsync ()
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await CreateNewEmailAddressAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new email address Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> CreateNewEmailAddressAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Inbox>("/newEmailAddress", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateNewEmailAddress", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete an email Deletes an email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns></returns>
        public void DeleteEmail (Guid? emailId)
        {
             DeleteEmailWithHttpInfo(emailId);
        }

        /// <summary>
        /// Delete an email Deletes an email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteEmailWithHttpInfo (Guid? emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling CommonOperationsApi->DeleteEmail");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailId", emailId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/deleteEmail", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete an email Deletes an email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailAsync (Guid? emailId)
        {
             await DeleteEmailAsyncWithHttpInfo(emailId);

        }

        /// <summary>
        /// Delete an email Deletes an email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteEmailAsyncWithHttpInfo (Guid? emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling CommonOperationsApi->DeleteEmail");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailId", emailId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/deleteEmail", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete email address and its emails Deletes an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        public void DeleteEmailAddress (Guid? inboxId)
        {
             DeleteEmailAddressWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete email address and its emails Deletes an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteEmailAddressWithHttpInfo (Guid? inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling CommonOperationsApi->DeleteEmailAddress");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/deleteEmailAddress", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmailAddress", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete email address and its emails Deletes an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailAddressAsync (Guid? inboxId)
        {
             await DeleteEmailAddressAsyncWithHttpInfo(inboxId);

        }

        /// <summary>
        /// Delete email address and its emails Deletes an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteEmailAddressAsyncWithHttpInfo (Guid? inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling CommonOperationsApi->DeleteEmailAddress");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/deleteEmailAddress", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmailAddress", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        public void EmptyInbox (Guid? inboxId)
        {
             EmptyInboxWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> EmptyInboxWithHttpInfo (Guid? inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling CommonOperationsApi->EmptyInbox");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/emptyInbox", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmptyInbox", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EmptyInboxAsync (Guid? inboxId)
        {
             await EmptyInboxAsyncWithHttpInfo(inboxId);

        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> EmptyInboxAsyncWithHttpInfo (Guid? inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling CommonOperationsApi->EmptyInbox");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/emptyInbox", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmptyInbox", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Send an email from a random email address To specify an email address first create an inbox and use that with the other send email methods
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns></returns>
        public void SendEmailSimple (SendEmailOptions sendEmailOptions)
        {
             SendEmailSimpleWithHttpInfo(sendEmailOptions);
        }

        /// <summary>
        /// Send an email from a random email address To specify an email address first create an inbox and use that with the other send email methods
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> SendEmailSimpleWithHttpInfo (SendEmailOptions sendEmailOptions)
        {
            // verify the required parameter 'sendEmailOptions' is set
            if (sendEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'sendEmailOptions' when calling CommonOperationsApi->SendEmailSimple");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = sendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/sendEmail", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SendEmailSimple", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Send an email from a random email address To specify an email address first create an inbox and use that with the other send email methods
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailSimpleAsync (SendEmailOptions sendEmailOptions)
        {
             await SendEmailSimpleAsyncWithHttpInfo(sendEmailOptions);

        }

        /// <summary>
        /// Send an email from a random email address To specify an email address first create an inbox and use that with the other send email methods
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> SendEmailSimpleAsyncWithHttpInfo (SendEmailOptions sendEmailOptions)
        {
            // verify the required parameter 'sendEmailOptions' is set
            if (sendEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'sendEmailOptions' when calling CommonOperationsApi->SendEmailSimple");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = sendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/sendEmail", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SendEmailSimple", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Wait for and return count number of emails  Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>List&lt;EmailPreview&gt;</returns>
        public List<EmailPreview> WaitForEmailCount (int? count = null, Guid? inboxId = null, long? timeout = null)
        {
             mailslurp.Client.ApiResponse<List<EmailPreview>> localVarResponse = WaitForEmailCountWithHttpInfo(count, inboxId, timeout);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wait for and return count number of emails  Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailPreview&gt;</returns>
        public mailslurp.Client.ApiResponse< List<EmailPreview> > WaitForEmailCountWithHttpInfo (int? count = null, Guid? inboxId = null, long? timeout = null)
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (count != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "count", count))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeout != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<EmailPreview> >("/waitForEmailCount", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("WaitForEmailCount", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Wait for and return count number of emails  Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of List&lt;EmailPreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmailPreview>> WaitForEmailCountAsync (int? count = null, Guid? inboxId = null, long? timeout = null)
        {
             mailslurp.Client.ApiResponse<List<EmailPreview>> localVarResponse = await WaitForEmailCountAsyncWithHttpInfo(count, inboxId, timeout);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wait for and return count number of emails  Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailPreview&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<EmailPreview>>> WaitForEmailCountAsyncWithHttpInfo (int? count = null, Guid? inboxId = null, long? timeout = null)
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (count != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "count", count))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeout != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<EmailPreview>>("/waitForEmailCount", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("WaitForEmailCount", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Fetch inbox&#39;s latest email or if empty wait for email to arrive Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Email</returns>
        public Email WaitForLatestEmail (Guid? inboxId = null, long? timeout = null)
        {
             mailslurp.Client.ApiResponse<Email> localVarResponse = WaitForLatestEmailWithHttpInfo(inboxId, timeout);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch inbox&#39;s latest email or if empty wait for email to arrive Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>ApiResponse of Email</returns>
        public mailslurp.Client.ApiResponse< Email > WaitForLatestEmailWithHttpInfo (Guid? inboxId = null, long? timeout = null)
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeout != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< Email >("/waitForLatestEmail", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("WaitForLatestEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Fetch inbox&#39;s latest email or if empty wait for email to arrive Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of Email</returns>
        public async System.Threading.Tasks.Task<Email> WaitForLatestEmailAsync (Guid? inboxId = null, long? timeout = null)
        {
             mailslurp.Client.ApiResponse<Email> localVarResponse = await WaitForLatestEmailAsyncWithHttpInfo(inboxId, timeout);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch inbox&#39;s latest email or if empty wait for email to arrive Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of ApiResponse (Email)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Email>> WaitForLatestEmailAsyncWithHttpInfo (Guid? inboxId = null, long? timeout = null)
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeout != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Email>("/waitForLatestEmail", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("WaitForLatestEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Wait or return list of emails that match simple matching patterns Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchOptions">matchOptions</param>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>List&lt;EmailPreview&gt;</returns>
        public List<EmailPreview> WaitForMatchingEmail (MatchOptions matchOptions, int? count = null, Guid? inboxId = null, long? timeout = null)
        {
             mailslurp.Client.ApiResponse<List<EmailPreview>> localVarResponse = WaitForMatchingEmailWithHttpInfo(matchOptions, count, inboxId, timeout);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wait or return list of emails that match simple matching patterns Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchOptions">matchOptions</param>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailPreview&gt;</returns>
        public mailslurp.Client.ApiResponse< List<EmailPreview> > WaitForMatchingEmailWithHttpInfo (MatchOptions matchOptions, int? count = null, Guid? inboxId = null, long? timeout = null)
        {
            // verify the required parameter 'matchOptions' is set
            if (matchOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'matchOptions' when calling CommonOperationsApi->WaitForMatchingEmail");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (count != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "count", count))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeout != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = matchOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post< List<EmailPreview> >("/waitForMatchingEmails", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("WaitForMatchingEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Wait or return list of emails that match simple matching patterns Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchOptions">matchOptions</param>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of List&lt;EmailPreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmailPreview>> WaitForMatchingEmailAsync (MatchOptions matchOptions, int? count = null, Guid? inboxId = null, long? timeout = null)
        {
             mailslurp.Client.ApiResponse<List<EmailPreview>> localVarResponse = await WaitForMatchingEmailAsyncWithHttpInfo(matchOptions, count, inboxId, timeout);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wait or return list of emails that match simple matching patterns Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchOptions">matchOptions</param>
        /// <param name="count">Number of emails to wait for. Must be greater that 1 (optional)</param>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailPreview&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<EmailPreview>>> WaitForMatchingEmailAsyncWithHttpInfo (MatchOptions matchOptions, int? count = null, Guid? inboxId = null, long? timeout = null)
        {
            // verify the required parameter 'matchOptions' is set
            if (matchOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'matchOptions' when calling CommonOperationsApi->WaitForMatchingEmail");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (count != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "count", count))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeout != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = matchOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<EmailPreview>>("/waitForMatchingEmails", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("WaitForMatchingEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Wait for or fetch the email with a given index in the inbox specified 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="index">Zero based index of the email to wait for (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Email</returns>
        public Email WaitForNthEmail (Guid? inboxId = null, int? index = null, long? timeout = null)
        {
             mailslurp.Client.ApiResponse<Email> localVarResponse = WaitForNthEmailWithHttpInfo(inboxId, index, timeout);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wait for or fetch the email with a given index in the inbox specified 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="index">Zero based index of the email to wait for (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>ApiResponse of Email</returns>
        public mailslurp.Client.ApiResponse< Email > WaitForNthEmailWithHttpInfo (Guid? inboxId = null, int? index = null, long? timeout = null)
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (index != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "index", index))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeout != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< Email >("/waitForNthEmail", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("WaitForNthEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Wait for or fetch the email with a given index in the inbox specified 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="index">Zero based index of the email to wait for (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of Email</returns>
        public async System.Threading.Tasks.Task<Email> WaitForNthEmailAsync (Guid? inboxId = null, int? index = null, long? timeout = null)
        {
             mailslurp.Client.ApiResponse<Email> localVarResponse = await WaitForNthEmailAsyncWithHttpInfo(inboxId, index, timeout);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wait for or fetch the email with a given index in the inbox specified 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of the inbox we are fetching emails from (optional)</param>
        /// <param name="index">Zero based index of the email to wait for (optional)</param>
        /// <param name="timeout">Max milliseconds to wait (optional)</param>
        /// <returns>Task of ApiResponse (Email)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Email>> WaitForNthEmailAsyncWithHttpInfo (Guid? inboxId = null, int? index = null, long? timeout = null)
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (index != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "index", index))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeout != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "timeout", timeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Email>("/waitForNthEmail", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("WaitForNthEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
