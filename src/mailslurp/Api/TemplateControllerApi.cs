// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITemplateControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TemplateControllerApiEvents Events { get; }

        /// <summary>
        /// Create a Template
        /// </summary>
        /// <remarks>
        /// Create an email template with variables for use with templated transactional emails.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTemplateApiResponse"/>&gt;</returns>
        Task<ICreateTemplateApiResponse> CreateTemplateAsync(CreateTemplateOptions createTemplateOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Template
        /// </summary>
        /// <remarks>
        /// Create an email template with variables for use with templated transactional emails.
        /// </remarks>
        /// <param name="createTemplateOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTemplateApiResponse"/>&gt;</returns>
        Task<ICreateTemplateApiResponse> CreateTemplateOrDefaultAsync(CreateTemplateOptions createTemplateOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete email template
        /// </summary>
        /// <remarks>
        /// Delete template
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTemplateApiResponse"/>&gt;</returns>
        Task<IDeleteTemplateApiResponse> DeleteTemplateAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete email template
        /// </summary>
        /// <remarks>
        /// Delete template
        /// </remarks>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTemplateApiResponse"/>&gt;</returns>
        Task<IDeleteTemplateApiResponse> DeleteTemplateOrDefaultAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List templates
        /// </summary>
        /// <remarks>
        /// Get all templates in paginated format
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllTemplatesApiResponse"/>&gt;</returns>
        Task<IGetAllTemplatesApiResponse> GetAllTemplatesAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List templates
        /// </summary>
        /// <remarks>
        /// Get all templates in paginated format
        /// </remarks>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllTemplatesApiResponse"/>&gt;</returns>
        Task<IGetAllTemplatesApiResponse> GetAllTemplatesOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get template
        /// </summary>
        /// <remarks>
        /// Get email template
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplateApiResponse"/>&gt;</returns>
        Task<IGetTemplateApiResponse> GetTemplateAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get template
        /// </summary>
        /// <remarks>
        /// Get email template
        /// </remarks>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplateApiResponse"/>&gt;</returns>
        Task<IGetTemplateApiResponse> GetTemplateOrDefaultAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get template preview HTML
        /// </summary>
        /// <remarks>
        /// Get email template preview with passed template variables in HTML format for browsers. Pass template variables as query params.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatePreviewHtmlApiResponse"/>&gt;</returns>
        Task<IGetTemplatePreviewHtmlApiResponse> GetTemplatePreviewHtmlAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get template preview HTML
        /// </summary>
        /// <remarks>
        /// Get email template preview with passed template variables in HTML format for browsers. Pass template variables as query params.
        /// </remarks>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatePreviewHtmlApiResponse"/>&gt;</returns>
        Task<IGetTemplatePreviewHtmlApiResponse> GetTemplatePreviewHtmlOrDefaultAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get template preview Json
        /// </summary>
        /// <remarks>
        /// Get email template preview with passed template variables in JSON format. Pass template variables as query params.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatePreviewJsonApiResponse"/>&gt;</returns>
        Task<IGetTemplatePreviewJsonApiResponse> GetTemplatePreviewJsonAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get template preview Json
        /// </summary>
        /// <remarks>
        /// Get email template preview with passed template variables in JSON format. Pass template variables as query params.
        /// </remarks>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatePreviewJsonApiResponse"/>&gt;</returns>
        Task<IGetTemplatePreviewJsonApiResponse> GetTemplatePreviewJsonOrDefaultAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List templates
        /// </summary>
        /// <remarks>
        /// Get all templates
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatesApiResponse"/>&gt;</returns>
        Task<IGetTemplatesApiResponse> GetTemplatesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List templates
        /// </summary>
        /// <remarks>
        /// Get all templates
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatesApiResponse"/>&gt;</returns>
        Task<IGetTemplatesApiResponse> GetTemplatesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update template
        /// </summary>
        /// <remarks>
        /// Update email template
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template ID</param>
        /// <param name="createTemplateOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTemplateApiResponse"/>&gt;</returns>
        Task<IUpdateTemplateApiResponse> UpdateTemplateAsync(Guid templateId, CreateTemplateOptions createTemplateOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update template
        /// </summary>
        /// <remarks>
        /// Update email template
        /// </remarks>
        /// <param name="templateId">Template ID</param>
        /// <param name="createTemplateOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTemplateApiResponse"/>&gt;</returns>
        Task<IUpdateTemplateApiResponse> UpdateTemplateOrDefaultAsync(Guid templateId, CreateTemplateOptions createTemplateOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateTemplateApiResponse"/>
    /// </summary>
    public interface ICreateTemplateApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.TemplateDto>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteTemplateApiResponse"/>
    /// </summary>
    public interface IDeleteTemplateApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllTemplatesApiResponse"/>
    /// </summary>
    public interface IGetAllTemplatesApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageTemplateProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTemplateApiResponse"/>
    /// </summary>
    public interface IGetTemplateApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.TemplateDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTemplatePreviewHtmlApiResponse"/>
    /// </summary>
    public interface IGetTemplatePreviewHtmlApiResponse : mailslurp.Client.IApiResponse, IOk<string>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTemplatePreviewJsonApiResponse"/>
    /// </summary>
    public interface IGetTemplatePreviewJsonApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.TemplatePreview>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTemplatesApiResponse"/>
    /// </summary>
    public interface IGetTemplatesApiResponse : mailslurp.Client.IApiResponse, IOk<List<TemplateProjection>>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateTemplateApiResponse"/>
    /// </summary>
    public interface IUpdateTemplateApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.TemplateDto>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TemplateControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateTemplate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateTemplate;

        internal void ExecuteOnCreateTemplate(TemplateControllerApi.CreateTemplateApiResponse apiResponse)
        {
            OnCreateTemplate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateTemplate(Exception exception)
        {
            OnErrorCreateTemplate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteTemplate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteTemplate;

        internal void ExecuteOnDeleteTemplate(TemplateControllerApi.DeleteTemplateApiResponse apiResponse)
        {
            OnDeleteTemplate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteTemplate(Exception exception)
        {
            OnErrorDeleteTemplate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllTemplates;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllTemplates;

        internal void ExecuteOnGetAllTemplates(TemplateControllerApi.GetAllTemplatesApiResponse apiResponse)
        {
            OnGetAllTemplates?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllTemplates(Exception exception)
        {
            OnErrorGetAllTemplates?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTemplate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTemplate;

        internal void ExecuteOnGetTemplate(TemplateControllerApi.GetTemplateApiResponse apiResponse)
        {
            OnGetTemplate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTemplate(Exception exception)
        {
            OnErrorGetTemplate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTemplatePreviewHtml;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTemplatePreviewHtml;

        internal void ExecuteOnGetTemplatePreviewHtml(TemplateControllerApi.GetTemplatePreviewHtmlApiResponse apiResponse)
        {
            OnGetTemplatePreviewHtml?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTemplatePreviewHtml(Exception exception)
        {
            OnErrorGetTemplatePreviewHtml?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTemplatePreviewJson;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTemplatePreviewJson;

        internal void ExecuteOnGetTemplatePreviewJson(TemplateControllerApi.GetTemplatePreviewJsonApiResponse apiResponse)
        {
            OnGetTemplatePreviewJson?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTemplatePreviewJson(Exception exception)
        {
            OnErrorGetTemplatePreviewJson?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTemplates;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTemplates;

        internal void ExecuteOnGetTemplates(TemplateControllerApi.GetTemplatesApiResponse apiResponse)
        {
            OnGetTemplates?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTemplates(Exception exception)
        {
            OnErrorGetTemplates?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateTemplate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateTemplate;

        internal void ExecuteOnUpdateTemplate(TemplateControllerApi.UpdateTemplateApiResponse apiResponse)
        {
            OnUpdateTemplate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateTemplate(Exception exception)
        {
            OnErrorUpdateTemplate?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TemplateControllerApi : ITemplateControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TemplateControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TemplateControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateControllerApi(ILogger<TemplateControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TemplateControllerApiEvents templateControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TemplateControllerApi>();
            HttpClient = httpClient;
            Events = templateControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateTemplate(CreateTemplateOptions createTemplateOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createTemplateOptions"></param>
        /// <returns></returns>
        private void ValidateCreateTemplate(CreateTemplateOptions createTemplateOptions)
        {
            if (createTemplateOptions == null)
                throw new ArgumentNullException(nameof(createTemplateOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createTemplateOptions"></param>
        private void AfterCreateTemplateDefaultImplementation(ICreateTemplateApiResponse apiResponseLocalVar, CreateTemplateOptions createTemplateOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateTemplate(ref suppressDefaultLog, apiResponseLocalVar, createTemplateOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createTemplateOptions"></param>
        partial void AfterCreateTemplate(ref bool suppressDefaultLog, ICreateTemplateApiResponse apiResponseLocalVar, CreateTemplateOptions createTemplateOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createTemplateOptions"></param>
        private void OnErrorCreateTemplateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateTemplateOptions createTemplateOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateTemplate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createTemplateOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createTemplateOptions"></param>
        partial void OnErrorCreateTemplate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateTemplateOptions createTemplateOptions);

        /// <summary>
        /// Create a Template Create an email template with variables for use with templated transactional emails.
        /// </summary>
        /// <param name="createTemplateOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTemplateApiResponse"/>&gt;</returns>
        public async Task<ICreateTemplateApiResponse> CreateTemplateOrDefaultAsync(CreateTemplateOptions createTemplateOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateTemplateAsync(createTemplateOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a Template Create an email template with variables for use with templated transactional emails.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTemplateApiResponse"/>&gt;</returns>
        public async Task<ICreateTemplateApiResponse> CreateTemplateAsync(CreateTemplateOptions createTemplateOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateTemplate(createTemplateOptions);

                FormatCreateTemplate(createTemplateOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates");

                    httpRequestMessageLocalVar.Content = (createTemplateOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createTemplateOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateTemplateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateTemplateApiResponse>();

                        CreateTemplateApiResponse apiResponseLocalVar = new CreateTemplateApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateTemplateDefaultImplementation(apiResponseLocalVar, createTemplateOptions);

                        Events.ExecuteOnCreateTemplate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateTemplateDefaultImplementation(e, "/templates", uriBuilderLocalVar.Path, createTemplateOptions);
                Events.ExecuteOnErrorCreateTemplate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateTemplateApiResponse"/>
        /// </summary>
        public partial class CreateTemplateApiResponse : mailslurp.Client.ApiResponse, ICreateTemplateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateTemplateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateTemplateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateTemplateApiResponse(ILogger<CreateTemplateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.TemplateDto Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.TemplateDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.TemplateDto result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteTemplate(ref Guid templateId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        private void AfterDeleteTemplateDefaultImplementation(IDeleteTemplateApiResponse apiResponseLocalVar, Guid templateId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteTemplate(ref suppressDefaultLog, apiResponseLocalVar, templateId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        partial void AfterDeleteTemplate(ref bool suppressDefaultLog, IDeleteTemplateApiResponse apiResponseLocalVar, Guid templateId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        private void OnErrorDeleteTemplateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid templateId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteTemplate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        partial void OnErrorDeleteTemplate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid templateId);

        /// <summary>
        /// Delete email template Delete template
        /// </summary>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTemplateApiResponse"/>&gt;</returns>
        public async Task<IDeleteTemplateApiResponse> DeleteTemplateOrDefaultAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteTemplateAsync(templateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete email template Delete template
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTemplateApiResponse"/>&gt;</returns>
        public async Task<IDeleteTemplateApiResponse> DeleteTemplateAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteTemplate(ref templateId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteTemplateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteTemplateApiResponse>();

                        DeleteTemplateApiResponse apiResponseLocalVar = new DeleteTemplateApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteTemplateDefaultImplementation(apiResponseLocalVar, templateId);

                        Events.ExecuteOnDeleteTemplate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteTemplateDefaultImplementation(e, "/templates/{templateId}", uriBuilderLocalVar.Path, templateId);
                Events.ExecuteOnErrorDeleteTemplate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteTemplateApiResponse"/>
        /// </summary>
        public partial class DeleteTemplateApiResponse : mailslurp.Client.ApiResponse, IDeleteTemplateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteTemplateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteTemplateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteTemplateApiResponse(ILogger<DeleteTemplateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllTemplates(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetAllTemplates(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void AfterGetAllTemplatesDefaultImplementation(IGetAllTemplatesApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLog = false;
            AfterGetAllTemplates(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, since, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void AfterGetAllTemplates(ref bool suppressDefaultLog, IGetAllTemplatesApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void OnErrorGetAllTemplatesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllTemplates(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, since, before);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void OnErrorGetAllTemplates(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// List templates Get all templates in paginated format
        /// </summary>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllTemplatesApiResponse"/>&gt;</returns>
        public async Task<IGetAllTemplatesApiResponse> GetAllTemplatesOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllTemplatesAsync(page, size, sort, since, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List templates Get all templates in paginated format
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllTemplatesApiResponse"/>&gt;</returns>
        public async Task<IGetAllTemplatesApiResponse> GetAllTemplatesAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllTemplates(sort);

                FormatGetAllTemplates(ref page, ref size, ref sort, ref since, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/paginated"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/paginated");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllTemplatesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllTemplatesApiResponse>();

                        GetAllTemplatesApiResponse apiResponseLocalVar = new GetAllTemplatesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/paginated", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllTemplatesDefaultImplementation(apiResponseLocalVar, page, size, sort, since, before);

                        Events.ExecuteOnGetAllTemplates(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllTemplatesDefaultImplementation(e, "/templates/paginated", uriBuilderLocalVar.Path, page, size, sort, since, before);
                Events.ExecuteOnErrorGetAllTemplates(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllTemplatesApiResponse"/>
        /// </summary>
        public partial class GetAllTemplatesApiResponse : mailslurp.Client.ApiResponse, IGetAllTemplatesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllTemplatesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllTemplatesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllTemplatesApiResponse(ILogger<GetAllTemplatesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageTemplateProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageTemplateProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageTemplateProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTemplate(ref Guid templateId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        private void AfterGetTemplateDefaultImplementation(IGetTemplateApiResponse apiResponseLocalVar, Guid templateId)
        {
            bool suppressDefaultLog = false;
            AfterGetTemplate(ref suppressDefaultLog, apiResponseLocalVar, templateId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        partial void AfterGetTemplate(ref bool suppressDefaultLog, IGetTemplateApiResponse apiResponseLocalVar, Guid templateId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        private void OnErrorGetTemplateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid templateId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTemplate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        partial void OnErrorGetTemplate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid templateId);

        /// <summary>
        /// Get template Get email template
        /// </summary>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplateApiResponse"/>&gt;</returns>
        public async Task<IGetTemplateApiResponse> GetTemplateOrDefaultAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTemplateAsync(templateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get template Get email template
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplateApiResponse"/>&gt;</returns>
        public async Task<IGetTemplateApiResponse> GetTemplateAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetTemplate(ref templateId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTemplateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTemplateApiResponse>();

                        GetTemplateApiResponse apiResponseLocalVar = new GetTemplateApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTemplateDefaultImplementation(apiResponseLocalVar, templateId);

                        Events.ExecuteOnGetTemplate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTemplateDefaultImplementation(e, "/templates/{templateId}", uriBuilderLocalVar.Path, templateId);
                Events.ExecuteOnErrorGetTemplate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTemplateApiResponse"/>
        /// </summary>
        public partial class GetTemplateApiResponse : mailslurp.Client.ApiResponse, IGetTemplateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTemplateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTemplateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTemplateApiResponse(ILogger<GetTemplateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.TemplateDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.TemplateDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.TemplateDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTemplatePreviewHtml(ref Guid templateId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        private void AfterGetTemplatePreviewHtmlDefaultImplementation(IGetTemplatePreviewHtmlApiResponse apiResponseLocalVar, Guid templateId)
        {
            bool suppressDefaultLog = false;
            AfterGetTemplatePreviewHtml(ref suppressDefaultLog, apiResponseLocalVar, templateId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        partial void AfterGetTemplatePreviewHtml(ref bool suppressDefaultLog, IGetTemplatePreviewHtmlApiResponse apiResponseLocalVar, Guid templateId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        private void OnErrorGetTemplatePreviewHtmlDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid templateId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTemplatePreviewHtml(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        partial void OnErrorGetTemplatePreviewHtml(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid templateId);

        /// <summary>
        /// Get template preview HTML Get email template preview with passed template variables in HTML format for browsers. Pass template variables as query params.
        /// </summary>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatePreviewHtmlApiResponse"/>&gt;</returns>
        public async Task<IGetTemplatePreviewHtmlApiResponse> GetTemplatePreviewHtmlOrDefaultAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTemplatePreviewHtmlAsync(templateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get template preview HTML Get email template preview with passed template variables in HTML format for browsers. Pass template variables as query params.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatePreviewHtmlApiResponse"/>&gt;</returns>
        public async Task<IGetTemplatePreviewHtmlApiResponse> GetTemplatePreviewHtmlAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetTemplatePreviewHtml(ref templateId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}/preview/html"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}/preview/html");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/html;charset=utf-8",
                        "text/html"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTemplatePreviewHtmlApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTemplatePreviewHtmlApiResponse>();

                        GetTemplatePreviewHtmlApiResponse apiResponseLocalVar = new GetTemplatePreviewHtmlApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}/preview/html", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTemplatePreviewHtmlDefaultImplementation(apiResponseLocalVar, templateId);

                        Events.ExecuteOnGetTemplatePreviewHtml(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTemplatePreviewHtmlDefaultImplementation(e, "/templates/{templateId}/preview/html", uriBuilderLocalVar.Path, templateId);
                Events.ExecuteOnErrorGetTemplatePreviewHtml(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTemplatePreviewHtmlApiResponse"/>
        /// </summary>
        public partial class GetTemplatePreviewHtmlApiResponse : mailslurp.Client.ApiResponse, IGetTemplatePreviewHtmlApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTemplatePreviewHtmlApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTemplatePreviewHtmlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTemplatePreviewHtmlApiResponse(ILogger<GetTemplatePreviewHtmlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out string result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTemplatePreviewJson(ref Guid templateId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        private void AfterGetTemplatePreviewJsonDefaultImplementation(IGetTemplatePreviewJsonApiResponse apiResponseLocalVar, Guid templateId)
        {
            bool suppressDefaultLog = false;
            AfterGetTemplatePreviewJson(ref suppressDefaultLog, apiResponseLocalVar, templateId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        partial void AfterGetTemplatePreviewJson(ref bool suppressDefaultLog, IGetTemplatePreviewJsonApiResponse apiResponseLocalVar, Guid templateId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        private void OnErrorGetTemplatePreviewJsonDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid templateId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTemplatePreviewJson(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        partial void OnErrorGetTemplatePreviewJson(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid templateId);

        /// <summary>
        /// Get template preview Json Get email template preview with passed template variables in JSON format. Pass template variables as query params.
        /// </summary>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatePreviewJsonApiResponse"/>&gt;</returns>
        public async Task<IGetTemplatePreviewJsonApiResponse> GetTemplatePreviewJsonOrDefaultAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTemplatePreviewJsonAsync(templateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get template preview Json Get email template preview with passed template variables in JSON format. Pass template variables as query params.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatePreviewJsonApiResponse"/>&gt;</returns>
        public async Task<IGetTemplatePreviewJsonApiResponse> GetTemplatePreviewJsonAsync(Guid templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetTemplatePreviewJson(ref templateId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}/preview/json"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}/preview/json");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTemplatePreviewJsonApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTemplatePreviewJsonApiResponse>();

                        GetTemplatePreviewJsonApiResponse apiResponseLocalVar = new GetTemplatePreviewJsonApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}/preview/json", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTemplatePreviewJsonDefaultImplementation(apiResponseLocalVar, templateId);

                        Events.ExecuteOnGetTemplatePreviewJson(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTemplatePreviewJsonDefaultImplementation(e, "/templates/{templateId}/preview/json", uriBuilderLocalVar.Path, templateId);
                Events.ExecuteOnErrorGetTemplatePreviewJson(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTemplatePreviewJsonApiResponse"/>
        /// </summary>
        public partial class GetTemplatePreviewJsonApiResponse : mailslurp.Client.ApiResponse, IGetTemplatePreviewJsonApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTemplatePreviewJsonApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTemplatePreviewJsonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTemplatePreviewJsonApiResponse(ILogger<GetTemplatePreviewJsonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.TemplatePreview Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.TemplatePreview>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.TemplatePreview result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTemplatesDefaultImplementation(IGetTemplatesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTemplates(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTemplates(ref bool suppressDefaultLog, IGetTemplatesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTemplatesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTemplates(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTemplates(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// List templates Get all templates
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatesApiResponse"/>&gt;</returns>
        public async Task<IGetTemplatesApiResponse> GetTemplatesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTemplatesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List templates Get all templates
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTemplatesApiResponse"/>&gt;</returns>
        public async Task<IGetTemplatesApiResponse> GetTemplatesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTemplatesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTemplatesApiResponse>();

                        GetTemplatesApiResponse apiResponseLocalVar = new GetTemplatesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTemplatesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTemplates(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTemplatesDefaultImplementation(e, "/templates", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTemplates(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTemplatesApiResponse"/>
        /// </summary>
        public partial class GetTemplatesApiResponse : mailslurp.Client.ApiResponse, IGetTemplatesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTemplatesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTemplatesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTemplatesApiResponse(ILogger<GetTemplatesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TemplateProjection> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TemplateProjection>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<TemplateProjection> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateTemplate(ref Guid templateId, CreateTemplateOptions createTemplateOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createTemplateOptions"></param>
        /// <returns></returns>
        private void ValidateUpdateTemplate(CreateTemplateOptions createTemplateOptions)
        {
            if (createTemplateOptions == null)
                throw new ArgumentNullException(nameof(createTemplateOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="createTemplateOptions"></param>
        private void AfterUpdateTemplateDefaultImplementation(IUpdateTemplateApiResponse apiResponseLocalVar, Guid templateId, CreateTemplateOptions createTemplateOptions)
        {
            bool suppressDefaultLog = false;
            AfterUpdateTemplate(ref suppressDefaultLog, apiResponseLocalVar, templateId, createTemplateOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="createTemplateOptions"></param>
        partial void AfterUpdateTemplate(ref bool suppressDefaultLog, IUpdateTemplateApiResponse apiResponseLocalVar, Guid templateId, CreateTemplateOptions createTemplateOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="createTemplateOptions"></param>
        private void OnErrorUpdateTemplateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid templateId, CreateTemplateOptions createTemplateOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateTemplate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId, createTemplateOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="createTemplateOptions"></param>
        partial void OnErrorUpdateTemplate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid templateId, CreateTemplateOptions createTemplateOptions);

        /// <summary>
        /// Update template Update email template
        /// </summary>
        /// <param name="templateId">Template ID</param>
        /// <param name="createTemplateOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTemplateApiResponse"/>&gt;</returns>
        public async Task<IUpdateTemplateApiResponse> UpdateTemplateOrDefaultAsync(Guid templateId, CreateTemplateOptions createTemplateOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateTemplateAsync(templateId, createTemplateOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update template Update email template
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template ID</param>
        /// <param name="createTemplateOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTemplateApiResponse"/>&gt;</returns>
        public async Task<IUpdateTemplateApiResponse> UpdateTemplateAsync(Guid templateId, CreateTemplateOptions createTemplateOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateTemplate(createTemplateOptions);

                FormatUpdateTemplate(ref templateId, createTemplateOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    httpRequestMessageLocalVar.Content = (createTemplateOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createTemplateOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateTemplateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateTemplateApiResponse>();

                        UpdateTemplateApiResponse apiResponseLocalVar = new UpdateTemplateApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateTemplateDefaultImplementation(apiResponseLocalVar, templateId, createTemplateOptions);

                        Events.ExecuteOnUpdateTemplate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateTemplateDefaultImplementation(e, "/templates/{templateId}", uriBuilderLocalVar.Path, templateId, createTemplateOptions);
                Events.ExecuteOnErrorUpdateTemplate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateTemplateApiResponse"/>
        /// </summary>
        public partial class UpdateTemplateApiResponse : mailslurp.Client.ApiResponse, IUpdateTemplateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateTemplateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateTemplateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateTemplateApiResponse(ILogger<UpdateTemplateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.TemplateDto Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.TemplateDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.TemplateDto result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
