// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IConnectorControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ConnectorControllerApiEvents Events { get; }

        /// <summary>
        /// Create an inbox connector
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorApiResponse"/>&gt;</returns>
        Task<ICreateConnectorApiResponse> CreateConnectorAsync(CreateConnectorOptions createConnectorOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorApiResponse"/>&gt;</returns>
        Task<ICreateConnectorApiResponse> CreateConnectorOrDefaultAsync(CreateConnectorOptions createConnectorOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorImapConnectionApiResponse"/>&gt;</returns>
        Task<ICreateConnectorImapConnectionApiResponse> CreateConnectorImapConnectionAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorImapConnectionApiResponse"/>&gt;</returns>
        Task<ICreateConnectorImapConnectionApiResponse> CreateConnectorImapConnectionOrDefaultAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        Task<ICreateConnectorSmtpConnectionApiResponse> CreateConnectorSmtpConnectionAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        Task<ICreateConnectorSmtpConnectionApiResponse> CreateConnectorSmtpConnectionOrDefaultAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorSyncSettingsApiResponse"/>&gt;</returns>
        Task<ICreateConnectorSyncSettingsApiResponse> CreateConnectorSyncSettingsAsync(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorSyncSettingsApiResponse"/>&gt;</returns>
        Task<ICreateConnectorSyncSettingsApiResponse> CreateConnectorSyncSettingsOrDefaultAsync(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector with options
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorWithOptionsApiResponse"/>&gt;</returns>
        Task<ICreateConnectorWithOptionsApiResponse> CreateConnectorWithOptionsAsync(CreateConnectorWithOptions createConnectorWithOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector with options
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorWithOptionsApiResponse"/>&gt;</returns>
        Task<ICreateConnectorWithOptionsApiResponse> CreateConnectorWithOptionsOrDefaultAsync(CreateConnectorWithOptions createConnectorWithOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all inbox connectors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllConnectorApiResponse"/>&gt;</returns>
        Task<IDeleteAllConnectorApiResponse> DeleteAllConnectorAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all inbox connectors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllConnectorApiResponse"/>&gt;</returns>
        Task<IDeleteAllConnectorApiResponse> DeleteAllConnectorOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorApiResponse"/>&gt;</returns>
        Task<IDeleteConnectorApiResponse> DeleteConnectorAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorApiResponse"/>&gt;</returns>
        Task<IDeleteConnectorApiResponse> DeleteConnectorOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Delete IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorImapConnectionApiResponse"/>&gt;</returns>
        Task<IDeleteConnectorImapConnectionApiResponse> DeleteConnectorImapConnectionAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Delete IMAP connection for external inbox
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorImapConnectionApiResponse"/>&gt;</returns>
        Task<IDeleteConnectorImapConnectionApiResponse> DeleteConnectorImapConnectionOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Delete SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        Task<IDeleteConnectorSmtpConnectionApiResponse> DeleteConnectorSmtpConnectionAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Delete SMTP connection for external inbox
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        Task<IDeleteConnectorSmtpConnectionApiResponse> DeleteConnectorSmtpConnectionOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorSyncSettingsApiResponse"/>&gt;</returns>
        Task<IDeleteConnectorSyncSettingsApiResponse> DeleteConnectorSyncSettingsAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorSyncSettingsApiResponse"/>&gt;</returns>
        Task<IDeleteConnectorSyncSettingsApiResponse> DeleteConnectorSyncSettingsOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all inbox connector events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllConnectorEventsApiResponse"/>&gt;</returns>
        Task<IGetAllConnectorEventsApiResponse> GetAllConnectorEventsAsync(Option<Guid> id = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all inbox connector events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllConnectorEventsApiResponse"/>&gt;</returns>
        Task<IGetAllConnectorEventsApiResponse> GetAllConnectorEventsOrDefaultAsync(Option<Guid> id = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorApiResponse"/>&gt;</returns>
        Task<IGetConnectorApiResponse> GetConnectorAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorApiResponse"/>&gt;</returns>
        Task<IGetConnectorApiResponse> GetConnectorOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connector by email address
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by email address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByEmailAddressApiResponse"/>&gt;</returns>
        Task<IGetConnectorByEmailAddressApiResponse> GetConnectorByEmailAddressAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connector by email address
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by email address
        /// </remarks>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByEmailAddressApiResponse"/>&gt;</returns>
        Task<IGetConnectorByEmailAddressApiResponse> GetConnectorByEmailAddressOrDefaultAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connector by inbox ID
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by inbox ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByInboxIdApiResponse"/>&gt;</returns>
        Task<IGetConnectorByInboxIdApiResponse> GetConnectorByInboxIdAsync(Guid inboxId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connector by inbox ID
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by inbox ID
        /// </remarks>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByInboxIdApiResponse"/>&gt;</returns>
        Task<IGetConnectorByInboxIdApiResponse> GetConnectorByInboxIdOrDefaultAsync(Guid inboxId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connector by name
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by name
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByNameApiResponse"/>&gt;</returns>
        Task<IGetConnectorByNameApiResponse> GetConnectorByNameAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connector by name
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by name
        /// </remarks>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByNameApiResponse"/>&gt;</returns>
        Task<IGetConnectorByNameApiResponse> GetConnectorByNameOrDefaultAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorEventApiResponse"/>&gt;</returns>
        Task<IGetConnectorEventApiResponse> GetConnectorEventAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorEventApiResponse"/>&gt;</returns>
        Task<IGetConnectorEventApiResponse> GetConnectorEventOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorEventsApiResponse"/>&gt;</returns>
        Task<IGetConnectorEventsApiResponse> GetConnectorEventsAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorEventsApiResponse"/>&gt;</returns>
        Task<IGetConnectorEventsApiResponse> GetConnectorEventsOrDefaultAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Get IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorImapConnectionApiResponse"/>&gt;</returns>
        Task<IGetConnectorImapConnectionApiResponse> GetConnectorImapConnectionAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Get IMAP connection for external inbox
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorImapConnectionApiResponse"/>&gt;</returns>
        Task<IGetConnectorImapConnectionApiResponse> GetConnectorImapConnectionOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers
        /// </summary>
        /// <remarks>
        /// Get common mail provider SMTP and IMAP connection settings
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorProviderSettingsApiResponse"/>&gt;</returns>
        Task<IGetConnectorProviderSettingsApiResponse> GetConnectorProviderSettingsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers
        /// </summary>
        /// <remarks>
        /// Get common mail provider SMTP and IMAP connection settings
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorProviderSettingsApiResponse"/>&gt;</returns>
        Task<IGetConnectorProviderSettingsApiResponse> GetConnectorProviderSettingsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Get SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        Task<IGetConnectorSmtpConnectionApiResponse> GetConnectorSmtpConnectionAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Get SMTP connection for external inbox
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        Task<IGetConnectorSmtpConnectionApiResponse> GetConnectorSmtpConnectionOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Get sync settings for connection with external inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorSyncSettingsApiResponse"/>&gt;</returns>
        Task<IGetConnectorSyncSettingsApiResponse> GetConnectorSyncSettingsAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Get sync settings for connection with external inbox
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorSyncSettingsApiResponse"/>&gt;</returns>
        Task<IGetConnectorSyncSettingsApiResponse> GetConnectorSyncSettingsOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get inbox connectors
        /// </summary>
        /// <remarks>
        /// List inbox connectors that sync external emails to MailSlurp inboxes
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorsApiResponse"/>&gt;</returns>
        Task<IGetConnectorsApiResponse> GetConnectorsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get inbox connectors
        /// </summary>
        /// <remarks>
        /// List inbox connectors that sync external emails to MailSlurp inboxes
        /// </remarks>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorsApiResponse"/>&gt;</returns>
        Task<IGetConnectorsApiResponse> GetConnectorsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send from an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEmailFromConnectorApiResponse"/>&gt;</returns>
        Task<ISendEmailFromConnectorApiResponse> SendEmailFromConnectorAsync(Guid id, SendEmailOptions sendEmailOptions, Option<bool> useFallback = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send from an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEmailFromConnectorApiResponse"/>&gt;</returns>
        Task<ISendEmailFromConnectorApiResponse> SendEmailFromConnectorOrDefaultAsync(Guid id, SendEmailOptions sendEmailOptions, Option<bool> useFallback = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sync an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncConnectorApiResponse"/>&gt;</returns>
        Task<ISyncConnectorApiResponse> SyncConnectorAsync(Guid id, Option<DateTime> since = default, Option<string> folder = default, Option<bool> logging = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sync an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncConnectorApiResponse"/>&gt;</returns>
        Task<ISyncConnectorApiResponse> SyncConnectorOrDefaultAsync(Guid id, Option<DateTime> since = default, Option<string> folder = default, Option<bool> logging = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection for a connector
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorImapConnectionApiResponse"/>&gt;</returns>
        Task<ITestConnectorImapConnectionApiResponse> TestConnectorImapConnectionAsync(Guid id, Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection for a connector
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorImapConnectionApiResponse"/>&gt;</returns>
        Task<ITestConnectorImapConnectionApiResponse> TestConnectorImapConnectionOrDefaultAsync(Guid id, Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector IMAP connection options
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection options for a connector
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorImapConnectionOptionsApiResponse"/>&gt;</returns>
        Task<ITestConnectorImapConnectionOptionsApiResponse> TestConnectorImapConnectionOptionsAsync(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector IMAP connection options
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection options for a connector
        /// </remarks>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorImapConnectionOptionsApiResponse"/>&gt;</returns>
        Task<ITestConnectorImapConnectionOptionsApiResponse> TestConnectorImapConnectionOptionsOrDefaultAsync(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection for a connector
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        Task<ITestConnectorSmtpConnectionApiResponse> TestConnectorSmtpConnectionAsync(Guid id, Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection for a connector
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        Task<ITestConnectorSmtpConnectionApiResponse> TestConnectorSmtpConnectionOrDefaultAsync(Guid id, Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector SMTP connection options
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection options for a connector
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorSmtpConnectionOptionsApiResponse"/>&gt;</returns>
        Task<ITestConnectorSmtpConnectionOptionsApiResponse> TestConnectorSmtpConnectionOptionsAsync(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector SMTP connection options
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection options for a connector
        /// </remarks>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorSmtpConnectionOptionsApiResponse"/>&gt;</returns>
        Task<ITestConnectorSmtpConnectionOptionsApiResponse> TestConnectorSmtpConnectionOptionsOrDefaultAsync(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorApiResponse"/>&gt;</returns>
        Task<IUpdateConnectorApiResponse> UpdateConnectorAsync(Guid id, CreateConnectorOptions createConnectorOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorApiResponse"/>&gt;</returns>
        Task<IUpdateConnectorApiResponse> UpdateConnectorOrDefaultAsync(Guid id, CreateConnectorOptions createConnectorOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Update IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorImapConnectionApiResponse"/>&gt;</returns>
        Task<IUpdateConnectorImapConnectionApiResponse> UpdateConnectorImapConnectionAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Update IMAP connection for external inbox
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorImapConnectionApiResponse"/>&gt;</returns>
        Task<IUpdateConnectorImapConnectionApiResponse> UpdateConnectorImapConnectionOrDefaultAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Update SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        Task<IUpdateConnectorSmtpConnectionApiResponse> UpdateConnectorSmtpConnectionAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Update SMTP connection for external inbox
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        Task<IUpdateConnectorSmtpConnectionApiResponse> UpdateConnectorSmtpConnectionOrDefaultAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateConnectorApiResponse"/>
    /// </summary>
    public interface ICreateConnectorApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.ConnectorDto>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateConnectorImapConnectionApiResponse"/>
    /// </summary>
    public interface ICreateConnectorImapConnectionApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.ConnectorImapConnectionDto>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateConnectorSmtpConnectionApiResponse"/>
    /// </summary>
    public interface ICreateConnectorSmtpConnectionApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.ConnectorSmtpConnectionDto>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateConnectorSyncSettingsApiResponse"/>
    /// </summary>
    public interface ICreateConnectorSyncSettingsApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.ConnectorSyncSettingsDto>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateConnectorWithOptionsApiResponse"/>
    /// </summary>
    public interface ICreateConnectorWithOptionsApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.ConnectorDto>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAllConnectorApiResponse"/>
    /// </summary>
    public interface IDeleteAllConnectorApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteConnectorApiResponse"/>
    /// </summary>
    public interface IDeleteConnectorApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteConnectorImapConnectionApiResponse"/>
    /// </summary>
    public interface IDeleteConnectorImapConnectionApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteConnectorSmtpConnectionApiResponse"/>
    /// </summary>
    public interface IDeleteConnectorSmtpConnectionApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteConnectorSyncSettingsApiResponse"/>
    /// </summary>
    public interface IDeleteConnectorSyncSettingsApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllConnectorEventsApiResponse"/>
    /// </summary>
    public interface IGetAllConnectorEventsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageConnectorEvents>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorApiResponse"/>
    /// </summary>
    public interface IGetConnectorApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorByEmailAddressApiResponse"/>
    /// </summary>
    public interface IGetConnectorByEmailAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.OptionalConnectorDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorByInboxIdApiResponse"/>
    /// </summary>
    public interface IGetConnectorByInboxIdApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.OptionalConnectorDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorByNameApiResponse"/>
    /// </summary>
    public interface IGetConnectorByNameApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.OptionalConnectorDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorEventApiResponse"/>
    /// </summary>
    public interface IGetConnectorEventApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorEventDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorEventsApiResponse"/>
    /// </summary>
    public interface IGetConnectorEventsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageConnectorEvents>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorImapConnectionApiResponse"/>
    /// </summary>
    public interface IGetConnectorImapConnectionApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.OptionalConnectorImapConnectionDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorProviderSettingsApiResponse"/>
    /// </summary>
    public interface IGetConnectorProviderSettingsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorProviderSettingsDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorSmtpConnectionApiResponse"/>
    /// </summary>
    public interface IGetConnectorSmtpConnectionApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.OptionalConnectorSmtpConnectionDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorSyncSettingsApiResponse"/>
    /// </summary>
    public interface IGetConnectorSyncSettingsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.OptionalConnectorSyncSettingsDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectorsApiResponse"/>
    /// </summary>
    public interface IGetConnectorsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageConnector>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISendEmailFromConnectorApiResponse"/>
    /// </summary>
    public interface ISendEmailFromConnectorApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.SentEmailDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISyncConnectorApiResponse"/>
    /// </summary>
    public interface ISyncConnectorApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorSyncRequestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestConnectorImapConnectionApiResponse"/>
    /// </summary>
    public interface ITestConnectorImapConnectionApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorImapConnectionTestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestConnectorImapConnectionOptionsApiResponse"/>
    /// </summary>
    public interface ITestConnectorImapConnectionOptionsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorImapConnectionTestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestConnectorSmtpConnectionApiResponse"/>
    /// </summary>
    public interface ITestConnectorSmtpConnectionApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorSmtpConnectionTestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestConnectorSmtpConnectionOptionsApiResponse"/>
    /// </summary>
    public interface ITestConnectorSmtpConnectionOptionsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorSmtpConnectionTestResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateConnectorApiResponse"/>
    /// </summary>
    public interface IUpdateConnectorApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateConnectorImapConnectionApiResponse"/>
    /// </summary>
    public interface IUpdateConnectorImapConnectionApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorImapConnectionDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateConnectorSmtpConnectionApiResponse"/>
    /// </summary>
    public interface IUpdateConnectorSmtpConnectionApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConnectorSmtpConnectionDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ConnectorControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateConnector;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateConnector;

        internal void ExecuteOnCreateConnector(ConnectorControllerApi.CreateConnectorApiResponse apiResponse)
        {
            OnCreateConnector?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateConnector(Exception exception)
        {
            OnErrorCreateConnector?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateConnectorImapConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateConnectorImapConnection;

        internal void ExecuteOnCreateConnectorImapConnection(ConnectorControllerApi.CreateConnectorImapConnectionApiResponse apiResponse)
        {
            OnCreateConnectorImapConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateConnectorImapConnection(Exception exception)
        {
            OnErrorCreateConnectorImapConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateConnectorSmtpConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateConnectorSmtpConnection;

        internal void ExecuteOnCreateConnectorSmtpConnection(ConnectorControllerApi.CreateConnectorSmtpConnectionApiResponse apiResponse)
        {
            OnCreateConnectorSmtpConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateConnectorSmtpConnection(Exception exception)
        {
            OnErrorCreateConnectorSmtpConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateConnectorSyncSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateConnectorSyncSettings;

        internal void ExecuteOnCreateConnectorSyncSettings(ConnectorControllerApi.CreateConnectorSyncSettingsApiResponse apiResponse)
        {
            OnCreateConnectorSyncSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateConnectorSyncSettings(Exception exception)
        {
            OnErrorCreateConnectorSyncSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateConnectorWithOptions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateConnectorWithOptions;

        internal void ExecuteOnCreateConnectorWithOptions(ConnectorControllerApi.CreateConnectorWithOptionsApiResponse apiResponse)
        {
            OnCreateConnectorWithOptions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateConnectorWithOptions(Exception exception)
        {
            OnErrorCreateConnectorWithOptions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteAllConnector;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteAllConnector;

        internal void ExecuteOnDeleteAllConnector(ConnectorControllerApi.DeleteAllConnectorApiResponse apiResponse)
        {
            OnDeleteAllConnector?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAllConnector(Exception exception)
        {
            OnErrorDeleteAllConnector?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteConnector;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteConnector;

        internal void ExecuteOnDeleteConnector(ConnectorControllerApi.DeleteConnectorApiResponse apiResponse)
        {
            OnDeleteConnector?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteConnector(Exception exception)
        {
            OnErrorDeleteConnector?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteConnectorImapConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteConnectorImapConnection;

        internal void ExecuteOnDeleteConnectorImapConnection(ConnectorControllerApi.DeleteConnectorImapConnectionApiResponse apiResponse)
        {
            OnDeleteConnectorImapConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteConnectorImapConnection(Exception exception)
        {
            OnErrorDeleteConnectorImapConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteConnectorSmtpConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteConnectorSmtpConnection;

        internal void ExecuteOnDeleteConnectorSmtpConnection(ConnectorControllerApi.DeleteConnectorSmtpConnectionApiResponse apiResponse)
        {
            OnDeleteConnectorSmtpConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteConnectorSmtpConnection(Exception exception)
        {
            OnErrorDeleteConnectorSmtpConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteConnectorSyncSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteConnectorSyncSettings;

        internal void ExecuteOnDeleteConnectorSyncSettings(ConnectorControllerApi.DeleteConnectorSyncSettingsApiResponse apiResponse)
        {
            OnDeleteConnectorSyncSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteConnectorSyncSettings(Exception exception)
        {
            OnErrorDeleteConnectorSyncSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllConnectorEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllConnectorEvents;

        internal void ExecuteOnGetAllConnectorEvents(ConnectorControllerApi.GetAllConnectorEventsApiResponse apiResponse)
        {
            OnGetAllConnectorEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllConnectorEvents(Exception exception)
        {
            OnErrorGetAllConnectorEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnector;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnector;

        internal void ExecuteOnGetConnector(ConnectorControllerApi.GetConnectorApiResponse apiResponse)
        {
            OnGetConnector?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnector(Exception exception)
        {
            OnErrorGetConnector?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnectorByEmailAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnectorByEmailAddress;

        internal void ExecuteOnGetConnectorByEmailAddress(ConnectorControllerApi.GetConnectorByEmailAddressApiResponse apiResponse)
        {
            OnGetConnectorByEmailAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectorByEmailAddress(Exception exception)
        {
            OnErrorGetConnectorByEmailAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnectorByInboxId;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnectorByInboxId;

        internal void ExecuteOnGetConnectorByInboxId(ConnectorControllerApi.GetConnectorByInboxIdApiResponse apiResponse)
        {
            OnGetConnectorByInboxId?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectorByInboxId(Exception exception)
        {
            OnErrorGetConnectorByInboxId?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnectorByName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnectorByName;

        internal void ExecuteOnGetConnectorByName(ConnectorControllerApi.GetConnectorByNameApiResponse apiResponse)
        {
            OnGetConnectorByName?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectorByName(Exception exception)
        {
            OnErrorGetConnectorByName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnectorEvent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnectorEvent;

        internal void ExecuteOnGetConnectorEvent(ConnectorControllerApi.GetConnectorEventApiResponse apiResponse)
        {
            OnGetConnectorEvent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectorEvent(Exception exception)
        {
            OnErrorGetConnectorEvent?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnectorEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnectorEvents;

        internal void ExecuteOnGetConnectorEvents(ConnectorControllerApi.GetConnectorEventsApiResponse apiResponse)
        {
            OnGetConnectorEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectorEvents(Exception exception)
        {
            OnErrorGetConnectorEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnectorImapConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnectorImapConnection;

        internal void ExecuteOnGetConnectorImapConnection(ConnectorControllerApi.GetConnectorImapConnectionApiResponse apiResponse)
        {
            OnGetConnectorImapConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectorImapConnection(Exception exception)
        {
            OnErrorGetConnectorImapConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnectorProviderSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnectorProviderSettings;

        internal void ExecuteOnGetConnectorProviderSettings(ConnectorControllerApi.GetConnectorProviderSettingsApiResponse apiResponse)
        {
            OnGetConnectorProviderSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectorProviderSettings(Exception exception)
        {
            OnErrorGetConnectorProviderSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnectorSmtpConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnectorSmtpConnection;

        internal void ExecuteOnGetConnectorSmtpConnection(ConnectorControllerApi.GetConnectorSmtpConnectionApiResponse apiResponse)
        {
            OnGetConnectorSmtpConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectorSmtpConnection(Exception exception)
        {
            OnErrorGetConnectorSmtpConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnectorSyncSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnectorSyncSettings;

        internal void ExecuteOnGetConnectorSyncSettings(ConnectorControllerApi.GetConnectorSyncSettingsApiResponse apiResponse)
        {
            OnGetConnectorSyncSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectorSyncSettings(Exception exception)
        {
            OnErrorGetConnectorSyncSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConnectors;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConnectors;

        internal void ExecuteOnGetConnectors(ConnectorControllerApi.GetConnectorsApiResponse apiResponse)
        {
            OnGetConnectors?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectors(Exception exception)
        {
            OnErrorGetConnectors?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendEmailFromConnector;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendEmailFromConnector;

        internal void ExecuteOnSendEmailFromConnector(ConnectorControllerApi.SendEmailFromConnectorApiResponse apiResponse)
        {
            OnSendEmailFromConnector?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendEmailFromConnector(Exception exception)
        {
            OnErrorSendEmailFromConnector?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSyncConnector;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSyncConnector;

        internal void ExecuteOnSyncConnector(ConnectorControllerApi.SyncConnectorApiResponse apiResponse)
        {
            OnSyncConnector?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSyncConnector(Exception exception)
        {
            OnErrorSyncConnector?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestConnectorImapConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestConnectorImapConnection;

        internal void ExecuteOnTestConnectorImapConnection(ConnectorControllerApi.TestConnectorImapConnectionApiResponse apiResponse)
        {
            OnTestConnectorImapConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestConnectorImapConnection(Exception exception)
        {
            OnErrorTestConnectorImapConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestConnectorImapConnectionOptions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestConnectorImapConnectionOptions;

        internal void ExecuteOnTestConnectorImapConnectionOptions(ConnectorControllerApi.TestConnectorImapConnectionOptionsApiResponse apiResponse)
        {
            OnTestConnectorImapConnectionOptions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestConnectorImapConnectionOptions(Exception exception)
        {
            OnErrorTestConnectorImapConnectionOptions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestConnectorSmtpConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestConnectorSmtpConnection;

        internal void ExecuteOnTestConnectorSmtpConnection(ConnectorControllerApi.TestConnectorSmtpConnectionApiResponse apiResponse)
        {
            OnTestConnectorSmtpConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestConnectorSmtpConnection(Exception exception)
        {
            OnErrorTestConnectorSmtpConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestConnectorSmtpConnectionOptions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestConnectorSmtpConnectionOptions;

        internal void ExecuteOnTestConnectorSmtpConnectionOptions(ConnectorControllerApi.TestConnectorSmtpConnectionOptionsApiResponse apiResponse)
        {
            OnTestConnectorSmtpConnectionOptions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestConnectorSmtpConnectionOptions(Exception exception)
        {
            OnErrorTestConnectorSmtpConnectionOptions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateConnector;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateConnector;

        internal void ExecuteOnUpdateConnector(ConnectorControllerApi.UpdateConnectorApiResponse apiResponse)
        {
            OnUpdateConnector?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateConnector(Exception exception)
        {
            OnErrorUpdateConnector?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateConnectorImapConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateConnectorImapConnection;

        internal void ExecuteOnUpdateConnectorImapConnection(ConnectorControllerApi.UpdateConnectorImapConnectionApiResponse apiResponse)
        {
            OnUpdateConnectorImapConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateConnectorImapConnection(Exception exception)
        {
            OnErrorUpdateConnectorImapConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateConnectorSmtpConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateConnectorSmtpConnection;

        internal void ExecuteOnUpdateConnectorSmtpConnection(ConnectorControllerApi.UpdateConnectorSmtpConnectionApiResponse apiResponse)
        {
            OnUpdateConnectorSmtpConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateConnectorSmtpConnection(Exception exception)
        {
            OnErrorUpdateConnectorSmtpConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ConnectorControllerApi : IConnectorControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ConnectorControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ConnectorControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectorControllerApi(ILogger<ConnectorControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ConnectorControllerApiEvents connectorControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ConnectorControllerApi>();
            HttpClient = httpClient;
            Events = connectorControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateConnector(CreateConnectorOptions createConnectorOptions, ref Option<Guid> inboxId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorOptions"></param>
        /// <returns></returns>
        private void ValidateCreateConnector(CreateConnectorOptions createConnectorOptions)
        {
            if (createConnectorOptions == null)
                throw new ArgumentNullException(nameof(createConnectorOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId"></param>
        private void AfterCreateConnectorDefaultImplementation(ICreateConnectorApiResponse apiResponseLocalVar, CreateConnectorOptions createConnectorOptions, Option<Guid> inboxId)
        {
            bool suppressDefaultLog = false;
            AfterCreateConnector(ref suppressDefaultLog, apiResponseLocalVar, createConnectorOptions, inboxId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId"></param>
        partial void AfterCreateConnector(ref bool suppressDefaultLog, ICreateConnectorApiResponse apiResponseLocalVar, CreateConnectorOptions createConnectorOptions, Option<Guid> inboxId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId"></param>
        private void OnErrorCreateConnectorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateConnectorOptions createConnectorOptions, Option<Guid> inboxId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateConnector(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createConnectorOptions, inboxId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId"></param>
        partial void OnErrorCreateConnector(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateConnectorOptions createConnectorOptions, Option<Guid> inboxId);

        /// <summary>
        /// Create an inbox connector Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectorApiResponse> CreateConnectorOrDefaultAsync(CreateConnectorOptions createConnectorOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateConnectorAsync(createConnectorOptions, inboxId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an inbox connector Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectorApiResponse> CreateConnectorAsync(CreateConnectorOptions createConnectorOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateConnector(createConnectorOptions);

                FormatCreateConnector(createConnectorOptions, ref inboxId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (createConnectorOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateConnectorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateConnectorApiResponse>();

                        CreateConnectorApiResponse apiResponseLocalVar = new CreateConnectorApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateConnectorDefaultImplementation(apiResponseLocalVar, createConnectorOptions, inboxId);

                        Events.ExecuteOnCreateConnector(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateConnectorDefaultImplementation(e, "/connectors", uriBuilderLocalVar.Path, createConnectorOptions, inboxId);
                Events.ExecuteOnErrorCreateConnector(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateConnectorApiResponse"/>
        /// </summary>
        public partial class CreateConnectorApiResponse : mailslurp.Client.ApiResponse, ICreateConnectorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateConnectorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateConnectorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateConnectorApiResponse(ILogger<CreateConnectorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorDto Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.ConnectorDto result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateConnectorImapConnection(ref Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <returns></returns>
        private void ValidateCreateConnectorImapConnection(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions)
        {
            if (createConnectorImapConnectionOptions == null)
                throw new ArgumentNullException(nameof(createConnectorImapConnectionOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        private void AfterCreateConnectorImapConnectionDefaultImplementation(ICreateConnectorImapConnectionApiResponse apiResponseLocalVar, Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateConnectorImapConnection(ref suppressDefaultLog, apiResponseLocalVar, id, createConnectorImapConnectionOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        partial void AfterCreateConnectorImapConnection(ref bool suppressDefaultLog, ICreateConnectorImapConnectionApiResponse apiResponseLocalVar, Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        private void OnErrorCreateConnectorImapConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateConnectorImapConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, createConnectorImapConnectionOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        partial void OnErrorCreateConnectorImapConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions);

        /// <summary>
        /// Create an inbox connector IMAP connection Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </summary>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorImapConnectionApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectorImapConnectionApiResponse> CreateConnectorImapConnectionOrDefaultAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateConnectorImapConnectionAsync(id, createConnectorImapConnectionOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an inbox connector IMAP connection Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorImapConnectionApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectorImapConnectionApiResponse> CreateConnectorImapConnectionAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateConnectorImapConnection(createConnectorImapConnectionOptions);

                FormatCreateConnectorImapConnection(ref id, createConnectorImapConnectionOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/imap"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/imap");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (createConnectorImapConnectionOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorImapConnectionOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateConnectorImapConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateConnectorImapConnectionApiResponse>();

                        CreateConnectorImapConnectionApiResponse apiResponseLocalVar = new CreateConnectorImapConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/imap", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateConnectorImapConnectionDefaultImplementation(apiResponseLocalVar, id, createConnectorImapConnectionOptions);

                        Events.ExecuteOnCreateConnectorImapConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateConnectorImapConnectionDefaultImplementation(e, "/connectors/{id}/imap", uriBuilderLocalVar.Path, id, createConnectorImapConnectionOptions);
                Events.ExecuteOnErrorCreateConnectorImapConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateConnectorImapConnectionApiResponse"/>
        /// </summary>
        public partial class CreateConnectorImapConnectionApiResponse : mailslurp.Client.ApiResponse, ICreateConnectorImapConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateConnectorImapConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateConnectorImapConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateConnectorImapConnectionApiResponse(ILogger<CreateConnectorImapConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorImapConnectionDto Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorImapConnectionDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.ConnectorImapConnectionDto result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateConnectorSmtpConnection(ref Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <returns></returns>
        private void ValidateCreateConnectorSmtpConnection(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions)
        {
            if (createConnectorSmtpConnectionOptions == null)
                throw new ArgumentNullException(nameof(createConnectorSmtpConnectionOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        private void AfterCreateConnectorSmtpConnectionDefaultImplementation(ICreateConnectorSmtpConnectionApiResponse apiResponseLocalVar, Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateConnectorSmtpConnection(ref suppressDefaultLog, apiResponseLocalVar, id, createConnectorSmtpConnectionOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        partial void AfterCreateConnectorSmtpConnection(ref bool suppressDefaultLog, ICreateConnectorSmtpConnectionApiResponse apiResponseLocalVar, Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        private void OnErrorCreateConnectorSmtpConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateConnectorSmtpConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, createConnectorSmtpConnectionOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        partial void OnErrorCreateConnectorSmtpConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Create an inbox connector SMTP connection Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </summary>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectorSmtpConnectionApiResponse> CreateConnectorSmtpConnectionOrDefaultAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateConnectorSmtpConnectionAsync(id, createConnectorSmtpConnectionOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an inbox connector SMTP connection Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectorSmtpConnectionApiResponse> CreateConnectorSmtpConnectionAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateConnectorSmtpConnection(createConnectorSmtpConnectionOptions);

                FormatCreateConnectorSmtpConnection(ref id, createConnectorSmtpConnectionOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/smtp"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/smtp");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (createConnectorSmtpConnectionOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorSmtpConnectionOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateConnectorSmtpConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateConnectorSmtpConnectionApiResponse>();

                        CreateConnectorSmtpConnectionApiResponse apiResponseLocalVar = new CreateConnectorSmtpConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/smtp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateConnectorSmtpConnectionDefaultImplementation(apiResponseLocalVar, id, createConnectorSmtpConnectionOptions);

                        Events.ExecuteOnCreateConnectorSmtpConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateConnectorSmtpConnectionDefaultImplementation(e, "/connectors/{id}/smtp", uriBuilderLocalVar.Path, id, createConnectorSmtpConnectionOptions);
                Events.ExecuteOnErrorCreateConnectorSmtpConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateConnectorSmtpConnectionApiResponse"/>
        /// </summary>
        public partial class CreateConnectorSmtpConnectionApiResponse : mailslurp.Client.ApiResponse, ICreateConnectorSmtpConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateConnectorSmtpConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateConnectorSmtpConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateConnectorSmtpConnectionApiResponse(ILogger<CreateConnectorSmtpConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorSmtpConnectionDto Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorSmtpConnectionDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.ConnectorSmtpConnectionDto result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateConnectorSyncSettings(ref Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <returns></returns>
        private void ValidateCreateConnectorSyncSettings(CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions)
        {
            if (createConnectorSyncSettingsOptions == null)
                throw new ArgumentNullException(nameof(createConnectorSyncSettingsOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        private void AfterCreateConnectorSyncSettingsDefaultImplementation(ICreateConnectorSyncSettingsApiResponse apiResponseLocalVar, Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateConnectorSyncSettings(ref suppressDefaultLog, apiResponseLocalVar, id, createConnectorSyncSettingsOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        partial void AfterCreateConnectorSyncSettings(ref bool suppressDefaultLog, ICreateConnectorSyncSettingsApiResponse apiResponseLocalVar, Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        private void OnErrorCreateConnectorSyncSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateConnectorSyncSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, createConnectorSyncSettingsOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        partial void OnErrorCreateConnectorSyncSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions);

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorSyncSettingsApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectorSyncSettingsApiResponse> CreateConnectorSyncSettingsOrDefaultAsync(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateConnectorSyncSettingsAsync(id, createConnectorSyncSettingsOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorSyncSettingsApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectorSyncSettingsApiResponse> CreateConnectorSyncSettingsAsync(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateConnectorSyncSettings(createConnectorSyncSettingsOptions);

                FormatCreateConnectorSyncSettings(ref id, createConnectorSyncSettingsOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/sync-settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/sync-settings");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (createConnectorSyncSettingsOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorSyncSettingsOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateConnectorSyncSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateConnectorSyncSettingsApiResponse>();

                        CreateConnectorSyncSettingsApiResponse apiResponseLocalVar = new CreateConnectorSyncSettingsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/sync-settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateConnectorSyncSettingsDefaultImplementation(apiResponseLocalVar, id, createConnectorSyncSettingsOptions);

                        Events.ExecuteOnCreateConnectorSyncSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateConnectorSyncSettingsDefaultImplementation(e, "/connectors/{id}/sync-settings", uriBuilderLocalVar.Path, id, createConnectorSyncSettingsOptions);
                Events.ExecuteOnErrorCreateConnectorSyncSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateConnectorSyncSettingsApiResponse"/>
        /// </summary>
        public partial class CreateConnectorSyncSettingsApiResponse : mailslurp.Client.ApiResponse, ICreateConnectorSyncSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateConnectorSyncSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateConnectorSyncSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateConnectorSyncSettingsApiResponse(ILogger<CreateConnectorSyncSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorSyncSettingsDto Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorSyncSettingsDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.ConnectorSyncSettingsDto result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateConnectorWithOptions(CreateConnectorWithOptions createConnectorWithOptions, ref Option<Guid> inboxId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorWithOptions"></param>
        /// <returns></returns>
        private void ValidateCreateConnectorWithOptions(CreateConnectorWithOptions createConnectorWithOptions)
        {
            if (createConnectorWithOptions == null)
                throw new ArgumentNullException(nameof(createConnectorWithOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId"></param>
        private void AfterCreateConnectorWithOptionsDefaultImplementation(ICreateConnectorWithOptionsApiResponse apiResponseLocalVar, CreateConnectorWithOptions createConnectorWithOptions, Option<Guid> inboxId)
        {
            bool suppressDefaultLog = false;
            AfterCreateConnectorWithOptions(ref suppressDefaultLog, apiResponseLocalVar, createConnectorWithOptions, inboxId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId"></param>
        partial void AfterCreateConnectorWithOptions(ref bool suppressDefaultLog, ICreateConnectorWithOptionsApiResponse apiResponseLocalVar, CreateConnectorWithOptions createConnectorWithOptions, Option<Guid> inboxId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId"></param>
        private void OnErrorCreateConnectorWithOptionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateConnectorWithOptions createConnectorWithOptions, Option<Guid> inboxId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateConnectorWithOptions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createConnectorWithOptions, inboxId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId"></param>
        partial void OnErrorCreateConnectorWithOptions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateConnectorWithOptions createConnectorWithOptions, Option<Guid> inboxId);

        /// <summary>
        /// Create an inbox connector with options Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorWithOptionsApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectorWithOptionsApiResponse> CreateConnectorWithOptionsOrDefaultAsync(CreateConnectorWithOptions createConnectorWithOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateConnectorWithOptionsAsync(createConnectorWithOptions, inboxId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an inbox connector with options Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectorWithOptionsApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectorWithOptionsApiResponse> CreateConnectorWithOptionsAsync(CreateConnectorWithOptions createConnectorWithOptions, Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateConnectorWithOptions(createConnectorWithOptions);

                FormatCreateConnectorWithOptions(createConnectorWithOptions, ref inboxId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/withOptions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/withOptions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (createConnectorWithOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorWithOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateConnectorWithOptionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateConnectorWithOptionsApiResponse>();

                        CreateConnectorWithOptionsApiResponse apiResponseLocalVar = new CreateConnectorWithOptionsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/withOptions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateConnectorWithOptionsDefaultImplementation(apiResponseLocalVar, createConnectorWithOptions, inboxId);

                        Events.ExecuteOnCreateConnectorWithOptions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateConnectorWithOptionsDefaultImplementation(e, "/connectors/withOptions", uriBuilderLocalVar.Path, createConnectorWithOptions, inboxId);
                Events.ExecuteOnErrorCreateConnectorWithOptions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateConnectorWithOptionsApiResponse"/>
        /// </summary>
        public partial class CreateConnectorWithOptionsApiResponse : mailslurp.Client.ApiResponse, ICreateConnectorWithOptionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateConnectorWithOptionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateConnectorWithOptionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateConnectorWithOptionsApiResponse(ILogger<CreateConnectorWithOptionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorDto Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.ConnectorDto result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDeleteAllConnectorDefaultImplementation(IDeleteAllConnectorApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAllConnector(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDeleteAllConnector(ref bool suppressDefaultLog, IDeleteAllConnectorApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorDeleteAllConnectorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAllConnector(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorDeleteAllConnector(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Delete all inbox connectors 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllConnectorApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllConnectorApiResponse> DeleteAllConnectorOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAllConnectorAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete all inbox connectors 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllConnectorApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllConnectorApiResponse> DeleteAllConnectorAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteAllConnectorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAllConnectorApiResponse>();

                        DeleteAllConnectorApiResponse apiResponseLocalVar = new DeleteAllConnectorApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAllConnectorDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDeleteAllConnector(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAllConnectorDefaultImplementation(e, "/connectors", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDeleteAllConnector(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAllConnectorApiResponse"/>
        /// </summary>
        public partial class DeleteAllConnectorApiResponse : mailslurp.Client.ApiResponse, IDeleteAllConnectorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAllConnectorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAllConnectorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAllConnectorApiResponse(ILogger<DeleteAllConnectorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteConnector(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteConnectorDefaultImplementation(IDeleteConnectorApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteConnector(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteConnector(ref bool suppressDefaultLog, IDeleteConnectorApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteConnectorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteConnector(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteConnector(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Delete an inbox connector 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorApiResponse"/>&gt;</returns>
        public async Task<IDeleteConnectorApiResponse> DeleteConnectorOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteConnectorAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an inbox connector 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorApiResponse"/>&gt;</returns>
        public async Task<IDeleteConnectorApiResponse> DeleteConnectorAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteConnector(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteConnectorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteConnectorApiResponse>();

                        DeleteConnectorApiResponse apiResponseLocalVar = new DeleteConnectorApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteConnectorDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteConnector(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteConnectorDefaultImplementation(e, "/connectors/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteConnector(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteConnectorApiResponse"/>
        /// </summary>
        public partial class DeleteConnectorApiResponse : mailslurp.Client.ApiResponse, IDeleteConnectorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteConnectorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteConnectorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteConnectorApiResponse(ILogger<DeleteConnectorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteConnectorImapConnection(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteConnectorImapConnectionDefaultImplementation(IDeleteConnectorImapConnectionApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteConnectorImapConnection(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteConnectorImapConnection(ref bool suppressDefaultLog, IDeleteConnectorImapConnectionApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteConnectorImapConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteConnectorImapConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteConnectorImapConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Delete an inbox connector IMAP connection Delete IMAP connection for external inbox
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorImapConnectionApiResponse"/>&gt;</returns>
        public async Task<IDeleteConnectorImapConnectionApiResponse> DeleteConnectorImapConnectionOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteConnectorImapConnectionAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an inbox connector IMAP connection Delete IMAP connection for external inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorImapConnectionApiResponse"/>&gt;</returns>
        public async Task<IDeleteConnectorImapConnectionApiResponse> DeleteConnectorImapConnectionAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteConnectorImapConnection(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/imap"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/imap");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteConnectorImapConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteConnectorImapConnectionApiResponse>();

                        DeleteConnectorImapConnectionApiResponse apiResponseLocalVar = new DeleteConnectorImapConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/imap", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteConnectorImapConnectionDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteConnectorImapConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteConnectorImapConnectionDefaultImplementation(e, "/connectors/{id}/imap", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteConnectorImapConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteConnectorImapConnectionApiResponse"/>
        /// </summary>
        public partial class DeleteConnectorImapConnectionApiResponse : mailslurp.Client.ApiResponse, IDeleteConnectorImapConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteConnectorImapConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteConnectorImapConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteConnectorImapConnectionApiResponse(ILogger<DeleteConnectorImapConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteConnectorSmtpConnection(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteConnectorSmtpConnectionDefaultImplementation(IDeleteConnectorSmtpConnectionApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteConnectorSmtpConnection(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteConnectorSmtpConnection(ref bool suppressDefaultLog, IDeleteConnectorSmtpConnectionApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteConnectorSmtpConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteConnectorSmtpConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteConnectorSmtpConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Delete an inbox connector SMTP connection Delete SMTP connection for external inbox
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        public async Task<IDeleteConnectorSmtpConnectionApiResponse> DeleteConnectorSmtpConnectionOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteConnectorSmtpConnectionAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an inbox connector SMTP connection Delete SMTP connection for external inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        public async Task<IDeleteConnectorSmtpConnectionApiResponse> DeleteConnectorSmtpConnectionAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteConnectorSmtpConnection(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/smtp"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/smtp");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteConnectorSmtpConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteConnectorSmtpConnectionApiResponse>();

                        DeleteConnectorSmtpConnectionApiResponse apiResponseLocalVar = new DeleteConnectorSmtpConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/smtp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteConnectorSmtpConnectionDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteConnectorSmtpConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteConnectorSmtpConnectionDefaultImplementation(e, "/connectors/{id}/smtp", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteConnectorSmtpConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteConnectorSmtpConnectionApiResponse"/>
        /// </summary>
        public partial class DeleteConnectorSmtpConnectionApiResponse : mailslurp.Client.ApiResponse, IDeleteConnectorSmtpConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteConnectorSmtpConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteConnectorSmtpConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteConnectorSmtpConnectionApiResponse(ILogger<DeleteConnectorSmtpConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteConnectorSyncSettings(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteConnectorSyncSettingsDefaultImplementation(IDeleteConnectorSyncSettingsApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteConnectorSyncSettings(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteConnectorSyncSettings(ref bool suppressDefaultLog, IDeleteConnectorSyncSettingsApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteConnectorSyncSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteConnectorSyncSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteConnectorSyncSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorSyncSettingsApiResponse"/>&gt;</returns>
        public async Task<IDeleteConnectorSyncSettingsApiResponse> DeleteConnectorSyncSettingsOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteConnectorSyncSettingsAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteConnectorSyncSettingsApiResponse"/>&gt;</returns>
        public async Task<IDeleteConnectorSyncSettingsApiResponse> DeleteConnectorSyncSettingsAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteConnectorSyncSettings(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/sync-settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/sync-settings");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteConnectorSyncSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteConnectorSyncSettingsApiResponse>();

                        DeleteConnectorSyncSettingsApiResponse apiResponseLocalVar = new DeleteConnectorSyncSettingsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/sync-settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteConnectorSyncSettingsDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteConnectorSyncSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteConnectorSyncSettingsDefaultImplementation(e, "/connectors/{id}/sync-settings", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteConnectorSyncSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteConnectorSyncSettingsApiResponse"/>
        /// </summary>
        public partial class DeleteConnectorSyncSettingsApiResponse : mailslurp.Client.ApiResponse, IDeleteConnectorSyncSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteConnectorSyncSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteConnectorSyncSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteConnectorSyncSettingsApiResponse(ILogger<DeleteConnectorSyncSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllConnectorEvents(ref Option<Guid> id, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> eventType);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="eventType"></param>
        /// <returns></returns>
        private void ValidateGetAllConnectorEvents(Option<string> sort, Option<string> eventType)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        private void AfterGetAllConnectorEventsDefaultImplementation(IGetAllConnectorEventsApiResponse apiResponseLocalVar, Option<Guid> id, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType)
        {
            bool suppressDefaultLog = false;
            AfterGetAllConnectorEvents(ref suppressDefaultLog, apiResponseLocalVar, id, page, size, sort, since, before, eventType);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        partial void AfterGetAllConnectorEvents(ref bool suppressDefaultLog, IGetAllConnectorEventsApiResponse apiResponseLocalVar, Option<Guid> id, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        private void OnErrorGetAllConnectorEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> id, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllConnectorEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, page, size, sort, since, before, eventType);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        partial void OnErrorGetAllConnectorEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> id, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType);

        /// <summary>
        /// Get all inbox connector events 
        /// </summary>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllConnectorEventsApiResponse"/>&gt;</returns>
        public async Task<IGetAllConnectorEventsApiResponse> GetAllConnectorEventsOrDefaultAsync(Option<Guid> id = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllConnectorEventsAsync(id, page, size, sort, since, before, eventType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all inbox connector events 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllConnectorEventsApiResponse"/>&gt;</returns>
        public async Task<IGetAllConnectorEventsApiResponse> GetAllConnectorEventsAsync(Option<Guid> id = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllConnectorEvents(sort, eventType);

                FormatGetAllConnectorEvents(ref id, ref page, ref size, ref sort, ref since, ref before, ref eventType);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/events"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/events");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (eventType.IsSet)
                        parseQueryStringLocalVar["eventType"] = ClientUtils.ParameterToString(eventType.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllConnectorEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllConnectorEventsApiResponse>();

                        GetAllConnectorEventsApiResponse apiResponseLocalVar = new GetAllConnectorEventsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllConnectorEventsDefaultImplementation(apiResponseLocalVar, id, page, size, sort, since, before, eventType);

                        Events.ExecuteOnGetAllConnectorEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllConnectorEventsDefaultImplementation(e, "/connectors/events", uriBuilderLocalVar.Path, id, page, size, sort, since, before, eventType);
                Events.ExecuteOnErrorGetAllConnectorEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllConnectorEventsApiResponse"/>
        /// </summary>
        public partial class GetAllConnectorEventsApiResponse : mailslurp.Client.ApiResponse, IGetAllConnectorEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllConnectorEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllConnectorEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllConnectorEventsApiResponse(ILogger<GetAllConnectorEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageConnectorEvents Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageConnectorEvents>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageConnectorEvents result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnector(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetConnectorDefaultImplementation(IGetConnectorApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetConnector(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetConnector(ref bool suppressDefaultLog, IGetConnectorApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetConnectorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnector(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetConnector(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get an inbox connector 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorApiResponse> GetConnectorOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox connector 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorApiResponse> GetConnectorAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetConnector(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorApiResponse>();

                        GetConnectorApiResponse apiResponseLocalVar = new GetConnectorApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetConnector(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorDefaultImplementation(e, "/connectors/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetConnector(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorApiResponse"/>
        /// </summary>
        public partial class GetConnectorApiResponse : mailslurp.Client.ApiResponse, IGetConnectorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorApiResponse(ILogger<GetConnectorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectorByEmailAddress(ref string emailAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <returns></returns>
        private void ValidateGetConnectorByEmailAddress(string emailAddress)
        {
            if (emailAddress == null)
                throw new ArgumentNullException(nameof(emailAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        private void AfterGetConnectorByEmailAddressDefaultImplementation(IGetConnectorByEmailAddressApiResponse apiResponseLocalVar, string emailAddress)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectorByEmailAddress(ref suppressDefaultLog, apiResponseLocalVar, emailAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailAddress"></param>
        partial void AfterGetConnectorByEmailAddress(ref bool suppressDefaultLog, IGetConnectorByEmailAddressApiResponse apiResponseLocalVar, string emailAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        private void OnErrorGetConnectorByEmailAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectorByEmailAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, emailAddress);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailAddress"></param>
        partial void OnErrorGetConnectorByEmailAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string emailAddress);

        /// <summary>
        /// Get connector by email address Find an inbox connector by email address
        /// </summary>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByEmailAddressApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorByEmailAddressApiResponse> GetConnectorByEmailAddressOrDefaultAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorByEmailAddressAsync(emailAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get connector by email address Find an inbox connector by email address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByEmailAddressApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorByEmailAddressApiResponse> GetConnectorByEmailAddressAsync(string emailAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetConnectorByEmailAddress(emailAddress);

                FormatGetConnectorByEmailAddress(ref emailAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/by-email-address"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/by-email-address");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["emailAddress"] = ClientUtils.ParameterToString(emailAddress);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorByEmailAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorByEmailAddressApiResponse>();

                        GetConnectorByEmailAddressApiResponse apiResponseLocalVar = new GetConnectorByEmailAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/by-email-address", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorByEmailAddressDefaultImplementation(apiResponseLocalVar, emailAddress);

                        Events.ExecuteOnGetConnectorByEmailAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorByEmailAddressDefaultImplementation(e, "/connectors/by-email-address", uriBuilderLocalVar.Path, emailAddress);
                Events.ExecuteOnErrorGetConnectorByEmailAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorByEmailAddressApiResponse"/>
        /// </summary>
        public partial class GetConnectorByEmailAddressApiResponse : mailslurp.Client.ApiResponse, IGetConnectorByEmailAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorByEmailAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorByEmailAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorByEmailAddressApiResponse(ILogger<GetConnectorByEmailAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.OptionalConnectorDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.OptionalConnectorDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.OptionalConnectorDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectorByInboxId(ref Guid inboxId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        private void AfterGetConnectorByInboxIdDefaultImplementation(IGetConnectorByInboxIdApiResponse apiResponseLocalVar, Guid inboxId)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectorByInboxId(ref suppressDefaultLog, apiResponseLocalVar, inboxId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        partial void AfterGetConnectorByInboxId(ref bool suppressDefaultLog, IGetConnectorByInboxIdApiResponse apiResponseLocalVar, Guid inboxId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        private void OnErrorGetConnectorByInboxIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectorByInboxId(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        partial void OnErrorGetConnectorByInboxId(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId);

        /// <summary>
        /// Get connector by inbox ID Find an inbox connector by inbox ID
        /// </summary>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByInboxIdApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorByInboxIdApiResponse> GetConnectorByInboxIdOrDefaultAsync(Guid inboxId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorByInboxIdAsync(inboxId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get connector by inbox ID Find an inbox connector by inbox ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByInboxIdApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorByInboxIdApiResponse> GetConnectorByInboxIdAsync(Guid inboxId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetConnectorByInboxId(ref inboxId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/by-inbox-id"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/by-inbox-id");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorByInboxIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorByInboxIdApiResponse>();

                        GetConnectorByInboxIdApiResponse apiResponseLocalVar = new GetConnectorByInboxIdApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/by-inbox-id", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorByInboxIdDefaultImplementation(apiResponseLocalVar, inboxId);

                        Events.ExecuteOnGetConnectorByInboxId(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorByInboxIdDefaultImplementation(e, "/connectors/by-inbox-id", uriBuilderLocalVar.Path, inboxId);
                Events.ExecuteOnErrorGetConnectorByInboxId(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorByInboxIdApiResponse"/>
        /// </summary>
        public partial class GetConnectorByInboxIdApiResponse : mailslurp.Client.ApiResponse, IGetConnectorByInboxIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorByInboxIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorByInboxIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorByInboxIdApiResponse(ILogger<GetConnectorByInboxIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.OptionalConnectorDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.OptionalConnectorDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.OptionalConnectorDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectorByName(ref string name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateGetConnectorByName(string name)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        private void AfterGetConnectorByNameDefaultImplementation(IGetConnectorByNameApiResponse apiResponseLocalVar, string name)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectorByName(ref suppressDefaultLog, apiResponseLocalVar, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        partial void AfterGetConnectorByName(ref bool suppressDefaultLog, IGetConnectorByNameApiResponse apiResponseLocalVar, string name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        private void OnErrorGetConnectorByNameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectorByName(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        partial void OnErrorGetConnectorByName(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name);

        /// <summary>
        /// Get connector by name Find an inbox connector by name
        /// </summary>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByNameApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorByNameApiResponse> GetConnectorByNameOrDefaultAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorByNameAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get connector by name Find an inbox connector by name
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorByNameApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorByNameApiResponse> GetConnectorByNameAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetConnectorByName(name);

                FormatGetConnectorByName(ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/by-name"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/by-name");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorByNameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorByNameApiResponse>();

                        GetConnectorByNameApiResponse apiResponseLocalVar = new GetConnectorByNameApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/by-name", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorByNameDefaultImplementation(apiResponseLocalVar, name);

                        Events.ExecuteOnGetConnectorByName(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorByNameDefaultImplementation(e, "/connectors/by-name", uriBuilderLocalVar.Path, name);
                Events.ExecuteOnErrorGetConnectorByName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorByNameApiResponse"/>
        /// </summary>
        public partial class GetConnectorByNameApiResponse : mailslurp.Client.ApiResponse, IGetConnectorByNameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorByNameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorByNameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorByNameApiResponse(ILogger<GetConnectorByNameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.OptionalConnectorDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.OptionalConnectorDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.OptionalConnectorDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectorEvent(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetConnectorEventDefaultImplementation(IGetConnectorEventApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectorEvent(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetConnectorEvent(ref bool suppressDefaultLog, IGetConnectorEventApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetConnectorEventDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectorEvent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetConnectorEvent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get an inbox connector event 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorEventApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorEventApiResponse> GetConnectorEventOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorEventAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox connector event 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorEventApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorEventApiResponse> GetConnectorEventAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetConnectorEvent(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/events/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/events/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorEventApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorEventApiResponse>();

                        GetConnectorEventApiResponse apiResponseLocalVar = new GetConnectorEventApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/events/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorEventDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetConnectorEvent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorEventDefaultImplementation(e, "/connectors/events/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetConnectorEvent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorEventApiResponse"/>
        /// </summary>
        public partial class GetConnectorEventApiResponse : mailslurp.Client.ApiResponse, IGetConnectorEventApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorEventApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorEventApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorEventApiResponse(ILogger<GetConnectorEventApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorEventDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorEventDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorEventDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectorEvents(ref Guid id, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> eventType);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="eventType"></param>
        /// <returns></returns>
        private void ValidateGetConnectorEvents(Option<string> sort, Option<string> eventType)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        private void AfterGetConnectorEventsDefaultImplementation(IGetConnectorEventsApiResponse apiResponseLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectorEvents(ref suppressDefaultLog, apiResponseLocalVar, id, page, size, sort, since, before, eventType);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        partial void AfterGetConnectorEvents(ref bool suppressDefaultLog, IGetConnectorEventsApiResponse apiResponseLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        private void OnErrorGetConnectorEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectorEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, page, size, sort, since, before, eventType);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        partial void OnErrorGetConnectorEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType);

        /// <summary>
        /// Get an inbox connector events 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorEventsApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorEventsApiResponse> GetConnectorEventsOrDefaultAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorEventsAsync(id, page, size, sort, since, before, eventType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox connector events 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorEventsApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorEventsApiResponse> GetConnectorEventsAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetConnectorEvents(sort, eventType);

                FormatGetConnectorEvents(ref id, ref page, ref size, ref sort, ref since, ref before, ref eventType);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/events"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/events");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (eventType.IsSet)
                        parseQueryStringLocalVar["eventType"] = ClientUtils.ParameterToString(eventType.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorEventsApiResponse>();

                        GetConnectorEventsApiResponse apiResponseLocalVar = new GetConnectorEventsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorEventsDefaultImplementation(apiResponseLocalVar, id, page, size, sort, since, before, eventType);

                        Events.ExecuteOnGetConnectorEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorEventsDefaultImplementation(e, "/connectors/{id}/events", uriBuilderLocalVar.Path, id, page, size, sort, since, before, eventType);
                Events.ExecuteOnErrorGetConnectorEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorEventsApiResponse"/>
        /// </summary>
        public partial class GetConnectorEventsApiResponse : mailslurp.Client.ApiResponse, IGetConnectorEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorEventsApiResponse(ILogger<GetConnectorEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageConnectorEvents Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageConnectorEvents>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageConnectorEvents result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectorImapConnection(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetConnectorImapConnectionDefaultImplementation(IGetConnectorImapConnectionApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectorImapConnection(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetConnectorImapConnection(ref bool suppressDefaultLog, IGetConnectorImapConnectionApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetConnectorImapConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectorImapConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetConnectorImapConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get an inbox connector IMAP connection Get IMAP connection for external inbox
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorImapConnectionApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorImapConnectionApiResponse> GetConnectorImapConnectionOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorImapConnectionAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox connector IMAP connection Get IMAP connection for external inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorImapConnectionApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorImapConnectionApiResponse> GetConnectorImapConnectionAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetConnectorImapConnection(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/imap"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/imap");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorImapConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorImapConnectionApiResponse>();

                        GetConnectorImapConnectionApiResponse apiResponseLocalVar = new GetConnectorImapConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/imap", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorImapConnectionDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetConnectorImapConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorImapConnectionDefaultImplementation(e, "/connectors/{id}/imap", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetConnectorImapConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorImapConnectionApiResponse"/>
        /// </summary>
        public partial class GetConnectorImapConnectionApiResponse : mailslurp.Client.ApiResponse, IGetConnectorImapConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorImapConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorImapConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorImapConnectionApiResponse(ILogger<GetConnectorImapConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.OptionalConnectorImapConnectionDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.OptionalConnectorImapConnectionDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.OptionalConnectorImapConnectionDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetConnectorProviderSettingsDefaultImplementation(IGetConnectorProviderSettingsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectorProviderSettings(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetConnectorProviderSettings(ref bool suppressDefaultLog, IGetConnectorProviderSettingsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetConnectorProviderSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectorProviderSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetConnectorProviderSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers Get common mail provider SMTP and IMAP connection settings
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorProviderSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorProviderSettingsApiResponse> GetConnectorProviderSettingsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorProviderSettingsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers Get common mail provider SMTP and IMAP connection settings
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorProviderSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorProviderSettingsApiResponse> GetConnectorProviderSettingsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/provider-settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/provider-settings");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorProviderSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorProviderSettingsApiResponse>();

                        GetConnectorProviderSettingsApiResponse apiResponseLocalVar = new GetConnectorProviderSettingsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/provider-settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorProviderSettingsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetConnectorProviderSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorProviderSettingsDefaultImplementation(e, "/connectors/provider-settings", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetConnectorProviderSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorProviderSettingsApiResponse"/>
        /// </summary>
        public partial class GetConnectorProviderSettingsApiResponse : mailslurp.Client.ApiResponse, IGetConnectorProviderSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorProviderSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorProviderSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorProviderSettingsApiResponse(ILogger<GetConnectorProviderSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorProviderSettingsDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorProviderSettingsDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorProviderSettingsDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectorSmtpConnection(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetConnectorSmtpConnectionDefaultImplementation(IGetConnectorSmtpConnectionApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectorSmtpConnection(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetConnectorSmtpConnection(ref bool suppressDefaultLog, IGetConnectorSmtpConnectionApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetConnectorSmtpConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectorSmtpConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetConnectorSmtpConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get an inbox connector SMTP connection Get SMTP connection for external inbox
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorSmtpConnectionApiResponse> GetConnectorSmtpConnectionOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorSmtpConnectionAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox connector SMTP connection Get SMTP connection for external inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorSmtpConnectionApiResponse> GetConnectorSmtpConnectionAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetConnectorSmtpConnection(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/smtp"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/smtp");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorSmtpConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorSmtpConnectionApiResponse>();

                        GetConnectorSmtpConnectionApiResponse apiResponseLocalVar = new GetConnectorSmtpConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/smtp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorSmtpConnectionDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetConnectorSmtpConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorSmtpConnectionDefaultImplementation(e, "/connectors/{id}/smtp", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetConnectorSmtpConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorSmtpConnectionApiResponse"/>
        /// </summary>
        public partial class GetConnectorSmtpConnectionApiResponse : mailslurp.Client.ApiResponse, IGetConnectorSmtpConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorSmtpConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorSmtpConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorSmtpConnectionApiResponse(ILogger<GetConnectorSmtpConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.OptionalConnectorSmtpConnectionDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.OptionalConnectorSmtpConnectionDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.OptionalConnectorSmtpConnectionDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectorSyncSettings(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetConnectorSyncSettingsDefaultImplementation(IGetConnectorSyncSettingsApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectorSyncSettings(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetConnectorSyncSettings(ref bool suppressDefaultLog, IGetConnectorSyncSettingsApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetConnectorSyncSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectorSyncSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetConnectorSyncSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get an inbox connector sync settings Get sync settings for connection with external inbox
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorSyncSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorSyncSettingsApiResponse> GetConnectorSyncSettingsOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorSyncSettingsAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox connector sync settings Get sync settings for connection with external inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorSyncSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorSyncSettingsApiResponse> GetConnectorSyncSettingsAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetConnectorSyncSettings(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/sync-settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/sync-settings");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorSyncSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorSyncSettingsApiResponse>();

                        GetConnectorSyncSettingsApiResponse apiResponseLocalVar = new GetConnectorSyncSettingsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/sync-settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorSyncSettingsDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetConnectorSyncSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorSyncSettingsDefaultImplementation(e, "/connectors/{id}/sync-settings", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetConnectorSyncSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorSyncSettingsApiResponse"/>
        /// </summary>
        public partial class GetConnectorSyncSettingsApiResponse : mailslurp.Client.ApiResponse, IGetConnectorSyncSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorSyncSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorSyncSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorSyncSettingsApiResponse(ILogger<GetConnectorSyncSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.OptionalConnectorSyncSettingsDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.OptionalConnectorSyncSettingsDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.OptionalConnectorSyncSettingsDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectors(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetConnectors(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void AfterGetConnectorsDefaultImplementation(IGetConnectorsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectors(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, since, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void AfterGetConnectors(ref bool suppressDefaultLog, IGetConnectorsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void OnErrorGetConnectorsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConnectors(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, since, before);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void OnErrorGetConnectors(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Get inbox connectors List inbox connectors that sync external emails to MailSlurp inboxes
        /// </summary>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorsApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorsApiResponse> GetConnectorsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectorsAsync(page, size, sort, since, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get inbox connectors List inbox connectors that sync external emails to MailSlurp inboxes
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectorsApiResponse"/>&gt;</returns>
        public async Task<IGetConnectorsApiResponse> GetConnectorsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetConnectors(sort);

                FormatGetConnectors(ref page, ref size, ref sort, ref since, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConnectorsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectorsApiResponse>();

                        GetConnectorsApiResponse apiResponseLocalVar = new GetConnectorsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectorsDefaultImplementation(apiResponseLocalVar, page, size, sort, since, before);

                        Events.ExecuteOnGetConnectors(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectorsDefaultImplementation(e, "/connectors", uriBuilderLocalVar.Path, page, size, sort, since, before);
                Events.ExecuteOnErrorGetConnectors(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectorsApiResponse"/>
        /// </summary>
        public partial class GetConnectorsApiResponse : mailslurp.Client.ApiResponse, IGetConnectorsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectorsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectorsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectorsApiResponse(ILogger<GetConnectorsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageConnector Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageConnector>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageConnector result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendEmailFromConnector(ref Guid id, SendEmailOptions sendEmailOptions, ref Option<bool> useFallback);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sendEmailOptions"></param>
        /// <returns></returns>
        private void ValidateSendEmailFromConnector(SendEmailOptions sendEmailOptions)
        {
            if (sendEmailOptions == null)
                throw new ArgumentNullException(nameof(sendEmailOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"></param>
        private void AfterSendEmailFromConnectorDefaultImplementation(ISendEmailFromConnectorApiResponse apiResponseLocalVar, Guid id, SendEmailOptions sendEmailOptions, Option<bool> useFallback)
        {
            bool suppressDefaultLog = false;
            AfterSendEmailFromConnector(ref suppressDefaultLog, apiResponseLocalVar, id, sendEmailOptions, useFallback);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"></param>
        partial void AfterSendEmailFromConnector(ref bool suppressDefaultLog, ISendEmailFromConnectorApiResponse apiResponseLocalVar, Guid id, SendEmailOptions sendEmailOptions, Option<bool> useFallback);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"></param>
        private void OnErrorSendEmailFromConnectorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, SendEmailOptions sendEmailOptions, Option<bool> useFallback)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendEmailFromConnector(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, sendEmailOptions, useFallback);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"></param>
        partial void OnErrorSendEmailFromConnector(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, SendEmailOptions sendEmailOptions, Option<bool> useFallback);

        /// <summary>
        /// Send from an inbox connector 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEmailFromConnectorApiResponse"/>&gt;</returns>
        public async Task<ISendEmailFromConnectorApiResponse> SendEmailFromConnectorOrDefaultAsync(Guid id, SendEmailOptions sendEmailOptions, Option<bool> useFallback = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendEmailFromConnectorAsync(id, sendEmailOptions, useFallback, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send from an inbox connector 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEmailFromConnectorApiResponse"/>&gt;</returns>
        public async Task<ISendEmailFromConnectorApiResponse> SendEmailFromConnectorAsync(Guid id, SendEmailOptions sendEmailOptions, Option<bool> useFallback = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendEmailFromConnector(sendEmailOptions);

                FormatSendEmailFromConnector(ref id, sendEmailOptions, ref useFallback);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/send"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/send");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (useFallback.IsSet)
                        parseQueryStringLocalVar["useFallback"] = ClientUtils.ParameterToString(useFallback.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (sendEmailOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sendEmailOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendEmailFromConnectorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendEmailFromConnectorApiResponse>();

                        SendEmailFromConnectorApiResponse apiResponseLocalVar = new SendEmailFromConnectorApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/send", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendEmailFromConnectorDefaultImplementation(apiResponseLocalVar, id, sendEmailOptions, useFallback);

                        Events.ExecuteOnSendEmailFromConnector(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendEmailFromConnectorDefaultImplementation(e, "/connectors/{id}/send", uriBuilderLocalVar.Path, id, sendEmailOptions, useFallback);
                Events.ExecuteOnErrorSendEmailFromConnector(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendEmailFromConnectorApiResponse"/>
        /// </summary>
        public partial class SendEmailFromConnectorApiResponse : mailslurp.Client.ApiResponse, ISendEmailFromConnectorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendEmailFromConnectorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendEmailFromConnectorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendEmailFromConnectorApiResponse(ILogger<SendEmailFromConnectorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.SentEmailDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.SentEmailDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.SentEmailDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSyncConnector(ref Guid id, ref Option<DateTime> since, ref Option<string> folder, ref Option<bool> logging);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="folder"></param>
        /// <returns></returns>
        private void ValidateSyncConnector(Option<string> folder)
        {
            if (folder.IsSet && folder.Value == null)
                throw new ArgumentNullException(nameof(folder));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="since"></param>
        /// <param name="folder"></param>
        /// <param name="logging"></param>
        private void AfterSyncConnectorDefaultImplementation(ISyncConnectorApiResponse apiResponseLocalVar, Guid id, Option<DateTime> since, Option<string> folder, Option<bool> logging)
        {
            bool suppressDefaultLog = false;
            AfterSyncConnector(ref suppressDefaultLog, apiResponseLocalVar, id, since, folder, logging);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="since"></param>
        /// <param name="folder"></param>
        /// <param name="logging"></param>
        partial void AfterSyncConnector(ref bool suppressDefaultLog, ISyncConnectorApiResponse apiResponseLocalVar, Guid id, Option<DateTime> since, Option<string> folder, Option<bool> logging);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="since"></param>
        /// <param name="folder"></param>
        /// <param name="logging"></param>
        private void OnErrorSyncConnectorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<DateTime> since, Option<string> folder, Option<bool> logging)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSyncConnector(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, since, folder, logging);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="since"></param>
        /// <param name="folder"></param>
        /// <param name="logging"></param>
        partial void OnErrorSyncConnector(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<DateTime> since, Option<string> folder, Option<bool> logging);

        /// <summary>
        /// Sync an inbox connector 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncConnectorApiResponse"/>&gt;</returns>
        public async Task<ISyncConnectorApiResponse> SyncConnectorOrDefaultAsync(Guid id, Option<DateTime> since = default, Option<string> folder = default, Option<bool> logging = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SyncConnectorAsync(id, since, folder, logging, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Sync an inbox connector 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncConnectorApiResponse"/>&gt;</returns>
        public async Task<ISyncConnectorApiResponse> SyncConnectorAsync(Guid id, Option<DateTime> since = default, Option<string> folder = default, Option<bool> logging = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSyncConnector(folder);

                FormatSyncConnector(ref id, ref since, ref folder, ref logging);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/sync"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/sync");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (folder.IsSet)
                        parseQueryStringLocalVar["folder"] = ClientUtils.ParameterToString(folder.Value);

                    if (logging.IsSet)
                        parseQueryStringLocalVar["logging"] = ClientUtils.ParameterToString(logging.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SyncConnectorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SyncConnectorApiResponse>();

                        SyncConnectorApiResponse apiResponseLocalVar = new SyncConnectorApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/sync", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSyncConnectorDefaultImplementation(apiResponseLocalVar, id, since, folder, logging);

                        Events.ExecuteOnSyncConnector(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSyncConnectorDefaultImplementation(e, "/connectors/{id}/sync", uriBuilderLocalVar.Path, id, since, folder, logging);
                Events.ExecuteOnErrorSyncConnector(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SyncConnectorApiResponse"/>
        /// </summary>
        public partial class SyncConnectorApiResponse : mailslurp.Client.ApiResponse, ISyncConnectorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SyncConnectorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SyncConnectorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SyncConnectorApiResponse(ILogger<SyncConnectorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorSyncRequestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorSyncRequestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorSyncRequestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestConnectorImapConnection(ref Guid id, Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <returns></returns>
        private void ValidateTestConnectorImapConnection(Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions)
        {
            if (createConnectorImapConnectionOptions.IsSet && createConnectorImapConnectionOptions.Value == null)
                throw new ArgumentNullException(nameof(createConnectorImapConnectionOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        private void AfterTestConnectorImapConnectionDefaultImplementation(ITestConnectorImapConnectionApiResponse apiResponseLocalVar, Guid id, Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestConnectorImapConnection(ref suppressDefaultLog, apiResponseLocalVar, id, createConnectorImapConnectionOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        partial void AfterTestConnectorImapConnection(ref bool suppressDefaultLog, ITestConnectorImapConnectionApiResponse apiResponseLocalVar, Guid id, Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        private void OnErrorTestConnectorImapConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestConnectorImapConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, createConnectorImapConnectionOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        partial void OnErrorTestConnectorImapConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions);

        /// <summary>
        /// Test an inbox connector IMAP connection Test the IMAP connection for a connector
        /// </summary>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorImapConnectionApiResponse"/>&gt;</returns>
        public async Task<ITestConnectorImapConnectionApiResponse> TestConnectorImapConnectionOrDefaultAsync(Guid id, Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestConnectorImapConnectionAsync(id, createConnectorImapConnectionOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test an inbox connector IMAP connection Test the IMAP connection for a connector
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorImapConnectionApiResponse"/>&gt;</returns>
        public async Task<ITestConnectorImapConnectionApiResponse> TestConnectorImapConnectionAsync(Guid id, Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestConnectorImapConnection(createConnectorImapConnectionOptions);

                FormatTestConnectorImapConnection(ref id, createConnectorImapConnectionOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/imap/test"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/imap/test");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (createConnectorImapConnectionOptions.IsSet)
                        httpRequestMessageLocalVar.Content = (createConnectorImapConnectionOptions.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorImapConnectionOptions.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestConnectorImapConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestConnectorImapConnectionApiResponse>();

                        TestConnectorImapConnectionApiResponse apiResponseLocalVar = new TestConnectorImapConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/imap/test", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestConnectorImapConnectionDefaultImplementation(apiResponseLocalVar, id, createConnectorImapConnectionOptions);

                        Events.ExecuteOnTestConnectorImapConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestConnectorImapConnectionDefaultImplementation(e, "/connectors/{id}/imap/test", uriBuilderLocalVar.Path, id, createConnectorImapConnectionOptions);
                Events.ExecuteOnErrorTestConnectorImapConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestConnectorImapConnectionApiResponse"/>
        /// </summary>
        public partial class TestConnectorImapConnectionApiResponse : mailslurp.Client.ApiResponse, ITestConnectorImapConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestConnectorImapConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestConnectorImapConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestConnectorImapConnectionApiResponse(ILogger<TestConnectorImapConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorImapConnectionTestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorImapConnectionTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorImapConnectionTestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestConnectorImapConnectionOptions(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <returns></returns>
        private void ValidateTestConnectorImapConnectionOptions(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions)
        {
            if (createConnectorImapConnectionOptions == null)
                throw new ArgumentNullException(nameof(createConnectorImapConnectionOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        private void AfterTestConnectorImapConnectionOptionsDefaultImplementation(ITestConnectorImapConnectionOptionsApiResponse apiResponseLocalVar, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestConnectorImapConnectionOptions(ref suppressDefaultLog, apiResponseLocalVar, createConnectorImapConnectionOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        partial void AfterTestConnectorImapConnectionOptions(ref bool suppressDefaultLog, ITestConnectorImapConnectionOptionsApiResponse apiResponseLocalVar, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        private void OnErrorTestConnectorImapConnectionOptionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestConnectorImapConnectionOptions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createConnectorImapConnectionOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        partial void OnErrorTestConnectorImapConnectionOptions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions);

        /// <summary>
        /// Test an inbox connector IMAP connection options Test the IMAP connection options for a connector
        /// </summary>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorImapConnectionOptionsApiResponse"/>&gt;</returns>
        public async Task<ITestConnectorImapConnectionOptionsApiResponse> TestConnectorImapConnectionOptionsOrDefaultAsync(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestConnectorImapConnectionOptionsAsync(createConnectorImapConnectionOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test an inbox connector IMAP connection options Test the IMAP connection options for a connector
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorImapConnectionOptionsApiResponse"/>&gt;</returns>
        public async Task<ITestConnectorImapConnectionOptionsApiResponse> TestConnectorImapConnectionOptionsAsync(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestConnectorImapConnectionOptions(createConnectorImapConnectionOptions);

                FormatTestConnectorImapConnectionOptions(createConnectorImapConnectionOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/connections/imap/test"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/connections/imap/test");

                    httpRequestMessageLocalVar.Content = (createConnectorImapConnectionOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorImapConnectionOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestConnectorImapConnectionOptionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestConnectorImapConnectionOptionsApiResponse>();

                        TestConnectorImapConnectionOptionsApiResponse apiResponseLocalVar = new TestConnectorImapConnectionOptionsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/connections/imap/test", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestConnectorImapConnectionOptionsDefaultImplementation(apiResponseLocalVar, createConnectorImapConnectionOptions);

                        Events.ExecuteOnTestConnectorImapConnectionOptions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestConnectorImapConnectionOptionsDefaultImplementation(e, "/connectors/connections/imap/test", uriBuilderLocalVar.Path, createConnectorImapConnectionOptions);
                Events.ExecuteOnErrorTestConnectorImapConnectionOptions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestConnectorImapConnectionOptionsApiResponse"/>
        /// </summary>
        public partial class TestConnectorImapConnectionOptionsApiResponse : mailslurp.Client.ApiResponse, ITestConnectorImapConnectionOptionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestConnectorImapConnectionOptionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestConnectorImapConnectionOptionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestConnectorImapConnectionOptionsApiResponse(ILogger<TestConnectorImapConnectionOptionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorImapConnectionTestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorImapConnectionTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorImapConnectionTestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestConnectorSmtpConnection(ref Guid id, Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <returns></returns>
        private void ValidateTestConnectorSmtpConnection(Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions)
        {
            if (createConnectorSmtpConnectionOptions.IsSet && createConnectorSmtpConnectionOptions.Value == null)
                throw new ArgumentNullException(nameof(createConnectorSmtpConnectionOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        private void AfterTestConnectorSmtpConnectionDefaultImplementation(ITestConnectorSmtpConnectionApiResponse apiResponseLocalVar, Guid id, Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestConnectorSmtpConnection(ref suppressDefaultLog, apiResponseLocalVar, id, createConnectorSmtpConnectionOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        partial void AfterTestConnectorSmtpConnection(ref bool suppressDefaultLog, ITestConnectorSmtpConnectionApiResponse apiResponseLocalVar, Guid id, Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        private void OnErrorTestConnectorSmtpConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestConnectorSmtpConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, createConnectorSmtpConnectionOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        partial void OnErrorTestConnectorSmtpConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Test an inbox connector SMTP connection Test the SMTP connection for a connector
        /// </summary>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        public async Task<ITestConnectorSmtpConnectionApiResponse> TestConnectorSmtpConnectionOrDefaultAsync(Guid id, Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestConnectorSmtpConnectionAsync(id, createConnectorSmtpConnectionOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test an inbox connector SMTP connection Test the SMTP connection for a connector
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        public async Task<ITestConnectorSmtpConnectionApiResponse> TestConnectorSmtpConnectionAsync(Guid id, Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestConnectorSmtpConnection(createConnectorSmtpConnectionOptions);

                FormatTestConnectorSmtpConnection(ref id, createConnectorSmtpConnectionOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/smtp/test"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/smtp/test");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (createConnectorSmtpConnectionOptions.IsSet)
                        httpRequestMessageLocalVar.Content = (createConnectorSmtpConnectionOptions.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorSmtpConnectionOptions.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestConnectorSmtpConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestConnectorSmtpConnectionApiResponse>();

                        TestConnectorSmtpConnectionApiResponse apiResponseLocalVar = new TestConnectorSmtpConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/smtp/test", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestConnectorSmtpConnectionDefaultImplementation(apiResponseLocalVar, id, createConnectorSmtpConnectionOptions);

                        Events.ExecuteOnTestConnectorSmtpConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestConnectorSmtpConnectionDefaultImplementation(e, "/connectors/{id}/smtp/test", uriBuilderLocalVar.Path, id, createConnectorSmtpConnectionOptions);
                Events.ExecuteOnErrorTestConnectorSmtpConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestConnectorSmtpConnectionApiResponse"/>
        /// </summary>
        public partial class TestConnectorSmtpConnectionApiResponse : mailslurp.Client.ApiResponse, ITestConnectorSmtpConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestConnectorSmtpConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestConnectorSmtpConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestConnectorSmtpConnectionApiResponse(ILogger<TestConnectorSmtpConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorSmtpConnectionTestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorSmtpConnectionTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorSmtpConnectionTestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestConnectorSmtpConnectionOptions(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <returns></returns>
        private void ValidateTestConnectorSmtpConnectionOptions(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions)
        {
            if (createConnectorSmtpConnectionOptions == null)
                throw new ArgumentNullException(nameof(createConnectorSmtpConnectionOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        private void AfterTestConnectorSmtpConnectionOptionsDefaultImplementation(ITestConnectorSmtpConnectionOptionsApiResponse apiResponseLocalVar, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions)
        {
            bool suppressDefaultLog = false;
            AfterTestConnectorSmtpConnectionOptions(ref suppressDefaultLog, apiResponseLocalVar, createConnectorSmtpConnectionOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        partial void AfterTestConnectorSmtpConnectionOptions(ref bool suppressDefaultLog, ITestConnectorSmtpConnectionOptionsApiResponse apiResponseLocalVar, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        private void OnErrorTestConnectorSmtpConnectionOptionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestConnectorSmtpConnectionOptions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createConnectorSmtpConnectionOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        partial void OnErrorTestConnectorSmtpConnectionOptions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Test an inbox connector SMTP connection options Test the SMTP connection options for a connector
        /// </summary>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorSmtpConnectionOptionsApiResponse"/>&gt;</returns>
        public async Task<ITestConnectorSmtpConnectionOptionsApiResponse> TestConnectorSmtpConnectionOptionsOrDefaultAsync(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestConnectorSmtpConnectionOptionsAsync(createConnectorSmtpConnectionOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test an inbox connector SMTP connection options Test the SMTP connection options for a connector
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestConnectorSmtpConnectionOptionsApiResponse"/>&gt;</returns>
        public async Task<ITestConnectorSmtpConnectionOptionsApiResponse> TestConnectorSmtpConnectionOptionsAsync(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestConnectorSmtpConnectionOptions(createConnectorSmtpConnectionOptions);

                FormatTestConnectorSmtpConnectionOptions(createConnectorSmtpConnectionOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/connections/smtp/test"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/connections/smtp/test");

                    httpRequestMessageLocalVar.Content = (createConnectorSmtpConnectionOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorSmtpConnectionOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestConnectorSmtpConnectionOptionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestConnectorSmtpConnectionOptionsApiResponse>();

                        TestConnectorSmtpConnectionOptionsApiResponse apiResponseLocalVar = new TestConnectorSmtpConnectionOptionsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/connections/smtp/test", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestConnectorSmtpConnectionOptionsDefaultImplementation(apiResponseLocalVar, createConnectorSmtpConnectionOptions);

                        Events.ExecuteOnTestConnectorSmtpConnectionOptions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestConnectorSmtpConnectionOptionsDefaultImplementation(e, "/connectors/connections/smtp/test", uriBuilderLocalVar.Path, createConnectorSmtpConnectionOptions);
                Events.ExecuteOnErrorTestConnectorSmtpConnectionOptions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestConnectorSmtpConnectionOptionsApiResponse"/>
        /// </summary>
        public partial class TestConnectorSmtpConnectionOptionsApiResponse : mailslurp.Client.ApiResponse, ITestConnectorSmtpConnectionOptionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestConnectorSmtpConnectionOptionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestConnectorSmtpConnectionOptionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestConnectorSmtpConnectionOptionsApiResponse(ILogger<TestConnectorSmtpConnectionOptionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorSmtpConnectionTestResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorSmtpConnectionTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorSmtpConnectionTestResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateConnector(ref Guid id, CreateConnectorOptions createConnectorOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorOptions"></param>
        /// <returns></returns>
        private void ValidateUpdateConnector(CreateConnectorOptions createConnectorOptions)
        {
            if (createConnectorOptions == null)
                throw new ArgumentNullException(nameof(createConnectorOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        private void AfterUpdateConnectorDefaultImplementation(IUpdateConnectorApiResponse apiResponseLocalVar, Guid id, CreateConnectorOptions createConnectorOptions)
        {
            bool suppressDefaultLog = false;
            AfterUpdateConnector(ref suppressDefaultLog, apiResponseLocalVar, id, createConnectorOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        partial void AfterUpdateConnector(ref bool suppressDefaultLog, IUpdateConnectorApiResponse apiResponseLocalVar, Guid id, CreateConnectorOptions createConnectorOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        private void OnErrorUpdateConnectorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorOptions createConnectorOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateConnector(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, createConnectorOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        partial void OnErrorUpdateConnector(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorOptions createConnectorOptions);

        /// <summary>
        /// Update an inbox connector 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorApiResponse"/>&gt;</returns>
        public async Task<IUpdateConnectorApiResponse> UpdateConnectorOrDefaultAsync(Guid id, CreateConnectorOptions createConnectorOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateConnectorAsync(id, createConnectorOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update an inbox connector 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorApiResponse"/>&gt;</returns>
        public async Task<IUpdateConnectorApiResponse> UpdateConnectorAsync(Guid id, CreateConnectorOptions createConnectorOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateConnector(createConnectorOptions);

                FormatUpdateConnector(ref id, createConnectorOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (createConnectorOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateConnectorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateConnectorApiResponse>();

                        UpdateConnectorApiResponse apiResponseLocalVar = new UpdateConnectorApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateConnectorDefaultImplementation(apiResponseLocalVar, id, createConnectorOptions);

                        Events.ExecuteOnUpdateConnector(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateConnectorDefaultImplementation(e, "/connectors/{id}", uriBuilderLocalVar.Path, id, createConnectorOptions);
                Events.ExecuteOnErrorUpdateConnector(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateConnectorApiResponse"/>
        /// </summary>
        public partial class UpdateConnectorApiResponse : mailslurp.Client.ApiResponse, IUpdateConnectorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateConnectorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateConnectorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateConnectorApiResponse(ILogger<UpdateConnectorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateConnectorImapConnection(ref Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <returns></returns>
        private void ValidateUpdateConnectorImapConnection(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions)
        {
            if (createConnectorImapConnectionOptions == null)
                throw new ArgumentNullException(nameof(createConnectorImapConnectionOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        private void AfterUpdateConnectorImapConnectionDefaultImplementation(IUpdateConnectorImapConnectionApiResponse apiResponseLocalVar, Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions)
        {
            bool suppressDefaultLog = false;
            AfterUpdateConnectorImapConnection(ref suppressDefaultLog, apiResponseLocalVar, id, createConnectorImapConnectionOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        partial void AfterUpdateConnectorImapConnection(ref bool suppressDefaultLog, IUpdateConnectorImapConnectionApiResponse apiResponseLocalVar, Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        private void OnErrorUpdateConnectorImapConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateConnectorImapConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, createConnectorImapConnectionOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        partial void OnErrorUpdateConnectorImapConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions);

        /// <summary>
        /// Update an inbox connector IMAP connection Update IMAP connection for external inbox
        /// </summary>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorImapConnectionApiResponse"/>&gt;</returns>
        public async Task<IUpdateConnectorImapConnectionApiResponse> UpdateConnectorImapConnectionOrDefaultAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateConnectorImapConnectionAsync(id, createConnectorImapConnectionOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update an inbox connector IMAP connection Update IMAP connection for external inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorImapConnectionApiResponse"/>&gt;</returns>
        public async Task<IUpdateConnectorImapConnectionApiResponse> UpdateConnectorImapConnectionAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateConnectorImapConnection(createConnectorImapConnectionOptions);

                FormatUpdateConnectorImapConnection(ref id, createConnectorImapConnectionOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/imap"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/imap");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (createConnectorImapConnectionOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorImapConnectionOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateConnectorImapConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateConnectorImapConnectionApiResponse>();

                        UpdateConnectorImapConnectionApiResponse apiResponseLocalVar = new UpdateConnectorImapConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/imap", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateConnectorImapConnectionDefaultImplementation(apiResponseLocalVar, id, createConnectorImapConnectionOptions);

                        Events.ExecuteOnUpdateConnectorImapConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateConnectorImapConnectionDefaultImplementation(e, "/connectors/{id}/imap", uriBuilderLocalVar.Path, id, createConnectorImapConnectionOptions);
                Events.ExecuteOnErrorUpdateConnectorImapConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateConnectorImapConnectionApiResponse"/>
        /// </summary>
        public partial class UpdateConnectorImapConnectionApiResponse : mailslurp.Client.ApiResponse, IUpdateConnectorImapConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateConnectorImapConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateConnectorImapConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateConnectorImapConnectionApiResponse(ILogger<UpdateConnectorImapConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorImapConnectionDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorImapConnectionDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorImapConnectionDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateConnectorSmtpConnection(ref Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <returns></returns>
        private void ValidateUpdateConnectorSmtpConnection(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions)
        {
            if (createConnectorSmtpConnectionOptions == null)
                throw new ArgumentNullException(nameof(createConnectorSmtpConnectionOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        private void AfterUpdateConnectorSmtpConnectionDefaultImplementation(IUpdateConnectorSmtpConnectionApiResponse apiResponseLocalVar, Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions)
        {
            bool suppressDefaultLog = false;
            AfterUpdateConnectorSmtpConnection(ref suppressDefaultLog, apiResponseLocalVar, id, createConnectorSmtpConnectionOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        partial void AfterUpdateConnectorSmtpConnection(ref bool suppressDefaultLog, IUpdateConnectorSmtpConnectionApiResponse apiResponseLocalVar, Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        private void OnErrorUpdateConnectorSmtpConnectionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateConnectorSmtpConnection(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, createConnectorSmtpConnectionOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        partial void OnErrorUpdateConnectorSmtpConnection(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions);

        /// <summary>
        /// Update an inbox connector SMTP connection Update SMTP connection for external inbox
        /// </summary>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        public async Task<IUpdateConnectorSmtpConnectionApiResponse> UpdateConnectorSmtpConnectionOrDefaultAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateConnectorSmtpConnectionAsync(id, createConnectorSmtpConnectionOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update an inbox connector SMTP connection Update SMTP connection for external inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConnectorSmtpConnectionApiResponse"/>&gt;</returns>
        public async Task<IUpdateConnectorSmtpConnectionApiResponse> UpdateConnectorSmtpConnectionAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateConnectorSmtpConnection(createConnectorSmtpConnectionOptions);

                FormatUpdateConnectorSmtpConnection(ref id, createConnectorSmtpConnectionOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connectors/{id}/smtp"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connectors/{id}/smtp");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (createConnectorSmtpConnectionOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createConnectorSmtpConnectionOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateConnectorSmtpConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateConnectorSmtpConnectionApiResponse>();

                        UpdateConnectorSmtpConnectionApiResponse apiResponseLocalVar = new UpdateConnectorSmtpConnectionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connectors/{id}/smtp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateConnectorSmtpConnectionDefaultImplementation(apiResponseLocalVar, id, createConnectorSmtpConnectionOptions);

                        Events.ExecuteOnUpdateConnectorSmtpConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateConnectorSmtpConnectionDefaultImplementation(e, "/connectors/{id}/smtp", uriBuilderLocalVar.Path, id, createConnectorSmtpConnectionOptions);
                Events.ExecuteOnErrorUpdateConnectorSmtpConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateConnectorSmtpConnectionApiResponse"/>
        /// </summary>
        public partial class UpdateConnectorSmtpConnectionApiResponse : mailslurp.Client.ApiResponse, IUpdateConnectorSmtpConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateConnectorSmtpConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateConnectorSmtpConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateConnectorSmtpConnectionApiResponse(ILogger<UpdateConnectorSmtpConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConnectorSmtpConnectionDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConnectorSmtpConnectionDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConnectorSmtpConnectionDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
