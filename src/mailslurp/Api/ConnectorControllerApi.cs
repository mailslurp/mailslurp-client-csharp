/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectorControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an inbox connector
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorDto</returns>
        ConnectorDto CreateConnector(CreateConnectorOptions createConnectorOptions, Guid? inboxId = default, int operationIndex = 0);

        /// <summary>
        /// Create an inbox connector
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorDto</returns>
        ApiResponse<ConnectorDto> CreateConnectorWithHttpInfo(CreateConnectorOptions createConnectorOptions, Guid? inboxId = default, int operationIndex = 0);
        /// <summary>
        /// Create an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorImapConnectionDto</returns>
        ConnectorImapConnectionDto CreateConnectorImapConnection(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0);

        /// <summary>
        /// Create an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorImapConnectionDto</returns>
        ApiResponse<ConnectorImapConnectionDto> CreateConnectorImapConnectionWithHttpInfo(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0);
        /// <summary>
        /// Create an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSmtpConnectionDto</returns>
        ConnectorSmtpConnectionDto CreateConnectorSmtpConnection(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0);

        /// <summary>
        /// Create an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSmtpConnectionDto</returns>
        ApiResponse<ConnectorSmtpConnectionDto> CreateConnectorSmtpConnectionWithHttpInfo(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0);
        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSyncSettingsDto</returns>
        ConnectorSyncSettingsDto CreateConnectorSyncSettings(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, int operationIndex = 0);

        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSyncSettingsDto</returns>
        ApiResponse<ConnectorSyncSettingsDto> CreateConnectorSyncSettingsWithHttpInfo(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, int operationIndex = 0);
        /// <summary>
        /// Create an inbox connector with options
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorDto</returns>
        ConnectorDto CreateConnectorWithOptions(CreateConnectorWithOptions createConnectorWithOptions, Guid? inboxId = default, int operationIndex = 0);

        /// <summary>
        /// Create an inbox connector with options
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorDto</returns>
        ApiResponse<ConnectorDto> CreateConnectorWithOptionsWithHttpInfo(CreateConnectorWithOptions createConnectorWithOptions, Guid? inboxId = default, int operationIndex = 0);
        /// <summary>
        /// Delete all inbox connectors
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAllConnector(int operationIndex = 0);

        /// <summary>
        /// Delete all inbox connectors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllConnectorWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Delete an inbox connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteConnector(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConnectorWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Delete an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Delete IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteConnectorImapConnection(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Delete IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConnectorImapConnectionWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Delete an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Delete SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteConnectorSmtpConnection(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Delete SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConnectorSmtpConnectionWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteConnectorSyncSettings(Guid id, int operationIndex = 0);

        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConnectorSyncSettingsWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get all inbox connector events
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageConnectorEvents</returns>
        PageConnectorEvents GetAllConnectorEvents(Guid? id = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0);

        /// <summary>
        /// Get all inbox connector events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageConnectorEvents</returns>
        ApiResponse<PageConnectorEvents> GetAllConnectorEventsWithHttpInfo(Guid? id = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0);
        /// <summary>
        /// Get an inbox connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorDto</returns>
        ConnectorDto GetConnector(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorDto</returns>
        ApiResponse<ConnectorDto> GetConnectorWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get connector by email address
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorDto</returns>
        OptionalConnectorDto GetConnectorByEmailAddress(string emailAddress, int operationIndex = 0);

        /// <summary>
        /// Get connector by email address
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorDto</returns>
        ApiResponse<OptionalConnectorDto> GetConnectorByEmailAddressWithHttpInfo(string emailAddress, int operationIndex = 0);
        /// <summary>
        /// Get connector by inbox ID
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by inbox ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorDto</returns>
        OptionalConnectorDto GetConnectorByInboxId(Guid inboxId, int operationIndex = 0);

        /// <summary>
        /// Get connector by inbox ID
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by inbox ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorDto</returns>
        ApiResponse<OptionalConnectorDto> GetConnectorByInboxIdWithHttpInfo(Guid inboxId, int operationIndex = 0);
        /// <summary>
        /// Get connector by name
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by name
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorDto</returns>
        OptionalConnectorDto GetConnectorByName(string name, int operationIndex = 0);

        /// <summary>
        /// Get connector by name
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by name
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorDto</returns>
        ApiResponse<OptionalConnectorDto> GetConnectorByNameWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Get an inbox connector event
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorEventDto</returns>
        ConnectorEventDto GetConnectorEvent(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get an inbox connector event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorEventDto</returns>
        ApiResponse<ConnectorEventDto> GetConnectorEventWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get an inbox connector events
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageConnectorEvents</returns>
        PageConnectorEvents GetConnectorEvents(Guid id, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0);

        /// <summary>
        /// Get an inbox connector events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageConnectorEvents</returns>
        ApiResponse<PageConnectorEvents> GetConnectorEventsWithHttpInfo(Guid id, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0);
        /// <summary>
        /// Get an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Get IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorImapConnectionDto</returns>
        OptionalConnectorImapConnectionDto GetConnectorImapConnection(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Get IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorImapConnectionDto</returns>
        ApiResponse<OptionalConnectorImapConnectionDto> GetConnectorImapConnectionWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers
        /// </summary>
        /// <remarks>
        /// Get common mail provider SMTP and IMAP connection settings
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorProviderSettingsDto</returns>
        ConnectorProviderSettingsDto GetConnectorProviderSettings(int operationIndex = 0);

        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers
        /// </summary>
        /// <remarks>
        /// Get common mail provider SMTP and IMAP connection settings
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorProviderSettingsDto</returns>
        ApiResponse<ConnectorProviderSettingsDto> GetConnectorProviderSettingsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Get SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorSmtpConnectionDto</returns>
        OptionalConnectorSmtpConnectionDto GetConnectorSmtpConnection(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Get SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorSmtpConnectionDto</returns>
        ApiResponse<OptionalConnectorSmtpConnectionDto> GetConnectorSmtpConnectionWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Get sync settings for connection with external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorSyncSettingsDto</returns>
        OptionalConnectorSyncSettingsDto GetConnectorSyncSettings(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Get sync settings for connection with external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorSyncSettingsDto</returns>
        ApiResponse<OptionalConnectorSyncSettingsDto> GetConnectorSyncSettingsWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get inbox connectors
        /// </summary>
        /// <remarks>
        /// List inbox connectors that sync external emails to MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageConnector</returns>
        PageConnector GetConnectors(int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0);

        /// <summary>
        /// Get inbox connectors
        /// </summary>
        /// <remarks>
        /// List inbox connectors that sync external emails to MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageConnector</returns>
        ApiResponse<PageConnector> GetConnectorsWithHttpInfo(int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0);
        /// <summary>
        /// Send from an inbox connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentEmailDto</returns>
        SentEmailDto SendEmailFromConnector(Guid id, SendEmailOptions sendEmailOptions, bool? useFallback = default, int operationIndex = 0);

        /// <summary>
        /// Send from an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        ApiResponse<SentEmailDto> SendEmailFromConnectorWithHttpInfo(Guid id, SendEmailOptions sendEmailOptions, bool? useFallback = default, int operationIndex = 0);
        /// <summary>
        /// Sync an inbox connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSyncRequestResult</returns>
        ConnectorSyncRequestResult SyncConnector(Guid id, DateTime? since = default, string folder = default, bool? logging = default, int operationIndex = 0);

        /// <summary>
        /// Sync an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSyncRequestResult</returns>
        ApiResponse<ConnectorSyncRequestResult> SyncConnectorWithHttpInfo(Guid id, DateTime? since = default, string folder = default, bool? logging = default, int operationIndex = 0);
        /// <summary>
        /// Test an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorImapConnectionTestResult</returns>
        ConnectorImapConnectionTestResult TestConnectorImapConnection(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default, int operationIndex = 0);

        /// <summary>
        /// Test an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorImapConnectionTestResult</returns>
        ApiResponse<ConnectorImapConnectionTestResult> TestConnectorImapConnectionWithHttpInfo(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default, int operationIndex = 0);
        /// <summary>
        /// Test an inbox connector IMAP connection options
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection options for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorImapConnectionTestResult</returns>
        ConnectorImapConnectionTestResult TestConnectorImapConnectionOptions(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0);

        /// <summary>
        /// Test an inbox connector IMAP connection options
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection options for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorImapConnectionTestResult</returns>
        ApiResponse<ConnectorImapConnectionTestResult> TestConnectorImapConnectionOptionsWithHttpInfo(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0);
        /// <summary>
        /// Test an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSmtpConnectionTestResult</returns>
        ConnectorSmtpConnectionTestResult TestConnectorSmtpConnection(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default, int operationIndex = 0);

        /// <summary>
        /// Test an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSmtpConnectionTestResult</returns>
        ApiResponse<ConnectorSmtpConnectionTestResult> TestConnectorSmtpConnectionWithHttpInfo(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default, int operationIndex = 0);
        /// <summary>
        /// Test an inbox connector SMTP connection options
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection options for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSmtpConnectionTestResult</returns>
        ConnectorSmtpConnectionTestResult TestConnectorSmtpConnectionOptions(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0);

        /// <summary>
        /// Test an inbox connector SMTP connection options
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection options for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSmtpConnectionTestResult</returns>
        ApiResponse<ConnectorSmtpConnectionTestResult> TestConnectorSmtpConnectionOptionsWithHttpInfo(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0);
        /// <summary>
        /// Update an inbox connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorDto</returns>
        ConnectorDto UpdateConnector(Guid id, CreateConnectorOptions createConnectorOptions, int operationIndex = 0);

        /// <summary>
        /// Update an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorDto</returns>
        ApiResponse<ConnectorDto> UpdateConnectorWithHttpInfo(Guid id, CreateConnectorOptions createConnectorOptions, int operationIndex = 0);
        /// <summary>
        /// Update an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Update IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorImapConnectionDto</returns>
        ConnectorImapConnectionDto UpdateConnectorImapConnection(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0);

        /// <summary>
        /// Update an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Update IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorImapConnectionDto</returns>
        ApiResponse<ConnectorImapConnectionDto> UpdateConnectorImapConnectionWithHttpInfo(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0);
        /// <summary>
        /// Update an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Update SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSmtpConnectionDto</returns>
        ConnectorSmtpConnectionDto UpdateConnectorSmtpConnection(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0);

        /// <summary>
        /// Update an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Update SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSmtpConnectionDto</returns>
        ApiResponse<ConnectorSmtpConnectionDto> UpdateConnectorSmtpConnectionWithHttpInfo(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectorControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an inbox connector
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorDto</returns>
        System.Threading.Tasks.Task<ConnectorDto> CreateConnectorAsync(CreateConnectorOptions createConnectorOptions, Guid? inboxId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorDto>> CreateConnectorWithHttpInfoAsync(CreateConnectorOptions createConnectorOptions, Guid? inboxId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorImapConnectionDto</returns>
        System.Threading.Tasks.Task<ConnectorImapConnectionDto> CreateConnectorImapConnectionAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorImapConnectionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorImapConnectionDto>> CreateConnectorImapConnectionWithHttpInfoAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSmtpConnectionDto</returns>
        System.Threading.Tasks.Task<ConnectorSmtpConnectionDto> CreateConnectorSmtpConnectionAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSmtpConnectionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorSmtpConnectionDto>> CreateConnectorSmtpConnectionWithHttpInfoAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSyncSettingsDto</returns>
        System.Threading.Tasks.Task<ConnectorSyncSettingsDto> CreateConnectorSyncSettingsAsync(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSyncSettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorSyncSettingsDto>> CreateConnectorSyncSettingsWithHttpInfoAsync(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create an inbox connector with options
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorDto</returns>
        System.Threading.Tasks.Task<ConnectorDto> CreateConnectorWithOptionsAsync(CreateConnectorWithOptions createConnectorWithOptions, Guid? inboxId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector with options
        /// </summary>
        /// <remarks>
        /// Sync emails between external mailboxes and MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorDto>> CreateConnectorWithOptionsWithHttpInfoAsync(CreateConnectorWithOptions createConnectorWithOptions, Guid? inboxId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete all inbox connectors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllConnectorAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all inbox connectors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllConnectorWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConnectorAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConnectorWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Delete IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConnectorImapConnectionAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Delete IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConnectorImapConnectionWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Delete SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConnectorSmtpConnectionAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Delete SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConnectorSmtpConnectionWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConnectorSyncSettingsAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConnectorSyncSettingsWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get all inbox connector events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageConnectorEvents</returns>
        System.Threading.Tasks.Task<PageConnectorEvents> GetAllConnectorEventsAsync(Guid? id = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all inbox connector events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageConnectorEvents)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageConnectorEvents>> GetAllConnectorEventsWithHttpInfoAsync(Guid? id = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorDto</returns>
        System.Threading.Tasks.Task<ConnectorDto> GetConnectorAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorDto>> GetConnectorWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get connector by email address
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorDto</returns>
        System.Threading.Tasks.Task<OptionalConnectorDto> GetConnectorByEmailAddressAsync(string emailAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connector by email address
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptionalConnectorDto>> GetConnectorByEmailAddressWithHttpInfoAsync(string emailAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get connector by inbox ID
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by inbox ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorDto</returns>
        System.Threading.Tasks.Task<OptionalConnectorDto> GetConnectorByInboxIdAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connector by inbox ID
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by inbox ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptionalConnectorDto>> GetConnectorByInboxIdWithHttpInfoAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get connector by name
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by name
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorDto</returns>
        System.Threading.Tasks.Task<OptionalConnectorDto> GetConnectorByNameAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get connector by name
        /// </summary>
        /// <remarks>
        /// Find an inbox connector by name
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptionalConnectorDto>> GetConnectorByNameWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get an inbox connector event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorEventDto</returns>
        System.Threading.Tasks.Task<ConnectorEventDto> GetConnectorEventAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorEventDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorEventDto>> GetConnectorEventWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get an inbox connector events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageConnectorEvents</returns>
        System.Threading.Tasks.Task<PageConnectorEvents> GetConnectorEventsAsync(Guid id, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageConnectorEvents)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageConnectorEvents>> GetConnectorEventsWithHttpInfoAsync(Guid id, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Get IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorImapConnectionDto</returns>
        System.Threading.Tasks.Task<OptionalConnectorImapConnectionDto> GetConnectorImapConnectionAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Get IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorImapConnectionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptionalConnectorImapConnectionDto>> GetConnectorImapConnectionWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers
        /// </summary>
        /// <remarks>
        /// Get common mail provider SMTP and IMAP connection settings
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorProviderSettingsDto</returns>
        System.Threading.Tasks.Task<ConnectorProviderSettingsDto> GetConnectorProviderSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers
        /// </summary>
        /// <remarks>
        /// Get common mail provider SMTP and IMAP connection settings
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorProviderSettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorProviderSettingsDto>> GetConnectorProviderSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Get SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorSmtpConnectionDto</returns>
        System.Threading.Tasks.Task<OptionalConnectorSmtpConnectionDto> GetConnectorSmtpConnectionAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Get SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorSmtpConnectionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptionalConnectorSmtpConnectionDto>> GetConnectorSmtpConnectionWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Get sync settings for connection with external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorSyncSettingsDto</returns>
        System.Threading.Tasks.Task<OptionalConnectorSyncSettingsDto> GetConnectorSyncSettingsAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox connector sync settings
        /// </summary>
        /// <remarks>
        /// Get sync settings for connection with external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorSyncSettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptionalConnectorSyncSettingsDto>> GetConnectorSyncSettingsWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get inbox connectors
        /// </summary>
        /// <remarks>
        /// List inbox connectors that sync external emails to MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageConnector</returns>
        System.Threading.Tasks.Task<PageConnector> GetConnectorsAsync(int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get inbox connectors
        /// </summary>
        /// <remarks>
        /// List inbox connectors that sync external emails to MailSlurp inboxes
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageConnector)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageConnector>> GetConnectorsWithHttpInfoAsync(int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Send from an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentEmailDto</returns>
        System.Threading.Tasks.Task<SentEmailDto> SendEmailFromConnectorAsync(Guid id, SendEmailOptions sendEmailOptions, bool? useFallback = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send from an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentEmailDto>> SendEmailFromConnectorWithHttpInfoAsync(Guid id, SendEmailOptions sendEmailOptions, bool? useFallback = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Sync an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSyncRequestResult</returns>
        System.Threading.Tasks.Task<ConnectorSyncRequestResult> SyncConnectorAsync(Guid id, DateTime? since = default, string folder = default, bool? logging = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sync an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSyncRequestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorSyncRequestResult>> SyncConnectorWithHttpInfoAsync(Guid id, DateTime? since = default, string folder = default, bool? logging = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Test an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorImapConnectionTestResult</returns>
        System.Threading.Tasks.Task<ConnectorImapConnectionTestResult> TestConnectorImapConnectionAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorImapConnectionTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorImapConnectionTestResult>> TestConnectorImapConnectionWithHttpInfoAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Test an inbox connector IMAP connection options
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection options for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorImapConnectionTestResult</returns>
        System.Threading.Tasks.Task<ConnectorImapConnectionTestResult> TestConnectorImapConnectionOptionsAsync(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector IMAP connection options
        /// </summary>
        /// <remarks>
        /// Test the IMAP connection options for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorImapConnectionTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorImapConnectionTestResult>> TestConnectorImapConnectionOptionsWithHttpInfoAsync(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Test an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSmtpConnectionTestResult</returns>
        System.Threading.Tasks.Task<ConnectorSmtpConnectionTestResult> TestConnectorSmtpConnectionAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSmtpConnectionTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorSmtpConnectionTestResult>> TestConnectorSmtpConnectionWithHttpInfoAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Test an inbox connector SMTP connection options
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection options for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSmtpConnectionTestResult</returns>
        System.Threading.Tasks.Task<ConnectorSmtpConnectionTestResult> TestConnectorSmtpConnectionOptionsAsync(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test an inbox connector SMTP connection options
        /// </summary>
        /// <remarks>
        /// Test the SMTP connection options for a connector
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSmtpConnectionTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorSmtpConnectionTestResult>> TestConnectorSmtpConnectionOptionsWithHttpInfoAsync(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorDto</returns>
        System.Threading.Tasks.Task<ConnectorDto> UpdateConnectorAsync(Guid id, CreateConnectorOptions createConnectorOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox connector
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorDto>> UpdateConnectorWithHttpInfoAsync(Guid id, CreateConnectorOptions createConnectorOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Update IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorImapConnectionDto</returns>
        System.Threading.Tasks.Task<ConnectorImapConnectionDto> UpdateConnectorImapConnectionAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox connector IMAP connection
        /// </summary>
        /// <remarks>
        /// Update IMAP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorImapConnectionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorImapConnectionDto>> UpdateConnectorImapConnectionWithHttpInfoAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Update SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSmtpConnectionDto</returns>
        System.Threading.Tasks.Task<ConnectorSmtpConnectionDto> UpdateConnectorSmtpConnectionAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox connector SMTP connection
        /// </summary>
        /// <remarks>
        /// Update SMTP connection for external inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSmtpConnectionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorSmtpConnectionDto>> UpdateConnectorSmtpConnectionWithHttpInfoAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectorControllerApi : IConnectorControllerApiSync, IConnectorControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConnectorControllerApi : IConnectorControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectorControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectorControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConnectorControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConnectorControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an inbox connector Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorDto</returns>
        public ConnectorDto CreateConnector(CreateConnectorOptions createConnectorOptions, Guid? inboxId = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorDto> localVarResponse = CreateConnectorWithHttpInfo(createConnectorOptions, inboxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox connector Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorDto> CreateConnectorWithHttpInfo(CreateConnectorOptions createConnectorOptions, Guid? inboxId = default, int operationIndex = 0)
        {
            // verify the required parameter 'createConnectorOptions' is set
            if (createConnectorOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorOptions' when calling ConnectorControllerApi->CreateConnector");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = createConnectorOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.CreateConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectorDto>("/connectors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorDto</returns>
        public async System.Threading.Tasks.Task<ConnectorDto> CreateConnectorAsync(CreateConnectorOptions createConnectorOptions, Guid? inboxId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorDto> localVarResponse = await CreateConnectorWithHttpInfoAsync(createConnectorOptions, inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox connector Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorDto>> CreateConnectorWithHttpInfoAsync(CreateConnectorOptions createConnectorOptions, Guid? inboxId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createConnectorOptions' is set
            if (createConnectorOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorOptions' when calling ConnectorControllerApi->CreateConnector");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = createConnectorOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.CreateConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectorDto>("/connectors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector IMAP connection Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorImapConnectionDto</returns>
        public ConnectorImapConnectionDto CreateConnectorImapConnection(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorImapConnectionDto> localVarResponse = CreateConnectorImapConnectionWithHttpInfo(id, createConnectorImapConnectionOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox connector IMAP connection Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorImapConnectionDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorImapConnectionDto> CreateConnectorImapConnectionWithHttpInfo(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createConnectorImapConnectionOptions' is set
            if (createConnectorImapConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorImapConnectionOptions' when calling ConnectorControllerApi->CreateConnectorImapConnection");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorImapConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.CreateConnectorImapConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectorImapConnectionDto>("/connectors/{id}/imap", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnectorImapConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector IMAP connection Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorImapConnectionDto</returns>
        public async System.Threading.Tasks.Task<ConnectorImapConnectionDto> CreateConnectorImapConnectionAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorImapConnectionDto> localVarResponse = await CreateConnectorImapConnectionWithHttpInfoAsync(id, createConnectorImapConnectionOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox connector IMAP connection Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorImapConnectionDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorImapConnectionDto>> CreateConnectorImapConnectionWithHttpInfoAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createConnectorImapConnectionOptions' is set
            if (createConnectorImapConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorImapConnectionOptions' when calling ConnectorControllerApi->CreateConnectorImapConnection");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorImapConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.CreateConnectorImapConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectorImapConnectionDto>("/connectors/{id}/imap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnectorImapConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector SMTP connection Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSmtpConnectionDto</returns>
        public ConnectorSmtpConnectionDto CreateConnectorSmtpConnection(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorSmtpConnectionDto> localVarResponse = CreateConnectorSmtpConnectionWithHttpInfo(id, createConnectorSmtpConnectionOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox connector SMTP connection Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSmtpConnectionDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorSmtpConnectionDto> CreateConnectorSmtpConnectionWithHttpInfo(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createConnectorSmtpConnectionOptions' is set
            if (createConnectorSmtpConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorSmtpConnectionOptions' when calling ConnectorControllerApi->CreateConnectorSmtpConnection");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorSmtpConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.CreateConnectorSmtpConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectorSmtpConnectionDto>("/connectors/{id}/smtp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnectorSmtpConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector SMTP connection Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSmtpConnectionDto</returns>
        public async System.Threading.Tasks.Task<ConnectorSmtpConnectionDto> CreateConnectorSmtpConnectionAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorSmtpConnectionDto> localVarResponse = await CreateConnectorSmtpConnectionWithHttpInfoAsync(id, createConnectorSmtpConnectionOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox connector SMTP connection Allows sending via connector and email is routed to connected inbox and sent via SMTP
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSmtpConnectionDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorSmtpConnectionDto>> CreateConnectorSmtpConnectionWithHttpInfoAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createConnectorSmtpConnectionOptions' is set
            if (createConnectorSmtpConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorSmtpConnectionOptions' when calling ConnectorControllerApi->CreateConnectorSmtpConnection");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorSmtpConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.CreateConnectorSmtpConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectorSmtpConnectionDto>("/connectors/{id}/smtp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnectorSmtpConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSyncSettingsDto</returns>
        public ConnectorSyncSettingsDto CreateConnectorSyncSettings(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorSyncSettingsDto> localVarResponse = CreateConnectorSyncSettingsWithHttpInfo(id, createConnectorSyncSettingsOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSyncSettingsDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorSyncSettingsDto> CreateConnectorSyncSettingsWithHttpInfo(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createConnectorSyncSettingsOptions' is set
            if (createConnectorSyncSettingsOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorSyncSettingsOptions' when calling ConnectorControllerApi->CreateConnectorSyncSettings");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorSyncSettingsOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.CreateConnectorSyncSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectorSyncSettingsDto>("/connectors/{id}/sync-settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnectorSyncSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSyncSettingsDto</returns>
        public async System.Threading.Tasks.Task<ConnectorSyncSettingsDto> CreateConnectorSyncSettingsAsync(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorSyncSettingsDto> localVarResponse = await CreateConnectorSyncSettingsWithHttpInfoAsync(id, createConnectorSyncSettingsOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSyncSettingsOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSyncSettingsDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorSyncSettingsDto>> CreateConnectorSyncSettingsWithHttpInfoAsync(Guid id, CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createConnectorSyncSettingsOptions' is set
            if (createConnectorSyncSettingsOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorSyncSettingsOptions' when calling ConnectorControllerApi->CreateConnectorSyncSettings");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorSyncSettingsOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.CreateConnectorSyncSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectorSyncSettingsDto>("/connectors/{id}/sync-settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnectorSyncSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector with options Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorDto</returns>
        public ConnectorDto CreateConnectorWithOptions(CreateConnectorWithOptions createConnectorWithOptions, Guid? inboxId = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorDto> localVarResponse = CreateConnectorWithOptionsWithHttpInfo(createConnectorWithOptions, inboxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox connector with options Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorDto> CreateConnectorWithOptionsWithHttpInfo(CreateConnectorWithOptions createConnectorWithOptions, Guid? inboxId = default, int operationIndex = 0)
        {
            // verify the required parameter 'createConnectorWithOptions' is set
            if (createConnectorWithOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorWithOptions' when calling ConnectorControllerApi->CreateConnectorWithOptions");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = createConnectorWithOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.CreateConnectorWithOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectorDto>("/connectors/withOptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnectorWithOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector with options Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorDto</returns>
        public async System.Threading.Tasks.Task<ConnectorDto> CreateConnectorWithOptionsAsync(CreateConnectorWithOptions createConnectorWithOptions, Guid? inboxId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorDto> localVarResponse = await CreateConnectorWithOptionsWithHttpInfoAsync(createConnectorWithOptions, inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an inbox connector with options Sync emails between external mailboxes and MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorWithOptions"></param>
        /// <param name="inboxId">Optional inbox ID to associate with the connector (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorDto>> CreateConnectorWithOptionsWithHttpInfoAsync(CreateConnectorWithOptions createConnectorWithOptions, Guid? inboxId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createConnectorWithOptions' is set
            if (createConnectorWithOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorWithOptions' when calling ConnectorControllerApi->CreateConnectorWithOptions");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = createConnectorWithOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.CreateConnectorWithOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectorDto>("/connectors/withOptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnectorWithOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all inbox connectors 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAllConnector(int operationIndex = 0)
        {
            DeleteAllConnectorWithHttpInfo();
        }

        /// <summary>
        /// Delete all inbox connectors 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteAllConnectorWithHttpInfo(int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConnectorControllerApi.DeleteAllConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/connectors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all inbox connectors 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllConnectorAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteAllConnectorWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all inbox connectors 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteAllConnectorWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConnectorControllerApi.DeleteAllConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/connectors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteConnector(Guid id, int operationIndex = 0)
        {
            DeleteConnectorWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteConnectorWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.DeleteConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/connectors/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConnectorAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteConnectorWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteConnectorWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.DeleteConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/connectors/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox connector IMAP connection Delete IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteConnectorImapConnection(Guid id, int operationIndex = 0)
        {
            DeleteConnectorImapConnectionWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an inbox connector IMAP connection Delete IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteConnectorImapConnectionWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.DeleteConnectorImapConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/connectors/{id}/imap", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConnectorImapConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox connector IMAP connection Delete IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConnectorImapConnectionAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteConnectorImapConnectionWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an inbox connector IMAP connection Delete IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteConnectorImapConnectionWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.DeleteConnectorImapConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/connectors/{id}/imap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConnectorImapConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox connector SMTP connection Delete SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteConnectorSmtpConnection(Guid id, int operationIndex = 0)
        {
            DeleteConnectorSmtpConnectionWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an inbox connector SMTP connection Delete SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteConnectorSmtpConnectionWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.DeleteConnectorSmtpConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/connectors/{id}/smtp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConnectorSmtpConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an inbox connector SMTP connection Delete SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConnectorSmtpConnectionAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteConnectorSmtpConnectionWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an inbox connector SMTP connection Delete SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteConnectorSmtpConnectionWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.DeleteConnectorSmtpConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/connectors/{id}/smtp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConnectorSmtpConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteConnectorSyncSettings(Guid id, int operationIndex = 0)
        {
            DeleteConnectorSyncSettingsWithHttpInfo(id);
        }

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteConnectorSyncSettingsWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.DeleteConnectorSyncSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/connectors/{id}/sync-settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConnectorSyncSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConnectorSyncSettingsAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteConnectorSyncSettingsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create an inbox connector sync settings Configure automatic pull or emails from external inboxes using an interval or schedule
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteConnectorSyncSettingsWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.DeleteConnectorSyncSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/connectors/{id}/sync-settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConnectorSyncSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all inbox connector events 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageConnectorEvents</returns>
        public PageConnectorEvents GetAllConnectorEvents(Guid? id = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageConnectorEvents> localVarResponse = GetAllConnectorEventsWithHttpInfo(id, page, size, sort, since, before, eventType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all inbox connector events 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageConnectorEvents</returns>
        public mailslurp.Client.ApiResponse<PageConnectorEvents> GetAllConnectorEventsWithHttpInfo(Guid? id = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetAllConnectorEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageConnectorEvents>("/connectors/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConnectorEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all inbox connector events 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageConnectorEvents</returns>
        public async System.Threading.Tasks.Task<PageConnectorEvents> GetAllConnectorEventsAsync(Guid? id = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PageConnectorEvents> localVarResponse = await GetAllConnectorEventsWithHttpInfoAsync(id, page, size, sort, since, before, eventType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all inbox connector events 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Optional connector ID (optional)</param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageConnectorEvents)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageConnectorEvents>> GetAllConnectorEventsWithHttpInfoAsync(Guid? id = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetAllConnectorEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageConnectorEvents>("/connectors/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllConnectorEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorDto</returns>
        public ConnectorDto GetConnector(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorDto> localVarResponse = GetConnectorWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorDto> GetConnectorWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConnectorDto>("/connectors/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorDto</returns>
        public async System.Threading.Tasks.Task<ConnectorDto> GetConnectorAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorDto> localVarResponse = await GetConnectorWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorDto>> GetConnectorWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConnectorDto>("/connectors/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get connector by email address Find an inbox connector by email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorDto</returns>
        public OptionalConnectorDto GetConnectorByEmailAddress(string emailAddress, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorDto> localVarResponse = GetConnectorByEmailAddressWithHttpInfo(emailAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get connector by email address Find an inbox connector by email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorDto</returns>
        public mailslurp.Client.ApiResponse<OptionalConnectorDto> GetConnectorByEmailAddressWithHttpInfo(string emailAddress, int operationIndex = 0)
        {
            // verify the required parameter 'emailAddress' is set
            if (emailAddress == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailAddress' when calling ConnectorControllerApi->GetConnectorByEmailAddress");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorByEmailAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionalConnectorDto>("/connectors/by-email-address", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorByEmailAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get connector by email address Find an inbox connector by email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorDto</returns>
        public async System.Threading.Tasks.Task<OptionalConnectorDto> GetConnectorByEmailAddressAsync(string emailAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorDto> localVarResponse = await GetConnectorByEmailAddressWithHttpInfoAsync(emailAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get connector by email address Find an inbox connector by email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Email address to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<OptionalConnectorDto>> GetConnectorByEmailAddressWithHttpInfoAsync(string emailAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'emailAddress' is set
            if (emailAddress == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailAddress' when calling ConnectorControllerApi->GetConnectorByEmailAddress");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorByEmailAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionalConnectorDto>("/connectors/by-email-address", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorByEmailAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get connector by inbox ID Find an inbox connector by inbox ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorDto</returns>
        public OptionalConnectorDto GetConnectorByInboxId(Guid inboxId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorDto> localVarResponse = GetConnectorByInboxIdWithHttpInfo(inboxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get connector by inbox ID Find an inbox connector by inbox ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorDto</returns>
        public mailslurp.Client.ApiResponse<OptionalConnectorDto> GetConnectorByInboxIdWithHttpInfo(Guid inboxId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorByInboxId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionalConnectorDto>("/connectors/by-inbox-id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorByInboxId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get connector by inbox ID Find an inbox connector by inbox ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorDto</returns>
        public async System.Threading.Tasks.Task<OptionalConnectorDto> GetConnectorByInboxIdAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorDto> localVarResponse = await GetConnectorByInboxIdWithHttpInfoAsync(inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get connector by inbox ID Find an inbox connector by inbox ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Inbox ID to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<OptionalConnectorDto>> GetConnectorByInboxIdWithHttpInfoAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorByInboxId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionalConnectorDto>("/connectors/by-inbox-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorByInboxId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get connector by name Find an inbox connector by name
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorDto</returns>
        public OptionalConnectorDto GetConnectorByName(string name, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorDto> localVarResponse = GetConnectorByNameWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get connector by name Find an inbox connector by name
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorDto</returns>
        public mailslurp.Client.ApiResponse<OptionalConnectorDto> GetConnectorByNameWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'name' when calling ConnectorControllerApi->GetConnectorByName");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorByName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionalConnectorDto>("/connectors/by-name", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get connector by name Find an inbox connector by name
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorDto</returns>
        public async System.Threading.Tasks.Task<OptionalConnectorDto> GetConnectorByNameAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorDto> localVarResponse = await GetConnectorByNameWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get connector by name Find an inbox connector by name
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name to search for connector by</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<OptionalConnectorDto>> GetConnectorByNameWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'name' when calling ConnectorControllerApi->GetConnectorByName");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorByName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionalConnectorDto>("/connectors/by-name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorEventDto</returns>
        public ConnectorEventDto GetConnectorEvent(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorEventDto> localVarResponse = GetConnectorEventWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorEventDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorEventDto> GetConnectorEventWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConnectorEventDto>("/connectors/events/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorEventDto</returns>
        public async System.Threading.Tasks.Task<ConnectorEventDto> GetConnectorEventAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorEventDto> localVarResponse = await GetConnectorEventWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorEventDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorEventDto>> GetConnectorEventWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConnectorEventDto>("/connectors/events/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector events 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageConnectorEvents</returns>
        public PageConnectorEvents GetConnectorEvents(Guid id, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageConnectorEvents> localVarResponse = GetConnectorEventsWithHttpInfo(id, page, size, sort, since, before, eventType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector events 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageConnectorEvents</returns>
        public mailslurp.Client.ApiResponse<PageConnectorEvents> GetConnectorEventsWithHttpInfo(Guid id, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageConnectorEvents>("/connectors/{id}/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector events 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageConnectorEvents</returns>
        public async System.Threading.Tasks.Task<PageConnectorEvents> GetConnectorEventsAsync(Guid id, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PageConnectorEvents> localVarResponse = await GetConnectorEventsWithHttpInfoAsync(id, page, size, sort, since, before, eventType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector events 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Filter by event type (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageConnectorEvents)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageConnectorEvents>> GetConnectorEventsWithHttpInfoAsync(Guid id, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string eventType = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageConnectorEvents>("/connectors/{id}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector IMAP connection Get IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorImapConnectionDto</returns>
        public OptionalConnectorImapConnectionDto GetConnectorImapConnection(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorImapConnectionDto> localVarResponse = GetConnectorImapConnectionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector IMAP connection Get IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorImapConnectionDto</returns>
        public mailslurp.Client.ApiResponse<OptionalConnectorImapConnectionDto> GetConnectorImapConnectionWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorImapConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionalConnectorImapConnectionDto>("/connectors/{id}/imap", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorImapConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector IMAP connection Get IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorImapConnectionDto</returns>
        public async System.Threading.Tasks.Task<OptionalConnectorImapConnectionDto> GetConnectorImapConnectionAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorImapConnectionDto> localVarResponse = await GetConnectorImapConnectionWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector IMAP connection Get IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorImapConnectionDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<OptionalConnectorImapConnectionDto>> GetConnectorImapConnectionWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorImapConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionalConnectorImapConnectionDto>("/connectors/{id}/imap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorImapConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers Get common mail provider SMTP and IMAP connection settings
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorProviderSettingsDto</returns>
        public ConnectorProviderSettingsDto GetConnectorProviderSettings(int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorProviderSettingsDto> localVarResponse = GetConnectorProviderSettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers Get common mail provider SMTP and IMAP connection settings
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorProviderSettingsDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorProviderSettingsDto> GetConnectorProviderSettingsWithHttpInfo(int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorProviderSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConnectorProviderSettingsDto>("/connectors/provider-settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorProviderSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers Get common mail provider SMTP and IMAP connection settings
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorProviderSettingsDto</returns>
        public async System.Threading.Tasks.Task<ConnectorProviderSettingsDto> GetConnectorProviderSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorProviderSettingsDto> localVarResponse = await GetConnectorProviderSettingsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get SMTP and IMAP connection settings for common mail providers Get common mail provider SMTP and IMAP connection settings
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorProviderSettingsDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorProviderSettingsDto>> GetConnectorProviderSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorProviderSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConnectorProviderSettingsDto>("/connectors/provider-settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorProviderSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector SMTP connection Get SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorSmtpConnectionDto</returns>
        public OptionalConnectorSmtpConnectionDto GetConnectorSmtpConnection(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorSmtpConnectionDto> localVarResponse = GetConnectorSmtpConnectionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector SMTP connection Get SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorSmtpConnectionDto</returns>
        public mailslurp.Client.ApiResponse<OptionalConnectorSmtpConnectionDto> GetConnectorSmtpConnectionWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorSmtpConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionalConnectorSmtpConnectionDto>("/connectors/{id}/smtp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorSmtpConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector SMTP connection Get SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorSmtpConnectionDto</returns>
        public async System.Threading.Tasks.Task<OptionalConnectorSmtpConnectionDto> GetConnectorSmtpConnectionAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorSmtpConnectionDto> localVarResponse = await GetConnectorSmtpConnectionWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector SMTP connection Get SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorSmtpConnectionDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<OptionalConnectorSmtpConnectionDto>> GetConnectorSmtpConnectionWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorSmtpConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionalConnectorSmtpConnectionDto>("/connectors/{id}/smtp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorSmtpConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector sync settings Get sync settings for connection with external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionalConnectorSyncSettingsDto</returns>
        public OptionalConnectorSyncSettingsDto GetConnectorSyncSettings(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorSyncSettingsDto> localVarResponse = GetConnectorSyncSettingsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector sync settings Get sync settings for connection with external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionalConnectorSyncSettingsDto</returns>
        public mailslurp.Client.ApiResponse<OptionalConnectorSyncSettingsDto> GetConnectorSyncSettingsWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorSyncSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OptionalConnectorSyncSettingsDto>("/connectors/{id}/sync-settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorSyncSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an inbox connector sync settings Get sync settings for connection with external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionalConnectorSyncSettingsDto</returns>
        public async System.Threading.Tasks.Task<OptionalConnectorSyncSettingsDto> GetConnectorSyncSettingsAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<OptionalConnectorSyncSettingsDto> localVarResponse = await GetConnectorSyncSettingsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inbox connector sync settings Get sync settings for connection with external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionalConnectorSyncSettingsDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<OptionalConnectorSyncSettingsDto>> GetConnectorSyncSettingsWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectorSyncSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OptionalConnectorSyncSettingsDto>("/connectors/{id}/sync-settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectorSyncSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get inbox connectors List inbox connectors that sync external emails to MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageConnector</returns>
        public PageConnector GetConnectors(int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageConnector> localVarResponse = GetConnectorsWithHttpInfo(page, size, sort, since, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get inbox connectors List inbox connectors that sync external emails to MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageConnector</returns>
        public mailslurp.Client.ApiResponse<PageConnector> GetConnectorsWithHttpInfo(int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageConnector>("/connectors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get inbox connectors List inbox connectors that sync external emails to MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageConnector</returns>
        public async System.Threading.Tasks.Task<PageConnector> GetConnectorsAsync(int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PageConnector> localVarResponse = await GetConnectorsWithHttpInfoAsync(page, size, sort, since, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get inbox connectors List inbox connectors that sync external emails to MailSlurp inboxes
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in connector list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageConnector)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageConnector>> GetConnectorsWithHttpInfoAsync(int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "ConnectorControllerApi.GetConnectors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageConnector>("/connectors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send from an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentEmailDto</returns>
        public SentEmailDto SendEmailFromConnector(Guid id, SendEmailOptions sendEmailOptions, bool? useFallback = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = SendEmailFromConnectorWithHttpInfo(id, sendEmailOptions, useFallback);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send from an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        public mailslurp.Client.ApiResponse<SentEmailDto> SendEmailFromConnectorWithHttpInfo(Guid id, SendEmailOptions sendEmailOptions, bool? useFallback = default, int operationIndex = 0)
        {
            // verify the required parameter 'sendEmailOptions' is set
            if (sendEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'sendEmailOptions' when calling ConnectorControllerApi->SendEmailFromConnector");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (useFallback != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useFallback", useFallback));
            }
            localVarRequestOptions.Data = sendEmailOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.SendEmailFromConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SentEmailDto>("/connectors/{id}/send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailFromConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send from an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentEmailDto</returns>
        public async System.Threading.Tasks.Task<SentEmailDto> SendEmailFromConnectorAsync(Guid id, SendEmailOptions sendEmailOptions, bool? useFallback = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = await SendEmailFromConnectorWithHttpInfoAsync(id, sendEmailOptions, useFallback, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send from an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="useFallback"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<SentEmailDto>> SendEmailFromConnectorWithHttpInfoAsync(Guid id, SendEmailOptions sendEmailOptions, bool? useFallback = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'sendEmailOptions' is set
            if (sendEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'sendEmailOptions' when calling ConnectorControllerApi->SendEmailFromConnector");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (useFallback != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useFallback", useFallback));
            }
            localVarRequestOptions.Data = sendEmailOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.SendEmailFromConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SentEmailDto>("/connectors/{id}/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailFromConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSyncRequestResult</returns>
        public ConnectorSyncRequestResult SyncConnector(Guid id, DateTime? since = default, string folder = default, bool? logging = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorSyncRequestResult> localVarResponse = SyncConnectorWithHttpInfo(id, since, folder, logging);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSyncRequestResult</returns>
        public mailslurp.Client.ApiResponse<ConnectorSyncRequestResult> SyncConnectorWithHttpInfo(Guid id, DateTime? since = default, string folder = default, bool? logging = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (folder != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "folder", folder));
            }
            if (logging != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "logging", logging));
            }

            localVarRequestOptions.Operation = "ConnectorControllerApi.SyncConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectorSyncRequestResult>("/connectors/{id}/sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSyncRequestResult</returns>
        public async System.Threading.Tasks.Task<ConnectorSyncRequestResult> SyncConnectorAsync(Guid id, DateTime? since = default, string folder = default, bool? logging = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorSyncRequestResult> localVarResponse = await SyncConnectorWithHttpInfoAsync(id, since, folder, logging, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="since">Date to request emails since (optional)</param>
        /// <param name="folder">Which folder to sync emails with (optional)</param>
        /// <param name="logging">Enable or disable logging for the sync operation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSyncRequestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorSyncRequestResult>> SyncConnectorWithHttpInfoAsync(Guid id, DateTime? since = default, string folder = default, bool? logging = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (folder != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "folder", folder));
            }
            if (logging != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "logging", logging));
            }

            localVarRequestOptions.Operation = "ConnectorControllerApi.SyncConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectorSyncRequestResult>("/connectors/{id}/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox connector IMAP connection Test the IMAP connection for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorImapConnectionTestResult</returns>
        public ConnectorImapConnectionTestResult TestConnectorImapConnection(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorImapConnectionTestResult> localVarResponse = TestConnectorImapConnectionWithHttpInfo(id, createConnectorImapConnectionOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox connector IMAP connection Test the IMAP connection for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorImapConnectionTestResult</returns>
        public mailslurp.Client.ApiResponse<ConnectorImapConnectionTestResult> TestConnectorImapConnectionWithHttpInfo(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorImapConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.TestConnectorImapConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectorImapConnectionTestResult>("/connectors/{id}/imap/test", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnectorImapConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox connector IMAP connection Test the IMAP connection for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorImapConnectionTestResult</returns>
        public async System.Threading.Tasks.Task<ConnectorImapConnectionTestResult> TestConnectorImapConnectionAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorImapConnectionTestResult> localVarResponse = await TestConnectorImapConnectionWithHttpInfoAsync(id, createConnectorImapConnectionOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox connector IMAP connection Test the IMAP connection for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorImapConnectionTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorImapConnectionTestResult>> TestConnectorImapConnectionWithHttpInfoAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorImapConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.TestConnectorImapConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectorImapConnectionTestResult>("/connectors/{id}/imap/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnectorImapConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox connector IMAP connection options Test the IMAP connection options for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorImapConnectionTestResult</returns>
        public ConnectorImapConnectionTestResult TestConnectorImapConnectionOptions(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorImapConnectionTestResult> localVarResponse = TestConnectorImapConnectionOptionsWithHttpInfo(createConnectorImapConnectionOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox connector IMAP connection options Test the IMAP connection options for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorImapConnectionTestResult</returns>
        public mailslurp.Client.ApiResponse<ConnectorImapConnectionTestResult> TestConnectorImapConnectionOptionsWithHttpInfo(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createConnectorImapConnectionOptions' is set
            if (createConnectorImapConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorImapConnectionOptions' when calling ConnectorControllerApi->TestConnectorImapConnectionOptions");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createConnectorImapConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.TestConnectorImapConnectionOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectorImapConnectionTestResult>("/connectors/connections/imap/test", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnectorImapConnectionOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox connector IMAP connection options Test the IMAP connection options for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorImapConnectionTestResult</returns>
        public async System.Threading.Tasks.Task<ConnectorImapConnectionTestResult> TestConnectorImapConnectionOptionsAsync(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorImapConnectionTestResult> localVarResponse = await TestConnectorImapConnectionOptionsWithHttpInfoAsync(createConnectorImapConnectionOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox connector IMAP connection options Test the IMAP connection options for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorImapConnectionTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorImapConnectionTestResult>> TestConnectorImapConnectionOptionsWithHttpInfoAsync(CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createConnectorImapConnectionOptions' is set
            if (createConnectorImapConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorImapConnectionOptions' when calling ConnectorControllerApi->TestConnectorImapConnectionOptions");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createConnectorImapConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.TestConnectorImapConnectionOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectorImapConnectionTestResult>("/connectors/connections/imap/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnectorImapConnectionOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox connector SMTP connection Test the SMTP connection for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSmtpConnectionTestResult</returns>
        public ConnectorSmtpConnectionTestResult TestConnectorSmtpConnection(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorSmtpConnectionTestResult> localVarResponse = TestConnectorSmtpConnectionWithHttpInfo(id, createConnectorSmtpConnectionOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox connector SMTP connection Test the SMTP connection for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSmtpConnectionTestResult</returns>
        public mailslurp.Client.ApiResponse<ConnectorSmtpConnectionTestResult> TestConnectorSmtpConnectionWithHttpInfo(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorSmtpConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.TestConnectorSmtpConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectorSmtpConnectionTestResult>("/connectors/{id}/smtp/test", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnectorSmtpConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox connector SMTP connection Test the SMTP connection for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSmtpConnectionTestResult</returns>
        public async System.Threading.Tasks.Task<ConnectorSmtpConnectionTestResult> TestConnectorSmtpConnectionAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorSmtpConnectionTestResult> localVarResponse = await TestConnectorSmtpConnectionWithHttpInfoAsync(id, createConnectorSmtpConnectionOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox connector SMTP connection Test the SMTP connection for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSmtpConnectionTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorSmtpConnectionTestResult>> TestConnectorSmtpConnectionWithHttpInfoAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorSmtpConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.TestConnectorSmtpConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectorSmtpConnectionTestResult>("/connectors/{id}/smtp/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnectorSmtpConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox connector SMTP connection options Test the SMTP connection options for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSmtpConnectionTestResult</returns>
        public ConnectorSmtpConnectionTestResult TestConnectorSmtpConnectionOptions(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorSmtpConnectionTestResult> localVarResponse = TestConnectorSmtpConnectionOptionsWithHttpInfo(createConnectorSmtpConnectionOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox connector SMTP connection options Test the SMTP connection options for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSmtpConnectionTestResult</returns>
        public mailslurp.Client.ApiResponse<ConnectorSmtpConnectionTestResult> TestConnectorSmtpConnectionOptionsWithHttpInfo(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createConnectorSmtpConnectionOptions' is set
            if (createConnectorSmtpConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorSmtpConnectionOptions' when calling ConnectorControllerApi->TestConnectorSmtpConnectionOptions");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createConnectorSmtpConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.TestConnectorSmtpConnectionOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectorSmtpConnectionTestResult>("/connectors/connections/smtp/test", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnectorSmtpConnectionOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an inbox connector SMTP connection options Test the SMTP connection options for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSmtpConnectionTestResult</returns>
        public async System.Threading.Tasks.Task<ConnectorSmtpConnectionTestResult> TestConnectorSmtpConnectionOptionsAsync(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorSmtpConnectionTestResult> localVarResponse = await TestConnectorSmtpConnectionOptionsWithHttpInfoAsync(createConnectorSmtpConnectionOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Test an inbox connector SMTP connection options Test the SMTP connection options for a connector
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSmtpConnectionTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorSmtpConnectionTestResult>> TestConnectorSmtpConnectionOptionsWithHttpInfoAsync(CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createConnectorSmtpConnectionOptions' is set
            if (createConnectorSmtpConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorSmtpConnectionOptions' when calling ConnectorControllerApi->TestConnectorSmtpConnectionOptions");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createConnectorSmtpConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.TestConnectorSmtpConnectionOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectorSmtpConnectionTestResult>("/connectors/connections/smtp/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestConnectorSmtpConnectionOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorDto</returns>
        public ConnectorDto UpdateConnector(Guid id, CreateConnectorOptions createConnectorOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorDto> localVarResponse = UpdateConnectorWithHttpInfo(id, createConnectorOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorDto> UpdateConnectorWithHttpInfo(Guid id, CreateConnectorOptions createConnectorOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createConnectorOptions' is set
            if (createConnectorOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorOptions' when calling ConnectorControllerApi->UpdateConnector");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.UpdateConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ConnectorDto>("/connectors/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorDto</returns>
        public async System.Threading.Tasks.Task<ConnectorDto> UpdateConnectorAsync(Guid id, CreateConnectorOptions createConnectorOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorDto> localVarResponse = await UpdateConnectorWithHttpInfoAsync(id, createConnectorOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an inbox connector 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorDto>> UpdateConnectorWithHttpInfoAsync(Guid id, CreateConnectorOptions createConnectorOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createConnectorOptions' is set
            if (createConnectorOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorOptions' when calling ConnectorControllerApi->UpdateConnector");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.UpdateConnector";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ConnectorDto>("/connectors/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConnector", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an inbox connector IMAP connection Update IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorImapConnectionDto</returns>
        public ConnectorImapConnectionDto UpdateConnectorImapConnection(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorImapConnectionDto> localVarResponse = UpdateConnectorImapConnectionWithHttpInfo(id, createConnectorImapConnectionOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an inbox connector IMAP connection Update IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorImapConnectionDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorImapConnectionDto> UpdateConnectorImapConnectionWithHttpInfo(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createConnectorImapConnectionOptions' is set
            if (createConnectorImapConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorImapConnectionOptions' when calling ConnectorControllerApi->UpdateConnectorImapConnection");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorImapConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.UpdateConnectorImapConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ConnectorImapConnectionDto>("/connectors/{id}/imap", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConnectorImapConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an inbox connector IMAP connection Update IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorImapConnectionDto</returns>
        public async System.Threading.Tasks.Task<ConnectorImapConnectionDto> UpdateConnectorImapConnectionAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorImapConnectionDto> localVarResponse = await UpdateConnectorImapConnectionWithHttpInfoAsync(id, createConnectorImapConnectionOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an inbox connector IMAP connection Update IMAP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorImapConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorImapConnectionDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorImapConnectionDto>> UpdateConnectorImapConnectionWithHttpInfoAsync(Guid id, CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createConnectorImapConnectionOptions' is set
            if (createConnectorImapConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorImapConnectionOptions' when calling ConnectorControllerApi->UpdateConnectorImapConnection");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorImapConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.UpdateConnectorImapConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ConnectorImapConnectionDto>("/connectors/{id}/imap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConnectorImapConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an inbox connector SMTP connection Update SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectorSmtpConnectionDto</returns>
        public ConnectorSmtpConnectionDto UpdateConnectorSmtpConnection(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConnectorSmtpConnectionDto> localVarResponse = UpdateConnectorSmtpConnectionWithHttpInfo(id, createConnectorSmtpConnectionOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an inbox connector SMTP connection Update SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectorSmtpConnectionDto</returns>
        public mailslurp.Client.ApiResponse<ConnectorSmtpConnectionDto> UpdateConnectorSmtpConnectionWithHttpInfo(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createConnectorSmtpConnectionOptions' is set
            if (createConnectorSmtpConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorSmtpConnectionOptions' when calling ConnectorControllerApi->UpdateConnectorSmtpConnection");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorSmtpConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.UpdateConnectorSmtpConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ConnectorSmtpConnectionDto>("/connectors/{id}/smtp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConnectorSmtpConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an inbox connector SMTP connection Update SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectorSmtpConnectionDto</returns>
        public async System.Threading.Tasks.Task<ConnectorSmtpConnectionDto> UpdateConnectorSmtpConnectionAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConnectorSmtpConnectionDto> localVarResponse = await UpdateConnectorSmtpConnectionWithHttpInfoAsync(id, createConnectorSmtpConnectionOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an inbox connector SMTP connection Update SMTP connection for external inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="createConnectorSmtpConnectionOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectorSmtpConnectionDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConnectorSmtpConnectionDto>> UpdateConnectorSmtpConnectionWithHttpInfoAsync(Guid id, CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createConnectorSmtpConnectionOptions' is set
            if (createConnectorSmtpConnectionOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createConnectorSmtpConnectionOptions' when calling ConnectorControllerApi->UpdateConnectorSmtpConnection");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createConnectorSmtpConnectionOptions;

            localVarRequestOptions.Operation = "ConnectorControllerApi.UpdateConnectorSmtpConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ConnectorSmtpConnectionDto>("/connectors/{id}/smtp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConnectorSmtpConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
