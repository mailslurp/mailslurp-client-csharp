/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: d1659dc1567a5b62f65d0612107a50aace03e085
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAliasControllerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an email alias
        /// </summary>
        /// <remarks>
        /// Create an email alias belonging to a user ID. To create anonymous aliases use the &#x60;createAnonymousAlias&#x60; method.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns></returns>
        void CreateAlias (CreateOwnedAliasOptions createOwnedAliasOptions);

        /// <summary>
        /// Create an email alias
        /// </summary>
        /// <remarks>
        /// Create an email alias belonging to a user ID. To create anonymous aliases use the &#x60;createAnonymousAlias&#x60; method.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateAliasWithHttpInfo (CreateOwnedAliasOptions createOwnedAliasOptions);
        /// <summary>
        /// Create an anonymous email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAnonymousAliasOptions">createAnonymousAliasOptions</param>
        /// <returns>Alias</returns>
        Alias CreateAnonymousAlias (CreateAnonymousAliasOptions createAnonymousAliasOptions);

        /// <summary>
        /// Create an anonymous email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAnonymousAliasOptions">createAnonymousAliasOptions</param>
        /// <returns>ApiResponse of Alias</returns>
        ApiResponse<Alias> CreateAnonymousAliasWithHttpInfo (CreateAnonymousAliasOptions createAnonymousAliasOptions);
        /// <summary>
        /// Delete an owned alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns></returns>
        void DeleteAlias (Guid aliasId);

        /// <summary>
        /// Delete an owned alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAliasWithHttpInfo (Guid aliasId);
        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>Alias</returns>
        Alias GetAlias (Guid aliasId);

        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>ApiResponse of Alias</returns>
        ApiResponse<Alias> GetAliasWithHttpInfo (Guid aliasId);
        /// <summary>
        /// Get all email aliases
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageAlias</returns>
        PageAlias GetAliases (int page = default(int), int size = default(int), string sort = default(string));

        /// <summary>
        /// Get all email aliases
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageAlias</returns>
        ApiResponse<PageAlias> GetAliasesWithHttpInfo (int page = default(int), int size = default(int), string sort = default(string));
        /// <summary>
        /// Update an owned alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns></returns>
        void UpdateAlias (Guid aliasId, CreateOwnedAliasOptions createOwnedAliasOptions);

        /// <summary>
        /// Update an owned alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAliasWithHttpInfo (Guid aliasId, CreateOwnedAliasOptions createOwnedAliasOptions);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an email alias
        /// </summary>
        /// <remarks>
        /// Create an email alias belonging to a user ID. To create anonymous aliases use the &#x60;createAnonymousAlias&#x60; method.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAliasAsync (CreateOwnedAliasOptions createOwnedAliasOptions);

        /// <summary>
        /// Create an email alias
        /// </summary>
        /// <remarks>
        /// Create an email alias belonging to a user ID. To create anonymous aliases use the &#x60;createAnonymousAlias&#x60; method.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAliasAsyncWithHttpInfo (CreateOwnedAliasOptions createOwnedAliasOptions);
        /// <summary>
        /// Create an anonymous email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAnonymousAliasOptions">createAnonymousAliasOptions</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task<Alias> CreateAnonymousAliasAsync (CreateAnonymousAliasOptions createAnonymousAliasOptions);

        /// <summary>
        /// Create an anonymous email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAnonymousAliasOptions">createAnonymousAliasOptions</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        System.Threading.Tasks.Task<ApiResponse<Alias>> CreateAnonymousAliasAsyncWithHttpInfo (CreateAnonymousAliasOptions createAnonymousAliasOptions);
        /// <summary>
        /// Delete an owned alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAliasAsync (Guid aliasId);

        /// <summary>
        /// Delete an owned alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAliasAsyncWithHttpInfo (Guid aliasId);
        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task<Alias> GetAliasAsync (Guid aliasId);

        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        System.Threading.Tasks.Task<ApiResponse<Alias>> GetAliasAsyncWithHttpInfo (Guid aliasId);
        /// <summary>
        /// Get all email aliases
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageAlias</returns>
        System.Threading.Tasks.Task<PageAlias> GetAliasesAsync (int page = default(int), int size = default(int), string sort = default(string));

        /// <summary>
        /// Get all email aliases
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageAlias)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAlias>> GetAliasesAsyncWithHttpInfo (int page = default(int), int size = default(int), string sort = default(string));
        /// <summary>
        /// Update an owned alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAliasAsync (Guid aliasId, CreateOwnedAliasOptions createOwnedAliasOptions);

        /// <summary>
        /// Update an owned alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAliasAsyncWithHttpInfo (Guid aliasId, CreateOwnedAliasOptions createOwnedAliasOptions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AliasControllerApi : IAliasControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AliasControllerApi(String basePath)
        {
            this.Configuration = new mailslurp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class
        /// </summary>
        /// <returns></returns>
        public AliasControllerApi()
        {
            this.Configuration = mailslurp.Client.Configuration.Default;

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AliasControllerApi(mailslurp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = mailslurp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an email alias Create an email alias belonging to a user ID. To create anonymous aliases use the &#x60;createAnonymousAlias&#x60; method.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns></returns>
        public void CreateAlias (CreateOwnedAliasOptions createOwnedAliasOptions)
        {
             CreateAliasWithHttpInfo(createOwnedAliasOptions);
        }

        /// <summary>
        /// Create an email alias Create an email alias belonging to a user ID. To create anonymous aliases use the &#x60;createAnonymousAlias&#x60; method.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateAliasWithHttpInfo (CreateOwnedAliasOptions createOwnedAliasOptions)
        {
            // verify the required parameter 'createOwnedAliasOptions' is set
            if (createOwnedAliasOptions == null)
                throw new ApiException(400, "Missing required parameter 'createOwnedAliasOptions' when calling AliasControllerApi->CreateAlias");

            var localVarPath = "./aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createOwnedAliasOptions != null && createOwnedAliasOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createOwnedAliasOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createOwnedAliasOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create an email alias Create an email alias belonging to a user ID. To create anonymous aliases use the &#x60;createAnonymousAlias&#x60; method.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAliasAsync (CreateOwnedAliasOptions createOwnedAliasOptions)
        {
             await CreateAliasAsyncWithHttpInfo(createOwnedAliasOptions);

        }

        /// <summary>
        /// Create an email alias Create an email alias belonging to a user ID. To create anonymous aliases use the &#x60;createAnonymousAlias&#x60; method.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAliasAsyncWithHttpInfo (CreateOwnedAliasOptions createOwnedAliasOptions)
        {
            // verify the required parameter 'createOwnedAliasOptions' is set
            if (createOwnedAliasOptions == null)
                throw new ApiException(400, "Missing required parameter 'createOwnedAliasOptions' when calling AliasControllerApi->CreateAlias");

            var localVarPath = "./aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createOwnedAliasOptions != null && createOwnedAliasOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createOwnedAliasOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createOwnedAliasOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create an anonymous email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAnonymousAliasOptions">createAnonymousAliasOptions</param>
        /// <returns>Alias</returns>
        public Alias CreateAnonymousAlias (CreateAnonymousAliasOptions createAnonymousAliasOptions)
        {
             ApiResponse<Alias> localVarResponse = CreateAnonymousAliasWithHttpInfo(createAnonymousAliasOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an anonymous email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAnonymousAliasOptions">createAnonymousAliasOptions</param>
        /// <returns>ApiResponse of Alias</returns>
        public ApiResponse<Alias> CreateAnonymousAliasWithHttpInfo (CreateAnonymousAliasOptions createAnonymousAliasOptions)
        {
            // verify the required parameter 'createAnonymousAliasOptions' is set
            if (createAnonymousAliasOptions == null)
                throw new ApiException(400, "Missing required parameter 'createAnonymousAliasOptions' when calling AliasControllerApi->CreateAnonymousAlias");

            var localVarPath = "./aliases/anonymous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createAnonymousAliasOptions != null && createAnonymousAliasOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAnonymousAliasOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAnonymousAliasOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnonymousAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Alias>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Alias) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias)));
        }

        /// <summary>
        /// Create an anonymous email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAnonymousAliasOptions">createAnonymousAliasOptions</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task<Alias> CreateAnonymousAliasAsync (CreateAnonymousAliasOptions createAnonymousAliasOptions)
        {
             ApiResponse<Alias> localVarResponse = await CreateAnonymousAliasAsyncWithHttpInfo(createAnonymousAliasOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an anonymous email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAnonymousAliasOptions">createAnonymousAliasOptions</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Alias>> CreateAnonymousAliasAsyncWithHttpInfo (CreateAnonymousAliasOptions createAnonymousAliasOptions)
        {
            // verify the required parameter 'createAnonymousAliasOptions' is set
            if (createAnonymousAliasOptions == null)
                throw new ApiException(400, "Missing required parameter 'createAnonymousAliasOptions' when calling AliasControllerApi->CreateAnonymousAlias");

            var localVarPath = "./aliases/anonymous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createAnonymousAliasOptions != null && createAnonymousAliasOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAnonymousAliasOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAnonymousAliasOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnonymousAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Alias>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Alias) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias)));
        }

        /// <summary>
        /// Delete an owned alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns></returns>
        public void DeleteAlias (Guid aliasId)
        {
             DeleteAliasWithHttpInfo(aliasId);
        }

        /// <summary>
        /// Delete an owned alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAliasWithHttpInfo (Guid aliasId)
        {
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AliasControllerApi->DeleteAlias");

            var localVarPath = "./aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aliasId != null) localVarPathParams.Add("aliasId", this.Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an owned alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAliasAsync (Guid aliasId)
        {
             await DeleteAliasAsyncWithHttpInfo(aliasId);

        }

        /// <summary>
        /// Delete an owned alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAliasAsyncWithHttpInfo (Guid aliasId)
        {
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AliasControllerApi->DeleteAlias");

            var localVarPath = "./aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aliasId != null) localVarPathParams.Add("aliasId", this.Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>Alias</returns>
        public Alias GetAlias (Guid aliasId)
        {
             ApiResponse<Alias> localVarResponse = GetAliasWithHttpInfo(aliasId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>ApiResponse of Alias</returns>
        public ApiResponse<Alias> GetAliasWithHttpInfo (Guid aliasId)
        {
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AliasControllerApi->GetAlias");

            var localVarPath = "./aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aliasId != null) localVarPathParams.Add("aliasId", this.Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Alias>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Alias) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias)));
        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task<Alias> GetAliasAsync (Guid aliasId)
        {
             ApiResponse<Alias> localVarResponse = await GetAliasAsyncWithHttpInfo(aliasId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Alias>> GetAliasAsyncWithHttpInfo (Guid aliasId)
        {
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AliasControllerApi->GetAlias");

            var localVarPath = "./aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aliasId != null) localVarPathParams.Add("aliasId", this.Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Alias>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Alias) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias)));
        }

        /// <summary>
        /// Get all email aliases Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageAlias</returns>
        public PageAlias GetAliases (int page = default(int), int size = default(int), string sort = default(string))
        {
             ApiResponse<PageAlias> localVarResponse = GetAliasesWithHttpInfo(page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all email aliases Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageAlias</returns>
        public ApiResponse<PageAlias> GetAliasesWithHttpInfo (int page = default(int), int size = default(int), string sort = default(string))
        {

            var localVarPath = "./aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAlias>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PageAlias) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAlias)));
        }

        /// <summary>
        /// Get all email aliases Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageAlias</returns>
        public async System.Threading.Tasks.Task<PageAlias> GetAliasesAsync (int page = default(int), int size = default(int), string sort = default(string))
        {
             ApiResponse<PageAlias> localVarResponse = await GetAliasesAsyncWithHttpInfo(page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all email aliases Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageAlias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAlias>> GetAliasesAsyncWithHttpInfo (int page = default(int), int size = default(int), string sort = default(string))
        {

            var localVarPath = "./aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAlias>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PageAlias) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAlias)));
        }

        /// <summary>
        /// Update an owned alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns></returns>
        public void UpdateAlias (Guid aliasId, CreateOwnedAliasOptions createOwnedAliasOptions)
        {
             UpdateAliasWithHttpInfo(aliasId, createOwnedAliasOptions);
        }

        /// <summary>
        /// Update an owned alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAliasWithHttpInfo (Guid aliasId, CreateOwnedAliasOptions createOwnedAliasOptions)
        {
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AliasControllerApi->UpdateAlias");
            // verify the required parameter 'createOwnedAliasOptions' is set
            if (createOwnedAliasOptions == null)
                throw new ApiException(400, "Missing required parameter 'createOwnedAliasOptions' when calling AliasControllerApi->UpdateAlias");

            var localVarPath = "./aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aliasId != null) localVarPathParams.Add("aliasId", this.Configuration.ApiClient.ParameterToString(aliasId)); // path parameter
            if (createOwnedAliasOptions != null && createOwnedAliasOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createOwnedAliasOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createOwnedAliasOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an owned alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAliasAsync (Guid aliasId, CreateOwnedAliasOptions createOwnedAliasOptions)
        {
             await UpdateAliasAsyncWithHttpInfo(aliasId, createOwnedAliasOptions);

        }

        /// <summary>
        /// Update an owned alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">aliasId</param>
        /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAliasAsyncWithHttpInfo (Guid aliasId, CreateOwnedAliasOptions createOwnedAliasOptions)
        {
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AliasControllerApi->UpdateAlias");
            // verify the required parameter 'createOwnedAliasOptions' is set
            if (createOwnedAliasOptions == null)
                throw new ApiException(400, "Missing required parameter 'createOwnedAliasOptions' when calling AliasControllerApi->UpdateAlias");

            var localVarPath = "./aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aliasId != null) localVarPathParams.Add("aliasId", this.Configuration.ApiClient.ParameterToString(aliasId)); // path parameter
            if (createOwnedAliasOptions != null && createOwnedAliasOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createOwnedAliasOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createOwnedAliasOptions; // byte array
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
