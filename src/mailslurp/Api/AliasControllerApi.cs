/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAliasControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
        /// </summary>
        /// <remarks>
        /// Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <returns>AliasDto</returns>
        AliasDto CreateAlias (CreateAliasOptions createAliasOptions);

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
        /// </summary>
        /// <remarks>
        /// Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <returns>ApiResponse of AliasDto</returns>
        ApiResponse<AliasDto> CreateAliasWithHttpInfo (CreateAliasOptions createAliasOptions);
        /// <summary>
        /// Delete an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns></returns>
        void DeleteAlias (Guid aliasId);

        /// <summary>
        /// Delete an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAliasWithHttpInfo (Guid aliasId);
        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>AliasDto</returns>
        AliasDto GetAlias (Guid aliasId);

        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>ApiResponse of AliasDto</returns>
        ApiResponse<AliasDto> GetAliasWithHttpInfo (Guid aliasId);
        /// <summary>
        /// Get emails for an alias
        /// </summary>
        /// <remarks>
        /// Get paginated emails for an alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>PageEmailProjection</returns>
        PageEmailProjection GetAliasEmails (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));

        /// <summary>
        /// Get emails for an alias
        /// </summary>
        /// <remarks>
        /// Get paginated emails for an alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>ApiResponse of PageEmailProjection</returns>
        ApiResponse<PageEmailProjection> GetAliasEmailsWithHttpInfo (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));
        /// <summary>
        /// Get threads created for an alias
        /// </summary>
        /// <remarks>
        /// Returns threads created for an email alias in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>PageThreadProjection</returns>
        PageThreadProjection GetAliasThreads (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));

        /// <summary>
        /// Get threads created for an alias
        /// </summary>
        /// <remarks>
        /// Returns threads created for an email alias in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>ApiResponse of PageThreadProjection</returns>
        ApiResponse<PageThreadProjection> GetAliasThreadsWithHttpInfo (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));
        /// <summary>
        /// Get all email aliases you have created
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>PageAlias</returns>
        PageAlias GetAliases (int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));

        /// <summary>
        /// Get all email aliases you have created
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>ApiResponse of PageAlias</returns>
        ApiResponse<PageAlias> GetAliasesWithHttpInfo (int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));
        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <returns>SentEmailDto</returns>
        SentEmailDto ReplyToAliasEmail (Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions);

        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        ApiResponse<SentEmailDto> ReplyToAliasEmailWithHttpInfo (Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions);
        /// <summary>
        /// Send an email from an alias inbox
        /// </summary>
        /// <remarks>
        /// Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <returns>SentEmailDto</returns>
        SentEmailDto SendAliasEmail (Guid aliasId, SendEmailOptions sendEmailOptions);

        /// <summary>
        /// Send an email from an alias inbox
        /// </summary>
        /// <remarks>
        /// Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        ApiResponse<SentEmailDto> SendAliasEmailWithHttpInfo (Guid aliasId, SendEmailOptions sendEmailOptions);
        /// <summary>
        /// Update an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <returns>AliasDto</returns>
        AliasDto UpdateAlias (Guid aliasId, UpdateAliasOptions updateAliasOptions);

        /// <summary>
        /// Update an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <returns>ApiResponse of AliasDto</returns>
        ApiResponse<AliasDto> UpdateAliasWithHttpInfo (Guid aliasId, UpdateAliasOptions updateAliasOptions);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAliasControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
        /// </summary>
        /// <remarks>
        /// Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <returns>Task of AliasDto</returns>
        System.Threading.Tasks.Task<AliasDto> CreateAliasAsync (CreateAliasOptions createAliasOptions);

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
        /// </summary>
        /// <remarks>
        /// Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AliasDto>> CreateAliasAsyncWithHttpInfo (CreateAliasOptions createAliasOptions);
        /// <summary>
        /// Delete an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAliasAsync (Guid aliasId);

        /// <summary>
        /// Delete an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAliasAsyncWithHttpInfo (Guid aliasId);
        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>Task of AliasDto</returns>
        System.Threading.Tasks.Task<AliasDto> GetAliasAsync (Guid aliasId);

        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AliasDto>> GetAliasAsyncWithHttpInfo (Guid aliasId);
        /// <summary>
        /// Get emails for an alias
        /// </summary>
        /// <remarks>
        /// Get paginated emails for an alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>Task of PageEmailProjection</returns>
        System.Threading.Tasks.Task<PageEmailProjection> GetAliasEmailsAsync (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));

        /// <summary>
        /// Get emails for an alias
        /// </summary>
        /// <remarks>
        /// Get paginated emails for an alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>Task of ApiResponse (PageEmailProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageEmailProjection>> GetAliasEmailsAsyncWithHttpInfo (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));
        /// <summary>
        /// Get threads created for an alias
        /// </summary>
        /// <remarks>
        /// Returns threads created for an email alias in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>Task of PageThreadProjection</returns>
        System.Threading.Tasks.Task<PageThreadProjection> GetAliasThreadsAsync (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));

        /// <summary>
        /// Get threads created for an alias
        /// </summary>
        /// <remarks>
        /// Returns threads created for an email alias in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>Task of ApiResponse (PageThreadProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageThreadProjection>> GetAliasThreadsAsyncWithHttpInfo (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));
        /// <summary>
        /// Get all email aliases you have created
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>Task of PageAlias</returns>
        System.Threading.Tasks.Task<PageAlias> GetAliasesAsync (int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));

        /// <summary>
        /// Get all email aliases you have created
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>Task of ApiResponse (PageAlias)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAlias>> GetAliasesAsyncWithHttpInfo (int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?));
        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <returns>Task of SentEmailDto</returns>
        System.Threading.Tasks.Task<SentEmailDto> ReplyToAliasEmailAsync (Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions);

        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentEmailDto>> ReplyToAliasEmailAsyncWithHttpInfo (Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions);
        /// <summary>
        /// Send an email from an alias inbox
        /// </summary>
        /// <remarks>
        /// Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <returns>Task of SentEmailDto</returns>
        System.Threading.Tasks.Task<SentEmailDto> SendAliasEmailAsync (Guid aliasId, SendEmailOptions sendEmailOptions);

        /// <summary>
        /// Send an email from an alias inbox
        /// </summary>
        /// <remarks>
        /// Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentEmailDto>> SendAliasEmailAsyncWithHttpInfo (Guid aliasId, SendEmailOptions sendEmailOptions);
        /// <summary>
        /// Update an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <returns>Task of AliasDto</returns>
        System.Threading.Tasks.Task<AliasDto> UpdateAliasAsync (Guid aliasId, UpdateAliasOptions updateAliasOptions);

        /// <summary>
        /// Update an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AliasDto>> UpdateAliasAsyncWithHttpInfo (Guid aliasId, UpdateAliasOptions updateAliasOptions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAliasControllerApi : IAliasControllerApiSync, IAliasControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AliasControllerApi : IAliasControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AliasControllerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AliasControllerApi(String basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AliasControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AliasControllerApi(mailslurp.Client.ISynchronousClient client,mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active. Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <returns>AliasDto</returns>
        public AliasDto CreateAlias (CreateAliasOptions createAliasOptions)
        {
             mailslurp.Client.ApiResponse<AliasDto> localVarResponse = CreateAliasWithHttpInfo(createAliasOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active. Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <returns>ApiResponse of AliasDto</returns>
        public mailslurp.Client.ApiResponse< AliasDto > CreateAliasWithHttpInfo (CreateAliasOptions createAliasOptions)
        {
            // verify the required parameter 'createAliasOptions' is set
            if (createAliasOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createAliasOptions' when calling AliasControllerApi->CreateAlias");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAliasOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AliasDto >("/aliases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active. Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <returns>Task of AliasDto</returns>
        public async System.Threading.Tasks.Task<AliasDto> CreateAliasAsync (CreateAliasOptions createAliasOptions)
        {
             mailslurp.Client.ApiResponse<AliasDto> localVarResponse = await CreateAliasAsyncWithHttpInfo(createAliasOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active. Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AliasDto>> CreateAliasAsyncWithHttpInfo (CreateAliasOptions createAliasOptions)
        {
            // verify the required parameter 'createAliasOptions' is set
            if (createAliasOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createAliasOptions' when calling AliasControllerApi->CreateAlias");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = createAliasOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AliasDto>("/aliases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns></returns>
        public void DeleteAlias (Guid aliasId)
        {
             DeleteAliasWithHttpInfo(aliasId);
        }

        /// <summary>
        /// Delete an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteAliasWithHttpInfo (Guid aliasId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/aliases/{aliasId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAliasAsync (Guid aliasId)
        {
             await DeleteAliasAsyncWithHttpInfo(aliasId);

        }

        /// <summary>
        /// Delete an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteAliasAsyncWithHttpInfo (Guid aliasId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/aliases/{aliasId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>AliasDto</returns>
        public AliasDto GetAlias (Guid aliasId)
        {
             mailslurp.Client.ApiResponse<AliasDto> localVarResponse = GetAliasWithHttpInfo(aliasId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>ApiResponse of AliasDto</returns>
        public mailslurp.Client.ApiResponse< AliasDto > GetAliasWithHttpInfo (Guid aliasId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AliasDto >("/aliases/{aliasId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>Task of AliasDto</returns>
        public async System.Threading.Tasks.Task<AliasDto> GetAliasAsync (Guid aliasId)
        {
             mailslurp.Client.ApiResponse<AliasDto> localVarResponse = await GetAliasAsyncWithHttpInfo(aliasId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AliasDto>> GetAliasAsyncWithHttpInfo (Guid aliasId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AliasDto>("/aliases/{aliasId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get emails for an alias Get paginated emails for an alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>PageEmailProjection</returns>
        public PageEmailProjection GetAliasEmails (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
             mailslurp.Client.ApiResponse<PageEmailProjection> localVarResponse = GetAliasEmailsWithHttpInfo(aliasId, page, size, sort, since, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get emails for an alias Get paginated emails for an alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>ApiResponse of PageEmailProjection</returns>
        public mailslurp.Client.ApiResponse< PageEmailProjection > GetAliasEmailsWithHttpInfo (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageEmailProjection >("/aliases/{aliasId}/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliasEmails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get emails for an alias Get paginated emails for an alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>Task of PageEmailProjection</returns>
        public async System.Threading.Tasks.Task<PageEmailProjection> GetAliasEmailsAsync (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
             mailslurp.Client.ApiResponse<PageEmailProjection> localVarResponse = await GetAliasEmailsAsyncWithHttpInfo(aliasId, page, size, sort, since, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get emails for an alias Get paginated emails for an alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>Task of ApiResponse (PageEmailProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageEmailProjection>> GetAliasEmailsAsyncWithHttpInfo (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageEmailProjection>("/aliases/{aliasId}/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliasEmails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get threads created for an alias Returns threads created for an email alias in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>PageThreadProjection</returns>
        public PageThreadProjection GetAliasThreads (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
             mailslurp.Client.ApiResponse<PageThreadProjection> localVarResponse = GetAliasThreadsWithHttpInfo(aliasId, page, size, sort, since, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get threads created for an alias Returns threads created for an email alias in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>ApiResponse of PageThreadProjection</returns>
        public mailslurp.Client.ApiResponse< PageThreadProjection > GetAliasThreadsWithHttpInfo (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageThreadProjection >("/aliases/{aliasId}/threads", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliasThreads", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get threads created for an alias Returns threads created for an email alias in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>Task of PageThreadProjection</returns>
        public async System.Threading.Tasks.Task<PageThreadProjection> GetAliasThreadsAsync (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
             mailslurp.Client.ApiResponse<PageThreadProjection> localVarResponse = await GetAliasThreadsAsyncWithHttpInfo(aliasId, page, size, sort, since, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get threads created for an alias Returns threads created for an email alias in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <returns>Task of ApiResponse (PageThreadProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageThreadProjection>> GetAliasThreadsAsyncWithHttpInfo (Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageThreadProjection>("/aliases/{aliasId}/threads", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliasThreads", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all email aliases you have created Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>PageAlias</returns>
        public PageAlias GetAliases (int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
             mailslurp.Client.ApiResponse<PageAlias> localVarResponse = GetAliasesWithHttpInfo(page, size, sort, since, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all email aliases you have created Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>ApiResponse of PageAlias</returns>
        public mailslurp.Client.ApiResponse< PageAlias > GetAliasesWithHttpInfo (int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageAlias >("/aliases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliases", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all email aliases you have created Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>Task of PageAlias</returns>
        public async System.Threading.Tasks.Task<PageAlias> GetAliasesAsync (int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {
             mailslurp.Client.ApiResponse<PageAlias> localVarResponse = await GetAliasesAsyncWithHttpInfo(page, size, sort, since, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all email aliases you have created Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <returns>Task of ApiResponse (PageAlias)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageAlias>> GetAliasesAsyncWithHttpInfo (int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageAlias>("/aliases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliases", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <returns>SentEmailDto</returns>
        public SentEmailDto ReplyToAliasEmail (Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions)
        {
             mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = ReplyToAliasEmailWithHttpInfo(aliasId, emailId, replyToAliasEmailOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        public mailslurp.Client.ApiResponse< SentEmailDto > ReplyToAliasEmailWithHttpInfo (Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions)
        {
            // verify the required parameter 'replyToAliasEmailOptions' is set
            if (replyToAliasEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'replyToAliasEmailOptions' when calling AliasControllerApi->ReplyToAliasEmail");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            localVarRequestOptions.Data = replyToAliasEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< SentEmailDto >("/aliases/{aliasId}/emails/{emailId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplyToAliasEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <returns>Task of SentEmailDto</returns>
        public async System.Threading.Tasks.Task<SentEmailDto> ReplyToAliasEmailAsync (Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions)
        {
             mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = await ReplyToAliasEmailAsyncWithHttpInfo(aliasId, emailId, replyToAliasEmailOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<SentEmailDto>> ReplyToAliasEmailAsyncWithHttpInfo (Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions)
        {
            // verify the required parameter 'replyToAliasEmailOptions' is set
            if (replyToAliasEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'replyToAliasEmailOptions' when calling AliasControllerApi->ReplyToAliasEmail");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            localVarRequestOptions.Data = replyToAliasEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SentEmailDto>("/aliases/{aliasId}/emails/{emailId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplyToAliasEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email from an alias inbox Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <returns>SentEmailDto</returns>
        public SentEmailDto SendAliasEmail (Guid aliasId, SendEmailOptions sendEmailOptions)
        {
             mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = SendAliasEmailWithHttpInfo(aliasId, sendEmailOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send an email from an alias inbox Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        public mailslurp.Client.ApiResponse< SentEmailDto > SendAliasEmailWithHttpInfo (Guid aliasId, SendEmailOptions sendEmailOptions)
        {
            // verify the required parameter 'sendEmailOptions' is set
            if (sendEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'sendEmailOptions' when calling AliasControllerApi->SendAliasEmail");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = sendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SentEmailDto >("/aliases/{aliasId}/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendAliasEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email from an alias inbox Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <returns>Task of SentEmailDto</returns>
        public async System.Threading.Tasks.Task<SentEmailDto> SendAliasEmailAsync (Guid aliasId, SendEmailOptions sendEmailOptions)
        {
             mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = await SendAliasEmailAsyncWithHttpInfo(aliasId, sendEmailOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send an email from an alias inbox Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<SentEmailDto>> SendAliasEmailAsyncWithHttpInfo (Guid aliasId, SendEmailOptions sendEmailOptions)
        {
            // verify the required parameter 'sendEmailOptions' is set
            if (sendEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'sendEmailOptions' when calling AliasControllerApi->SendAliasEmail");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = sendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SentEmailDto>("/aliases/{aliasId}/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendAliasEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <returns>AliasDto</returns>
        public AliasDto UpdateAlias (Guid aliasId, UpdateAliasOptions updateAliasOptions)
        {
             mailslurp.Client.ApiResponse<AliasDto> localVarResponse = UpdateAliasWithHttpInfo(aliasId, updateAliasOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <returns>ApiResponse of AliasDto</returns>
        public mailslurp.Client.ApiResponse< AliasDto > UpdateAliasWithHttpInfo (Guid aliasId, UpdateAliasOptions updateAliasOptions)
        {
            // verify the required parameter 'updateAliasOptions' is set
            if (updateAliasOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'updateAliasOptions' when calling AliasControllerApi->UpdateAlias");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = updateAliasOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< AliasDto >("/aliases/{aliasId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <returns>Task of AliasDto</returns>
        public async System.Threading.Tasks.Task<AliasDto> UpdateAliasAsync (Guid aliasId, UpdateAliasOptions updateAliasOptions)
        {
             mailslurp.Client.ApiResponse<AliasDto> localVarResponse = await UpdateAliasAsyncWithHttpInfo(aliasId, updateAliasOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AliasDto>> UpdateAliasAsyncWithHttpInfo (Guid aliasId, UpdateAliasOptions updateAliasOptions)
        {
            // verify the required parameter 'updateAliasOptions' is set
            if (updateAliasOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'updateAliasOptions' when calling AliasControllerApi->UpdateAlias");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = updateAliasOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AliasDto>("/aliases/{aliasId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
