/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAliasControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
        /// </summary>
        /// <remarks>
        /// Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AliasDto</returns>
        AliasDto CreateAlias(CreateAliasOptions createAliasOptions, int operationIndex = 0);

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
        /// </summary>
        /// <remarks>
        /// Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AliasDto</returns>
        ApiResponse<AliasDto> CreateAliasWithHttpInfo(CreateAliasOptions createAliasOptions, int operationIndex = 0);
        /// <summary>
        /// Delete an email alias
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAlias(Guid aliasId, int operationIndex = 0);

        /// <summary>
        /// Delete an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAliasWithHttpInfo(Guid aliasId, int operationIndex = 0);
        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AliasDto</returns>
        AliasDto GetAlias(Guid aliasId, int operationIndex = 0);

        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AliasDto</returns>
        ApiResponse<AliasDto> GetAliasWithHttpInfo(Guid aliasId, int operationIndex = 0);
        /// <summary>
        /// Get emails for an alias
        /// </summary>
        /// <remarks>
        /// Get paginated emails for an alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageEmailProjection</returns>
        PageEmailProjection GetAliasEmails(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Get emails for an alias
        /// </summary>
        /// <remarks>
        /// Get paginated emails for an alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageEmailProjection</returns>
        ApiResponse<PageEmailProjection> GetAliasEmailsWithHttpInfo(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Get threads created for an alias
        /// </summary>
        /// <remarks>
        /// Returns threads created for an email alias in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageThreadProjection</returns>
        PageThreadProjection GetAliasThreads(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Get threads created for an alias
        /// </summary>
        /// <remarks>
        /// Returns threads created for an email alias in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageThreadProjection</returns>
        ApiResponse<PageThreadProjection> GetAliasThreadsWithHttpInfo(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Get all email aliases you have created
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageAlias</returns>
        PageAlias GetAliases(string search = default(string), int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Get all email aliases you have created
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageAlias</returns>
        ApiResponse<PageAlias> GetAliasesWithHttpInfo(string search = default(string), int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Get a thread
        /// </summary>
        /// <remarks>
        /// Return a thread associated with an alias
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ThreadProjection</returns>
        ThreadProjection GetThread(Guid threadId, int operationIndex = 0);

        /// <summary>
        /// Get a thread
        /// </summary>
        /// <remarks>
        /// Return a thread associated with an alias
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ThreadProjection</returns>
        ApiResponse<ThreadProjection> GetThreadWithHttpInfo(Guid threadId, int operationIndex = 0);
        /// <summary>
        /// Get all threads
        /// </summary>
        /// <remarks>
        /// Returns threads created for all aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageThreadProjection</returns>
        PageThreadProjection GetThreadsPaginated(int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Get all threads
        /// </summary>
        /// <remarks>
        /// Returns threads created for all aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageThreadProjection</returns>
        ApiResponse<PageThreadProjection> GetThreadsPaginatedWithHttpInfo(int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentEmailDto</returns>
        SentEmailDto ReplyToAliasEmail(Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions, int operationIndex = 0);

        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        ApiResponse<SentEmailDto> ReplyToAliasEmailWithHttpInfo(Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions, int operationIndex = 0);
        /// <summary>
        /// Send an email from an alias inbox
        /// </summary>
        /// <remarks>
        /// Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentEmailDto</returns>
        SentEmailDto SendAliasEmail(Guid aliasId, SendEmailOptions sendEmailOptions, int operationIndex = 0);

        /// <summary>
        /// Send an email from an alias inbox
        /// </summary>
        /// <remarks>
        /// Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        ApiResponse<SentEmailDto> SendAliasEmailWithHttpInfo(Guid aliasId, SendEmailOptions sendEmailOptions, int operationIndex = 0);
        /// <summary>
        /// Update an email alias
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AliasDto</returns>
        AliasDto UpdateAlias(Guid aliasId, UpdateAliasOptions updateAliasOptions, int operationIndex = 0);

        /// <summary>
        /// Update an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AliasDto</returns>
        ApiResponse<AliasDto> UpdateAliasWithHttpInfo(Guid aliasId, UpdateAliasOptions updateAliasOptions, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAliasControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
        /// </summary>
        /// <remarks>
        /// Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AliasDto</returns>
        System.Threading.Tasks.Task<AliasDto> CreateAliasAsync(CreateAliasOptions createAliasOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
        /// </summary>
        /// <remarks>
        /// Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AliasDto>> CreateAliasWithHttpInfoAsync(CreateAliasOptions createAliasOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAliasAsync(Guid aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAliasWithHttpInfoAsync(Guid aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AliasDto</returns>
        System.Threading.Tasks.Task<AliasDto> GetAliasAsync(Guid aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an email alias
        /// </summary>
        /// <remarks>
        /// Get an email alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AliasDto>> GetAliasWithHttpInfoAsync(Guid aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get emails for an alias
        /// </summary>
        /// <remarks>
        /// Get paginated emails for an alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageEmailProjection</returns>
        System.Threading.Tasks.Task<PageEmailProjection> GetAliasEmailsAsync(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get emails for an alias
        /// </summary>
        /// <remarks>
        /// Get paginated emails for an alias by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageEmailProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageEmailProjection>> GetAliasEmailsWithHttpInfoAsync(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get threads created for an alias
        /// </summary>
        /// <remarks>
        /// Returns threads created for an email alias in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageThreadProjection</returns>
        System.Threading.Tasks.Task<PageThreadProjection> GetAliasThreadsAsync(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get threads created for an alias
        /// </summary>
        /// <remarks>
        /// Returns threads created for an email alias in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageThreadProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageThreadProjection>> GetAliasThreadsWithHttpInfoAsync(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all email aliases you have created
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageAlias</returns>
        System.Threading.Tasks.Task<PageAlias> GetAliasesAsync(string search = default(string), int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all email aliases you have created
        /// </summary>
        /// <remarks>
        /// Get all email aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageAlias)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAlias>> GetAliasesWithHttpInfoAsync(string search = default(string), int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a thread
        /// </summary>
        /// <remarks>
        /// Return a thread associated with an alias
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThreadProjection</returns>
        System.Threading.Tasks.Task<ThreadProjection> GetThreadAsync(Guid threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a thread
        /// </summary>
        /// <remarks>
        /// Return a thread associated with an alias
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThreadProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThreadProjection>> GetThreadWithHttpInfoAsync(Guid threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all threads
        /// </summary>
        /// <remarks>
        /// Returns threads created for all aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageThreadProjection</returns>
        System.Threading.Tasks.Task<PageThreadProjection> GetThreadsPaginatedAsync(int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all threads
        /// </summary>
        /// <remarks>
        /// Returns threads created for all aliases in paginated form
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageThreadProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageThreadProjection>> GetThreadsPaginatedWithHttpInfoAsync(int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentEmailDto</returns>
        System.Threading.Tasks.Task<SentEmailDto> ReplyToAliasEmailAsync(Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reply to an email
        /// </summary>
        /// <remarks>
        /// Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentEmailDto>> ReplyToAliasEmailWithHttpInfoAsync(Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send an email from an alias inbox
        /// </summary>
        /// <remarks>
        /// Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentEmailDto</returns>
        System.Threading.Tasks.Task<SentEmailDto> SendAliasEmailAsync(Guid aliasId, SendEmailOptions sendEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send an email from an alias inbox
        /// </summary>
        /// <remarks>
        /// Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentEmailDto>> SendAliasEmailWithHttpInfoAsync(Guid aliasId, SendEmailOptions sendEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AliasDto</returns>
        System.Threading.Tasks.Task<AliasDto> UpdateAliasAsync(Guid aliasId, UpdateAliasOptions updateAliasOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an email alias
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AliasDto>> UpdateAliasWithHttpInfoAsync(Guid aliasId, UpdateAliasOptions updateAliasOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAliasControllerApi : IAliasControllerApiSync, IAliasControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AliasControllerApi : IAliasControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AliasControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AliasControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AliasControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AliasControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AliasControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active. Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AliasDto</returns>
        public AliasDto CreateAlias(CreateAliasOptions createAliasOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<AliasDto> localVarResponse = CreateAliasWithHttpInfo(createAliasOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active. Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AliasDto</returns>
        public mailslurp.Client.ApiResponse<AliasDto> CreateAliasWithHttpInfo(CreateAliasOptions createAliasOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createAliasOptions' is set
            if (createAliasOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createAliasOptions' when calling AliasControllerApi->CreateAlias");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAliasOptions;

            localVarRequestOptions.Operation = "AliasControllerApi.CreateAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AliasDto>("/aliases", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active. Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AliasDto</returns>
        public async System.Threading.Tasks.Task<AliasDto> CreateAliasAsync(CreateAliasOptions createAliasOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<AliasDto> localVarResponse = await CreateAliasWithHttpInfoAsync(createAliasOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active. Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AliasDto>> CreateAliasWithHttpInfoAsync(CreateAliasOptions createAliasOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createAliasOptions' is set
            if (createAliasOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createAliasOptions' when calling AliasControllerApi->CreateAlias");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAliasOptions;

            localVarRequestOptions.Operation = "AliasControllerApi.CreateAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AliasDto>("/aliases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAlias(Guid aliasId, int operationIndex = 0)
        {
            DeleteAliasWithHttpInfo(aliasId);
        }

        /// <summary>
        /// Delete an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteAliasWithHttpInfo(Guid aliasId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "AliasControllerApi.DeleteAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/aliases/{aliasId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAliasAsync(Guid aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAliasWithHttpInfoAsync(aliasId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteAliasWithHttpInfoAsync(Guid aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "AliasControllerApi.DeleteAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/aliases/{aliasId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AliasDto</returns>
        public AliasDto GetAlias(Guid aliasId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<AliasDto> localVarResponse = GetAliasWithHttpInfo(aliasId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AliasDto</returns>
        public mailslurp.Client.ApiResponse<AliasDto> GetAliasWithHttpInfo(Guid aliasId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "AliasControllerApi.GetAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AliasDto>("/aliases/{aliasId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AliasDto</returns>
        public async System.Threading.Tasks.Task<AliasDto> GetAliasAsync(Guid aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<AliasDto> localVarResponse = await GetAliasWithHttpInfoAsync(aliasId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an email alias Get an email alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AliasDto>> GetAliasWithHttpInfoAsync(Guid aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "AliasControllerApi.GetAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AliasDto>("/aliases/{aliasId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get emails for an alias Get paginated emails for an alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageEmailProjection</returns>
        public PageEmailProjection GetAliasEmails(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageEmailProjection> localVarResponse = GetAliasEmailsWithHttpInfo(aliasId, page, size, sort, since, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get emails for an alias Get paginated emails for an alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageEmailProjection</returns>
        public mailslurp.Client.ApiResponse<PageEmailProjection> GetAliasEmailsWithHttpInfo(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AliasControllerApi.GetAliasEmails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageEmailProjection>("/aliases/{aliasId}/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliasEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get emails for an alias Get paginated emails for an alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageEmailProjection</returns>
        public async System.Threading.Tasks.Task<PageEmailProjection> GetAliasEmailsAsync(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<PageEmailProjection> localVarResponse = await GetAliasEmailsWithHttpInfoAsync(aliasId, page, size, sort, since, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get emails for an alias Get paginated emails for an alias by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index alias email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size alias email list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageEmailProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageEmailProjection>> GetAliasEmailsWithHttpInfoAsync(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AliasControllerApi.GetAliasEmails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageEmailProjection>("/aliases/{aliasId}/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliasEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get threads created for an alias Returns threads created for an email alias in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageThreadProjection</returns>
        public PageThreadProjection GetAliasThreads(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageThreadProjection> localVarResponse = GetAliasThreadsWithHttpInfo(aliasId, page, size, sort, since, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get threads created for an alias Returns threads created for an email alias in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageThreadProjection</returns>
        public mailslurp.Client.ApiResponse<PageThreadProjection> GetAliasThreadsWithHttpInfo(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AliasControllerApi.GetAliasThreads";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageThreadProjection>("/aliases/{aliasId}/threads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliasThreads", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get threads created for an alias Returns threads created for an email alias in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageThreadProjection</returns>
        public async System.Threading.Tasks.Task<PageThreadProjection> GetAliasThreadsAsync(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<PageThreadProjection> localVarResponse = await GetAliasThreadsWithHttpInfoAsync(aliasId, page, size, sort, since, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get threads created for an alias Returns threads created for an email alias in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageThreadProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageThreadProjection>> GetAliasThreadsWithHttpInfoAsync(Guid aliasId, int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AliasControllerApi.GetAliasThreads";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageThreadProjection>("/aliases/{aliasId}/threads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliasThreads", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all email aliases you have created Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageAlias</returns>
        public PageAlias GetAliases(string search = default(string), int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageAlias> localVarResponse = GetAliasesWithHttpInfo(search, page, size, sort, since, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all email aliases you have created Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageAlias</returns>
        public mailslurp.Client.ApiResponse<PageAlias> GetAliasesWithHttpInfo(string search = default(string), int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AliasControllerApi.GetAliases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageAlias>("/aliases", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all email aliases you have created Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageAlias</returns>
        public async System.Threading.Tasks.Task<PageAlias> GetAliasesAsync(string search = default(string), int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<PageAlias> localVarResponse = await GetAliasesWithHttpInfoAsync(search, page, size, sort, since, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all email aliases you have created Get all email aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in alias list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageAlias)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageAlias>> GetAliasesWithHttpInfoAsync(string search = default(string), int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AliasControllerApi.GetAliases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageAlias>("/aliases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a thread Return a thread associated with an alias
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ThreadProjection</returns>
        public ThreadProjection GetThread(Guid threadId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ThreadProjection> localVarResponse = GetThreadWithHttpInfo(threadId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a thread Return a thread associated with an alias
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ThreadProjection</returns>
        public mailslurp.Client.ApiResponse<ThreadProjection> GetThreadWithHttpInfo(Guid threadId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("threadId", mailslurp.Client.ClientUtils.ParameterToString(threadId)); // path parameter

            localVarRequestOptions.Operation = "AliasControllerApi.GetThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ThreadProjection>("/aliases/threads/{threadId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a thread Return a thread associated with an alias
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ThreadProjection</returns>
        public async System.Threading.Tasks.Task<ThreadProjection> GetThreadAsync(Guid threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<ThreadProjection> localVarResponse = await GetThreadWithHttpInfoAsync(threadId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a thread Return a thread associated with an alias
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ThreadProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ThreadProjection>> GetThreadWithHttpInfoAsync(Guid threadId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("threadId", mailslurp.Client.ClientUtils.ParameterToString(threadId)); // path parameter

            localVarRequestOptions.Operation = "AliasControllerApi.GetThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ThreadProjection>("/aliases/threads/{threadId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all threads Returns threads created for all aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageThreadProjection</returns>
        public PageThreadProjection GetThreadsPaginated(int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageThreadProjection> localVarResponse = GetThreadsPaginatedWithHttpInfo(page, size, sort, since, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all threads Returns threads created for all aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageThreadProjection</returns>
        public mailslurp.Client.ApiResponse<PageThreadProjection> GetThreadsPaginatedWithHttpInfo(int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AliasControllerApi.GetThreadsPaginated";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageThreadProjection>("/aliases/threads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThreadsPaginated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all threads Returns threads created for all aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageThreadProjection</returns>
        public async System.Threading.Tasks.Task<PageThreadProjection> GetThreadsPaginatedAsync(int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<PageThreadProjection> localVarResponse = await GetThreadsPaginatedWithHttpInfoAsync(page, size, sort, since, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all threads Returns threads created for all aliases in paginated form
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in thread list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter by sent after given date time (optional)</param>
        /// <param name="before">Optional filter by sent before given date time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageThreadProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageThreadProjection>> GetThreadsPaginatedWithHttpInfoAsync(int? page = default(int?), int? size = default(int?), string sort = default(string), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "AliasControllerApi.GetThreadsPaginated";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageThreadProjection>("/aliases/threads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThreadsPaginated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentEmailDto</returns>
        public SentEmailDto ReplyToAliasEmail(Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = ReplyToAliasEmailWithHttpInfo(aliasId, emailId, replyToAliasEmailOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        public mailslurp.Client.ApiResponse<SentEmailDto> ReplyToAliasEmailWithHttpInfo(Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions, int operationIndex = 0)
        {
            // verify the required parameter 'replyToAliasEmailOptions' is set
            if (replyToAliasEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'replyToAliasEmailOptions' when calling AliasControllerApi->ReplyToAliasEmail");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            localVarRequestOptions.Data = replyToAliasEmailOptions;

            localVarRequestOptions.Operation = "AliasControllerApi.ReplyToAliasEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SentEmailDto>("/aliases/{aliasId}/emails/{emailId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplyToAliasEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentEmailDto</returns>
        public async System.Threading.Tasks.Task<SentEmailDto> ReplyToAliasEmailAsync(Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = await ReplyToAliasEmailWithHttpInfoAsync(aliasId, emailId, replyToAliasEmailOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reply to an email Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId">ID of the alias that email belongs to</param>
        /// <param name="emailId">ID of the email that should be replied to</param>
        /// <param name="replyToAliasEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<SentEmailDto>> ReplyToAliasEmailWithHttpInfoAsync(Guid aliasId, Guid emailId, ReplyToAliasEmailOptions replyToAliasEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'replyToAliasEmailOptions' is set
            if (replyToAliasEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'replyToAliasEmailOptions' when calling AliasControllerApi->ReplyToAliasEmail");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            localVarRequestOptions.Data = replyToAliasEmailOptions;

            localVarRequestOptions.Operation = "AliasControllerApi.ReplyToAliasEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SentEmailDto>("/aliases/{aliasId}/emails/{emailId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplyToAliasEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email from an alias inbox Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentEmailDto</returns>
        public SentEmailDto SendAliasEmail(Guid aliasId, SendEmailOptions sendEmailOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = SendAliasEmailWithHttpInfo(aliasId, sendEmailOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send an email from an alias inbox Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentEmailDto</returns>
        public mailslurp.Client.ApiResponse<SentEmailDto> SendAliasEmailWithHttpInfo(Guid aliasId, SendEmailOptions sendEmailOptions, int operationIndex = 0)
        {
            // verify the required parameter 'sendEmailOptions' is set
            if (sendEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'sendEmailOptions' when calling AliasControllerApi->SendAliasEmail");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = sendEmailOptions;

            localVarRequestOptions.Operation = "AliasControllerApi.SendAliasEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SentEmailDto>("/aliases/{aliasId}/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendAliasEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email from an alias inbox Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentEmailDto</returns>
        public async System.Threading.Tasks.Task<SentEmailDto> SendAliasEmailAsync(Guid aliasId, SendEmailOptions sendEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<SentEmailDto> localVarResponse = await SendAliasEmailWithHttpInfoAsync(aliasId, sendEmailOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send an email from an alias inbox Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="sendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentEmailDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<SentEmailDto>> SendAliasEmailWithHttpInfoAsync(Guid aliasId, SendEmailOptions sendEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendEmailOptions' is set
            if (sendEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'sendEmailOptions' when calling AliasControllerApi->SendAliasEmail");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = sendEmailOptions;

            localVarRequestOptions.Operation = "AliasControllerApi.SendAliasEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SentEmailDto>("/aliases/{aliasId}/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendAliasEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AliasDto</returns>
        public AliasDto UpdateAlias(Guid aliasId, UpdateAliasOptions updateAliasOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<AliasDto> localVarResponse = UpdateAliasWithHttpInfo(aliasId, updateAliasOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AliasDto</returns>
        public mailslurp.Client.ApiResponse<AliasDto> UpdateAliasWithHttpInfo(Guid aliasId, UpdateAliasOptions updateAliasOptions, int operationIndex = 0)
        {
            // verify the required parameter 'updateAliasOptions' is set
            if (updateAliasOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'updateAliasOptions' when calling AliasControllerApi->UpdateAlias");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = updateAliasOptions;

            localVarRequestOptions.Operation = "AliasControllerApi.UpdateAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AliasDto>("/aliases/{aliasId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AliasDto</returns>
        public async System.Threading.Tasks.Task<AliasDto> UpdateAliasAsync(Guid aliasId, UpdateAliasOptions updateAliasOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<AliasDto> localVarResponse = await UpdateAliasWithHttpInfoAsync(aliasId, updateAliasOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an email alias 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aliasId"></param>
        /// <param name="updateAliasOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AliasDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AliasDto>> UpdateAliasWithHttpInfoAsync(Guid aliasId, UpdateAliasOptions updateAliasOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateAliasOptions' is set
            if (updateAliasOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'updateAliasOptions' when calling AliasControllerApi->UpdateAlias");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("aliasId", mailslurp.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = updateAliasOptions;

            localVarRequestOptions.Operation = "AliasControllerApi.UpdateAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AliasDto>("/aliases/{aliasId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
