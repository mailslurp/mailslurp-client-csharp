// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IInboxReplierControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        InboxReplierControllerApiEvents Events { get; }

        /// <summary>
        /// Create an inbox replier
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for reply toing, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxReplierOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxReplierApiResponse"/>&gt;</returns>
        Task<ICreateNewInboxReplierApiResponse> CreateNewInboxReplierAsync(CreateInboxReplierOptions createInboxReplierOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an inbox replier
        /// </summary>
        /// <remarks>
        /// Create a new inbox rule for reply toing, blocking, and allowing emails when sending and receiving
        /// </remarks>
        /// <param name="createInboxReplierOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxReplierApiResponse"/>&gt;</returns>
        Task<ICreateNewInboxReplierApiResponse> CreateNewInboxReplierOrDefaultAsync(CreateInboxReplierOptions createInboxReplierOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox replier
        /// </summary>
        /// <remarks>
        /// Delete inbox replier
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxReplierApiResponse"/>&gt;</returns>
        Task<IDeleteInboxReplierApiResponse> DeleteInboxReplierAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an inbox replier
        /// </summary>
        /// <remarks>
        /// Delete inbox replier
        /// </remarks>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxReplierApiResponse"/>&gt;</returns>
        Task<IDeleteInboxReplierApiResponse> DeleteInboxReplierOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete inbox repliers
        /// </summary>
        /// <remarks>
        /// Delete inbox repliers. Accepts optional inboxId filter.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach replier to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRepliersApiResponse"/>&gt;</returns>
        Task<IDeleteInboxRepliersApiResponse> DeleteInboxRepliersAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete inbox repliers
        /// </summary>
        /// <remarks>
        /// Delete inbox repliers. Accepts optional inboxId filter.
        /// </remarks>
        /// <param name="inboxId">Optional inbox id to attach replier to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRepliersApiResponse"/>&gt;</returns>
        Task<IDeleteInboxRepliersApiResponse> DeleteInboxRepliersOrDefaultAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get inbox replier event list
        /// </summary>
        /// <remarks>
        /// Get all inbox ruleset events
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxReplierId">ID of inbox replier (optional)</param>
        /// <param name="inboxId">ID of inbox (optional)</param>
        /// <param name="emailId">ID of email (optional)</param>
        /// <param name="sentId">ID of sent (optional)</param>
        /// <param name="page">Optional page index in inbox replier event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllInboxReplierEventsApiResponse"/>&gt;</returns>
        Task<IGetAllInboxReplierEventsApiResponse> GetAllInboxReplierEventsAsync(Option<Guid> inboxReplierId = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> sentId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get inbox replier event list
        /// </summary>
        /// <remarks>
        /// Get all inbox ruleset events
        /// </remarks>
        /// <param name="inboxReplierId">ID of inbox replier (optional)</param>
        /// <param name="inboxId">ID of inbox (optional)</param>
        /// <param name="emailId">ID of email (optional)</param>
        /// <param name="sentId">ID of sent (optional)</param>
        /// <param name="page">Optional page index in inbox replier event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllInboxReplierEventsApiResponse"/>&gt;</returns>
        Task<IGetAllInboxReplierEventsApiResponse> GetAllInboxReplierEventsOrDefaultAsync(Option<Guid> inboxReplierId = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> sentId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox replier
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxReplierApiResponse"/>&gt;</returns>
        Task<IGetInboxReplierApiResponse> GetInboxReplierAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox replier
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset
        /// </remarks>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxReplierApiResponse"/>&gt;</returns>
        Task<IGetInboxReplierApiResponse> GetInboxReplierOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox replier event list
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset events
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="page">Optional page index in inbox replier event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxReplierEventsApiResponse"/>&gt;</returns>
        Task<IGetInboxReplierEventsApiResponse> GetInboxReplierEventsAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an inbox replier event list
        /// </summary>
        /// <remarks>
        /// Get inbox ruleset events
        /// </remarks>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="page">Optional page index in inbox replier event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxReplierEventsApiResponse"/>&gt;</returns>
        Task<IGetInboxReplierEventsApiResponse> GetInboxReplierEventsOrDefaultAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List inbox repliers
        /// </summary>
        /// <remarks>
        /// List all repliers attached to an inbox
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get repliers from (optional)</param>
        /// <param name="page">Optional page index in inbox replier list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRepliersApiResponse"/>&gt;</returns>
        Task<IGetInboxRepliersApiResponse> GetInboxRepliersAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List inbox repliers
        /// </summary>
        /// <remarks>
        /// List all repliers attached to an inbox
        /// </remarks>
        /// <param name="inboxId">Optional inbox id to get repliers from (optional)</param>
        /// <param name="page">Optional page index in inbox replier list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRepliersApiResponse"/>&gt;</returns>
        Task<IGetInboxRepliersApiResponse> GetInboxRepliersOrDefaultAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox replier
        /// </summary>
        /// <remarks>
        /// Update inbox ruleset
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="updateInboxReplierOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInboxReplierApiResponse"/>&gt;</returns>
        Task<IUpdateInboxReplierApiResponse> UpdateInboxReplierAsync(Guid id, UpdateInboxReplierOptions updateInboxReplierOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an inbox replier
        /// </summary>
        /// <remarks>
        /// Update inbox ruleset
        /// </remarks>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="updateInboxReplierOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInboxReplierApiResponse"/>&gt;</returns>
        Task<IUpdateInboxReplierApiResponse> UpdateInboxReplierOrDefaultAsync(Guid id, UpdateInboxReplierOptions updateInboxReplierOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateNewInboxReplierApiResponse"/>
    /// </summary>
    public interface ICreateNewInboxReplierApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxReplierDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteInboxReplierApiResponse"/>
    /// </summary>
    public interface IDeleteInboxReplierApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteInboxRepliersApiResponse"/>
    /// </summary>
    public interface IDeleteInboxRepliersApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllInboxReplierEventsApiResponse"/>
    /// </summary>
    public interface IGetAllInboxReplierEventsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageInboxReplierEvents>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInboxReplierApiResponse"/>
    /// </summary>
    public interface IGetInboxReplierApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxReplierDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInboxReplierEventsApiResponse"/>
    /// </summary>
    public interface IGetInboxReplierEventsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageInboxReplierEvents>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInboxRepliersApiResponse"/>
    /// </summary>
    public interface IGetInboxRepliersApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageInboxReplierDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateInboxReplierApiResponse"/>
    /// </summary>
    public interface IUpdateInboxReplierApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.InboxReplierDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class InboxReplierControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateNewInboxReplier;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateNewInboxReplier;

        internal void ExecuteOnCreateNewInboxReplier(InboxReplierControllerApi.CreateNewInboxReplierApiResponse apiResponse)
        {
            OnCreateNewInboxReplier?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNewInboxReplier(Exception exception)
        {
            OnErrorCreateNewInboxReplier?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteInboxReplier;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteInboxReplier;

        internal void ExecuteOnDeleteInboxReplier(InboxReplierControllerApi.DeleteInboxReplierApiResponse apiResponse)
        {
            OnDeleteInboxReplier?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteInboxReplier(Exception exception)
        {
            OnErrorDeleteInboxReplier?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteInboxRepliers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteInboxRepliers;

        internal void ExecuteOnDeleteInboxRepliers(InboxReplierControllerApi.DeleteInboxRepliersApiResponse apiResponse)
        {
            OnDeleteInboxRepliers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteInboxRepliers(Exception exception)
        {
            OnErrorDeleteInboxRepliers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllInboxReplierEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllInboxReplierEvents;

        internal void ExecuteOnGetAllInboxReplierEvents(InboxReplierControllerApi.GetAllInboxReplierEventsApiResponse apiResponse)
        {
            OnGetAllInboxReplierEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllInboxReplierEvents(Exception exception)
        {
            OnErrorGetAllInboxReplierEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetInboxReplier;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetInboxReplier;

        internal void ExecuteOnGetInboxReplier(InboxReplierControllerApi.GetInboxReplierApiResponse apiResponse)
        {
            OnGetInboxReplier?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInboxReplier(Exception exception)
        {
            OnErrorGetInboxReplier?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetInboxReplierEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetInboxReplierEvents;

        internal void ExecuteOnGetInboxReplierEvents(InboxReplierControllerApi.GetInboxReplierEventsApiResponse apiResponse)
        {
            OnGetInboxReplierEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInboxReplierEvents(Exception exception)
        {
            OnErrorGetInboxReplierEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetInboxRepliers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetInboxRepliers;

        internal void ExecuteOnGetInboxRepliers(InboxReplierControllerApi.GetInboxRepliersApiResponse apiResponse)
        {
            OnGetInboxRepliers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInboxRepliers(Exception exception)
        {
            OnErrorGetInboxRepliers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateInboxReplier;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateInboxReplier;

        internal void ExecuteOnUpdateInboxReplier(InboxReplierControllerApi.UpdateInboxReplierApiResponse apiResponse)
        {
            OnUpdateInboxReplier?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateInboxReplier(Exception exception)
        {
            OnErrorUpdateInboxReplier?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class InboxReplierControllerApi : IInboxReplierControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<InboxReplierControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public InboxReplierControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxReplierControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxReplierControllerApi(ILogger<InboxReplierControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, InboxReplierControllerApiEvents inboxReplierControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<InboxReplierControllerApi>();
            HttpClient = httpClient;
            Events = inboxReplierControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateNewInboxReplier(CreateInboxReplierOptions createInboxReplierOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createInboxReplierOptions"></param>
        /// <returns></returns>
        private void ValidateCreateNewInboxReplier(CreateInboxReplierOptions createInboxReplierOptions)
        {
            if (createInboxReplierOptions == null)
                throw new ArgumentNullException(nameof(createInboxReplierOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createInboxReplierOptions"></param>
        private void AfterCreateNewInboxReplierDefaultImplementation(ICreateNewInboxReplierApiResponse apiResponseLocalVar, CreateInboxReplierOptions createInboxReplierOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateNewInboxReplier(ref suppressDefaultLog, apiResponseLocalVar, createInboxReplierOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createInboxReplierOptions"></param>
        partial void AfterCreateNewInboxReplier(ref bool suppressDefaultLog, ICreateNewInboxReplierApiResponse apiResponseLocalVar, CreateInboxReplierOptions createInboxReplierOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createInboxReplierOptions"></param>
        private void OnErrorCreateNewInboxReplierDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateInboxReplierOptions createInboxReplierOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateNewInboxReplier(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createInboxReplierOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createInboxReplierOptions"></param>
        partial void OnErrorCreateNewInboxReplier(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateInboxReplierOptions createInboxReplierOptions);

        /// <summary>
        /// Create an inbox replier Create a new inbox rule for reply toing, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <param name="createInboxReplierOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxReplierApiResponse"/>&gt;</returns>
        public async Task<ICreateNewInboxReplierApiResponse> CreateNewInboxReplierOrDefaultAsync(CreateInboxReplierOptions createInboxReplierOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNewInboxReplierAsync(createInboxReplierOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an inbox replier Create a new inbox rule for reply toing, blocking, and allowing emails when sending and receiving
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInboxReplierOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewInboxReplierApiResponse"/>&gt;</returns>
        public async Task<ICreateNewInboxReplierApiResponse> CreateNewInboxReplierAsync(CreateInboxReplierOptions createInboxReplierOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNewInboxReplier(createInboxReplierOptions);

                FormatCreateNewInboxReplier(createInboxReplierOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/repliers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/repliers");

                    httpRequestMessageLocalVar.Content = (createInboxReplierOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createInboxReplierOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateNewInboxReplierApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNewInboxReplierApiResponse>();

                        CreateNewInboxReplierApiResponse apiResponseLocalVar = new CreateNewInboxReplierApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/repliers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNewInboxReplierDefaultImplementation(apiResponseLocalVar, createInboxReplierOptions);

                        Events.ExecuteOnCreateNewInboxReplier(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNewInboxReplierDefaultImplementation(e, "/repliers", uriBuilderLocalVar.Path, createInboxReplierOptions);
                Events.ExecuteOnErrorCreateNewInboxReplier(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNewInboxReplierApiResponse"/>
        /// </summary>
        public partial class CreateNewInboxReplierApiResponse : mailslurp.Client.ApiResponse, ICreateNewInboxReplierApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNewInboxReplierApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNewInboxReplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNewInboxReplierApiResponse(ILogger<CreateNewInboxReplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxReplierDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxReplierDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxReplierDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteInboxReplier(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteInboxReplierDefaultImplementation(IDeleteInboxReplierApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteInboxReplier(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteInboxReplier(ref bool suppressDefaultLog, IDeleteInboxReplierApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteInboxReplierDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteInboxReplier(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteInboxReplier(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Delete an inbox replier Delete inbox replier
        /// </summary>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxReplierApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxReplierApiResponse> DeleteInboxReplierOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteInboxReplierAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an inbox replier Delete inbox replier
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxReplierApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxReplierApiResponse> DeleteInboxReplierAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteInboxReplier(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/repliers/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/repliers/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteInboxReplierApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteInboxReplierApiResponse>();

                        DeleteInboxReplierApiResponse apiResponseLocalVar = new DeleteInboxReplierApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/repliers/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteInboxReplierDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteInboxReplier(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteInboxReplierDefaultImplementation(e, "/repliers/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteInboxReplier(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteInboxReplierApiResponse"/>
        /// </summary>
        public partial class DeleteInboxReplierApiResponse : mailslurp.Client.ApiResponse, IDeleteInboxReplierApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteInboxReplierApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteInboxReplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteInboxReplierApiResponse(ILogger<DeleteInboxReplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteInboxRepliers(ref Option<Guid> inboxId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        private void AfterDeleteInboxRepliersDefaultImplementation(IDeleteInboxRepliersApiResponse apiResponseLocalVar, Option<Guid> inboxId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteInboxRepliers(ref suppressDefaultLog, apiResponseLocalVar, inboxId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        partial void AfterDeleteInboxRepliers(ref bool suppressDefaultLog, IDeleteInboxRepliersApiResponse apiResponseLocalVar, Option<Guid> inboxId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        private void OnErrorDeleteInboxRepliersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteInboxRepliers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        partial void OnErrorDeleteInboxRepliers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId);

        /// <summary>
        /// Delete inbox repliers Delete inbox repliers. Accepts optional inboxId filter.
        /// </summary>
        /// <param name="inboxId">Optional inbox id to attach replier to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRepliersApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxRepliersApiResponse> DeleteInboxRepliersOrDefaultAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteInboxRepliersAsync(inboxId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete inbox repliers Delete inbox repliers. Accepts optional inboxId filter.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to attach replier to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInboxRepliersApiResponse"/>&gt;</returns>
        public async Task<IDeleteInboxRepliersApiResponse> DeleteInboxRepliersAsync(Option<Guid> inboxId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteInboxRepliers(ref inboxId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/repliers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/repliers");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteInboxRepliersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteInboxRepliersApiResponse>();

                        DeleteInboxRepliersApiResponse apiResponseLocalVar = new DeleteInboxRepliersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/repliers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteInboxRepliersDefaultImplementation(apiResponseLocalVar, inboxId);

                        Events.ExecuteOnDeleteInboxRepliers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteInboxRepliersDefaultImplementation(e, "/repliers", uriBuilderLocalVar.Path, inboxId);
                Events.ExecuteOnErrorDeleteInboxRepliers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteInboxRepliersApiResponse"/>
        /// </summary>
        public partial class DeleteInboxRepliersApiResponse : mailslurp.Client.ApiResponse, IDeleteInboxRepliersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteInboxRepliersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteInboxRepliersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteInboxRepliersApiResponse(ILogger<DeleteInboxRepliersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllInboxReplierEvents(ref Option<Guid> inboxReplierId, ref Option<Guid> inboxId, ref Option<Guid> emailId, ref Option<Guid> sentId, ref Option<int> page, ref Option<int> size, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetAllInboxReplierEvents(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxReplierId"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="sentId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        private void AfterGetAllInboxReplierEventsDefaultImplementation(IGetAllInboxReplierEventsApiResponse apiResponseLocalVar, Option<Guid> inboxReplierId, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> sentId, Option<int> page, Option<int> size, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetAllInboxReplierEvents(ref suppressDefaultLog, apiResponseLocalVar, inboxReplierId, inboxId, emailId, sentId, page, size, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxReplierId"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="sentId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        partial void AfterGetAllInboxReplierEvents(ref bool suppressDefaultLog, IGetAllInboxReplierEventsApiResponse apiResponseLocalVar, Option<Guid> inboxReplierId, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> sentId, Option<int> page, Option<int> size, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxReplierId"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="sentId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        private void OnErrorGetAllInboxReplierEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxReplierId, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> sentId, Option<int> page, Option<int> size, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllInboxReplierEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxReplierId, inboxId, emailId, sentId, page, size, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxReplierId"></param>
        /// <param name="inboxId"></param>
        /// <param name="emailId"></param>
        /// <param name="sentId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetAllInboxReplierEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxReplierId, Option<Guid> inboxId, Option<Guid> emailId, Option<Guid> sentId, Option<int> page, Option<int> size, Option<string> sort);

        /// <summary>
        /// Get inbox replier event list Get all inbox ruleset events
        /// </summary>
        /// <param name="inboxReplierId">ID of inbox replier (optional)</param>
        /// <param name="inboxId">ID of inbox (optional)</param>
        /// <param name="emailId">ID of email (optional)</param>
        /// <param name="sentId">ID of sent (optional)</param>
        /// <param name="page">Optional page index in inbox replier event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllInboxReplierEventsApiResponse"/>&gt;</returns>
        public async Task<IGetAllInboxReplierEventsApiResponse> GetAllInboxReplierEventsOrDefaultAsync(Option<Guid> inboxReplierId = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> sentId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllInboxReplierEventsAsync(inboxReplierId, inboxId, emailId, sentId, page, size, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get inbox replier event list Get all inbox ruleset events
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxReplierId">ID of inbox replier (optional)</param>
        /// <param name="inboxId">ID of inbox (optional)</param>
        /// <param name="emailId">ID of email (optional)</param>
        /// <param name="sentId">ID of sent (optional)</param>
        /// <param name="page">Optional page index in inbox replier event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllInboxReplierEventsApiResponse"/>&gt;</returns>
        public async Task<IGetAllInboxReplierEventsApiResponse> GetAllInboxReplierEventsAsync(Option<Guid> inboxReplierId = default, Option<Guid> inboxId = default, Option<Guid> emailId = default, Option<Guid> sentId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllInboxReplierEvents(sort);

                FormatGetAllInboxReplierEvents(ref inboxReplierId, ref inboxId, ref emailId, ref sentId, ref page, ref size, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/repliers/events"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/repliers/events");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxReplierId.IsSet)
                        parseQueryStringLocalVar["inboxReplierId"] = ClientUtils.ParameterToString(inboxReplierId.Value);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (emailId.IsSet)
                        parseQueryStringLocalVar["emailId"] = ClientUtils.ParameterToString(emailId.Value);

                    if (sentId.IsSet)
                        parseQueryStringLocalVar["sentId"] = ClientUtils.ParameterToString(sentId.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllInboxReplierEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllInboxReplierEventsApiResponse>();

                        GetAllInboxReplierEventsApiResponse apiResponseLocalVar = new GetAllInboxReplierEventsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/repliers/events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllInboxReplierEventsDefaultImplementation(apiResponseLocalVar, inboxReplierId, inboxId, emailId, sentId, page, size, sort);

                        Events.ExecuteOnGetAllInboxReplierEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllInboxReplierEventsDefaultImplementation(e, "/repliers/events", uriBuilderLocalVar.Path, inboxReplierId, inboxId, emailId, sentId, page, size, sort);
                Events.ExecuteOnErrorGetAllInboxReplierEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllInboxReplierEventsApiResponse"/>
        /// </summary>
        public partial class GetAllInboxReplierEventsApiResponse : mailslurp.Client.ApiResponse, IGetAllInboxReplierEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllInboxReplierEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllInboxReplierEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllInboxReplierEventsApiResponse(ILogger<GetAllInboxReplierEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageInboxReplierEvents Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageInboxReplierEvents>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageInboxReplierEvents result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInboxReplier(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetInboxReplierDefaultImplementation(IGetInboxReplierApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetInboxReplier(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetInboxReplier(ref bool suppressDefaultLog, IGetInboxReplierApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetInboxReplierDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInboxReplier(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetInboxReplier(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get an inbox replier Get inbox ruleset
        /// </summary>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxReplierApiResponse"/>&gt;</returns>
        public async Task<IGetInboxReplierApiResponse> GetInboxReplierOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInboxReplierAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox replier Get inbox ruleset
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxReplierApiResponse"/>&gt;</returns>
        public async Task<IGetInboxReplierApiResponse> GetInboxReplierAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetInboxReplier(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/repliers/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/repliers/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetInboxReplierApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInboxReplierApiResponse>();

                        GetInboxReplierApiResponse apiResponseLocalVar = new GetInboxReplierApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/repliers/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInboxReplierDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetInboxReplier(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInboxReplierDefaultImplementation(e, "/repliers/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetInboxReplier(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInboxReplierApiResponse"/>
        /// </summary>
        public partial class GetInboxReplierApiResponse : mailslurp.Client.ApiResponse, IGetInboxReplierApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInboxReplierApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInboxReplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInboxReplierApiResponse(ILogger<GetInboxReplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxReplierDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxReplierDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxReplierDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInboxReplierEvents(ref Guid id, ref Option<int> page, ref Option<int> size, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetInboxReplierEvents(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        private void AfterGetInboxReplierEventsDefaultImplementation(IGetInboxReplierEventsApiResponse apiResponseLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetInboxReplierEvents(ref suppressDefaultLog, apiResponseLocalVar, id, page, size, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        partial void AfterGetInboxReplierEvents(ref bool suppressDefaultLog, IGetInboxReplierEventsApiResponse apiResponseLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        private void OnErrorGetInboxReplierEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInboxReplierEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, page, size, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetInboxReplierEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<int> page, Option<int> size, Option<string> sort);

        /// <summary>
        /// Get an inbox replier event list Get inbox ruleset events
        /// </summary>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="page">Optional page index in inbox replier event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxReplierEventsApiResponse"/>&gt;</returns>
        public async Task<IGetInboxReplierEventsApiResponse> GetInboxReplierEventsOrDefaultAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInboxReplierEventsAsync(id, page, size, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an inbox replier event list Get inbox ruleset events
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="page">Optional page index in inbox replier event list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier event list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxReplierEventsApiResponse"/>&gt;</returns>
        public async Task<IGetInboxReplierEventsApiResponse> GetInboxReplierEventsAsync(Guid id, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInboxReplierEvents(sort);

                FormatGetInboxReplierEvents(ref id, ref page, ref size, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/repliers/{id}/events"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/repliers/{id}/events");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetInboxReplierEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInboxReplierEventsApiResponse>();

                        GetInboxReplierEventsApiResponse apiResponseLocalVar = new GetInboxReplierEventsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/repliers/{id}/events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInboxReplierEventsDefaultImplementation(apiResponseLocalVar, id, page, size, sort);

                        Events.ExecuteOnGetInboxReplierEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInboxReplierEventsDefaultImplementation(e, "/repliers/{id}/events", uriBuilderLocalVar.Path, id, page, size, sort);
                Events.ExecuteOnErrorGetInboxReplierEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInboxReplierEventsApiResponse"/>
        /// </summary>
        public partial class GetInboxReplierEventsApiResponse : mailslurp.Client.ApiResponse, IGetInboxReplierEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInboxReplierEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInboxReplierEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInboxReplierEventsApiResponse(ILogger<GetInboxReplierEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageInboxReplierEvents Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageInboxReplierEvents>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageInboxReplierEvents result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInboxRepliers(ref Option<Guid> inboxId, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetInboxRepliers(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void AfterGetInboxRepliersDefaultImplementation(IGetInboxRepliersApiResponse apiResponseLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLog = false;
            AfterGetInboxRepliers(ref suppressDefaultLog, apiResponseLocalVar, inboxId, page, size, sort, since, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void AfterGetInboxRepliers(ref bool suppressDefaultLog, IGetInboxRepliersApiResponse apiResponseLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void OnErrorGetInboxRepliersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInboxRepliers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId, page, size, sort, since, before);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void OnErrorGetInboxRepliers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// List inbox repliers List all repliers attached to an inbox
        /// </summary>
        /// <param name="inboxId">Optional inbox id to get repliers from (optional)</param>
        /// <param name="page">Optional page index in inbox replier list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRepliersApiResponse"/>&gt;</returns>
        public async Task<IGetInboxRepliersApiResponse> GetInboxRepliersOrDefaultAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInboxRepliersAsync(inboxId, page, size, sort, since, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List inbox repliers List all repliers attached to an inbox
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Optional inbox id to get repliers from (optional)</param>
        /// <param name="page">Optional page index in inbox replier list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in inbox replier list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxRepliersApiResponse"/>&gt;</returns>
        public async Task<IGetInboxRepliersApiResponse> GetInboxRepliersAsync(Option<Guid> inboxId = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInboxRepliers(sort);

                FormatGetInboxRepliers(ref inboxId, ref page, ref size, ref sort, ref since, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/repliers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/repliers");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetInboxRepliersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInboxRepliersApiResponse>();

                        GetInboxRepliersApiResponse apiResponseLocalVar = new GetInboxRepliersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/repliers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInboxRepliersDefaultImplementation(apiResponseLocalVar, inboxId, page, size, sort, since, before);

                        Events.ExecuteOnGetInboxRepliers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInboxRepliersDefaultImplementation(e, "/repliers", uriBuilderLocalVar.Path, inboxId, page, size, sort, since, before);
                Events.ExecuteOnErrorGetInboxRepliers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInboxRepliersApiResponse"/>
        /// </summary>
        public partial class GetInboxRepliersApiResponse : mailslurp.Client.ApiResponse, IGetInboxRepliersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInboxRepliersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInboxRepliersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInboxRepliersApiResponse(ILogger<GetInboxRepliersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageInboxReplierDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageInboxReplierDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageInboxReplierDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateInboxReplier(ref Guid id, UpdateInboxReplierOptions updateInboxReplierOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateInboxReplierOptions"></param>
        /// <returns></returns>
        private void ValidateUpdateInboxReplier(UpdateInboxReplierOptions updateInboxReplierOptions)
        {
            if (updateInboxReplierOptions == null)
                throw new ArgumentNullException(nameof(updateInboxReplierOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateInboxReplierOptions"></param>
        private void AfterUpdateInboxReplierDefaultImplementation(IUpdateInboxReplierApiResponse apiResponseLocalVar, Guid id, UpdateInboxReplierOptions updateInboxReplierOptions)
        {
            bool suppressDefaultLog = false;
            AfterUpdateInboxReplier(ref suppressDefaultLog, apiResponseLocalVar, id, updateInboxReplierOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateInboxReplierOptions"></param>
        partial void AfterUpdateInboxReplier(ref bool suppressDefaultLog, IUpdateInboxReplierApiResponse apiResponseLocalVar, Guid id, UpdateInboxReplierOptions updateInboxReplierOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateInboxReplierOptions"></param>
        private void OnErrorUpdateInboxReplierDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, UpdateInboxReplierOptions updateInboxReplierOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateInboxReplier(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, updateInboxReplierOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="updateInboxReplierOptions"></param>
        partial void OnErrorUpdateInboxReplier(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, UpdateInboxReplierOptions updateInboxReplierOptions);

        /// <summary>
        /// Update an inbox replier Update inbox ruleset
        /// </summary>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="updateInboxReplierOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInboxReplierApiResponse"/>&gt;</returns>
        public async Task<IUpdateInboxReplierApiResponse> UpdateInboxReplierOrDefaultAsync(Guid id, UpdateInboxReplierOptions updateInboxReplierOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateInboxReplierAsync(id, updateInboxReplierOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update an inbox replier Update inbox ruleset
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of inbox replier</param>
        /// <param name="updateInboxReplierOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInboxReplierApiResponse"/>&gt;</returns>
        public async Task<IUpdateInboxReplierApiResponse> UpdateInboxReplierAsync(Guid id, UpdateInboxReplierOptions updateInboxReplierOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateInboxReplier(updateInboxReplierOptions);

                FormatUpdateInboxReplier(ref id, updateInboxReplierOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/repliers/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/repliers/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (updateInboxReplierOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateInboxReplierOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateInboxReplierApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateInboxReplierApiResponse>();

                        UpdateInboxReplierApiResponse apiResponseLocalVar = new UpdateInboxReplierApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/repliers/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateInboxReplierDefaultImplementation(apiResponseLocalVar, id, updateInboxReplierOptions);

                        Events.ExecuteOnUpdateInboxReplier(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateInboxReplierDefaultImplementation(e, "/repliers/{id}", uriBuilderLocalVar.Path, id, updateInboxReplierOptions);
                Events.ExecuteOnErrorUpdateInboxReplier(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateInboxReplierApiResponse"/>
        /// </summary>
        public partial class UpdateInboxReplierApiResponse : mailslurp.Client.ApiResponse, IUpdateInboxReplierApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateInboxReplierApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateInboxReplierApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateInboxReplierApiResponse(ILogger<UpdateInboxReplierApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.InboxReplierDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.InboxReplierDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.InboxReplierDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
