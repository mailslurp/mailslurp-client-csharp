/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImapControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch message in an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seqNum"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImapServerFetchResult</returns>
        ImapServerFetchResult ImapServerFetch(long seqNum, Guid? inboxId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Fetch message in an inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seqNum"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImapServerFetchResult</returns>
        ApiResponse<ImapServerFetchResult> ImapServerFetchWithHttpInfo(long seqNum, Guid? inboxId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get a message by email ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">Email ID to get</param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImapServerGetResult</returns>
        ImapServerGetResult ImapServerGet(Guid emailId, Guid? inboxId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get a message by email ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">Email ID to get</param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImapServerGetResult</returns>
        ApiResponse<ImapServerGetResult> ImapServerGetWithHttpInfo(Guid emailId, Guid? inboxId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// List messages in an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerListOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImapServerListResult</returns>
        ImapServerListResult ImapServerList(ImapServerListOptions imapServerListOptions, Guid? inboxId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// List messages in an inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerListOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImapServerListResult</returns>
        ApiResponse<ImapServerListResult> ImapServerListWithHttpInfo(ImapServerListOptions imapServerListOptions, Guid? inboxId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Search messages in an inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerSearchOptions"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImapServerSearchResult</returns>
        ImapServerSearchResult ImapServerSearch(ImapServerSearchOptions imapServerSearchOptions, Guid? inboxId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Search messages in an inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerSearchOptions"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImapServerSearchResult</returns>
        ApiResponse<ImapServerSearchResult> ImapServerSearchWithHttpInfo(ImapServerSearchOptions imapServerSearchOptions, Guid? inboxId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get status for mailbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerStatusOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImapServerStatusResult</returns>
        ImapServerStatusResult ImapServerStatus(ImapServerStatusOptions imapServerStatusOptions, Guid? inboxId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get status for mailbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerStatusOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImapServerStatusResult</returns>
        ApiResponse<ImapServerStatusResult> ImapServerStatusWithHttpInfo(ImapServerStatusOptions imapServerStatusOptions, Guid? inboxId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update message flags
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapUpdateFlagsOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ImapServerUpdateFlags(ImapUpdateFlagsOptions imapUpdateFlagsOptions, Guid? inboxId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update message flags
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapUpdateFlagsOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImapServerUpdateFlagsWithHttpInfo(ImapUpdateFlagsOptions imapUpdateFlagsOptions, Guid? inboxId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImapControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fetch message in an inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seqNum"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImapServerFetchResult</returns>
        System.Threading.Tasks.Task<ImapServerFetchResult> ImapServerFetchAsync(long seqNum, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch message in an inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seqNum"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImapServerFetchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImapServerFetchResult>> ImapServerFetchWithHttpInfoAsync(long seqNum, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a message by email ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">Email ID to get</param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImapServerGetResult</returns>
        System.Threading.Tasks.Task<ImapServerGetResult> ImapServerGetAsync(Guid emailId, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a message by email ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">Email ID to get</param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImapServerGetResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImapServerGetResult>> ImapServerGetWithHttpInfoAsync(Guid emailId, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List messages in an inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerListOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImapServerListResult</returns>
        System.Threading.Tasks.Task<ImapServerListResult> ImapServerListAsync(ImapServerListOptions imapServerListOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List messages in an inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerListOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImapServerListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImapServerListResult>> ImapServerListWithHttpInfoAsync(ImapServerListOptions imapServerListOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search messages in an inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerSearchOptions"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImapServerSearchResult</returns>
        System.Threading.Tasks.Task<ImapServerSearchResult> ImapServerSearchAsync(ImapServerSearchOptions imapServerSearchOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search messages in an inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerSearchOptions"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImapServerSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImapServerSearchResult>> ImapServerSearchWithHttpInfoAsync(ImapServerSearchOptions imapServerSearchOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get status for mailbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerStatusOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImapServerStatusResult</returns>
        System.Threading.Tasks.Task<ImapServerStatusResult> ImapServerStatusAsync(ImapServerStatusOptions imapServerStatusOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get status for mailbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerStatusOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImapServerStatusResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImapServerStatusResult>> ImapServerStatusWithHttpInfoAsync(ImapServerStatusOptions imapServerStatusOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update message flags
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapUpdateFlagsOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImapServerUpdateFlagsAsync(ImapUpdateFlagsOptions imapUpdateFlagsOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update message flags
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapUpdateFlagsOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImapServerUpdateFlagsWithHttpInfoAsync(ImapUpdateFlagsOptions imapUpdateFlagsOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImapControllerApi : IImapControllerApiSync, IImapControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ImapControllerApi : IImapControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImapControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImapControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImapControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImapControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImapControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImapControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImapControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ImapControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fetch message in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seqNum"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImapServerFetchResult</returns>
        public ImapServerFetchResult ImapServerFetch(long seqNum, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ImapServerFetchResult> localVarResponse = ImapServerFetchWithHttpInfo(seqNum, inboxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch message in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seqNum"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImapServerFetchResult</returns>
        public mailslurp.Client.ApiResponse<ImapServerFetchResult> ImapServerFetchWithHttpInfo(long seqNum, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "seqNum", seqNum));

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerFetch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImapServerFetchResult>("/imap/server/fetch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerFetch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch message in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seqNum"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImapServerFetchResult</returns>
        public async System.Threading.Tasks.Task<ImapServerFetchResult> ImapServerFetchAsync(long seqNum, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<ImapServerFetchResult> localVarResponse = await ImapServerFetchWithHttpInfoAsync(seqNum, inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch message in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seqNum"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImapServerFetchResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ImapServerFetchResult>> ImapServerFetchWithHttpInfoAsync(long seqNum, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "seqNum", seqNum));

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerFetch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImapServerFetchResult>("/imap/server/fetch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerFetch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a message by email ID 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">Email ID to get</param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImapServerGetResult</returns>
        public ImapServerGetResult ImapServerGet(Guid emailId, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ImapServerGetResult> localVarResponse = ImapServerGetWithHttpInfo(emailId, inboxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a message by email ID 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">Email ID to get</param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImapServerGetResult</returns>
        public mailslurp.Client.ApiResponse<ImapServerGetResult> ImapServerGetWithHttpInfo(Guid emailId, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailId", emailId));
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImapServerGetResult>("/imap/server/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a message by email ID 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">Email ID to get</param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImapServerGetResult</returns>
        public async System.Threading.Tasks.Task<ImapServerGetResult> ImapServerGetAsync(Guid emailId, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<ImapServerGetResult> localVarResponse = await ImapServerGetWithHttpInfoAsync(emailId, inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a message by email ID 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">Email ID to get</param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImapServerGetResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ImapServerGetResult>> ImapServerGetWithHttpInfoAsync(Guid emailId, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailId", emailId));
            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImapServerGetResult>("/imap/server/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List messages in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerListOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImapServerListResult</returns>
        public ImapServerListResult ImapServerList(ImapServerListOptions imapServerListOptions, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ImapServerListResult> localVarResponse = ImapServerListWithHttpInfo(imapServerListOptions, inboxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List messages in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerListOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImapServerListResult</returns>
        public mailslurp.Client.ApiResponse<ImapServerListResult> ImapServerListWithHttpInfo(ImapServerListOptions imapServerListOptions, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            // verify the required parameter 'imapServerListOptions' is set
            if (imapServerListOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'imapServerListOptions' when calling ImapControllerApi->ImapServerList");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = imapServerListOptions;

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImapServerListResult>("/imap/server/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List messages in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerListOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImapServerListResult</returns>
        public async System.Threading.Tasks.Task<ImapServerListResult> ImapServerListAsync(ImapServerListOptions imapServerListOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<ImapServerListResult> localVarResponse = await ImapServerListWithHttpInfoAsync(imapServerListOptions, inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List messages in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerListOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImapServerListResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ImapServerListResult>> ImapServerListWithHttpInfoAsync(ImapServerListOptions imapServerListOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imapServerListOptions' is set
            if (imapServerListOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'imapServerListOptions' when calling ImapControllerApi->ImapServerList");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = imapServerListOptions;

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImapServerListResult>("/imap/server/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search messages in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerSearchOptions"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImapServerSearchResult</returns>
        public ImapServerSearchResult ImapServerSearch(ImapServerSearchOptions imapServerSearchOptions, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ImapServerSearchResult> localVarResponse = ImapServerSearchWithHttpInfo(imapServerSearchOptions, inboxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search messages in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerSearchOptions"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImapServerSearchResult</returns>
        public mailslurp.Client.ApiResponse<ImapServerSearchResult> ImapServerSearchWithHttpInfo(ImapServerSearchOptions imapServerSearchOptions, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            // verify the required parameter 'imapServerSearchOptions' is set
            if (imapServerSearchOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'imapServerSearchOptions' when calling ImapControllerApi->ImapServerSearch");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = imapServerSearchOptions;

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImapServerSearchResult>("/imap/server/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search messages in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerSearchOptions"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImapServerSearchResult</returns>
        public async System.Threading.Tasks.Task<ImapServerSearchResult> ImapServerSearchAsync(ImapServerSearchOptions imapServerSearchOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<ImapServerSearchResult> localVarResponse = await ImapServerSearchWithHttpInfoAsync(imapServerSearchOptions, inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search messages in an inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerSearchOptions"></param>
        /// <param name="inboxId">Inbox ID to search (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImapServerSearchResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ImapServerSearchResult>> ImapServerSearchWithHttpInfoAsync(ImapServerSearchOptions imapServerSearchOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imapServerSearchOptions' is set
            if (imapServerSearchOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'imapServerSearchOptions' when calling ImapControllerApi->ImapServerSearch");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = imapServerSearchOptions;

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImapServerSearchResult>("/imap/server/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get status for mailbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerStatusOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImapServerStatusResult</returns>
        public ImapServerStatusResult ImapServerStatus(ImapServerStatusOptions imapServerStatusOptions, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ImapServerStatusResult> localVarResponse = ImapServerStatusWithHttpInfo(imapServerStatusOptions, inboxId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get status for mailbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerStatusOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImapServerStatusResult</returns>
        public mailslurp.Client.ApiResponse<ImapServerStatusResult> ImapServerStatusWithHttpInfo(ImapServerStatusOptions imapServerStatusOptions, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            // verify the required parameter 'imapServerStatusOptions' is set
            if (imapServerStatusOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'imapServerStatusOptions' when calling ImapControllerApi->ImapServerStatus");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = imapServerStatusOptions;

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImapServerStatusResult>("/imap/server/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get status for mailbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerStatusOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImapServerStatusResult</returns>
        public async System.Threading.Tasks.Task<ImapServerStatusResult> ImapServerStatusAsync(ImapServerStatusOptions imapServerStatusOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<ImapServerStatusResult> localVarResponse = await ImapServerStatusWithHttpInfoAsync(imapServerStatusOptions, inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get status for mailbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapServerStatusOptions"></param>
        /// <param name="inboxId">Inbox ID to list (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImapServerStatusResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ImapServerStatusResult>> ImapServerStatusWithHttpInfoAsync(ImapServerStatusOptions imapServerStatusOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imapServerStatusOptions' is set
            if (imapServerStatusOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'imapServerStatusOptions' when calling ImapControllerApi->ImapServerStatus");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = imapServerStatusOptions;

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImapServerStatusResult>("/imap/server/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update message flags
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapUpdateFlagsOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ImapServerUpdateFlags(ImapUpdateFlagsOptions imapUpdateFlagsOptions, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            ImapServerUpdateFlagsWithHttpInfo(imapUpdateFlagsOptions, inboxId);
        }

        /// <summary>
        ///  Update message flags
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapUpdateFlagsOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> ImapServerUpdateFlagsWithHttpInfo(ImapUpdateFlagsOptions imapUpdateFlagsOptions, Guid? inboxId = default(Guid?), int operationIndex = 0)
        {
            // verify the required parameter 'imapUpdateFlagsOptions' is set
            if (imapUpdateFlagsOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'imapUpdateFlagsOptions' when calling ImapControllerApi->ImapServerUpdateFlags");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = imapUpdateFlagsOptions;

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerUpdateFlags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/imap/server/update-flags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerUpdateFlags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update message flags
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapUpdateFlagsOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImapServerUpdateFlagsAsync(ImapUpdateFlagsOptions imapUpdateFlagsOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ImapServerUpdateFlagsWithHttpInfoAsync(imapUpdateFlagsOptions, inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Update message flags
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imapUpdateFlagsOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> ImapServerUpdateFlagsWithHttpInfoAsync(ImapUpdateFlagsOptions imapUpdateFlagsOptions, Guid? inboxId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imapUpdateFlagsOptions' is set
            if (imapUpdateFlagsOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'imapUpdateFlagsOptions' when calling ImapControllerApi->ImapServerUpdateFlags");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (inboxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));
            }
            localVarRequestOptions.Data = imapUpdateFlagsOptions;

            localVarRequestOptions.Operation = "ImapControllerApi.ImapServerUpdateFlags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/imap/server/update-flags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImapServerUpdateFlags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
