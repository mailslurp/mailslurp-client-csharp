/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhoneControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an emergency address
        /// </summary>
        /// <remarks>
        /// Add an emergency address to a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmergencyAddress</returns>
        EmergencyAddress CreateEmergencyAddress(CreateEmergencyAddressOptions createEmergencyAddressOptions, int operationIndex = 0);

        /// <summary>
        /// Create an emergency address
        /// </summary>
        /// <remarks>
        /// Add an emergency address to a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmergencyAddress</returns>
        ApiResponse<EmergencyAddress> CreateEmergencyAddressWithHttpInfo(CreateEmergencyAddressOptions createEmergencyAddressOptions, int operationIndex = 0);
        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
        /// </summary>
        /// <remarks>
        /// Create new phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        PhoneNumberDto CreatePhoneNumber(CreatePhoneNumberOptions createPhoneNumberOptions, int operationIndex = 0);

        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
        /// </summary>
        /// <remarks>
        /// Create new phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        ApiResponse<PhoneNumberDto> CreatePhoneNumberWithHttpInfo(CreatePhoneNumberOptions createPhoneNumberOptions, int operationIndex = 0);
        /// <summary>
        /// Delete an emergency address
        /// </summary>
        /// <remarks>
        /// Delete an emergency address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmptyResponseDto</returns>
        EmptyResponseDto DeleteEmergencyAddress(Guid addressId, int operationIndex = 0);

        /// <summary>
        /// Delete an emergency address
        /// </summary>
        /// <remarks>
        /// Delete an emergency address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmptyResponseDto</returns>
        ApiResponse<EmptyResponseDto> DeleteEmergencyAddressWithHttpInfo(Guid addressId, int operationIndex = 0);
        /// <summary>
        /// Delete a phone number
        /// </summary>
        /// <remarks>
        /// Remove phone number from account
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePhoneNumber(Guid phoneNumberId, int operationIndex = 0);

        /// <summary>
        /// Delete a phone number
        /// </summary>
        /// <remarks>
        /// Remove phone number from account
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePhoneNumberWithHttpInfo(Guid phoneNumberId, int operationIndex = 0);
        /// <summary>
        /// Get the latest messages for all phones
        /// </summary>
        /// <remarks>
        /// List all message threads for all phones
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagePhoneMessageThreadProjection</returns>
        PagePhoneMessageThreadProjection GetAllPhoneMessageThreads(int? page = default, int? size = default, int operationIndex = 0);

        /// <summary>
        /// Get the latest messages for all phones
        /// </summary>
        /// <remarks>
        /// List all message threads for all phones
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagePhoneMessageThreadProjection</returns>
        ApiResponse<PagePhoneMessageThreadProjection> GetAllPhoneMessageThreadsWithHttpInfo(int? page = default, int? size = default, int operationIndex = 0);
        /// <summary>
        /// Get consent status
        /// </summary>
        /// <remarks>
        /// Get the status of phone usage consent
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentStatusDto</returns>
        ConsentStatusDto GetConsentStatus(int operationIndex = 0);

        /// <summary>
        /// Get consent status
        /// </summary>
        /// <remarks>
        /// Get the status of phone usage consent
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentStatusDto</returns>
        ApiResponse<ConsentStatusDto> GetConsentStatusWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get an emergency address
        /// </summary>
        /// <remarks>
        /// Fetch an emergency address by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmergencyAddress</returns>
        EmergencyAddress GetEmergencyAddress(Guid addressId, int operationIndex = 0);

        /// <summary>
        /// Get an emergency address
        /// </summary>
        /// <remarks>
        /// Fetch an emergency address by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmergencyAddress</returns>
        ApiResponse<EmergencyAddress> GetEmergencyAddressWithHttpInfo(Guid addressId, int operationIndex = 0);
        /// <summary>
        /// Get emergency addresses
        /// </summary>
        /// <remarks>
        /// List emergency addresses
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EmergencyAddressDto&gt;</returns>
        List<EmergencyAddressDto> GetEmergencyAddresses(int operationIndex = 0);

        /// <summary>
        /// Get emergency addresses
        /// </summary>
        /// <remarks>
        /// List emergency addresses
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EmergencyAddressDto&gt;</returns>
        ApiResponse<List<EmergencyAddressDto>> GetEmergencyAddressesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get messages in a phone thread
        /// </summary>
        /// <remarks>
        /// List message thread messages for a phone message thread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagePhoneMessageThreadItemProjection</returns>
        PagePhoneMessageThreadItemProjection GetPhoneMessageThreadItems(Guid phoneNumberId, string otherNumber, int? page = default, int? size = default, int operationIndex = 0);

        /// <summary>
        /// Get messages in a phone thread
        /// </summary>
        /// <remarks>
        /// List message thread messages for a phone message thread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagePhoneMessageThreadItemProjection</returns>
        ApiResponse<PagePhoneMessageThreadItemProjection> GetPhoneMessageThreadItemsWithHttpInfo(Guid phoneNumberId, string otherNumber, int? page = default, int? size = default, int operationIndex = 0);
        /// <summary>
        /// Get the latest message preview for a thread
        /// </summary>
        /// <remarks>
        /// List message threads for a phone
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagePhoneMessageThreadProjection</returns>
        PagePhoneMessageThreadProjection GetPhoneMessageThreads(Guid phoneNumberId, int? page = default, int? size = default, int operationIndex = 0);

        /// <summary>
        /// Get the latest message preview for a thread
        /// </summary>
        /// <remarks>
        /// List message threads for a phone
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagePhoneMessageThreadProjection</returns>
        ApiResponse<PagePhoneMessageThreadProjection> GetPhoneMessageThreadsWithHttpInfo(Guid phoneNumberId, int? page = default, int? size = default, int operationIndex = 0);
        /// <summary>
        /// Get a phone number by ID
        /// </summary>
        /// <remarks>
        /// Get a phone number by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        PhoneNumberDto GetPhoneNumber(Guid phoneNumberId, int operationIndex = 0);

        /// <summary>
        /// Get a phone number by ID
        /// </summary>
        /// <remarks>
        /// Get a phone number by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        ApiResponse<PhoneNumberDto> GetPhoneNumberWithHttpInfo(Guid phoneNumberId, int operationIndex = 0);
        /// <summary>
        /// Get a phone number by name
        /// </summary>
        /// <remarks>
        /// Get a phone number by name
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        PhoneNumberDto GetPhoneNumberByName(string name, int operationIndex = 0);

        /// <summary>
        /// Get a phone number by name
        /// </summary>
        /// <remarks>
        /// Get a phone number by name
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        ApiResponse<PhoneNumberDto> GetPhoneNumberByNameWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// Get a phone number by phone number
        /// </summary>
        /// <remarks>
        /// Get a phone number by phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        PhoneNumberDto GetPhoneNumberByPhoneNumber(string phoneNumber, int operationIndex = 0);

        /// <summary>
        /// Get a phone number by phone number
        /// </summary>
        /// <remarks>
        /// Get a phone number by phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        ApiResponse<PhoneNumberDto> GetPhoneNumberByPhoneNumberWithHttpInfo(string phoneNumber, int operationIndex = 0);
        /// <summary>
        /// Get phone numbers
        /// </summary>
        /// <remarks>
        /// List phone numbers for account
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagePhoneNumberProjection</returns>
        PagePhoneNumberProjection GetPhoneNumbers(string phoneCountry = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, List<Guid> include = default, bool? favourite = default, int operationIndex = 0);

        /// <summary>
        /// Get phone numbers
        /// </summary>
        /// <remarks>
        /// List phone numbers for account
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagePhoneNumberProjection</returns>
        ApiResponse<PagePhoneNumberProjection> GetPhoneNumbersWithHttpInfo(string phoneCountry = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, List<Guid> include = default, bool? favourite = default, int operationIndex = 0);
        /// <summary>
        /// Get phone plans
        /// </summary>
        /// <remarks>
        /// Get phone number plans
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PhonePlanDto&gt;</returns>
        List<PhonePlanDto> GetPhonePlans(int operationIndex = 0);

        /// <summary>
        /// Get phone plans
        /// </summary>
        /// <remarks>
        /// Get phone number plans
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PhonePlanDto&gt;</returns>
        ApiResponse<List<PhonePlanDto>> GetPhonePlansWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get phone plans availability
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhonePlanAvailability</returns>
        PhonePlanAvailability GetPhonePlansAvailability(int operationIndex = 0);

        /// <summary>
        /// Get phone plans availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhonePlanAvailability</returns>
        ApiResponse<PhonePlanAvailability> GetPhonePlansAvailabilityWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List sent TXT messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get sent SMS messages for a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageSentSmsProjection</returns>
        PageSentSmsProjection GetSentSmsByPhoneNumber(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, int operationIndex = 0);

        /// <summary>
        /// List sent TXT messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get sent SMS messages for a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageSentSmsProjection</returns>
        ApiResponse<PageSentSmsProjection> GetSentSmsByPhoneNumberWithHttpInfo(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, int operationIndex = 0);
        /// <summary>
        /// List SMS messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get SMS messages for a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageSmsProjection</returns>
        PageSmsProjection GetSmsByPhoneNumber(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, bool? unreadOnly = default, DateTime? since = default, DateTime? before = default, string search = default, bool? favourite = default, int operationIndex = 0);

        /// <summary>
        /// List SMS messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get SMS messages for a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageSmsProjection</returns>
        ApiResponse<PageSmsProjection> GetSmsByPhoneNumberWithHttpInfo(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, bool? unreadOnly = default, DateTime? since = default, DateTime? before = default, string search = default, bool? favourite = default, int operationIndex = 0);
        /// <summary>
        /// Send TXT message from a phone number
        /// </summary>
        /// <remarks>
        /// Send SMS from a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentSmsDto</returns>
        SentSmsDto SendSmsFromPhoneNumber(Guid phoneNumberId, SmsSendOptions smsSendOptions, int operationIndex = 0);

        /// <summary>
        /// Send TXT message from a phone number
        /// </summary>
        /// <remarks>
        /// Send SMS from a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentSmsDto</returns>
        ApiResponse<SentSmsDto> SendSmsFromPhoneNumberWithHttpInfo(Guid phoneNumberId, SmsSendOptions smsSendOptions, int operationIndex = 0);
        /// <summary>
        /// Set consent status
        /// </summary>
        /// <remarks>
        /// Give or revoke consent for phone usage
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agree"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentStatusDto</returns>
        ConsentStatusDto SetConsentStatus(bool agree, int operationIndex = 0);

        /// <summary>
        /// Set consent status
        /// </summary>
        /// <remarks>
        /// Give or revoke consent for phone usage
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agree"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentStatusDto</returns>
        ApiResponse<ConsentStatusDto> SetConsentStatusWithHttpInfo(bool agree, int operationIndex = 0);
        /// <summary>
        /// Set phone favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favorite state for a phone
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        PhoneNumberDto SetPhoneFavourited(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, int operationIndex = 0);

        /// <summary>
        /// Set phone favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favorite state for a phone
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        ApiResponse<PhoneNumberDto> SetPhoneFavouritedWithHttpInfo(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, int operationIndex = 0);
        /// <summary>
        /// Test sending an SMS to a number
        /// </summary>
        /// <remarks>
        /// Test a phone number by sending an SMS to it
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void TestPhoneNumberSendSms(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, string xTestId = default, int operationIndex = 0);

        /// <summary>
        /// Test sending an SMS to a number
        /// </summary>
        /// <remarks>
        /// Test a phone number by sending an SMS to it
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestPhoneNumberSendSmsWithHttpInfo(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, string xTestId = default, int operationIndex = 0);
        /// <summary>
        /// Update a phone number
        /// </summary>
        /// <remarks>
        /// Set field for phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        PhoneNumberDto UpdatePhoneNumber(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, int operationIndex = 0);

        /// <summary>
        /// Update a phone number
        /// </summary>
        /// <remarks>
        /// Set field for phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        ApiResponse<PhoneNumberDto> UpdatePhoneNumberWithHttpInfo(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, int operationIndex = 0);
        /// <summary>
        /// Verify validity of a phone number
        /// </summary>
        /// <remarks>
        /// Validate a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberValidationDto</returns>
        PhoneNumberValidationDto ValidatePhoneNumber(ValidatePhoneNumberOptions validatePhoneNumberOptions, int operationIndex = 0);

        /// <summary>
        /// Verify validity of a phone number
        /// </summary>
        /// <remarks>
        /// Validate a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberValidationDto</returns>
        ApiResponse<PhoneNumberValidationDto> ValidatePhoneNumberWithHttpInfo(ValidatePhoneNumberOptions validatePhoneNumberOptions, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhoneControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an emergency address
        /// </summary>
        /// <remarks>
        /// Add an emergency address to a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmergencyAddress</returns>
        System.Threading.Tasks.Task<EmergencyAddress> CreateEmergencyAddressAsync(CreateEmergencyAddressOptions createEmergencyAddressOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an emergency address
        /// </summary>
        /// <remarks>
        /// Add an emergency address to a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmergencyAddress)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmergencyAddress>> CreateEmergencyAddressWithHttpInfoAsync(CreateEmergencyAddressOptions createEmergencyAddressOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
        /// </summary>
        /// <remarks>
        /// Create new phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        System.Threading.Tasks.Task<PhoneNumberDto> CreatePhoneNumberAsync(CreatePhoneNumberOptions createPhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
        /// </summary>
        /// <remarks>
        /// Create new phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneNumberDto>> CreatePhoneNumberWithHttpInfoAsync(CreatePhoneNumberOptions createPhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an emergency address
        /// </summary>
        /// <remarks>
        /// Delete an emergency address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmptyResponseDto</returns>
        System.Threading.Tasks.Task<EmptyResponseDto> DeleteEmergencyAddressAsync(Guid addressId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an emergency address
        /// </summary>
        /// <remarks>
        /// Delete an emergency address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmptyResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmptyResponseDto>> DeleteEmergencyAddressWithHttpInfoAsync(Guid addressId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete a phone number
        /// </summary>
        /// <remarks>
        /// Remove phone number from account
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePhoneNumberAsync(Guid phoneNumberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a phone number
        /// </summary>
        /// <remarks>
        /// Remove phone number from account
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePhoneNumberWithHttpInfoAsync(Guid phoneNumberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get the latest messages for all phones
        /// </summary>
        /// <remarks>
        /// List all message threads for all phones
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagePhoneMessageThreadProjection</returns>
        System.Threading.Tasks.Task<PagePhoneMessageThreadProjection> GetAllPhoneMessageThreadsAsync(int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the latest messages for all phones
        /// </summary>
        /// <remarks>
        /// List all message threads for all phones
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagePhoneMessageThreadProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePhoneMessageThreadProjection>> GetAllPhoneMessageThreadsWithHttpInfoAsync(int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get consent status
        /// </summary>
        /// <remarks>
        /// Get the status of phone usage consent
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentStatusDto</returns>
        System.Threading.Tasks.Task<ConsentStatusDto> GetConsentStatusAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get consent status
        /// </summary>
        /// <remarks>
        /// Get the status of phone usage consent
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentStatusDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentStatusDto>> GetConsentStatusWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get an emergency address
        /// </summary>
        /// <remarks>
        /// Fetch an emergency address by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmergencyAddress</returns>
        System.Threading.Tasks.Task<EmergencyAddress> GetEmergencyAddressAsync(Guid addressId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an emergency address
        /// </summary>
        /// <remarks>
        /// Fetch an emergency address by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmergencyAddress)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmergencyAddress>> GetEmergencyAddressWithHttpInfoAsync(Guid addressId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get emergency addresses
        /// </summary>
        /// <remarks>
        /// List emergency addresses
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EmergencyAddressDto&gt;</returns>
        System.Threading.Tasks.Task<List<EmergencyAddressDto>> GetEmergencyAddressesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get emergency addresses
        /// </summary>
        /// <remarks>
        /// List emergency addresses
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EmergencyAddressDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmergencyAddressDto>>> GetEmergencyAddressesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get messages in a phone thread
        /// </summary>
        /// <remarks>
        /// List message thread messages for a phone message thread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagePhoneMessageThreadItemProjection</returns>
        System.Threading.Tasks.Task<PagePhoneMessageThreadItemProjection> GetPhoneMessageThreadItemsAsync(Guid phoneNumberId, string otherNumber, int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get messages in a phone thread
        /// </summary>
        /// <remarks>
        /// List message thread messages for a phone message thread
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagePhoneMessageThreadItemProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePhoneMessageThreadItemProjection>> GetPhoneMessageThreadItemsWithHttpInfoAsync(Guid phoneNumberId, string otherNumber, int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get the latest message preview for a thread
        /// </summary>
        /// <remarks>
        /// List message threads for a phone
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagePhoneMessageThreadProjection</returns>
        System.Threading.Tasks.Task<PagePhoneMessageThreadProjection> GetPhoneMessageThreadsAsync(Guid phoneNumberId, int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the latest message preview for a thread
        /// </summary>
        /// <remarks>
        /// List message threads for a phone
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagePhoneMessageThreadProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePhoneMessageThreadProjection>> GetPhoneMessageThreadsWithHttpInfoAsync(Guid phoneNumberId, int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a phone number by ID
        /// </summary>
        /// <remarks>
        /// Get a phone number by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        System.Threading.Tasks.Task<PhoneNumberDto> GetPhoneNumberAsync(Guid phoneNumberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a phone number by ID
        /// </summary>
        /// <remarks>
        /// Get a phone number by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneNumberDto>> GetPhoneNumberWithHttpInfoAsync(Guid phoneNumberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a phone number by name
        /// </summary>
        /// <remarks>
        /// Get a phone number by name
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        System.Threading.Tasks.Task<PhoneNumberDto> GetPhoneNumberByNameAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a phone number by name
        /// </summary>
        /// <remarks>
        /// Get a phone number by name
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneNumberDto>> GetPhoneNumberByNameWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a phone number by phone number
        /// </summary>
        /// <remarks>
        /// Get a phone number by phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        System.Threading.Tasks.Task<PhoneNumberDto> GetPhoneNumberByPhoneNumberAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a phone number by phone number
        /// </summary>
        /// <remarks>
        /// Get a phone number by phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneNumberDto>> GetPhoneNumberByPhoneNumberWithHttpInfoAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get phone numbers
        /// </summary>
        /// <remarks>
        /// List phone numbers for account
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagePhoneNumberProjection</returns>
        System.Threading.Tasks.Task<PagePhoneNumberProjection> GetPhoneNumbersAsync(string phoneCountry = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, List<Guid> include = default, bool? favourite = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get phone numbers
        /// </summary>
        /// <remarks>
        /// List phone numbers for account
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagePhoneNumberProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePhoneNumberProjection>> GetPhoneNumbersWithHttpInfoAsync(string phoneCountry = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, List<Guid> include = default, bool? favourite = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get phone plans
        /// </summary>
        /// <remarks>
        /// Get phone number plans
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PhonePlanDto&gt;</returns>
        System.Threading.Tasks.Task<List<PhonePlanDto>> GetPhonePlansAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get phone plans
        /// </summary>
        /// <remarks>
        /// Get phone number plans
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PhonePlanDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PhonePlanDto>>> GetPhonePlansWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get phone plans availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhonePlanAvailability</returns>
        System.Threading.Tasks.Task<PhonePlanAvailability> GetPhonePlansAvailabilityAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get phone plans availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhonePlanAvailability)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhonePlanAvailability>> GetPhonePlansAvailabilityWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List sent TXT messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get sent SMS messages for a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageSentSmsProjection</returns>
        System.Threading.Tasks.Task<PageSentSmsProjection> GetSentSmsByPhoneNumberAsync(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List sent TXT messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get sent SMS messages for a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageSentSmsProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSentSmsProjection>> GetSentSmsByPhoneNumberWithHttpInfoAsync(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List SMS messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get SMS messages for a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageSmsProjection</returns>
        System.Threading.Tasks.Task<PageSmsProjection> GetSmsByPhoneNumberAsync(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, bool? unreadOnly = default, DateTime? since = default, DateTime? before = default, string search = default, bool? favourite = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List SMS messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get SMS messages for a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageSmsProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSmsProjection>> GetSmsByPhoneNumberWithHttpInfoAsync(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, bool? unreadOnly = default, DateTime? since = default, DateTime? before = default, string search = default, bool? favourite = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Send TXT message from a phone number
        /// </summary>
        /// <remarks>
        /// Send SMS from a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentSmsDto</returns>
        System.Threading.Tasks.Task<SentSmsDto> SendSmsFromPhoneNumberAsync(Guid phoneNumberId, SmsSendOptions smsSendOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send TXT message from a phone number
        /// </summary>
        /// <remarks>
        /// Send SMS from a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentSmsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentSmsDto>> SendSmsFromPhoneNumberWithHttpInfoAsync(Guid phoneNumberId, SmsSendOptions smsSendOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Set consent status
        /// </summary>
        /// <remarks>
        /// Give or revoke consent for phone usage
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agree"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentStatusDto</returns>
        System.Threading.Tasks.Task<ConsentStatusDto> SetConsentStatusAsync(bool agree, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set consent status
        /// </summary>
        /// <remarks>
        /// Give or revoke consent for phone usage
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agree"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentStatusDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentStatusDto>> SetConsentStatusWithHttpInfoAsync(bool agree, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Set phone favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favorite state for a phone
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        System.Threading.Tasks.Task<PhoneNumberDto> SetPhoneFavouritedAsync(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set phone favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favorite state for a phone
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneNumberDto>> SetPhoneFavouritedWithHttpInfoAsync(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Test sending an SMS to a number
        /// </summary>
        /// <remarks>
        /// Test a phone number by sending an SMS to it
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestPhoneNumberSendSmsAsync(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, string xTestId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test sending an SMS to a number
        /// </summary>
        /// <remarks>
        /// Test a phone number by sending an SMS to it
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestPhoneNumberSendSmsWithHttpInfoAsync(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, string xTestId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a phone number
        /// </summary>
        /// <remarks>
        /// Set field for phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        System.Threading.Tasks.Task<PhoneNumberDto> UpdatePhoneNumberAsync(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a phone number
        /// </summary>
        /// <remarks>
        /// Set field for phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneNumberDto>> UpdatePhoneNumberWithHttpInfoAsync(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Verify validity of a phone number
        /// </summary>
        /// <remarks>
        /// Validate a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberValidationDto</returns>
        System.Threading.Tasks.Task<PhoneNumberValidationDto> ValidatePhoneNumberAsync(ValidatePhoneNumberOptions validatePhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify validity of a phone number
        /// </summary>
        /// <remarks>
        /// Validate a phone number
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberValidationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneNumberValidationDto>> ValidatePhoneNumberWithHttpInfoAsync(ValidatePhoneNumberOptions validatePhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhoneControllerApi : IPhoneControllerApiSync, IPhoneControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PhoneControllerApi : IPhoneControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PhoneControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PhoneControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PhoneControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PhoneControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an emergency address Add an emergency address to a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmergencyAddress</returns>
        public EmergencyAddress CreateEmergencyAddress(CreateEmergencyAddressOptions createEmergencyAddressOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<EmergencyAddress> localVarResponse = CreateEmergencyAddressWithHttpInfo(createEmergencyAddressOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an emergency address Add an emergency address to a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmergencyAddress</returns>
        public mailslurp.Client.ApiResponse<EmergencyAddress> CreateEmergencyAddressWithHttpInfo(CreateEmergencyAddressOptions createEmergencyAddressOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createEmergencyAddressOptions' is set
            if (createEmergencyAddressOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createEmergencyAddressOptions' when calling PhoneControllerApi->CreateEmergencyAddress");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEmergencyAddressOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.CreateEmergencyAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmergencyAddress>("/phone/emergency-addresses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmergencyAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an emergency address Add an emergency address to a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmergencyAddress</returns>
        public async System.Threading.Tasks.Task<EmergencyAddress> CreateEmergencyAddressAsync(CreateEmergencyAddressOptions createEmergencyAddressOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<EmergencyAddress> localVarResponse = await CreateEmergencyAddressWithHttpInfoAsync(createEmergencyAddressOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an emergency address Add an emergency address to a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmergencyAddress)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<EmergencyAddress>> CreateEmergencyAddressWithHttpInfoAsync(CreateEmergencyAddressOptions createEmergencyAddressOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createEmergencyAddressOptions' is set
            if (createEmergencyAddressOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createEmergencyAddressOptions' when calling PhoneControllerApi->CreateEmergencyAddress");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEmergencyAddressOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.CreateEmergencyAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmergencyAddress>("/phone/emergency-addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmergencyAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation. Create new phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        public PhoneNumberDto CreatePhoneNumber(CreatePhoneNumberOptions createPhoneNumberOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = CreatePhoneNumberWithHttpInfo(createPhoneNumberOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation. Create new phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        public mailslurp.Client.ApiResponse<PhoneNumberDto> CreatePhoneNumberWithHttpInfo(CreatePhoneNumberOptions createPhoneNumberOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createPhoneNumberOptions' is set
            if (createPhoneNumberOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createPhoneNumberOptions' when calling PhoneControllerApi->CreatePhoneNumber");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPhoneNumberOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.CreatePhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PhoneNumberDto>("/phone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation. Create new phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        public async System.Threading.Tasks.Task<PhoneNumberDto> CreatePhoneNumberAsync(CreatePhoneNumberOptions createPhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = await CreatePhoneNumberWithHttpInfoAsync(createPhoneNumberOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation. Create new phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PhoneNumberDto>> CreatePhoneNumberWithHttpInfoAsync(CreatePhoneNumberOptions createPhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createPhoneNumberOptions' is set
            if (createPhoneNumberOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createPhoneNumberOptions' when calling PhoneControllerApi->CreatePhoneNumber");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPhoneNumberOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.CreatePhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PhoneNumberDto>("/phone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an emergency address Delete an emergency address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmptyResponseDto</returns>
        public EmptyResponseDto DeleteEmergencyAddress(Guid addressId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<EmptyResponseDto> localVarResponse = DeleteEmergencyAddressWithHttpInfo(addressId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an emergency address Delete an emergency address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmptyResponseDto</returns>
        public mailslurp.Client.ApiResponse<EmptyResponseDto> DeleteEmergencyAddressWithHttpInfo(Guid addressId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("addressId", mailslurp.Client.ClientUtils.ParameterToString(addressId)); // path parameter

            localVarRequestOptions.Operation = "PhoneControllerApi.DeleteEmergencyAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<EmptyResponseDto>("/phone/emergency-addresses/{addressId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmergencyAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an emergency address Delete an emergency address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmptyResponseDto</returns>
        public async System.Threading.Tasks.Task<EmptyResponseDto> DeleteEmergencyAddressAsync(Guid addressId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<EmptyResponseDto> localVarResponse = await DeleteEmergencyAddressWithHttpInfoAsync(addressId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an emergency address Delete an emergency address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmptyResponseDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<EmptyResponseDto>> DeleteEmergencyAddressWithHttpInfoAsync(Guid addressId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("addressId", mailslurp.Client.ClientUtils.ParameterToString(addressId)); // path parameter

            localVarRequestOptions.Operation = "PhoneControllerApi.DeleteEmergencyAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<EmptyResponseDto>("/phone/emergency-addresses/{addressId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmergencyAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a phone number Remove phone number from account
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePhoneNumber(Guid phoneNumberId, int operationIndex = 0)
        {
            DeletePhoneNumberWithHttpInfo(phoneNumberId);
        }

        /// <summary>
        /// Delete a phone number Remove phone number from account
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeletePhoneNumberWithHttpInfo(Guid phoneNumberId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter

            localVarRequestOptions.Operation = "PhoneControllerApi.DeletePhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/phone/numbers/{phoneNumberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a phone number Remove phone number from account
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePhoneNumberAsync(Guid phoneNumberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeletePhoneNumberWithHttpInfoAsync(phoneNumberId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a phone number Remove phone number from account
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeletePhoneNumberWithHttpInfoAsync(Guid phoneNumberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter

            localVarRequestOptions.Operation = "PhoneControllerApi.DeletePhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/phone/numbers/{phoneNumberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the latest messages for all phones List all message threads for all phones
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagePhoneMessageThreadProjection</returns>
        public PagePhoneMessageThreadProjection GetAllPhoneMessageThreads(int? page = default, int? size = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PagePhoneMessageThreadProjection> localVarResponse = GetAllPhoneMessageThreadsWithHttpInfo(page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the latest messages for all phones List all message threads for all phones
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagePhoneMessageThreadProjection</returns>
        public mailslurp.Client.ApiResponse<PagePhoneMessageThreadProjection> GetAllPhoneMessageThreadsWithHttpInfo(int? page = default, int? size = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetAllPhoneMessageThreads";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PagePhoneMessageThreadProjection>("/phone/numbers/message-threads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPhoneMessageThreads", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the latest messages for all phones List all message threads for all phones
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagePhoneMessageThreadProjection</returns>
        public async System.Threading.Tasks.Task<PagePhoneMessageThreadProjection> GetAllPhoneMessageThreadsAsync(int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PagePhoneMessageThreadProjection> localVarResponse = await GetAllPhoneMessageThreadsWithHttpInfoAsync(page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the latest messages for all phones List all message threads for all phones
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagePhoneMessageThreadProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PagePhoneMessageThreadProjection>> GetAllPhoneMessageThreadsWithHttpInfoAsync(int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetAllPhoneMessageThreads";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PagePhoneMessageThreadProjection>("/phone/numbers/message-threads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPhoneMessageThreads", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consent status Get the status of phone usage consent
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentStatusDto</returns>
        public ConsentStatusDto GetConsentStatus(int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConsentStatusDto> localVarResponse = GetConsentStatusWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consent status Get the status of phone usage consent
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentStatusDto</returns>
        public mailslurp.Client.ApiResponse<ConsentStatusDto> GetConsentStatusWithHttpInfo(int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PhoneControllerApi.GetConsentStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsentStatusDto>("/phone/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsentStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get consent status Get the status of phone usage consent
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentStatusDto</returns>
        public async System.Threading.Tasks.Task<ConsentStatusDto> GetConsentStatusAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConsentStatusDto> localVarResponse = await GetConsentStatusWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get consent status Get the status of phone usage consent
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentStatusDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConsentStatusDto>> GetConsentStatusWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PhoneControllerApi.GetConsentStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsentStatusDto>("/phone/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsentStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an emergency address Fetch an emergency address by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmergencyAddress</returns>
        public EmergencyAddress GetEmergencyAddress(Guid addressId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<EmergencyAddress> localVarResponse = GetEmergencyAddressWithHttpInfo(addressId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an emergency address Fetch an emergency address by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmergencyAddress</returns>
        public mailslurp.Client.ApiResponse<EmergencyAddress> GetEmergencyAddressWithHttpInfo(Guid addressId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("addressId", mailslurp.Client.ClientUtils.ParameterToString(addressId)); // path parameter

            localVarRequestOptions.Operation = "PhoneControllerApi.GetEmergencyAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmergencyAddress>("/phone/emergency-addresses/{addressId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmergencyAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an emergency address Fetch an emergency address by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmergencyAddress</returns>
        public async System.Threading.Tasks.Task<EmergencyAddress> GetEmergencyAddressAsync(Guid addressId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<EmergencyAddress> localVarResponse = await GetEmergencyAddressWithHttpInfoAsync(addressId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an emergency address Fetch an emergency address by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmergencyAddress)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<EmergencyAddress>> GetEmergencyAddressWithHttpInfoAsync(Guid addressId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("addressId", mailslurp.Client.ClientUtils.ParameterToString(addressId)); // path parameter

            localVarRequestOptions.Operation = "PhoneControllerApi.GetEmergencyAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmergencyAddress>("/phone/emergency-addresses/{addressId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmergencyAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get emergency addresses List emergency addresses
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EmergencyAddressDto&gt;</returns>
        public List<EmergencyAddressDto> GetEmergencyAddresses(int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<List<EmergencyAddressDto>> localVarResponse = GetEmergencyAddressesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get emergency addresses List emergency addresses
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EmergencyAddressDto&gt;</returns>
        public mailslurp.Client.ApiResponse<List<EmergencyAddressDto>> GetEmergencyAddressesWithHttpInfo(int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PhoneControllerApi.GetEmergencyAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EmergencyAddressDto>>("/phone/emergency-addresses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmergencyAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get emergency addresses List emergency addresses
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EmergencyAddressDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmergencyAddressDto>> GetEmergencyAddressesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<List<EmergencyAddressDto>> localVarResponse = await GetEmergencyAddressesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get emergency addresses List emergency addresses
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EmergencyAddressDto&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<EmergencyAddressDto>>> GetEmergencyAddressesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PhoneControllerApi.GetEmergencyAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EmergencyAddressDto>>("/phone/emergency-addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmergencyAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get messages in a phone thread List message thread messages for a phone message thread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagePhoneMessageThreadItemProjection</returns>
        public PagePhoneMessageThreadItemProjection GetPhoneMessageThreadItems(Guid phoneNumberId, string otherNumber, int? page = default, int? size = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PagePhoneMessageThreadItemProjection> localVarResponse = GetPhoneMessageThreadItemsWithHttpInfo(phoneNumberId, otherNumber, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get messages in a phone thread List message thread messages for a phone message thread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagePhoneMessageThreadItemProjection</returns>
        public mailslurp.Client.ApiResponse<PagePhoneMessageThreadItemProjection> GetPhoneMessageThreadItemsWithHttpInfo(Guid phoneNumberId, string otherNumber, int? page = default, int? size = default, int operationIndex = 0)
        {
            // verify the required parameter 'otherNumber' is set
            if (otherNumber == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'otherNumber' when calling PhoneControllerApi->GetPhoneMessageThreadItems");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("otherNumber", mailslurp.Client.ClientUtils.ParameterToString(otherNumber)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneMessageThreadItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PagePhoneMessageThreadItemProjection>("/phone/numbers/{phoneNumberId}/message-threads/{otherNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneMessageThreadItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get messages in a phone thread List message thread messages for a phone message thread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagePhoneMessageThreadItemProjection</returns>
        public async System.Threading.Tasks.Task<PagePhoneMessageThreadItemProjection> GetPhoneMessageThreadItemsAsync(Guid phoneNumberId, string otherNumber, int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PagePhoneMessageThreadItemProjection> localVarResponse = await GetPhoneMessageThreadItemsWithHttpInfoAsync(phoneNumberId, otherNumber, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get messages in a phone thread List message thread messages for a phone message thread
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagePhoneMessageThreadItemProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PagePhoneMessageThreadItemProjection>> GetPhoneMessageThreadItemsWithHttpInfoAsync(Guid phoneNumberId, string otherNumber, int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'otherNumber' is set
            if (otherNumber == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'otherNumber' when calling PhoneControllerApi->GetPhoneMessageThreadItems");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("otherNumber", mailslurp.Client.ClientUtils.ParameterToString(otherNumber)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneMessageThreadItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PagePhoneMessageThreadItemProjection>("/phone/numbers/{phoneNumberId}/message-threads/{otherNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneMessageThreadItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the latest message preview for a thread List message threads for a phone
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagePhoneMessageThreadProjection</returns>
        public PagePhoneMessageThreadProjection GetPhoneMessageThreads(Guid phoneNumberId, int? page = default, int? size = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PagePhoneMessageThreadProjection> localVarResponse = GetPhoneMessageThreadsWithHttpInfo(phoneNumberId, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the latest message preview for a thread List message threads for a phone
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagePhoneMessageThreadProjection</returns>
        public mailslurp.Client.ApiResponse<PagePhoneMessageThreadProjection> GetPhoneMessageThreadsWithHttpInfo(Guid phoneNumberId, int? page = default, int? size = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneMessageThreads";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PagePhoneMessageThreadProjection>("/phone/numbers/{phoneNumberId}/message-threads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneMessageThreads", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the latest message preview for a thread List message threads for a phone
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagePhoneMessageThreadProjection</returns>
        public async System.Threading.Tasks.Task<PagePhoneMessageThreadProjection> GetPhoneMessageThreadsAsync(Guid phoneNumberId, int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PagePhoneMessageThreadProjection> localVarResponse = await GetPhoneMessageThreadsWithHttpInfoAsync(phoneNumberId, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the latest message preview for a thread List message threads for a phone
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagePhoneMessageThreadProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PagePhoneMessageThreadProjection>> GetPhoneMessageThreadsWithHttpInfoAsync(Guid phoneNumberId, int? page = default, int? size = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneMessageThreads";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PagePhoneMessageThreadProjection>("/phone/numbers/{phoneNumberId}/message-threads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneMessageThreads", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a phone number by ID Get a phone number by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        public PhoneNumberDto GetPhoneNumber(Guid phoneNumberId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = GetPhoneNumberWithHttpInfo(phoneNumberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a phone number by ID Get a phone number by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        public mailslurp.Client.ApiResponse<PhoneNumberDto> GetPhoneNumberWithHttpInfo(Guid phoneNumberId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PhoneNumberDto>("/phone/numbers/{phoneNumberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a phone number by ID Get a phone number by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        public async System.Threading.Tasks.Task<PhoneNumberDto> GetPhoneNumberAsync(Guid phoneNumberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = await GetPhoneNumberWithHttpInfoAsync(phoneNumberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a phone number by ID Get a phone number by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PhoneNumberDto>> GetPhoneNumberWithHttpInfoAsync(Guid phoneNumberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PhoneNumberDto>("/phone/numbers/{phoneNumberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a phone number by name Get a phone number by name
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        public PhoneNumberDto GetPhoneNumberByName(string name, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = GetPhoneNumberByNameWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a phone number by name Get a phone number by name
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        public mailslurp.Client.ApiResponse<PhoneNumberDto> GetPhoneNumberByNameWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'name' when calling PhoneControllerApi->GetPhoneNumberByName");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneNumberByName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PhoneNumberDto>("/phone/numbers/by-name", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneNumberByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a phone number by name Get a phone number by name
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        public async System.Threading.Tasks.Task<PhoneNumberDto> GetPhoneNumberByNameAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = await GetPhoneNumberByNameWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a phone number by name Get a phone number by name
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PhoneNumberDto>> GetPhoneNumberByNameWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'name' when calling PhoneControllerApi->GetPhoneNumberByName");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneNumberByName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PhoneNumberDto>("/phone/numbers/by-name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneNumberByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a phone number by phone number Get a phone number by phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        public PhoneNumberDto GetPhoneNumberByPhoneNumber(string phoneNumber, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = GetPhoneNumberByPhoneNumberWithHttpInfo(phoneNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a phone number by phone number Get a phone number by phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        public mailslurp.Client.ApiResponse<PhoneNumberDto> GetPhoneNumberByPhoneNumberWithHttpInfo(string phoneNumber, int operationIndex = 0)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneControllerApi->GetPhoneNumberByPhoneNumber");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "phoneNumber", phoneNumber));

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneNumberByPhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PhoneNumberDto>("/phone/numbers/by-phone-number", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneNumberByPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a phone number by phone number Get a phone number by phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        public async System.Threading.Tasks.Task<PhoneNumberDto> GetPhoneNumberByPhoneNumberAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = await GetPhoneNumberByPhoneNumberWithHttpInfoAsync(phoneNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a phone number by phone number Get a phone number by phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PhoneNumberDto>> GetPhoneNumberByPhoneNumberWithHttpInfoAsync(string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling PhoneControllerApi->GetPhoneNumberByPhoneNumber");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "phoneNumber", phoneNumber));

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneNumberByPhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PhoneNumberDto>("/phone/numbers/by-phone-number", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneNumberByPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get phone numbers List phone numbers for account
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagePhoneNumberProjection</returns>
        public PagePhoneNumberProjection GetPhoneNumbers(string phoneCountry = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, List<Guid> include = default, bool? favourite = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PagePhoneNumberProjection> localVarResponse = GetPhoneNumbersWithHttpInfo(phoneCountry, page, size, sort, since, before, search, include, favourite);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get phone numbers List phone numbers for account
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagePhoneNumberProjection</returns>
        public mailslurp.Client.ApiResponse<PagePhoneNumberProjection> GetPhoneNumbersWithHttpInfo(string phoneCountry = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, List<Guid> include = default, bool? favourite = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (phoneCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "phoneCountry", phoneCountry));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("multi", "include", include));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneNumbers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PagePhoneNumberProjection>("/phone/numbers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneNumbers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get phone numbers List phone numbers for account
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagePhoneNumberProjection</returns>
        public async System.Threading.Tasks.Task<PagePhoneNumberProjection> GetPhoneNumbersAsync(string phoneCountry = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, List<Guid> include = default, bool? favourite = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PagePhoneNumberProjection> localVarResponse = await GetPhoneNumbersWithHttpInfoAsync(phoneCountry, page, size, sort, since, before, search, include, favourite, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get phone numbers List phone numbers for account
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagePhoneNumberProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PagePhoneNumberProjection>> GetPhoneNumbersWithHttpInfoAsync(string phoneCountry = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, List<Guid> include = default, bool? favourite = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (phoneCountry != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "phoneCountry", phoneCountry));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("multi", "include", include));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhoneNumbers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PagePhoneNumberProjection>("/phone/numbers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhoneNumbers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get phone plans Get phone number plans
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PhonePlanDto&gt;</returns>
        public List<PhonePlanDto> GetPhonePlans(int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<List<PhonePlanDto>> localVarResponse = GetPhonePlansWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get phone plans Get phone number plans
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PhonePlanDto&gt;</returns>
        public mailslurp.Client.ApiResponse<List<PhonePlanDto>> GetPhonePlansWithHttpInfo(int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhonePlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PhonePlanDto>>("/phone/plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhonePlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get phone plans Get phone number plans
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PhonePlanDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<PhonePlanDto>> GetPhonePlansAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<List<PhonePlanDto>> localVarResponse = await GetPhonePlansWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get phone plans Get phone number plans
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PhonePlanDto&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<PhonePlanDto>>> GetPhonePlansWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhonePlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PhonePlanDto>>("/phone/plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhonePlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get phone plans availability 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhonePlanAvailability</returns>
        public PhonePlanAvailability GetPhonePlansAvailability(int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PhonePlanAvailability> localVarResponse = GetPhonePlansAvailabilityWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get phone plans availability 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhonePlanAvailability</returns>
        public mailslurp.Client.ApiResponse<PhonePlanAvailability> GetPhonePlansAvailabilityWithHttpInfo(int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhonePlansAvailability";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PhonePlanAvailability>("/phone/plans/availability", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhonePlansAvailability", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get phone plans availability 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhonePlanAvailability</returns>
        public async System.Threading.Tasks.Task<PhonePlanAvailability> GetPhonePlansAvailabilityAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PhonePlanAvailability> localVarResponse = await GetPhonePlansAvailabilityWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get phone plans availability 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhonePlanAvailability)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PhonePlanAvailability>> GetPhonePlansAvailabilityWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PhoneControllerApi.GetPhonePlansAvailability";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PhonePlanAvailability>("/phone/plans/availability", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPhonePlansAvailability", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List sent TXT messages for a phone number Get sent SMS messages for a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageSentSmsProjection</returns>
        public PageSentSmsProjection GetSentSmsByPhoneNumber(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageSentSmsProjection> localVarResponse = GetSentSmsByPhoneNumberWithHttpInfo(phoneNumberId, page, size, sort, since, before, search);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List sent TXT messages for a phone number Get sent SMS messages for a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageSentSmsProjection</returns>
        public mailslurp.Client.ApiResponse<PageSentSmsProjection> GetSentSmsByPhoneNumberWithHttpInfo(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetSentSmsByPhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageSentSmsProjection>("/phone/numbers/{phoneNumberId}/sms-sent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSentSmsByPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List sent TXT messages for a phone number Get sent SMS messages for a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageSentSmsProjection</returns>
        public async System.Threading.Tasks.Task<PageSentSmsProjection> GetSentSmsByPhoneNumberAsync(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PageSentSmsProjection> localVarResponse = await GetSentSmsByPhoneNumberWithHttpInfoAsync(phoneNumberId, page, size, sort, since, before, search, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List sent TXT messages for a phone number Get sent SMS messages for a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageSentSmsProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageSentSmsProjection>> GetSentSmsByPhoneNumberWithHttpInfoAsync(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, string search = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetSentSmsByPhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageSentSmsProjection>("/phone/numbers/{phoneNumberId}/sms-sent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSentSmsByPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SMS messages for a phone number Get SMS messages for a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageSmsProjection</returns>
        public PageSmsProjection GetSmsByPhoneNumber(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, bool? unreadOnly = default, DateTime? since = default, DateTime? before = default, string search = default, bool? favourite = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageSmsProjection> localVarResponse = GetSmsByPhoneNumberWithHttpInfo(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List SMS messages for a phone number Get SMS messages for a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageSmsProjection</returns>
        public mailslurp.Client.ApiResponse<PageSmsProjection> GetSmsByPhoneNumberWithHttpInfo(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, bool? unreadOnly = default, DateTime? since = default, DateTime? before = default, string search = default, bool? favourite = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (unreadOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "unreadOnly", unreadOnly));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetSmsByPhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageSmsProjection>("/phone/numbers/{phoneNumberId}/sms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSmsByPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SMS messages for a phone number Get SMS messages for a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageSmsProjection</returns>
        public async System.Threading.Tasks.Task<PageSmsProjection> GetSmsByPhoneNumberAsync(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, bool? unreadOnly = default, DateTime? since = default, DateTime? before = default, string search = default, bool? favourite = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PageSmsProjection> localVarResponse = await GetSmsByPhoneNumberWithHttpInfoAsync(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List SMS messages for a phone number Get SMS messages for a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageSmsProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageSmsProjection>> GetSmsByPhoneNumberWithHttpInfoAsync(Guid phoneNumberId, int? page = default, int? size = default, string sort = default, bool? unreadOnly = default, DateTime? since = default, DateTime? before = default, string search = default, bool? favourite = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (unreadOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "unreadOnly", unreadOnly));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }

            localVarRequestOptions.Operation = "PhoneControllerApi.GetSmsByPhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageSmsProjection>("/phone/numbers/{phoneNumberId}/sms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSmsByPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send TXT message from a phone number Send SMS from a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SentSmsDto</returns>
        public SentSmsDto SendSmsFromPhoneNumber(Guid phoneNumberId, SmsSendOptions smsSendOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<SentSmsDto> localVarResponse = SendSmsFromPhoneNumberWithHttpInfo(phoneNumberId, smsSendOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send TXT message from a phone number Send SMS from a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SentSmsDto</returns>
        public mailslurp.Client.ApiResponse<SentSmsDto> SendSmsFromPhoneNumberWithHttpInfo(Guid phoneNumberId, SmsSendOptions smsSendOptions, int operationIndex = 0)
        {
            // verify the required parameter 'smsSendOptions' is set
            if (smsSendOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'smsSendOptions' when calling PhoneControllerApi->SendSmsFromPhoneNumber");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            localVarRequestOptions.Data = smsSendOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.SendSmsFromPhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SentSmsDto>("/phone/numbers/{phoneNumberId}/sms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSmsFromPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send TXT message from a phone number Send SMS from a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SentSmsDto</returns>
        public async System.Threading.Tasks.Task<SentSmsDto> SendSmsFromPhoneNumberAsync(Guid phoneNumberId, SmsSendOptions smsSendOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<SentSmsDto> localVarResponse = await SendSmsFromPhoneNumberWithHttpInfoAsync(phoneNumberId, smsSendOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send TXT message from a phone number Send SMS from a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SentSmsDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<SentSmsDto>> SendSmsFromPhoneNumberWithHttpInfoAsync(Guid phoneNumberId, SmsSendOptions smsSendOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'smsSendOptions' is set
            if (smsSendOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'smsSendOptions' when calling PhoneControllerApi->SendSmsFromPhoneNumber");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            localVarRequestOptions.Data = smsSendOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.SendSmsFromPhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SentSmsDto>("/phone/numbers/{phoneNumberId}/sms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSmsFromPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set consent status Give or revoke consent for phone usage
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agree"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentStatusDto</returns>
        public ConsentStatusDto SetConsentStatus(bool agree, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<ConsentStatusDto> localVarResponse = SetConsentStatusWithHttpInfo(agree);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set consent status Give or revoke consent for phone usage
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agree"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentStatusDto</returns>
        public mailslurp.Client.ApiResponse<ConsentStatusDto> SetConsentStatusWithHttpInfo(bool agree, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "agree", agree));

            localVarRequestOptions.Operation = "PhoneControllerApi.SetConsentStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConsentStatusDto>("/phone/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetConsentStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set consent status Give or revoke consent for phone usage
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agree"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentStatusDto</returns>
        public async System.Threading.Tasks.Task<ConsentStatusDto> SetConsentStatusAsync(bool agree, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<ConsentStatusDto> localVarResponse = await SetConsentStatusWithHttpInfoAsync(agree, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set consent status Give or revoke consent for phone usage
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agree"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentStatusDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<ConsentStatusDto>> SetConsentStatusWithHttpInfoAsync(bool agree, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "agree", agree));

            localVarRequestOptions.Operation = "PhoneControllerApi.SetConsentStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConsentStatusDto>("/phone/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetConsentStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set phone favourited state Set and return new favorite state for a phone
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        public PhoneNumberDto SetPhoneFavourited(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = SetPhoneFavouritedWithHttpInfo(phoneNumberId, setPhoneFavouritedOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set phone favourited state Set and return new favorite state for a phone
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        public mailslurp.Client.ApiResponse<PhoneNumberDto> SetPhoneFavouritedWithHttpInfo(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, int operationIndex = 0)
        {
            // verify the required parameter 'setPhoneFavouritedOptions' is set
            if (setPhoneFavouritedOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'setPhoneFavouritedOptions' when calling PhoneControllerApi->SetPhoneFavourited");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            localVarRequestOptions.Data = setPhoneFavouritedOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.SetPhoneFavourited";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PhoneNumberDto>("/phone/numbers/{phoneNumberId}/favourite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPhoneFavourited", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set phone favourited state Set and return new favorite state for a phone
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        public async System.Threading.Tasks.Task<PhoneNumberDto> SetPhoneFavouritedAsync(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = await SetPhoneFavouritedWithHttpInfoAsync(phoneNumberId, setPhoneFavouritedOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set phone favourited state Set and return new favorite state for a phone
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PhoneNumberDto>> SetPhoneFavouritedWithHttpInfoAsync(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'setPhoneFavouritedOptions' is set
            if (setPhoneFavouritedOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'setPhoneFavouritedOptions' when calling PhoneControllerApi->SetPhoneFavourited");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            localVarRequestOptions.Data = setPhoneFavouritedOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.SetPhoneFavourited";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PhoneNumberDto>("/phone/numbers/{phoneNumberId}/favourite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPhoneFavourited", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test sending an SMS to a number Test a phone number by sending an SMS to it
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void TestPhoneNumberSendSms(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, string xTestId = default, int operationIndex = 0)
        {
            TestPhoneNumberSendSmsWithHttpInfo(phoneNumberId, testPhoneNumberOptions, xTestId);
        }

        /// <summary>
        /// Test sending an SMS to a number Test a phone number by sending an SMS to it
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> TestPhoneNumberSendSmsWithHttpInfo(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, string xTestId = default, int operationIndex = 0)
        {
            // verify the required parameter 'testPhoneNumberOptions' is set
            if (testPhoneNumberOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'testPhoneNumberOptions' when calling PhoneControllerApi->TestPhoneNumberSendSms");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            if (xTestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-test-id", mailslurp.Client.ClientUtils.ParameterToString(xTestId)); // header parameter
            }
            localVarRequestOptions.Data = testPhoneNumberOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.TestPhoneNumberSendSms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/phone/numbers/{phoneNumberId}/test", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestPhoneNumberSendSms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test sending an SMS to a number Test a phone number by sending an SMS to it
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestPhoneNumberSendSmsAsync(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, string xTestId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await TestPhoneNumberSendSmsWithHttpInfoAsync(phoneNumberId, testPhoneNumberOptions, xTestId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Test sending an SMS to a number Test a phone number by sending an SMS to it
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> TestPhoneNumberSendSmsWithHttpInfoAsync(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, string xTestId = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'testPhoneNumberOptions' is set
            if (testPhoneNumberOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'testPhoneNumberOptions' when calling PhoneControllerApi->TestPhoneNumberSendSms");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            if (xTestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-test-id", mailslurp.Client.ClientUtils.ParameterToString(xTestId)); // header parameter
            }
            localVarRequestOptions.Data = testPhoneNumberOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.TestPhoneNumberSendSms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/phone/numbers/{phoneNumberId}/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestPhoneNumberSendSms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a phone number Set field for phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberDto</returns>
        public PhoneNumberDto UpdatePhoneNumber(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = UpdatePhoneNumberWithHttpInfo(phoneNumberId, updatePhoneNumberOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a phone number Set field for phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberDto</returns>
        public mailslurp.Client.ApiResponse<PhoneNumberDto> UpdatePhoneNumberWithHttpInfo(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, int operationIndex = 0)
        {
            // verify the required parameter 'updatePhoneNumberOptions' is set
            if (updatePhoneNumberOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'updatePhoneNumberOptions' when calling PhoneControllerApi->UpdatePhoneNumber");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            localVarRequestOptions.Data = updatePhoneNumberOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.UpdatePhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PhoneNumberDto>("/phone/numbers/{phoneNumberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a phone number Set field for phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberDto</returns>
        public async System.Threading.Tasks.Task<PhoneNumberDto> UpdatePhoneNumberAsync(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PhoneNumberDto> localVarResponse = await UpdatePhoneNumberWithHttpInfoAsync(phoneNumberId, updatePhoneNumberOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a phone number Set field for phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PhoneNumberDto>> UpdatePhoneNumberWithHttpInfoAsync(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'updatePhoneNumberOptions' is set
            if (updatePhoneNumberOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'updatePhoneNumberOptions' when calling PhoneControllerApi->UpdatePhoneNumber");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("phoneNumberId", mailslurp.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            localVarRequestOptions.Data = updatePhoneNumberOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.UpdatePhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PhoneNumberDto>("/phone/numbers/{phoneNumberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify validity of a phone number Validate a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PhoneNumberValidationDto</returns>
        public PhoneNumberValidationDto ValidatePhoneNumber(ValidatePhoneNumberOptions validatePhoneNumberOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PhoneNumberValidationDto> localVarResponse = ValidatePhoneNumberWithHttpInfo(validatePhoneNumberOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify validity of a phone number Validate a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PhoneNumberValidationDto</returns>
        public mailslurp.Client.ApiResponse<PhoneNumberValidationDto> ValidatePhoneNumberWithHttpInfo(ValidatePhoneNumberOptions validatePhoneNumberOptions, int operationIndex = 0)
        {
            // verify the required parameter 'validatePhoneNumberOptions' is set
            if (validatePhoneNumberOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'validatePhoneNumberOptions' when calling PhoneControllerApi->ValidatePhoneNumber");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = validatePhoneNumberOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.ValidatePhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PhoneNumberValidationDto>("/phone/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidatePhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify validity of a phone number Validate a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneNumberValidationDto</returns>
        public async System.Threading.Tasks.Task<PhoneNumberValidationDto> ValidatePhoneNumberAsync(ValidatePhoneNumberOptions validatePhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PhoneNumberValidationDto> localVarResponse = await ValidatePhoneNumberWithHttpInfoAsync(validatePhoneNumberOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify validity of a phone number Validate a phone number
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneNumberValidationDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PhoneNumberValidationDto>> ValidatePhoneNumberWithHttpInfoAsync(ValidatePhoneNumberOptions validatePhoneNumberOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'validatePhoneNumberOptions' is set
            if (validatePhoneNumberOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'validatePhoneNumberOptions' when calling PhoneControllerApi->ValidatePhoneNumber");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = validatePhoneNumberOptions;

            localVarRequestOptions.Operation = "PhoneControllerApi.ValidatePhoneNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PhoneNumberValidationDto>("/phone/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidatePhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
