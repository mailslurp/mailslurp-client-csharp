// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPhoneControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PhoneControllerApiEvents Events { get; }

        /// <summary>
        /// Create an emergency address
        /// </summary>
        /// <remarks>
        /// Add an emergency address to a phone number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateEmergencyAddressApiResponse"/>&gt;</returns>
        Task<ICreateEmergencyAddressApiResponse> CreateEmergencyAddressAsync(CreateEmergencyAddressOptions createEmergencyAddressOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an emergency address
        /// </summary>
        /// <remarks>
        /// Add an emergency address to a phone number
        /// </remarks>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateEmergencyAddressApiResponse"/>&gt;</returns>
        Task<ICreateEmergencyAddressApiResponse> CreateEmergencyAddressOrDefaultAsync(CreateEmergencyAddressOptions createEmergencyAddressOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
        /// </summary>
        /// <remarks>
        /// Create new phone number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePhoneNumberApiResponse"/>&gt;</returns>
        Task<ICreatePhoneNumberApiResponse> CreatePhoneNumberAsync(CreatePhoneNumberOptions createPhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
        /// </summary>
        /// <remarks>
        /// Create new phone number
        /// </remarks>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePhoneNumberApiResponse"/>&gt;</returns>
        Task<ICreatePhoneNumberApiResponse> CreatePhoneNumberOrDefaultAsync(CreatePhoneNumberOptions createPhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an emergency address
        /// </summary>
        /// <remarks>
        /// Delete an emergency address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEmergencyAddressApiResponse"/>&gt;</returns>
        Task<IDeleteEmergencyAddressApiResponse> DeleteEmergencyAddressAsync(Guid addressId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an emergency address
        /// </summary>
        /// <remarks>
        /// Delete an emergency address
        /// </remarks>
        /// <param name="addressId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEmergencyAddressApiResponse"/>&gt;</returns>
        Task<IDeleteEmergencyAddressApiResponse> DeleteEmergencyAddressOrDefaultAsync(Guid addressId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a phone number
        /// </summary>
        /// <remarks>
        /// Remove phone number from account
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePhoneNumberApiResponse"/>&gt;</returns>
        Task<IDeletePhoneNumberApiResponse> DeletePhoneNumberAsync(Guid phoneNumberId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a phone number
        /// </summary>
        /// <remarks>
        /// Remove phone number from account
        /// </remarks>
        /// <param name="phoneNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePhoneNumberApiResponse"/>&gt;</returns>
        Task<IDeletePhoneNumberApiResponse> DeletePhoneNumberOrDefaultAsync(Guid phoneNumberId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the latest messages for all phones
        /// </summary>
        /// <remarks>
        /// List all message threads for all phones
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllPhoneMessageThreadsApiResponse"/>&gt;</returns>
        Task<IGetAllPhoneMessageThreadsApiResponse> GetAllPhoneMessageThreadsAsync(Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the latest messages for all phones
        /// </summary>
        /// <remarks>
        /// List all message threads for all phones
        /// </remarks>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllPhoneMessageThreadsApiResponse"/>&gt;</returns>
        Task<IGetAllPhoneMessageThreadsApiResponse> GetAllPhoneMessageThreadsOrDefaultAsync(Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get consent status
        /// </summary>
        /// <remarks>
        /// Get the status of phone usage consent
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConsentStatusApiResponse"/>&gt;</returns>
        Task<IGetConsentStatusApiResponse> GetConsentStatusAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get consent status
        /// </summary>
        /// <remarks>
        /// Get the status of phone usage consent
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConsentStatusApiResponse"/>&gt;</returns>
        Task<IGetConsentStatusApiResponse> GetConsentStatusOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an emergency address
        /// </summary>
        /// <remarks>
        /// Fetch an emergency address by ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmergencyAddressApiResponse"/>&gt;</returns>
        Task<IGetEmergencyAddressApiResponse> GetEmergencyAddressAsync(Guid addressId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an emergency address
        /// </summary>
        /// <remarks>
        /// Fetch an emergency address by ID
        /// </remarks>
        /// <param name="addressId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmergencyAddressApiResponse"/>&gt;</returns>
        Task<IGetEmergencyAddressApiResponse> GetEmergencyAddressOrDefaultAsync(Guid addressId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get emergency addresses
        /// </summary>
        /// <remarks>
        /// List emergency addresses
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmergencyAddressesApiResponse"/>&gt;</returns>
        Task<IGetEmergencyAddressesApiResponse> GetEmergencyAddressesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get emergency addresses
        /// </summary>
        /// <remarks>
        /// List emergency addresses
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmergencyAddressesApiResponse"/>&gt;</returns>
        Task<IGetEmergencyAddressesApiResponse> GetEmergencyAddressesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get messages in a phone thread
        /// </summary>
        /// <remarks>
        /// List message thread messages for a phone message thread
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneMessageThreadItemsApiResponse"/>&gt;</returns>
        Task<IGetPhoneMessageThreadItemsApiResponse> GetPhoneMessageThreadItemsAsync(Guid phoneNumberId, string otherNumber, Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get messages in a phone thread
        /// </summary>
        /// <remarks>
        /// List message thread messages for a phone message thread
        /// </remarks>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneMessageThreadItemsApiResponse"/>&gt;</returns>
        Task<IGetPhoneMessageThreadItemsApiResponse> GetPhoneMessageThreadItemsOrDefaultAsync(Guid phoneNumberId, string otherNumber, Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the latest message preview for a thread
        /// </summary>
        /// <remarks>
        /// List message threads for a phone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneMessageThreadsApiResponse"/>&gt;</returns>
        Task<IGetPhoneMessageThreadsApiResponse> GetPhoneMessageThreadsAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the latest message preview for a thread
        /// </summary>
        /// <remarks>
        /// List message threads for a phone
        /// </remarks>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneMessageThreadsApiResponse"/>&gt;</returns>
        Task<IGetPhoneMessageThreadsApiResponse> GetPhoneMessageThreadsOrDefaultAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a phone number by ID
        /// </summary>
        /// <remarks>
        /// Get a phone number by ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberApiResponse"/>&gt;</returns>
        Task<IGetPhoneNumberApiResponse> GetPhoneNumberAsync(Guid phoneNumberId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a phone number by ID
        /// </summary>
        /// <remarks>
        /// Get a phone number by ID
        /// </remarks>
        /// <param name="phoneNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberApiResponse"/>&gt;</returns>
        Task<IGetPhoneNumberApiResponse> GetPhoneNumberOrDefaultAsync(Guid phoneNumberId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a phone number by name
        /// </summary>
        /// <remarks>
        /// Get a phone number by name
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberByNameApiResponse"/>&gt;</returns>
        Task<IGetPhoneNumberByNameApiResponse> GetPhoneNumberByNameAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a phone number by name
        /// </summary>
        /// <remarks>
        /// Get a phone number by name
        /// </remarks>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberByNameApiResponse"/>&gt;</returns>
        Task<IGetPhoneNumberByNameApiResponse> GetPhoneNumberByNameOrDefaultAsync(string name, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a phone number by phone number
        /// </summary>
        /// <remarks>
        /// Get a phone number by phone number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberByPhoneNumberApiResponse"/>&gt;</returns>
        Task<IGetPhoneNumberByPhoneNumberApiResponse> GetPhoneNumberByPhoneNumberAsync(string phoneNumber, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a phone number by phone number
        /// </summary>
        /// <remarks>
        /// Get a phone number by phone number
        /// </remarks>
        /// <param name="phoneNumber"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberByPhoneNumberApiResponse"/>&gt;</returns>
        Task<IGetPhoneNumberByPhoneNumberApiResponse> GetPhoneNumberByPhoneNumberOrDefaultAsync(string phoneNumber, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get phone numbers
        /// </summary>
        /// <remarks>
        /// List phone numbers for account
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumbersApiResponse"/>&gt;</returns>
        Task<IGetPhoneNumbersApiResponse> GetPhoneNumbersAsync(Option<string> phoneCountry = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<List<Guid>> include = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get phone numbers
        /// </summary>
        /// <remarks>
        /// List phone numbers for account
        /// </remarks>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumbersApiResponse"/>&gt;</returns>
        Task<IGetPhoneNumbersApiResponse> GetPhoneNumbersOrDefaultAsync(Option<string> phoneCountry = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<List<Guid>> include = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get phone plans
        /// </summary>
        /// <remarks>
        /// Get phone number plans
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhonePlansApiResponse"/>&gt;</returns>
        Task<IGetPhonePlansApiResponse> GetPhonePlansAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get phone plans
        /// </summary>
        /// <remarks>
        /// Get phone number plans
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhonePlansApiResponse"/>&gt;</returns>
        Task<IGetPhonePlansApiResponse> GetPhonePlansOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get phone plans availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhonePlansAvailabilityApiResponse"/>&gt;</returns>
        Task<IGetPhonePlansAvailabilityApiResponse> GetPhonePlansAvailabilityAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get phone plans availability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhonePlansAvailabilityApiResponse"/>&gt;</returns>
        Task<IGetPhonePlansAvailabilityApiResponse> GetPhonePlansAvailabilityOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List sent TXT messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get sent SMS messages for a phone number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsByPhoneNumberApiResponse"/>&gt;</returns>
        Task<IGetSentSmsByPhoneNumberApiResponse> GetSentSmsByPhoneNumberAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List sent TXT messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get sent SMS messages for a phone number
        /// </remarks>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsByPhoneNumberApiResponse"/>&gt;</returns>
        Task<IGetSentSmsByPhoneNumberApiResponse> GetSentSmsByPhoneNumberOrDefaultAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List SMS messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get SMS messages for a phone number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsByPhoneNumberApiResponse"/>&gt;</returns>
        Task<IGetSmsByPhoneNumberApiResponse> GetSmsByPhoneNumberAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<bool> unreadOnly = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List SMS messages for a phone number
        /// </summary>
        /// <remarks>
        /// Get SMS messages for a phone number
        /// </remarks>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsByPhoneNumberApiResponse"/>&gt;</returns>
        Task<IGetSmsByPhoneNumberApiResponse> GetSmsByPhoneNumberOrDefaultAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<bool> unreadOnly = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send TXT message from a phone number
        /// </summary>
        /// <remarks>
        /// Send SMS from a phone number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendSmsFromPhoneNumberApiResponse"/>&gt;</returns>
        Task<ISendSmsFromPhoneNumberApiResponse> SendSmsFromPhoneNumberAsync(Guid phoneNumberId, SmsSendOptions smsSendOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send TXT message from a phone number
        /// </summary>
        /// <remarks>
        /// Send SMS from a phone number
        /// </remarks>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendSmsFromPhoneNumberApiResponse"/>&gt;</returns>
        Task<ISendSmsFromPhoneNumberApiResponse> SendSmsFromPhoneNumberOrDefaultAsync(Guid phoneNumberId, SmsSendOptions smsSendOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set consent status
        /// </summary>
        /// <remarks>
        /// Give or revoke consent for phone usage
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agree"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetConsentStatusApiResponse"/>&gt;</returns>
        Task<ISetConsentStatusApiResponse> SetConsentStatusAsync(bool agree, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set consent status
        /// </summary>
        /// <remarks>
        /// Give or revoke consent for phone usage
        /// </remarks>
        /// <param name="agree"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetConsentStatusApiResponse"/>&gt;</returns>
        Task<ISetConsentStatusApiResponse> SetConsentStatusOrDefaultAsync(bool agree, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set phone favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favorite state for a phone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetPhoneFavouritedApiResponse"/>&gt;</returns>
        Task<ISetPhoneFavouritedApiResponse> SetPhoneFavouritedAsync(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set phone favourited state
        /// </summary>
        /// <remarks>
        /// Set and return new favorite state for a phone
        /// </remarks>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetPhoneFavouritedApiResponse"/>&gt;</returns>
        Task<ISetPhoneFavouritedApiResponse> SetPhoneFavouritedOrDefaultAsync(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test sending an SMS to a number
        /// </summary>
        /// <remarks>
        /// Test a phone number by sending an SMS to it
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestPhoneNumberSendSmsApiResponse"/>&gt;</returns>
        Task<ITestPhoneNumberSendSmsApiResponse> TestPhoneNumberSendSmsAsync(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, Option<string> xTestId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Test sending an SMS to a number
        /// </summary>
        /// <remarks>
        /// Test a phone number by sending an SMS to it
        /// </remarks>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestPhoneNumberSendSmsApiResponse"/>&gt;</returns>
        Task<ITestPhoneNumberSendSmsApiResponse> TestPhoneNumberSendSmsOrDefaultAsync(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, Option<string> xTestId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a phone number
        /// </summary>
        /// <remarks>
        /// Set field for phone number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePhoneNumberApiResponse"/>&gt;</returns>
        Task<IUpdatePhoneNumberApiResponse> UpdatePhoneNumberAsync(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a phone number
        /// </summary>
        /// <remarks>
        /// Set field for phone number
        /// </remarks>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePhoneNumberApiResponse"/>&gt;</returns>
        Task<IUpdatePhoneNumberApiResponse> UpdatePhoneNumberOrDefaultAsync(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify validity of a phone number
        /// </summary>
        /// <remarks>
        /// Validate a phone number
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IValidatePhoneNumberApiResponse"/>&gt;</returns>
        Task<IValidatePhoneNumberApiResponse> ValidatePhoneNumberAsync(ValidatePhoneNumberOptions validatePhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify validity of a phone number
        /// </summary>
        /// <remarks>
        /// Validate a phone number
        /// </remarks>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IValidatePhoneNumberApiResponse"/>&gt;</returns>
        Task<IValidatePhoneNumberApiResponse> ValidatePhoneNumberOrDefaultAsync(ValidatePhoneNumberOptions validatePhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateEmergencyAddressApiResponse"/>
    /// </summary>
    public interface ICreateEmergencyAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.EmergencyAddress>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICreatePhoneNumberApiResponse"/>
    /// </summary>
    public interface ICreatePhoneNumberApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PhoneNumberDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteEmergencyAddressApiResponse"/>
    /// </summary>
    public interface IDeleteEmergencyAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.EmptyResponseDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeletePhoneNumberApiResponse"/>
    /// </summary>
    public interface IDeletePhoneNumberApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllPhoneMessageThreadsApiResponse"/>
    /// </summary>
    public interface IGetAllPhoneMessageThreadsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PagePhoneMessageThreadProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConsentStatusApiResponse"/>
    /// </summary>
    public interface IGetConsentStatusApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConsentStatusDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetEmergencyAddressApiResponse"/>
    /// </summary>
    public interface IGetEmergencyAddressApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.EmergencyAddress>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetEmergencyAddressesApiResponse"/>
    /// </summary>
    public interface IGetEmergencyAddressesApiResponse : mailslurp.Client.IApiResponse, IOk<List<EmergencyAddressDto>>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPhoneMessageThreadItemsApiResponse"/>
    /// </summary>
    public interface IGetPhoneMessageThreadItemsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PagePhoneMessageThreadItemProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPhoneMessageThreadsApiResponse"/>
    /// </summary>
    public interface IGetPhoneMessageThreadsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PagePhoneMessageThreadProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPhoneNumberApiResponse"/>
    /// </summary>
    public interface IGetPhoneNumberApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PhoneNumberDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPhoneNumberByNameApiResponse"/>
    /// </summary>
    public interface IGetPhoneNumberByNameApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PhoneNumberDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPhoneNumberByPhoneNumberApiResponse"/>
    /// </summary>
    public interface IGetPhoneNumberByPhoneNumberApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PhoneNumberDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPhoneNumbersApiResponse"/>
    /// </summary>
    public interface IGetPhoneNumbersApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PagePhoneNumberProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPhonePlansApiResponse"/>
    /// </summary>
    public interface IGetPhonePlansApiResponse : mailslurp.Client.IApiResponse, IOk<List<PhonePlanDto>>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPhonePlansAvailabilityApiResponse"/>
    /// </summary>
    public interface IGetPhonePlansAvailabilityApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PhonePlanAvailability>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSentSmsByPhoneNumberApiResponse"/>
    /// </summary>
    public interface IGetSentSmsByPhoneNumberApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageSentSmsProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSmsByPhoneNumberApiResponse"/>
    /// </summary>
    public interface IGetSmsByPhoneNumberApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageSmsProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISendSmsFromPhoneNumberApiResponse"/>
    /// </summary>
    public interface ISendSmsFromPhoneNumberApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.SentSmsDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISetConsentStatusApiResponse"/>
    /// </summary>
    public interface ISetConsentStatusApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.ConsentStatusDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISetPhoneFavouritedApiResponse"/>
    /// </summary>
    public interface ISetPhoneFavouritedApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PhoneNumberDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITestPhoneNumberSendSmsApiResponse"/>
    /// </summary>
    public interface ITestPhoneNumberSendSmsApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdatePhoneNumberApiResponse"/>
    /// </summary>
    public interface IUpdatePhoneNumberApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PhoneNumberDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IValidatePhoneNumberApiResponse"/>
    /// </summary>
    public interface IValidatePhoneNumberApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PhoneNumberValidationDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PhoneControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateEmergencyAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateEmergencyAddress;

        internal void ExecuteOnCreateEmergencyAddress(PhoneControllerApi.CreateEmergencyAddressApiResponse apiResponse)
        {
            OnCreateEmergencyAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateEmergencyAddress(Exception exception)
        {
            OnErrorCreateEmergencyAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreatePhoneNumber;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreatePhoneNumber;

        internal void ExecuteOnCreatePhoneNumber(PhoneControllerApi.CreatePhoneNumberApiResponse apiResponse)
        {
            OnCreatePhoneNumber?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreatePhoneNumber(Exception exception)
        {
            OnErrorCreatePhoneNumber?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteEmergencyAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteEmergencyAddress;

        internal void ExecuteOnDeleteEmergencyAddress(PhoneControllerApi.DeleteEmergencyAddressApiResponse apiResponse)
        {
            OnDeleteEmergencyAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteEmergencyAddress(Exception exception)
        {
            OnErrorDeleteEmergencyAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeletePhoneNumber;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeletePhoneNumber;

        internal void ExecuteOnDeletePhoneNumber(PhoneControllerApi.DeletePhoneNumberApiResponse apiResponse)
        {
            OnDeletePhoneNumber?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePhoneNumber(Exception exception)
        {
            OnErrorDeletePhoneNumber?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllPhoneMessageThreads;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllPhoneMessageThreads;

        internal void ExecuteOnGetAllPhoneMessageThreads(PhoneControllerApi.GetAllPhoneMessageThreadsApiResponse apiResponse)
        {
            OnGetAllPhoneMessageThreads?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllPhoneMessageThreads(Exception exception)
        {
            OnErrorGetAllPhoneMessageThreads?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetConsentStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetConsentStatus;

        internal void ExecuteOnGetConsentStatus(PhoneControllerApi.GetConsentStatusApiResponse apiResponse)
        {
            OnGetConsentStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConsentStatus(Exception exception)
        {
            OnErrorGetConsentStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetEmergencyAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetEmergencyAddress;

        internal void ExecuteOnGetEmergencyAddress(PhoneControllerApi.GetEmergencyAddressApiResponse apiResponse)
        {
            OnGetEmergencyAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEmergencyAddress(Exception exception)
        {
            OnErrorGetEmergencyAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetEmergencyAddresses;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetEmergencyAddresses;

        internal void ExecuteOnGetEmergencyAddresses(PhoneControllerApi.GetEmergencyAddressesApiResponse apiResponse)
        {
            OnGetEmergencyAddresses?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEmergencyAddresses(Exception exception)
        {
            OnErrorGetEmergencyAddresses?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPhoneMessageThreadItems;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPhoneMessageThreadItems;

        internal void ExecuteOnGetPhoneMessageThreadItems(PhoneControllerApi.GetPhoneMessageThreadItemsApiResponse apiResponse)
        {
            OnGetPhoneMessageThreadItems?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPhoneMessageThreadItems(Exception exception)
        {
            OnErrorGetPhoneMessageThreadItems?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPhoneMessageThreads;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPhoneMessageThreads;

        internal void ExecuteOnGetPhoneMessageThreads(PhoneControllerApi.GetPhoneMessageThreadsApiResponse apiResponse)
        {
            OnGetPhoneMessageThreads?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPhoneMessageThreads(Exception exception)
        {
            OnErrorGetPhoneMessageThreads?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPhoneNumber;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPhoneNumber;

        internal void ExecuteOnGetPhoneNumber(PhoneControllerApi.GetPhoneNumberApiResponse apiResponse)
        {
            OnGetPhoneNumber?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPhoneNumber(Exception exception)
        {
            OnErrorGetPhoneNumber?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPhoneNumberByName;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPhoneNumberByName;

        internal void ExecuteOnGetPhoneNumberByName(PhoneControllerApi.GetPhoneNumberByNameApiResponse apiResponse)
        {
            OnGetPhoneNumberByName?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPhoneNumberByName(Exception exception)
        {
            OnErrorGetPhoneNumberByName?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPhoneNumberByPhoneNumber;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPhoneNumberByPhoneNumber;

        internal void ExecuteOnGetPhoneNumberByPhoneNumber(PhoneControllerApi.GetPhoneNumberByPhoneNumberApiResponse apiResponse)
        {
            OnGetPhoneNumberByPhoneNumber?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPhoneNumberByPhoneNumber(Exception exception)
        {
            OnErrorGetPhoneNumberByPhoneNumber?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPhoneNumbers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPhoneNumbers;

        internal void ExecuteOnGetPhoneNumbers(PhoneControllerApi.GetPhoneNumbersApiResponse apiResponse)
        {
            OnGetPhoneNumbers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPhoneNumbers(Exception exception)
        {
            OnErrorGetPhoneNumbers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPhonePlans;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPhonePlans;

        internal void ExecuteOnGetPhonePlans(PhoneControllerApi.GetPhonePlansApiResponse apiResponse)
        {
            OnGetPhonePlans?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPhonePlans(Exception exception)
        {
            OnErrorGetPhonePlans?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPhonePlansAvailability;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPhonePlansAvailability;

        internal void ExecuteOnGetPhonePlansAvailability(PhoneControllerApi.GetPhonePlansAvailabilityApiResponse apiResponse)
        {
            OnGetPhonePlansAvailability?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPhonePlansAvailability(Exception exception)
        {
            OnErrorGetPhonePlansAvailability?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetSentSmsByPhoneNumber;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetSentSmsByPhoneNumber;

        internal void ExecuteOnGetSentSmsByPhoneNumber(PhoneControllerApi.GetSentSmsByPhoneNumberApiResponse apiResponse)
        {
            OnGetSentSmsByPhoneNumber?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSentSmsByPhoneNumber(Exception exception)
        {
            OnErrorGetSentSmsByPhoneNumber?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetSmsByPhoneNumber;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetSmsByPhoneNumber;

        internal void ExecuteOnGetSmsByPhoneNumber(PhoneControllerApi.GetSmsByPhoneNumberApiResponse apiResponse)
        {
            OnGetSmsByPhoneNumber?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSmsByPhoneNumber(Exception exception)
        {
            OnErrorGetSmsByPhoneNumber?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendSmsFromPhoneNumber;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendSmsFromPhoneNumber;

        internal void ExecuteOnSendSmsFromPhoneNumber(PhoneControllerApi.SendSmsFromPhoneNumberApiResponse apiResponse)
        {
            OnSendSmsFromPhoneNumber?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendSmsFromPhoneNumber(Exception exception)
        {
            OnErrorSendSmsFromPhoneNumber?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSetConsentStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSetConsentStatus;

        internal void ExecuteOnSetConsentStatus(PhoneControllerApi.SetConsentStatusApiResponse apiResponse)
        {
            OnSetConsentStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetConsentStatus(Exception exception)
        {
            OnErrorSetConsentStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSetPhoneFavourited;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSetPhoneFavourited;

        internal void ExecuteOnSetPhoneFavourited(PhoneControllerApi.SetPhoneFavouritedApiResponse apiResponse)
        {
            OnSetPhoneFavourited?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetPhoneFavourited(Exception exception)
        {
            OnErrorSetPhoneFavourited?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTestPhoneNumberSendSms;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTestPhoneNumberSendSms;

        internal void ExecuteOnTestPhoneNumberSendSms(PhoneControllerApi.TestPhoneNumberSendSmsApiResponse apiResponse)
        {
            OnTestPhoneNumberSendSms?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTestPhoneNumberSendSms(Exception exception)
        {
            OnErrorTestPhoneNumberSendSms?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdatePhoneNumber;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdatePhoneNumber;

        internal void ExecuteOnUpdatePhoneNumber(PhoneControllerApi.UpdatePhoneNumberApiResponse apiResponse)
        {
            OnUpdatePhoneNumber?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdatePhoneNumber(Exception exception)
        {
            OnErrorUpdatePhoneNumber?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnValidatePhoneNumber;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorValidatePhoneNumber;

        internal void ExecuteOnValidatePhoneNumber(PhoneControllerApi.ValidatePhoneNumberApiResponse apiResponse)
        {
            OnValidatePhoneNumber?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorValidatePhoneNumber(Exception exception)
        {
            OnErrorValidatePhoneNumber?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PhoneControllerApi : IPhoneControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PhoneControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PhoneControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PhoneControllerApi(ILogger<PhoneControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PhoneControllerApiEvents phoneControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PhoneControllerApi>();
            HttpClient = httpClient;
            Events = phoneControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateEmergencyAddress(CreateEmergencyAddressOptions createEmergencyAddressOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <returns></returns>
        private void ValidateCreateEmergencyAddress(CreateEmergencyAddressOptions createEmergencyAddressOptions)
        {
            if (createEmergencyAddressOptions == null)
                throw new ArgumentNullException(nameof(createEmergencyAddressOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createEmergencyAddressOptions"></param>
        private void AfterCreateEmergencyAddressDefaultImplementation(ICreateEmergencyAddressApiResponse apiResponseLocalVar, CreateEmergencyAddressOptions createEmergencyAddressOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateEmergencyAddress(ref suppressDefaultLog, apiResponseLocalVar, createEmergencyAddressOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createEmergencyAddressOptions"></param>
        partial void AfterCreateEmergencyAddress(ref bool suppressDefaultLog, ICreateEmergencyAddressApiResponse apiResponseLocalVar, CreateEmergencyAddressOptions createEmergencyAddressOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createEmergencyAddressOptions"></param>
        private void OnErrorCreateEmergencyAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateEmergencyAddressOptions createEmergencyAddressOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateEmergencyAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createEmergencyAddressOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createEmergencyAddressOptions"></param>
        partial void OnErrorCreateEmergencyAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateEmergencyAddressOptions createEmergencyAddressOptions);

        /// <summary>
        /// Create an emergency address Add an emergency address to a phone number
        /// </summary>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateEmergencyAddressApiResponse"/>&gt;</returns>
        public async Task<ICreateEmergencyAddressApiResponse> CreateEmergencyAddressOrDefaultAsync(CreateEmergencyAddressOptions createEmergencyAddressOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateEmergencyAddressAsync(createEmergencyAddressOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an emergency address Add an emergency address to a phone number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmergencyAddressOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateEmergencyAddressApiResponse"/>&gt;</returns>
        public async Task<ICreateEmergencyAddressApiResponse> CreateEmergencyAddressAsync(CreateEmergencyAddressOptions createEmergencyAddressOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateEmergencyAddress(createEmergencyAddressOptions);

                FormatCreateEmergencyAddress(createEmergencyAddressOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/emergency-addresses"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/emergency-addresses");

                    httpRequestMessageLocalVar.Content = (createEmergencyAddressOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createEmergencyAddressOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateEmergencyAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateEmergencyAddressApiResponse>();

                        CreateEmergencyAddressApiResponse apiResponseLocalVar = new CreateEmergencyAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/emergency-addresses", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateEmergencyAddressDefaultImplementation(apiResponseLocalVar, createEmergencyAddressOptions);

                        Events.ExecuteOnCreateEmergencyAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateEmergencyAddressDefaultImplementation(e, "/phone/emergency-addresses", uriBuilderLocalVar.Path, createEmergencyAddressOptions);
                Events.ExecuteOnErrorCreateEmergencyAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateEmergencyAddressApiResponse"/>
        /// </summary>
        public partial class CreateEmergencyAddressApiResponse : mailslurp.Client.ApiResponse, ICreateEmergencyAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateEmergencyAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateEmergencyAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateEmergencyAddressApiResponse(ILogger<CreateEmergencyAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.EmergencyAddress Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.EmergencyAddress>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.EmergencyAddress result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreatePhoneNumber(CreatePhoneNumberOptions createPhoneNumberOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createPhoneNumberOptions"></param>
        /// <returns></returns>
        private void ValidateCreatePhoneNumber(CreatePhoneNumberOptions createPhoneNumberOptions)
        {
            if (createPhoneNumberOptions == null)
                throw new ArgumentNullException(nameof(createPhoneNumberOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createPhoneNumberOptions"></param>
        private void AfterCreatePhoneNumberDefaultImplementation(ICreatePhoneNumberApiResponse apiResponseLocalVar, CreatePhoneNumberOptions createPhoneNumberOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreatePhoneNumber(ref suppressDefaultLog, apiResponseLocalVar, createPhoneNumberOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createPhoneNumberOptions"></param>
        partial void AfterCreatePhoneNumber(ref bool suppressDefaultLog, ICreatePhoneNumberApiResponse apiResponseLocalVar, CreatePhoneNumberOptions createPhoneNumberOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createPhoneNumberOptions"></param>
        private void OnErrorCreatePhoneNumberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreatePhoneNumberOptions createPhoneNumberOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreatePhoneNumber(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createPhoneNumberOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createPhoneNumberOptions"></param>
        partial void OnErrorCreatePhoneNumber(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreatePhoneNumberOptions createPhoneNumberOptions);

        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation. Create new phone number
        /// </summary>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePhoneNumberApiResponse"/>&gt;</returns>
        public async Task<ICreatePhoneNumberApiResponse> CreatePhoneNumberOrDefaultAsync(CreatePhoneNumberOptions createPhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreatePhoneNumberAsync(createPhoneNumberOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation. Create new phone number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePhoneNumberApiResponse"/>&gt;</returns>
        public async Task<ICreatePhoneNumberApiResponse> CreatePhoneNumberAsync(CreatePhoneNumberOptions createPhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreatePhoneNumber(createPhoneNumberOptions);

                FormatCreatePhoneNumber(createPhoneNumberOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone");

                    httpRequestMessageLocalVar.Content = (createPhoneNumberOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createPhoneNumberOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreatePhoneNumberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreatePhoneNumberApiResponse>();

                        CreatePhoneNumberApiResponse apiResponseLocalVar = new CreatePhoneNumberApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreatePhoneNumberDefaultImplementation(apiResponseLocalVar, createPhoneNumberOptions);

                        Events.ExecuteOnCreatePhoneNumber(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreatePhoneNumberDefaultImplementation(e, "/phone", uriBuilderLocalVar.Path, createPhoneNumberOptions);
                Events.ExecuteOnErrorCreatePhoneNumber(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreatePhoneNumberApiResponse"/>
        /// </summary>
        public partial class CreatePhoneNumberApiResponse : mailslurp.Client.ApiResponse, ICreatePhoneNumberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreatePhoneNumberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreatePhoneNumberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreatePhoneNumberApiResponse(ILogger<CreatePhoneNumberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PhoneNumberDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PhoneNumberDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PhoneNumberDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteEmergencyAddress(ref Guid addressId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addressId"></param>
        private void AfterDeleteEmergencyAddressDefaultImplementation(IDeleteEmergencyAddressApiResponse apiResponseLocalVar, Guid addressId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteEmergencyAddress(ref suppressDefaultLog, apiResponseLocalVar, addressId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addressId"></param>
        partial void AfterDeleteEmergencyAddress(ref bool suppressDefaultLog, IDeleteEmergencyAddressApiResponse apiResponseLocalVar, Guid addressId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addressId"></param>
        private void OnErrorDeleteEmergencyAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid addressId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteEmergencyAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addressId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addressId"></param>
        partial void OnErrorDeleteEmergencyAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid addressId);

        /// <summary>
        /// Delete an emergency address Delete an emergency address
        /// </summary>
        /// <param name="addressId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEmergencyAddressApiResponse"/>&gt;</returns>
        public async Task<IDeleteEmergencyAddressApiResponse> DeleteEmergencyAddressOrDefaultAsync(Guid addressId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteEmergencyAddressAsync(addressId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an emergency address Delete an emergency address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEmergencyAddressApiResponse"/>&gt;</returns>
        public async Task<IDeleteEmergencyAddressApiResponse> DeleteEmergencyAddressAsync(Guid addressId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteEmergencyAddress(ref addressId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/emergency-addresses/{addressId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/emergency-addresses/{addressId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaddressId%7D", Uri.EscapeDataString(addressId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteEmergencyAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteEmergencyAddressApiResponse>();

                        DeleteEmergencyAddressApiResponse apiResponseLocalVar = new DeleteEmergencyAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/emergency-addresses/{addressId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteEmergencyAddressDefaultImplementation(apiResponseLocalVar, addressId);

                        Events.ExecuteOnDeleteEmergencyAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteEmergencyAddressDefaultImplementation(e, "/phone/emergency-addresses/{addressId}", uriBuilderLocalVar.Path, addressId);
                Events.ExecuteOnErrorDeleteEmergencyAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteEmergencyAddressApiResponse"/>
        /// </summary>
        public partial class DeleteEmergencyAddressApiResponse : mailslurp.Client.ApiResponse, IDeleteEmergencyAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteEmergencyAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteEmergencyAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteEmergencyAddressApiResponse(ILogger<DeleteEmergencyAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.EmptyResponseDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.EmptyResponseDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.EmptyResponseDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletePhoneNumber(ref Guid phoneNumberId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        private void AfterDeletePhoneNumberDefaultImplementation(IDeletePhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId)
        {
            bool suppressDefaultLog = false;
            AfterDeletePhoneNumber(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        partial void AfterDeletePhoneNumber(ref bool suppressDefaultLog, IDeletePhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        private void OnErrorDeletePhoneNumberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePhoneNumber(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        partial void OnErrorDeletePhoneNumber(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId);

        /// <summary>
        /// Delete a phone number Remove phone number from account
        /// </summary>
        /// <param name="phoneNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IDeletePhoneNumberApiResponse> DeletePhoneNumberOrDefaultAsync(Guid phoneNumberId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePhoneNumberAsync(phoneNumberId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a phone number Remove phone number from account
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IDeletePhoneNumberApiResponse> DeletePhoneNumberAsync(Guid phoneNumberId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeletePhoneNumber(ref phoneNumberId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeletePhoneNumberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePhoneNumberApiResponse>();

                        DeletePhoneNumberApiResponse apiResponseLocalVar = new DeletePhoneNumberApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePhoneNumberDefaultImplementation(apiResponseLocalVar, phoneNumberId);

                        Events.ExecuteOnDeletePhoneNumber(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePhoneNumberDefaultImplementation(e, "/phone/numbers/{phoneNumberId}", uriBuilderLocalVar.Path, phoneNumberId);
                Events.ExecuteOnErrorDeletePhoneNumber(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePhoneNumberApiResponse"/>
        /// </summary>
        public partial class DeletePhoneNumberApiResponse : mailslurp.Client.ApiResponse, IDeletePhoneNumberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePhoneNumberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePhoneNumberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePhoneNumberApiResponse(ILogger<DeletePhoneNumberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllPhoneMessageThreads(ref Option<int> page, ref Option<int> size);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        private void AfterGetAllPhoneMessageThreadsDefaultImplementation(IGetAllPhoneMessageThreadsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size)
        {
            bool suppressDefaultLog = false;
            AfterGetAllPhoneMessageThreads(ref suppressDefaultLog, apiResponseLocalVar, page, size);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        partial void AfterGetAllPhoneMessageThreads(ref bool suppressDefaultLog, IGetAllPhoneMessageThreadsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        private void OnErrorGetAllPhoneMessageThreadsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllPhoneMessageThreads(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        partial void OnErrorGetAllPhoneMessageThreads(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size);

        /// <summary>
        /// Get the latest messages for all phones List all message threads for all phones
        /// </summary>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllPhoneMessageThreadsApiResponse"/>&gt;</returns>
        public async Task<IGetAllPhoneMessageThreadsApiResponse> GetAllPhoneMessageThreadsOrDefaultAsync(Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllPhoneMessageThreadsAsync(page, size, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the latest messages for all phones List all message threads for all phones
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllPhoneMessageThreadsApiResponse"/>&gt;</returns>
        public async Task<IGetAllPhoneMessageThreadsApiResponse> GetAllPhoneMessageThreadsAsync(Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetAllPhoneMessageThreads(ref page, ref size);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/message-threads"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/message-threads");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllPhoneMessageThreadsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllPhoneMessageThreadsApiResponse>();

                        GetAllPhoneMessageThreadsApiResponse apiResponseLocalVar = new GetAllPhoneMessageThreadsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/message-threads", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllPhoneMessageThreadsDefaultImplementation(apiResponseLocalVar, page, size);

                        Events.ExecuteOnGetAllPhoneMessageThreads(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllPhoneMessageThreadsDefaultImplementation(e, "/phone/numbers/message-threads", uriBuilderLocalVar.Path, page, size);
                Events.ExecuteOnErrorGetAllPhoneMessageThreads(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllPhoneMessageThreadsApiResponse"/>
        /// </summary>
        public partial class GetAllPhoneMessageThreadsApiResponse : mailslurp.Client.ApiResponse, IGetAllPhoneMessageThreadsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllPhoneMessageThreadsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllPhoneMessageThreadsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllPhoneMessageThreadsApiResponse(ILogger<GetAllPhoneMessageThreadsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PagePhoneMessageThreadProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PagePhoneMessageThreadProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PagePhoneMessageThreadProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetConsentStatusDefaultImplementation(IGetConsentStatusApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetConsentStatus(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetConsentStatus(ref bool suppressDefaultLog, IGetConsentStatusApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetConsentStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConsentStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetConsentStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get consent status Get the status of phone usage consent
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConsentStatusApiResponse"/>&gt;</returns>
        public async Task<IGetConsentStatusApiResponse> GetConsentStatusOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConsentStatusAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get consent status Get the status of phone usage consent
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConsentStatusApiResponse"/>&gt;</returns>
        public async Task<IGetConsentStatusApiResponse> GetConsentStatusAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/consent"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/consent");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetConsentStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConsentStatusApiResponse>();

                        GetConsentStatusApiResponse apiResponseLocalVar = new GetConsentStatusApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/consent", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConsentStatusDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetConsentStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConsentStatusDefaultImplementation(e, "/phone/consent", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetConsentStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConsentStatusApiResponse"/>
        /// </summary>
        public partial class GetConsentStatusApiResponse : mailslurp.Client.ApiResponse, IGetConsentStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConsentStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConsentStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConsentStatusApiResponse(ILogger<GetConsentStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConsentStatusDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConsentStatusDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConsentStatusDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEmergencyAddress(ref Guid addressId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addressId"></param>
        private void AfterGetEmergencyAddressDefaultImplementation(IGetEmergencyAddressApiResponse apiResponseLocalVar, Guid addressId)
        {
            bool suppressDefaultLog = false;
            AfterGetEmergencyAddress(ref suppressDefaultLog, apiResponseLocalVar, addressId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addressId"></param>
        partial void AfterGetEmergencyAddress(ref bool suppressDefaultLog, IGetEmergencyAddressApiResponse apiResponseLocalVar, Guid addressId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addressId"></param>
        private void OnErrorGetEmergencyAddressDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid addressId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEmergencyAddress(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addressId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addressId"></param>
        partial void OnErrorGetEmergencyAddress(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid addressId);

        /// <summary>
        /// Get an emergency address Fetch an emergency address by ID
        /// </summary>
        /// <param name="addressId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmergencyAddressApiResponse"/>&gt;</returns>
        public async Task<IGetEmergencyAddressApiResponse> GetEmergencyAddressOrDefaultAsync(Guid addressId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEmergencyAddressAsync(addressId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an emergency address Fetch an emergency address by ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmergencyAddressApiResponse"/>&gt;</returns>
        public async Task<IGetEmergencyAddressApiResponse> GetEmergencyAddressAsync(Guid addressId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetEmergencyAddress(ref addressId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/emergency-addresses/{addressId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/emergency-addresses/{addressId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BaddressId%7D", Uri.EscapeDataString(addressId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetEmergencyAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEmergencyAddressApiResponse>();

                        GetEmergencyAddressApiResponse apiResponseLocalVar = new GetEmergencyAddressApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/emergency-addresses/{addressId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEmergencyAddressDefaultImplementation(apiResponseLocalVar, addressId);

                        Events.ExecuteOnGetEmergencyAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEmergencyAddressDefaultImplementation(e, "/phone/emergency-addresses/{addressId}", uriBuilderLocalVar.Path, addressId);
                Events.ExecuteOnErrorGetEmergencyAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEmergencyAddressApiResponse"/>
        /// </summary>
        public partial class GetEmergencyAddressApiResponse : mailslurp.Client.ApiResponse, IGetEmergencyAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEmergencyAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEmergencyAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmergencyAddressApiResponse(ILogger<GetEmergencyAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.EmergencyAddress Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.EmergencyAddress>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.EmergencyAddress result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetEmergencyAddressesDefaultImplementation(IGetEmergencyAddressesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetEmergencyAddresses(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetEmergencyAddresses(ref bool suppressDefaultLog, IGetEmergencyAddressesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetEmergencyAddressesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEmergencyAddresses(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetEmergencyAddresses(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get emergency addresses List emergency addresses
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmergencyAddressesApiResponse"/>&gt;</returns>
        public async Task<IGetEmergencyAddressesApiResponse> GetEmergencyAddressesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEmergencyAddressesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get emergency addresses List emergency addresses
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmergencyAddressesApiResponse"/>&gt;</returns>
        public async Task<IGetEmergencyAddressesApiResponse> GetEmergencyAddressesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/emergency-addresses"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/emergency-addresses");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetEmergencyAddressesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEmergencyAddressesApiResponse>();

                        GetEmergencyAddressesApiResponse apiResponseLocalVar = new GetEmergencyAddressesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/emergency-addresses", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEmergencyAddressesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetEmergencyAddresses(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEmergencyAddressesDefaultImplementation(e, "/phone/emergency-addresses", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetEmergencyAddresses(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEmergencyAddressesApiResponse"/>
        /// </summary>
        public partial class GetEmergencyAddressesApiResponse : mailslurp.Client.ApiResponse, IGetEmergencyAddressesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEmergencyAddressesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEmergencyAddressesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmergencyAddressesApiResponse(ILogger<GetEmergencyAddressesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EmergencyAddressDto> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EmergencyAddressDto>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<EmergencyAddressDto> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPhoneMessageThreadItems(ref Guid phoneNumberId, ref string otherNumber, ref Option<int> page, ref Option<int> size);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="otherNumber"></param>
        /// <returns></returns>
        private void ValidateGetPhoneMessageThreadItems(string otherNumber)
        {
            if (otherNumber == null)
                throw new ArgumentNullException(nameof(otherNumber));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        private void AfterGetPhoneMessageThreadItemsDefaultImplementation(IGetPhoneMessageThreadItemsApiResponse apiResponseLocalVar, Guid phoneNumberId, string otherNumber, Option<int> page, Option<int> size)
        {
            bool suppressDefaultLog = false;
            AfterGetPhoneMessageThreadItems(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId, otherNumber, page, size);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        partial void AfterGetPhoneMessageThreadItems(ref bool suppressDefaultLog, IGetPhoneMessageThreadItemsApiResponse apiResponseLocalVar, Guid phoneNumberId, string otherNumber, Option<int> page, Option<int> size);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        private void OnErrorGetPhoneMessageThreadItemsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, string otherNumber, Option<int> page, Option<int> size)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPhoneMessageThreadItems(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId, otherNumber, page, size);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        partial void OnErrorGetPhoneMessageThreadItems(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, string otherNumber, Option<int> page, Option<int> size);

        /// <summary>
        /// Get messages in a phone thread List message thread messages for a phone message thread
        /// </summary>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneMessageThreadItemsApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneMessageThreadItemsApiResponse> GetPhoneMessageThreadItemsOrDefaultAsync(Guid phoneNumberId, string otherNumber, Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPhoneMessageThreadItemsAsync(phoneNumberId, otherNumber, page, size, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get messages in a phone thread List message thread messages for a phone message thread
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="otherNumber"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneMessageThreadItemsApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneMessageThreadItemsApiResponse> GetPhoneMessageThreadItemsAsync(Guid phoneNumberId, string otherNumber, Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPhoneMessageThreadItems(otherNumber);

                FormatGetPhoneMessageThreadItems(ref phoneNumberId, ref otherNumber, ref page, ref size);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}/message-threads/{otherNumber}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}/message-threads/{otherNumber}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BotherNumber%7D", Uri.EscapeDataString(otherNumber.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetPhoneMessageThreadItemsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPhoneMessageThreadItemsApiResponse>();

                        GetPhoneMessageThreadItemsApiResponse apiResponseLocalVar = new GetPhoneMessageThreadItemsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}/message-threads/{otherNumber}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPhoneMessageThreadItemsDefaultImplementation(apiResponseLocalVar, phoneNumberId, otherNumber, page, size);

                        Events.ExecuteOnGetPhoneMessageThreadItems(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPhoneMessageThreadItemsDefaultImplementation(e, "/phone/numbers/{phoneNumberId}/message-threads/{otherNumber}", uriBuilderLocalVar.Path, phoneNumberId, otherNumber, page, size);
                Events.ExecuteOnErrorGetPhoneMessageThreadItems(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPhoneMessageThreadItemsApiResponse"/>
        /// </summary>
        public partial class GetPhoneMessageThreadItemsApiResponse : mailslurp.Client.ApiResponse, IGetPhoneMessageThreadItemsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPhoneMessageThreadItemsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPhoneMessageThreadItemsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPhoneMessageThreadItemsApiResponse(ILogger<GetPhoneMessageThreadItemsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PagePhoneMessageThreadItemProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PagePhoneMessageThreadItemProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PagePhoneMessageThreadItemProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPhoneMessageThreads(ref Guid phoneNumberId, ref Option<int> page, ref Option<int> size);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        private void AfterGetPhoneMessageThreadsDefaultImplementation(IGetPhoneMessageThreadsApiResponse apiResponseLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size)
        {
            bool suppressDefaultLog = false;
            AfterGetPhoneMessageThreads(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId, page, size);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        partial void AfterGetPhoneMessageThreads(ref bool suppressDefaultLog, IGetPhoneMessageThreadsApiResponse apiResponseLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        private void OnErrorGetPhoneMessageThreadsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPhoneMessageThreads(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId, page, size);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        partial void OnErrorGetPhoneMessageThreads(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size);

        /// <summary>
        /// Get the latest message preview for a thread List message threads for a phone
        /// </summary>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneMessageThreadsApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneMessageThreadsApiResponse> GetPhoneMessageThreadsOrDefaultAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPhoneMessageThreadsAsync(phoneNumberId, page, size, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the latest message preview for a thread List message threads for a phone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"> (optional, default to 0)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneMessageThreadsApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneMessageThreadsApiResponse> GetPhoneMessageThreadsAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetPhoneMessageThreads(ref phoneNumberId, ref page, ref size);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}/message-threads"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}/message-threads");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetPhoneMessageThreadsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPhoneMessageThreadsApiResponse>();

                        GetPhoneMessageThreadsApiResponse apiResponseLocalVar = new GetPhoneMessageThreadsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}/message-threads", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPhoneMessageThreadsDefaultImplementation(apiResponseLocalVar, phoneNumberId, page, size);

                        Events.ExecuteOnGetPhoneMessageThreads(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPhoneMessageThreadsDefaultImplementation(e, "/phone/numbers/{phoneNumberId}/message-threads", uriBuilderLocalVar.Path, phoneNumberId, page, size);
                Events.ExecuteOnErrorGetPhoneMessageThreads(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPhoneMessageThreadsApiResponse"/>
        /// </summary>
        public partial class GetPhoneMessageThreadsApiResponse : mailslurp.Client.ApiResponse, IGetPhoneMessageThreadsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPhoneMessageThreadsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPhoneMessageThreadsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPhoneMessageThreadsApiResponse(ILogger<GetPhoneMessageThreadsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PagePhoneMessageThreadProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PagePhoneMessageThreadProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PagePhoneMessageThreadProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPhoneNumber(ref Guid phoneNumberId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        private void AfterGetPhoneNumberDefaultImplementation(IGetPhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId)
        {
            bool suppressDefaultLog = false;
            AfterGetPhoneNumber(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        partial void AfterGetPhoneNumber(ref bool suppressDefaultLog, IGetPhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        private void OnErrorGetPhoneNumberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPhoneNumber(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        partial void OnErrorGetPhoneNumber(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId);

        /// <summary>
        /// Get a phone number by ID Get a phone number by ID
        /// </summary>
        /// <param name="phoneNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneNumberApiResponse> GetPhoneNumberOrDefaultAsync(Guid phoneNumberId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPhoneNumberAsync(phoneNumberId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a phone number by ID Get a phone number by ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneNumberApiResponse> GetPhoneNumberAsync(Guid phoneNumberId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetPhoneNumber(ref phoneNumberId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetPhoneNumberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPhoneNumberApiResponse>();

                        GetPhoneNumberApiResponse apiResponseLocalVar = new GetPhoneNumberApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPhoneNumberDefaultImplementation(apiResponseLocalVar, phoneNumberId);

                        Events.ExecuteOnGetPhoneNumber(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPhoneNumberDefaultImplementation(e, "/phone/numbers/{phoneNumberId}", uriBuilderLocalVar.Path, phoneNumberId);
                Events.ExecuteOnErrorGetPhoneNumber(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPhoneNumberApiResponse"/>
        /// </summary>
        public partial class GetPhoneNumberApiResponse : mailslurp.Client.ApiResponse, IGetPhoneNumberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPhoneNumberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPhoneNumberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPhoneNumberApiResponse(ILogger<GetPhoneNumberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PhoneNumberDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PhoneNumberDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PhoneNumberDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPhoneNumberByName(ref string name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateGetPhoneNumberByName(string name)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        private void AfterGetPhoneNumberByNameDefaultImplementation(IGetPhoneNumberByNameApiResponse apiResponseLocalVar, string name)
        {
            bool suppressDefaultLog = false;
            AfterGetPhoneNumberByName(ref suppressDefaultLog, apiResponseLocalVar, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        partial void AfterGetPhoneNumberByName(ref bool suppressDefaultLog, IGetPhoneNumberByNameApiResponse apiResponseLocalVar, string name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        private void OnErrorGetPhoneNumberByNameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPhoneNumberByName(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        partial void OnErrorGetPhoneNumberByName(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name);

        /// <summary>
        /// Get a phone number by name Get a phone number by name
        /// </summary>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberByNameApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneNumberByNameApiResponse> GetPhoneNumberByNameOrDefaultAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPhoneNumberByNameAsync(name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a phone number by name Get a phone number by name
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberByNameApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneNumberByNameApiResponse> GetPhoneNumberByNameAsync(string name, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPhoneNumberByName(name);

                FormatGetPhoneNumberByName(ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/by-name"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/by-name");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetPhoneNumberByNameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPhoneNumberByNameApiResponse>();

                        GetPhoneNumberByNameApiResponse apiResponseLocalVar = new GetPhoneNumberByNameApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/by-name", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPhoneNumberByNameDefaultImplementation(apiResponseLocalVar, name);

                        Events.ExecuteOnGetPhoneNumberByName(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPhoneNumberByNameDefaultImplementation(e, "/phone/numbers/by-name", uriBuilderLocalVar.Path, name);
                Events.ExecuteOnErrorGetPhoneNumberByName(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPhoneNumberByNameApiResponse"/>
        /// </summary>
        public partial class GetPhoneNumberByNameApiResponse : mailslurp.Client.ApiResponse, IGetPhoneNumberByNameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPhoneNumberByNameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPhoneNumberByNameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPhoneNumberByNameApiResponse(ILogger<GetPhoneNumberByNameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PhoneNumberDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PhoneNumberDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PhoneNumberDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPhoneNumberByPhoneNumber(ref string phoneNumber);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="phoneNumber"></param>
        /// <returns></returns>
        private void ValidateGetPhoneNumberByPhoneNumber(string phoneNumber)
        {
            if (phoneNumber == null)
                throw new ArgumentNullException(nameof(phoneNumber));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumber"></param>
        private void AfterGetPhoneNumberByPhoneNumberDefaultImplementation(IGetPhoneNumberByPhoneNumberApiResponse apiResponseLocalVar, string phoneNumber)
        {
            bool suppressDefaultLog = false;
            AfterGetPhoneNumberByPhoneNumber(ref suppressDefaultLog, apiResponseLocalVar, phoneNumber);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumber"></param>
        partial void AfterGetPhoneNumberByPhoneNumber(ref bool suppressDefaultLog, IGetPhoneNumberByPhoneNumberApiResponse apiResponseLocalVar, string phoneNumber);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumber"></param>
        private void OnErrorGetPhoneNumberByPhoneNumberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string phoneNumber)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPhoneNumberByPhoneNumber(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumber);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumber"></param>
        partial void OnErrorGetPhoneNumberByPhoneNumber(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string phoneNumber);

        /// <summary>
        /// Get a phone number by phone number Get a phone number by phone number
        /// </summary>
        /// <param name="phoneNumber"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberByPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneNumberByPhoneNumberApiResponse> GetPhoneNumberByPhoneNumberOrDefaultAsync(string phoneNumber, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPhoneNumberByPhoneNumberAsync(phoneNumber, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a phone number by phone number Get a phone number by phone number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberByPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneNumberByPhoneNumberApiResponse> GetPhoneNumberByPhoneNumberAsync(string phoneNumber, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPhoneNumberByPhoneNumber(phoneNumber);

                FormatGetPhoneNumberByPhoneNumber(ref phoneNumber);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/by-phone-number"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/by-phone-number");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["phoneNumber"] = ClientUtils.ParameterToString(phoneNumber);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetPhoneNumberByPhoneNumberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPhoneNumberByPhoneNumberApiResponse>();

                        GetPhoneNumberByPhoneNumberApiResponse apiResponseLocalVar = new GetPhoneNumberByPhoneNumberApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/by-phone-number", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPhoneNumberByPhoneNumberDefaultImplementation(apiResponseLocalVar, phoneNumber);

                        Events.ExecuteOnGetPhoneNumberByPhoneNumber(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPhoneNumberByPhoneNumberDefaultImplementation(e, "/phone/numbers/by-phone-number", uriBuilderLocalVar.Path, phoneNumber);
                Events.ExecuteOnErrorGetPhoneNumberByPhoneNumber(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPhoneNumberByPhoneNumberApiResponse"/>
        /// </summary>
        public partial class GetPhoneNumberByPhoneNumberApiResponse : mailslurp.Client.ApiResponse, IGetPhoneNumberByPhoneNumberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPhoneNumberByPhoneNumberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPhoneNumberByPhoneNumberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPhoneNumberByPhoneNumberApiResponse(ILogger<GetPhoneNumberByPhoneNumberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PhoneNumberDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PhoneNumberDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PhoneNumberDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPhoneNumbers(ref Option<string> phoneCountry, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> search, Option<List<Guid>> include, ref Option<bool> favourite);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="phoneCountry"></param>
        /// <param name="sort"></param>
        /// <param name="search"></param>
        /// <param name="include"></param>
        /// <returns></returns>
        private void ValidateGetPhoneNumbers(Option<string> phoneCountry, Option<string> sort, Option<string> search, Option<List<Guid>> include)
        {
            if (phoneCountry.IsSet && phoneCountry.Value == null)
                throw new ArgumentNullException(nameof(phoneCountry));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (include.IsSet && include.Value == null)
                throw new ArgumentNullException(nameof(include));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneCountry"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="include"></param>
        /// <param name="favourite"></param>
        private void AfterGetPhoneNumbersDefaultImplementation(IGetPhoneNumbersApiResponse apiResponseLocalVar, Option<string> phoneCountry, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<List<Guid>> include, Option<bool> favourite)
        {
            bool suppressDefaultLog = false;
            AfterGetPhoneNumbers(ref suppressDefaultLog, apiResponseLocalVar, phoneCountry, page, size, sort, since, before, search, include, favourite);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneCountry"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="include"></param>
        /// <param name="favourite"></param>
        partial void AfterGetPhoneNumbers(ref bool suppressDefaultLog, IGetPhoneNumbersApiResponse apiResponseLocalVar, Option<string> phoneCountry, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<List<Guid>> include, Option<bool> favourite);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneCountry"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="include"></param>
        /// <param name="favourite"></param>
        private void OnErrorGetPhoneNumbersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> phoneCountry, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<List<Guid>> include, Option<bool> favourite)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPhoneNumbers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneCountry, page, size, sort, since, before, search, include, favourite);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneCountry"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="include"></param>
        /// <param name="favourite"></param>
        partial void OnErrorGetPhoneNumbers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> phoneCountry, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<List<Guid>> include, Option<bool> favourite);

        /// <summary>
        /// Get phone numbers List phone numbers for account
        /// </summary>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumbersApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneNumbersApiResponse> GetPhoneNumbersOrDefaultAsync(Option<string> phoneCountry = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<List<Guid>> include = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPhoneNumbersAsync(phoneCountry, page, size, sort, since, before, search, include, favourite, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get phone numbers List phone numbers for account
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneCountry">Optional phone country (optional)</param>
        /// <param name="page">Optional page index for list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="include">Optional phoneIds to include in result (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumbersApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneNumbersApiResponse> GetPhoneNumbersAsync(Option<string> phoneCountry = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<List<Guid>> include = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPhoneNumbers(phoneCountry, sort, search, include);

                FormatGetPhoneNumbers(ref phoneCountry, ref page, ref size, ref sort, ref since, ref before, ref search, include, ref favourite);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (phoneCountry.IsSet)
                        parseQueryStringLocalVar["phoneCountry"] = ClientUtils.ParameterToString(phoneCountry.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (include.IsSet)
                        parseQueryStringLocalVar["include"] = ClientUtils.ParameterToString(include.Value);

                    if (favourite.IsSet)
                        parseQueryStringLocalVar["favourite"] = ClientUtils.ParameterToString(favourite.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetPhoneNumbersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPhoneNumbersApiResponse>();

                        GetPhoneNumbersApiResponse apiResponseLocalVar = new GetPhoneNumbersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPhoneNumbersDefaultImplementation(apiResponseLocalVar, phoneCountry, page, size, sort, since, before, search, include, favourite);

                        Events.ExecuteOnGetPhoneNumbers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPhoneNumbersDefaultImplementation(e, "/phone/numbers", uriBuilderLocalVar.Path, phoneCountry, page, size, sort, since, before, search, include, favourite);
                Events.ExecuteOnErrorGetPhoneNumbers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPhoneNumbersApiResponse"/>
        /// </summary>
        public partial class GetPhoneNumbersApiResponse : mailslurp.Client.ApiResponse, IGetPhoneNumbersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPhoneNumbersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPhoneNumbersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPhoneNumbersApiResponse(ILogger<GetPhoneNumbersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PagePhoneNumberProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PagePhoneNumberProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PagePhoneNumberProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetPhonePlansDefaultImplementation(IGetPhonePlansApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetPhonePlans(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetPhonePlans(ref bool suppressDefaultLog, IGetPhonePlansApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetPhonePlansDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPhonePlans(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetPhonePlans(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get phone plans Get phone number plans
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhonePlansApiResponse"/>&gt;</returns>
        public async Task<IGetPhonePlansApiResponse> GetPhonePlansOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPhonePlansAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get phone plans Get phone number plans
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhonePlansApiResponse"/>&gt;</returns>
        public async Task<IGetPhonePlansApiResponse> GetPhonePlansAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/plans"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/plans");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetPhonePlansApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPhonePlansApiResponse>();

                        GetPhonePlansApiResponse apiResponseLocalVar = new GetPhonePlansApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/plans", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPhonePlansDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetPhonePlans(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPhonePlansDefaultImplementation(e, "/phone/plans", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetPhonePlans(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPhonePlansApiResponse"/>
        /// </summary>
        public partial class GetPhonePlansApiResponse : mailslurp.Client.ApiResponse, IGetPhonePlansApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPhonePlansApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPhonePlansApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPhonePlansApiResponse(ILogger<GetPhonePlansApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PhonePlanDto> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PhonePlanDto>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<PhonePlanDto> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetPhonePlansAvailabilityDefaultImplementation(IGetPhonePlansAvailabilityApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetPhonePlansAvailability(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetPhonePlansAvailability(ref bool suppressDefaultLog, IGetPhonePlansAvailabilityApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetPhonePlansAvailabilityDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPhonePlansAvailability(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetPhonePlansAvailability(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get phone plans availability 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhonePlansAvailabilityApiResponse"/>&gt;</returns>
        public async Task<IGetPhonePlansAvailabilityApiResponse> GetPhonePlansAvailabilityOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPhonePlansAvailabilityAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get phone plans availability 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhonePlansAvailabilityApiResponse"/>&gt;</returns>
        public async Task<IGetPhonePlansAvailabilityApiResponse> GetPhonePlansAvailabilityAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/plans/availability"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/plans/availability");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetPhonePlansAvailabilityApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPhonePlansAvailabilityApiResponse>();

                        GetPhonePlansAvailabilityApiResponse apiResponseLocalVar = new GetPhonePlansAvailabilityApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/plans/availability", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPhonePlansAvailabilityDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetPhonePlansAvailability(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPhonePlansAvailabilityDefaultImplementation(e, "/phone/plans/availability", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetPhonePlansAvailability(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPhonePlansAvailabilityApiResponse"/>
        /// </summary>
        public partial class GetPhonePlansAvailabilityApiResponse : mailslurp.Client.ApiResponse, IGetPhonePlansAvailabilityApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPhonePlansAvailabilityApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPhonePlansAvailabilityApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPhonePlansAvailabilityApiResponse(ILogger<GetPhonePlansAvailabilityApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PhonePlanAvailability Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PhonePlanAvailability>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PhonePlanAvailability result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSentSmsByPhoneNumber(ref Guid phoneNumberId, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> search);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        private void ValidateGetSentSmsByPhoneNumber(Option<string> sort, Option<string> search)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        private void AfterGetSentSmsByPhoneNumberDefaultImplementation(IGetSentSmsByPhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search)
        {
            bool suppressDefaultLog = false;
            AfterGetSentSmsByPhoneNumber(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId, page, size, sort, since, before, search);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        partial void AfterGetSentSmsByPhoneNumber(ref bool suppressDefaultLog, IGetSentSmsByPhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        private void OnErrorGetSentSmsByPhoneNumberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSentSmsByPhoneNumber(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId, page, size, sort, since, before, search);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        partial void OnErrorGetSentSmsByPhoneNumber(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> search);

        /// <summary>
        /// List sent TXT messages for a phone number Get sent SMS messages for a phone number
        /// </summary>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsByPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IGetSentSmsByPhoneNumberApiResponse> GetSentSmsByPhoneNumberOrDefaultAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSentSmsByPhoneNumberAsync(phoneNumberId, page, size, sort, since, before, search, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List sent TXT messages for a phone number Get sent SMS messages for a phone number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentSmsByPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IGetSentSmsByPhoneNumberApiResponse> GetSentSmsByPhoneNumberAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSentSmsByPhoneNumber(sort, search);

                FormatGetSentSmsByPhoneNumber(ref phoneNumberId, ref page, ref size, ref sort, ref since, ref before, ref search);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}/sms-sent"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}/sms-sent");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetSentSmsByPhoneNumberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSentSmsByPhoneNumberApiResponse>();

                        GetSentSmsByPhoneNumberApiResponse apiResponseLocalVar = new GetSentSmsByPhoneNumberApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}/sms-sent", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSentSmsByPhoneNumberDefaultImplementation(apiResponseLocalVar, phoneNumberId, page, size, sort, since, before, search);

                        Events.ExecuteOnGetSentSmsByPhoneNumber(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSentSmsByPhoneNumberDefaultImplementation(e, "/phone/numbers/{phoneNumberId}/sms-sent", uriBuilderLocalVar.Path, phoneNumberId, page, size, sort, since, before, search);
                Events.ExecuteOnErrorGetSentSmsByPhoneNumber(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSentSmsByPhoneNumberApiResponse"/>
        /// </summary>
        public partial class GetSentSmsByPhoneNumberApiResponse : mailslurp.Client.ApiResponse, IGetSentSmsByPhoneNumberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSentSmsByPhoneNumberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSentSmsByPhoneNumberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSentSmsByPhoneNumberApiResponse(ILogger<GetSentSmsByPhoneNumberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageSentSmsProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageSentSmsProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageSentSmsProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSmsByPhoneNumber(ref Guid phoneNumberId, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<bool> unreadOnly, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> search, ref Option<bool> favourite);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        private void ValidateGetSmsByPhoneNumber(Option<string> sort, Option<string> search)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="unreadOnly"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="favourite"></param>
        private void AfterGetSmsByPhoneNumberDefaultImplementation(IGetSmsByPhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size, Option<string> sort, Option<bool> unreadOnly, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<bool> favourite)
        {
            bool suppressDefaultLog = false;
            AfterGetSmsByPhoneNumber(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="unreadOnly"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="favourite"></param>
        partial void AfterGetSmsByPhoneNumber(ref bool suppressDefaultLog, IGetSmsByPhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size, Option<string> sort, Option<bool> unreadOnly, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<bool> favourite);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="unreadOnly"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="favourite"></param>
        private void OnErrorGetSmsByPhoneNumberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size, Option<string> sort, Option<bool> unreadOnly, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<bool> favourite)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSmsByPhoneNumber(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="unreadOnly"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="search"></param>
        /// <param name="favourite"></param>
        partial void OnErrorGetSmsByPhoneNumber(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, Option<int> page, Option<int> size, Option<string> sort, Option<bool> unreadOnly, Option<DateTime> since, Option<DateTime> before, Option<string> search, Option<bool> favourite);

        /// <summary>
        /// List SMS messages for a phone number Get SMS messages for a phone number
        /// </summary>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsByPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IGetSmsByPhoneNumberApiResponse> GetSmsByPhoneNumberOrDefaultAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<bool> unreadOnly = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSmsByPhoneNumberAsync(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List SMS messages for a phone number Get SMS messages for a phone number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="unreadOnly">Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)</param>
        /// <param name="since">Optional filter SMSs received after given date time (optional)</param>
        /// <param name="before">Optional filter SMSs received before given date time (optional)</param>
        /// <param name="search">Optional search filter (optional)</param>
        /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsByPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IGetSmsByPhoneNumberApiResponse> GetSmsByPhoneNumberAsync(Guid phoneNumberId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<bool> unreadOnly = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> search = default, Option<bool> favourite = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSmsByPhoneNumber(sort, search);

                FormatGetSmsByPhoneNumber(ref phoneNumberId, ref page, ref size, ref sort, ref unreadOnly, ref since, ref before, ref search, ref favourite);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}/sms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}/sms");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (unreadOnly.IsSet)
                        parseQueryStringLocalVar["unreadOnly"] = ClientUtils.ParameterToString(unreadOnly.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (favourite.IsSet)
                        parseQueryStringLocalVar["favourite"] = ClientUtils.ParameterToString(favourite.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetSmsByPhoneNumberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSmsByPhoneNumberApiResponse>();

                        GetSmsByPhoneNumberApiResponse apiResponseLocalVar = new GetSmsByPhoneNumberApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}/sms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSmsByPhoneNumberDefaultImplementation(apiResponseLocalVar, phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite);

                        Events.ExecuteOnGetSmsByPhoneNumber(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSmsByPhoneNumberDefaultImplementation(e, "/phone/numbers/{phoneNumberId}/sms", uriBuilderLocalVar.Path, phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite);
                Events.ExecuteOnErrorGetSmsByPhoneNumber(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSmsByPhoneNumberApiResponse"/>
        /// </summary>
        public partial class GetSmsByPhoneNumberApiResponse : mailslurp.Client.ApiResponse, IGetSmsByPhoneNumberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSmsByPhoneNumberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSmsByPhoneNumberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSmsByPhoneNumberApiResponse(ILogger<GetSmsByPhoneNumberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageSmsProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageSmsProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageSmsProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendSmsFromPhoneNumber(ref Guid phoneNumberId, SmsSendOptions smsSendOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="smsSendOptions"></param>
        /// <returns></returns>
        private void ValidateSendSmsFromPhoneNumber(SmsSendOptions smsSendOptions)
        {
            if (smsSendOptions == null)
                throw new ArgumentNullException(nameof(smsSendOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        private void AfterSendSmsFromPhoneNumberDefaultImplementation(ISendSmsFromPhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId, SmsSendOptions smsSendOptions)
        {
            bool suppressDefaultLog = false;
            AfterSendSmsFromPhoneNumber(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId, smsSendOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        partial void AfterSendSmsFromPhoneNumber(ref bool suppressDefaultLog, ISendSmsFromPhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId, SmsSendOptions smsSendOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        private void OnErrorSendSmsFromPhoneNumberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, SmsSendOptions smsSendOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendSmsFromPhoneNumber(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId, smsSendOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        partial void OnErrorSendSmsFromPhoneNumber(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, SmsSendOptions smsSendOptions);

        /// <summary>
        /// Send TXT message from a phone number Send SMS from a phone number
        /// </summary>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendSmsFromPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<ISendSmsFromPhoneNumberApiResponse> SendSmsFromPhoneNumberOrDefaultAsync(Guid phoneNumberId, SmsSendOptions smsSendOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendSmsFromPhoneNumberAsync(phoneNumberId, smsSendOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send TXT message from a phone number Send SMS from a phone number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="smsSendOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendSmsFromPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<ISendSmsFromPhoneNumberApiResponse> SendSmsFromPhoneNumberAsync(Guid phoneNumberId, SmsSendOptions smsSendOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendSmsFromPhoneNumber(smsSendOptions);

                FormatSendSmsFromPhoneNumber(ref phoneNumberId, smsSendOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}/sms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}/sms");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));

                    httpRequestMessageLocalVar.Content = (smsSendOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(smsSendOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendSmsFromPhoneNumberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendSmsFromPhoneNumberApiResponse>();

                        SendSmsFromPhoneNumberApiResponse apiResponseLocalVar = new SendSmsFromPhoneNumberApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}/sms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendSmsFromPhoneNumberDefaultImplementation(apiResponseLocalVar, phoneNumberId, smsSendOptions);

                        Events.ExecuteOnSendSmsFromPhoneNumber(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendSmsFromPhoneNumberDefaultImplementation(e, "/phone/numbers/{phoneNumberId}/sms", uriBuilderLocalVar.Path, phoneNumberId, smsSendOptions);
                Events.ExecuteOnErrorSendSmsFromPhoneNumber(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendSmsFromPhoneNumberApiResponse"/>
        /// </summary>
        public partial class SendSmsFromPhoneNumberApiResponse : mailslurp.Client.ApiResponse, ISendSmsFromPhoneNumberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendSmsFromPhoneNumberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendSmsFromPhoneNumberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendSmsFromPhoneNumberApiResponse(ILogger<SendSmsFromPhoneNumberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.SentSmsDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.SentSmsDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.SentSmsDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetConsentStatus(ref bool agree);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agree"></param>
        private void AfterSetConsentStatusDefaultImplementation(ISetConsentStatusApiResponse apiResponseLocalVar, bool agree)
        {
            bool suppressDefaultLog = false;
            AfterSetConsentStatus(ref suppressDefaultLog, apiResponseLocalVar, agree);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agree"></param>
        partial void AfterSetConsentStatus(ref bool suppressDefaultLog, ISetConsentStatusApiResponse apiResponseLocalVar, bool agree);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agree"></param>
        private void OnErrorSetConsentStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, bool agree)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetConsentStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agree);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agree"></param>
        partial void OnErrorSetConsentStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, bool agree);

        /// <summary>
        /// Set consent status Give or revoke consent for phone usage
        /// </summary>
        /// <param name="agree"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetConsentStatusApiResponse"/>&gt;</returns>
        public async Task<ISetConsentStatusApiResponse> SetConsentStatusOrDefaultAsync(bool agree, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetConsentStatusAsync(agree, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set consent status Give or revoke consent for phone usage
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agree"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetConsentStatusApiResponse"/>&gt;</returns>
        public async Task<ISetConsentStatusApiResponse> SetConsentStatusAsync(bool agree, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatSetConsentStatus(ref agree);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/consent"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/consent");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["agree"] = ClientUtils.ParameterToString(agree);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SetConsentStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetConsentStatusApiResponse>();

                        SetConsentStatusApiResponse apiResponseLocalVar = new SetConsentStatusApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/consent", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetConsentStatusDefaultImplementation(apiResponseLocalVar, agree);

                        Events.ExecuteOnSetConsentStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetConsentStatusDefaultImplementation(e, "/phone/consent", uriBuilderLocalVar.Path, agree);
                Events.ExecuteOnErrorSetConsentStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetConsentStatusApiResponse"/>
        /// </summary>
        public partial class SetConsentStatusApiResponse : mailslurp.Client.ApiResponse, ISetConsentStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetConsentStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetConsentStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetConsentStatusApiResponse(ILogger<SetConsentStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.ConsentStatusDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.ConsentStatusDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.ConsentStatusDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetPhoneFavourited(ref Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <returns></returns>
        private void ValidateSetPhoneFavourited(SetPhoneFavouritedOptions setPhoneFavouritedOptions)
        {
            if (setPhoneFavouritedOptions == null)
                throw new ArgumentNullException(nameof(setPhoneFavouritedOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="setPhoneFavouritedOptions"></param>
        private void AfterSetPhoneFavouritedDefaultImplementation(ISetPhoneFavouritedApiResponse apiResponseLocalVar, Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions)
        {
            bool suppressDefaultLog = false;
            AfterSetPhoneFavourited(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId, setPhoneFavouritedOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="setPhoneFavouritedOptions"></param>
        partial void AfterSetPhoneFavourited(ref bool suppressDefaultLog, ISetPhoneFavouritedApiResponse apiResponseLocalVar, Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="setPhoneFavouritedOptions"></param>
        private void OnErrorSetPhoneFavouritedDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetPhoneFavourited(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId, setPhoneFavouritedOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="setPhoneFavouritedOptions"></param>
        partial void OnErrorSetPhoneFavourited(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions);

        /// <summary>
        /// Set phone favourited state Set and return new favorite state for a phone
        /// </summary>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetPhoneFavouritedApiResponse"/>&gt;</returns>
        public async Task<ISetPhoneFavouritedApiResponse> SetPhoneFavouritedOrDefaultAsync(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetPhoneFavouritedAsync(phoneNumberId, setPhoneFavouritedOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set phone favourited state Set and return new favorite state for a phone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="setPhoneFavouritedOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetPhoneFavouritedApiResponse"/>&gt;</returns>
        public async Task<ISetPhoneFavouritedApiResponse> SetPhoneFavouritedAsync(Guid phoneNumberId, SetPhoneFavouritedOptions setPhoneFavouritedOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetPhoneFavourited(setPhoneFavouritedOptions);

                FormatSetPhoneFavourited(ref phoneNumberId, setPhoneFavouritedOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}/favourite"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}/favourite");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));

                    httpRequestMessageLocalVar.Content = (setPhoneFavouritedOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(setPhoneFavouritedOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SetPhoneFavouritedApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetPhoneFavouritedApiResponse>();

                        SetPhoneFavouritedApiResponse apiResponseLocalVar = new SetPhoneFavouritedApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}/favourite", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetPhoneFavouritedDefaultImplementation(apiResponseLocalVar, phoneNumberId, setPhoneFavouritedOptions);

                        Events.ExecuteOnSetPhoneFavourited(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetPhoneFavouritedDefaultImplementation(e, "/phone/numbers/{phoneNumberId}/favourite", uriBuilderLocalVar.Path, phoneNumberId, setPhoneFavouritedOptions);
                Events.ExecuteOnErrorSetPhoneFavourited(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetPhoneFavouritedApiResponse"/>
        /// </summary>
        public partial class SetPhoneFavouritedApiResponse : mailslurp.Client.ApiResponse, ISetPhoneFavouritedApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetPhoneFavouritedApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetPhoneFavouritedApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetPhoneFavouritedApiResponse(ILogger<SetPhoneFavouritedApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PhoneNumberDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PhoneNumberDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PhoneNumberDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTestPhoneNumberSendSms(ref Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, ref Option<string> xTestId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"></param>
        /// <returns></returns>
        private void ValidateTestPhoneNumberSendSms(TestPhoneNumberOptions testPhoneNumberOptions, Option<string> xTestId)
        {
            if (testPhoneNumberOptions == null)
                throw new ArgumentNullException(nameof(testPhoneNumberOptions));

            if (xTestId.IsSet && xTestId.Value == null)
                throw new ArgumentNullException(nameof(xTestId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"></param>
        private void AfterTestPhoneNumberSendSmsDefaultImplementation(ITestPhoneNumberSendSmsApiResponse apiResponseLocalVar, Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, Option<string> xTestId)
        {
            bool suppressDefaultLog = false;
            AfterTestPhoneNumberSendSms(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId, testPhoneNumberOptions, xTestId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"></param>
        partial void AfterTestPhoneNumberSendSms(ref bool suppressDefaultLog, ITestPhoneNumberSendSmsApiResponse apiResponseLocalVar, Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, Option<string> xTestId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"></param>
        private void OnErrorTestPhoneNumberSendSmsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, Option<string> xTestId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTestPhoneNumberSendSms(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId, testPhoneNumberOptions, xTestId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"></param>
        partial void OnErrorTestPhoneNumberSendSms(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, Option<string> xTestId);

        /// <summary>
        /// Test sending an SMS to a number Test a phone number by sending an SMS to it
        /// </summary>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestPhoneNumberSendSmsApiResponse"/>&gt;</returns>
        public async Task<ITestPhoneNumberSendSmsApiResponse> TestPhoneNumberSendSmsOrDefaultAsync(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, Option<string> xTestId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TestPhoneNumberSendSmsAsync(phoneNumberId, testPhoneNumberOptions, xTestId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Test sending an SMS to a number Test a phone number by sending an SMS to it
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="testPhoneNumberOptions"></param>
        /// <param name="xTestId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITestPhoneNumberSendSmsApiResponse"/>&gt;</returns>
        public async Task<ITestPhoneNumberSendSmsApiResponse> TestPhoneNumberSendSmsAsync(Guid phoneNumberId, TestPhoneNumberOptions testPhoneNumberOptions, Option<string> xTestId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTestPhoneNumberSendSms(testPhoneNumberOptions, xTestId);

                FormatTestPhoneNumberSendSms(ref phoneNumberId, testPhoneNumberOptions, ref xTestId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}/test"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}/test");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));

                    if (xTestId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("x-test-id", ClientUtils.ParameterToString(xTestId.Value));

                    httpRequestMessageLocalVar.Content = (testPhoneNumberOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(testPhoneNumberOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TestPhoneNumberSendSmsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TestPhoneNumberSendSmsApiResponse>();

                        TestPhoneNumberSendSmsApiResponse apiResponseLocalVar = new TestPhoneNumberSendSmsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}/test", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTestPhoneNumberSendSmsDefaultImplementation(apiResponseLocalVar, phoneNumberId, testPhoneNumberOptions, xTestId);

                        Events.ExecuteOnTestPhoneNumberSendSms(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTestPhoneNumberSendSmsDefaultImplementation(e, "/phone/numbers/{phoneNumberId}/test", uriBuilderLocalVar.Path, phoneNumberId, testPhoneNumberOptions, xTestId);
                Events.ExecuteOnErrorTestPhoneNumberSendSms(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TestPhoneNumberSendSmsApiResponse"/>
        /// </summary>
        public partial class TestPhoneNumberSendSmsApiResponse : mailslurp.Client.ApiResponse, ITestPhoneNumberSendSmsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TestPhoneNumberSendSmsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TestPhoneNumberSendSmsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TestPhoneNumberSendSmsApiResponse(ILogger<TestPhoneNumberSendSmsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdatePhoneNumber(ref Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <returns></returns>
        private void ValidateUpdatePhoneNumber(UpdatePhoneNumberOptions updatePhoneNumberOptions)
        {
            if (updatePhoneNumberOptions == null)
                throw new ArgumentNullException(nameof(updatePhoneNumberOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="updatePhoneNumberOptions"></param>
        private void AfterUpdatePhoneNumberDefaultImplementation(IUpdatePhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions)
        {
            bool suppressDefaultLog = false;
            AfterUpdatePhoneNumber(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId, updatePhoneNumberOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="updatePhoneNumberOptions"></param>
        partial void AfterUpdatePhoneNumber(ref bool suppressDefaultLog, IUpdatePhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="updatePhoneNumberOptions"></param>
        private void OnErrorUpdatePhoneNumberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdatePhoneNumber(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId, updatePhoneNumberOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="updatePhoneNumberOptions"></param>
        partial void OnErrorUpdatePhoneNumber(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions);

        /// <summary>
        /// Update a phone number Set field for phone number
        /// </summary>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IUpdatePhoneNumberApiResponse> UpdatePhoneNumberOrDefaultAsync(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdatePhoneNumberAsync(phoneNumberId, updatePhoneNumberOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a phone number Set field for phone number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">ID of phone to set favourite state</param>
        /// <param name="updatePhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IUpdatePhoneNumberApiResponse> UpdatePhoneNumberAsync(Guid phoneNumberId, UpdatePhoneNumberOptions updatePhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdatePhoneNumber(updatePhoneNumberOptions);

                FormatUpdatePhoneNumber(ref phoneNumberId, updatePhoneNumberOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));

                    httpRequestMessageLocalVar.Content = (updatePhoneNumberOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updatePhoneNumberOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdatePhoneNumberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdatePhoneNumberApiResponse>();

                        UpdatePhoneNumberApiResponse apiResponseLocalVar = new UpdatePhoneNumberApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdatePhoneNumberDefaultImplementation(apiResponseLocalVar, phoneNumberId, updatePhoneNumberOptions);

                        Events.ExecuteOnUpdatePhoneNumber(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdatePhoneNumberDefaultImplementation(e, "/phone/numbers/{phoneNumberId}", uriBuilderLocalVar.Path, phoneNumberId, updatePhoneNumberOptions);
                Events.ExecuteOnErrorUpdatePhoneNumber(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdatePhoneNumberApiResponse"/>
        /// </summary>
        public partial class UpdatePhoneNumberApiResponse : mailslurp.Client.ApiResponse, IUpdatePhoneNumberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdatePhoneNumberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdatePhoneNumberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdatePhoneNumberApiResponse(ILogger<UpdatePhoneNumberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PhoneNumberDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PhoneNumberDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PhoneNumberDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatValidatePhoneNumber(ValidatePhoneNumberOptions validatePhoneNumberOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <returns></returns>
        private void ValidateValidatePhoneNumber(ValidatePhoneNumberOptions validatePhoneNumberOptions)
        {
            if (validatePhoneNumberOptions == null)
                throw new ArgumentNullException(nameof(validatePhoneNumberOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="validatePhoneNumberOptions"></param>
        private void AfterValidatePhoneNumberDefaultImplementation(IValidatePhoneNumberApiResponse apiResponseLocalVar, ValidatePhoneNumberOptions validatePhoneNumberOptions)
        {
            bool suppressDefaultLog = false;
            AfterValidatePhoneNumber(ref suppressDefaultLog, apiResponseLocalVar, validatePhoneNumberOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="validatePhoneNumberOptions"></param>
        partial void AfterValidatePhoneNumber(ref bool suppressDefaultLog, IValidatePhoneNumberApiResponse apiResponseLocalVar, ValidatePhoneNumberOptions validatePhoneNumberOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="validatePhoneNumberOptions"></param>
        private void OnErrorValidatePhoneNumberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ValidatePhoneNumberOptions validatePhoneNumberOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorValidatePhoneNumber(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, validatePhoneNumberOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="validatePhoneNumberOptions"></param>
        partial void OnErrorValidatePhoneNumber(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ValidatePhoneNumberOptions validatePhoneNumberOptions);

        /// <summary>
        /// Verify validity of a phone number Validate a phone number
        /// </summary>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IValidatePhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IValidatePhoneNumberApiResponse> ValidatePhoneNumberOrDefaultAsync(ValidatePhoneNumberOptions validatePhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ValidatePhoneNumberAsync(validatePhoneNumberOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Verify validity of a phone number Validate a phone number
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="validatePhoneNumberOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IValidatePhoneNumberApiResponse"/>&gt;</returns>
        public async Task<IValidatePhoneNumberApiResponse> ValidatePhoneNumberAsync(ValidatePhoneNumberOptions validatePhoneNumberOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateValidatePhoneNumber(validatePhoneNumberOptions);

                FormatValidatePhoneNumber(validatePhoneNumberOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/validate"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/validate");

                    httpRequestMessageLocalVar.Content = (validatePhoneNumberOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(validatePhoneNumberOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ValidatePhoneNumberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ValidatePhoneNumberApiResponse>();

                        ValidatePhoneNumberApiResponse apiResponseLocalVar = new ValidatePhoneNumberApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/validate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterValidatePhoneNumberDefaultImplementation(apiResponseLocalVar, validatePhoneNumberOptions);

                        Events.ExecuteOnValidatePhoneNumber(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorValidatePhoneNumberDefaultImplementation(e, "/phone/validate", uriBuilderLocalVar.Path, validatePhoneNumberOptions);
                Events.ExecuteOnErrorValidatePhoneNumber(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ValidatePhoneNumberApiResponse"/>
        /// </summary>
        public partial class ValidatePhoneNumberApiResponse : mailslurp.Client.ApiResponse, IValidatePhoneNumberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ValidatePhoneNumberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ValidatePhoneNumberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ValidatePhoneNumberApiResponse(ILogger<ValidatePhoneNumberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PhoneNumberValidationDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PhoneNumberValidationDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PhoneNumberValidationDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
