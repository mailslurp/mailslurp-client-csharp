/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonActionsControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxDto</returns>
        InboxDto CreateNewEmailAddress(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0);

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxDto</returns>
        ApiResponse<InboxDto> CreateNewEmailAddressWithHttpInfo(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0);
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxDto</returns>
        InboxDto CreateRandomInbox(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0);

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxDto</returns>
        ApiResponse<InboxDto> CreateRandomInboxWithHttpInfo(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete inbox email address by inbox id
        /// </summary>
        /// <remarks>
        /// Deletes inbox email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteEmailAddress(Guid inboxId, int operationIndex = 0);

        /// <summary>
        /// Delete inbox email address by inbox id
        /// </summary>
        /// <remarks>
        /// Deletes inbox email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailAddressWithHttpInfo(Guid inboxId, int operationIndex = 0);
        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void EmptyInbox(Guid inboxId, int operationIndex = 0);

        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EmptyInboxWithHttpInfo(Guid inboxId, int operationIndex = 0);
        /// <summary>
        /// Send an email using query parameters
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Email address to send to</param>
        /// <param name="senderId">ID of inbox to send from. If null an inbox will be created for sending (optional)</param>
        /// <param name="body">Body of the email message. Supports HTML (optional)</param>
        /// <param name="subject">Subject line of the email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SendEmailQuery(string to, Guid? senderId = default(Guid?), string body = default(string), string subject = default(string), int operationIndex = 0);

        /// <summary>
        /// Send an email using query parameters
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Email address to send to</param>
        /// <param name="senderId">ID of inbox to send from. If null an inbox will be created for sending (optional)</param>
        /// <param name="body">Body of the email message. Supports HTML (optional)</param>
        /// <param name="subject">Subject line of the email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailQueryWithHttpInfo(string to, Guid? senderId = default(Guid?), string body = default(string), string subject = default(string), int operationIndex = 0);
        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleSendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SendEmailSimple(SimpleSendEmailOptions simpleSendEmailOptions, int operationIndex = 0);

        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleSendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailSimpleWithHttpInfo(SimpleSendEmailOptions simpleSendEmailOptions, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonActionsControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxDto</returns>
        System.Threading.Tasks.Task<InboxDto> CreateNewEmailAddressAsync(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxDto>> CreateNewEmailAddressWithHttpInfoAsync(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxDto</returns>
        System.Threading.Tasks.Task<InboxDto> CreateRandomInboxAsync(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<InboxDto>> CreateRandomInboxWithHttpInfoAsync(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete inbox email address by inbox id
        /// </summary>
        /// <remarks>
        /// Deletes inbox email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailAddressAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete inbox email address by inbox id
        /// </summary>
        /// <remarks>
        /// Deletes inbox email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailAddressWithHttpInfoAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EmptyInboxAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EmptyInboxWithHttpInfoAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send an email using query parameters
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Email address to send to</param>
        /// <param name="senderId">ID of inbox to send from. If null an inbox will be created for sending (optional)</param>
        /// <param name="body">Body of the email message. Supports HTML (optional)</param>
        /// <param name="subject">Subject line of the email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailQueryAsync(string to, Guid? senderId = default(Guid?), string body = default(string), string subject = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send an email using query parameters
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Email address to send to</param>
        /// <param name="senderId">ID of inbox to send from. If null an inbox will be created for sending (optional)</param>
        /// <param name="body">Body of the email message. Supports HTML (optional)</param>
        /// <param name="subject">Subject line of the email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailQueryWithHttpInfoAsync(string to, Guid? senderId = default(Guid?), string body = default(string), string subject = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleSendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailSimpleAsync(SimpleSendEmailOptions simpleSendEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleSendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailSimpleWithHttpInfoAsync(SimpleSendEmailOptions simpleSendEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonActionsControllerApi : ICommonActionsControllerApiSync, ICommonActionsControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommonActionsControllerApi : ICommonActionsControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommonActionsControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommonActionsControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommonActionsControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CommonActionsControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxDto</returns>
        public InboxDto CreateNewEmailAddress(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<InboxDto> localVarResponse = CreateNewEmailAddressWithHttpInfo(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxDto</returns>
        public mailslurp.Client.ApiResponse<InboxDto> CreateNewEmailAddressWithHttpInfo(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (allowTeamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "allowTeamAccess", allowTeamAccess));
            }
            if (useDomainPool != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useDomainPool", useDomainPool));
            }
            if (expiresAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresAt", expiresAt));
            }
            if (expiresIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresIn", expiresIn));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (inboxType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxType", inboxType));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (virtualInbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "virtualInbox", virtualInbox));
            }
            if (useShortAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useShortAddress", useShortAddress));
            }
            if (domainName != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "domainName", domainName));
            }
            if (domainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "domainId", domainId));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }

            localVarRequestOptions.Operation = "CommonActionsControllerApi.CreateNewEmailAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InboxDto>("/newEmailAddress", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewEmailAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxDto</returns>
        public async System.Threading.Tasks.Task<InboxDto> CreateNewEmailAddressAsync(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<InboxDto> localVarResponse = await CreateNewEmailAddressWithHttpInfoAsync(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxDto>> CreateNewEmailAddressWithHttpInfoAsync(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (allowTeamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "allowTeamAccess", allowTeamAccess));
            }
            if (useDomainPool != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useDomainPool", useDomainPool));
            }
            if (expiresAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresAt", expiresAt));
            }
            if (expiresIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresIn", expiresIn));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (inboxType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxType", inboxType));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (virtualInbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "virtualInbox", virtualInbox));
            }
            if (useShortAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useShortAddress", useShortAddress));
            }
            if (domainName != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "domainName", domainName));
            }
            if (domainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "domainId", domainId));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }

            localVarRequestOptions.Operation = "CommonActionsControllerApi.CreateNewEmailAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InboxDto>("/newEmailAddress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewEmailAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InboxDto</returns>
        public InboxDto CreateRandomInbox(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<InboxDto> localVarResponse = CreateRandomInboxWithHttpInfo(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InboxDto</returns>
        public mailslurp.Client.ApiResponse<InboxDto> CreateRandomInboxWithHttpInfo(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (allowTeamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "allowTeamAccess", allowTeamAccess));
            }
            if (useDomainPool != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useDomainPool", useDomainPool));
            }
            if (expiresAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresAt", expiresAt));
            }
            if (expiresIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresIn", expiresIn));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (inboxType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxType", inboxType));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (virtualInbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "virtualInbox", virtualInbox));
            }
            if (useShortAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useShortAddress", useShortAddress));
            }
            if (domainName != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "domainName", domainName));
            }
            if (domainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "domainId", domainId));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }

            localVarRequestOptions.Operation = "CommonActionsControllerApi.CreateRandomInbox";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InboxDto>("/createInbox", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRandomInbox", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InboxDto</returns>
        public async System.Threading.Tasks.Task<InboxDto> CreateRandomInboxAsync(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            mailslurp.Client.ApiResponse<InboxDto> localVarResponse = await CreateRandomInboxWithHttpInfoAsync(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allowTeamAccess"> (optional)</param>
        /// <param name="useDomainPool"> (optional)</param>
        /// <param name="expiresAt"> (optional)</param>
        /// <param name="expiresIn"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="inboxType"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="favourite"> (optional)</param>
        /// <param name="virtualInbox"> (optional)</param>
        /// <param name="useShortAddress"> (optional)</param>
        /// <param name="domainName"> (optional)</param>
        /// <param name="domainId"> (optional)</param>
        /// <param name="prefix"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InboxDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<InboxDto>> CreateRandomInboxWithHttpInfoAsync(bool? allowTeamAccess = default(bool?), bool? useDomainPool = default(bool?), DateTime? expiresAt = default(DateTime?), long? expiresIn = default(long?), string emailAddress = default(string), string inboxType = default(string), string description = default(string), string name = default(string), List<string> tags = default(List<string>), bool? favourite = default(bool?), bool? virtualInbox = default(bool?), bool? useShortAddress = default(bool?), string domainName = default(string), Guid? domainId = default(Guid?), string prefix = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (allowTeamAccess != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "allowTeamAccess", allowTeamAccess));
            }
            if (useDomainPool != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useDomainPool", useDomainPool));
            }
            if (expiresAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresAt", expiresAt));
            }
            if (expiresIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "expiresIn", expiresIn));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress));
            }
            if (inboxType != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxType", inboxType));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("multi", "tags", tags));
            }
            if (favourite != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "favourite", favourite));
            }
            if (virtualInbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "virtualInbox", virtualInbox));
            }
            if (useShortAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "useShortAddress", useShortAddress));
            }
            if (domainName != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "domainName", domainName));
            }
            if (domainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "domainId", domainId));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }

            localVarRequestOptions.Operation = "CommonActionsControllerApi.CreateRandomInbox";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InboxDto>("/createInbox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRandomInbox", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete inbox email address by inbox id Deletes inbox email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteEmailAddress(Guid inboxId, int operationIndex = 0)
        {
            DeleteEmailAddressWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete inbox email address by inbox id Deletes inbox email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteEmailAddressWithHttpInfo(Guid inboxId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));

            localVarRequestOptions.Operation = "CommonActionsControllerApi.DeleteEmailAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/deleteEmailAddress", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmailAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete inbox email address by inbox id Deletes inbox email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailAddressAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteEmailAddressWithHttpInfoAsync(inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete inbox email address by inbox id Deletes inbox email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteEmailAddressWithHttpInfoAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));

            localVarRequestOptions.Operation = "CommonActionsControllerApi.DeleteEmailAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/deleteEmailAddress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmailAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void EmptyInbox(Guid inboxId, int operationIndex = 0)
        {
            EmptyInboxWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> EmptyInboxWithHttpInfo(Guid inboxId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));

            localVarRequestOptions.Operation = "CommonActionsControllerApi.EmptyInbox";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/emptyInbox", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmptyInbox", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EmptyInboxAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EmptyInboxWithHttpInfoAsync(inboxId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> EmptyInboxWithHttpInfoAsync(Guid inboxId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId));

            localVarRequestOptions.Operation = "CommonActionsControllerApi.EmptyInbox";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/emptyInbox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmptyInbox", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email using query parameters If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Email address to send to</param>
        /// <param name="senderId">ID of inbox to send from. If null an inbox will be created for sending (optional)</param>
        /// <param name="body">Body of the email message. Supports HTML (optional)</param>
        /// <param name="subject">Subject line of the email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SendEmailQuery(string to, Guid? senderId = default(Guid?), string body = default(string), string subject = default(string), int operationIndex = 0)
        {
            SendEmailQueryWithHttpInfo(to, senderId, body, subject);
        }

        /// <summary>
        /// Send an email using query parameters If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Email address to send to</param>
        /// <param name="senderId">ID of inbox to send from. If null an inbox will be created for sending (optional)</param>
        /// <param name="body">Body of the email message. Supports HTML (optional)</param>
        /// <param name="subject">Subject line of the email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> SendEmailQueryWithHttpInfo(string to, Guid? senderId = default(Guid?), string body = default(string), string subject = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'to' is set
            if (to == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'to' when calling CommonActionsControllerApi->SendEmailQuery");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (senderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "senderId", senderId));
            }
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (body != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "body", body));
            }
            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }

            localVarRequestOptions.Operation = "CommonActionsControllerApi.SendEmailQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sendEmailQuery", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email using query parameters If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Email address to send to</param>
        /// <param name="senderId">ID of inbox to send from. If null an inbox will be created for sending (optional)</param>
        /// <param name="body">Body of the email message. Supports HTML (optional)</param>
        /// <param name="subject">Subject line of the email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailQueryAsync(string to, Guid? senderId = default(Guid?), string body = default(string), string subject = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SendEmailQueryWithHttpInfoAsync(to, senderId, body, subject, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send an email using query parameters If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Email address to send to</param>
        /// <param name="senderId">ID of inbox to send from. If null an inbox will be created for sending (optional)</param>
        /// <param name="body">Body of the email message. Supports HTML (optional)</param>
        /// <param name="subject">Subject line of the email (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> SendEmailQueryWithHttpInfoAsync(string to, Guid? senderId = default(Guid?), string body = default(string), string subject = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'to' is set
            if (to == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'to' when calling CommonActionsControllerApi->SendEmailQuery");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (senderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "senderId", senderId));
            }
            localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (body != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "body", body));
            }
            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }

            localVarRequestOptions.Operation = "CommonActionsControllerApi.SendEmailQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sendEmailQuery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleSendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SendEmailSimple(SimpleSendEmailOptions simpleSendEmailOptions, int operationIndex = 0)
        {
            SendEmailSimpleWithHttpInfo(simpleSendEmailOptions);
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleSendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> SendEmailSimpleWithHttpInfo(SimpleSendEmailOptions simpleSendEmailOptions, int operationIndex = 0)
        {
            // verify the required parameter 'simpleSendEmailOptions' is set
            if (simpleSendEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'simpleSendEmailOptions' when calling CommonActionsControllerApi->SendEmailSimple");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = simpleSendEmailOptions;

            localVarRequestOptions.Operation = "CommonActionsControllerApi.SendEmailSimple";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sendEmail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailSimple", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleSendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailSimpleAsync(SimpleSendEmailOptions simpleSendEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SendEmailSimpleWithHttpInfoAsync(simpleSendEmailOptions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleSendEmailOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> SendEmailSimpleWithHttpInfoAsync(SimpleSendEmailOptions simpleSendEmailOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'simpleSendEmailOptions' is set
            if (simpleSendEmailOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'simpleSendEmailOptions' when calling CommonActionsControllerApi->SendEmailSimple");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = simpleSendEmailOptions;

            localVarRequestOptions.Operation = "CommonActionsControllerApi.SendEmailSimple";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sendEmail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailSimple", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
