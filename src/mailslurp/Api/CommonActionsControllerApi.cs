/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 334ac21dc2320d9d7146003fe93651c8ab30850d
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonActionsControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Inbox</returns>
        Inbox CreateNewEmailAddress ();

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> CreateNewEmailAddressWithHttpInfo ();
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Inbox</returns>
        Inbox CreateNewEmailAddress1 ();

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> CreateNewEmailAddress1WithHttpInfo ();
        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        void EmptyInbox (Guid inboxId);

        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EmptyInboxWithHttpInfo (Guid inboxId);
        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns></returns>
        void SendEmailSimple (SimpleSendEmailOptions emailOptions);

        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailSimpleWithHttpInfo (SimpleSendEmailOptions emailOptions);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonActionsControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> CreateNewEmailAddressAsync ();

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateNewEmailAddressAsyncWithHttpInfo ();
        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> CreateNewEmailAddress1Async ();

        /// <summary>
        /// Create new random inbox
        /// </summary>
        /// <remarks>
        /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateNewEmailAddress1AsyncWithHttpInfo ();
        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EmptyInboxAsync (Guid inboxId);

        /// <summary>
        /// Delete all emails in an inbox
        /// </summary>
        /// <remarks>
        /// Deletes all emails
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EmptyInboxAsyncWithHttpInfo (Guid inboxId);
        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailSimpleAsync (SimpleSendEmailOptions emailOptions);

        /// <summary>
        /// Send an email
        /// </summary>
        /// <remarks>
        /// If no senderId or inboxId provided a random email address will be used to send from.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailSimpleAsyncWithHttpInfo (SimpleSendEmailOptions emailOptions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonActionsControllerApi : ICommonActionsControllerApiSync, ICommonActionsControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommonActionsControllerApi : ICommonActionsControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommonActionsControllerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommonActionsControllerApi(String basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommonActionsControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonActionsControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CommonActionsControllerApi(mailslurp.Client.ISynchronousClient client,mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Inbox</returns>
        public Inbox CreateNewEmailAddress ()
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = CreateNewEmailAddressWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > CreateNewEmailAddressWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Inbox >("/createInbox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewEmailAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> CreateNewEmailAddressAsync ()
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await CreateNewEmailAddressAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> CreateNewEmailAddressAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Inbox>("/createInbox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewEmailAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Inbox</returns>
        public Inbox CreateNewEmailAddress1 ()
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = CreateNewEmailAddress1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > CreateNewEmailAddress1WithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Inbox >("/newEmailAddress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewEmailAddress1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> CreateNewEmailAddress1Async ()
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await CreateNewEmailAddress1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new random inbox Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> CreateNewEmailAddress1AsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Inbox>("/newEmailAddress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewEmailAddress1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        public void EmptyInbox (Guid inboxId)
        {
             EmptyInboxWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> EmptyInboxWithHttpInfo (Guid inboxId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            foreach (var _kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
            {
                foreach (var _kvpValue in _kvp.Value)
                {
                    localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/emptyInbox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmptyInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EmptyInboxAsync (Guid inboxId)
        {
             await EmptyInboxAsyncWithHttpInfo(inboxId);

        }

        /// <summary>
        /// Delete all emails in an inbox Deletes all emails
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> EmptyInboxAsyncWithHttpInfo (Guid inboxId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            foreach (var _kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "inboxId", inboxId))
            {
                foreach (var _kvpValue in _kvp.Value)
                {
                    localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/emptyInbox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmptyInbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns></returns>
        public void SendEmailSimple (SimpleSendEmailOptions emailOptions)
        {
             SendEmailSimpleWithHttpInfo(emailOptions);
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> SendEmailSimpleWithHttpInfo (SimpleSendEmailOptions emailOptions)
        {
            // verify the required parameter 'emailOptions' is set
            if (emailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailOptions' when calling CommonActionsControllerApi->SendEmailSimple");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = emailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sendEmail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailSimpleAsync (SimpleSendEmailOptions emailOptions)
        {
             await SendEmailSimpleAsyncWithHttpInfo(emailOptions);

        }

        /// <summary>
        /// Send an email If no senderId or inboxId provided a random email address will be used to send from.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailOptions">emailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> SendEmailSimpleAsyncWithHttpInfo (SimpleSendEmailOptions emailOptions)
        {
            // verify the required parameter 'emailOptions' is set
            if (emailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailOptions' when calling CommonActionsControllerApi->SendEmailSimple");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = emailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sendEmail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendEmailSimple", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
