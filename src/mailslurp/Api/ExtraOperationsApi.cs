/* 
 * MailSlurp API
 *
 * For full documentation and a list of available SDK clients please see the [developer guide](https://www.mailslurp.com/developers). [Create an account](https://app.mailslurp.com) in the MailSlurp Dashboard to [view your API Key](https://app.mailslurp.com). For all bugs, feature requests, or help please [see support](https://www.mailslurp.com/support/). 
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExtraOperationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk create Inboxes (email addresses)
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <returns>List&lt;Inbox&gt;</returns>
        List<Inbox> BulkCreateInboxes (int? count);

        /// <summary>
        /// Bulk create Inboxes (email addresses)
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <returns>ApiResponse of List&lt;Inbox&gt;</returns>
        ApiResponse<List<Inbox>> BulkCreateInboxesWithHttpInfo (int? count);
        /// <summary>
        /// Bulk Delete Inboxes
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">ids</param>
        /// <returns></returns>
        void BulkDeleteInboxes (List<Guid?> requestBody);

        /// <summary>
        /// Bulk Delete Inboxes
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BulkDeleteInboxesWithHttpInfo (List<Guid?> requestBody);
        /// <summary>
        /// Bulk Send Emails
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkSendEmailOptions">bulkSendEmailOptions</param>
        /// <returns></returns>
        void BulkSendEmails (BulkSendEmailOptions bulkSendEmailOptions);

        /// <summary>
        /// Bulk Send Emails
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkSendEmailOptions">bulkSendEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BulkSendEmailsWithHttpInfo (BulkSendEmailOptions bulkSendEmailOptions);
        /// <summary>
        /// Create Domain
        /// </summary>
        /// <remarks>
        /// Link a domain that you own with MailSlurp so you can create inboxes with it. Returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDomainOptions">domainOptions</param>
        /// <returns>DomainPlusVerificationRecordsAndStatus</returns>
        DomainPlusVerificationRecordsAndStatus CreateDomain (CreateDomainOptions createDomainOptions);

        /// <summary>
        /// Create Domain
        /// </summary>
        /// <remarks>
        /// Link a domain that you own with MailSlurp so you can create inboxes with it. Returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDomainOptions">domainOptions</param>
        /// <returns>ApiResponse of DomainPlusVerificationRecordsAndStatus</returns>
        ApiResponse<DomainPlusVerificationRecordsAndStatus> CreateDomainWithHttpInfo (CreateDomainOptions createDomainOptions);
        /// <summary>
        /// Create an Inbox (email address)
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <returns>Inbox</returns>
        Inbox CreateInbox (string emailAddress = null);

        /// <summary>
        /// Create an Inbox (email address)
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> CreateInboxWithHttpInfo (string emailAddress = null);
        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createWebhookOptions">webhookOptions</param>
        /// <returns>Webhook</returns>
        Webhook CreateWebhook (Guid? inboxId, CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createWebhookOptions">webhookOptions</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> CreateWebhookWithHttpInfo (Guid? inboxId, CreateWebhookOptions createWebhookOptions);
        /// <summary>
        /// Delete a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteDomain (Guid? id);

        /// <summary>
        /// Delete a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDomainWithHttpInfo (Guid? id);
        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns></returns>
        void DeleteEmail1 (Guid? emailId);

        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmail1WithHttpInfo (Guid? emailId);
        /// <summary>
        /// Delete Inbox / Email Address
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        void DeleteInbox (Guid? inboxId);

        /// <summary>
        /// Delete Inbox / Email Address
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboxWithHttpInfo (Guid? inboxId);
        /// <summary>
        /// Delete and disable a WebHook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns></returns>
        void DeleteWebhook (Guid? inboxId, Guid? webhookId);

        /// <summary>
        /// Delete and disable a WebHook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookWithHttpInfo (Guid? inboxId, Guid? webhookId);
        /// <summary>
        /// Get email attachment
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response. Requires enterprise account.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns></returns>
        void DownloadAttachment (string attachmentId, Guid? emailId, string apiKey = null);

        /// <summary>
        /// Get email attachment
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response. Requires enterprise account.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadAttachmentWithHttpInfo (string attachmentId, Guid? emailId, string apiKey = null);
        /// <summary>
        /// Forward Email
        /// </summary>
        /// <remarks>
        /// Forward email content to given recipients
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns></returns>
        void ForwardEmail (Guid? emailId, ForwardEmailOptions forwardEmailOptions);

        /// <summary>
        /// Forward Email
        /// </summary>
        /// <remarks>
        /// Forward email content to given recipients
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ForwardEmailWithHttpInfo (Guid? emailId, ForwardEmailOptions forwardEmailOptions);
        /// <summary>
        /// Get a domain
        /// </summary>
        /// <remarks>
        /// Returns domain verification status and tokens
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>DomainPlusVerificationRecordsAndStatus</returns>
        DomainPlusVerificationRecordsAndStatus GetDomain (Guid? id);

        /// <summary>
        /// Get a domain
        /// </summary>
        /// <remarks>
        /// Returns domain verification status and tokens
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of DomainPlusVerificationRecordsAndStatus</returns>
        ApiResponse<DomainPlusVerificationRecordsAndStatus> GetDomainWithHttpInfo (Guid? id);
        /// <summary>
        /// Get domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DomainPreview&gt;</returns>
        List<DomainPreview> GetDomains ();

        /// <summary>
        /// Get domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DomainPreview&gt;</returns>
        ApiResponse<List<DomainPreview>> GetDomainsWithHttpInfo ();
        /// <summary>
        /// Get Email Content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Email</returns>
        Email GetEmail (Guid? emailId);

        /// <summary>
        /// Get Email Content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of Email</returns>
        ApiResponse<Email> GetEmailWithHttpInfo (Guid? emailId);
        /// <summary>
        /// List Emails in an Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by descending received date time (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <returns>List&lt;EmailPreview&gt;</returns>
        List<EmailPreview> GetEmails (Guid? inboxId, int? limit = null, long? minCount = null, long? retryTimeout = null, DateTime? since = null);

        /// <summary>
        /// List Emails in an Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by descending received date time (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailPreview&gt;</returns>
        ApiResponse<List<EmailPreview>> GetEmailsWithHttpInfo (Guid? inboxId, int? limit = null, long? minCount = null, long? retryTimeout = null, DateTime? since = null);
        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// Responses are paginated
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <returns>PageEmailProjection</returns>
        PageEmailProjection GetEmailsPaginated (int? page = null, int? size = null);

        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// Responses are paginated
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <returns>ApiResponse of PageEmailProjection</returns>
        ApiResponse<PageEmailProjection> GetEmailsPaginatedWithHttpInfo (int? page = null, int? size = null);
        /// <summary>
        /// Get Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Inbox</returns>
        Inbox GetInbox (Guid? inboxId);

        /// <summary>
        /// Get Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Inbox</returns>
        ApiResponse<Inbox> GetInboxWithHttpInfo (Guid? inboxId);
        /// <summary>
        /// List Inboxes / Email Addresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Inbox&gt;</returns>
        List<Inbox> GetInboxes ();

        /// <summary>
        /// List Inboxes / Email Addresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Inbox&gt;</returns>
        ApiResponse<List<Inbox>> GetInboxesWithHttpInfo ();
        /// <summary>
        /// Get Raw Email Content
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed and unprocessed email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>string</returns>
        string GetRawEmailContents (Guid? emailId);

        /// <summary>
        /// Get Raw Email Content
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed and unprocessed email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetRawEmailContentsWithHttpInfo (Guid? emailId);
        /// <summary>
        /// Get all WebHooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>List&lt;Webhook&gt;</returns>
        List<Webhook> GetWebhooks (Guid? inboxId);

        /// <summary>
        /// Get all WebHooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
        ApiResponse<List<Webhook>> GetWebhooksWithHttpInfo (Guid? inboxId);
        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns></returns>
        void SendEmail (Guid? inboxId, SendEmailOptions sendEmailOptions);

        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailWithHttpInfo (Guid? inboxId, SendEmailOptions sendEmailOptions);
        /// <summary>
        /// Upload an attachment for sending
        /// </summary>
        /// <remarks>
        /// When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadAttachmentOptions">uploadOptions</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> UploadAttachment (UploadAttachmentOptions uploadAttachmentOptions);

        /// <summary>
        /// Upload an attachment for sending
        /// </summary>
        /// <remarks>
        /// When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadAttachmentOptions">uploadOptions</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> UploadAttachmentWithHttpInfo (UploadAttachmentOptions uploadAttachmentOptions);
        /// <summary>
        /// Upload an attachment for sending using Multipart Form
        /// </summary>
        /// <remarks>
        /// When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file</param>
        /// <param name="contentType">contentType (optional)</param>
        /// <param name="filename">filename (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> UploadMultipartForm (System.IO.Stream file, string contentType = null, string filename = null);

        /// <summary>
        /// Upload an attachment for sending using Multipart Form
        /// </summary>
        /// <remarks>
        /// When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file</param>
        /// <param name="contentType">contentType (optional)</param>
        /// <param name="filename">filename (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> UploadMultipartFormWithHttpInfo (System.IO.Stream file, string contentType = null, string filename = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExtraOperationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Bulk create Inboxes (email addresses)
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <returns>Task of List&lt;Inbox&gt;</returns>
        System.Threading.Tasks.Task<List<Inbox>> BulkCreateInboxesAsync (int? count);

        /// <summary>
        /// Bulk create Inboxes (email addresses)
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <returns>Task of ApiResponse (List&lt;Inbox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Inbox>>> BulkCreateInboxesAsyncWithHttpInfo (int? count);
        /// <summary>
        /// Bulk Delete Inboxes
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">ids</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BulkDeleteInboxesAsync (List<Guid?> requestBody);

        /// <summary>
        /// Bulk Delete Inboxes
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">ids</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BulkDeleteInboxesAsyncWithHttpInfo (List<Guid?> requestBody);
        /// <summary>
        /// Bulk Send Emails
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkSendEmailOptions">bulkSendEmailOptions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BulkSendEmailsAsync (BulkSendEmailOptions bulkSendEmailOptions);

        /// <summary>
        /// Bulk Send Emails
        /// </summary>
        /// <remarks>
        /// Enterprise Plan Required
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkSendEmailOptions">bulkSendEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BulkSendEmailsAsyncWithHttpInfo (BulkSendEmailOptions bulkSendEmailOptions);
        /// <summary>
        /// Create Domain
        /// </summary>
        /// <remarks>
        /// Link a domain that you own with MailSlurp so you can create inboxes with it. Returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDomainOptions">domainOptions</param>
        /// <returns>Task of DomainPlusVerificationRecordsAndStatus</returns>
        System.Threading.Tasks.Task<DomainPlusVerificationRecordsAndStatus> CreateDomainAsync (CreateDomainOptions createDomainOptions);

        /// <summary>
        /// Create Domain
        /// </summary>
        /// <remarks>
        /// Link a domain that you own with MailSlurp so you can create inboxes with it. Returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDomainOptions">domainOptions</param>
        /// <returns>Task of ApiResponse (DomainPlusVerificationRecordsAndStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainPlusVerificationRecordsAndStatus>> CreateDomainAsyncWithHttpInfo (CreateDomainOptions createDomainOptions);
        /// <summary>
        /// Create an Inbox (email address)
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> CreateInboxAsync (string emailAddress = null);

        /// <summary>
        /// Create an Inbox (email address)
        /// </summary>
        /// <remarks>
        /// Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> CreateInboxAsyncWithHttpInfo (string emailAddress = null);
        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createWebhookOptions">webhookOptions</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> CreateWebhookAsync (Guid? inboxId, CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createWebhookOptions">webhookOptions</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> CreateWebhookAsyncWithHttpInfo (Guid? inboxId, CreateWebhookOptions createWebhookOptions);
        /// <summary>
        /// Delete a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDomainAsync (Guid? id);

        /// <summary>
        /// Delete a domain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDomainAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmail1Async (Guid? emailId);

        /// <summary>
        /// Delete Email
        /// </summary>
        /// <remarks>
        /// Deletes an email and removes it from the inbox
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmail1AsyncWithHttpInfo (Guid? emailId);
        /// <summary>
        /// Delete Inbox / Email Address
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboxAsync (Guid? inboxId);

        /// <summary>
        /// Delete Inbox / Email Address
        /// </summary>
        /// <remarks>
        /// Permanently delete an inbox and associated email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboxAsyncWithHttpInfo (Guid? inboxId);
        /// <summary>
        /// Delete and disable a WebHook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookAsync (Guid? inboxId, Guid? webhookId);

        /// <summary>
        /// Delete and disable a WebHook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookAsyncWithHttpInfo (Guid? inboxId, Guid? webhookId);
        /// <summary>
        /// Get email attachment
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response. Requires enterprise account.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadAttachmentAsync (string attachmentId, Guid? emailId, string apiKey = null);

        /// <summary>
        /// Get email attachment
        /// </summary>
        /// <remarks>
        /// Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response. Requires enterprise account.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadAttachmentAsyncWithHttpInfo (string attachmentId, Guid? emailId, string apiKey = null);
        /// <summary>
        /// Forward Email
        /// </summary>
        /// <remarks>
        /// Forward email content to given recipients
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ForwardEmailAsync (Guid? emailId, ForwardEmailOptions forwardEmailOptions);

        /// <summary>
        /// Forward Email
        /// </summary>
        /// <remarks>
        /// Forward email content to given recipients
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ForwardEmailAsyncWithHttpInfo (Guid? emailId, ForwardEmailOptions forwardEmailOptions);
        /// <summary>
        /// Get a domain
        /// </summary>
        /// <remarks>
        /// Returns domain verification status and tokens
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of DomainPlusVerificationRecordsAndStatus</returns>
        System.Threading.Tasks.Task<DomainPlusVerificationRecordsAndStatus> GetDomainAsync (Guid? id);

        /// <summary>
        /// Get a domain
        /// </summary>
        /// <remarks>
        /// Returns domain verification status and tokens
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (DomainPlusVerificationRecordsAndStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainPlusVerificationRecordsAndStatus>> GetDomainAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Get domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DomainPreview&gt;</returns>
        System.Threading.Tasks.Task<List<DomainPreview>> GetDomainsAsync ();

        /// <summary>
        /// Get domains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DomainPreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DomainPreview>>> GetDomainsAsyncWithHttpInfo ();
        /// <summary>
        /// Get Email Content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of Email</returns>
        System.Threading.Tasks.Task<Email> GetEmailAsync (Guid? emailId);

        /// <summary>
        /// Get Email Content
        /// </summary>
        /// <remarks>
        /// Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (Email)</returns>
        System.Threading.Tasks.Task<ApiResponse<Email>> GetEmailAsyncWithHttpInfo (Guid? emailId);
        /// <summary>
        /// List Emails in an Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by descending received date time (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <returns>Task of List&lt;EmailPreview&gt;</returns>
        System.Threading.Tasks.Task<List<EmailPreview>> GetEmailsAsync (Guid? inboxId, int? limit = null, long? minCount = null, long? retryTimeout = null, DateTime? since = null);

        /// <summary>
        /// List Emails in an Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by descending received date time (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailPreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailPreview>>> GetEmailsAsyncWithHttpInfo (Guid? inboxId, int? limit = null, long? minCount = null, long? retryTimeout = null, DateTime? since = null);
        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// Responses are paginated
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <returns>Task of PageEmailProjection</returns>
        System.Threading.Tasks.Task<PageEmailProjection> GetEmailsPaginatedAsync (int? page = null, int? size = null);

        /// <summary>
        /// Get all emails
        /// </summary>
        /// <remarks>
        /// Responses are paginated
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (PageEmailProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageEmailProjection>> GetEmailsPaginatedAsyncWithHttpInfo (int? page = null, int? size = null);
        /// <summary>
        /// Get Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of Inbox</returns>
        System.Threading.Tasks.Task<Inbox> GetInboxAsync (Guid? inboxId);

        /// <summary>
        /// Get Inbox / EmailAddress
        /// </summary>
        /// <remarks>
        /// Returns an inbox&#39;s properties, including its email address and ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inbox>> GetInboxAsyncWithHttpInfo (Guid? inboxId);
        /// <summary>
        /// List Inboxes / Email Addresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Inbox&gt;</returns>
        System.Threading.Tasks.Task<List<Inbox>> GetInboxesAsync ();

        /// <summary>
        /// List Inboxes / Email Addresses
        /// </summary>
        /// <remarks>
        /// List the inboxes you have created
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Inbox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Inbox>>> GetInboxesAsyncWithHttpInfo ();
        /// <summary>
        /// Get Raw Email Content
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed and unprocessed email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetRawEmailContentsAsync (Guid? emailId);

        /// <summary>
        /// Get Raw Email Content
        /// </summary>
        /// <remarks>
        /// Returns a raw, unparsed and unprocessed email
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetRawEmailContentsAsyncWithHttpInfo (Guid? emailId);
        /// <summary>
        /// Get all WebHooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of List&lt;Webhook&gt;</returns>
        System.Threading.Tasks.Task<List<Webhook>> GetWebhooksAsync (Guid? inboxId);

        /// <summary>
        /// Get all WebHooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse (List&lt;Webhook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Webhook>>> GetWebhooksAsyncWithHttpInfo (Guid? inboxId);
        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailAsync (Guid? inboxId, SendEmailOptions sendEmailOptions);

        /// <summary>
        /// Send Email
        /// </summary>
        /// <remarks>
        /// Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailAsyncWithHttpInfo (Guid? inboxId, SendEmailOptions sendEmailOptions);
        /// <summary>
        /// Upload an attachment for sending
        /// </summary>
        /// <remarks>
        /// When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadAttachmentOptions">uploadOptions</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> UploadAttachmentAsync (UploadAttachmentOptions uploadAttachmentOptions);

        /// <summary>
        /// Upload an attachment for sending
        /// </summary>
        /// <remarks>
        /// When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadAttachmentOptions">uploadOptions</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> UploadAttachmentAsyncWithHttpInfo (UploadAttachmentOptions uploadAttachmentOptions);
        /// <summary>
        /// Upload an attachment for sending using Multipart Form
        /// </summary>
        /// <remarks>
        /// When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file</param>
        /// <param name="contentType">contentType (optional)</param>
        /// <param name="filename">filename (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> UploadMultipartFormAsync (System.IO.Stream file, string contentType = null, string filename = null);

        /// <summary>
        /// Upload an attachment for sending using Multipart Form
        /// </summary>
        /// <remarks>
        /// When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file</param>
        /// <param name="contentType">contentType (optional)</param>
        /// <param name="filename">filename (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> UploadMultipartFormAsyncWithHttpInfo (System.IO.Stream file, string contentType = null, string filename = null);
        #endregion Asynchronous Operations
    }

    public interface IExtraOperationsApi : IExtraOperationsApiSync, IExtraOperationsApiAsync
    {
        
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExtraOperationsApi : IExtraOperationsApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtraOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExtraOperationsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtraOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExtraOperationsApi(String basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtraOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExtraOperationsApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExtraOperationsApi(mailslurp.Client.ISynchronousClient client,mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");
            
            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Bulk create Inboxes (email addresses) Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <returns>List&lt;Inbox&gt;</returns>
        public List<Inbox> BulkCreateInboxes (int? count)
        {
             mailslurp.Client.ApiResponse<List<Inbox>> localVarResponse = BulkCreateInboxesWithHttpInfo(count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk create Inboxes (email addresses) Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <returns>ApiResponse of List&lt;Inbox&gt;</returns>
        public mailslurp.Client.ApiResponse< List<Inbox> > BulkCreateInboxesWithHttpInfo (int? count)
        {
            // verify the required parameter 'count' is set
            if (count == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'count' when calling ExtraOperationsApi->BulkCreateInboxes");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (count != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "count", count))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post< List<Inbox> >("/bulk/inboxes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BulkCreateInboxes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Bulk create Inboxes (email addresses) Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <returns>Task of List&lt;Inbox&gt;</returns>
        public async System.Threading.Tasks.Task<List<Inbox>> BulkCreateInboxesAsync (int? count)
        {
             mailslurp.Client.ApiResponse<List<Inbox>> localVarResponse = await BulkCreateInboxesAsyncWithHttpInfo(count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk create Inboxes (email addresses) Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Number of inboxes to be created in bulk</param>
        /// <returns>Task of ApiResponse (List&lt;Inbox&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<Inbox>>> BulkCreateInboxesAsyncWithHttpInfo (int? count)
        {
            // verify the required parameter 'count' is set
            if (count == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'count' when calling ExtraOperationsApi->BulkCreateInboxes");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (count != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "count", count))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<Inbox>>("/bulk/inboxes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BulkCreateInboxes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Bulk Delete Inboxes Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">ids</param>
        /// <returns></returns>
        public void BulkDeleteInboxes (List<Guid?> requestBody)
        {
             BulkDeleteInboxesWithHttpInfo(requestBody);
        }

        /// <summary>
        /// Bulk Delete Inboxes Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> BulkDeleteInboxesWithHttpInfo (List<Guid?> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ExtraOperationsApi->BulkDeleteInboxes");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = requestBody;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/bulk/inboxes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BulkDeleteInboxes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Bulk Delete Inboxes Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">ids</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BulkDeleteInboxesAsync (List<Guid?> requestBody)
        {
             await BulkDeleteInboxesAsyncWithHttpInfo(requestBody);

        }

        /// <summary>
        /// Bulk Delete Inboxes Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody">ids</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> BulkDeleteInboxesAsyncWithHttpInfo (List<Guid?> requestBody)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ExtraOperationsApi->BulkDeleteInboxes");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = requestBody;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/bulk/inboxes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BulkDeleteInboxes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Bulk Send Emails Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkSendEmailOptions">bulkSendEmailOptions</param>
        /// <returns></returns>
        public void BulkSendEmails (BulkSendEmailOptions bulkSendEmailOptions)
        {
             BulkSendEmailsWithHttpInfo(bulkSendEmailOptions);
        }

        /// <summary>
        /// Bulk Send Emails Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkSendEmailOptions">bulkSendEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> BulkSendEmailsWithHttpInfo (BulkSendEmailOptions bulkSendEmailOptions)
        {
            // verify the required parameter 'bulkSendEmailOptions' is set
            if (bulkSendEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'bulkSendEmailOptions' when calling ExtraOperationsApi->BulkSendEmails");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = bulkSendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/bulk/send", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BulkSendEmails", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Bulk Send Emails Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkSendEmailOptions">bulkSendEmailOptions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BulkSendEmailsAsync (BulkSendEmailOptions bulkSendEmailOptions)
        {
             await BulkSendEmailsAsyncWithHttpInfo(bulkSendEmailOptions);

        }

        /// <summary>
        /// Bulk Send Emails Enterprise Plan Required
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkSendEmailOptions">bulkSendEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> BulkSendEmailsAsyncWithHttpInfo (BulkSendEmailOptions bulkSendEmailOptions)
        {
            // verify the required parameter 'bulkSendEmailOptions' is set
            if (bulkSendEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'bulkSendEmailOptions' when calling ExtraOperationsApi->BulkSendEmails");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = bulkSendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/bulk/send", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BulkSendEmails", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create Domain Link a domain that you own with MailSlurp so you can create inboxes with it. Returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDomainOptions">domainOptions</param>
        /// <returns>DomainPlusVerificationRecordsAndStatus</returns>
        public DomainPlusVerificationRecordsAndStatus CreateDomain (CreateDomainOptions createDomainOptions)
        {
             mailslurp.Client.ApiResponse<DomainPlusVerificationRecordsAndStatus> localVarResponse = CreateDomainWithHttpInfo(createDomainOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Domain Link a domain that you own with MailSlurp so you can create inboxes with it. Returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDomainOptions">domainOptions</param>
        /// <returns>ApiResponse of DomainPlusVerificationRecordsAndStatus</returns>
        public mailslurp.Client.ApiResponse< DomainPlusVerificationRecordsAndStatus > CreateDomainWithHttpInfo (CreateDomainOptions createDomainOptions)
        {
            // verify the required parameter 'createDomainOptions' is set
            if (createDomainOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createDomainOptions' when calling ExtraOperationsApi->CreateDomain");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = createDomainOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post< DomainPlusVerificationRecordsAndStatus >("/domains", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateDomain", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create Domain Link a domain that you own with MailSlurp so you can create inboxes with it. Returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDomainOptions">domainOptions</param>
        /// <returns>Task of DomainPlusVerificationRecordsAndStatus</returns>
        public async System.Threading.Tasks.Task<DomainPlusVerificationRecordsAndStatus> CreateDomainAsync (CreateDomainOptions createDomainOptions)
        {
             mailslurp.Client.ApiResponse<DomainPlusVerificationRecordsAndStatus> localVarResponse = await CreateDomainAsyncWithHttpInfo(createDomainOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Domain Link a domain that you own with MailSlurp so you can create inboxes with it. Returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDomainOptions">domainOptions</param>
        /// <returns>Task of ApiResponse (DomainPlusVerificationRecordsAndStatus)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<DomainPlusVerificationRecordsAndStatus>> CreateDomainAsyncWithHttpInfo (CreateDomainOptions createDomainOptions)
        {
            // verify the required parameter 'createDomainOptions' is set
            if (createDomainOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createDomainOptions' when calling ExtraOperationsApi->CreateDomain");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = createDomainOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<DomainPlusVerificationRecordsAndStatus>("/domains", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateDomain", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create an Inbox (email address) Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <returns>Inbox</returns>
        public Inbox CreateInbox (string emailAddress = null)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = CreateInboxWithHttpInfo(emailAddress);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Inbox (email address) Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > CreateInboxWithHttpInfo (string emailAddress = null)
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailAddress != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post< Inbox >("/inboxes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateInbox", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create an Inbox (email address) Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> CreateInboxAsync (string emailAddress = null)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await CreateInboxAsyncWithHttpInfo(emailAddress);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Inbox (email address) Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddress">Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method. (optional)</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> CreateInboxAsyncWithHttpInfo (string emailAddress = null)
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailAddress != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "emailAddress", emailAddress))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Inbox>("/inboxes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateInbox", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createWebhookOptions">webhookOptions</param>
        /// <returns>Webhook</returns>
        public Webhook CreateWebhook (Guid? inboxId, CreateWebhookOptions createWebhookOptions)
        {
             mailslurp.Client.ApiResponse<Webhook> localVarResponse = CreateWebhookWithHttpInfo(inboxId, createWebhookOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createWebhookOptions">webhookOptions</param>
        /// <returns>ApiResponse of Webhook</returns>
        public mailslurp.Client.ApiResponse< Webhook > CreateWebhookWithHttpInfo (Guid? inboxId, CreateWebhookOptions createWebhookOptions)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->CreateWebhook");
            // verify the required parameter 'createWebhookOptions' is set
            if (createWebhookOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createWebhookOptions' when calling ExtraOperationsApi->CreateWebhook");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            requestOptions.Data = createWebhookOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post< Webhook >("/inboxes/{inboxId}/webhooks", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createWebhookOptions">webhookOptions</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> CreateWebhookAsync (Guid? inboxId, CreateWebhookOptions createWebhookOptions)
        {
             mailslurp.Client.ApiResponse<Webhook> localVarResponse = await CreateWebhookAsyncWithHttpInfo(inboxId, createWebhookOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="createWebhookOptions">webhookOptions</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Webhook>> CreateWebhookAsyncWithHttpInfo (Guid? inboxId, CreateWebhookOptions createWebhookOptions)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->CreateWebhook");
            // verify the required parameter 'createWebhookOptions' is set
            if (createWebhookOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createWebhookOptions' when calling ExtraOperationsApi->CreateWebhook");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            requestOptions.Data = createWebhookOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Webhook>("/inboxes/{inboxId}/webhooks", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a domain 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteDomain (Guid? id)
        {
             DeleteDomainWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a domain 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteDomainWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'id' when calling ExtraOperationsApi->DeleteDomain");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/domains/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteDomain", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a domain 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDomainAsync (Guid? id)
        {
             await DeleteDomainAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a domain 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteDomainAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'id' when calling ExtraOperationsApi->DeleteDomain");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/domains/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteDomain", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Email Deletes an email and removes it from the inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns></returns>
        public void DeleteEmail1 (Guid? emailId)
        {
             DeleteEmail1WithHttpInfo(emailId);
        }

        /// <summary>
        /// Delete Email Deletes an email and removes it from the inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteEmail1WithHttpInfo (Guid? emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling ExtraOperationsApi->DeleteEmail1");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailId != null)
                requestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/emails/{emailId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmail1", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Email Deletes an email and removes it from the inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmail1Async (Guid? emailId)
        {
             await DeleteEmail1AsyncWithHttpInfo(emailId);

        }

        /// <summary>
        /// Delete Email Deletes an email and removes it from the inbox
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteEmail1AsyncWithHttpInfo (Guid? emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling ExtraOperationsApi->DeleteEmail1");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailId != null)
                requestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/emails/{emailId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmail1", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Inbox / Email Address Permanently delete an inbox and associated email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns></returns>
        public void DeleteInbox (Guid? inboxId)
        {
             DeleteInboxWithHttpInfo(inboxId);
        }

        /// <summary>
        /// Delete Inbox / Email Address Permanently delete an inbox and associated email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteInboxWithHttpInfo (Guid? inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->DeleteInbox");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/inboxes/{inboxId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteInbox", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Inbox / Email Address Permanently delete an inbox and associated email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboxAsync (Guid? inboxId)
        {
             await DeleteInboxAsyncWithHttpInfo(inboxId);

        }

        /// <summary>
        /// Delete Inbox / Email Address Permanently delete an inbox and associated email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteInboxAsyncWithHttpInfo (Guid? inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->DeleteInbox");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/inboxes/{inboxId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteInbox", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete and disable a WebHook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns></returns>
        public void DeleteWebhook (Guid? inboxId, Guid? webhookId)
        {
             DeleteWebhookWithHttpInfo(inboxId, webhookId);
        }

        /// <summary>
        /// Delete and disable a WebHook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteWebhookWithHttpInfo (Guid? inboxId, Guid? webhookId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->DeleteWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'webhookId' when calling ExtraOperationsApi->DeleteWebhook");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (webhookId != null)
                requestOptions.PathParameters.Add("webhookId", mailslurp.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/inboxes/{inboxId}/webhooks/{webhookId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete and disable a WebHook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookAsync (Guid? inboxId, Guid? webhookId)
        {
             await DeleteWebhookAsyncWithHttpInfo(inboxId, webhookId);

        }

        /// <summary>
        /// Delete and disable a WebHook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteWebhookAsyncWithHttpInfo (Guid? inboxId, Guid? webhookId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->DeleteWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'webhookId' when calling ExtraOperationsApi->DeleteWebhook");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (webhookId != null)
                requestOptions.PathParameters.Add("webhookId", mailslurp.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/inboxes/{inboxId}/webhooks/{webhookId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteWebhook", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get email attachment Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response. Requires enterprise account.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns></returns>
        public void DownloadAttachment (string attachmentId, Guid? emailId, string apiKey = null)
        {
             DownloadAttachmentWithHttpInfo(attachmentId, emailId, apiKey);
        }

        /// <summary>
        /// Get email attachment Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response. Requires enterprise account.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DownloadAttachmentWithHttpInfo (string attachmentId, Guid? emailId, string apiKey = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling ExtraOperationsApi->DownloadAttachment");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling ExtraOperationsApi->DownloadAttachment");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (attachmentId != null)
                requestOptions.PathParameters.Add("attachmentId", mailslurp.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            if (emailId != null)
                requestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (apiKey != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "apiKey", apiKey))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get<Object>("/emails/{emailId}/attachments/{attachmentId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DownloadAttachment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get email attachment Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response. Requires enterprise account.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadAttachmentAsync (string attachmentId, Guid? emailId, string apiKey = null)
        {
             await DownloadAttachmentAsyncWithHttpInfo(attachmentId, emailId, apiKey);

        }

        /// <summary>
        /// Get email attachment Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response. Requires enterprise account.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">attachmentId</param>
        /// <param name="emailId">emailId</param>
        /// <param name="apiKey">Can pass apiKey in url for this request if you wish to download the file in a browser (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DownloadAttachmentAsyncWithHttpInfo (string attachmentId, Guid? emailId, string apiKey = null)
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'attachmentId' when calling ExtraOperationsApi->DownloadAttachment");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling ExtraOperationsApi->DownloadAttachment");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (attachmentId != null)
                requestOptions.PathParameters.Add("attachmentId", mailslurp.Client.ClientUtils.ParameterToString(attachmentId)); // path parameter
            if (emailId != null)
                requestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            if (apiKey != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "apiKey", apiKey))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/emails/{emailId}/attachments/{attachmentId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DownloadAttachment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Forward Email Forward email content to given recipients
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns></returns>
        public void ForwardEmail (Guid? emailId, ForwardEmailOptions forwardEmailOptions)
        {
             ForwardEmailWithHttpInfo(emailId, forwardEmailOptions);
        }

        /// <summary>
        /// Forward Email Forward email content to given recipients
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> ForwardEmailWithHttpInfo (Guid? emailId, ForwardEmailOptions forwardEmailOptions)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling ExtraOperationsApi->ForwardEmail");
            // verify the required parameter 'forwardEmailOptions' is set
            if (forwardEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'forwardEmailOptions' when calling ExtraOperationsApi->ForwardEmail");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailId != null)
                requestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            requestOptions.Data = forwardEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/emails/{emailId}/forward", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ForwardEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Forward Email Forward email content to given recipients
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ForwardEmailAsync (Guid? emailId, ForwardEmailOptions forwardEmailOptions)
        {
             await ForwardEmailAsyncWithHttpInfo(emailId, forwardEmailOptions);

        }

        /// <summary>
        /// Forward Email Forward email content to given recipients
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <param name="forwardEmailOptions">forwardEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> ForwardEmailAsyncWithHttpInfo (Guid? emailId, ForwardEmailOptions forwardEmailOptions)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling ExtraOperationsApi->ForwardEmail");
            // verify the required parameter 'forwardEmailOptions' is set
            if (forwardEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'forwardEmailOptions' when calling ExtraOperationsApi->ForwardEmail");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailId != null)
                requestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter
            requestOptions.Data = forwardEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/emails/{emailId}/forward", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ForwardEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a domain Returns domain verification status and tokens
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>DomainPlusVerificationRecordsAndStatus</returns>
        public DomainPlusVerificationRecordsAndStatus GetDomain (Guid? id)
        {
             mailslurp.Client.ApiResponse<DomainPlusVerificationRecordsAndStatus> localVarResponse = GetDomainWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a domain Returns domain verification status and tokens
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of DomainPlusVerificationRecordsAndStatus</returns>
        public mailslurp.Client.ApiResponse< DomainPlusVerificationRecordsAndStatus > GetDomainWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'id' when calling ExtraOperationsApi->GetDomain");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< DomainPlusVerificationRecordsAndStatus >("/domains/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDomain", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a domain Returns domain verification status and tokens
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of DomainPlusVerificationRecordsAndStatus</returns>
        public async System.Threading.Tasks.Task<DomainPlusVerificationRecordsAndStatus> GetDomainAsync (Guid? id)
        {
             mailslurp.Client.ApiResponse<DomainPlusVerificationRecordsAndStatus> localVarResponse = await GetDomainAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a domain Returns domain verification status and tokens
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (DomainPlusVerificationRecordsAndStatus)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<DomainPlusVerificationRecordsAndStatus>> GetDomainAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'id' when calling ExtraOperationsApi->GetDomain");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<DomainPlusVerificationRecordsAndStatus>("/domains/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDomain", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get domains 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DomainPreview&gt;</returns>
        public List<DomainPreview> GetDomains ()
        {
             mailslurp.Client.ApiResponse<List<DomainPreview>> localVarResponse = GetDomainsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get domains 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DomainPreview&gt;</returns>
        public mailslurp.Client.ApiResponse< List<DomainPreview> > GetDomainsWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<DomainPreview> >("/domains", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDomains", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get domains 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DomainPreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<DomainPreview>> GetDomainsAsync ()
        {
             mailslurp.Client.ApiResponse<List<DomainPreview>> localVarResponse = await GetDomainsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get domains 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DomainPreview&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<DomainPreview>>> GetDomainsAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<DomainPreview>>("/domains", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDomains", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get Email Content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Email</returns>
        public Email GetEmail (Guid? emailId)
        {
             mailslurp.Client.ApiResponse<Email> localVarResponse = GetEmailWithHttpInfo(emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of Email</returns>
        public mailslurp.Client.ApiResponse< Email > GetEmailWithHttpInfo (Guid? emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling ExtraOperationsApi->GetEmail");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailId != null)
                requestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< Email >("/emails/{emailId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get Email Content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of Email</returns>
        public async System.Threading.Tasks.Task<Email> GetEmailAsync (Guid? emailId)
        {
             mailslurp.Client.ApiResponse<Email> localVarResponse = await GetEmailAsyncWithHttpInfo(emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Email Content Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (Email)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Email>> GetEmailAsyncWithHttpInfo (Guid? emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling ExtraOperationsApi->GetEmail");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailId != null)
                requestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Email>("/emails/{emailId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Emails in an Inbox / EmailAddress List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by descending received date time (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <returns>List&lt;EmailPreview&gt;</returns>
        public List<EmailPreview> GetEmails (Guid? inboxId, int? limit = null, long? minCount = null, long? retryTimeout = null, DateTime? since = null)
        {
             mailslurp.Client.ApiResponse<List<EmailPreview>> localVarResponse = GetEmailsWithHttpInfo(inboxId, limit, minCount, retryTimeout, since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Emails in an Inbox / EmailAddress List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by descending received date time (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailPreview&gt;</returns>
        public mailslurp.Client.ApiResponse< List<EmailPreview> > GetEmailsWithHttpInfo (Guid? inboxId, int? limit = null, long? minCount = null, long? retryTimeout = null, DateTime? since = null)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->GetEmails");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (limit != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (minCount != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "minCount", minCount))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (retryTimeout != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "retryTimeout", retryTimeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (since != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<EmailPreview> >("/inboxes/{inboxId}/emails", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmails", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Emails in an Inbox / EmailAddress List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by descending received date time (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <returns>Task of List&lt;EmailPreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmailPreview>> GetEmailsAsync (Guid? inboxId, int? limit = null, long? minCount = null, long? retryTimeout = null, DateTime? since = null)
        {
             mailslurp.Client.ApiResponse<List<EmailPreview>> localVarResponse = await GetEmailsAsyncWithHttpInfo(inboxId, limit, minCount, retryTimeout, since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Emails in an Inbox / EmailAddress List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">Id of inbox that emails belongs to</param>
        /// <param name="limit">Limit the result set, ordered by descending received date time (optional)</param>
        /// <param name="minCount">Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)</param>
        /// <param name="retryTimeout">Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)</param>
        /// <param name="since">Exclude emails received before this ISO 8601 date time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailPreview&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<EmailPreview>>> GetEmailsAsyncWithHttpInfo (Guid? inboxId, int? limit = null, long? minCount = null, long? retryTimeout = null, DateTime? since = null)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->GetEmails");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (limit != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (minCount != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "minCount", minCount))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (retryTimeout != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "retryTimeout", retryTimeout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (since != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<EmailPreview>>("/inboxes/{inboxId}/emails", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmails", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get all emails Responses are paginated
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <returns>PageEmailProjection</returns>
        public PageEmailProjection GetEmailsPaginated (int? page = null, int? size = null)
        {
             mailslurp.Client.ApiResponse<PageEmailProjection> localVarResponse = GetEmailsPaginatedWithHttpInfo(page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all emails Responses are paginated
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <returns>ApiResponse of PageEmailProjection</returns>
        public mailslurp.Client.ApiResponse< PageEmailProjection > GetEmailsPaginatedWithHttpInfo (int? page = null, int? size = null)
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (size != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< PageEmailProjection >("/emails", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmailsPaginated", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get all emails Responses are paginated
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <returns>Task of PageEmailProjection</returns>
        public async System.Threading.Tasks.Task<PageEmailProjection> GetEmailsPaginatedAsync (int? page = null, int? size = null)
        {
             mailslurp.Client.ApiResponse<PageEmailProjection> localVarResponse = await GetEmailsPaginatedAsyncWithHttpInfo(page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all emails Responses are paginated
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in email list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in email list pagination (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (PageEmailProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageEmailProjection>> GetEmailsPaginatedAsyncWithHttpInfo (int? page = null, int? size = null)
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (size != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PageEmailProjection>("/emails", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmailsPaginated", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get Inbox / EmailAddress Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Inbox</returns>
        public Inbox GetInbox (Guid? inboxId)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = GetInboxWithHttpInfo(inboxId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inbox / EmailAddress Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of Inbox</returns>
        public mailslurp.Client.ApiResponse< Inbox > GetInboxWithHttpInfo (Guid? inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->GetInbox");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< Inbox >("/inboxes/{inboxId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInbox", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get Inbox / EmailAddress Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of Inbox</returns>
        public async System.Threading.Tasks.Task<Inbox> GetInboxAsync (Guid? inboxId)
        {
             mailslurp.Client.ApiResponse<Inbox> localVarResponse = await GetInboxAsyncWithHttpInfo(inboxId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inbox / EmailAddress Returns an inbox&#39;s properties, including its email address and ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse (Inbox)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Inbox>> GetInboxAsyncWithHttpInfo (Guid? inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->GetInbox");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Inbox>("/inboxes/{inboxId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInbox", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Inboxes / Email Addresses List the inboxes you have created
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Inbox&gt;</returns>
        public List<Inbox> GetInboxes ()
        {
             mailslurp.Client.ApiResponse<List<Inbox>> localVarResponse = GetInboxesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Inboxes / Email Addresses List the inboxes you have created
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Inbox&gt;</returns>
        public mailslurp.Client.ApiResponse< List<Inbox> > GetInboxesWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<Inbox> >("/inboxes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInboxes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Inboxes / Email Addresses List the inboxes you have created
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Inbox&gt;</returns>
        public async System.Threading.Tasks.Task<List<Inbox>> GetInboxesAsync ()
        {
             mailslurp.Client.ApiResponse<List<Inbox>> localVarResponse = await GetInboxesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Inboxes / Email Addresses List the inboxes you have created
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Inbox&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<Inbox>>> GetInboxesAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Inbox>>("/inboxes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInboxes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get Raw Email Content Returns a raw, unparsed and unprocessed email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>string</returns>
        public string GetRawEmailContents (Guid? emailId)
        {
             mailslurp.Client.ApiResponse<string> localVarResponse = GetRawEmailContentsWithHttpInfo(emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Raw Email Content Returns a raw, unparsed and unprocessed email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>ApiResponse of string</returns>
        public mailslurp.Client.ApiResponse< string > GetRawEmailContentsWithHttpInfo (Guid? emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling ExtraOperationsApi->GetRawEmailContents");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailId != null)
                requestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< string >("/emails/{emailId}/raw", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRawEmailContents", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get Raw Email Content Returns a raw, unparsed and unprocessed email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetRawEmailContentsAsync (Guid? emailId)
        {
             mailslurp.Client.ApiResponse<string> localVarResponse = await GetRawEmailContentsAsyncWithHttpInfo(emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Raw Email Content Returns a raw, unparsed and unprocessed email
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailId">emailId</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<string>> GetRawEmailContentsAsyncWithHttpInfo (Guid? emailId)
        {
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'emailId' when calling ExtraOperationsApi->GetRawEmailContents");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "text/plain"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emailId != null)
                requestOptions.PathParameters.Add("emailId", mailslurp.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<string>("/emails/{emailId}/raw", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRawEmailContents", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get all WebHooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>List&lt;Webhook&gt;</returns>
        public List<Webhook> GetWebhooks (Guid? inboxId)
        {
             mailslurp.Client.ApiResponse<List<Webhook>> localVarResponse = GetWebhooksWithHttpInfo(inboxId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all WebHooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
        public mailslurp.Client.ApiResponse< List<Webhook> > GetWebhooksWithHttpInfo (Guid? inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->GetWebhooks");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Get< List<Webhook> >("/inboxes/{inboxId}/webhooks", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetWebhooks", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get all WebHooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of List&lt;Webhook&gt;</returns>
        public async System.Threading.Tasks.Task<List<Webhook>> GetWebhooksAsync (Guid? inboxId)
        {
             mailslurp.Client.ApiResponse<List<Webhook>> localVarResponse = await GetWebhooksAsyncWithHttpInfo(inboxId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all WebHooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse (List&lt;Webhook&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<Webhook>>> GetWebhooksAsyncWithHttpInfo (Guid? inboxId)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->GetWebhooks");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Webhook>>("/inboxes/{inboxId}/webhooks", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetWebhooks", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Send Email Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns></returns>
        public void SendEmail (Guid? inboxId, SendEmailOptions sendEmailOptions)
        {
             SendEmailWithHttpInfo(inboxId, sendEmailOptions);
        }

        /// <summary>
        /// Send Email Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> SendEmailWithHttpInfo (Guid? inboxId, SendEmailOptions sendEmailOptions)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->SendEmail");
            // verify the required parameter 'sendEmailOptions' is set
            if (sendEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'sendEmailOptions' when calling ExtraOperationsApi->SendEmail");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            requestOptions.Data = sendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/inboxes/{inboxId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SendEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Send Email Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailAsync (Guid? inboxId, SendEmailOptions sendEmailOptions)
        {
             await SendEmailAsyncWithHttpInfo(inboxId, sendEmailOptions);

        }

        /// <summary>
        /// Send Email Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="sendEmailOptions">sendEmailOptions</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> SendEmailAsyncWithHttpInfo (Guid? inboxId, SendEmailOptions sendEmailOptions)
        {
            // verify the required parameter 'inboxId' is set
            if (inboxId == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'inboxId' when calling ExtraOperationsApi->SendEmail");
            // verify the required parameter 'sendEmailOptions' is set
            if (sendEmailOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'sendEmailOptions' when calling ExtraOperationsApi->SendEmail");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inboxId != null)
                requestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            requestOptions.Data = sendEmailOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/inboxes/{inboxId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SendEmail", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload an attachment for sending When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadAttachmentOptions">uploadOptions</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> UploadAttachment (UploadAttachmentOptions uploadAttachmentOptions)
        {
             mailslurp.Client.ApiResponse<List<string>> localVarResponse = UploadAttachmentWithHttpInfo(uploadAttachmentOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an attachment for sending When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadAttachmentOptions">uploadOptions</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public mailslurp.Client.ApiResponse< List<string> > UploadAttachmentWithHttpInfo (UploadAttachmentOptions uploadAttachmentOptions)
        {
            // verify the required parameter 'uploadAttachmentOptions' is set
            if (uploadAttachmentOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'uploadAttachmentOptions' when calling ExtraOperationsApi->UploadAttachment");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = uploadAttachmentOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post< List<string> >("/attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UploadAttachment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload an attachment for sending When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadAttachmentOptions">uploadOptions</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> UploadAttachmentAsync (UploadAttachmentOptions uploadAttachmentOptions)
        {
             mailslurp.Client.ApiResponse<List<string>> localVarResponse = await UploadAttachmentAsyncWithHttpInfo(uploadAttachmentOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an attachment for sending When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadAttachmentOptions">uploadOptions</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<string>>> UploadAttachmentAsyncWithHttpInfo (UploadAttachmentOptions uploadAttachmentOptions)
        {
            // verify the required parameter 'uploadAttachmentOptions' is set
            if (uploadAttachmentOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'uploadAttachmentOptions' when calling ExtraOperationsApi->UploadAttachment");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = uploadAttachmentOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<string>>("/attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UploadAttachment", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload an attachment for sending using Multipart Form When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file</param>
        /// <param name="contentType">contentType (optional)</param>
        /// <param name="filename">filename (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> UploadMultipartForm (System.IO.Stream file, string contentType = null, string filename = null)
        {
             mailslurp.Client.ApiResponse<List<string>> localVarResponse = UploadMultipartFormWithHttpInfo(file, contentType, filename);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an attachment for sending using Multipart Form When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file</param>
        /// <param name="contentType">contentType (optional)</param>
        /// <param name="filename">filename (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public mailslurp.Client.ApiResponse< List<string> > UploadMultipartFormWithHttpInfo (System.IO.Stream file, string contentType = null, string filename = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'file' when calling ExtraOperationsApi->UploadMultipartForm");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contentType != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "contentType", contentType))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (filename != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "filename", filename))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (file != null)
            {
                requestOptions.FileParameters.Add("file", file);
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = this.Client.Post< List<string> >("/attachments/multipart", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UploadMultipartForm", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload an attachment for sending using Multipart Form When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file</param>
        /// <param name="contentType">contentType (optional)</param>
        /// <param name="filename">filename (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> UploadMultipartFormAsync (System.IO.Stream file, string contentType = null, string filename = null)
        {
             mailslurp.Client.ApiResponse<List<string>> localVarResponse = await UploadMultipartFormAsyncWithHttpInfo(file, contentType, filename);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an attachment for sending using Multipart Form When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">file</param>
        /// <param name="contentType">contentType (optional)</param>
        /// <param name="filename">filename (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<string>>> UploadMultipartFormAsyncWithHttpInfo (System.IO.Stream file, string contentType = null, string filename = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'file' when calling ExtraOperationsApi->UploadMultipartForm");

            mailslurp.Client.RequestOptions requestOptions = new mailslurp.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contentType != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "contentType", contentType))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (filename != null)
            {
                foreach (var kvp in mailslurp.Client.ClientUtils.ParameterToMultiMap("", "filename", filename))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (file != null)
            {
                requestOptions.FileParameters.Add("file", file);
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                requestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<string>>("/attachments/multipart", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UploadMultipartForm", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
