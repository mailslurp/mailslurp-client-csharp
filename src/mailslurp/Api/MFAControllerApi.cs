/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMFAControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a TOTP device from custom options
        /// </summary>
        /// <remarks>
        /// Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotpDeviceDto</returns>
        TotpDeviceDto CreateTotpDeviceForCustom(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0);

        /// <summary>
        /// Create a TOTP device from custom options
        /// </summary>
        /// <remarks>
        /// Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotpDeviceDto</returns>
        ApiResponse<TotpDeviceDto> CreateTotpDeviceForCustomWithHttpInfo(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0);
        /// <summary>
        /// Create a TOTP device from an OTP Auth URL
        /// </summary>
        /// <remarks>
        /// Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotpDeviceDto</returns>
        TotpDeviceDto CreateTotpDeviceForOtpAuthUrl(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0);

        /// <summary>
        /// Create a TOTP device from an OTP Auth URL
        /// </summary>
        /// <remarks>
        /// Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotpDeviceDto</returns>
        ApiResponse<TotpDeviceDto> CreateTotpDeviceForOtpAuthUrlWithHttpInfo(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0);
        /// <summary>
        /// Get a TOTP device by ID
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password (TOTP) device by its ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotpDeviceDto</returns>
        TotpDeviceDto GetTotpDevice(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get a TOTP device by ID
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password (TOTP) device by its ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotpDeviceDto</returns>
        ApiResponse<TotpDeviceDto> GetTotpDeviceWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get a TOTP device by username, issuer, or name. Returns empty if not found.
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Optional name filter (optional)</param>
        /// <param name="issuer">Optional issuer filter (optional)</param>
        /// <param name="username">Optional username filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotpDeviceOptionalDto</returns>
        TotpDeviceOptionalDto GetTotpDeviceBy(string name = default, string issuer = default, string username = default, int operationIndex = 0);

        /// <summary>
        /// Get a TOTP device by username, issuer, or name. Returns empty if not found.
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Optional name filter (optional)</param>
        /// <param name="issuer">Optional issuer filter (optional)</param>
        /// <param name="username">Optional username filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotpDeviceOptionalDto</returns>
        ApiResponse<TotpDeviceOptionalDto> GetTotpDeviceByWithHttpInfo(string name = default, string issuer = default, string username = default, int operationIndex = 0);
        /// <summary>
        /// Get a TOTP device code by device ID
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password for a device by its ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the TOTP device to get the code for</param>
        /// <param name="at">Optional time to get code for. If not provided, current time is used. (optional)</param>
        /// <param name="minSecondsUntilExpire">Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotpDeviceCodeDto</returns>
        TotpDeviceCodeDto GetTotpDeviceCode(Guid id, DateTime? at = default, int? minSecondsUntilExpire = default, int operationIndex = 0);

        /// <summary>
        /// Get a TOTP device code by device ID
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password for a device by its ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the TOTP device to get the code for</param>
        /// <param name="at">Optional time to get code for. If not provided, current time is used. (optional)</param>
        /// <param name="minSecondsUntilExpire">Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotpDeviceCodeDto</returns>
        ApiResponse<TotpDeviceCodeDto> GetTotpDeviceCodeWithHttpInfo(Guid id, DateTime? at = default, int? minSecondsUntilExpire = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMFAControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a TOTP device from custom options
        /// </summary>
        /// <remarks>
        /// Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotpDeviceDto</returns>
        System.Threading.Tasks.Task<TotpDeviceDto> CreateTotpDeviceForCustomAsync(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a TOTP device from custom options
        /// </summary>
        /// <remarks>
        /// Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotpDeviceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TotpDeviceDto>> CreateTotpDeviceForCustomWithHttpInfoAsync(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create a TOTP device from an OTP Auth URL
        /// </summary>
        /// <remarks>
        /// Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotpDeviceDto</returns>
        System.Threading.Tasks.Task<TotpDeviceDto> CreateTotpDeviceForOtpAuthUrlAsync(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a TOTP device from an OTP Auth URL
        /// </summary>
        /// <remarks>
        /// Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotpDeviceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TotpDeviceDto>> CreateTotpDeviceForOtpAuthUrlWithHttpInfoAsync(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a TOTP device by ID
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password (TOTP) device by its ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotpDeviceDto</returns>
        System.Threading.Tasks.Task<TotpDeviceDto> GetTotpDeviceAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a TOTP device by ID
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password (TOTP) device by its ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotpDeviceDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TotpDeviceDto>> GetTotpDeviceWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a TOTP device by username, issuer, or name. Returns empty if not found.
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Optional name filter (optional)</param>
        /// <param name="issuer">Optional issuer filter (optional)</param>
        /// <param name="username">Optional username filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotpDeviceOptionalDto</returns>
        System.Threading.Tasks.Task<TotpDeviceOptionalDto> GetTotpDeviceByAsync(string name = default, string issuer = default, string username = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a TOTP device by username, issuer, or name. Returns empty if not found.
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Optional name filter (optional)</param>
        /// <param name="issuer">Optional issuer filter (optional)</param>
        /// <param name="username">Optional username filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotpDeviceOptionalDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TotpDeviceOptionalDto>> GetTotpDeviceByWithHttpInfoAsync(string name = default, string issuer = default, string username = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a TOTP device code by device ID
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password for a device by its ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the TOTP device to get the code for</param>
        /// <param name="at">Optional time to get code for. If not provided, current time is used. (optional)</param>
        /// <param name="minSecondsUntilExpire">Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotpDeviceCodeDto</returns>
        System.Threading.Tasks.Task<TotpDeviceCodeDto> GetTotpDeviceCodeAsync(Guid id, DateTime? at = default, int? minSecondsUntilExpire = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a TOTP device code by device ID
        /// </summary>
        /// <remarks>
        /// Get Time-Based One-Time Password for a device by its ID.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the TOTP device to get the code for</param>
        /// <param name="at">Optional time to get code for. If not provided, current time is used. (optional)</param>
        /// <param name="minSecondsUntilExpire">Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotpDeviceCodeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TotpDeviceCodeDto>> GetTotpDeviceCodeWithHttpInfoAsync(Guid id, DateTime? at = default, int? minSecondsUntilExpire = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMFAControllerApi : IMFAControllerApiSync, IMFAControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MFAControllerApi : IMFAControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MFAControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MFAControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MFAControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MFAControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a TOTP device from custom options Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotpDeviceDto</returns>
        public TotpDeviceDto CreateTotpDeviceForCustom(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<TotpDeviceDto> localVarResponse = CreateTotpDeviceForCustomWithHttpInfo(createTotpDeviceOtpAuthUrlOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a TOTP device from custom options Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotpDeviceDto</returns>
        public mailslurp.Client.ApiResponse<TotpDeviceDto> CreateTotpDeviceForCustomWithHttpInfo(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createTotpDeviceOtpAuthUrlOptions' is set
            if (createTotpDeviceOtpAuthUrlOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createTotpDeviceOtpAuthUrlOptions' when calling MFAControllerApi->CreateTotpDeviceForCustom");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTotpDeviceOtpAuthUrlOptions;

            localVarRequestOptions.Operation = "MFAControllerApi.CreateTotpDeviceForCustom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TotpDeviceDto>("/mfa/totp/device/custom", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTotpDeviceForCustom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a TOTP device from custom options Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotpDeviceDto</returns>
        public async System.Threading.Tasks.Task<TotpDeviceDto> CreateTotpDeviceForCustomAsync(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<TotpDeviceDto> localVarResponse = await CreateTotpDeviceForCustomWithHttpInfoAsync(createTotpDeviceOtpAuthUrlOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a TOTP device from custom options Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotpDeviceDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<TotpDeviceDto>> CreateTotpDeviceForCustomWithHttpInfoAsync(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createTotpDeviceOtpAuthUrlOptions' is set
            if (createTotpDeviceOtpAuthUrlOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createTotpDeviceOtpAuthUrlOptions' when calling MFAControllerApi->CreateTotpDeviceForCustom");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTotpDeviceOtpAuthUrlOptions;

            localVarRequestOptions.Operation = "MFAControllerApi.CreateTotpDeviceForCustom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TotpDeviceDto>("/mfa/totp/device/custom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTotpDeviceForCustom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a TOTP device from an OTP Auth URL Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotpDeviceDto</returns>
        public TotpDeviceDto CreateTotpDeviceForOtpAuthUrl(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<TotpDeviceDto> localVarResponse = CreateTotpDeviceForOtpAuthUrlWithHttpInfo(createTotpDeviceOtpAuthUrlOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a TOTP device from an OTP Auth URL Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotpDeviceDto</returns>
        public mailslurp.Client.ApiResponse<TotpDeviceDto> CreateTotpDeviceForOtpAuthUrlWithHttpInfo(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createTotpDeviceOtpAuthUrlOptions' is set
            if (createTotpDeviceOtpAuthUrlOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createTotpDeviceOtpAuthUrlOptions' when calling MFAControllerApi->CreateTotpDeviceForOtpAuthUrl");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTotpDeviceOtpAuthUrlOptions;

            localVarRequestOptions.Operation = "MFAControllerApi.CreateTotpDeviceForOtpAuthUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TotpDeviceDto>("/mfa/totp/device/otpAuthUrl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTotpDeviceForOtpAuthUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a TOTP device from an OTP Auth URL Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotpDeviceDto</returns>
        public async System.Threading.Tasks.Task<TotpDeviceDto> CreateTotpDeviceForOtpAuthUrlAsync(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<TotpDeviceDto> localVarResponse = await CreateTotpDeviceForOtpAuthUrlWithHttpInfoAsync(createTotpDeviceOtpAuthUrlOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a TOTP device from an OTP Auth URL Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotpDeviceDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<TotpDeviceDto>> CreateTotpDeviceForOtpAuthUrlWithHttpInfoAsync(CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createTotpDeviceOtpAuthUrlOptions' is set
            if (createTotpDeviceOtpAuthUrlOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createTotpDeviceOtpAuthUrlOptions' when calling MFAControllerApi->CreateTotpDeviceForOtpAuthUrl");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTotpDeviceOtpAuthUrlOptions;

            localVarRequestOptions.Operation = "MFAControllerApi.CreateTotpDeviceForOtpAuthUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TotpDeviceDto>("/mfa/totp/device/otpAuthUrl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTotpDeviceForOtpAuthUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a TOTP device by ID Get Time-Based One-Time Password (TOTP) device by its ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotpDeviceDto</returns>
        public TotpDeviceDto GetTotpDevice(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<TotpDeviceDto> localVarResponse = GetTotpDeviceWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a TOTP device by ID Get Time-Based One-Time Password (TOTP) device by its ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotpDeviceDto</returns>
        public mailslurp.Client.ApiResponse<TotpDeviceDto> GetTotpDeviceWithHttpInfo(Guid id, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MFAControllerApi.GetTotpDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TotpDeviceDto>("/mfa/totp/device/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a TOTP device by ID Get Time-Based One-Time Password (TOTP) device by its ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotpDeviceDto</returns>
        public async System.Threading.Tasks.Task<TotpDeviceDto> GetTotpDeviceAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<TotpDeviceDto> localVarResponse = await GetTotpDeviceWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a TOTP device by ID Get Time-Based One-Time Password (TOTP) device by its ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotpDeviceDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<TotpDeviceDto>> GetTotpDeviceWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MFAControllerApi.GetTotpDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TotpDeviceDto>("/mfa/totp/device/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a TOTP device by username, issuer, or name. Returns empty if not found. Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Optional name filter (optional)</param>
        /// <param name="issuer">Optional issuer filter (optional)</param>
        /// <param name="username">Optional username filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotpDeviceOptionalDto</returns>
        public TotpDeviceOptionalDto GetTotpDeviceBy(string name = default, string issuer = default, string username = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<TotpDeviceOptionalDto> localVarResponse = GetTotpDeviceByWithHttpInfo(name, issuer, username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a TOTP device by username, issuer, or name. Returns empty if not found. Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Optional name filter (optional)</param>
        /// <param name="issuer">Optional issuer filter (optional)</param>
        /// <param name="username">Optional username filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotpDeviceOptionalDto</returns>
        public mailslurp.Client.ApiResponse<TotpDeviceOptionalDto> GetTotpDeviceByWithHttpInfo(string name = default, string issuer = default, string username = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (issuer != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "issuer", issuer));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }

            localVarRequestOptions.Operation = "MFAControllerApi.GetTotpDeviceBy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TotpDeviceOptionalDto>("/mfa/totp/device/by", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpDeviceBy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a TOTP device by username, issuer, or name. Returns empty if not found. Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Optional name filter (optional)</param>
        /// <param name="issuer">Optional issuer filter (optional)</param>
        /// <param name="username">Optional username filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotpDeviceOptionalDto</returns>
        public async System.Threading.Tasks.Task<TotpDeviceOptionalDto> GetTotpDeviceByAsync(string name = default, string issuer = default, string username = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<TotpDeviceOptionalDto> localVarResponse = await GetTotpDeviceByWithHttpInfoAsync(name, issuer, username, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a TOTP device by username, issuer, or name. Returns empty if not found. Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Optional name filter (optional)</param>
        /// <param name="issuer">Optional issuer filter (optional)</param>
        /// <param name="username">Optional username filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotpDeviceOptionalDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<TotpDeviceOptionalDto>> GetTotpDeviceByWithHttpInfoAsync(string name = default, string issuer = default, string username = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (issuer != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "issuer", issuer));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }

            localVarRequestOptions.Operation = "MFAControllerApi.GetTotpDeviceBy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TotpDeviceOptionalDto>("/mfa/totp/device/by", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpDeviceBy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a TOTP device code by device ID Get Time-Based One-Time Password for a device by its ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the TOTP device to get the code for</param>
        /// <param name="at">Optional time to get code for. If not provided, current time is used. (optional)</param>
        /// <param name="minSecondsUntilExpire">Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TotpDeviceCodeDto</returns>
        public TotpDeviceCodeDto GetTotpDeviceCode(Guid id, DateTime? at = default, int? minSecondsUntilExpire = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<TotpDeviceCodeDto> localVarResponse = GetTotpDeviceCodeWithHttpInfo(id, at, minSecondsUntilExpire);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a TOTP device code by device ID Get Time-Based One-Time Password for a device by its ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the TOTP device to get the code for</param>
        /// <param name="at">Optional time to get code for. If not provided, current time is used. (optional)</param>
        /// <param name="minSecondsUntilExpire">Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TotpDeviceCodeDto</returns>
        public mailslurp.Client.ApiResponse<TotpDeviceCodeDto> GetTotpDeviceCodeWithHttpInfo(Guid id, DateTime? at = default, int? minSecondsUntilExpire = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            if (minSecondsUntilExpire != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "minSecondsUntilExpire", minSecondsUntilExpire));
            }

            localVarRequestOptions.Operation = "MFAControllerApi.GetTotpDeviceCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TotpDeviceCodeDto>("/mfa/totp/device/{id}/code", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpDeviceCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a TOTP device code by device ID Get Time-Based One-Time Password for a device by its ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the TOTP device to get the code for</param>
        /// <param name="at">Optional time to get code for. If not provided, current time is used. (optional)</param>
        /// <param name="minSecondsUntilExpire">Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TotpDeviceCodeDto</returns>
        public async System.Threading.Tasks.Task<TotpDeviceCodeDto> GetTotpDeviceCodeAsync(Guid id, DateTime? at = default, int? minSecondsUntilExpire = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<TotpDeviceCodeDto> localVarResponse = await GetTotpDeviceCodeWithHttpInfoAsync(id, at, minSecondsUntilExpire, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a TOTP device code by device ID Get Time-Based One-Time Password for a device by its ID.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the TOTP device to get the code for</param>
        /// <param name="at">Optional time to get code for. If not provided, current time is used. (optional)</param>
        /// <param name="minSecondsUntilExpire">Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TotpDeviceCodeDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<TotpDeviceCodeDto>> GetTotpDeviceCodeWithHttpInfoAsync(Guid id, DateTime? at = default, int? minSecondsUntilExpire = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", mailslurp.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (at != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "at", at));
            }
            if (minSecondsUntilExpire != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "minSecondsUntilExpire", minSecondsUntilExpire));
            }

            localVarRequestOptions.Operation = "MFAControllerApi.GetTotpDeviceCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TotpDeviceCodeDto>("/mfa/totp/device/{id}/code", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpDeviceCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
