/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGuestPortalControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails.
        /// </summary>
        /// <remarks>
        /// Create a guest login page for customers or clients to access assigned email addresses
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortalOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuestPortalDto</returns>
        GuestPortalDto CreateGuestPortal(CreatePortalOptions createPortalOptions, int operationIndex = 0);

        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails.
        /// </summary>
        /// <remarks>
        /// Create a guest login page for customers or clients to access assigned email addresses
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortalOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuestPortalDto</returns>
        ApiResponse<GuestPortalDto> CreateGuestPortalWithHttpInfo(CreatePortalOptions createPortalOptions, int operationIndex = 0);
        /// <summary>
        /// Create a portal guest user
        /// </summary>
        /// <remarks>
        /// Add customer to portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuestPortalUserCreateDto</returns>
        GuestPortalUserCreateDto CreateGuestPortalUser(Guid portalId, CreatePortalUserOptions createPortalUserOptions, int operationIndex = 0);

        /// <summary>
        /// Create a portal guest user
        /// </summary>
        /// <remarks>
        /// Add customer to portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuestPortalUserCreateDto</returns>
        ApiResponse<GuestPortalUserCreateDto> CreateGuestPortalUserWithHttpInfo(Guid portalId, CreatePortalUserOptions createPortalUserOptions, int operationIndex = 0);
        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get all customers for a portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageGuestPortalUsers</returns>
        PageGuestPortalUsers GetAllGuestPortalUsers(Guid? portalId = default, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0);

        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get all customers for a portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageGuestPortalUsers</returns>
        ApiResponse<PageGuestPortalUsers> GetAllGuestPortalUsersWithHttpInfo(Guid? portalId = default, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0);
        /// <summary>
        /// Get a client email portal
        /// </summary>
        /// <remarks>
        /// Fetch a customer guest portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuestPortalDto</returns>
        GuestPortalDto GetGuestPortal(Guid portalId, int operationIndex = 0);

        /// <summary>
        /// Get a client email portal
        /// </summary>
        /// <remarks>
        /// Fetch a customer guest portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuestPortalDto</returns>
        ApiResponse<GuestPortalDto> GetGuestPortalWithHttpInfo(Guid portalId, int operationIndex = 0);
        /// <summary>
        /// Get guest user for portal
        /// </summary>
        /// <remarks>
        /// Get customer for portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuestPortalUserDto</returns>
        GuestPortalUserDto GetGuestPortalUser(Guid portalId, Guid guestId, int operationIndex = 0);

        /// <summary>
        /// Get guest user for portal
        /// </summary>
        /// <remarks>
        /// Get customer for portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuestPortalUserDto</returns>
        ApiResponse<GuestPortalUserDto> GetGuestPortalUserWithHttpInfo(Guid portalId, Guid guestId, int operationIndex = 0);
        /// <summary>
        /// Get guest user
        /// </summary>
        /// <remarks>
        /// Get customer by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuestPortalUserDto</returns>
        GuestPortalUserDto GetGuestPortalUserById(Guid guestId, int operationIndex = 0);

        /// <summary>
        /// Get guest user
        /// </summary>
        /// <remarks>
        /// Get customer by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuestPortalUserDto</returns>
        ApiResponse<GuestPortalUserDto> GetGuestPortalUserByIdWithHttpInfo(Guid guestId, int operationIndex = 0);
        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get customers for a portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageGuestPortalUsers</returns>
        PageGuestPortalUsers GetGuestPortalUsers(Guid portalId, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0);

        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get customers for a portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageGuestPortalUsers</returns>
        ApiResponse<PageGuestPortalUsers> GetGuestPortalUsersWithHttpInfo(Guid portalId, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0);
        /// <summary>
        /// Get guest portals
        /// </summary>
        /// <remarks>
        /// Get portals
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GuestPortalDto&gt;</returns>
        List<GuestPortalDto> GetGuestPortals(int operationIndex = 0);

        /// <summary>
        /// Get guest portals
        /// </summary>
        /// <remarks>
        /// Get portals
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GuestPortalDto&gt;</returns>
        ApiResponse<List<GuestPortalDto>> GetGuestPortalsWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGuestPortalControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails.
        /// </summary>
        /// <remarks>
        /// Create a guest login page for customers or clients to access assigned email addresses
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortalOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuestPortalDto</returns>
        System.Threading.Tasks.Task<GuestPortalDto> CreateGuestPortalAsync(CreatePortalOptions createPortalOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails.
        /// </summary>
        /// <remarks>
        /// Create a guest login page for customers or clients to access assigned email addresses
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortalOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuestPortalDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GuestPortalDto>> CreateGuestPortalWithHttpInfoAsync(CreatePortalOptions createPortalOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create a portal guest user
        /// </summary>
        /// <remarks>
        /// Add customer to portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuestPortalUserCreateDto</returns>
        System.Threading.Tasks.Task<GuestPortalUserCreateDto> CreateGuestPortalUserAsync(Guid portalId, CreatePortalUserOptions createPortalUserOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a portal guest user
        /// </summary>
        /// <remarks>
        /// Add customer to portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuestPortalUserCreateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GuestPortalUserCreateDto>> CreateGuestPortalUserWithHttpInfoAsync(Guid portalId, CreatePortalUserOptions createPortalUserOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get all customers for a portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageGuestPortalUsers</returns>
        System.Threading.Tasks.Task<PageGuestPortalUsers> GetAllGuestPortalUsersAsync(Guid? portalId = default, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get all customers for a portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageGuestPortalUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageGuestPortalUsers>> GetAllGuestPortalUsersWithHttpInfoAsync(Guid? portalId = default, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a client email portal
        /// </summary>
        /// <remarks>
        /// Fetch a customer guest portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuestPortalDto</returns>
        System.Threading.Tasks.Task<GuestPortalDto> GetGuestPortalAsync(Guid portalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a client email portal
        /// </summary>
        /// <remarks>
        /// Fetch a customer guest portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuestPortalDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GuestPortalDto>> GetGuestPortalWithHttpInfoAsync(Guid portalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get guest user for portal
        /// </summary>
        /// <remarks>
        /// Get customer for portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuestPortalUserDto</returns>
        System.Threading.Tasks.Task<GuestPortalUserDto> GetGuestPortalUserAsync(Guid portalId, Guid guestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get guest user for portal
        /// </summary>
        /// <remarks>
        /// Get customer for portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuestPortalUserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GuestPortalUserDto>> GetGuestPortalUserWithHttpInfoAsync(Guid portalId, Guid guestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get guest user
        /// </summary>
        /// <remarks>
        /// Get customer by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuestPortalUserDto</returns>
        System.Threading.Tasks.Task<GuestPortalUserDto> GetGuestPortalUserByIdAsync(Guid guestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get guest user
        /// </summary>
        /// <remarks>
        /// Get customer by ID
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuestPortalUserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GuestPortalUserDto>> GetGuestPortalUserByIdWithHttpInfoAsync(Guid guestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get customers for a portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageGuestPortalUsers</returns>
        System.Threading.Tasks.Task<PageGuestPortalUsers> GetGuestPortalUsersAsync(Guid portalId, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get customers for a portal
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageGuestPortalUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageGuestPortalUsers>> GetGuestPortalUsersWithHttpInfoAsync(Guid portalId, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get guest portals
        /// </summary>
        /// <remarks>
        /// Get portals
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GuestPortalDto&gt;</returns>
        System.Threading.Tasks.Task<List<GuestPortalDto>> GetGuestPortalsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get guest portals
        /// </summary>
        /// <remarks>
        /// Get portals
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GuestPortalDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GuestPortalDto>>> GetGuestPortalsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGuestPortalControllerApi : IGuestPortalControllerApiSync, IGuestPortalControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GuestPortalControllerApi : IGuestPortalControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GuestPortalControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GuestPortalControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuestPortalControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GuestPortalControllerApi(string basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuestPortalControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GuestPortalControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuestPortalControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GuestPortalControllerApi(mailslurp.Client.ISynchronousClient client, mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails. Create a guest login page for customers or clients to access assigned email addresses
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortalOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuestPortalDto</returns>
        public GuestPortalDto CreateGuestPortal(CreatePortalOptions createPortalOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<GuestPortalDto> localVarResponse = CreateGuestPortalWithHttpInfo(createPortalOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails. Create a guest login page for customers or clients to access assigned email addresses
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortalOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuestPortalDto</returns>
        public mailslurp.Client.ApiResponse<GuestPortalDto> CreateGuestPortalWithHttpInfo(CreatePortalOptions createPortalOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createPortalOptions' is set
            if (createPortalOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createPortalOptions' when calling GuestPortalControllerApi->CreateGuestPortal");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPortalOptions;

            localVarRequestOptions.Operation = "GuestPortalControllerApi.CreateGuestPortal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GuestPortalDto>("/guest-portal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGuestPortal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails. Create a guest login page for customers or clients to access assigned email addresses
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortalOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuestPortalDto</returns>
        public async System.Threading.Tasks.Task<GuestPortalDto> CreateGuestPortalAsync(CreatePortalOptions createPortalOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<GuestPortalDto> localVarResponse = await CreateGuestPortalWithHttpInfoAsync(createPortalOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails. Create a guest login page for customers or clients to access assigned email addresses
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortalOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuestPortalDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<GuestPortalDto>> CreateGuestPortalWithHttpInfoAsync(CreatePortalOptions createPortalOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createPortalOptions' is set
            if (createPortalOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createPortalOptions' when calling GuestPortalControllerApi->CreateGuestPortal");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPortalOptions;

            localVarRequestOptions.Operation = "GuestPortalControllerApi.CreateGuestPortal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GuestPortalDto>("/guest-portal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGuestPortal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a portal guest user Add customer to portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuestPortalUserCreateDto</returns>
        public GuestPortalUserCreateDto CreateGuestPortalUser(Guid portalId, CreatePortalUserOptions createPortalUserOptions, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<GuestPortalUserCreateDto> localVarResponse = CreateGuestPortalUserWithHttpInfo(portalId, createPortalUserOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portal guest user Add customer to portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuestPortalUserCreateDto</returns>
        public mailslurp.Client.ApiResponse<GuestPortalUserCreateDto> CreateGuestPortalUserWithHttpInfo(Guid portalId, CreatePortalUserOptions createPortalUserOptions, int operationIndex = 0)
        {
            // verify the required parameter 'createPortalUserOptions' is set
            if (createPortalUserOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createPortalUserOptions' when calling GuestPortalControllerApi->CreateGuestPortalUser");
            }

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portalId", mailslurp.Client.ClientUtils.ParameterToString(portalId)); // path parameter
            localVarRequestOptions.Data = createPortalUserOptions;

            localVarRequestOptions.Operation = "GuestPortalControllerApi.CreateGuestPortalUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GuestPortalUserCreateDto>("/guest-portal/{portalId}/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGuestPortalUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a portal guest user Add customer to portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuestPortalUserCreateDto</returns>
        public async System.Threading.Tasks.Task<GuestPortalUserCreateDto> CreateGuestPortalUserAsync(Guid portalId, CreatePortalUserOptions createPortalUserOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<GuestPortalUserCreateDto> localVarResponse = await CreateGuestPortalUserWithHttpInfoAsync(portalId, createPortalUserOptions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portal guest user Add customer to portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuestPortalUserCreateDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<GuestPortalUserCreateDto>> CreateGuestPortalUserWithHttpInfoAsync(Guid portalId, CreatePortalUserOptions createPortalUserOptions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createPortalUserOptions' is set
            if (createPortalUserOptions == null)
            {
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'createPortalUserOptions' when calling GuestPortalControllerApi->CreateGuestPortalUser");
            }


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portalId", mailslurp.Client.ClientUtils.ParameterToString(portalId)); // path parameter
            localVarRequestOptions.Data = createPortalUserOptions;

            localVarRequestOptions.Operation = "GuestPortalControllerApi.CreateGuestPortalUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GuestPortalUserCreateDto>("/guest-portal/{portalId}/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGuestPortalUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all guest users for portal Get all customers for a portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageGuestPortalUsers</returns>
        public PageGuestPortalUsers GetAllGuestPortalUsers(Guid? portalId = default, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageGuestPortalUsers> localVarResponse = GetAllGuestPortalUsersWithHttpInfo(portalId, search, page, size, sort, since, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all guest users for portal Get all customers for a portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageGuestPortalUsers</returns>
        public mailslurp.Client.ApiResponse<PageGuestPortalUsers> GetAllGuestPortalUsersWithHttpInfo(Guid? portalId = default, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (portalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "portalId", portalId));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetAllGuestPortalUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageGuestPortalUsers>("/guest-portal/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGuestPortalUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all guest users for portal Get all customers for a portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageGuestPortalUsers</returns>
        public async System.Threading.Tasks.Task<PageGuestPortalUsers> GetAllGuestPortalUsersAsync(Guid? portalId = default, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PageGuestPortalUsers> localVarResponse = await GetAllGuestPortalUsersWithHttpInfoAsync(portalId, search, page, size, sort, since, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all guest users for portal Get all customers for a portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageGuestPortalUsers)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageGuestPortalUsers>> GetAllGuestPortalUsersWithHttpInfoAsync(Guid? portalId = default, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (portalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "portalId", portalId));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetAllGuestPortalUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageGuestPortalUsers>("/guest-portal/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGuestPortalUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a client email portal Fetch a customer guest portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuestPortalDto</returns>
        public GuestPortalDto GetGuestPortal(Guid portalId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<GuestPortalDto> localVarResponse = GetGuestPortalWithHttpInfo(portalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a client email portal Fetch a customer guest portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuestPortalDto</returns>
        public mailslurp.Client.ApiResponse<GuestPortalDto> GetGuestPortalWithHttpInfo(Guid portalId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portalId", mailslurp.Client.ClientUtils.ParameterToString(portalId)); // path parameter

            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetGuestPortal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GuestPortalDto>("/guest-portal/{portalId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuestPortal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a client email portal Fetch a customer guest portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuestPortalDto</returns>
        public async System.Threading.Tasks.Task<GuestPortalDto> GetGuestPortalAsync(Guid portalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<GuestPortalDto> localVarResponse = await GetGuestPortalWithHttpInfoAsync(portalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a client email portal Fetch a customer guest portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuestPortalDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<GuestPortalDto>> GetGuestPortalWithHttpInfoAsync(Guid portalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portalId", mailslurp.Client.ClientUtils.ParameterToString(portalId)); // path parameter

            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetGuestPortal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GuestPortalDto>("/guest-portal/{portalId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuestPortal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guest user for portal Get customer for portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuestPortalUserDto</returns>
        public GuestPortalUserDto GetGuestPortalUser(Guid portalId, Guid guestId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<GuestPortalUserDto> localVarResponse = GetGuestPortalUserWithHttpInfo(portalId, guestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guest user for portal Get customer for portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuestPortalUserDto</returns>
        public mailslurp.Client.ApiResponse<GuestPortalUserDto> GetGuestPortalUserWithHttpInfo(Guid portalId, Guid guestId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portalId", mailslurp.Client.ClientUtils.ParameterToString(portalId)); // path parameter
            localVarRequestOptions.PathParameters.Add("guestId", mailslurp.Client.ClientUtils.ParameterToString(guestId)); // path parameter

            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetGuestPortalUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GuestPortalUserDto>("/guest-portal/{portalId}/user/{guestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuestPortalUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guest user for portal Get customer for portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuestPortalUserDto</returns>
        public async System.Threading.Tasks.Task<GuestPortalUserDto> GetGuestPortalUserAsync(Guid portalId, Guid guestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<GuestPortalUserDto> localVarResponse = await GetGuestPortalUserWithHttpInfoAsync(portalId, guestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guest user for portal Get customer for portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuestPortalUserDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<GuestPortalUserDto>> GetGuestPortalUserWithHttpInfoAsync(Guid portalId, Guid guestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portalId", mailslurp.Client.ClientUtils.ParameterToString(portalId)); // path parameter
            localVarRequestOptions.PathParameters.Add("guestId", mailslurp.Client.ClientUtils.ParameterToString(guestId)); // path parameter

            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetGuestPortalUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GuestPortalUserDto>("/guest-portal/{portalId}/user/{guestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuestPortalUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guest user Get customer by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuestPortalUserDto</returns>
        public GuestPortalUserDto GetGuestPortalUserById(Guid guestId, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<GuestPortalUserDto> localVarResponse = GetGuestPortalUserByIdWithHttpInfo(guestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guest user Get customer by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuestPortalUserDto</returns>
        public mailslurp.Client.ApiResponse<GuestPortalUserDto> GetGuestPortalUserByIdWithHttpInfo(Guid guestId, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guestId", mailslurp.Client.ClientUtils.ParameterToString(guestId)); // path parameter

            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetGuestPortalUserById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GuestPortalUserDto>("/guest-portal/user/{guestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuestPortalUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guest user Get customer by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuestPortalUserDto</returns>
        public async System.Threading.Tasks.Task<GuestPortalUserDto> GetGuestPortalUserByIdAsync(Guid guestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<GuestPortalUserDto> localVarResponse = await GetGuestPortalUserByIdWithHttpInfoAsync(guestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guest user Get customer by ID
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guestId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuestPortalUserDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<GuestPortalUserDto>> GetGuestPortalUserByIdWithHttpInfoAsync(Guid guestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guestId", mailslurp.Client.ClientUtils.ParameterToString(guestId)); // path parameter

            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetGuestPortalUserById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GuestPortalUserDto>("/guest-portal/user/{guestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuestPortalUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all guest users for portal Get customers for a portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PageGuestPortalUsers</returns>
        public PageGuestPortalUsers GetGuestPortalUsers(Guid portalId, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<PageGuestPortalUsers> localVarResponse = GetGuestPortalUsersWithHttpInfo(portalId, search, page, size, sort, since, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all guest users for portal Get customers for a portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PageGuestPortalUsers</returns>
        public mailslurp.Client.ApiResponse<PageGuestPortalUsers> GetGuestPortalUsersWithHttpInfo(Guid portalId, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portalId", mailslurp.Client.ClientUtils.ParameterToString(portalId)); // path parameter
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetGuestPortalUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PageGuestPortalUsers>("/guest-portal/{portalId}/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuestPortalUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all guest users for portal Get customers for a portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PageGuestPortalUsers</returns>
        public async System.Threading.Tasks.Task<PageGuestPortalUsers> GetGuestPortalUsersAsync(Guid portalId, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<PageGuestPortalUsers> localVarResponse = await GetGuestPortalUsersWithHttpInfoAsync(portalId, search, page, size, sort, since, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all guest users for portal Get customers for a portal
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PageGuestPortalUsers)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageGuestPortalUsers>> GetGuestPortalUsersWithHttpInfoAsync(Guid portalId, string search = default, int? page = default, int? size = default, string sort = default, DateTime? since = default, DateTime? before = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("portalId", mailslurp.Client.ClientUtils.ParameterToString(portalId)); // path parameter
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetGuestPortalUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PageGuestPortalUsers>("/guest-portal/{portalId}/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuestPortalUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guest portals Get portals
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GuestPortalDto&gt;</returns>
        public List<GuestPortalDto> GetGuestPortals(int operationIndex = 0)
        {
            mailslurp.Client.ApiResponse<List<GuestPortalDto>> localVarResponse = GetGuestPortalsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guest portals Get portals
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GuestPortalDto&gt;</returns>
        public mailslurp.Client.ApiResponse<List<GuestPortalDto>> GetGuestPortalsWithHttpInfo(int operationIndex = 0)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetGuestPortals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GuestPortalDto>>("/guest-portal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuestPortals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guest portals Get portals
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GuestPortalDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<GuestPortalDto>> GetGuestPortalsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            mailslurp.Client.ApiResponse<List<GuestPortalDto>> localVarResponse = await GetGuestPortalsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guest portals Get portals
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GuestPortalDto&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<GuestPortalDto>>> GetGuestPortalsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GuestPortalControllerApi.GetGuestPortals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (API_KEY) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GuestPortalDto>>("/guest-portal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuestPortals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
