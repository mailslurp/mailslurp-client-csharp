// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IGuestPortalControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        GuestPortalControllerApiEvents Events { get; }

        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails.
        /// </summary>
        /// <remarks>
        /// Create a guest login page for customers or clients to access assigned email addresses
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortalOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestPortalApiResponse"/>&gt;</returns>
        Task<ICreateGuestPortalApiResponse> CreateGuestPortalAsync(CreatePortalOptions createPortalOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails.
        /// </summary>
        /// <remarks>
        /// Create a guest login page for customers or clients to access assigned email addresses
        /// </remarks>
        /// <param name="createPortalOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestPortalApiResponse"/>&gt;</returns>
        Task<ICreateGuestPortalApiResponse> CreateGuestPortalOrDefaultAsync(CreatePortalOptions createPortalOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a portal guest user
        /// </summary>
        /// <remarks>
        /// Add customer to portal
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestPortalUserApiResponse"/>&gt;</returns>
        Task<ICreateGuestPortalUserApiResponse> CreateGuestPortalUserAsync(Guid portalId, CreatePortalUserOptions createPortalUserOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a portal guest user
        /// </summary>
        /// <remarks>
        /// Add customer to portal
        /// </remarks>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestPortalUserApiResponse"/>&gt;</returns>
        Task<ICreateGuestPortalUserApiResponse> CreateGuestPortalUserOrDefaultAsync(Guid portalId, CreatePortalUserOptions createPortalUserOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get all customers for a portal
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllGuestPortalUsersApiResponse"/>&gt;</returns>
        Task<IGetAllGuestPortalUsersApiResponse> GetAllGuestPortalUsersAsync(Option<Guid> portalId = default, Option<string> search = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get all customers for a portal
        /// </remarks>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllGuestPortalUsersApiResponse"/>&gt;</returns>
        Task<IGetAllGuestPortalUsersApiResponse> GetAllGuestPortalUsersOrDefaultAsync(Option<Guid> portalId = default, Option<string> search = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a client email portal
        /// </summary>
        /// <remarks>
        /// Fetch a customer guest portal
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalApiResponse"/>&gt;</returns>
        Task<IGetGuestPortalApiResponse> GetGuestPortalAsync(Guid portalId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a client email portal
        /// </summary>
        /// <remarks>
        /// Fetch a customer guest portal
        /// </remarks>
        /// <param name="portalId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalApiResponse"/>&gt;</returns>
        Task<IGetGuestPortalApiResponse> GetGuestPortalOrDefaultAsync(Guid portalId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get guest user for portal
        /// </summary>
        /// <remarks>
        /// Get customer for portal
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUserApiResponse"/>&gt;</returns>
        Task<IGetGuestPortalUserApiResponse> GetGuestPortalUserAsync(Guid portalId, Guid guestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get guest user for portal
        /// </summary>
        /// <remarks>
        /// Get customer for portal
        /// </remarks>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUserApiResponse"/>&gt;</returns>
        Task<IGetGuestPortalUserApiResponse> GetGuestPortalUserOrDefaultAsync(Guid portalId, Guid guestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get guest user
        /// </summary>
        /// <remarks>
        /// Get customer by ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="guestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUserByIdApiResponse"/>&gt;</returns>
        Task<IGetGuestPortalUserByIdApiResponse> GetGuestPortalUserByIdAsync(Guid guestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get guest user
        /// </summary>
        /// <remarks>
        /// Get customer by ID
        /// </remarks>
        /// <param name="guestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUserByIdApiResponse"/>&gt;</returns>
        Task<IGetGuestPortalUserByIdApiResponse> GetGuestPortalUserByIdOrDefaultAsync(Guid guestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get customers for a portal
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUsersApiResponse"/>&gt;</returns>
        Task<IGetGuestPortalUsersApiResponse> GetGuestPortalUsersAsync(Guid portalId, Option<string> search = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all guest users for portal
        /// </summary>
        /// <remarks>
        /// Get customers for a portal
        /// </remarks>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUsersApiResponse"/>&gt;</returns>
        Task<IGetGuestPortalUsersApiResponse> GetGuestPortalUsersOrDefaultAsync(Guid portalId, Option<string> search = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get guest portals
        /// </summary>
        /// <remarks>
        /// Get portals
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalsApiResponse"/>&gt;</returns>
        Task<IGetGuestPortalsApiResponse> GetGuestPortalsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get guest portals
        /// </summary>
        /// <remarks>
        /// Get portals
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalsApiResponse"/>&gt;</returns>
        Task<IGetGuestPortalsApiResponse> GetGuestPortalsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateGuestPortalApiResponse"/>
    /// </summary>
    public interface ICreateGuestPortalApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.GuestPortalDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICreateGuestPortalUserApiResponse"/>
    /// </summary>
    public interface ICreateGuestPortalUserApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.GuestPortalUserCreateDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllGuestPortalUsersApiResponse"/>
    /// </summary>
    public interface IGetAllGuestPortalUsersApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageGuestPortalUsers>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGuestPortalApiResponse"/>
    /// </summary>
    public interface IGetGuestPortalApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.GuestPortalDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGuestPortalUserApiResponse"/>
    /// </summary>
    public interface IGetGuestPortalUserApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.GuestPortalUserDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGuestPortalUserByIdApiResponse"/>
    /// </summary>
    public interface IGetGuestPortalUserByIdApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.GuestPortalUserDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGuestPortalUsersApiResponse"/>
    /// </summary>
    public interface IGetGuestPortalUsersApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageGuestPortalUsers>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGuestPortalsApiResponse"/>
    /// </summary>
    public interface IGetGuestPortalsApiResponse : mailslurp.Client.IApiResponse, IOk<List<GuestPortalDto>>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GuestPortalControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateGuestPortal;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateGuestPortal;

        internal void ExecuteOnCreateGuestPortal(GuestPortalControllerApi.CreateGuestPortalApiResponse apiResponse)
        {
            OnCreateGuestPortal?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateGuestPortal(Exception exception)
        {
            OnErrorCreateGuestPortal?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateGuestPortalUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateGuestPortalUser;

        internal void ExecuteOnCreateGuestPortalUser(GuestPortalControllerApi.CreateGuestPortalUserApiResponse apiResponse)
        {
            OnCreateGuestPortalUser?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateGuestPortalUser(Exception exception)
        {
            OnErrorCreateGuestPortalUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllGuestPortalUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllGuestPortalUsers;

        internal void ExecuteOnGetAllGuestPortalUsers(GuestPortalControllerApi.GetAllGuestPortalUsersApiResponse apiResponse)
        {
            OnGetAllGuestPortalUsers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllGuestPortalUsers(Exception exception)
        {
            OnErrorGetAllGuestPortalUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetGuestPortal;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetGuestPortal;

        internal void ExecuteOnGetGuestPortal(GuestPortalControllerApi.GetGuestPortalApiResponse apiResponse)
        {
            OnGetGuestPortal?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGuestPortal(Exception exception)
        {
            OnErrorGetGuestPortal?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetGuestPortalUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetGuestPortalUser;

        internal void ExecuteOnGetGuestPortalUser(GuestPortalControllerApi.GetGuestPortalUserApiResponse apiResponse)
        {
            OnGetGuestPortalUser?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGuestPortalUser(Exception exception)
        {
            OnErrorGetGuestPortalUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetGuestPortalUserById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetGuestPortalUserById;

        internal void ExecuteOnGetGuestPortalUserById(GuestPortalControllerApi.GetGuestPortalUserByIdApiResponse apiResponse)
        {
            OnGetGuestPortalUserById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGuestPortalUserById(Exception exception)
        {
            OnErrorGetGuestPortalUserById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetGuestPortalUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetGuestPortalUsers;

        internal void ExecuteOnGetGuestPortalUsers(GuestPortalControllerApi.GetGuestPortalUsersApiResponse apiResponse)
        {
            OnGetGuestPortalUsers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGuestPortalUsers(Exception exception)
        {
            OnErrorGetGuestPortalUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetGuestPortals;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetGuestPortals;

        internal void ExecuteOnGetGuestPortals(GuestPortalControllerApi.GetGuestPortalsApiResponse apiResponse)
        {
            OnGetGuestPortals?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGuestPortals(Exception exception)
        {
            OnErrorGetGuestPortals?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class GuestPortalControllerApi : IGuestPortalControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<GuestPortalControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public GuestPortalControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuestPortalControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GuestPortalControllerApi(ILogger<GuestPortalControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, GuestPortalControllerApiEvents guestPortalControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<GuestPortalControllerApi>();
            HttpClient = httpClient;
            Events = guestPortalControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateGuestPortal(CreatePortalOptions createPortalOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createPortalOptions"></param>
        /// <returns></returns>
        private void ValidateCreateGuestPortal(CreatePortalOptions createPortalOptions)
        {
            if (createPortalOptions == null)
                throw new ArgumentNullException(nameof(createPortalOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createPortalOptions"></param>
        private void AfterCreateGuestPortalDefaultImplementation(ICreateGuestPortalApiResponse apiResponseLocalVar, CreatePortalOptions createPortalOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateGuestPortal(ref suppressDefaultLog, apiResponseLocalVar, createPortalOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createPortalOptions"></param>
        partial void AfterCreateGuestPortal(ref bool suppressDefaultLog, ICreateGuestPortalApiResponse apiResponseLocalVar, CreatePortalOptions createPortalOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createPortalOptions"></param>
        private void OnErrorCreateGuestPortalDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreatePortalOptions createPortalOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateGuestPortal(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createPortalOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createPortalOptions"></param>
        partial void OnErrorCreateGuestPortal(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreatePortalOptions createPortalOptions);

        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails. Create a guest login page for customers or clients to access assigned email addresses
        /// </summary>
        /// <param name="createPortalOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestPortalApiResponse"/>&gt;</returns>
        public async Task<ICreateGuestPortalApiResponse> CreateGuestPortalOrDefaultAsync(CreatePortalOptions createPortalOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateGuestPortalAsync(createPortalOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a portal page for your customers or clients to log into email accounts and view emails. Create a guest login page for customers or clients to access assigned email addresses
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPortalOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestPortalApiResponse"/>&gt;</returns>
        public async Task<ICreateGuestPortalApiResponse> CreateGuestPortalAsync(CreatePortalOptions createPortalOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateGuestPortal(createPortalOptions);

                FormatCreateGuestPortal(createPortalOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest-portal"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest-portal");

                    httpRequestMessageLocalVar.Content = (createPortalOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createPortalOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateGuestPortalApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateGuestPortalApiResponse>();

                        CreateGuestPortalApiResponse apiResponseLocalVar = new CreateGuestPortalApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest-portal", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateGuestPortalDefaultImplementation(apiResponseLocalVar, createPortalOptions);

                        Events.ExecuteOnCreateGuestPortal(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateGuestPortalDefaultImplementation(e, "/guest-portal", uriBuilderLocalVar.Path, createPortalOptions);
                Events.ExecuteOnErrorCreateGuestPortal(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateGuestPortalApiResponse"/>
        /// </summary>
        public partial class CreateGuestPortalApiResponse : mailslurp.Client.ApiResponse, ICreateGuestPortalApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateGuestPortalApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateGuestPortalApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateGuestPortalApiResponse(ILogger<CreateGuestPortalApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.GuestPortalDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.GuestPortalDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.GuestPortalDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateGuestPortalUser(ref Guid portalId, CreatePortalUserOptions createPortalUserOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createPortalUserOptions"></param>
        /// <returns></returns>
        private void ValidateCreateGuestPortalUser(CreatePortalUserOptions createPortalUserOptions)
        {
            if (createPortalUserOptions == null)
                throw new ArgumentNullException(nameof(createPortalUserOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        private void AfterCreateGuestPortalUserDefaultImplementation(ICreateGuestPortalUserApiResponse apiResponseLocalVar, Guid portalId, CreatePortalUserOptions createPortalUserOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateGuestPortalUser(ref suppressDefaultLog, apiResponseLocalVar, portalId, createPortalUserOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        partial void AfterCreateGuestPortalUser(ref bool suppressDefaultLog, ICreateGuestPortalUserApiResponse apiResponseLocalVar, Guid portalId, CreatePortalUserOptions createPortalUserOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        private void OnErrorCreateGuestPortalUserDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid portalId, CreatePortalUserOptions createPortalUserOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateGuestPortalUser(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, portalId, createPortalUserOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        partial void OnErrorCreateGuestPortalUser(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid portalId, CreatePortalUserOptions createPortalUserOptions);

        /// <summary>
        /// Create a portal guest user Add customer to portal
        /// </summary>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestPortalUserApiResponse"/>&gt;</returns>
        public async Task<ICreateGuestPortalUserApiResponse> CreateGuestPortalUserOrDefaultAsync(Guid portalId, CreatePortalUserOptions createPortalUserOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateGuestPortalUserAsync(portalId, createPortalUserOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a portal guest user Add customer to portal
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="createPortalUserOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestPortalUserApiResponse"/>&gt;</returns>
        public async Task<ICreateGuestPortalUserApiResponse> CreateGuestPortalUserAsync(Guid portalId, CreatePortalUserOptions createPortalUserOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateGuestPortalUser(createPortalUserOptions);

                FormatCreateGuestPortalUser(ref portalId, createPortalUserOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest-portal/{portalId}/user"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest-portal/{portalId}/user");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BportalId%7D", Uri.EscapeDataString(portalId.ToString()));

                    httpRequestMessageLocalVar.Content = (createPortalUserOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createPortalUserOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateGuestPortalUserApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateGuestPortalUserApiResponse>();

                        CreateGuestPortalUserApiResponse apiResponseLocalVar = new CreateGuestPortalUserApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest-portal/{portalId}/user", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateGuestPortalUserDefaultImplementation(apiResponseLocalVar, portalId, createPortalUserOptions);

                        Events.ExecuteOnCreateGuestPortalUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateGuestPortalUserDefaultImplementation(e, "/guest-portal/{portalId}/user", uriBuilderLocalVar.Path, portalId, createPortalUserOptions);
                Events.ExecuteOnErrorCreateGuestPortalUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateGuestPortalUserApiResponse"/>
        /// </summary>
        public partial class CreateGuestPortalUserApiResponse : mailslurp.Client.ApiResponse, ICreateGuestPortalUserApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateGuestPortalUserApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateGuestPortalUserApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateGuestPortalUserApiResponse(ILogger<CreateGuestPortalUserApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.GuestPortalUserCreateDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.GuestPortalUserCreateDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.GuestPortalUserCreateDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllGuestPortalUsers(ref Option<Guid> portalId, ref Option<string> search, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="search"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetAllGuestPortalUsers(Option<string> search, Option<string> sort)
        {
            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void AfterGetAllGuestPortalUsersDefaultImplementation(IGetAllGuestPortalUsersApiResponse apiResponseLocalVar, Option<Guid> portalId, Option<string> search, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLog = false;
            AfterGetAllGuestPortalUsers(ref suppressDefaultLog, apiResponseLocalVar, portalId, search, page, size, sort, since, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void AfterGetAllGuestPortalUsers(ref bool suppressDefaultLog, IGetAllGuestPortalUsersApiResponse apiResponseLocalVar, Option<Guid> portalId, Option<string> search, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void OnErrorGetAllGuestPortalUsersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> portalId, Option<string> search, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllGuestPortalUsers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, portalId, search, page, size, sort, since, before);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void OnErrorGetAllGuestPortalUsers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> portalId, Option<string> search, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Get all guest users for portal Get all customers for a portal
        /// </summary>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllGuestPortalUsersApiResponse"/>&gt;</returns>
        public async Task<IGetAllGuestPortalUsersApiResponse> GetAllGuestPortalUsersOrDefaultAsync(Option<Guid> portalId = default, Option<string> search = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllGuestPortalUsersAsync(portalId, search, page, size, sort, since, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all guest users for portal Get all customers for a portal
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId">Optional portal ID (optional)</param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllGuestPortalUsersApiResponse"/>&gt;</returns>
        public async Task<IGetAllGuestPortalUsersApiResponse> GetAllGuestPortalUsersAsync(Option<Guid> portalId = default, Option<string> search = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllGuestPortalUsers(search, sort);

                FormatGetAllGuestPortalUsers(ref portalId, ref search, ref page, ref size, ref sort, ref since, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest-portal/user"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest-portal/user");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (portalId.IsSet)
                        parseQueryStringLocalVar["portalId"] = ClientUtils.ParameterToString(portalId.Value);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllGuestPortalUsersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllGuestPortalUsersApiResponse>();

                        GetAllGuestPortalUsersApiResponse apiResponseLocalVar = new GetAllGuestPortalUsersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest-portal/user", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllGuestPortalUsersDefaultImplementation(apiResponseLocalVar, portalId, search, page, size, sort, since, before);

                        Events.ExecuteOnGetAllGuestPortalUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllGuestPortalUsersDefaultImplementation(e, "/guest-portal/user", uriBuilderLocalVar.Path, portalId, search, page, size, sort, since, before);
                Events.ExecuteOnErrorGetAllGuestPortalUsers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllGuestPortalUsersApiResponse"/>
        /// </summary>
        public partial class GetAllGuestPortalUsersApiResponse : mailslurp.Client.ApiResponse, IGetAllGuestPortalUsersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllGuestPortalUsersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllGuestPortalUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllGuestPortalUsersApiResponse(ILogger<GetAllGuestPortalUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageGuestPortalUsers Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageGuestPortalUsers>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageGuestPortalUsers result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGuestPortal(ref Guid portalId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="portalId"></param>
        private void AfterGetGuestPortalDefaultImplementation(IGetGuestPortalApiResponse apiResponseLocalVar, Guid portalId)
        {
            bool suppressDefaultLog = false;
            AfterGetGuestPortal(ref suppressDefaultLog, apiResponseLocalVar, portalId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="portalId"></param>
        partial void AfterGetGuestPortal(ref bool suppressDefaultLog, IGetGuestPortalApiResponse apiResponseLocalVar, Guid portalId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="portalId"></param>
        private void OnErrorGetGuestPortalDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid portalId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGuestPortal(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, portalId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="portalId"></param>
        partial void OnErrorGetGuestPortal(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid portalId);

        /// <summary>
        /// Get a client email portal Fetch a customer guest portal
        /// </summary>
        /// <param name="portalId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalApiResponse"/>&gt;</returns>
        public async Task<IGetGuestPortalApiResponse> GetGuestPortalOrDefaultAsync(Guid portalId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGuestPortalAsync(portalId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a client email portal Fetch a customer guest portal
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalApiResponse"/>&gt;</returns>
        public async Task<IGetGuestPortalApiResponse> GetGuestPortalAsync(Guid portalId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetGuestPortal(ref portalId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest-portal/{portalId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest-portal/{portalId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BportalId%7D", Uri.EscapeDataString(portalId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetGuestPortalApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGuestPortalApiResponse>();

                        GetGuestPortalApiResponse apiResponseLocalVar = new GetGuestPortalApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest-portal/{portalId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGuestPortalDefaultImplementation(apiResponseLocalVar, portalId);

                        Events.ExecuteOnGetGuestPortal(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGuestPortalDefaultImplementation(e, "/guest-portal/{portalId}", uriBuilderLocalVar.Path, portalId);
                Events.ExecuteOnErrorGetGuestPortal(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGuestPortalApiResponse"/>
        /// </summary>
        public partial class GetGuestPortalApiResponse : mailslurp.Client.ApiResponse, IGetGuestPortalApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGuestPortalApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGuestPortalApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGuestPortalApiResponse(ILogger<GetGuestPortalApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.GuestPortalDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.GuestPortalDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.GuestPortalDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGuestPortalUser(ref Guid portalId, ref Guid guestId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        private void AfterGetGuestPortalUserDefaultImplementation(IGetGuestPortalUserApiResponse apiResponseLocalVar, Guid portalId, Guid guestId)
        {
            bool suppressDefaultLog = false;
            AfterGetGuestPortalUser(ref suppressDefaultLog, apiResponseLocalVar, portalId, guestId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        partial void AfterGetGuestPortalUser(ref bool suppressDefaultLog, IGetGuestPortalUserApiResponse apiResponseLocalVar, Guid portalId, Guid guestId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        private void OnErrorGetGuestPortalUserDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid portalId, Guid guestId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGuestPortalUser(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, portalId, guestId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        partial void OnErrorGetGuestPortalUser(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid portalId, Guid guestId);

        /// <summary>
        /// Get guest user for portal Get customer for portal
        /// </summary>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUserApiResponse"/>&gt;</returns>
        public async Task<IGetGuestPortalUserApiResponse> GetGuestPortalUserOrDefaultAsync(Guid portalId, Guid guestId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGuestPortalUserAsync(portalId, guestId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get guest user for portal Get customer for portal
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="guestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUserApiResponse"/>&gt;</returns>
        public async Task<IGetGuestPortalUserApiResponse> GetGuestPortalUserAsync(Guid portalId, Guid guestId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetGuestPortalUser(ref portalId, ref guestId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest-portal/{portalId}/user/{guestId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest-portal/{portalId}/user/{guestId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BportalId%7D", Uri.EscapeDataString(portalId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BguestId%7D", Uri.EscapeDataString(guestId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetGuestPortalUserApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGuestPortalUserApiResponse>();

                        GetGuestPortalUserApiResponse apiResponseLocalVar = new GetGuestPortalUserApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest-portal/{portalId}/user/{guestId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGuestPortalUserDefaultImplementation(apiResponseLocalVar, portalId, guestId);

                        Events.ExecuteOnGetGuestPortalUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGuestPortalUserDefaultImplementation(e, "/guest-portal/{portalId}/user/{guestId}", uriBuilderLocalVar.Path, portalId, guestId);
                Events.ExecuteOnErrorGetGuestPortalUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGuestPortalUserApiResponse"/>
        /// </summary>
        public partial class GetGuestPortalUserApiResponse : mailslurp.Client.ApiResponse, IGetGuestPortalUserApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGuestPortalUserApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGuestPortalUserApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGuestPortalUserApiResponse(ILogger<GetGuestPortalUserApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.GuestPortalUserDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.GuestPortalUserDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.GuestPortalUserDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGuestPortalUserById(ref Guid guestId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="guestId"></param>
        private void AfterGetGuestPortalUserByIdDefaultImplementation(IGetGuestPortalUserByIdApiResponse apiResponseLocalVar, Guid guestId)
        {
            bool suppressDefaultLog = false;
            AfterGetGuestPortalUserById(ref suppressDefaultLog, apiResponseLocalVar, guestId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="guestId"></param>
        partial void AfterGetGuestPortalUserById(ref bool suppressDefaultLog, IGetGuestPortalUserByIdApiResponse apiResponseLocalVar, Guid guestId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="guestId"></param>
        private void OnErrorGetGuestPortalUserByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid guestId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGuestPortalUserById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, guestId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="guestId"></param>
        partial void OnErrorGetGuestPortalUserById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid guestId);

        /// <summary>
        /// Get guest user Get customer by ID
        /// </summary>
        /// <param name="guestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUserByIdApiResponse"/>&gt;</returns>
        public async Task<IGetGuestPortalUserByIdApiResponse> GetGuestPortalUserByIdOrDefaultAsync(Guid guestId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGuestPortalUserByIdAsync(guestId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get guest user Get customer by ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="guestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUserByIdApiResponse"/>&gt;</returns>
        public async Task<IGetGuestPortalUserByIdApiResponse> GetGuestPortalUserByIdAsync(Guid guestId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetGuestPortalUserById(ref guestId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest-portal/user/{guestId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest-portal/user/{guestId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BguestId%7D", Uri.EscapeDataString(guestId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetGuestPortalUserByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGuestPortalUserByIdApiResponse>();

                        GetGuestPortalUserByIdApiResponse apiResponseLocalVar = new GetGuestPortalUserByIdApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest-portal/user/{guestId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGuestPortalUserByIdDefaultImplementation(apiResponseLocalVar, guestId);

                        Events.ExecuteOnGetGuestPortalUserById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGuestPortalUserByIdDefaultImplementation(e, "/guest-portal/user/{guestId}", uriBuilderLocalVar.Path, guestId);
                Events.ExecuteOnErrorGetGuestPortalUserById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGuestPortalUserByIdApiResponse"/>
        /// </summary>
        public partial class GetGuestPortalUserByIdApiResponse : mailslurp.Client.ApiResponse, IGetGuestPortalUserByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGuestPortalUserByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGuestPortalUserByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGuestPortalUserByIdApiResponse(ILogger<GetGuestPortalUserByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.GuestPortalUserDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.GuestPortalUserDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.GuestPortalUserDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGuestPortalUsers(ref Guid portalId, ref Option<string> search, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="search"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetGuestPortalUsers(Option<string> search, Option<string> sort)
        {
            if (search.IsSet && search.Value == null)
                throw new ArgumentNullException(nameof(search));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void AfterGetGuestPortalUsersDefaultImplementation(IGetGuestPortalUsersApiResponse apiResponseLocalVar, Guid portalId, Option<string> search, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLog = false;
            AfterGetGuestPortalUsers(ref suppressDefaultLog, apiResponseLocalVar, portalId, search, page, size, sort, since, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void AfterGetGuestPortalUsers(ref bool suppressDefaultLog, IGetGuestPortalUsersApiResponse apiResponseLocalVar, Guid portalId, Option<string> search, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        private void OnErrorGetGuestPortalUsersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid portalId, Option<string> search, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGuestPortalUsers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, portalId, search, page, size, sort, since, before);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="portalId"></param>
        /// <param name="search"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        partial void OnErrorGetGuestPortalUsers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid portalId, Option<string> search, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before);

        /// <summary>
        /// Get all guest users for portal Get customers for a portal
        /// </summary>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUsersApiResponse"/>&gt;</returns>
        public async Task<IGetGuestPortalUsersApiResponse> GetGuestPortalUsersOrDefaultAsync(Guid portalId, Option<string> search = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGuestPortalUsersAsync(portalId, search, page, size, sort, since, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all guest users for portal Get customers for a portal
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portalId"></param>
        /// <param name="search">Optional search term (optional)</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalUsersApiResponse"/>&gt;</returns>
        public async Task<IGetGuestPortalUsersApiResponse> GetGuestPortalUsersAsync(Guid portalId, Option<string> search = default, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGuestPortalUsers(search, sort);

                FormatGetGuestPortalUsers(ref portalId, ref search, ref page, ref size, ref sort, ref since, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest-portal/{portalId}/user"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest-portal/{portalId}/user");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BportalId%7D", Uri.EscapeDataString(portalId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (search.IsSet)
                        parseQueryStringLocalVar["search"] = ClientUtils.ParameterToString(search.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetGuestPortalUsersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGuestPortalUsersApiResponse>();

                        GetGuestPortalUsersApiResponse apiResponseLocalVar = new GetGuestPortalUsersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest-portal/{portalId}/user", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGuestPortalUsersDefaultImplementation(apiResponseLocalVar, portalId, search, page, size, sort, since, before);

                        Events.ExecuteOnGetGuestPortalUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGuestPortalUsersDefaultImplementation(e, "/guest-portal/{portalId}/user", uriBuilderLocalVar.Path, portalId, search, page, size, sort, since, before);
                Events.ExecuteOnErrorGetGuestPortalUsers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGuestPortalUsersApiResponse"/>
        /// </summary>
        public partial class GetGuestPortalUsersApiResponse : mailslurp.Client.ApiResponse, IGetGuestPortalUsersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGuestPortalUsersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGuestPortalUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGuestPortalUsersApiResponse(ILogger<GetGuestPortalUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageGuestPortalUsers Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageGuestPortalUsers>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageGuestPortalUsers result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetGuestPortalsDefaultImplementation(IGetGuestPortalsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetGuestPortals(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetGuestPortals(ref bool suppressDefaultLog, IGetGuestPortalsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetGuestPortalsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGuestPortals(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetGuestPortals(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get guest portals Get portals
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalsApiResponse"/>&gt;</returns>
        public async Task<IGetGuestPortalsApiResponse> GetGuestPortalsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGuestPortalsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get guest portals Get portals
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestPortalsApiResponse"/>&gt;</returns>
        public async Task<IGetGuestPortalsApiResponse> GetGuestPortalsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest-portal"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest-portal");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetGuestPortalsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGuestPortalsApiResponse>();

                        GetGuestPortalsApiResponse apiResponseLocalVar = new GetGuestPortalsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest-portal", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGuestPortalsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetGuestPortals(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGuestPortalsDefaultImplementation(e, "/guest-portal", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetGuestPortals(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGuestPortalsApiResponse"/>
        /// </summary>
        public partial class GetGuestPortalsApiResponse : mailslurp.Client.ApiResponse, IGetGuestPortalsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGuestPortalsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGuestPortalsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGuestPortalsApiResponse(ILogger<GetGuestPortalsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<GuestPortalDto> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<GuestPortalDto>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<GuestPortalDto> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
