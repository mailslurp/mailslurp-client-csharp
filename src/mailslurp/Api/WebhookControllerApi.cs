// <auto-generated>
/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IWebhookControllerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        WebhookControllerApiEvents Events { get; }

        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified of account level events such as bounce and bounce recipient.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAccountWebhookApiResponse"/>&gt;</returns>
        Task<ICreateAccountWebhookApiResponse> CreateAccountWebhookAsync(CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified of account level events such as bounce and bounce recipient.
        /// </remarks>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAccountWebhookApiResponse"/>&gt;</returns>
        Task<ICreateAccountWebhookApiResponse> CreateAccountWebhookOrDefaultAsync(CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhookApiResponse"/>&gt;</returns>
        Task<ICreateWebhookApiResponse> CreateWebhookAsync(Guid inboxId, CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </remarks>
        /// <param name="inboxId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhookApiResponse"/>&gt;</returns>
        Task<ICreateWebhookApiResponse> CreateWebhookOrDefaultAsync(Guid inboxId, CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Attach a WebHook URL to a phone number
        /// </summary>
        /// <remarks>
        /// Get notified whenever a phone number receives an SMS via a WebHook URL.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhookForPhoneNumberApiResponse"/>&gt;</returns>
        Task<ICreateWebhookForPhoneNumberApiResponse> CreateWebhookForPhoneNumberAsync(Guid phoneNumberId, CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Attach a WebHook URL to a phone number
        /// </summary>
        /// <remarks>
        /// Get notified whenever a phone number receives an SMS via a WebHook URL.
        /// </remarks>
        /// <param name="phoneNumberId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhookForPhoneNumberApiResponse"/>&gt;</returns>
        Task<ICreateWebhookForPhoneNumberApiResponse> CreateWebhookForPhoneNumberOrDefaultAsync(Guid phoneNumberId, CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">before (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllWebhooksApiResponse"/>&gt;</returns>
        Task<IDeleteAllWebhooksApiResponse> DeleteAllWebhooksAsync(Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="before">before (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllWebhooksApiResponse"/>&gt;</returns>
        Task<IDeleteAllWebhooksApiResponse> DeleteAllWebhooksOrDefaultAsync(Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete and disable a Webhook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhookApiResponse"/>&gt;</returns>
        Task<IDeleteWebhookApiResponse> DeleteWebhookAsync(Guid inboxId, Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete and disable a Webhook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="inboxId"></param>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhookApiResponse"/>&gt;</returns>
        Task<IDeleteWebhookApiResponse> DeleteWebhookOrDefaultAsync(Guid inboxId, Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhookByIdApiResponse"/>&gt;</returns>
        Task<IDeleteWebhookByIdApiResponse> DeleteWebhookByIdAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhookByIdApiResponse"/>&gt;</returns>
        Task<IDeleteWebhookByIdApiResponse> DeleteWebhookByIdOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List account webhooks Paginated
        /// </summary>
        /// <remarks>
        /// List account webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAccountWebhooksApiResponse"/>&gt;</returns>
        Task<IGetAllAccountWebhooksApiResponse> GetAllAccountWebhooksAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, Option<string> health = default, Option<string> searchFilter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List account webhooks Paginated
        /// </summary>
        /// <remarks>
        /// List account webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </remarks>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAccountWebhooksApiResponse"/>&gt;</returns>
        Task<IGetAllAccountWebhooksApiResponse> GetAllAccountWebhooksOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, Option<string> health = default, Option<string> searchFilter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Webhooks endpoints Paginated
        /// </summary>
        /// <remarks>
        /// List webhooks URL in paginated form. Allows for page index, page size, and sort direction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="inboxId">Filter by inboxId (optional)</param>
        /// <param name="phoneId">Filter by phoneId (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhookEndpointsApiResponse"/>&gt;</returns>
        Task<IGetAllWebhookEndpointsApiResponse> GetAllWebhookEndpointsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Webhooks endpoints Paginated
        /// </summary>
        /// <remarks>
        /// List webhooks URL in paginated form. Allows for page index, page size, and sort direction.
        /// </remarks>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="inboxId">Filter by inboxId (optional)</param>
        /// <param name="phoneId">Filter by phoneId (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhookEndpointsApiResponse"/>&gt;</returns>
        Task<IGetAllWebhookEndpointsApiResponse> GetAllWebhookEndpointsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get results for all webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="unseenOnly">Filter for unseen exceptions only (optional)</param>
        /// <param name="resultType">Filter by result type (optional)</param>
        /// <param name="eventName">Filter by event name (optional)</param>
        /// <param name="minStatusCode">Minimum response status (optional)</param>
        /// <param name="maxStatusCode">Maximum response status (optional)</param>
        /// <param name="inboxId">Inbox ID (optional)</param>
        /// <param name="smsId">Sms ID (optional)</param>
        /// <param name="attachmentId">Attachment ID (optional)</param>
        /// <param name="emailId">Email ID (optional)</param>
        /// <param name="phoneId">Phone ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhookResultsApiResponse"/>&gt;</returns>
        Task<IGetAllWebhookResultsApiResponse> GetAllWebhookResultsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<bool> unseenOnly = default, Option<string> resultType = default, Option<string> eventName = default, Option<int> minStatusCode = default, Option<int> maxStatusCode = default, Option<Guid> inboxId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get results for all webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="unseenOnly">Filter for unseen exceptions only (optional)</param>
        /// <param name="resultType">Filter by result type (optional)</param>
        /// <param name="eventName">Filter by event name (optional)</param>
        /// <param name="minStatusCode">Minimum response status (optional)</param>
        /// <param name="maxStatusCode">Maximum response status (optional)</param>
        /// <param name="inboxId">Inbox ID (optional)</param>
        /// <param name="smsId">Sms ID (optional)</param>
        /// <param name="attachmentId">Attachment ID (optional)</param>
        /// <param name="emailId">Email ID (optional)</param>
        /// <param name="phoneId">Phone ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhookResultsApiResponse"/>&gt;</returns>
        Task<IGetAllWebhookResultsApiResponse> GetAllWebhookResultsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<bool> unseenOnly = default, Option<string> resultType = default, Option<string> eventName = default, Option<int> minStatusCode = default, Option<int> maxStatusCode = default, Option<Guid> inboxId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Webhooks Paginated
        /// </summary>
        /// <remarks>
        /// List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="inboxId">Filter by inboxId (optional)</param>
        /// <param name="phoneId">Filter by phoneId (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="url">Optional url endpoint filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhooksApiResponse"/>&gt;</returns>
        Task<IGetAllWebhooksApiResponse> GetAllWebhooksAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, Option<string> url = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Webhooks Paginated
        /// </summary>
        /// <remarks>
        /// List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </remarks>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="inboxId">Filter by inboxId (optional)</param>
        /// <param name="phoneId">Filter by phoneId (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="url">Optional url endpoint filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhooksApiResponse"/>&gt;</returns>
        Task<IGetAllWebhooksApiResponse> GetAllWebhooksOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, Option<string> url = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get paginated webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxWebhooksPaginatedApiResponse"/>&gt;</returns>
        Task<IGetInboxWebhooksPaginatedApiResponse> GetInboxWebhooksPaginatedAsync(Guid inboxId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get paginated webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="inboxId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxWebhooksPaginatedApiResponse"/>&gt;</returns>
        Task<IGetInboxWebhooksPaginatedApiResponse> GetInboxWebhooksPaginatedOrDefaultAsync(Guid inboxId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get JSON Schema definition for webhook payload by event
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonSchemaForWebhookEventApiResponse"/>&gt;</returns>
        Task<IGetJsonSchemaForWebhookEventApiResponse> GetJsonSchemaForWebhookEventAsync(string varEvent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get JSON Schema definition for webhook payload by event
        /// </remarks>
        /// <param name="varEvent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonSchemaForWebhookEventApiResponse"/>&gt;</returns>
        Task<IGetJsonSchemaForWebhookEventApiResponse> GetJsonSchemaForWebhookEventOrDefaultAsync(string varEvent, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get JSON Schema definition for webhook payload
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonSchemaForWebhookPayloadApiResponse"/>&gt;</returns>
        Task<IGetJsonSchemaForWebhookPayloadApiResponse> GetJsonSchemaForWebhookPayloadAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get JSON Schema definition for webhook payload
        /// </remarks>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonSchemaForWebhookPayloadApiResponse"/>&gt;</returns>
        Task<IGetJsonSchemaForWebhookPayloadApiResponse> GetJsonSchemaForWebhookPayloadOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get paginated webhooks for a phone number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberWebhooksPaginatedApiResponse"/>&gt;</returns>
        Task<IGetPhoneNumberWebhooksPaginatedApiResponse> GetPhoneNumberWebhooksPaginatedAsync(Guid phoneId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, Option<string> searchFilter = default, Option<string> health = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get paginated webhooks for a phone number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="phoneId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberWebhooksPaginatedApiResponse"/>&gt;</returns>
        Task<IGetPhoneNumberWebhooksPaginatedApiResponse> GetPhoneNumberWebhooksPaginatedOrDefaultAsync(Guid phoneId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, Option<string> searchFilter = default, Option<string> health = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadApiResponse> GetTestWebhookPayloadAsync(Option<string> eventName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
        /// </remarks>
        /// <param name="eventName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadApiResponse> GetTestWebhookPayloadOrDefaultAsync(Option<string> eventName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook test payload for bounce
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadBounceApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadBounceApiResponse> GetTestWebhookPayloadBounceAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook test payload for bounce
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadBounceApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadBounceApiResponse> GetTestWebhookPayloadBounceOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook test payload for bounce recipient
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadBounceRecipientApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadBounceRecipientApiResponse> GetTestWebhookPayloadBounceRecipientAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook test payload for bounce recipient
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadBounceRecipientApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadBounceRecipientApiResponse> GetTestWebhookPayloadBounceRecipientOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get webhook test payload for delivery status event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadDeliveryStatusApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadDeliveryStatusApiResponse> GetTestWebhookPayloadDeliveryStatusAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get webhook test payload for delivery status event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadDeliveryStatusApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadDeliveryStatusApiResponse> GetTestWebhookPayloadDeliveryStatusOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook test payload for email opened event
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadEmailOpenedApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadEmailOpenedApiResponse> GetTestWebhookPayloadEmailOpenedAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook test payload for email opened event
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadEmailOpenedApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadEmailOpenedApiResponse> GetTestWebhookPayloadEmailOpenedOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook test payload for email opened event
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadEmailReadApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadEmailReadApiResponse> GetTestWebhookPayloadEmailReadAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook test payload for email opened event
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadEmailReadApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadEmailReadApiResponse> GetTestWebhookPayloadEmailReadOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get example payload for webhook
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadForWebhookApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadForWebhookApiResponse> GetTestWebhookPayloadForWebhookAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get example payload for webhook
        /// </remarks>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadForWebhookApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadForWebhookApiResponse> GetTestWebhookPayloadForWebhookOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get webhook test payload for new attachment event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewAttachmentApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadNewAttachmentApiResponse> GetTestWebhookPayloadNewAttachmentAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get webhook test payload for new attachment event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewAttachmentApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadNewAttachmentApiResponse> GetTestWebhookPayloadNewAttachmentOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get webhook test payload for new contact event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewContactApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadNewContactApiResponse> GetTestWebhookPayloadNewContactAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get webhook test payload for new contact event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewContactApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadNewContactApiResponse> GetTestWebhookPayloadNewContactOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get webhook test payload for new email event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewEmailApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadNewEmailApiResponse> GetTestWebhookPayloadNewEmailAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get webhook test payload for new email event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewEmailApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadNewEmailApiResponse> GetTestWebhookPayloadNewEmailOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get webhook test payload for new sms event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewSmsApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadNewSmsApiResponse> GetTestWebhookPayloadNewSmsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get webhook test payload for new sms event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewSmsApiResponse"/>&gt;</returns>
        Task<IGetTestWebhookPayloadNewSmsApiResponse> GetTestWebhookPayloadNewSmsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookApiResponse"/>&gt;</returns>
        Task<IGetWebhookApiResponse> GetWebhookAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookApiResponse"/>&gt;</returns>
        Task<IGetWebhookApiResponse> GetWebhookOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a webhook result for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultApiResponse"/>&gt;</returns>
        Task<IGetWebhookResultApiResponse> GetWebhookResultAsync(Guid webhookResultId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a webhook result for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultApiResponse"/>&gt;</returns>
        Task<IGetWebhookResultApiResponse> GetWebhookResultOrDefaultAsync(Guid webhookResultId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a webhook results for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="unseenOnly">Filter for unseen exceptions only (optional)</param>
        /// <param name="resultType">Filter by result type (optional)</param>
        /// <param name="eventName">Filter by event name (optional)</param>
        /// <param name="minStatusCode">Minimum response status (optional)</param>
        /// <param name="maxStatusCode">Maximum response status (optional)</param>
        /// <param name="inboxId">Inbox ID (optional)</param>
        /// <param name="smsId">Sms ID (optional)</param>
        /// <param name="attachmentId">Attachment ID (optional)</param>
        /// <param name="emailId">Email ID (optional)</param>
        /// <param name="phoneId">Phone ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsApiResponse"/>&gt;</returns>
        Task<IGetWebhookResultsApiResponse> GetWebhookResultsAsync(Guid webhookId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<bool> unseenOnly = default, Option<string> resultType = default, Option<string> eventName = default, Option<int> minStatusCode = default, Option<int> maxStatusCode = default, Option<Guid> inboxId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a webhook results for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="unseenOnly">Filter for unseen exceptions only (optional)</param>
        /// <param name="resultType">Filter by result type (optional)</param>
        /// <param name="eventName">Filter by event name (optional)</param>
        /// <param name="minStatusCode">Minimum response status (optional)</param>
        /// <param name="maxStatusCode">Maximum response status (optional)</param>
        /// <param name="inboxId">Inbox ID (optional)</param>
        /// <param name="smsId">Sms ID (optional)</param>
        /// <param name="attachmentId">Attachment ID (optional)</param>
        /// <param name="emailId">Email ID (optional)</param>
        /// <param name="phoneId">Phone ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsApiResponse"/>&gt;</returns>
        Task<IGetWebhookResultsApiResponse> GetWebhookResultsOrDefaultAsync(Guid webhookId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<bool> unseenOnly = default, Option<string> resultType = default, Option<string> eventName = default, Option<int> minStatusCode = default, Option<int> maxStatusCode = default, Option<Guid> inboxId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a webhook results count for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsCountApiResponse"/>&gt;</returns>
        Task<IGetWebhookResultsCountApiResponse> GetWebhookResultsCountAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a webhook results count for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsCountApiResponse"/>&gt;</returns>
        Task<IGetWebhookResultsCountApiResponse> GetWebhookResultsCountOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get count of unseen webhook results with error status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsUnseenErrorCountApiResponse"/>&gt;</returns>
        Task<IGetWebhookResultsUnseenErrorCountApiResponse> GetWebhookResultsUnseenErrorCountAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get count of unseen webhook results with error status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsUnseenErrorCountApiResponse"/>&gt;</returns>
        Task<IGetWebhookResultsUnseenErrorCountApiResponse> GetWebhookResultsUnseenErrorCountOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhooksApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<IGetWebhooksApiResponse> GetWebhooksAsync(Guid inboxId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="inboxId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhooksApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<IGetWebhooksApiResponse> GetWebhooksOrDefaultAsync(Guid inboxId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Redrive all webhook results that have failed status
        /// </summary>
        /// <remarks>
        /// Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRedriveAllWebhookResultsApiResponse"/>&gt;</returns>
        Task<IRedriveAllWebhookResultsApiResponse> RedriveAllWebhookResultsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Redrive all webhook results that have failed status
        /// </summary>
        /// <remarks>
        /// Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRedriveAllWebhookResultsApiResponse"/>&gt;</returns>
        Task<IRedriveAllWebhookResultsApiResponse> RedriveAllWebhookResultsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload
        /// </summary>
        /// <remarks>
        /// Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRedriveWebhookResultApiResponse"/>&gt;</returns>
        Task<IRedriveWebhookResultApiResponse> RedriveWebhookResultAsync(Guid webhookResultId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload
        /// </summary>
        /// <remarks>
        /// Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </remarks>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRedriveWebhookResultApiResponse"/>&gt;</returns>
        Task<IRedriveWebhookResultApiResponse> RedriveWebhookResultOrDefaultAsync(Guid webhookResultId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send webhook test data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTestDataApiResponse"/>&gt;</returns>
        Task<ISendTestDataApiResponse> SendTestDataAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send webhook test data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTestDataApiResponse"/>&gt;</returns>
        Task<ISendTestDataApiResponse> SendTestDataOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="overrideAuth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWebhookApiResponse"/>&gt;</returns>
        Task<IUpdateWebhookApiResponse> UpdateWebhookAsync(Guid webhookId, CreateWebhookOptions createWebhookOptions, Option<Guid> inboxId = default, Option<Guid> phoneNumberId = default, Option<bool> overrideAuth = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webhookId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="overrideAuth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWebhookApiResponse"/>&gt;</returns>
        Task<IUpdateWebhookApiResponse> UpdateWebhookOrDefaultAsync(Guid webhookId, CreateWebhookOptions createWebhookOptions, Option<Guid> inboxId = default, Option<Guid> phoneNumberId = default, Option<bool> overrideAuth = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a webhook request headers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="webhookHeaders"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWebhookHeadersApiResponse"/>&gt;</returns>
        Task<IUpdateWebhookHeadersApiResponse> UpdateWebhookHeadersAsync(Guid webhookId, WebhookHeaders webhookHeaders, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a webhook request headers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webhookId"></param>
        /// <param name="webhookHeaders"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWebhookHeadersApiResponse"/>&gt;</returns>
        Task<IUpdateWebhookHeadersApiResponse> UpdateWebhookHeadersOrDefaultAsync(Guid webhookId, WebhookHeaders webhookHeaders, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify a webhook payload signature
        /// </summary>
        /// <remarks>
        /// Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyWebhookSignatureOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyWebhookSignatureApiResponse"/>&gt;</returns>
        Task<IVerifyWebhookSignatureApiResponse> VerifyWebhookSignatureAsync(VerifyWebhookSignatureOptions verifyWebhookSignatureOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify a webhook payload signature
        /// </summary>
        /// <remarks>
        /// Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
        /// </remarks>
        /// <param name="verifyWebhookSignatureOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyWebhookSignatureApiResponse"/>&gt;</returns>
        Task<IVerifyWebhookSignatureApiResponse> VerifyWebhookSignatureOrDefaultAsync(VerifyWebhookSignatureOptions verifyWebhookSignatureOptions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Wait for webhook results for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="expectedCount">Expected result count</param>
        /// <param name="timeout">Max time to wait in milliseconds</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWaitForWebhookResultsApiResponse"/>&gt;</returns>
        Task<IWaitForWebhookResultsApiResponse> WaitForWebhookResultsAsync(Guid webhookId, int expectedCount, int timeout, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Wait for webhook results for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="expectedCount">Expected result count</param>
        /// <param name="timeout">Max time to wait in milliseconds</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWaitForWebhookResultsApiResponse"/>&gt;</returns>
        Task<IWaitForWebhookResultsApiResponse> WaitForWebhookResultsOrDefaultAsync(Guid webhookId, int expectedCount, int timeout, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateAccountWebhookApiResponse"/>
    /// </summary>
    public interface ICreateAccountWebhookApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.WebhookDto>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateWebhookApiResponse"/>
    /// </summary>
    public interface ICreateWebhookApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.WebhookDto>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateWebhookForPhoneNumberApiResponse"/>
    /// </summary>
    public interface ICreateWebhookForPhoneNumberApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.WebhookDto>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAllWebhooksApiResponse"/>
    /// </summary>
    public interface IDeleteAllWebhooksApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteWebhookApiResponse"/>
    /// </summary>
    public interface IDeleteWebhookApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteWebhookByIdApiResponse"/>
    /// </summary>
    public interface IDeleteWebhookByIdApiResponse : mailslurp.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllAccountWebhooksApiResponse"/>
    /// </summary>
    public interface IGetAllAccountWebhooksApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageWebhookProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllWebhookEndpointsApiResponse"/>
    /// </summary>
    public interface IGetAllWebhookEndpointsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageWebhookEndpointProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllWebhookResultsApiResponse"/>
    /// </summary>
    public interface IGetAllWebhookResultsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageWebhookResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllWebhooksApiResponse"/>
    /// </summary>
    public interface IGetAllWebhooksApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageWebhookProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInboxWebhooksPaginatedApiResponse"/>
    /// </summary>
    public interface IGetInboxWebhooksPaginatedApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageWebhookProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetJsonSchemaForWebhookEventApiResponse"/>
    /// </summary>
    public interface IGetJsonSchemaForWebhookEventApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.JSONSchemaDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetJsonSchemaForWebhookPayloadApiResponse"/>
    /// </summary>
    public interface IGetJsonSchemaForWebhookPayloadApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.JSONSchemaDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPhoneNumberWebhooksPaginatedApiResponse"/>
    /// </summary>
    public interface IGetPhoneNumberWebhooksPaginatedApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageWebhookProjection>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.AbstractWebhookPayload>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadBounceApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadBounceApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookBouncePayload>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadBounceRecipientApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadBounceRecipientApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookBounceRecipientPayload>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadDeliveryStatusApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadDeliveryStatusApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookDeliveryStatusPayload>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadEmailOpenedApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadEmailOpenedApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookEmailOpenedPayload>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadEmailReadApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadEmailReadApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookEmailReadPayload>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadForWebhookApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadForWebhookApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.AbstractWebhookPayload>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadNewAttachmentApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadNewAttachmentApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookNewAttachmentPayload>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadNewContactApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadNewContactApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookNewContactPayload>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadNewEmailApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadNewEmailApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookNewEmailPayload>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTestWebhookPayloadNewSmsApiResponse"/>
    /// </summary>
    public interface IGetTestWebhookPayloadNewSmsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookNewSmsPayload>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetWebhookApiResponse"/>
    /// </summary>
    public interface IGetWebhookApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetWebhookResultApiResponse"/>
    /// </summary>
    public interface IGetWebhookResultApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookResultDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetWebhookResultsApiResponse"/>
    /// </summary>
    public interface IGetWebhookResultsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.PageWebhookResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetWebhookResultsCountApiResponse"/>
    /// </summary>
    public interface IGetWebhookResultsCountApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.CountDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetWebhookResultsUnseenErrorCountApiResponse"/>
    /// </summary>
    public interface IGetWebhookResultsUnseenErrorCountApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.UnseenErrorCountDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetWebhooksApiResponse"/>
    /// </summary>
    public interface IGetWebhooksApiResponse : mailslurp.Client.IApiResponse, IOk<List<WebhookProjection>>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IRedriveAllWebhookResultsApiResponse"/>
    /// </summary>
    public interface IRedriveAllWebhookResultsApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookRedriveAllResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IRedriveWebhookResultApiResponse"/>
    /// </summary>
    public interface IRedriveWebhookResultApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookRedriveResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISendTestDataApiResponse"/>
    /// </summary>
    public interface ISendTestDataApiResponse : mailslurp.Client.IApiResponse, ICreated<mailslurp.Model.WebhookTestResult>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateWebhookApiResponse"/>
    /// </summary>
    public interface IUpdateWebhookApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateWebhookHeadersApiResponse"/>
    /// </summary>
    public interface IUpdateWebhookHeadersApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.WebhookDto>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IVerifyWebhookSignatureApiResponse"/>
    /// </summary>
    public interface IVerifyWebhookSignatureApiResponse : mailslurp.Client.IApiResponse, IOk<mailslurp.Model.VerifyWebhookSignatureResults>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWaitForWebhookResultsApiResponse"/>
    /// </summary>
    public interface IWaitForWebhookResultsApiResponse : mailslurp.Client.IApiResponse, IOk<List<WebhookResultDto>>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WebhookControllerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateAccountWebhook;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateAccountWebhook;

        internal void ExecuteOnCreateAccountWebhook(WebhookControllerApi.CreateAccountWebhookApiResponse apiResponse)
        {
            OnCreateAccountWebhook?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateAccountWebhook(Exception exception)
        {
            OnErrorCreateAccountWebhook?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateWebhook;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateWebhook;

        internal void ExecuteOnCreateWebhook(WebhookControllerApi.CreateWebhookApiResponse apiResponse)
        {
            OnCreateWebhook?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateWebhook(Exception exception)
        {
            OnErrorCreateWebhook?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateWebhookForPhoneNumber;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateWebhookForPhoneNumber;

        internal void ExecuteOnCreateWebhookForPhoneNumber(WebhookControllerApi.CreateWebhookForPhoneNumberApiResponse apiResponse)
        {
            OnCreateWebhookForPhoneNumber?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateWebhookForPhoneNumber(Exception exception)
        {
            OnErrorCreateWebhookForPhoneNumber?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteAllWebhooks;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteAllWebhooks;

        internal void ExecuteOnDeleteAllWebhooks(WebhookControllerApi.DeleteAllWebhooksApiResponse apiResponse)
        {
            OnDeleteAllWebhooks?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAllWebhooks(Exception exception)
        {
            OnErrorDeleteAllWebhooks?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteWebhook;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteWebhook;

        internal void ExecuteOnDeleteWebhook(WebhookControllerApi.DeleteWebhookApiResponse apiResponse)
        {
            OnDeleteWebhook?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteWebhook(Exception exception)
        {
            OnErrorDeleteWebhook?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteWebhookById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteWebhookById;

        internal void ExecuteOnDeleteWebhookById(WebhookControllerApi.DeleteWebhookByIdApiResponse apiResponse)
        {
            OnDeleteWebhookById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteWebhookById(Exception exception)
        {
            OnErrorDeleteWebhookById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllAccountWebhooks;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllAccountWebhooks;

        internal void ExecuteOnGetAllAccountWebhooks(WebhookControllerApi.GetAllAccountWebhooksApiResponse apiResponse)
        {
            OnGetAllAccountWebhooks?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllAccountWebhooks(Exception exception)
        {
            OnErrorGetAllAccountWebhooks?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllWebhookEndpoints;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllWebhookEndpoints;

        internal void ExecuteOnGetAllWebhookEndpoints(WebhookControllerApi.GetAllWebhookEndpointsApiResponse apiResponse)
        {
            OnGetAllWebhookEndpoints?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllWebhookEndpoints(Exception exception)
        {
            OnErrorGetAllWebhookEndpoints?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllWebhookResults;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllWebhookResults;

        internal void ExecuteOnGetAllWebhookResults(WebhookControllerApi.GetAllWebhookResultsApiResponse apiResponse)
        {
            OnGetAllWebhookResults?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllWebhookResults(Exception exception)
        {
            OnErrorGetAllWebhookResults?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllWebhooks;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllWebhooks;

        internal void ExecuteOnGetAllWebhooks(WebhookControllerApi.GetAllWebhooksApiResponse apiResponse)
        {
            OnGetAllWebhooks?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllWebhooks(Exception exception)
        {
            OnErrorGetAllWebhooks?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetInboxWebhooksPaginated;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetInboxWebhooksPaginated;

        internal void ExecuteOnGetInboxWebhooksPaginated(WebhookControllerApi.GetInboxWebhooksPaginatedApiResponse apiResponse)
        {
            OnGetInboxWebhooksPaginated?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInboxWebhooksPaginated(Exception exception)
        {
            OnErrorGetInboxWebhooksPaginated?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetJsonSchemaForWebhookEvent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetJsonSchemaForWebhookEvent;

        internal void ExecuteOnGetJsonSchemaForWebhookEvent(WebhookControllerApi.GetJsonSchemaForWebhookEventApiResponse apiResponse)
        {
            OnGetJsonSchemaForWebhookEvent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetJsonSchemaForWebhookEvent(Exception exception)
        {
            OnErrorGetJsonSchemaForWebhookEvent?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetJsonSchemaForWebhookPayload;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetJsonSchemaForWebhookPayload;

        internal void ExecuteOnGetJsonSchemaForWebhookPayload(WebhookControllerApi.GetJsonSchemaForWebhookPayloadApiResponse apiResponse)
        {
            OnGetJsonSchemaForWebhookPayload?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetJsonSchemaForWebhookPayload(Exception exception)
        {
            OnErrorGetJsonSchemaForWebhookPayload?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPhoneNumberWebhooksPaginated;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPhoneNumberWebhooksPaginated;

        internal void ExecuteOnGetPhoneNumberWebhooksPaginated(WebhookControllerApi.GetPhoneNumberWebhooksPaginatedApiResponse apiResponse)
        {
            OnGetPhoneNumberWebhooksPaginated?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPhoneNumberWebhooksPaginated(Exception exception)
        {
            OnErrorGetPhoneNumberWebhooksPaginated?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayload;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayload;

        internal void ExecuteOnGetTestWebhookPayload(WebhookControllerApi.GetTestWebhookPayloadApiResponse apiResponse)
        {
            OnGetTestWebhookPayload?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayload(Exception exception)
        {
            OnErrorGetTestWebhookPayload?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayloadBounce;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayloadBounce;

        internal void ExecuteOnGetTestWebhookPayloadBounce(WebhookControllerApi.GetTestWebhookPayloadBounceApiResponse apiResponse)
        {
            OnGetTestWebhookPayloadBounce?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayloadBounce(Exception exception)
        {
            OnErrorGetTestWebhookPayloadBounce?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayloadBounceRecipient;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayloadBounceRecipient;

        internal void ExecuteOnGetTestWebhookPayloadBounceRecipient(WebhookControllerApi.GetTestWebhookPayloadBounceRecipientApiResponse apiResponse)
        {
            OnGetTestWebhookPayloadBounceRecipient?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayloadBounceRecipient(Exception exception)
        {
            OnErrorGetTestWebhookPayloadBounceRecipient?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayloadDeliveryStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayloadDeliveryStatus;

        internal void ExecuteOnGetTestWebhookPayloadDeliveryStatus(WebhookControllerApi.GetTestWebhookPayloadDeliveryStatusApiResponse apiResponse)
        {
            OnGetTestWebhookPayloadDeliveryStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayloadDeliveryStatus(Exception exception)
        {
            OnErrorGetTestWebhookPayloadDeliveryStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayloadEmailOpened;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayloadEmailOpened;

        internal void ExecuteOnGetTestWebhookPayloadEmailOpened(WebhookControllerApi.GetTestWebhookPayloadEmailOpenedApiResponse apiResponse)
        {
            OnGetTestWebhookPayloadEmailOpened?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayloadEmailOpened(Exception exception)
        {
            OnErrorGetTestWebhookPayloadEmailOpened?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayloadEmailRead;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayloadEmailRead;

        internal void ExecuteOnGetTestWebhookPayloadEmailRead(WebhookControllerApi.GetTestWebhookPayloadEmailReadApiResponse apiResponse)
        {
            OnGetTestWebhookPayloadEmailRead?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayloadEmailRead(Exception exception)
        {
            OnErrorGetTestWebhookPayloadEmailRead?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayloadForWebhook;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayloadForWebhook;

        internal void ExecuteOnGetTestWebhookPayloadForWebhook(WebhookControllerApi.GetTestWebhookPayloadForWebhookApiResponse apiResponse)
        {
            OnGetTestWebhookPayloadForWebhook?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayloadForWebhook(Exception exception)
        {
            OnErrorGetTestWebhookPayloadForWebhook?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayloadNewAttachment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayloadNewAttachment;

        internal void ExecuteOnGetTestWebhookPayloadNewAttachment(WebhookControllerApi.GetTestWebhookPayloadNewAttachmentApiResponse apiResponse)
        {
            OnGetTestWebhookPayloadNewAttachment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayloadNewAttachment(Exception exception)
        {
            OnErrorGetTestWebhookPayloadNewAttachment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayloadNewContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayloadNewContact;

        internal void ExecuteOnGetTestWebhookPayloadNewContact(WebhookControllerApi.GetTestWebhookPayloadNewContactApiResponse apiResponse)
        {
            OnGetTestWebhookPayloadNewContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayloadNewContact(Exception exception)
        {
            OnErrorGetTestWebhookPayloadNewContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayloadNewEmail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayloadNewEmail;

        internal void ExecuteOnGetTestWebhookPayloadNewEmail(WebhookControllerApi.GetTestWebhookPayloadNewEmailApiResponse apiResponse)
        {
            OnGetTestWebhookPayloadNewEmail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayloadNewEmail(Exception exception)
        {
            OnErrorGetTestWebhookPayloadNewEmail?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTestWebhookPayloadNewSms;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTestWebhookPayloadNewSms;

        internal void ExecuteOnGetTestWebhookPayloadNewSms(WebhookControllerApi.GetTestWebhookPayloadNewSmsApiResponse apiResponse)
        {
            OnGetTestWebhookPayloadNewSms?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTestWebhookPayloadNewSms(Exception exception)
        {
            OnErrorGetTestWebhookPayloadNewSms?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetWebhook;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetWebhook;

        internal void ExecuteOnGetWebhook(WebhookControllerApi.GetWebhookApiResponse apiResponse)
        {
            OnGetWebhook?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWebhook(Exception exception)
        {
            OnErrorGetWebhook?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetWebhookResult;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetWebhookResult;

        internal void ExecuteOnGetWebhookResult(WebhookControllerApi.GetWebhookResultApiResponse apiResponse)
        {
            OnGetWebhookResult?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWebhookResult(Exception exception)
        {
            OnErrorGetWebhookResult?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetWebhookResults;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetWebhookResults;

        internal void ExecuteOnGetWebhookResults(WebhookControllerApi.GetWebhookResultsApiResponse apiResponse)
        {
            OnGetWebhookResults?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWebhookResults(Exception exception)
        {
            OnErrorGetWebhookResults?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetWebhookResultsCount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetWebhookResultsCount;

        internal void ExecuteOnGetWebhookResultsCount(WebhookControllerApi.GetWebhookResultsCountApiResponse apiResponse)
        {
            OnGetWebhookResultsCount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWebhookResultsCount(Exception exception)
        {
            OnErrorGetWebhookResultsCount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetWebhookResultsUnseenErrorCount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetWebhookResultsUnseenErrorCount;

        internal void ExecuteOnGetWebhookResultsUnseenErrorCount(WebhookControllerApi.GetWebhookResultsUnseenErrorCountApiResponse apiResponse)
        {
            OnGetWebhookResultsUnseenErrorCount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWebhookResultsUnseenErrorCount(Exception exception)
        {
            OnErrorGetWebhookResultsUnseenErrorCount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetWebhooks;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetWebhooks;

        internal void ExecuteOnGetWebhooks(WebhookControllerApi.GetWebhooksApiResponse apiResponse)
        {
            OnGetWebhooks?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWebhooks(Exception exception)
        {
            OnErrorGetWebhooks?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRedriveAllWebhookResults;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRedriveAllWebhookResults;

        internal void ExecuteOnRedriveAllWebhookResults(WebhookControllerApi.RedriveAllWebhookResultsApiResponse apiResponse)
        {
            OnRedriveAllWebhookResults?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRedriveAllWebhookResults(Exception exception)
        {
            OnErrorRedriveAllWebhookResults?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRedriveWebhookResult;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRedriveWebhookResult;

        internal void ExecuteOnRedriveWebhookResult(WebhookControllerApi.RedriveWebhookResultApiResponse apiResponse)
        {
            OnRedriveWebhookResult?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRedriveWebhookResult(Exception exception)
        {
            OnErrorRedriveWebhookResult?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendTestData;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendTestData;

        internal void ExecuteOnSendTestData(WebhookControllerApi.SendTestDataApiResponse apiResponse)
        {
            OnSendTestData?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendTestData(Exception exception)
        {
            OnErrorSendTestData?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateWebhook;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateWebhook;

        internal void ExecuteOnUpdateWebhook(WebhookControllerApi.UpdateWebhookApiResponse apiResponse)
        {
            OnUpdateWebhook?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateWebhook(Exception exception)
        {
            OnErrorUpdateWebhook?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateWebhookHeaders;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateWebhookHeaders;

        internal void ExecuteOnUpdateWebhookHeaders(WebhookControllerApi.UpdateWebhookHeadersApiResponse apiResponse)
        {
            OnUpdateWebhookHeaders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateWebhookHeaders(Exception exception)
        {
            OnErrorUpdateWebhookHeaders?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnVerifyWebhookSignature;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorVerifyWebhookSignature;

        internal void ExecuteOnVerifyWebhookSignature(WebhookControllerApi.VerifyWebhookSignatureApiResponse apiResponse)
        {
            OnVerifyWebhookSignature?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifyWebhookSignature(Exception exception)
        {
            OnErrorVerifyWebhookSignature?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWaitForWebhookResults;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWaitForWebhookResults;

        internal void ExecuteOnWaitForWebhookResults(WebhookControllerApi.WaitForWebhookResultsApiResponse apiResponse)
        {
            OnWaitForWebhookResults?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWaitForWebhookResults(Exception exception)
        {
            OnErrorWaitForWebhookResults?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class WebhookControllerApi : IWebhookControllerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<WebhookControllerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public WebhookControllerApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookControllerApi(ILogger<WebhookControllerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, WebhookControllerApiEvents webhookControllerApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<WebhookControllerApi>();
            HttpClient = httpClient;
            Events = webhookControllerApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateAccountWebhook(CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createWebhookOptions"></param>
        /// <returns></returns>
        private void ValidateCreateAccountWebhook(CreateWebhookOptions createWebhookOptions)
        {
            if (createWebhookOptions == null)
                throw new ArgumentNullException(nameof(createWebhookOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createWebhookOptions"></param>
        private void AfterCreateAccountWebhookDefaultImplementation(ICreateAccountWebhookApiResponse apiResponseLocalVar, CreateWebhookOptions createWebhookOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateAccountWebhook(ref suppressDefaultLog, apiResponseLocalVar, createWebhookOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createWebhookOptions"></param>
        partial void AfterCreateAccountWebhook(ref bool suppressDefaultLog, ICreateAccountWebhookApiResponse apiResponseLocalVar, CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createWebhookOptions"></param>
        private void OnErrorCreateAccountWebhookDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateWebhookOptions createWebhookOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateAccountWebhook(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createWebhookOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createWebhookOptions"></param>
        partial void OnErrorCreateAccountWebhook(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified of account level events such as bounce and bounce recipient.
        /// </summary>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAccountWebhookApiResponse"/>&gt;</returns>
        public async Task<ICreateAccountWebhookApiResponse> CreateAccountWebhookOrDefaultAsync(CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateAccountWebhookAsync(createWebhookOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified of account level events such as bounce and bounce recipient.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAccountWebhookApiResponse"/>&gt;</returns>
        public async Task<ICreateAccountWebhookApiResponse> CreateAccountWebhookAsync(CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateAccountWebhook(createWebhookOptions);

                FormatCreateAccountWebhook(createWebhookOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks");

                    httpRequestMessageLocalVar.Content = (createWebhookOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createWebhookOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateAccountWebhookApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateAccountWebhookApiResponse>();

                        CreateAccountWebhookApiResponse apiResponseLocalVar = new CreateAccountWebhookApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateAccountWebhookDefaultImplementation(apiResponseLocalVar, createWebhookOptions);

                        Events.ExecuteOnCreateAccountWebhook(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateAccountWebhookDefaultImplementation(e, "/webhooks", uriBuilderLocalVar.Path, createWebhookOptions);
                Events.ExecuteOnErrorCreateAccountWebhook(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateAccountWebhookApiResponse"/>
        /// </summary>
        public partial class CreateAccountWebhookApiResponse : mailslurp.Client.ApiResponse, ICreateAccountWebhookApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateAccountWebhookApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateAccountWebhookApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateAccountWebhookApiResponse(ILogger<CreateAccountWebhookApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookDto Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.WebhookDto result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateWebhook(ref Guid inboxId, CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createWebhookOptions"></param>
        /// <returns></returns>
        private void ValidateCreateWebhook(CreateWebhookOptions createWebhookOptions)
        {
            if (createWebhookOptions == null)
                throw new ArgumentNullException(nameof(createWebhookOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="createWebhookOptions"></param>
        private void AfterCreateWebhookDefaultImplementation(ICreateWebhookApiResponse apiResponseLocalVar, Guid inboxId, CreateWebhookOptions createWebhookOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateWebhook(ref suppressDefaultLog, apiResponseLocalVar, inboxId, createWebhookOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="createWebhookOptions"></param>
        partial void AfterCreateWebhook(ref bool suppressDefaultLog, ICreateWebhookApiResponse apiResponseLocalVar, Guid inboxId, CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="createWebhookOptions"></param>
        private void OnErrorCreateWebhookDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, CreateWebhookOptions createWebhookOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateWebhook(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId, createWebhookOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="createWebhookOptions"></param>
        partial void OnErrorCreateWebhook(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </summary>
        /// <param name="inboxId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhookApiResponse"/>&gt;</returns>
        public async Task<ICreateWebhookApiResponse> CreateWebhookOrDefaultAsync(Guid inboxId, CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateWebhookAsync(inboxId, createWebhookOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhookApiResponse"/>&gt;</returns>
        public async Task<ICreateWebhookApiResponse> CreateWebhookAsync(Guid inboxId, CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateWebhook(createWebhookOptions);

                FormatCreateWebhook(ref inboxId, createWebhookOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/inboxes/{inboxId}/webhooks"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/inboxes/{inboxId}/webhooks");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BinboxId%7D", Uri.EscapeDataString(inboxId.ToString()));

                    httpRequestMessageLocalVar.Content = (createWebhookOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createWebhookOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateWebhookApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateWebhookApiResponse>();

                        CreateWebhookApiResponse apiResponseLocalVar = new CreateWebhookApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/inboxes/{inboxId}/webhooks", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateWebhookDefaultImplementation(apiResponseLocalVar, inboxId, createWebhookOptions);

                        Events.ExecuteOnCreateWebhook(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateWebhookDefaultImplementation(e, "/inboxes/{inboxId}/webhooks", uriBuilderLocalVar.Path, inboxId, createWebhookOptions);
                Events.ExecuteOnErrorCreateWebhook(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateWebhookApiResponse"/>
        /// </summary>
        public partial class CreateWebhookApiResponse : mailslurp.Client.ApiResponse, ICreateWebhookApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateWebhookApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateWebhookApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateWebhookApiResponse(ILogger<CreateWebhookApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookDto Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.WebhookDto result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateWebhookForPhoneNumber(ref Guid phoneNumberId, CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createWebhookOptions"></param>
        /// <returns></returns>
        private void ValidateCreateWebhookForPhoneNumber(CreateWebhookOptions createWebhookOptions)
        {
            if (createWebhookOptions == null)
                throw new ArgumentNullException(nameof(createWebhookOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="createWebhookOptions"></param>
        private void AfterCreateWebhookForPhoneNumberDefaultImplementation(ICreateWebhookForPhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId, CreateWebhookOptions createWebhookOptions)
        {
            bool suppressDefaultLog = false;
            AfterCreateWebhookForPhoneNumber(ref suppressDefaultLog, apiResponseLocalVar, phoneNumberId, createWebhookOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="createWebhookOptions"></param>
        partial void AfterCreateWebhookForPhoneNumber(ref bool suppressDefaultLog, ICreateWebhookForPhoneNumberApiResponse apiResponseLocalVar, Guid phoneNumberId, CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="createWebhookOptions"></param>
        private void OnErrorCreateWebhookForPhoneNumberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, CreateWebhookOptions createWebhookOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateWebhookForPhoneNumber(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneNumberId, createWebhookOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="createWebhookOptions"></param>
        partial void OnErrorCreateWebhookForPhoneNumber(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneNumberId, CreateWebhookOptions createWebhookOptions);

        /// <summary>
        /// Attach a WebHook URL to a phone number Get notified whenever a phone number receives an SMS via a WebHook URL.
        /// </summary>
        /// <param name="phoneNumberId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhookForPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<ICreateWebhookForPhoneNumberApiResponse> CreateWebhookForPhoneNumberOrDefaultAsync(Guid phoneNumberId, CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateWebhookForPhoneNumberAsync(phoneNumberId, createWebhookOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Attach a WebHook URL to a phone number Get notified whenever a phone number receives an SMS via a WebHook URL.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebhookForPhoneNumberApiResponse"/>&gt;</returns>
        public async Task<ICreateWebhookForPhoneNumberApiResponse> CreateWebhookForPhoneNumberAsync(Guid phoneNumberId, CreateWebhookOptions createWebhookOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateWebhookForPhoneNumber(createWebhookOptions);

                FormatCreateWebhookForPhoneNumber(ref phoneNumberId, createWebhookOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneNumberId}/webhooks"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneNumberId}/webhooks");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneNumberId%7D", Uri.EscapeDataString(phoneNumberId.ToString()));

                    httpRequestMessageLocalVar.Content = (createWebhookOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createWebhookOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateWebhookForPhoneNumberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateWebhookForPhoneNumberApiResponse>();

                        CreateWebhookForPhoneNumberApiResponse apiResponseLocalVar = new CreateWebhookForPhoneNumberApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneNumberId}/webhooks", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateWebhookForPhoneNumberDefaultImplementation(apiResponseLocalVar, phoneNumberId, createWebhookOptions);

                        Events.ExecuteOnCreateWebhookForPhoneNumber(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateWebhookForPhoneNumberDefaultImplementation(e, "/phone/numbers/{phoneNumberId}/webhooks", uriBuilderLocalVar.Path, phoneNumberId, createWebhookOptions);
                Events.ExecuteOnErrorCreateWebhookForPhoneNumber(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateWebhookForPhoneNumberApiResponse"/>
        /// </summary>
        public partial class CreateWebhookForPhoneNumberApiResponse : mailslurp.Client.ApiResponse, ICreateWebhookForPhoneNumberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateWebhookForPhoneNumberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateWebhookForPhoneNumberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateWebhookForPhoneNumberApiResponse(ILogger<CreateWebhookForPhoneNumberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookDto Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.WebhookDto result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteAllWebhooks(ref Option<DateTime> before);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="before"></param>
        private void AfterDeleteAllWebhooksDefaultImplementation(IDeleteAllWebhooksApiResponse apiResponseLocalVar, Option<DateTime> before)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAllWebhooks(ref suppressDefaultLog, apiResponseLocalVar, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="before"></param>
        partial void AfterDeleteAllWebhooks(ref bool suppressDefaultLog, IDeleteAllWebhooksApiResponse apiResponseLocalVar, Option<DateTime> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="before"></param>
        private void OnErrorDeleteAllWebhooksDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DateTime> before)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAllWebhooks(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, before);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="before"></param>
        partial void OnErrorDeleteAllWebhooks(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DateTime> before);

        /// <summary>
        /// Delete all webhooks 
        /// </summary>
        /// <param name="before">before (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllWebhooksApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllWebhooksApiResponse> DeleteAllWebhooksOrDefaultAsync(Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAllWebhooksAsync(before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete all webhooks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">before (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllWebhooksApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllWebhooksApiResponse> DeleteAllWebhooksAsync(Option<DateTime> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteAllWebhooks(ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteAllWebhooksApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAllWebhooksApiResponse>();

                        DeleteAllWebhooksApiResponse apiResponseLocalVar = new DeleteAllWebhooksApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAllWebhooksDefaultImplementation(apiResponseLocalVar, before);

                        Events.ExecuteOnDeleteAllWebhooks(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAllWebhooksDefaultImplementation(e, "/webhooks", uriBuilderLocalVar.Path, before);
                Events.ExecuteOnErrorDeleteAllWebhooks(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAllWebhooksApiResponse"/>
        /// </summary>
        public partial class DeleteAllWebhooksApiResponse : mailslurp.Client.ApiResponse, IDeleteAllWebhooksApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAllWebhooksApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAllWebhooksApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAllWebhooksApiResponse(ILogger<DeleteAllWebhooksApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteWebhook(ref Guid inboxId, ref Guid webhookId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="webhookId"></param>
        private void AfterDeleteWebhookDefaultImplementation(IDeleteWebhookApiResponse apiResponseLocalVar, Guid inboxId, Guid webhookId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteWebhook(ref suppressDefaultLog, apiResponseLocalVar, inboxId, webhookId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="webhookId"></param>
        partial void AfterDeleteWebhook(ref bool suppressDefaultLog, IDeleteWebhookApiResponse apiResponseLocalVar, Guid inboxId, Guid webhookId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="webhookId"></param>
        private void OnErrorDeleteWebhookDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, Guid webhookId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteWebhook(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId, webhookId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="webhookId"></param>
        partial void OnErrorDeleteWebhook(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, Guid webhookId);

        /// <summary>
        /// Delete and disable a Webhook for an Inbox 
        /// </summary>
        /// <param name="inboxId"></param>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhookApiResponse"/>&gt;</returns>
        public async Task<IDeleteWebhookApiResponse> DeleteWebhookOrDefaultAsync(Guid inboxId, Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteWebhookAsync(inboxId, webhookId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete and disable a Webhook for an Inbox 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhookApiResponse"/>&gt;</returns>
        public async Task<IDeleteWebhookApiResponse> DeleteWebhookAsync(Guid inboxId, Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteWebhook(ref inboxId, ref webhookId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/inboxes/{inboxId}/webhooks/{webhookId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/inboxes/{inboxId}/webhooks/{webhookId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BinboxId%7D", Uri.EscapeDataString(inboxId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteWebhookApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteWebhookApiResponse>();

                        DeleteWebhookApiResponse apiResponseLocalVar = new DeleteWebhookApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/inboxes/{inboxId}/webhooks/{webhookId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteWebhookDefaultImplementation(apiResponseLocalVar, inboxId, webhookId);

                        Events.ExecuteOnDeleteWebhook(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteWebhookDefaultImplementation(e, "/inboxes/{inboxId}/webhooks/{webhookId}", uriBuilderLocalVar.Path, inboxId, webhookId);
                Events.ExecuteOnErrorDeleteWebhook(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteWebhookApiResponse"/>
        /// </summary>
        public partial class DeleteWebhookApiResponse : mailslurp.Client.ApiResponse, IDeleteWebhookApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteWebhookApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteWebhookApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteWebhookApiResponse(ILogger<DeleteWebhookApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteWebhookById(ref Guid webhookId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        private void AfterDeleteWebhookByIdDefaultImplementation(IDeleteWebhookByIdApiResponse apiResponseLocalVar, Guid webhookId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteWebhookById(ref suppressDefaultLog, apiResponseLocalVar, webhookId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void AfterDeleteWebhookById(ref bool suppressDefaultLog, IDeleteWebhookByIdApiResponse apiResponseLocalVar, Guid webhookId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        private void OnErrorDeleteWebhookByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteWebhookById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void OnErrorDeleteWebhookById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId);

        /// <summary>
        /// Delete a webhook 
        /// </summary>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhookByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteWebhookByIdApiResponse> DeleteWebhookByIdOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteWebhookByIdAsync(webhookId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a webhook 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWebhookByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteWebhookByIdApiResponse> DeleteWebhookByIdAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteWebhookById(ref webhookId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/{webhookId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/{webhookId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteWebhookByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteWebhookByIdApiResponse>();

                        DeleteWebhookByIdApiResponse apiResponseLocalVar = new DeleteWebhookByIdApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/{webhookId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteWebhookByIdDefaultImplementation(apiResponseLocalVar, webhookId);

                        Events.ExecuteOnDeleteWebhookById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteWebhookByIdDefaultImplementation(e, "/webhooks/{webhookId}", uriBuilderLocalVar.Path, webhookId);
                Events.ExecuteOnErrorDeleteWebhookById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteWebhookByIdApiResponse"/>
        /// </summary>
        public partial class DeleteWebhookByIdApiResponse : mailslurp.Client.ApiResponse, IDeleteWebhookByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteWebhookByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteWebhookByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteWebhookByIdApiResponse(ILogger<DeleteWebhookByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllAccountWebhooks(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> eventType, ref Option<string> health, ref Option<string> searchFilter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="eventType"></param>
        /// <param name="health"></param>
        /// <param name="searchFilter"></param>
        /// <returns></returns>
        private void ValidateGetAllAccountWebhooks(Option<string> sort, Option<string> eventType, Option<string> health, Option<string> searchFilter)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType));

            if (health.IsSet && health.Value == null)
                throw new ArgumentNullException(nameof(health));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        /// <param name="health"></param>
        /// <param name="searchFilter"></param>
        private void AfterGetAllAccountWebhooksDefaultImplementation(IGetAllAccountWebhooksApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType, Option<string> health, Option<string> searchFilter)
        {
            bool suppressDefaultLog = false;
            AfterGetAllAccountWebhooks(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, since, before, eventType, health, searchFilter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        /// <param name="health"></param>
        /// <param name="searchFilter"></param>
        partial void AfterGetAllAccountWebhooks(ref bool suppressDefaultLog, IGetAllAccountWebhooksApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType, Option<string> health, Option<string> searchFilter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        /// <param name="health"></param>
        /// <param name="searchFilter"></param>
        private void OnErrorGetAllAccountWebhooksDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType, Option<string> health, Option<string> searchFilter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllAccountWebhooks(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, since, before, eventType, health, searchFilter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        /// <param name="health"></param>
        /// <param name="searchFilter"></param>
        partial void OnErrorGetAllAccountWebhooks(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType, Option<string> health, Option<string> searchFilter);

        /// <summary>
        /// List account webhooks Paginated List account webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </summary>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAccountWebhooksApiResponse"/>&gt;</returns>
        public async Task<IGetAllAccountWebhooksApiResponse> GetAllAccountWebhooksOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, Option<string> health = default, Option<string> searchFilter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllAccountWebhooksAsync(page, size, sort, since, before, eventType, health, searchFilter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List account webhooks Paginated List account webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllAccountWebhooksApiResponse"/>&gt;</returns>
        public async Task<IGetAllAccountWebhooksApiResponse> GetAllAccountWebhooksAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, Option<string> health = default, Option<string> searchFilter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllAccountWebhooks(sort, eventType, health, searchFilter);

                FormatGetAllAccountWebhooks(ref page, ref size, ref sort, ref since, ref before, ref eventType, ref health, ref searchFilter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/account/paginated"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/account/paginated");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (eventType.IsSet)
                        parseQueryStringLocalVar["eventType"] = ClientUtils.ParameterToString(eventType.Value);

                    if (health.IsSet)
                        parseQueryStringLocalVar["health"] = ClientUtils.ParameterToString(health.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllAccountWebhooksApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllAccountWebhooksApiResponse>();

                        GetAllAccountWebhooksApiResponse apiResponseLocalVar = new GetAllAccountWebhooksApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/account/paginated", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllAccountWebhooksDefaultImplementation(apiResponseLocalVar, page, size, sort, since, before, eventType, health, searchFilter);

                        Events.ExecuteOnGetAllAccountWebhooks(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllAccountWebhooksDefaultImplementation(e, "/webhooks/account/paginated", uriBuilderLocalVar.Path, page, size, sort, since, before, eventType, health, searchFilter);
                Events.ExecuteOnErrorGetAllAccountWebhooks(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllAccountWebhooksApiResponse"/>
        /// </summary>
        public partial class GetAllAccountWebhooksApiResponse : mailslurp.Client.ApiResponse, IGetAllAccountWebhooksApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllAccountWebhooksApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllAccountWebhooksApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllAccountWebhooksApiResponse(ILogger<GetAllAccountWebhooksApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageWebhookProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageWebhookProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageWebhookProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllWebhookEndpoints(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<string> searchFilter, ref Option<DateTime> since, ref Option<Guid> inboxId, ref Option<Guid> phoneId, ref Option<DateTime> before, ref Option<string> health, ref Option<string> eventType);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        /// <returns></returns>
        private void ValidateGetAllWebhookEndpoints(Option<string> sort, Option<string> searchFilter, Option<string> health, Option<string> eventType)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));

            if (health.IsSet && health.Value == null)
                throw new ArgumentNullException(nameof(health));

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        private void AfterGetAllWebhookEndpointsDefaultImplementation(IGetAllWebhookEndpointsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<Guid> inboxId, Option<Guid> phoneId, Option<DateTime> before, Option<string> health, Option<string> eventType)
        {
            bool suppressDefaultLog = false;
            AfterGetAllWebhookEndpoints(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        partial void AfterGetAllWebhookEndpoints(ref bool suppressDefaultLog, IGetAllWebhookEndpointsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<Guid> inboxId, Option<Guid> phoneId, Option<DateTime> before, Option<string> health, Option<string> eventType);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        private void OnErrorGetAllWebhookEndpointsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<Guid> inboxId, Option<Guid> phoneId, Option<DateTime> before, Option<string> health, Option<string> eventType)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllWebhookEndpoints(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        partial void OnErrorGetAllWebhookEndpoints(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<Guid> inboxId, Option<Guid> phoneId, Option<DateTime> before, Option<string> health, Option<string> eventType);

        /// <summary>
        /// List Webhooks endpoints Paginated List webhooks URL in paginated form. Allows for page index, page size, and sort direction.
        /// </summary>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="inboxId">Filter by inboxId (optional)</param>
        /// <param name="phoneId">Filter by phoneId (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhookEndpointsApiResponse"/>&gt;</returns>
        public async Task<IGetAllWebhookEndpointsApiResponse> GetAllWebhookEndpointsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllWebhookEndpointsAsync(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Webhooks endpoints Paginated List webhooks URL in paginated form. Allows for page index, page size, and sort direction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="inboxId">Filter by inboxId (optional)</param>
        /// <param name="phoneId">Filter by phoneId (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhookEndpointsApiResponse"/>&gt;</returns>
        public async Task<IGetAllWebhookEndpointsApiResponse> GetAllWebhookEndpointsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllWebhookEndpoints(sort, searchFilter, health, eventType);

                FormatGetAllWebhookEndpoints(ref page, ref size, ref sort, ref searchFilter, ref since, ref inboxId, ref phoneId, ref before, ref health, ref eventType);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/endpoints"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/endpoints");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (phoneId.IsSet)
                        parseQueryStringLocalVar["phoneId"] = ClientUtils.ParameterToString(phoneId.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (health.IsSet)
                        parseQueryStringLocalVar["health"] = ClientUtils.ParameterToString(health.Value);

                    if (eventType.IsSet)
                        parseQueryStringLocalVar["eventType"] = ClientUtils.ParameterToString(eventType.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllWebhookEndpointsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllWebhookEndpointsApiResponse>();

                        GetAllWebhookEndpointsApiResponse apiResponseLocalVar = new GetAllWebhookEndpointsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/endpoints", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllWebhookEndpointsDefaultImplementation(apiResponseLocalVar, page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType);

                        Events.ExecuteOnGetAllWebhookEndpoints(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllWebhookEndpointsDefaultImplementation(e, "/webhooks/endpoints", uriBuilderLocalVar.Path, page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType);
                Events.ExecuteOnErrorGetAllWebhookEndpoints(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllWebhookEndpointsApiResponse"/>
        /// </summary>
        public partial class GetAllWebhookEndpointsApiResponse : mailslurp.Client.ApiResponse, IGetAllWebhookEndpointsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllWebhookEndpointsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllWebhookEndpointsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllWebhookEndpointsApiResponse(ILogger<GetAllWebhookEndpointsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageWebhookEndpointProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageWebhookEndpointProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageWebhookEndpointProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllWebhookResults(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<string> searchFilter, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<bool> unseenOnly, ref Option<string> resultType, ref Option<string> eventName, ref Option<int> minStatusCode, ref Option<int> maxStatusCode, ref Option<Guid> inboxId, ref Option<Guid> smsId, ref Option<Guid> attachmentId, ref Option<Guid> emailId, ref Option<Guid> phoneId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="resultType"></param>
        /// <param name="eventName"></param>
        /// <returns></returns>
        private void ValidateGetAllWebhookResults(Option<string> sort, Option<string> searchFilter, Option<string> resultType, Option<string> eventName)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));

            if (resultType.IsSet && resultType.Value == null)
                throw new ArgumentNullException(nameof(resultType));

            if (eventName.IsSet && eventName.Value == null)
                throw new ArgumentNullException(nameof(eventName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="unseenOnly"></param>
        /// <param name="resultType"></param>
        /// <param name="eventName"></param>
        /// <param name="minStatusCode"></param>
        /// <param name="maxStatusCode"></param>
        /// <param name="inboxId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        private void AfterGetAllWebhookResultsDefaultImplementation(IGetAllWebhookResultsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<bool> unseenOnly, Option<string> resultType, Option<string> eventName, Option<int> minStatusCode, Option<int> maxStatusCode, Option<Guid> inboxId, Option<Guid> smsId, Option<Guid> attachmentId, Option<Guid> emailId, Option<Guid> phoneId)
        {
            bool suppressDefaultLog = false;
            AfterGetAllWebhookResults(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="unseenOnly"></param>
        /// <param name="resultType"></param>
        /// <param name="eventName"></param>
        /// <param name="minStatusCode"></param>
        /// <param name="maxStatusCode"></param>
        /// <param name="inboxId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        partial void AfterGetAllWebhookResults(ref bool suppressDefaultLog, IGetAllWebhookResultsApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<bool> unseenOnly, Option<string> resultType, Option<string> eventName, Option<int> minStatusCode, Option<int> maxStatusCode, Option<Guid> inboxId, Option<Guid> smsId, Option<Guid> attachmentId, Option<Guid> emailId, Option<Guid> phoneId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="unseenOnly"></param>
        /// <param name="resultType"></param>
        /// <param name="eventName"></param>
        /// <param name="minStatusCode"></param>
        /// <param name="maxStatusCode"></param>
        /// <param name="inboxId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        private void OnErrorGetAllWebhookResultsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<bool> unseenOnly, Option<string> resultType, Option<string> eventName, Option<int> minStatusCode, Option<int> maxStatusCode, Option<Guid> inboxId, Option<Guid> smsId, Option<Guid> attachmentId, Option<Guid> emailId, Option<Guid> phoneId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllWebhookResults(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="unseenOnly"></param>
        /// <param name="resultType"></param>
        /// <param name="eventName"></param>
        /// <param name="minStatusCode"></param>
        /// <param name="maxStatusCode"></param>
        /// <param name="inboxId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        partial void OnErrorGetAllWebhookResults(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<bool> unseenOnly, Option<string> resultType, Option<string> eventName, Option<int> minStatusCode, Option<int> maxStatusCode, Option<Guid> inboxId, Option<Guid> smsId, Option<Guid> attachmentId, Option<Guid> emailId, Option<Guid> phoneId);

        /// <summary>
        /// Get results for all webhooks 
        /// </summary>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="unseenOnly">Filter for unseen exceptions only (optional)</param>
        /// <param name="resultType">Filter by result type (optional)</param>
        /// <param name="eventName">Filter by event name (optional)</param>
        /// <param name="minStatusCode">Minimum response status (optional)</param>
        /// <param name="maxStatusCode">Maximum response status (optional)</param>
        /// <param name="inboxId">Inbox ID (optional)</param>
        /// <param name="smsId">Sms ID (optional)</param>
        /// <param name="attachmentId">Attachment ID (optional)</param>
        /// <param name="emailId">Email ID (optional)</param>
        /// <param name="phoneId">Phone ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhookResultsApiResponse"/>&gt;</returns>
        public async Task<IGetAllWebhookResultsApiResponse> GetAllWebhookResultsOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<bool> unseenOnly = default, Option<string> resultType = default, Option<string> eventName = default, Option<int> minStatusCode = default, Option<int> maxStatusCode = default, Option<Guid> inboxId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllWebhookResultsAsync(page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get results for all webhooks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="unseenOnly">Filter for unseen exceptions only (optional)</param>
        /// <param name="resultType">Filter by result type (optional)</param>
        /// <param name="eventName">Filter by event name (optional)</param>
        /// <param name="minStatusCode">Minimum response status (optional)</param>
        /// <param name="maxStatusCode">Maximum response status (optional)</param>
        /// <param name="inboxId">Inbox ID (optional)</param>
        /// <param name="smsId">Sms ID (optional)</param>
        /// <param name="attachmentId">Attachment ID (optional)</param>
        /// <param name="emailId">Email ID (optional)</param>
        /// <param name="phoneId">Phone ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhookResultsApiResponse"/>&gt;</returns>
        public async Task<IGetAllWebhookResultsApiResponse> GetAllWebhookResultsAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<bool> unseenOnly = default, Option<string> resultType = default, Option<string> eventName = default, Option<int> minStatusCode = default, Option<int> maxStatusCode = default, Option<Guid> inboxId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllWebhookResults(sort, searchFilter, resultType, eventName);

                FormatGetAllWebhookResults(ref page, ref size, ref sort, ref searchFilter, ref since, ref before, ref unseenOnly, ref resultType, ref eventName, ref minStatusCode, ref maxStatusCode, ref inboxId, ref smsId, ref attachmentId, ref emailId, ref phoneId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/results"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/results");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (unseenOnly.IsSet)
                        parseQueryStringLocalVar["unseenOnly"] = ClientUtils.ParameterToString(unseenOnly.Value);

                    if (resultType.IsSet)
                        parseQueryStringLocalVar["resultType"] = ClientUtils.ParameterToString(resultType.Value);

                    if (eventName.IsSet)
                        parseQueryStringLocalVar["eventName"] = ClientUtils.ParameterToString(eventName.Value);

                    if (minStatusCode.IsSet)
                        parseQueryStringLocalVar["minStatusCode"] = ClientUtils.ParameterToString(minStatusCode.Value);

                    if (maxStatusCode.IsSet)
                        parseQueryStringLocalVar["maxStatusCode"] = ClientUtils.ParameterToString(maxStatusCode.Value);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (smsId.IsSet)
                        parseQueryStringLocalVar["smsId"] = ClientUtils.ParameterToString(smsId.Value);

                    if (attachmentId.IsSet)
                        parseQueryStringLocalVar["attachmentId"] = ClientUtils.ParameterToString(attachmentId.Value);

                    if (emailId.IsSet)
                        parseQueryStringLocalVar["emailId"] = ClientUtils.ParameterToString(emailId.Value);

                    if (phoneId.IsSet)
                        parseQueryStringLocalVar["phoneId"] = ClientUtils.ParameterToString(phoneId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllWebhookResultsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllWebhookResultsApiResponse>();

                        GetAllWebhookResultsApiResponse apiResponseLocalVar = new GetAllWebhookResultsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/results", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllWebhookResultsDefaultImplementation(apiResponseLocalVar, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);

                        Events.ExecuteOnGetAllWebhookResults(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllWebhookResultsDefaultImplementation(e, "/webhooks/results", uriBuilderLocalVar.Path, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);
                Events.ExecuteOnErrorGetAllWebhookResults(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllWebhookResultsApiResponse"/>
        /// </summary>
        public partial class GetAllWebhookResultsApiResponse : mailslurp.Client.ApiResponse, IGetAllWebhookResultsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllWebhookResultsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllWebhookResultsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllWebhookResultsApiResponse(ILogger<GetAllWebhookResultsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageWebhookResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageWebhookResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageWebhookResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllWebhooks(ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<string> searchFilter, ref Option<DateTime> since, ref Option<Guid> inboxId, ref Option<Guid> phoneId, ref Option<DateTime> before, ref Option<string> health, ref Option<string> eventType, ref Option<string> url);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        /// <param name="url"></param>
        /// <returns></returns>
        private void ValidateGetAllWebhooks(Option<string> sort, Option<string> searchFilter, Option<string> health, Option<string> eventType, Option<string> url)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));

            if (health.IsSet && health.Value == null)
                throw new ArgumentNullException(nameof(health));

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType));

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        /// <param name="url"></param>
        private void AfterGetAllWebhooksDefaultImplementation(IGetAllWebhooksApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<Guid> inboxId, Option<Guid> phoneId, Option<DateTime> before, Option<string> health, Option<string> eventType, Option<string> url)
        {
            bool suppressDefaultLog = false;
            AfterGetAllWebhooks(ref suppressDefaultLog, apiResponseLocalVar, page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, url);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        /// <param name="url"></param>
        partial void AfterGetAllWebhooks(ref bool suppressDefaultLog, IGetAllWebhooksApiResponse apiResponseLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<Guid> inboxId, Option<Guid> phoneId, Option<DateTime> before, Option<string> health, Option<string> eventType, Option<string> url);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        /// <param name="url"></param>
        private void OnErrorGetAllWebhooksDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<Guid> inboxId, Option<Guid> phoneId, Option<DateTime> before, Option<string> health, Option<string> eventType, Option<string> url)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllWebhooks(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, url);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneId"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        /// <param name="url"></param>
        partial void OnErrorGetAllWebhooks(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<Guid> inboxId, Option<Guid> phoneId, Option<DateTime> before, Option<string> health, Option<string> eventType, Option<string> url);

        /// <summary>
        /// List Webhooks Paginated List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </summary>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="inboxId">Filter by inboxId (optional)</param>
        /// <param name="phoneId">Filter by phoneId (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="url">Optional url endpoint filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhooksApiResponse"/>&gt;</returns>
        public async Task<IGetAllWebhooksApiResponse> GetAllWebhooksOrDefaultAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, Option<string> url = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllWebhooksAsync(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, url, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Webhooks Paginated List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="inboxId">Filter by inboxId (optional)</param>
        /// <param name="phoneId">Filter by phoneId (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="url">Optional url endpoint filter (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllWebhooksApiResponse"/>&gt;</returns>
        public async Task<IGetAllWebhooksApiResponse> GetAllWebhooksAsync(Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<Guid> inboxId = default, Option<Guid> phoneId = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, Option<string> url = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllWebhooks(sort, searchFilter, health, eventType, url);

                FormatGetAllWebhooks(ref page, ref size, ref sort, ref searchFilter, ref since, ref inboxId, ref phoneId, ref before, ref health, ref eventType, ref url);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/paginated"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/paginated");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (phoneId.IsSet)
                        parseQueryStringLocalVar["phoneId"] = ClientUtils.ParameterToString(phoneId.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (health.IsSet)
                        parseQueryStringLocalVar["health"] = ClientUtils.ParameterToString(health.Value);

                    if (eventType.IsSet)
                        parseQueryStringLocalVar["eventType"] = ClientUtils.ParameterToString(eventType.Value);

                    if (url.IsSet)
                        parseQueryStringLocalVar["url"] = ClientUtils.ParameterToString(url.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllWebhooksApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllWebhooksApiResponse>();

                        GetAllWebhooksApiResponse apiResponseLocalVar = new GetAllWebhooksApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/paginated", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllWebhooksDefaultImplementation(apiResponseLocalVar, page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, url);

                        Events.ExecuteOnGetAllWebhooks(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllWebhooksDefaultImplementation(e, "/webhooks/paginated", uriBuilderLocalVar.Path, page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, url);
                Events.ExecuteOnErrorGetAllWebhooks(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllWebhooksApiResponse"/>
        /// </summary>
        public partial class GetAllWebhooksApiResponse : mailslurp.Client.ApiResponse, IGetAllWebhooksApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllWebhooksApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllWebhooksApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllWebhooksApiResponse(ILogger<GetAllWebhooksApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageWebhookProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageWebhookProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageWebhookProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInboxWebhooksPaginated(ref Guid inboxId, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<string> searchFilter, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> health, ref Option<string> eventType);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        /// <returns></returns>
        private void ValidateGetInboxWebhooksPaginated(Option<string> sort, Option<string> searchFilter, Option<string> health, Option<string> eventType)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));

            if (health.IsSet && health.Value == null)
                throw new ArgumentNullException(nameof(health));

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        private void AfterGetInboxWebhooksPaginatedDefaultImplementation(IGetInboxWebhooksPaginatedApiResponse apiResponseLocalVar, Guid inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<string> health, Option<string> eventType)
        {
            bool suppressDefaultLog = false;
            AfterGetInboxWebhooksPaginated(ref suppressDefaultLog, apiResponseLocalVar, inboxId, page, size, sort, searchFilter, since, before, health, eventType);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        partial void AfterGetInboxWebhooksPaginated(ref bool suppressDefaultLog, IGetInboxWebhooksPaginatedApiResponse apiResponseLocalVar, Guid inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<string> health, Option<string> eventType);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        private void OnErrorGetInboxWebhooksPaginatedDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<string> health, Option<string> eventType)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInboxWebhooksPaginated(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId, page, size, sort, searchFilter, since, before, health, eventType);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="health"></param>
        /// <param name="eventType"></param>
        partial void OnErrorGetInboxWebhooksPaginated(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<string> health, Option<string> eventType);

        /// <summary>
        /// Get paginated webhooks for an Inbox 
        /// </summary>
        /// <param name="inboxId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxWebhooksPaginatedApiResponse"/>&gt;</returns>
        public async Task<IGetInboxWebhooksPaginatedApiResponse> GetInboxWebhooksPaginatedOrDefaultAsync(Guid inboxId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInboxWebhooksPaginatedAsync(inboxId, page, size, sort, searchFilter, since, before, health, eventType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get paginated webhooks for an Inbox 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInboxWebhooksPaginatedApiResponse"/>&gt;</returns>
        public async Task<IGetInboxWebhooksPaginatedApiResponse> GetInboxWebhooksPaginatedAsync(Guid inboxId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> health = default, Option<string> eventType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInboxWebhooksPaginated(sort, searchFilter, health, eventType);

                FormatGetInboxWebhooksPaginated(ref inboxId, ref page, ref size, ref sort, ref searchFilter, ref since, ref before, ref health, ref eventType);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/inboxes/{inboxId}/webhooks/paginated"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/inboxes/{inboxId}/webhooks/paginated");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BinboxId%7D", Uri.EscapeDataString(inboxId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (health.IsSet)
                        parseQueryStringLocalVar["health"] = ClientUtils.ParameterToString(health.Value);

                    if (eventType.IsSet)
                        parseQueryStringLocalVar["eventType"] = ClientUtils.ParameterToString(eventType.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetInboxWebhooksPaginatedApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInboxWebhooksPaginatedApiResponse>();

                        GetInboxWebhooksPaginatedApiResponse apiResponseLocalVar = new GetInboxWebhooksPaginatedApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/inboxes/{inboxId}/webhooks/paginated", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInboxWebhooksPaginatedDefaultImplementation(apiResponseLocalVar, inboxId, page, size, sort, searchFilter, since, before, health, eventType);

                        Events.ExecuteOnGetInboxWebhooksPaginated(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInboxWebhooksPaginatedDefaultImplementation(e, "/inboxes/{inboxId}/webhooks/paginated", uriBuilderLocalVar.Path, inboxId, page, size, sort, searchFilter, since, before, health, eventType);
                Events.ExecuteOnErrorGetInboxWebhooksPaginated(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInboxWebhooksPaginatedApiResponse"/>
        /// </summary>
        public partial class GetInboxWebhooksPaginatedApiResponse : mailslurp.Client.ApiResponse, IGetInboxWebhooksPaginatedApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInboxWebhooksPaginatedApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInboxWebhooksPaginatedApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInboxWebhooksPaginatedApiResponse(ILogger<GetInboxWebhooksPaginatedApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageWebhookProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageWebhookProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageWebhookProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetJsonSchemaForWebhookEvent(ref string varEvent);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="varEvent"></param>
        /// <returns></returns>
        private void ValidateGetJsonSchemaForWebhookEvent(string varEvent)
        {
            if (varEvent == null)
                throw new ArgumentNullException(nameof(varEvent));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="varEvent"></param>
        private void AfterGetJsonSchemaForWebhookEventDefaultImplementation(IGetJsonSchemaForWebhookEventApiResponse apiResponseLocalVar, string varEvent)
        {
            bool suppressDefaultLog = false;
            AfterGetJsonSchemaForWebhookEvent(ref suppressDefaultLog, apiResponseLocalVar, varEvent);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="varEvent"></param>
        partial void AfterGetJsonSchemaForWebhookEvent(ref bool suppressDefaultLog, IGetJsonSchemaForWebhookEventApiResponse apiResponseLocalVar, string varEvent);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="varEvent"></param>
        private void OnErrorGetJsonSchemaForWebhookEventDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string varEvent)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetJsonSchemaForWebhookEvent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, varEvent);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="varEvent"></param>
        partial void OnErrorGetJsonSchemaForWebhookEvent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string varEvent);

        /// <summary>
        ///  Get JSON Schema definition for webhook payload by event
        /// </summary>
        /// <param name="varEvent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonSchemaForWebhookEventApiResponse"/>&gt;</returns>
        public async Task<IGetJsonSchemaForWebhookEventApiResponse> GetJsonSchemaForWebhookEventOrDefaultAsync(string varEvent, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetJsonSchemaForWebhookEventAsync(varEvent, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get JSON Schema definition for webhook payload by event
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonSchemaForWebhookEventApiResponse"/>&gt;</returns>
        public async Task<IGetJsonSchemaForWebhookEventApiResponse> GetJsonSchemaForWebhookEventAsync(string varEvent, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetJsonSchemaForWebhookEvent(varEvent);

                FormatGetJsonSchemaForWebhookEvent(ref varEvent);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/schema"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/schema");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["event"] = ClientUtils.ParameterToString(varEvent);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetJsonSchemaForWebhookEventApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetJsonSchemaForWebhookEventApiResponse>();

                        GetJsonSchemaForWebhookEventApiResponse apiResponseLocalVar = new GetJsonSchemaForWebhookEventApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/schema", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetJsonSchemaForWebhookEventDefaultImplementation(apiResponseLocalVar, varEvent);

                        Events.ExecuteOnGetJsonSchemaForWebhookEvent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetJsonSchemaForWebhookEventDefaultImplementation(e, "/webhooks/schema", uriBuilderLocalVar.Path, varEvent);
                Events.ExecuteOnErrorGetJsonSchemaForWebhookEvent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetJsonSchemaForWebhookEventApiResponse"/>
        /// </summary>
        public partial class GetJsonSchemaForWebhookEventApiResponse : mailslurp.Client.ApiResponse, IGetJsonSchemaForWebhookEventApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetJsonSchemaForWebhookEventApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetJsonSchemaForWebhookEventApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetJsonSchemaForWebhookEventApiResponse(ILogger<GetJsonSchemaForWebhookEventApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.JSONSchemaDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.JSONSchemaDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.JSONSchemaDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetJsonSchemaForWebhookPayload(ref Guid webhookId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        private void AfterGetJsonSchemaForWebhookPayloadDefaultImplementation(IGetJsonSchemaForWebhookPayloadApiResponse apiResponseLocalVar, Guid webhookId)
        {
            bool suppressDefaultLog = false;
            AfterGetJsonSchemaForWebhookPayload(ref suppressDefaultLog, apiResponseLocalVar, webhookId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void AfterGetJsonSchemaForWebhookPayload(ref bool suppressDefaultLog, IGetJsonSchemaForWebhookPayloadApiResponse apiResponseLocalVar, Guid webhookId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        private void OnErrorGetJsonSchemaForWebhookPayloadDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetJsonSchemaForWebhookPayload(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void OnErrorGetJsonSchemaForWebhookPayload(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId);

        /// <summary>
        ///  Get JSON Schema definition for webhook payload
        /// </summary>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonSchemaForWebhookPayloadApiResponse"/>&gt;</returns>
        public async Task<IGetJsonSchemaForWebhookPayloadApiResponse> GetJsonSchemaForWebhookPayloadOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetJsonSchemaForWebhookPayloadAsync(webhookId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get JSON Schema definition for webhook payload
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonSchemaForWebhookPayloadApiResponse"/>&gt;</returns>
        public async Task<IGetJsonSchemaForWebhookPayloadApiResponse> GetJsonSchemaForWebhookPayloadAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetJsonSchemaForWebhookPayload(ref webhookId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/{webhookId}/schema"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/{webhookId}/schema");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetJsonSchemaForWebhookPayloadApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetJsonSchemaForWebhookPayloadApiResponse>();

                        GetJsonSchemaForWebhookPayloadApiResponse apiResponseLocalVar = new GetJsonSchemaForWebhookPayloadApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/{webhookId}/schema", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetJsonSchemaForWebhookPayloadDefaultImplementation(apiResponseLocalVar, webhookId);

                        Events.ExecuteOnGetJsonSchemaForWebhookPayload(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetJsonSchemaForWebhookPayloadDefaultImplementation(e, "/webhooks/{webhookId}/schema", uriBuilderLocalVar.Path, webhookId);
                Events.ExecuteOnErrorGetJsonSchemaForWebhookPayload(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetJsonSchemaForWebhookPayloadApiResponse"/>
        /// </summary>
        public partial class GetJsonSchemaForWebhookPayloadApiResponse : mailslurp.Client.ApiResponse, IGetJsonSchemaForWebhookPayloadApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetJsonSchemaForWebhookPayloadApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetJsonSchemaForWebhookPayloadApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetJsonSchemaForWebhookPayloadApiResponse(ILogger<GetJsonSchemaForWebhookPayloadApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.JSONSchemaDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.JSONSchemaDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.JSONSchemaDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPhoneNumberWebhooksPaginated(ref Guid phoneId, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<string> eventType, ref Option<string> searchFilter, ref Option<string> health);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="eventType"></param>
        /// <param name="searchFilter"></param>
        /// <param name="health"></param>
        /// <returns></returns>
        private void ValidateGetPhoneNumberWebhooksPaginated(Option<string> sort, Option<string> eventType, Option<string> searchFilter, Option<string> health)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));

            if (health.IsSet && health.Value == null)
                throw new ArgumentNullException(nameof(health));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        /// <param name="searchFilter"></param>
        /// <param name="health"></param>
        private void AfterGetPhoneNumberWebhooksPaginatedDefaultImplementation(IGetPhoneNumberWebhooksPaginatedApiResponse apiResponseLocalVar, Guid phoneId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType, Option<string> searchFilter, Option<string> health)
        {
            bool suppressDefaultLog = false;
            AfterGetPhoneNumberWebhooksPaginated(ref suppressDefaultLog, apiResponseLocalVar, phoneId, page, size, sort, since, before, eventType, searchFilter, health);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="phoneId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        /// <param name="searchFilter"></param>
        /// <param name="health"></param>
        partial void AfterGetPhoneNumberWebhooksPaginated(ref bool suppressDefaultLog, IGetPhoneNumberWebhooksPaginatedApiResponse apiResponseLocalVar, Guid phoneId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType, Option<string> searchFilter, Option<string> health);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        /// <param name="searchFilter"></param>
        /// <param name="health"></param>
        private void OnErrorGetPhoneNumberWebhooksPaginatedDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType, Option<string> searchFilter, Option<string> health)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPhoneNumberWebhooksPaginated(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, phoneId, page, size, sort, since, before, eventType, searchFilter, health);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="phoneId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="eventType"></param>
        /// <param name="searchFilter"></param>
        /// <param name="health"></param>
        partial void OnErrorGetPhoneNumberWebhooksPaginated(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid phoneId, Option<int> page, Option<int> size, Option<string> sort, Option<DateTime> since, Option<DateTime> before, Option<string> eventType, Option<string> searchFilter, Option<string> health);

        /// <summary>
        /// Get paginated webhooks for a phone number 
        /// </summary>
        /// <param name="phoneId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberWebhooksPaginatedApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneNumberWebhooksPaginatedApiResponse> GetPhoneNumberWebhooksPaginatedOrDefaultAsync(Guid phoneId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, Option<string> searchFilter = default, Option<string> health = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPhoneNumberWebhooksPaginatedAsync(phoneId, page, size, sort, since, before, eventType, searchFilter, health, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get paginated webhooks for a phone number 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="eventType">Optional event type (optional)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="health">Filter by webhook health (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPhoneNumberWebhooksPaginatedApiResponse"/>&gt;</returns>
        public async Task<IGetPhoneNumberWebhooksPaginatedApiResponse> GetPhoneNumberWebhooksPaginatedAsync(Guid phoneId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<string> eventType = default, Option<string> searchFilter = default, Option<string> health = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPhoneNumberWebhooksPaginated(sort, eventType, searchFilter, health);

                FormatGetPhoneNumberWebhooksPaginated(ref phoneId, ref page, ref size, ref sort, ref since, ref before, ref eventType, ref searchFilter, ref health);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/phone/numbers/{phoneId}/webhooks/paginated"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/phone/numbers/{phoneId}/webhooks/paginated");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BphoneId%7D", Uri.EscapeDataString(phoneId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (eventType.IsSet)
                        parseQueryStringLocalVar["eventType"] = ClientUtils.ParameterToString(eventType.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    if (health.IsSet)
                        parseQueryStringLocalVar["health"] = ClientUtils.ParameterToString(health.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetPhoneNumberWebhooksPaginatedApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPhoneNumberWebhooksPaginatedApiResponse>();

                        GetPhoneNumberWebhooksPaginatedApiResponse apiResponseLocalVar = new GetPhoneNumberWebhooksPaginatedApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/phone/numbers/{phoneId}/webhooks/paginated", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPhoneNumberWebhooksPaginatedDefaultImplementation(apiResponseLocalVar, phoneId, page, size, sort, since, before, eventType, searchFilter, health);

                        Events.ExecuteOnGetPhoneNumberWebhooksPaginated(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPhoneNumberWebhooksPaginatedDefaultImplementation(e, "/phone/numbers/{phoneId}/webhooks/paginated", uriBuilderLocalVar.Path, phoneId, page, size, sort, since, before, eventType, searchFilter, health);
                Events.ExecuteOnErrorGetPhoneNumberWebhooksPaginated(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPhoneNumberWebhooksPaginatedApiResponse"/>
        /// </summary>
        public partial class GetPhoneNumberWebhooksPaginatedApiResponse : mailslurp.Client.ApiResponse, IGetPhoneNumberWebhooksPaginatedApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPhoneNumberWebhooksPaginatedApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPhoneNumberWebhooksPaginatedApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPhoneNumberWebhooksPaginatedApiResponse(ILogger<GetPhoneNumberWebhooksPaginatedApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageWebhookProjection Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageWebhookProjection>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageWebhookProjection result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTestWebhookPayload(ref Option<string> eventName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="eventName"></param>
        /// <returns></returns>
        private void ValidateGetTestWebhookPayload(Option<string> eventName)
        {
            if (eventName.IsSet && eventName.Value == null)
                throw new ArgumentNullException(nameof(eventName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="eventName"></param>
        private void AfterGetTestWebhookPayloadDefaultImplementation(IGetTestWebhookPayloadApiResponse apiResponseLocalVar, Option<string> eventName)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayload(ref suppressDefaultLog, apiResponseLocalVar, eventName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="eventName"></param>
        partial void AfterGetTestWebhookPayload(ref bool suppressDefaultLog, IGetTestWebhookPayloadApiResponse apiResponseLocalVar, Option<string> eventName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="eventName"></param>
        private void OnErrorGetTestWebhookPayloadDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> eventName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayload(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, eventName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="eventName"></param>
        partial void OnErrorGetTestWebhookPayload(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> eventName);

        /// <summary>
        ///  Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
        /// </summary>
        /// <param name="eventName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadApiResponse> GetTestWebhookPayloadOrDefaultAsync(Option<string> eventName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadAsync(eventName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadApiResponse> GetTestWebhookPayloadAsync(Option<string> eventName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTestWebhookPayload(eventName);

                FormatGetTestWebhookPayload(ref eventName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/test"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/test");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (eventName.IsSet)
                        parseQueryStringLocalVar["eventName"] = ClientUtils.ParameterToString(eventName.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadApiResponse>();

                        GetTestWebhookPayloadApiResponse apiResponseLocalVar = new GetTestWebhookPayloadApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/test", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadDefaultImplementation(apiResponseLocalVar, eventName);

                        Events.ExecuteOnGetTestWebhookPayload(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadDefaultImplementation(e, "/webhooks/test", uriBuilderLocalVar.Path, eventName);
                Events.ExecuteOnErrorGetTestWebhookPayload(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadApiResponse(ILogger<GetTestWebhookPayloadApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.AbstractWebhookPayload Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.AbstractWebhookPayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.AbstractWebhookPayload result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTestWebhookPayloadBounceDefaultImplementation(IGetTestWebhookPayloadBounceApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayloadBounce(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTestWebhookPayloadBounce(ref bool suppressDefaultLog, IGetTestWebhookPayloadBounceApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTestWebhookPayloadBounceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayloadBounce(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTestWebhookPayloadBounce(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Get webhook test payload for bounce
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadBounceApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadBounceApiResponse> GetTestWebhookPayloadBounceOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadBounceAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get webhook test payload for bounce
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadBounceApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadBounceApiResponse> GetTestWebhookPayloadBounceAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/test/email-bounce-payload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/test/email-bounce-payload");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadBounceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadBounceApiResponse>();

                        GetTestWebhookPayloadBounceApiResponse apiResponseLocalVar = new GetTestWebhookPayloadBounceApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/test/email-bounce-payload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadBounceDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTestWebhookPayloadBounce(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadBounceDefaultImplementation(e, "/webhooks/test/email-bounce-payload", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTestWebhookPayloadBounce(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadBounceApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadBounceApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadBounceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadBounceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadBounceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadBounceApiResponse(ILogger<GetTestWebhookPayloadBounceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookBouncePayload Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookBouncePayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookBouncePayload result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTestWebhookPayloadBounceRecipientDefaultImplementation(IGetTestWebhookPayloadBounceRecipientApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayloadBounceRecipient(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTestWebhookPayloadBounceRecipient(ref bool suppressDefaultLog, IGetTestWebhookPayloadBounceRecipientApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTestWebhookPayloadBounceRecipientDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayloadBounceRecipient(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTestWebhookPayloadBounceRecipient(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Get webhook test payload for bounce recipient
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadBounceRecipientApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadBounceRecipientApiResponse> GetTestWebhookPayloadBounceRecipientOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadBounceRecipientAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get webhook test payload for bounce recipient
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadBounceRecipientApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadBounceRecipientApiResponse> GetTestWebhookPayloadBounceRecipientAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/test/email-bounce-recipient-payload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/test/email-bounce-recipient-payload");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadBounceRecipientApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadBounceRecipientApiResponse>();

                        GetTestWebhookPayloadBounceRecipientApiResponse apiResponseLocalVar = new GetTestWebhookPayloadBounceRecipientApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/test/email-bounce-recipient-payload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadBounceRecipientDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTestWebhookPayloadBounceRecipient(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadBounceRecipientDefaultImplementation(e, "/webhooks/test/email-bounce-recipient-payload", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTestWebhookPayloadBounceRecipient(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadBounceRecipientApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadBounceRecipientApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadBounceRecipientApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadBounceRecipientApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadBounceRecipientApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadBounceRecipientApiResponse(ILogger<GetTestWebhookPayloadBounceRecipientApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookBounceRecipientPayload Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookBounceRecipientPayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookBounceRecipientPayload result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTestWebhookPayloadDeliveryStatusDefaultImplementation(IGetTestWebhookPayloadDeliveryStatusApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayloadDeliveryStatus(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTestWebhookPayloadDeliveryStatus(ref bool suppressDefaultLog, IGetTestWebhookPayloadDeliveryStatusApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTestWebhookPayloadDeliveryStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayloadDeliveryStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTestWebhookPayloadDeliveryStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get webhook test payload for delivery status event 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadDeliveryStatusApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadDeliveryStatusApiResponse> GetTestWebhookPayloadDeliveryStatusOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadDeliveryStatusAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get webhook test payload for delivery status event 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadDeliveryStatusApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadDeliveryStatusApiResponse> GetTestWebhookPayloadDeliveryStatusAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/test/delivery-status-payload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/test/delivery-status-payload");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadDeliveryStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadDeliveryStatusApiResponse>();

                        GetTestWebhookPayloadDeliveryStatusApiResponse apiResponseLocalVar = new GetTestWebhookPayloadDeliveryStatusApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/test/delivery-status-payload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadDeliveryStatusDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTestWebhookPayloadDeliveryStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadDeliveryStatusDefaultImplementation(e, "/webhooks/test/delivery-status-payload", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTestWebhookPayloadDeliveryStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadDeliveryStatusApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadDeliveryStatusApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadDeliveryStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadDeliveryStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadDeliveryStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadDeliveryStatusApiResponse(ILogger<GetTestWebhookPayloadDeliveryStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookDeliveryStatusPayload Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookDeliveryStatusPayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookDeliveryStatusPayload result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTestWebhookPayloadEmailOpenedDefaultImplementation(IGetTestWebhookPayloadEmailOpenedApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayloadEmailOpened(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTestWebhookPayloadEmailOpened(ref bool suppressDefaultLog, IGetTestWebhookPayloadEmailOpenedApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTestWebhookPayloadEmailOpenedDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayloadEmailOpened(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTestWebhookPayloadEmailOpened(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Get webhook test payload for email opened event
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadEmailOpenedApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadEmailOpenedApiResponse> GetTestWebhookPayloadEmailOpenedOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadEmailOpenedAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get webhook test payload for email opened event
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadEmailOpenedApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadEmailOpenedApiResponse> GetTestWebhookPayloadEmailOpenedAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/test/email-opened-payload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/test/email-opened-payload");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadEmailOpenedApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadEmailOpenedApiResponse>();

                        GetTestWebhookPayloadEmailOpenedApiResponse apiResponseLocalVar = new GetTestWebhookPayloadEmailOpenedApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/test/email-opened-payload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadEmailOpenedDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTestWebhookPayloadEmailOpened(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadEmailOpenedDefaultImplementation(e, "/webhooks/test/email-opened-payload", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTestWebhookPayloadEmailOpened(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadEmailOpenedApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadEmailOpenedApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadEmailOpenedApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadEmailOpenedApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadEmailOpenedApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadEmailOpenedApiResponse(ILogger<GetTestWebhookPayloadEmailOpenedApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookEmailOpenedPayload Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookEmailOpenedPayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookEmailOpenedPayload result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTestWebhookPayloadEmailReadDefaultImplementation(IGetTestWebhookPayloadEmailReadApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayloadEmailRead(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTestWebhookPayloadEmailRead(ref bool suppressDefaultLog, IGetTestWebhookPayloadEmailReadApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTestWebhookPayloadEmailReadDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayloadEmailRead(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTestWebhookPayloadEmailRead(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Get webhook test payload for email opened event
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadEmailReadApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadEmailReadApiResponse> GetTestWebhookPayloadEmailReadOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadEmailReadAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get webhook test payload for email opened event
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadEmailReadApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadEmailReadApiResponse> GetTestWebhookPayloadEmailReadAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/test/email-read-payload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/test/email-read-payload");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadEmailReadApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadEmailReadApiResponse>();

                        GetTestWebhookPayloadEmailReadApiResponse apiResponseLocalVar = new GetTestWebhookPayloadEmailReadApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/test/email-read-payload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadEmailReadDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTestWebhookPayloadEmailRead(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadEmailReadDefaultImplementation(e, "/webhooks/test/email-read-payload", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTestWebhookPayloadEmailRead(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadEmailReadApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadEmailReadApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadEmailReadApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadEmailReadApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadEmailReadApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadEmailReadApiResponse(ILogger<GetTestWebhookPayloadEmailReadApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookEmailReadPayload Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookEmailReadPayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookEmailReadPayload result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTestWebhookPayloadForWebhook(ref Guid webhookId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        private void AfterGetTestWebhookPayloadForWebhookDefaultImplementation(IGetTestWebhookPayloadForWebhookApiResponse apiResponseLocalVar, Guid webhookId)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayloadForWebhook(ref suppressDefaultLog, apiResponseLocalVar, webhookId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void AfterGetTestWebhookPayloadForWebhook(ref bool suppressDefaultLog, IGetTestWebhookPayloadForWebhookApiResponse apiResponseLocalVar, Guid webhookId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        private void OnErrorGetTestWebhookPayloadForWebhookDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayloadForWebhook(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void OnErrorGetTestWebhookPayloadForWebhook(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId);

        /// <summary>
        ///  Get example payload for webhook
        /// </summary>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadForWebhookApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadForWebhookApiResponse> GetTestWebhookPayloadForWebhookOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadForWebhookAsync(webhookId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get example payload for webhook
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadForWebhookApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadForWebhookApiResponse> GetTestWebhookPayloadForWebhookAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetTestWebhookPayloadForWebhook(ref webhookId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/{webhookId}/example"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/{webhookId}/example");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadForWebhookApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadForWebhookApiResponse>();

                        GetTestWebhookPayloadForWebhookApiResponse apiResponseLocalVar = new GetTestWebhookPayloadForWebhookApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/{webhookId}/example", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadForWebhookDefaultImplementation(apiResponseLocalVar, webhookId);

                        Events.ExecuteOnGetTestWebhookPayloadForWebhook(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadForWebhookDefaultImplementation(e, "/webhooks/{webhookId}/example", uriBuilderLocalVar.Path, webhookId);
                Events.ExecuteOnErrorGetTestWebhookPayloadForWebhook(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadForWebhookApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadForWebhookApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadForWebhookApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadForWebhookApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadForWebhookApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadForWebhookApiResponse(ILogger<GetTestWebhookPayloadForWebhookApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.AbstractWebhookPayload Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.AbstractWebhookPayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.AbstractWebhookPayload result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTestWebhookPayloadNewAttachmentDefaultImplementation(IGetTestWebhookPayloadNewAttachmentApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayloadNewAttachment(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTestWebhookPayloadNewAttachment(ref bool suppressDefaultLog, IGetTestWebhookPayloadNewAttachmentApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTestWebhookPayloadNewAttachmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayloadNewAttachment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTestWebhookPayloadNewAttachment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get webhook test payload for new attachment event 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewAttachmentApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadNewAttachmentApiResponse> GetTestWebhookPayloadNewAttachmentOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadNewAttachmentAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get webhook test payload for new attachment event 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewAttachmentApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadNewAttachmentApiResponse> GetTestWebhookPayloadNewAttachmentAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/test/new-attachment-payload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/test/new-attachment-payload");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadNewAttachmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadNewAttachmentApiResponse>();

                        GetTestWebhookPayloadNewAttachmentApiResponse apiResponseLocalVar = new GetTestWebhookPayloadNewAttachmentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/test/new-attachment-payload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadNewAttachmentDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTestWebhookPayloadNewAttachment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadNewAttachmentDefaultImplementation(e, "/webhooks/test/new-attachment-payload", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTestWebhookPayloadNewAttachment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadNewAttachmentApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadNewAttachmentApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadNewAttachmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadNewAttachmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadNewAttachmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadNewAttachmentApiResponse(ILogger<GetTestWebhookPayloadNewAttachmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookNewAttachmentPayload Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookNewAttachmentPayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookNewAttachmentPayload result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTestWebhookPayloadNewContactDefaultImplementation(IGetTestWebhookPayloadNewContactApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayloadNewContact(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTestWebhookPayloadNewContact(ref bool suppressDefaultLog, IGetTestWebhookPayloadNewContactApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTestWebhookPayloadNewContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayloadNewContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTestWebhookPayloadNewContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get webhook test payload for new contact event 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewContactApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadNewContactApiResponse> GetTestWebhookPayloadNewContactOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadNewContactAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get webhook test payload for new contact event 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewContactApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadNewContactApiResponse> GetTestWebhookPayloadNewContactAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/test/new-contact-payload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/test/new-contact-payload");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadNewContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadNewContactApiResponse>();

                        GetTestWebhookPayloadNewContactApiResponse apiResponseLocalVar = new GetTestWebhookPayloadNewContactApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/test/new-contact-payload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadNewContactDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTestWebhookPayloadNewContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadNewContactDefaultImplementation(e, "/webhooks/test/new-contact-payload", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTestWebhookPayloadNewContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadNewContactApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadNewContactApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadNewContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadNewContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadNewContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadNewContactApiResponse(ILogger<GetTestWebhookPayloadNewContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookNewContactPayload Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookNewContactPayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookNewContactPayload result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTestWebhookPayloadNewEmailDefaultImplementation(IGetTestWebhookPayloadNewEmailApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayloadNewEmail(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTestWebhookPayloadNewEmail(ref bool suppressDefaultLog, IGetTestWebhookPayloadNewEmailApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTestWebhookPayloadNewEmailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayloadNewEmail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTestWebhookPayloadNewEmail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get webhook test payload for new email event 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewEmailApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadNewEmailApiResponse> GetTestWebhookPayloadNewEmailOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadNewEmailAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get webhook test payload for new email event 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewEmailApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadNewEmailApiResponse> GetTestWebhookPayloadNewEmailAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/test/new-email-payload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/test/new-email-payload");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadNewEmailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadNewEmailApiResponse>();

                        GetTestWebhookPayloadNewEmailApiResponse apiResponseLocalVar = new GetTestWebhookPayloadNewEmailApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/test/new-email-payload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadNewEmailDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTestWebhookPayloadNewEmail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadNewEmailDefaultImplementation(e, "/webhooks/test/new-email-payload", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTestWebhookPayloadNewEmail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadNewEmailApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadNewEmailApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadNewEmailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadNewEmailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadNewEmailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadNewEmailApiResponse(ILogger<GetTestWebhookPayloadNewEmailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookNewEmailPayload Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookNewEmailPayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookNewEmailPayload result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTestWebhookPayloadNewSmsDefaultImplementation(IGetTestWebhookPayloadNewSmsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTestWebhookPayloadNewSms(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTestWebhookPayloadNewSms(ref bool suppressDefaultLog, IGetTestWebhookPayloadNewSmsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTestWebhookPayloadNewSmsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTestWebhookPayloadNewSms(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTestWebhookPayloadNewSms(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get webhook test payload for new sms event 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewSmsApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadNewSmsApiResponse> GetTestWebhookPayloadNewSmsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTestWebhookPayloadNewSmsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get webhook test payload for new sms event 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTestWebhookPayloadNewSmsApiResponse"/>&gt;</returns>
        public async Task<IGetTestWebhookPayloadNewSmsApiResponse> GetTestWebhookPayloadNewSmsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/test/new-sms-payload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/test/new-sms-payload");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTestWebhookPayloadNewSmsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTestWebhookPayloadNewSmsApiResponse>();

                        GetTestWebhookPayloadNewSmsApiResponse apiResponseLocalVar = new GetTestWebhookPayloadNewSmsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/test/new-sms-payload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTestWebhookPayloadNewSmsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTestWebhookPayloadNewSms(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTestWebhookPayloadNewSmsDefaultImplementation(e, "/webhooks/test/new-sms-payload", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTestWebhookPayloadNewSms(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTestWebhookPayloadNewSmsApiResponse"/>
        /// </summary>
        public partial class GetTestWebhookPayloadNewSmsApiResponse : mailslurp.Client.ApiResponse, IGetTestWebhookPayloadNewSmsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTestWebhookPayloadNewSmsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTestWebhookPayloadNewSmsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTestWebhookPayloadNewSmsApiResponse(ILogger<GetTestWebhookPayloadNewSmsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookNewSmsPayload Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookNewSmsPayload>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookNewSmsPayload result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWebhook(ref Guid webhookId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        private void AfterGetWebhookDefaultImplementation(IGetWebhookApiResponse apiResponseLocalVar, Guid webhookId)
        {
            bool suppressDefaultLog = false;
            AfterGetWebhook(ref suppressDefaultLog, apiResponseLocalVar, webhookId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void AfterGetWebhook(ref bool suppressDefaultLog, IGetWebhookApiResponse apiResponseLocalVar, Guid webhookId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        private void OnErrorGetWebhookDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWebhook(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void OnErrorGetWebhook(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId);

        /// <summary>
        /// Get a webhook 
        /// </summary>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookApiResponse"/>&gt;</returns>
        public async Task<IGetWebhookApiResponse> GetWebhookOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWebhookAsync(webhookId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a webhook 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookApiResponse"/>&gt;</returns>
        public async Task<IGetWebhookApiResponse> GetWebhookAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetWebhook(ref webhookId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/{webhookId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/{webhookId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetWebhookApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWebhookApiResponse>();

                        GetWebhookApiResponse apiResponseLocalVar = new GetWebhookApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/{webhookId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWebhookDefaultImplementation(apiResponseLocalVar, webhookId);

                        Events.ExecuteOnGetWebhook(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWebhookDefaultImplementation(e, "/webhooks/{webhookId}", uriBuilderLocalVar.Path, webhookId);
                Events.ExecuteOnErrorGetWebhook(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWebhookApiResponse"/>
        /// </summary>
        public partial class GetWebhookApiResponse : mailslurp.Client.ApiResponse, IGetWebhookApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWebhookApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWebhookApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWebhookApiResponse(ILogger<GetWebhookApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWebhookResult(ref Guid webhookResultId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookResultId"></param>
        private void AfterGetWebhookResultDefaultImplementation(IGetWebhookResultApiResponse apiResponseLocalVar, Guid webhookResultId)
        {
            bool suppressDefaultLog = false;
            AfterGetWebhookResult(ref suppressDefaultLog, apiResponseLocalVar, webhookResultId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookResultId"></param>
        partial void AfterGetWebhookResult(ref bool suppressDefaultLog, IGetWebhookResultApiResponse apiResponseLocalVar, Guid webhookResultId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookResultId"></param>
        private void OnErrorGetWebhookResultDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookResultId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWebhookResult(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookResultId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookResultId"></param>
        partial void OnErrorGetWebhookResult(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookResultId);

        /// <summary>
        /// Get a webhook result for a webhook 
        /// </summary>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultApiResponse"/>&gt;</returns>
        public async Task<IGetWebhookResultApiResponse> GetWebhookResultOrDefaultAsync(Guid webhookResultId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWebhookResultAsync(webhookResultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a webhook result for a webhook 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultApiResponse"/>&gt;</returns>
        public async Task<IGetWebhookResultApiResponse> GetWebhookResultAsync(Guid webhookResultId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetWebhookResult(ref webhookResultId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/results/{webhookResultId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/results/{webhookResultId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookResultId%7D", Uri.EscapeDataString(webhookResultId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetWebhookResultApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWebhookResultApiResponse>();

                        GetWebhookResultApiResponse apiResponseLocalVar = new GetWebhookResultApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/results/{webhookResultId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWebhookResultDefaultImplementation(apiResponseLocalVar, webhookResultId);

                        Events.ExecuteOnGetWebhookResult(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWebhookResultDefaultImplementation(e, "/webhooks/results/{webhookResultId}", uriBuilderLocalVar.Path, webhookResultId);
                Events.ExecuteOnErrorGetWebhookResult(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWebhookResultApiResponse"/>
        /// </summary>
        public partial class GetWebhookResultApiResponse : mailslurp.Client.ApiResponse, IGetWebhookResultApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWebhookResultApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWebhookResultApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWebhookResultApiResponse(ILogger<GetWebhookResultApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookResultDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookResultDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookResultDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWebhookResults(ref Guid webhookId, ref Option<int> page, ref Option<int> size, ref Option<string> sort, ref Option<string> searchFilter, ref Option<DateTime> since, ref Option<DateTime> before, ref Option<bool> unseenOnly, ref Option<string> resultType, ref Option<string> eventName, ref Option<int> minStatusCode, ref Option<int> maxStatusCode, ref Option<Guid> inboxId, ref Option<Guid> smsId, ref Option<Guid> attachmentId, ref Option<Guid> emailId, ref Option<Guid> phoneId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="resultType"></param>
        /// <param name="eventName"></param>
        /// <returns></returns>
        private void ValidateGetWebhookResults(Option<string> sort, Option<string> searchFilter, Option<string> resultType, Option<string> eventName)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (searchFilter.IsSet && searchFilter.Value == null)
                throw new ArgumentNullException(nameof(searchFilter));

            if (resultType.IsSet && resultType.Value == null)
                throw new ArgumentNullException(nameof(resultType));

            if (eventName.IsSet && eventName.Value == null)
                throw new ArgumentNullException(nameof(eventName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="unseenOnly"></param>
        /// <param name="resultType"></param>
        /// <param name="eventName"></param>
        /// <param name="minStatusCode"></param>
        /// <param name="maxStatusCode"></param>
        /// <param name="inboxId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        private void AfterGetWebhookResultsDefaultImplementation(IGetWebhookResultsApiResponse apiResponseLocalVar, Guid webhookId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<bool> unseenOnly, Option<string> resultType, Option<string> eventName, Option<int> minStatusCode, Option<int> maxStatusCode, Option<Guid> inboxId, Option<Guid> smsId, Option<Guid> attachmentId, Option<Guid> emailId, Option<Guid> phoneId)
        {
            bool suppressDefaultLog = false;
            AfterGetWebhookResults(ref suppressDefaultLog, apiResponseLocalVar, webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="unseenOnly"></param>
        /// <param name="resultType"></param>
        /// <param name="eventName"></param>
        /// <param name="minStatusCode"></param>
        /// <param name="maxStatusCode"></param>
        /// <param name="inboxId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        partial void AfterGetWebhookResults(ref bool suppressDefaultLog, IGetWebhookResultsApiResponse apiResponseLocalVar, Guid webhookId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<bool> unseenOnly, Option<string> resultType, Option<string> eventName, Option<int> minStatusCode, Option<int> maxStatusCode, Option<Guid> inboxId, Option<Guid> smsId, Option<Guid> attachmentId, Option<Guid> emailId, Option<Guid> phoneId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="unseenOnly"></param>
        /// <param name="resultType"></param>
        /// <param name="eventName"></param>
        /// <param name="minStatusCode"></param>
        /// <param name="maxStatusCode"></param>
        /// <param name="inboxId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        private void OnErrorGetWebhookResultsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<bool> unseenOnly, Option<string> resultType, Option<string> eventName, Option<int> minStatusCode, Option<int> maxStatusCode, Option<Guid> inboxId, Option<Guid> smsId, Option<Guid> attachmentId, Option<Guid> emailId, Option<Guid> phoneId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWebhookResults(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="searchFilter"></param>
        /// <param name="since"></param>
        /// <param name="before"></param>
        /// <param name="unseenOnly"></param>
        /// <param name="resultType"></param>
        /// <param name="eventName"></param>
        /// <param name="minStatusCode"></param>
        /// <param name="maxStatusCode"></param>
        /// <param name="inboxId"></param>
        /// <param name="smsId"></param>
        /// <param name="attachmentId"></param>
        /// <param name="emailId"></param>
        /// <param name="phoneId"></param>
        partial void OnErrorGetWebhookResults(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId, Option<int> page, Option<int> size, Option<string> sort, Option<string> searchFilter, Option<DateTime> since, Option<DateTime> before, Option<bool> unseenOnly, Option<string> resultType, Option<string> eventName, Option<int> minStatusCode, Option<int> maxStatusCode, Option<Guid> inboxId, Option<Guid> smsId, Option<Guid> attachmentId, Option<Guid> emailId, Option<Guid> phoneId);

        /// <summary>
        /// Get a webhook results for a webhook 
        /// </summary>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="unseenOnly">Filter for unseen exceptions only (optional)</param>
        /// <param name="resultType">Filter by result type (optional)</param>
        /// <param name="eventName">Filter by event name (optional)</param>
        /// <param name="minStatusCode">Minimum response status (optional)</param>
        /// <param name="maxStatusCode">Maximum response status (optional)</param>
        /// <param name="inboxId">Inbox ID (optional)</param>
        /// <param name="smsId">Sms ID (optional)</param>
        /// <param name="attachmentId">Attachment ID (optional)</param>
        /// <param name="emailId">Email ID (optional)</param>
        /// <param name="phoneId">Phone ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsApiResponse"/>&gt;</returns>
        public async Task<IGetWebhookResultsApiResponse> GetWebhookResultsOrDefaultAsync(Guid webhookId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<bool> unseenOnly = default, Option<string> resultType = default, Option<string> eventName = default, Option<int> minStatusCode = default, Option<int> maxStatusCode = default, Option<Guid> inboxId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWebhookResultsAsync(webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a webhook results for a webhook 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="since">Filter by created at after the given timestamp (optional)</param>
        /// <param name="before">Filter by created at before the given timestamp (optional)</param>
        /// <param name="unseenOnly">Filter for unseen exceptions only (optional)</param>
        /// <param name="resultType">Filter by result type (optional)</param>
        /// <param name="eventName">Filter by event name (optional)</param>
        /// <param name="minStatusCode">Minimum response status (optional)</param>
        /// <param name="maxStatusCode">Maximum response status (optional)</param>
        /// <param name="inboxId">Inbox ID (optional)</param>
        /// <param name="smsId">Sms ID (optional)</param>
        /// <param name="attachmentId">Attachment ID (optional)</param>
        /// <param name="emailId">Email ID (optional)</param>
        /// <param name="phoneId">Phone ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsApiResponse"/>&gt;</returns>
        public async Task<IGetWebhookResultsApiResponse> GetWebhookResultsAsync(Guid webhookId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, Option<string> searchFilter = default, Option<DateTime> since = default, Option<DateTime> before = default, Option<bool> unseenOnly = default, Option<string> resultType = default, Option<string> eventName = default, Option<int> minStatusCode = default, Option<int> maxStatusCode = default, Option<Guid> inboxId = default, Option<Guid> smsId = default, Option<Guid> attachmentId = default, Option<Guid> emailId = default, Option<Guid> phoneId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetWebhookResults(sort, searchFilter, resultType, eventName);

                FormatGetWebhookResults(ref webhookId, ref page, ref size, ref sort, ref searchFilter, ref since, ref before, ref unseenOnly, ref resultType, ref eventName, ref minStatusCode, ref maxStatusCode, ref inboxId, ref smsId, ref attachmentId, ref emailId, ref phoneId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/{webhookId}/results"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/{webhookId}/results");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (searchFilter.IsSet)
                        parseQueryStringLocalVar["searchFilter"] = ClientUtils.ParameterToString(searchFilter.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    if (unseenOnly.IsSet)
                        parseQueryStringLocalVar["unseenOnly"] = ClientUtils.ParameterToString(unseenOnly.Value);

                    if (resultType.IsSet)
                        parseQueryStringLocalVar["resultType"] = ClientUtils.ParameterToString(resultType.Value);

                    if (eventName.IsSet)
                        parseQueryStringLocalVar["eventName"] = ClientUtils.ParameterToString(eventName.Value);

                    if (minStatusCode.IsSet)
                        parseQueryStringLocalVar["minStatusCode"] = ClientUtils.ParameterToString(minStatusCode.Value);

                    if (maxStatusCode.IsSet)
                        parseQueryStringLocalVar["maxStatusCode"] = ClientUtils.ParameterToString(maxStatusCode.Value);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (smsId.IsSet)
                        parseQueryStringLocalVar["smsId"] = ClientUtils.ParameterToString(smsId.Value);

                    if (attachmentId.IsSet)
                        parseQueryStringLocalVar["attachmentId"] = ClientUtils.ParameterToString(attachmentId.Value);

                    if (emailId.IsSet)
                        parseQueryStringLocalVar["emailId"] = ClientUtils.ParameterToString(emailId.Value);

                    if (phoneId.IsSet)
                        parseQueryStringLocalVar["phoneId"] = ClientUtils.ParameterToString(phoneId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetWebhookResultsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWebhookResultsApiResponse>();

                        GetWebhookResultsApiResponse apiResponseLocalVar = new GetWebhookResultsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/{webhookId}/results", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWebhookResultsDefaultImplementation(apiResponseLocalVar, webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);

                        Events.ExecuteOnGetWebhookResults(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWebhookResultsDefaultImplementation(e, "/webhooks/{webhookId}/results", uriBuilderLocalVar.Path, webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId);
                Events.ExecuteOnErrorGetWebhookResults(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWebhookResultsApiResponse"/>
        /// </summary>
        public partial class GetWebhookResultsApiResponse : mailslurp.Client.ApiResponse, IGetWebhookResultsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWebhookResultsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWebhookResultsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWebhookResultsApiResponse(ILogger<GetWebhookResultsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.PageWebhookResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.PageWebhookResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.PageWebhookResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWebhookResultsCount(ref Guid webhookId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        private void AfterGetWebhookResultsCountDefaultImplementation(IGetWebhookResultsCountApiResponse apiResponseLocalVar, Guid webhookId)
        {
            bool suppressDefaultLog = false;
            AfterGetWebhookResultsCount(ref suppressDefaultLog, apiResponseLocalVar, webhookId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void AfterGetWebhookResultsCount(ref bool suppressDefaultLog, IGetWebhookResultsCountApiResponse apiResponseLocalVar, Guid webhookId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        private void OnErrorGetWebhookResultsCountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWebhookResultsCount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void OnErrorGetWebhookResultsCount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId);

        /// <summary>
        /// Get a webhook results count for a webhook 
        /// </summary>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsCountApiResponse"/>&gt;</returns>
        public async Task<IGetWebhookResultsCountApiResponse> GetWebhookResultsCountOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWebhookResultsCountAsync(webhookId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a webhook results count for a webhook 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsCountApiResponse"/>&gt;</returns>
        public async Task<IGetWebhookResultsCountApiResponse> GetWebhookResultsCountAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetWebhookResultsCount(ref webhookId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/{webhookId}/results/count"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/{webhookId}/results/count");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetWebhookResultsCountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWebhookResultsCountApiResponse>();

                        GetWebhookResultsCountApiResponse apiResponseLocalVar = new GetWebhookResultsCountApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/{webhookId}/results/count", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWebhookResultsCountDefaultImplementation(apiResponseLocalVar, webhookId);

                        Events.ExecuteOnGetWebhookResultsCount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWebhookResultsCountDefaultImplementation(e, "/webhooks/{webhookId}/results/count", uriBuilderLocalVar.Path, webhookId);
                Events.ExecuteOnErrorGetWebhookResultsCount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWebhookResultsCountApiResponse"/>
        /// </summary>
        public partial class GetWebhookResultsCountApiResponse : mailslurp.Client.ApiResponse, IGetWebhookResultsCountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWebhookResultsCountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWebhookResultsCountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWebhookResultsCountApiResponse(ILogger<GetWebhookResultsCountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.CountDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.CountDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.CountDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetWebhookResultsUnseenErrorCountDefaultImplementation(IGetWebhookResultsUnseenErrorCountApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetWebhookResultsUnseenErrorCount(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetWebhookResultsUnseenErrorCount(ref bool suppressDefaultLog, IGetWebhookResultsUnseenErrorCountApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetWebhookResultsUnseenErrorCountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWebhookResultsUnseenErrorCount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetWebhookResultsUnseenErrorCount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get count of unseen webhook results with error status 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsUnseenErrorCountApiResponse"/>&gt;</returns>
        public async Task<IGetWebhookResultsUnseenErrorCountApiResponse> GetWebhookResultsUnseenErrorCountOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWebhookResultsUnseenErrorCountAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get count of unseen webhook results with error status 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhookResultsUnseenErrorCountApiResponse"/>&gt;</returns>
        public async Task<IGetWebhookResultsUnseenErrorCountApiResponse> GetWebhookResultsUnseenErrorCountAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/results/unseen-count"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/results/unseen-count");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetWebhookResultsUnseenErrorCountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWebhookResultsUnseenErrorCountApiResponse>();

                        GetWebhookResultsUnseenErrorCountApiResponse apiResponseLocalVar = new GetWebhookResultsUnseenErrorCountApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/results/unseen-count", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWebhookResultsUnseenErrorCountDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetWebhookResultsUnseenErrorCount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWebhookResultsUnseenErrorCountDefaultImplementation(e, "/webhooks/results/unseen-count", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetWebhookResultsUnseenErrorCount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWebhookResultsUnseenErrorCountApiResponse"/>
        /// </summary>
        public partial class GetWebhookResultsUnseenErrorCountApiResponse : mailslurp.Client.ApiResponse, IGetWebhookResultsUnseenErrorCountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWebhookResultsUnseenErrorCountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWebhookResultsUnseenErrorCountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWebhookResultsUnseenErrorCountApiResponse(ILogger<GetWebhookResultsUnseenErrorCountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.UnseenErrorCountDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.UnseenErrorCountDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.UnseenErrorCountDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWebhooks(ref Guid inboxId, ref Option<int> page, ref Option<int> size, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetWebhooks(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        private void AfterGetWebhooksDefaultImplementation(IGetWebhooksApiResponse apiResponseLocalVar, Guid inboxId, Option<int> page, Option<int> size, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetWebhooks(ref suppressDefaultLog, apiResponseLocalVar, inboxId, page, size, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        partial void AfterGetWebhooks(ref bool suppressDefaultLog, IGetWebhooksApiResponse apiResponseLocalVar, Guid inboxId, Option<int> page, Option<int> size, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        private void OnErrorGetWebhooksDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, Option<int> page, Option<int> size, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWebhooks(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, inboxId, page, size, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="inboxId"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetWebhooks(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid inboxId, Option<int> page, Option<int> size, Option<string> sort);

        /// <summary>
        /// Get all webhooks for an Inbox 
        /// </summary>
        /// <param name="inboxId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhooksApiResponse"/>&gt;</returns>
        public async Task<IGetWebhooksApiResponse> GetWebhooksOrDefaultAsync(Guid inboxId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWebhooksAsync(inboxId, page, size, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all webhooks for an Inbox 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId"></param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebhooksApiResponse"/>&gt;</returns>
        public async Task<IGetWebhooksApiResponse> GetWebhooksAsync(Guid inboxId, Option<int> page = default, Option<int> size = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetWebhooks(sort);

                FormatGetWebhooks(ref inboxId, ref page, ref size, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/inboxes/{inboxId}/webhooks"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/inboxes/{inboxId}/webhooks");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BinboxId%7D", Uri.EscapeDataString(inboxId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetWebhooksApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWebhooksApiResponse>();

                        GetWebhooksApiResponse apiResponseLocalVar = new GetWebhooksApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/inboxes/{inboxId}/webhooks", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWebhooksDefaultImplementation(apiResponseLocalVar, inboxId, page, size, sort);

                        Events.ExecuteOnGetWebhooks(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWebhooksDefaultImplementation(e, "/inboxes/{inboxId}/webhooks", uriBuilderLocalVar.Path, inboxId, page, size, sort);
                Events.ExecuteOnErrorGetWebhooks(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWebhooksApiResponse"/>
        /// </summary>
        public partial class GetWebhooksApiResponse : mailslurp.Client.ApiResponse, IGetWebhooksApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWebhooksApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWebhooksApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWebhooksApiResponse(ILogger<GetWebhooksApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<WebhookProjection> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<WebhookProjection>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<WebhookProjection> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterRedriveAllWebhookResultsDefaultImplementation(IRedriveAllWebhookResultsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterRedriveAllWebhookResults(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterRedriveAllWebhookResults(ref bool suppressDefaultLog, IRedriveAllWebhookResultsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorRedriveAllWebhookResultsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRedriveAllWebhookResults(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorRedriveAllWebhookResults(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Redrive all webhook results that have failed status Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRedriveAllWebhookResultsApiResponse"/>&gt;</returns>
        public async Task<IRedriveAllWebhookResultsApiResponse> RedriveAllWebhookResultsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RedriveAllWebhookResultsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Redrive all webhook results that have failed status Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRedriveAllWebhookResultsApiResponse"/>&gt;</returns>
        public async Task<IRedriveAllWebhookResultsApiResponse> RedriveAllWebhookResultsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/results/redrive"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/results/redrive");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<RedriveAllWebhookResultsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RedriveAllWebhookResultsApiResponse>();

                        RedriveAllWebhookResultsApiResponse apiResponseLocalVar = new RedriveAllWebhookResultsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/results/redrive", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRedriveAllWebhookResultsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnRedriveAllWebhookResults(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRedriveAllWebhookResultsDefaultImplementation(e, "/webhooks/results/redrive", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorRedriveAllWebhookResults(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RedriveAllWebhookResultsApiResponse"/>
        /// </summary>
        public partial class RedriveAllWebhookResultsApiResponse : mailslurp.Client.ApiResponse, IRedriveAllWebhookResultsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RedriveAllWebhookResultsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RedriveAllWebhookResultsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RedriveAllWebhookResultsApiResponse(ILogger<RedriveAllWebhookResultsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookRedriveAllResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookRedriveAllResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookRedriveAllResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRedriveWebhookResult(ref Guid webhookResultId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookResultId"></param>
        private void AfterRedriveWebhookResultDefaultImplementation(IRedriveWebhookResultApiResponse apiResponseLocalVar, Guid webhookResultId)
        {
            bool suppressDefaultLog = false;
            AfterRedriveWebhookResult(ref suppressDefaultLog, apiResponseLocalVar, webhookResultId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookResultId"></param>
        partial void AfterRedriveWebhookResult(ref bool suppressDefaultLog, IRedriveWebhookResultApiResponse apiResponseLocalVar, Guid webhookResultId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookResultId"></param>
        private void OnErrorRedriveWebhookResultDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookResultId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRedriveWebhookResult(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookResultId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookResultId"></param>
        partial void OnErrorRedriveWebhookResult(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookResultId);

        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </summary>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRedriveWebhookResultApiResponse"/>&gt;</returns>
        public async Task<IRedriveWebhookResultApiResponse> RedriveWebhookResultOrDefaultAsync(Guid webhookResultId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RedriveWebhookResultAsync(webhookResultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRedriveWebhookResultApiResponse"/>&gt;</returns>
        public async Task<IRedriveWebhookResultApiResponse> RedriveWebhookResultAsync(Guid webhookResultId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRedriveWebhookResult(ref webhookResultId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/results/{webhookResultId}/redrive"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/results/{webhookResultId}/redrive");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookResultId%7D", Uri.EscapeDataString(webhookResultId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<RedriveWebhookResultApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RedriveWebhookResultApiResponse>();

                        RedriveWebhookResultApiResponse apiResponseLocalVar = new RedriveWebhookResultApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/results/{webhookResultId}/redrive", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRedriveWebhookResultDefaultImplementation(apiResponseLocalVar, webhookResultId);

                        Events.ExecuteOnRedriveWebhookResult(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRedriveWebhookResultDefaultImplementation(e, "/webhooks/results/{webhookResultId}/redrive", uriBuilderLocalVar.Path, webhookResultId);
                Events.ExecuteOnErrorRedriveWebhookResult(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RedriveWebhookResultApiResponse"/>
        /// </summary>
        public partial class RedriveWebhookResultApiResponse : mailslurp.Client.ApiResponse, IRedriveWebhookResultApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RedriveWebhookResultApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RedriveWebhookResultApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RedriveWebhookResultApiResponse(ILogger<RedriveWebhookResultApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookRedriveResult Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookRedriveResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookRedriveResult result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendTestData(ref Guid webhookId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        private void AfterSendTestDataDefaultImplementation(ISendTestDataApiResponse apiResponseLocalVar, Guid webhookId)
        {
            bool suppressDefaultLog = false;
            AfterSendTestData(ref suppressDefaultLog, apiResponseLocalVar, webhookId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void AfterSendTestData(ref bool suppressDefaultLog, ISendTestDataApiResponse apiResponseLocalVar, Guid webhookId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        private void OnErrorSendTestDataDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendTestData(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        partial void OnErrorSendTestData(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId);

        /// <summary>
        /// Send webhook test data 
        /// </summary>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTestDataApiResponse"/>&gt;</returns>
        public async Task<ISendTestDataApiResponse> SendTestDataOrDefaultAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendTestDataAsync(webhookId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send webhook test data 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTestDataApiResponse"/>&gt;</returns>
        public async Task<ISendTestDataApiResponse> SendTestDataAsync(Guid webhookId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatSendTestData(ref webhookId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/{webhookId}/test"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/{webhookId}/test");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendTestDataApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendTestDataApiResponse>();

                        SendTestDataApiResponse apiResponseLocalVar = new SendTestDataApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/{webhookId}/test", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendTestDataDefaultImplementation(apiResponseLocalVar, webhookId);

                        Events.ExecuteOnSendTestData(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendTestDataDefaultImplementation(e, "/webhooks/{webhookId}/test", uriBuilderLocalVar.Path, webhookId);
                Events.ExecuteOnErrorSendTestData(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendTestDataApiResponse"/>
        /// </summary>
        public partial class SendTestDataApiResponse : mailslurp.Client.ApiResponse, ISendTestDataApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendTestDataApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendTestDataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendTestDataApiResponse(ILogger<SendTestDataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookTestResult Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookTestResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out mailslurp.Model.WebhookTestResult result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateWebhook(ref Guid webhookId, CreateWebhookOptions createWebhookOptions, ref Option<Guid> inboxId, ref Option<Guid> phoneNumberId, ref Option<bool> overrideAuth);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createWebhookOptions"></param>
        /// <returns></returns>
        private void ValidateUpdateWebhook(CreateWebhookOptions createWebhookOptions)
        {
            if (createWebhookOptions == null)
                throw new ArgumentNullException(nameof(createWebhookOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="overrideAuth"></param>
        private void AfterUpdateWebhookDefaultImplementation(IUpdateWebhookApiResponse apiResponseLocalVar, Guid webhookId, CreateWebhookOptions createWebhookOptions, Option<Guid> inboxId, Option<Guid> phoneNumberId, Option<bool> overrideAuth)
        {
            bool suppressDefaultLog = false;
            AfterUpdateWebhook(ref suppressDefaultLog, apiResponseLocalVar, webhookId, createWebhookOptions, inboxId, phoneNumberId, overrideAuth);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="overrideAuth"></param>
        partial void AfterUpdateWebhook(ref bool suppressDefaultLog, IUpdateWebhookApiResponse apiResponseLocalVar, Guid webhookId, CreateWebhookOptions createWebhookOptions, Option<Guid> inboxId, Option<Guid> phoneNumberId, Option<bool> overrideAuth);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="overrideAuth"></param>
        private void OnErrorUpdateWebhookDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId, CreateWebhookOptions createWebhookOptions, Option<Guid> inboxId, Option<Guid> phoneNumberId, Option<bool> overrideAuth)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateWebhook(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookId, createWebhookOptions, inboxId, phoneNumberId, overrideAuth);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="inboxId"></param>
        /// <param name="phoneNumberId"></param>
        /// <param name="overrideAuth"></param>
        partial void OnErrorUpdateWebhook(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId, CreateWebhookOptions createWebhookOptions, Option<Guid> inboxId, Option<Guid> phoneNumberId, Option<bool> overrideAuth);

        /// <summary>
        /// Update a webhook 
        /// </summary>
        /// <param name="webhookId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="overrideAuth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWebhookApiResponse"/>&gt;</returns>
        public async Task<IUpdateWebhookApiResponse> UpdateWebhookOrDefaultAsync(Guid webhookId, CreateWebhookOptions createWebhookOptions, Option<Guid> inboxId = default, Option<Guid> phoneNumberId = default, Option<bool> overrideAuth = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateWebhookAsync(webhookId, createWebhookOptions, inboxId, phoneNumberId, overrideAuth, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a webhook 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="createWebhookOptions"></param>
        /// <param name="inboxId"> (optional)</param>
        /// <param name="phoneNumberId"> (optional)</param>
        /// <param name="overrideAuth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWebhookApiResponse"/>&gt;</returns>
        public async Task<IUpdateWebhookApiResponse> UpdateWebhookAsync(Guid webhookId, CreateWebhookOptions createWebhookOptions, Option<Guid> inboxId = default, Option<Guid> phoneNumberId = default, Option<bool> overrideAuth = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateWebhook(createWebhookOptions);

                FormatUpdateWebhook(ref webhookId, createWebhookOptions, ref inboxId, ref phoneNumberId, ref overrideAuth);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/{webhookId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/{webhookId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (inboxId.IsSet)
                        parseQueryStringLocalVar["inboxId"] = ClientUtils.ParameterToString(inboxId.Value);

                    if (phoneNumberId.IsSet)
                        parseQueryStringLocalVar["phoneNumberId"] = ClientUtils.ParameterToString(phoneNumberId.Value);

                    if (overrideAuth.IsSet)
                        parseQueryStringLocalVar["overrideAuth"] = ClientUtils.ParameterToString(overrideAuth.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (createWebhookOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createWebhookOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PATCH");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateWebhookApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateWebhookApiResponse>();

                        UpdateWebhookApiResponse apiResponseLocalVar = new UpdateWebhookApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/{webhookId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateWebhookDefaultImplementation(apiResponseLocalVar, webhookId, createWebhookOptions, inboxId, phoneNumberId, overrideAuth);

                        Events.ExecuteOnUpdateWebhook(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateWebhookDefaultImplementation(e, "/webhooks/{webhookId}", uriBuilderLocalVar.Path, webhookId, createWebhookOptions, inboxId, phoneNumberId, overrideAuth);
                Events.ExecuteOnErrorUpdateWebhook(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateWebhookApiResponse"/>
        /// </summary>
        public partial class UpdateWebhookApiResponse : mailslurp.Client.ApiResponse, IUpdateWebhookApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateWebhookApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateWebhookApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateWebhookApiResponse(ILogger<UpdateWebhookApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateWebhookHeaders(ref Guid webhookId, WebhookHeaders webhookHeaders);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="webhookHeaders"></param>
        /// <returns></returns>
        private void ValidateUpdateWebhookHeaders(WebhookHeaders webhookHeaders)
        {
            if (webhookHeaders == null)
                throw new ArgumentNullException(nameof(webhookHeaders));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="webhookHeaders"></param>
        private void AfterUpdateWebhookHeadersDefaultImplementation(IUpdateWebhookHeadersApiResponse apiResponseLocalVar, Guid webhookId, WebhookHeaders webhookHeaders)
        {
            bool suppressDefaultLog = false;
            AfterUpdateWebhookHeaders(ref suppressDefaultLog, apiResponseLocalVar, webhookId, webhookHeaders);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="webhookHeaders"></param>
        partial void AfterUpdateWebhookHeaders(ref bool suppressDefaultLog, IUpdateWebhookHeadersApiResponse apiResponseLocalVar, Guid webhookId, WebhookHeaders webhookHeaders);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="webhookHeaders"></param>
        private void OnErrorUpdateWebhookHeadersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId, WebhookHeaders webhookHeaders)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateWebhookHeaders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookId, webhookHeaders);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="webhookHeaders"></param>
        partial void OnErrorUpdateWebhookHeaders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId, WebhookHeaders webhookHeaders);

        /// <summary>
        /// Update a webhook request headers 
        /// </summary>
        /// <param name="webhookId"></param>
        /// <param name="webhookHeaders"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWebhookHeadersApiResponse"/>&gt;</returns>
        public async Task<IUpdateWebhookHeadersApiResponse> UpdateWebhookHeadersOrDefaultAsync(Guid webhookId, WebhookHeaders webhookHeaders, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateWebhookHeadersAsync(webhookId, webhookHeaders, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a webhook request headers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <param name="webhookHeaders"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWebhookHeadersApiResponse"/>&gt;</returns>
        public async Task<IUpdateWebhookHeadersApiResponse> UpdateWebhookHeadersAsync(Guid webhookId, WebhookHeaders webhookHeaders, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateWebhookHeaders(webhookHeaders);

                FormatUpdateWebhookHeaders(ref webhookId, webhookHeaders);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/{webhookId}/headers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/{webhookId}/headers");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    httpRequestMessageLocalVar.Content = (webhookHeaders as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(webhookHeaders, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateWebhookHeadersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateWebhookHeadersApiResponse>();

                        UpdateWebhookHeadersApiResponse apiResponseLocalVar = new UpdateWebhookHeadersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/{webhookId}/headers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateWebhookHeadersDefaultImplementation(apiResponseLocalVar, webhookId, webhookHeaders);

                        Events.ExecuteOnUpdateWebhookHeaders(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateWebhookHeadersDefaultImplementation(e, "/webhooks/{webhookId}/headers", uriBuilderLocalVar.Path, webhookId, webhookHeaders);
                Events.ExecuteOnErrorUpdateWebhookHeaders(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateWebhookHeadersApiResponse"/>
        /// </summary>
        public partial class UpdateWebhookHeadersApiResponse : mailslurp.Client.ApiResponse, IUpdateWebhookHeadersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateWebhookHeadersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateWebhookHeadersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateWebhookHeadersApiResponse(ILogger<UpdateWebhookHeadersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.WebhookDto Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.WebhookDto>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.WebhookDto result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifyWebhookSignature(VerifyWebhookSignatureOptions verifyWebhookSignatureOptions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="verifyWebhookSignatureOptions"></param>
        /// <returns></returns>
        private void ValidateVerifyWebhookSignature(VerifyWebhookSignatureOptions verifyWebhookSignatureOptions)
        {
            if (verifyWebhookSignatureOptions == null)
                throw new ArgumentNullException(nameof(verifyWebhookSignatureOptions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="verifyWebhookSignatureOptions"></param>
        private void AfterVerifyWebhookSignatureDefaultImplementation(IVerifyWebhookSignatureApiResponse apiResponseLocalVar, VerifyWebhookSignatureOptions verifyWebhookSignatureOptions)
        {
            bool suppressDefaultLog = false;
            AfterVerifyWebhookSignature(ref suppressDefaultLog, apiResponseLocalVar, verifyWebhookSignatureOptions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="verifyWebhookSignatureOptions"></param>
        partial void AfterVerifyWebhookSignature(ref bool suppressDefaultLog, IVerifyWebhookSignatureApiResponse apiResponseLocalVar, VerifyWebhookSignatureOptions verifyWebhookSignatureOptions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="verifyWebhookSignatureOptions"></param>
        private void OnErrorVerifyWebhookSignatureDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, VerifyWebhookSignatureOptions verifyWebhookSignatureOptions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifyWebhookSignature(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, verifyWebhookSignatureOptions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="verifyWebhookSignatureOptions"></param>
        partial void OnErrorVerifyWebhookSignature(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, VerifyWebhookSignatureOptions verifyWebhookSignatureOptions);

        /// <summary>
        /// Verify a webhook payload signature Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
        /// </summary>
        /// <param name="verifyWebhookSignatureOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyWebhookSignatureApiResponse"/>&gt;</returns>
        public async Task<IVerifyWebhookSignatureApiResponse> VerifyWebhookSignatureOrDefaultAsync(VerifyWebhookSignatureOptions verifyWebhookSignatureOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyWebhookSignatureAsync(verifyWebhookSignatureOptions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Verify a webhook payload signature Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyWebhookSignatureOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyWebhookSignatureApiResponse"/>&gt;</returns>
        public async Task<IVerifyWebhookSignatureApiResponse> VerifyWebhookSignatureAsync(VerifyWebhookSignatureOptions verifyWebhookSignatureOptions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateVerifyWebhookSignature(verifyWebhookSignatureOptions);

                FormatVerifyWebhookSignature(verifyWebhookSignatureOptions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/verify"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/verify");

                    httpRequestMessageLocalVar.Content = (verifyWebhookSignatureOptions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(verifyWebhookSignatureOptions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<VerifyWebhookSignatureApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifyWebhookSignatureApiResponse>();

                        VerifyWebhookSignatureApiResponse apiResponseLocalVar = new VerifyWebhookSignatureApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/verify", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterVerifyWebhookSignatureDefaultImplementation(apiResponseLocalVar, verifyWebhookSignatureOptions);

                        Events.ExecuteOnVerifyWebhookSignature(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifyWebhookSignatureDefaultImplementation(e, "/webhooks/verify", uriBuilderLocalVar.Path, verifyWebhookSignatureOptions);
                Events.ExecuteOnErrorVerifyWebhookSignature(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifyWebhookSignatureApiResponse"/>
        /// </summary>
        public partial class VerifyWebhookSignatureApiResponse : mailslurp.Client.ApiResponse, IVerifyWebhookSignatureApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifyWebhookSignatureApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifyWebhookSignatureApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyWebhookSignatureApiResponse(ILogger<VerifyWebhookSignatureApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public mailslurp.Model.VerifyWebhookSignatureResults Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<mailslurp.Model.VerifyWebhookSignatureResults>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out mailslurp.Model.VerifyWebhookSignatureResults result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWaitForWebhookResults(ref Guid webhookId, ref int expectedCount, ref int timeout);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="expectedCount"></param>
        /// <param name="timeout"></param>
        private void AfterWaitForWebhookResultsDefaultImplementation(IWaitForWebhookResultsApiResponse apiResponseLocalVar, Guid webhookId, int expectedCount, int timeout)
        {
            bool suppressDefaultLog = false;
            AfterWaitForWebhookResults(ref suppressDefaultLog, apiResponseLocalVar, webhookId, expectedCount, timeout);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="expectedCount"></param>
        /// <param name="timeout"></param>
        partial void AfterWaitForWebhookResults(ref bool suppressDefaultLog, IWaitForWebhookResultsApiResponse apiResponseLocalVar, Guid webhookId, int expectedCount, int timeout);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="expectedCount"></param>
        /// <param name="timeout"></param>
        private void OnErrorWaitForWebhookResultsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId, int expectedCount, int timeout)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWaitForWebhookResults(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, webhookId, expectedCount, timeout);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="webhookId"></param>
        /// <param name="expectedCount"></param>
        /// <param name="timeout"></param>
        partial void OnErrorWaitForWebhookResults(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid webhookId, int expectedCount, int timeout);

        /// <summary>
        /// Wait for webhook results for a webhook 
        /// </summary>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="expectedCount">Expected result count</param>
        /// <param name="timeout">Max time to wait in milliseconds</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWaitForWebhookResultsApiResponse"/>&gt;</returns>
        public async Task<IWaitForWebhookResultsApiResponse> WaitForWebhookResultsOrDefaultAsync(Guid webhookId, int expectedCount, int timeout, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WaitForWebhookResultsAsync(webhookId, expectedCount, timeout, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Wait for webhook results for a webhook 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="expectedCount">Expected result count</param>
        /// <param name="timeout">Max time to wait in milliseconds</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWaitForWebhookResultsApiResponse"/>&gt;</returns>
        public async Task<IWaitForWebhookResultsApiResponse> WaitForWebhookResultsAsync(Guid webhookId, int expectedCount, int timeout, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatWaitForWebhookResults(ref webhookId, ref expectedCount, ref timeout);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/webhooks/{webhookId}/wait"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/webhooks/{webhookId}/wait");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BwebhookId%7D", Uri.EscapeDataString(webhookId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["expectedCount"] = ClientUtils.ParameterToString(expectedCount);
                    parseQueryStringLocalVar["timeout"] = ClientUtils.ParameterToString(timeout);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "*/*"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WaitForWebhookResultsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WaitForWebhookResultsApiResponse>();

                        WaitForWebhookResultsApiResponse apiResponseLocalVar = new WaitForWebhookResultsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webhooks/{webhookId}/wait", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWaitForWebhookResultsDefaultImplementation(apiResponseLocalVar, webhookId, expectedCount, timeout);

                        Events.ExecuteOnWaitForWebhookResults(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWaitForWebhookResultsDefaultImplementation(e, "/webhooks/{webhookId}/wait", uriBuilderLocalVar.Path, webhookId, expectedCount, timeout);
                Events.ExecuteOnErrorWaitForWebhookResults(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WaitForWebhookResultsApiResponse"/>
        /// </summary>
        public partial class WaitForWebhookResultsApiResponse : mailslurp.Client.ApiResponse, IWaitForWebhookResultsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WaitForWebhookResultsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WaitForWebhookResultsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WaitForWebhookResultsApiResponse(ILogger<WaitForWebhookResultsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<WebhookResultDto> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<WebhookResultDto>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<WebhookResultDto> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
