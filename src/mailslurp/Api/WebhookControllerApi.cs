/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using mailslurp.Client;
using mailslurp.Model;

namespace mailslurp.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookOptions">webhookOptions</param>
        /// <returns>WebhookDto</returns>
        WebhookDto CreateWebhook (Guid inboxId, CreateWebhookOptions webhookOptions);

        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookOptions">webhookOptions</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        ApiResponse<WebhookDto> CreateWebhookWithHttpInfo (Guid inboxId, CreateWebhookOptions webhookOptions);
        /// <summary>
        /// Delete and disable a Webhook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns></returns>
        void DeleteWebhook (Guid inboxId, Guid webhookId);

        /// <summary>
        /// Delete and disable a Webhook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookWithHttpInfo (Guid inboxId, Guid webhookId);
        /// <summary>
        /// Get results for all webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageWebhookResult</returns>
        PageWebhookResult GetAllWebhookResults (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get results for all webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageWebhookResult</returns>
        ApiResponse<PageWebhookResult> GetAllWebhookResultsWithHttpInfo (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// List Webhooks Paginated
        /// </summary>
        /// <remarks>
        /// List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <returns>PageWebhookProjection</returns>
        PageWebhookProjection GetAllWebhooks (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// List Webhooks Paginated
        /// </summary>
        /// <remarks>
        /// List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <returns>ApiResponse of PageWebhookProjection</returns>
        ApiResponse<PageWebhookProjection> GetAllWebhooksWithHttpInfo (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get paginated webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageWebhookProjection</returns>
        PageWebhookProjection GetInboxWebhooksPaginated (Guid inboxId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get paginated webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageWebhookProjection</returns>
        ApiResponse<PageWebhookProjection> GetInboxWebhooksPaginatedWithHttpInfo (Guid inboxId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">eventName (optional)</param>
        /// <returns>AbstractWebhookPayload</returns>
        AbstractWebhookPayload GetTestWebhookPayload (string eventName = default(string));

        /// <summary>
        /// Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">eventName (optional)</param>
        /// <returns>ApiResponse of AbstractWebhookPayload</returns>
        ApiResponse<AbstractWebhookPayload> GetTestWebhookPayloadWithHttpInfo (string eventName = default(string));
        /// <summary>
        /// Get webhook test payload for email opened event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookEmailOpenedPayload</returns>
        WebhookEmailOpenedPayload GetTestWebhookPayloadEmailOpened ();

        /// <summary>
        /// Get webhook test payload for email opened event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookEmailOpenedPayload</returns>
        ApiResponse<WebhookEmailOpenedPayload> GetTestWebhookPayloadEmailOpenedWithHttpInfo ();
        /// <summary>
        /// Get webhook test payload for email opened event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookEmailReadPayload</returns>
        WebhookEmailReadPayload GetTestWebhookPayloadEmailRead ();

        /// <summary>
        /// Get webhook test payload for email opened event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookEmailReadPayload</returns>
        ApiResponse<WebhookEmailReadPayload> GetTestWebhookPayloadEmailReadWithHttpInfo ();
        /// <summary>
        /// Get webhook test payload for new attachment event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookNewAttachmentPayload</returns>
        WebhookNewAttachmentPayload GetTestWebhookPayloadNewAttachment ();

        /// <summary>
        /// Get webhook test payload for new attachment event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookNewAttachmentPayload</returns>
        ApiResponse<WebhookNewAttachmentPayload> GetTestWebhookPayloadNewAttachmentWithHttpInfo ();
        /// <summary>
        /// Get webhook test payload for new contact event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookNewContactPayload</returns>
        WebhookNewContactPayload GetTestWebhookPayloadNewContact ();

        /// <summary>
        /// Get webhook test payload for new contact event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookNewContactPayload</returns>
        ApiResponse<WebhookNewContactPayload> GetTestWebhookPayloadNewContactWithHttpInfo ();
        /// <summary>
        /// Get webhook test payload for new email event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookNewEmailPayload</returns>
        WebhookNewEmailPayload GetTestWebhookPayloadNewEmail ();

        /// <summary>
        /// Get webhook test payload for new email event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookNewEmailPayload</returns>
        ApiResponse<WebhookNewEmailPayload> GetTestWebhookPayloadNewEmailWithHttpInfo ();
        /// <summary>
        /// Get a webhook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>WebhookDto</returns>
        WebhookDto GetWebhook (Guid webhookId);

        /// <summary>
        /// Get a webhook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        ApiResponse<WebhookDto> GetWebhookWithHttpInfo (Guid webhookId);
        /// <summary>
        /// Get a webhook result for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>WebhookResultDto</returns>
        WebhookResultDto GetWebhookResult (Guid webhookResultId);

        /// <summary>
        /// Get a webhook result for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>ApiResponse of WebhookResultDto</returns>
        ApiResponse<WebhookResultDto> GetWebhookResultWithHttpInfo (Guid webhookResultId);
        /// <summary>
        /// Get a webhook results for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageWebhookResult</returns>
        PageWebhookResult GetWebhookResults (Guid webhookId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get a webhook results for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageWebhookResult</returns>
        ApiResponse<PageWebhookResult> GetWebhookResultsWithHttpInfo (Guid webhookId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get all webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>List&lt;WebhookDto&gt;</returns>
        List<WebhookDto> GetWebhooks (Guid inboxId);

        /// <summary>
        /// Get all webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of List&lt;WebhookDto&gt;</returns>
        ApiResponse<List<WebhookDto>> GetWebhooksWithHttpInfo (Guid inboxId);
        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload
        /// </summary>
        /// <remarks>
        /// Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>WebhookRedriveResult</returns>
        WebhookRedriveResult RedriveWebhookResult (Guid webhookResultId);

        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload
        /// </summary>
        /// <remarks>
        /// Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>ApiResponse of WebhookRedriveResult</returns>
        ApiResponse<WebhookRedriveResult> RedriveWebhookResultWithHttpInfo (Guid webhookResultId);
        /// <summary>
        /// Send webhook test data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>WebhookTestResult</returns>
        WebhookTestResult SendTestData (Guid webhookId);

        /// <summary>
        /// Send webhook test data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>ApiResponse of WebhookTestResult</returns>
        ApiResponse<WebhookTestResult> SendTestDataWithHttpInfo (Guid webhookId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookOptions">webhookOptions</param>
        /// <returns>Task of WebhookDto</returns>
        System.Threading.Tasks.Task<WebhookDto> CreateWebhookAsync (Guid inboxId, CreateWebhookOptions webhookOptions);

        /// <summary>
        /// Attach a WebHook URL to an inbox
        /// </summary>
        /// <remarks>
        /// Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookOptions">webhookOptions</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDto>> CreateWebhookAsyncWithHttpInfo (Guid inboxId, CreateWebhookOptions webhookOptions);
        /// <summary>
        /// Delete and disable a Webhook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookAsync (Guid inboxId, Guid webhookId);

        /// <summary>
        /// Delete and disable a Webhook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookAsyncWithHttpInfo (Guid inboxId, Guid webhookId);
        /// <summary>
        /// Get results for all webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageWebhookResult</returns>
        System.Threading.Tasks.Task<PageWebhookResult> GetAllWebhookResultsAsync (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get results for all webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageWebhookResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageWebhookResult>> GetAllWebhookResultsAsyncWithHttpInfo (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// List Webhooks Paginated
        /// </summary>
        /// <remarks>
        /// List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <returns>Task of PageWebhookProjection</returns>
        System.Threading.Tasks.Task<PageWebhookProjection> GetAllWebhooksAsync (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// List Webhooks Paginated
        /// </summary>
        /// <remarks>
        /// List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <returns>Task of ApiResponse (PageWebhookProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageWebhookProjection>> GetAllWebhooksAsyncWithHttpInfo (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get paginated webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageWebhookProjection</returns>
        System.Threading.Tasks.Task<PageWebhookProjection> GetInboxWebhooksPaginatedAsync (Guid inboxId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get paginated webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageWebhookProjection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageWebhookProjection>> GetInboxWebhooksPaginatedAsyncWithHttpInfo (Guid inboxId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">eventName (optional)</param>
        /// <returns>Task of AbstractWebhookPayload</returns>
        System.Threading.Tasks.Task<AbstractWebhookPayload> GetTestWebhookPayloadAsync (string eventName = default(string));

        /// <summary>
        /// Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">eventName (optional)</param>
        /// <returns>Task of ApiResponse (AbstractWebhookPayload)</returns>
        System.Threading.Tasks.Task<ApiResponse<AbstractWebhookPayload>> GetTestWebhookPayloadAsyncWithHttpInfo (string eventName = default(string));
        /// <summary>
        /// Get webhook test payload for email opened event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookEmailOpenedPayload</returns>
        System.Threading.Tasks.Task<WebhookEmailOpenedPayload> GetTestWebhookPayloadEmailOpenedAsync ();

        /// <summary>
        /// Get webhook test payload for email opened event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookEmailOpenedPayload)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookEmailOpenedPayload>> GetTestWebhookPayloadEmailOpenedAsyncWithHttpInfo ();
        /// <summary>
        /// Get webhook test payload for email opened event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookEmailReadPayload</returns>
        System.Threading.Tasks.Task<WebhookEmailReadPayload> GetTestWebhookPayloadEmailReadAsync ();

        /// <summary>
        /// Get webhook test payload for email opened event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookEmailReadPayload)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookEmailReadPayload>> GetTestWebhookPayloadEmailReadAsyncWithHttpInfo ();
        /// <summary>
        /// Get webhook test payload for new attachment event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookNewAttachmentPayload</returns>
        System.Threading.Tasks.Task<WebhookNewAttachmentPayload> GetTestWebhookPayloadNewAttachmentAsync ();

        /// <summary>
        /// Get webhook test payload for new attachment event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookNewAttachmentPayload)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookNewAttachmentPayload>> GetTestWebhookPayloadNewAttachmentAsyncWithHttpInfo ();
        /// <summary>
        /// Get webhook test payload for new contact event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookNewContactPayload</returns>
        System.Threading.Tasks.Task<WebhookNewContactPayload> GetTestWebhookPayloadNewContactAsync ();

        /// <summary>
        /// Get webhook test payload for new contact event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookNewContactPayload)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookNewContactPayload>> GetTestWebhookPayloadNewContactAsyncWithHttpInfo ();
        /// <summary>
        /// Get webhook test payload for new email event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookNewEmailPayload</returns>
        System.Threading.Tasks.Task<WebhookNewEmailPayload> GetTestWebhookPayloadNewEmailAsync ();

        /// <summary>
        /// Get webhook test payload for new email event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookNewEmailPayload)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookNewEmailPayload>> GetTestWebhookPayloadNewEmailAsyncWithHttpInfo ();
        /// <summary>
        /// Get a webhook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of WebhookDto</returns>
        System.Threading.Tasks.Task<WebhookDto> GetWebhookAsync (Guid webhookId);

        /// <summary>
        /// Get a webhook for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDto>> GetWebhookAsyncWithHttpInfo (Guid webhookId);
        /// <summary>
        /// Get a webhook result for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>Task of WebhookResultDto</returns>
        System.Threading.Tasks.Task<WebhookResultDto> GetWebhookResultAsync (Guid webhookResultId);

        /// <summary>
        /// Get a webhook result for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>Task of ApiResponse (WebhookResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResultDto>> GetWebhookResultAsyncWithHttpInfo (Guid webhookResultId);
        /// <summary>
        /// Get a webhook results for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageWebhookResult</returns>
        System.Threading.Tasks.Task<PageWebhookResult> GetWebhookResultsAsync (Guid webhookId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));

        /// <summary>
        /// Get a webhook results for a webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageWebhookResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageWebhookResult>> GetWebhookResultsAsyncWithHttpInfo (Guid webhookId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string));
        /// <summary>
        /// Get all webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of List&lt;WebhookDto&gt;</returns>
        System.Threading.Tasks.Task<List<WebhookDto>> GetWebhooksAsync (Guid inboxId);

        /// <summary>
        /// Get all webhooks for an Inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse (List&lt;WebhookDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WebhookDto>>> GetWebhooksAsyncWithHttpInfo (Guid inboxId);
        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload
        /// </summary>
        /// <remarks>
        /// Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>Task of WebhookRedriveResult</returns>
        System.Threading.Tasks.Task<WebhookRedriveResult> RedriveWebhookResultAsync (Guid webhookResultId);

        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload
        /// </summary>
        /// <remarks>
        /// Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>Task of ApiResponse (WebhookRedriveResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookRedriveResult>> RedriveWebhookResultAsyncWithHttpInfo (Guid webhookResultId);
        /// <summary>
        /// Send webhook test data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of WebhookTestResult</returns>
        System.Threading.Tasks.Task<WebhookTestResult> SendTestDataAsync (Guid webhookId);

        /// <summary>
        /// Send webhook test data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of ApiResponse (WebhookTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookTestResult>> SendTestDataAsyncWithHttpInfo (Guid webhookId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookControllerApi : IWebhookControllerApiSync, IWebhookControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhookControllerApi : IWebhookControllerApi
    {
        private mailslurp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookControllerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookControllerApi(String basePath)
        {
            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                new mailslurp.Client.Configuration { BasePath = basePath }
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhookControllerApi(mailslurp.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = mailslurp.Client.Configuration.MergeConfigurations(
                mailslurp.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new mailslurp.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhookControllerApi(mailslurp.Client.ISynchronousClient client,mailslurp.Client.IAsynchronousClient asyncClient, mailslurp.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = mailslurp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public mailslurp.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public mailslurp.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public mailslurp.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public mailslurp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookOptions">webhookOptions</param>
        /// <returns>WebhookDto</returns>
        public WebhookDto CreateWebhook (Guid inboxId, CreateWebhookOptions webhookOptions)
        {
             mailslurp.Client.ApiResponse<WebhookDto> localVarResponse = CreateWebhookWithHttpInfo(inboxId, webhookOptions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookOptions">webhookOptions</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        public mailslurp.Client.ApiResponse< WebhookDto > CreateWebhookWithHttpInfo (Guid inboxId, CreateWebhookOptions webhookOptions)
        {
            // verify the required parameter 'webhookOptions' is set
            if (webhookOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'webhookOptions' when calling WebhookControllerApi->CreateWebhook");

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.Data = webhookOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< WebhookDto >("/inboxes/{inboxId}/webhooks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookOptions">webhookOptions</param>
        /// <returns>Task of WebhookDto</returns>
        public async System.Threading.Tasks.Task<WebhookDto> CreateWebhookAsync (Guid inboxId, CreateWebhookOptions webhookOptions)
        {
             mailslurp.Client.ApiResponse<WebhookDto> localVarResponse = await CreateWebhookAsyncWithHttpInfo(inboxId, webhookOptions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach a WebHook URL to an inbox Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookOptions">webhookOptions</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<WebhookDto>> CreateWebhookAsyncWithHttpInfo (Guid inboxId, CreateWebhookOptions webhookOptions)
        {
            // verify the required parameter 'webhookOptions' is set
            if (webhookOptions == null)
                throw new mailslurp.Client.ApiException(400, "Missing required parameter 'webhookOptions' when calling WebhookControllerApi->CreateWebhook");


            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.Data = webhookOptions;

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WebhookDto>("/inboxes/{inboxId}/webhooks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete and disable a Webhook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns></returns>
        public void DeleteWebhook (Guid inboxId, Guid webhookId)
        {
             DeleteWebhookWithHttpInfo(inboxId, webhookId);
        }

        /// <summary>
        /// Delete and disable a Webhook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public mailslurp.Client.ApiResponse<Object> DeleteWebhookWithHttpInfo (Guid inboxId, Guid webhookId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookId", mailslurp.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/inboxes/{inboxId}/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete and disable a Webhook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookAsync (Guid inboxId, Guid webhookId)
        {
             await DeleteWebhookAsyncWithHttpInfo(inboxId, webhookId);

        }

        /// <summary>
        /// Delete and disable a Webhook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<Object>> DeleteWebhookAsyncWithHttpInfo (Guid inboxId, Guid webhookId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookId", mailslurp.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/inboxes/{inboxId}/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get results for all webhooks 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageWebhookResult</returns>
        public PageWebhookResult GetAllWebhookResults (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageWebhookResult> localVarResponse = GetAllWebhookResultsWithHttpInfo(page, searchFilter, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get results for all webhooks 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageWebhookResult</returns>
        public mailslurp.Client.ApiResponse< PageWebhookResult > GetAllWebhookResultsWithHttpInfo (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageWebhookResult >("/webhooks/results", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllWebhookResults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get results for all webhooks 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageWebhookResult</returns>
        public async System.Threading.Tasks.Task<PageWebhookResult> GetAllWebhookResultsAsync (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageWebhookResult> localVarResponse = await GetAllWebhookResultsAsyncWithHttpInfo(page, searchFilter, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get results for all webhooks 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageWebhookResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageWebhookResult>> GetAllWebhookResultsAsyncWithHttpInfo (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageWebhookResult>("/webhooks/results", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllWebhookResults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Webhooks Paginated List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <returns>PageWebhookProjection</returns>
        public PageWebhookProjection GetAllWebhooks (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageWebhookProjection> localVarResponse = GetAllWebhooksWithHttpInfo(page, searchFilter, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhooks Paginated List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <returns>ApiResponse of PageWebhookProjection</returns>
        public mailslurp.Client.ApiResponse< PageWebhookProjection > GetAllWebhooksWithHttpInfo (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageWebhookProjection >("/webhooks/paginated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Webhooks Paginated List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <returns>Task of PageWebhookProjection</returns>
        public async System.Threading.Tasks.Task<PageWebhookProjection> GetAllWebhooksAsync (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageWebhookProjection> localVarResponse = await GetAllWebhooksAsyncWithHttpInfo(page, searchFilter, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Webhooks Paginated List webhooks in paginated form. Allows for page index, page size, and sort direction.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size for paginated result list. (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to DESC)</param>
        /// <returns>Task of ApiResponse (PageWebhookProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageWebhookProjection>> GetAllWebhooksAsyncWithHttpInfo (int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageWebhookProjection>("/webhooks/paginated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated webhooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageWebhookProjection</returns>
        public PageWebhookProjection GetInboxWebhooksPaginated (Guid inboxId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageWebhookProjection> localVarResponse = GetInboxWebhooksPaginatedWithHttpInfo(inboxId, page, searchFilter, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get paginated webhooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageWebhookProjection</returns>
        public mailslurp.Client.ApiResponse< PageWebhookProjection > GetInboxWebhooksPaginatedWithHttpInfo (Guid inboxId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageWebhookProjection >("/inboxes/{inboxId}/webhooks/paginated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxWebhooksPaginated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get paginated webhooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageWebhookProjection</returns>
        public async System.Threading.Tasks.Task<PageWebhookProjection> GetInboxWebhooksPaginatedAsync (Guid inboxId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageWebhookProjection> localVarResponse = await GetInboxWebhooksPaginatedAsyncWithHttpInfo(inboxId, page, searchFilter, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get paginated webhooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageWebhookProjection)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageWebhookProjection>> GetInboxWebhooksPaginatedAsyncWithHttpInfo (Guid inboxId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageWebhookProjection>("/inboxes/{inboxId}/webhooks/paginated", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInboxWebhooksPaginated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">eventName (optional)</param>
        /// <returns>AbstractWebhookPayload</returns>
        public AbstractWebhookPayload GetTestWebhookPayload (string eventName = default(string))
        {
             mailslurp.Client.ApiResponse<AbstractWebhookPayload> localVarResponse = GetTestWebhookPayloadWithHttpInfo(eventName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">eventName (optional)</param>
        /// <returns>ApiResponse of AbstractWebhookPayload</returns>
        public mailslurp.Client.ApiResponse< AbstractWebhookPayload > GetTestWebhookPayloadWithHttpInfo (string eventName = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "eventName", eventName));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AbstractWebhookPayload >("/webhooks/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">eventName (optional)</param>
        /// <returns>Task of AbstractWebhookPayload</returns>
        public async System.Threading.Tasks.Task<AbstractWebhookPayload> GetTestWebhookPayloadAsync (string eventName = default(string))
        {
             mailslurp.Client.ApiResponse<AbstractWebhookPayload> localVarResponse = await GetTestWebhookPayloadAsyncWithHttpInfo(eventName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default. 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">eventName (optional)</param>
        /// <returns>Task of ApiResponse (AbstractWebhookPayload)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<AbstractWebhookPayload>> GetTestWebhookPayloadAsyncWithHttpInfo (string eventName = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "eventName", eventName));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AbstractWebhookPayload>("/webhooks/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook test payload for email opened event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookEmailOpenedPayload</returns>
        public WebhookEmailOpenedPayload GetTestWebhookPayloadEmailOpened ()
        {
             mailslurp.Client.ApiResponse<WebhookEmailOpenedPayload> localVarResponse = GetTestWebhookPayloadEmailOpenedWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook test payload for email opened event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookEmailOpenedPayload</returns>
        public mailslurp.Client.ApiResponse< WebhookEmailOpenedPayload > GetTestWebhookPayloadEmailOpenedWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< WebhookEmailOpenedPayload >("/webhooks/test/email-opened-payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayloadEmailOpened", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook test payload for email opened event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookEmailOpenedPayload</returns>
        public async System.Threading.Tasks.Task<WebhookEmailOpenedPayload> GetTestWebhookPayloadEmailOpenedAsync ()
        {
             mailslurp.Client.ApiResponse<WebhookEmailOpenedPayload> localVarResponse = await GetTestWebhookPayloadEmailOpenedAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get webhook test payload for email opened event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookEmailOpenedPayload)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<WebhookEmailOpenedPayload>> GetTestWebhookPayloadEmailOpenedAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookEmailOpenedPayload>("/webhooks/test/email-opened-payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayloadEmailOpened", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook test payload for email opened event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookEmailReadPayload</returns>
        public WebhookEmailReadPayload GetTestWebhookPayloadEmailRead ()
        {
             mailslurp.Client.ApiResponse<WebhookEmailReadPayload> localVarResponse = GetTestWebhookPayloadEmailReadWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook test payload for email opened event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookEmailReadPayload</returns>
        public mailslurp.Client.ApiResponse< WebhookEmailReadPayload > GetTestWebhookPayloadEmailReadWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< WebhookEmailReadPayload >("/webhooks/test/email-read-payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayloadEmailRead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook test payload for email opened event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookEmailReadPayload</returns>
        public async System.Threading.Tasks.Task<WebhookEmailReadPayload> GetTestWebhookPayloadEmailReadAsync ()
        {
             mailslurp.Client.ApiResponse<WebhookEmailReadPayload> localVarResponse = await GetTestWebhookPayloadEmailReadAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get webhook test payload for email opened event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookEmailReadPayload)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<WebhookEmailReadPayload>> GetTestWebhookPayloadEmailReadAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookEmailReadPayload>("/webhooks/test/email-read-payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayloadEmailRead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook test payload for new attachment event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookNewAttachmentPayload</returns>
        public WebhookNewAttachmentPayload GetTestWebhookPayloadNewAttachment ()
        {
             mailslurp.Client.ApiResponse<WebhookNewAttachmentPayload> localVarResponse = GetTestWebhookPayloadNewAttachmentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook test payload for new attachment event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookNewAttachmentPayload</returns>
        public mailslurp.Client.ApiResponse< WebhookNewAttachmentPayload > GetTestWebhookPayloadNewAttachmentWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< WebhookNewAttachmentPayload >("/webhooks/test/new-attachment-payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayloadNewAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook test payload for new attachment event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookNewAttachmentPayload</returns>
        public async System.Threading.Tasks.Task<WebhookNewAttachmentPayload> GetTestWebhookPayloadNewAttachmentAsync ()
        {
             mailslurp.Client.ApiResponse<WebhookNewAttachmentPayload> localVarResponse = await GetTestWebhookPayloadNewAttachmentAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get webhook test payload for new attachment event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookNewAttachmentPayload)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<WebhookNewAttachmentPayload>> GetTestWebhookPayloadNewAttachmentAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookNewAttachmentPayload>("/webhooks/test/new-attachment-payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayloadNewAttachment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook test payload for new contact event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookNewContactPayload</returns>
        public WebhookNewContactPayload GetTestWebhookPayloadNewContact ()
        {
             mailslurp.Client.ApiResponse<WebhookNewContactPayload> localVarResponse = GetTestWebhookPayloadNewContactWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook test payload for new contact event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookNewContactPayload</returns>
        public mailslurp.Client.ApiResponse< WebhookNewContactPayload > GetTestWebhookPayloadNewContactWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< WebhookNewContactPayload >("/webhooks/test/new-contact-payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayloadNewContact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook test payload for new contact event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookNewContactPayload</returns>
        public async System.Threading.Tasks.Task<WebhookNewContactPayload> GetTestWebhookPayloadNewContactAsync ()
        {
             mailslurp.Client.ApiResponse<WebhookNewContactPayload> localVarResponse = await GetTestWebhookPayloadNewContactAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get webhook test payload for new contact event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookNewContactPayload)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<WebhookNewContactPayload>> GetTestWebhookPayloadNewContactAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookNewContactPayload>("/webhooks/test/new-contact-payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayloadNewContact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook test payload for new email event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookNewEmailPayload</returns>
        public WebhookNewEmailPayload GetTestWebhookPayloadNewEmail ()
        {
             mailslurp.Client.ApiResponse<WebhookNewEmailPayload> localVarResponse = GetTestWebhookPayloadNewEmailWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook test payload for new email event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookNewEmailPayload</returns>
        public mailslurp.Client.ApiResponse< WebhookNewEmailPayload > GetTestWebhookPayloadNewEmailWithHttpInfo ()
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< WebhookNewEmailPayload >("/webhooks/test/new-email-payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayloadNewEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook test payload for new email event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookNewEmailPayload</returns>
        public async System.Threading.Tasks.Task<WebhookNewEmailPayload> GetTestWebhookPayloadNewEmailAsync ()
        {
             mailslurp.Client.ApiResponse<WebhookNewEmailPayload> localVarResponse = await GetTestWebhookPayloadNewEmailAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get webhook test payload for new email event 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookNewEmailPayload)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<WebhookNewEmailPayload>> GetTestWebhookPayloadNewEmailAsyncWithHttpInfo ()
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookNewEmailPayload>("/webhooks/test/new-email-payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTestWebhookPayloadNewEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>WebhookDto</returns>
        public WebhookDto GetWebhook (Guid webhookId)
        {
             mailslurp.Client.ApiResponse<WebhookDto> localVarResponse = GetWebhookWithHttpInfo(webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>ApiResponse of WebhookDto</returns>
        public mailslurp.Client.ApiResponse< WebhookDto > GetWebhookWithHttpInfo (Guid webhookId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("webhookId", mailslurp.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< WebhookDto >("/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of WebhookDto</returns>
        public async System.Threading.Tasks.Task<WebhookDto> GetWebhookAsync (Guid webhookId)
        {
             mailslurp.Client.ApiResponse<WebhookDto> localVarResponse = await GetWebhookAsyncWithHttpInfo(webhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a webhook for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of ApiResponse (WebhookDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<WebhookDto>> GetWebhookAsyncWithHttpInfo (Guid webhookId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("webhookId", mailslurp.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookDto>("/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook result for a webhook 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>WebhookResultDto</returns>
        public WebhookResultDto GetWebhookResult (Guid webhookResultId)
        {
             mailslurp.Client.ApiResponse<WebhookResultDto> localVarResponse = GetWebhookResultWithHttpInfo(webhookResultId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook result for a webhook 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>ApiResponse of WebhookResultDto</returns>
        public mailslurp.Client.ApiResponse< WebhookResultDto > GetWebhookResultWithHttpInfo (Guid webhookResultId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("webhookResultId", mailslurp.Client.ClientUtils.ParameterToString(webhookResultId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< WebhookResultDto >("/webhooks/results/{webhookResultId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook result for a webhook 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>Task of WebhookResultDto</returns>
        public async System.Threading.Tasks.Task<WebhookResultDto> GetWebhookResultAsync (Guid webhookResultId)
        {
             mailslurp.Client.ApiResponse<WebhookResultDto> localVarResponse = await GetWebhookResultAsyncWithHttpInfo(webhookResultId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a webhook result for a webhook 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>Task of ApiResponse (WebhookResultDto)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<WebhookResultDto>> GetWebhookResultAsyncWithHttpInfo (Guid webhookResultId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("webhookResultId", mailslurp.Client.ClientUtils.ParameterToString(webhookResultId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookResultDto>("/webhooks/results/{webhookResultId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook results for a webhook 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>PageWebhookResult</returns>
        public PageWebhookResult GetWebhookResults (Guid webhookId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageWebhookResult> localVarResponse = GetWebhookResultsWithHttpInfo(webhookId, page, searchFilter, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook results for a webhook 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>ApiResponse of PageWebhookResult</returns>
        public mailslurp.Client.ApiResponse< PageWebhookResult > GetWebhookResultsWithHttpInfo (Guid webhookId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("webhookId", mailslurp.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PageWebhookResult >("/webhooks/{webhookId}/results", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookResults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook results for a webhook 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of PageWebhookResult</returns>
        public async System.Threading.Tasks.Task<PageWebhookResult> GetWebhookResultsAsync (Guid webhookId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {
             mailslurp.Client.ApiResponse<PageWebhookResult> localVarResponse = await GetWebhookResultsAsyncWithHttpInfo(webhookId, page, searchFilter, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a webhook results for a webhook 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">ID of webhook to get results for</param>
        /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
        /// <param name="searchFilter">Optional search filter (optional)</param>
        /// <param name="size">Optional page size in list pagination (optional, default to 20)</param>
        /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to ASC)</param>
        /// <returns>Task of ApiResponse (PageWebhookResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<PageWebhookResult>> GetWebhookResultsAsyncWithHttpInfo (Guid webhookId, int? page = default(int?), string searchFilter = default(string), int? size = default(int?), string sort = default(string))
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("webhookId", mailslurp.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (searchFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "searchFilter", searchFilter));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(mailslurp.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PageWebhookResult>("/webhooks/{webhookId}/results", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookResults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all webhooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>List&lt;WebhookDto&gt;</returns>
        public List<WebhookDto> GetWebhooks (Guid inboxId)
        {
             mailslurp.Client.ApiResponse<List<WebhookDto>> localVarResponse = GetWebhooksWithHttpInfo(inboxId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all webhooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>ApiResponse of List&lt;WebhookDto&gt;</returns>
        public mailslurp.Client.ApiResponse< List<WebhookDto> > GetWebhooksWithHttpInfo (Guid inboxId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<WebhookDto> >("/inboxes/{inboxId}/webhooks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all webhooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of List&lt;WebhookDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WebhookDto>> GetWebhooksAsync (Guid inboxId)
        {
             mailslurp.Client.ApiResponse<List<WebhookDto>> localVarResponse = await GetWebhooksAsyncWithHttpInfo(inboxId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all webhooks for an Inbox 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inboxId">inboxId</param>
        /// <returns>Task of ApiResponse (List&lt;WebhookDto&gt;)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<List<WebhookDto>>> GetWebhooksAsyncWithHttpInfo (Guid inboxId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("inboxId", mailslurp.Client.ClientUtils.ParameterToString(inboxId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WebhookDto>>("/inboxes/{inboxId}/webhooks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>WebhookRedriveResult</returns>
        public WebhookRedriveResult RedriveWebhookResult (Guid webhookResultId)
        {
             mailslurp.Client.ApiResponse<WebhookRedriveResult> localVarResponse = RedriveWebhookResultWithHttpInfo(webhookResultId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>ApiResponse of WebhookRedriveResult</returns>
        public mailslurp.Client.ApiResponse< WebhookRedriveResult > RedriveWebhookResultWithHttpInfo (Guid webhookResultId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("webhookResultId", mailslurp.Client.ClientUtils.ParameterToString(webhookResultId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< WebhookRedriveResult >("/webhooks/results/{webhookResultId}/redrive", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedriveWebhookResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>Task of WebhookRedriveResult</returns>
        public async System.Threading.Tasks.Task<WebhookRedriveResult> RedriveWebhookResultAsync (Guid webhookResultId)
        {
             mailslurp.Client.ApiResponse<WebhookRedriveResult> localVarResponse = await RedriveWebhookResultAsyncWithHttpInfo(webhookResultId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a webhook result and try to resend the original webhook payload Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookResultId">Webhook Result ID</param>
        /// <returns>Task of ApiResponse (WebhookRedriveResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<WebhookRedriveResult>> RedriveWebhookResultAsyncWithHttpInfo (Guid webhookResultId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("webhookResultId", mailslurp.Client.ClientUtils.ParameterToString(webhookResultId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WebhookRedriveResult>("/webhooks/results/{webhookResultId}/redrive", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedriveWebhookResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send webhook test data 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>WebhookTestResult</returns>
        public WebhookTestResult SendTestData (Guid webhookId)
        {
             mailslurp.Client.ApiResponse<WebhookTestResult> localVarResponse = SendTestDataWithHttpInfo(webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send webhook test data 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>ApiResponse of WebhookTestResult</returns>
        public mailslurp.Client.ApiResponse< WebhookTestResult > SendTestDataWithHttpInfo (Guid webhookId)
        {
            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = mailslurp.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = mailslurp.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("webhookId", mailslurp.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< WebhookTestResult >("/webhooks/{webhookId}/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTestData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send webhook test data 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of WebhookTestResult</returns>
        public async System.Threading.Tasks.Task<WebhookTestResult> SendTestDataAsync (Guid webhookId)
        {
             mailslurp.Client.ApiResponse<WebhookTestResult> localVarResponse = await SendTestDataAsyncWithHttpInfo(webhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send webhook test data 
        /// </summary>
        /// <exception cref="mailslurp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">webhookId</param>
        /// <returns>Task of ApiResponse (WebhookTestResult)</returns>
        public async System.Threading.Tasks.Task<mailslurp.Client.ApiResponse<WebhookTestResult>> SendTestDataAsyncWithHttpInfo (Guid webhookId)
        {

            mailslurp.Client.RequestOptions localVarRequestOptions = new mailslurp.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("webhookId", mailslurp.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            // authentication (API_KEY) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WebhookTestResult>("/webhooks/{webhookId}/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTestData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
