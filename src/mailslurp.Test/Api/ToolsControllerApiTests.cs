/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing ToolsControllerApi
    /// </summary>
    public sealed class ToolsControllerApiTests : ApiTestsBase
    {
        private readonly IToolsControllerApi _instance;

        public ToolsControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IToolsControllerApi>();
        }

        /// <summary>
        /// Test CheckEmailFeaturesClientSupport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CheckEmailFeaturesClientSupportAsyncTest()
        {
            CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions = default;
            var response = await _instance.CheckEmailFeaturesClientSupportAsync(checkEmailFeaturesClientSupportOptions);
            var model = response.Ok();
            Assert.IsType<CheckEmailFeaturesClientSupportResults>(model);
        }

        /// <summary>
        /// Test CreateNewFakeEmailAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewFakeEmailAddressAsyncTest()
        {
            var response = await _instance.CreateNewFakeEmailAddressAsync();
            var model = response.Ok();
            Assert.IsType<NewFakeEmailAddressResult>(model);
        }

        /// <summary>
        /// Test DeleteNewFakeEmailAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteNewFakeEmailAddressAsyncTest()
        {
            string emailAddress = default;
            await _instance.DeleteNewFakeEmailAddressAsync(emailAddress);
        }

        /// <summary>
        /// Test GenerateBimiRecord
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenerateBimiRecordAsyncTest()
        {
            GenerateBimiRecordOptions generateBimiRecordOptions = default;
            var response = await _instance.GenerateBimiRecordAsync(generateBimiRecordOptions);
            var model = response.Ok();
            Assert.IsType<GenerateBimiRecordResults>(model);
        }

        /// <summary>
        /// Test GenerateDmarcRecord
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenerateDmarcRecordAsyncTest()
        {
            GenerateDmarcRecordOptions generateDmarcRecordOptions = default;
            var response = await _instance.GenerateDmarcRecordAsync(generateDmarcRecordOptions);
            var model = response.Ok();
            Assert.IsType<GenerateDmarcRecordResults>(model);
        }

        /// <summary>
        /// Test GenerateMtaStsRecord
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenerateMtaStsRecordAsyncTest()
        {
            GenerateMtaStsRecordOptions generateMtaStsRecordOptions = default;
            var response = await _instance.GenerateMtaStsRecordAsync(generateMtaStsRecordOptions);
            var model = response.Ok();
            Assert.IsType<GenerateMtaStsRecordResults>(model);
        }

        /// <summary>
        /// Test GenerateTlsReportingRecord
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenerateTlsReportingRecordAsyncTest()
        {
            GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions = default;
            var response = await _instance.GenerateTlsReportingRecordAsync(generateTlsReportingRecordOptions);
            var model = response.Ok();
            Assert.IsType<GenerateTlsReportingRecordResults>(model);
        }

        /// <summary>
        /// Test GetFakeEmailByEmailAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFakeEmailByEmailAddressAsyncTest()
        {
            string emailAddress = default;
            var response = await _instance.GetFakeEmailByEmailAddressAsync(emailAddress);
            var model = response.Ok();
            Assert.IsType<FakeEmailResult>(model);
        }

        /// <summary>
        /// Test GetFakeEmailById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFakeEmailByIdAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetFakeEmailByIdAsync(id);
            var model = response.Ok();
            Assert.IsType<FakeEmailResult>(model);
        }

        /// <summary>
        /// Test GetFakeEmailRaw
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFakeEmailRawAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetFakeEmailRawAsync(id);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetFakeEmailsForAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFakeEmailsForAddressAsyncTest()
        {
            string emailAddress = default;
            Client.Option<int> page = default;
            var response = await _instance.GetFakeEmailsForAddressAsync(emailAddress, page);
            var model = response.Ok();
            Assert.IsType<List<FakeEmailPreview>>(model);
        }

        /// <summary>
        /// Test LookupBimiDomain
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LookupBimiDomainAsyncTest()
        {
            LookupBimiDomainOptions lookupBimiDomainOptions = default;
            var response = await _instance.LookupBimiDomainAsync(lookupBimiDomainOptions);
            var model = response.Ok();
            Assert.IsType<LookupBimiDomainResults>(model);
        }

        /// <summary>
        /// Test LookupDmarcDomain
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LookupDmarcDomainAsyncTest()
        {
            LookupDmarcDomainOptions lookupDmarcDomainOptions = default;
            var response = await _instance.LookupDmarcDomainAsync(lookupDmarcDomainOptions);
            var model = response.Ok();
            Assert.IsType<LookupDmarcDomainResults>(model);
        }

        /// <summary>
        /// Test LookupMtaStsDomain
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LookupMtaStsDomainAsyncTest()
        {
            LookupMtaStsDomainOptions lookupMtaStsDomainOptions = default;
            var response = await _instance.LookupMtaStsDomainAsync(lookupMtaStsDomainOptions);
            var model = response.Ok();
            Assert.IsType<LookupMtaStsDomainResults>(model);
        }

        /// <summary>
        /// Test LookupTlsReportingDomain
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LookupTlsReportingDomainAsyncTest()
        {
            LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions = default;
            var response = await _instance.LookupTlsReportingDomainAsync(lookupTlsReportingDomainOptions);
            var model = response.Ok();
            Assert.IsType<LookupTlsReportingDomainResults>(model);
        }
    }
}
