/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing AttachmentControllerApi
    /// </summary>
    public sealed class AttachmentControllerApiTests : ApiTestsBase
    {
        private readonly IAttachmentControllerApi _instance;

        public AttachmentControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAttachmentControllerApi>();
        }

        /// <summary>
        /// Test DeleteAllAttachments
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllAttachmentsAsyncTest()
        {
            await _instance.DeleteAllAttachmentsAsync();
        }

        /// <summary>
        /// Test DeleteAttachment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAttachmentAsyncTest()
        {
            string attachmentId = default;
            await _instance.DeleteAttachmentAsync(attachmentId);
        }

        /// <summary>
        /// Test DownloadAttachmentAsBase64Encoded
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadAttachmentAsBase64EncodedAsyncTest()
        {
            string attachmentId = default;
            var response = await _instance.DownloadAttachmentAsBase64EncodedAsync(attachmentId);
            var model = response.Ok();
            Assert.IsType<DownloadAttachmentDto>(model);
        }

        /// <summary>
        /// Test DownloadAttachmentAsBytes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadAttachmentAsBytesAsyncTest()
        {
            string attachmentId = default;
            var response = await _instance.DownloadAttachmentAsBytesAsync(attachmentId);
            var model = response.Default();
            Assert.IsType<byte[]>(model);
        }

        /// <summary>
        /// Test GetAttachment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAttachmentAsyncTest()
        {
            string attachmentId = default;
            var response = await _instance.GetAttachmentAsync(attachmentId);
            var model = response.Ok();
            Assert.IsType<AttachmentEntityDto>(model);
        }

        /// <summary>
        /// Test GetAttachmentInfo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAttachmentInfoAsyncTest()
        {
            string attachmentId = default;
            var response = await _instance.GetAttachmentInfoAsync(attachmentId);
            var model = response.Ok();
            Assert.IsType<AttachmentMetaData>(model);
        }

        /// <summary>
        /// Test GetAttachments
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAttachmentsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> fileNameFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<Guid> inboxId = default;
            Client.Option<Guid> emailId = default;
            Client.Option<Guid> sentEmailId = default;
            var response = await _instance.GetAttachmentsAsync(page, size, sort, fileNameFilter, since, before, inboxId, emailId, sentEmailId);
            var model = response.Ok();
            Assert.IsType<PageAttachmentEntity>(model);
        }

        /// <summary>
        /// Test UploadAttachment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UploadAttachmentAsyncTest()
        {
            UploadAttachmentOptions uploadAttachmentOptions = default;
            var response = await _instance.UploadAttachmentAsync(uploadAttachmentOptions);
            var model = response.Created();
            Assert.IsType<List<string>>(model);
        }

        /// <summary>
        /// Test UploadAttachmentBytes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UploadAttachmentBytesAsyncTest()
        {
            Client.Option<string> contentType = default;
            Client.Option<string> contentType2 = default;
            Client.Option<string> contentId = default;
            Client.Option<string> filename = default;
            Client.Option<long> fileSize = default;
            Client.Option<string> filename2 = default;
            var response = await _instance.UploadAttachmentBytesAsync(contentType, contentType2, contentId, filename, fileSize, filename2);
            var model = response.Created();
            Assert.IsType<List<string>>(model);
        }

        /// <summary>
        /// Test UploadMultipartForm
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UploadMultipartFormAsyncTest()
        {
            Client.Option<string> contentId = default;
            Client.Option<string> contentType = default;
            Client.Option<string> filename = default;
            Client.Option<string> contentTypeHeader = default;
            Client.Option<string> xFilename = default;
            Client.Option<string> xFilenameRaw = default;
            Client.Option<long> xFilesize = default;
            Client.Option<UploadMultipartFormRequest> uploadMultipartFormRequest = default;
            var response = await _instance.UploadMultipartFormAsync(contentId, contentType, filename, contentTypeHeader, xFilename, xFilenameRaw, xFilesize, uploadMultipartFormRequest);
            var model = response.Created();
            Assert.IsType<List<string>>(model);
        }
    }
}
