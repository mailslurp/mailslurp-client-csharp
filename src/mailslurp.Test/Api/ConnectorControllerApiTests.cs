/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing ConnectorControllerApi
    /// </summary>
    public sealed class ConnectorControllerApiTests : ApiTestsBase
    {
        private readonly IConnectorControllerApi _instance;

        public ConnectorControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IConnectorControllerApi>();
        }

        /// <summary>
        /// Test CreateConnector
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateConnectorAsyncTest()
        {
            CreateConnectorOptions createConnectorOptions = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.CreateConnectorAsync(createConnectorOptions, inboxId);
            var model = response.Created();
            Assert.IsType<ConnectorDto>(model);
        }

        /// <summary>
        /// Test CreateConnectorImapConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateConnectorImapConnectionAsyncTest()
        {
            Guid id = default;
            CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default;
            var response = await _instance.CreateConnectorImapConnectionAsync(id, createConnectorImapConnectionOptions);
            var model = response.Created();
            Assert.IsType<ConnectorImapConnectionDto>(model);
        }

        /// <summary>
        /// Test CreateConnectorSmtpConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateConnectorSmtpConnectionAsyncTest()
        {
            Guid id = default;
            CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default;
            var response = await _instance.CreateConnectorSmtpConnectionAsync(id, createConnectorSmtpConnectionOptions);
            var model = response.Created();
            Assert.IsType<ConnectorSmtpConnectionDto>(model);
        }

        /// <summary>
        /// Test CreateConnectorSyncSettings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateConnectorSyncSettingsAsyncTest()
        {
            Guid id = default;
            CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions = default;
            var response = await _instance.CreateConnectorSyncSettingsAsync(id, createConnectorSyncSettingsOptions);
            var model = response.Created();
            Assert.IsType<ConnectorSyncSettingsDto>(model);
        }

        /// <summary>
        /// Test CreateConnectorWithOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateConnectorWithOptionsAsyncTest()
        {
            CreateConnectorWithOptions createConnectorWithOptions = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.CreateConnectorWithOptionsAsync(createConnectorWithOptions, inboxId);
            var model = response.Created();
            Assert.IsType<ConnectorDto>(model);
        }

        /// <summary>
        /// Test DeleteAllConnector
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllConnectorAsyncTest()
        {
            await _instance.DeleteAllConnectorAsync();
        }

        /// <summary>
        /// Test DeleteConnector
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteConnectorAsyncTest()
        {
            Guid id = default;
            await _instance.DeleteConnectorAsync(id);
        }

        /// <summary>
        /// Test DeleteConnectorImapConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteConnectorImapConnectionAsyncTest()
        {
            Guid id = default;
            await _instance.DeleteConnectorImapConnectionAsync(id);
        }

        /// <summary>
        /// Test DeleteConnectorSmtpConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteConnectorSmtpConnectionAsyncTest()
        {
            Guid id = default;
            await _instance.DeleteConnectorSmtpConnectionAsync(id);
        }

        /// <summary>
        /// Test DeleteConnectorSyncSettings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteConnectorSyncSettingsAsyncTest()
        {
            Guid id = default;
            await _instance.DeleteConnectorSyncSettingsAsync(id);
        }

        /// <summary>
        /// Test GetAllConnectorEvents
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllConnectorEventsAsyncTest()
        {
            Client.Option<Guid> id = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> eventType = default;
            var response = await _instance.GetAllConnectorEventsAsync(id, page, size, sort, since, before, eventType);
            var model = response.Ok();
            Assert.IsType<PageConnectorEvents>(model);
        }

        /// <summary>
        /// Test GetConnector
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetConnectorAsync(id);
            var model = response.Ok();
            Assert.IsType<ConnectorDto>(model);
        }

        /// <summary>
        /// Test GetConnectorByEmailAddress
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorByEmailAddressAsyncTest()
        {
            string emailAddress = default;
            var response = await _instance.GetConnectorByEmailAddressAsync(emailAddress);
            var model = response.Ok();
            Assert.IsType<OptionalConnectorDto>(model);
        }

        /// <summary>
        /// Test GetConnectorByInboxId
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorByInboxIdAsyncTest()
        {
            Guid inboxId = default;
            var response = await _instance.GetConnectorByInboxIdAsync(inboxId);
            var model = response.Ok();
            Assert.IsType<OptionalConnectorDto>(model);
        }

        /// <summary>
        /// Test GetConnectorByName
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorByNameAsyncTest()
        {
            string name = default;
            var response = await _instance.GetConnectorByNameAsync(name);
            var model = response.Ok();
            Assert.IsType<OptionalConnectorDto>(model);
        }

        /// <summary>
        /// Test GetConnectorEvent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorEventAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetConnectorEventAsync(id);
            var model = response.Ok();
            Assert.IsType<ConnectorEventDto>(model);
        }

        /// <summary>
        /// Test GetConnectorEvents
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorEventsAsyncTest()
        {
            Guid id = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            Client.Option<string> eventType = default;
            var response = await _instance.GetConnectorEventsAsync(id, page, size, sort, since, before, eventType);
            var model = response.Ok();
            Assert.IsType<PageConnectorEvents>(model);
        }

        /// <summary>
        /// Test GetConnectorImapConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorImapConnectionAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetConnectorImapConnectionAsync(id);
            var model = response.Ok();
            Assert.IsType<OptionalConnectorImapConnectionDto>(model);
        }

        /// <summary>
        /// Test GetConnectorProviderSettings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorProviderSettingsAsyncTest()
        {
            var response = await _instance.GetConnectorProviderSettingsAsync();
            var model = response.Ok();
            Assert.IsType<ConnectorProviderSettingsDto>(model);
        }

        /// <summary>
        /// Test GetConnectorSmtpConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorSmtpConnectionAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetConnectorSmtpConnectionAsync(id);
            var model = response.Ok();
            Assert.IsType<OptionalConnectorSmtpConnectionDto>(model);
        }

        /// <summary>
        /// Test GetConnectorSyncSettings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorSyncSettingsAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetConnectorSyncSettingsAsync(id);
            var model = response.Ok();
            Assert.IsType<OptionalConnectorSyncSettingsDto>(model);
        }

        /// <summary>
        /// Test GetConnectors
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConnectorsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetConnectorsAsync(page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageConnector>(model);
        }

        /// <summary>
        /// Test SendEmailFromConnector
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendEmailFromConnectorAsyncTest()
        {
            Guid id = default;
            SendEmailOptions sendEmailOptions = default;
            Client.Option<bool> useFallback = default;
            var response = await _instance.SendEmailFromConnectorAsync(id, sendEmailOptions, useFallback);
            var model = response.Ok();
            Assert.IsType<SentEmailDto>(model);
        }

        /// <summary>
        /// Test SyncConnector
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SyncConnectorAsyncTest()
        {
            Guid id = default;
            Client.Option<DateTime> since = default;
            Client.Option<string> folder = default;
            Client.Option<bool> logging = default;
            var response = await _instance.SyncConnectorAsync(id, since, folder, logging);
            var model = response.Ok();
            Assert.IsType<ConnectorSyncRequestResult>(model);
        }

        /// <summary>
        /// Test TestConnectorImapConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestConnectorImapConnectionAsyncTest()
        {
            Guid id = default;
            Client.Option<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions = default;
            var response = await _instance.TestConnectorImapConnectionAsync(id, createConnectorImapConnectionOptions);
            var model = response.Ok();
            Assert.IsType<ConnectorImapConnectionTestResult>(model);
        }

        /// <summary>
        /// Test TestConnectorImapConnectionOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestConnectorImapConnectionOptionsAsyncTest()
        {
            CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default;
            var response = await _instance.TestConnectorImapConnectionOptionsAsync(createConnectorImapConnectionOptions);
            var model = response.Ok();
            Assert.IsType<ConnectorImapConnectionTestResult>(model);
        }

        /// <summary>
        /// Test TestConnectorSmtpConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestConnectorSmtpConnectionAsyncTest()
        {
            Guid id = default;
            Client.Option<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions = default;
            var response = await _instance.TestConnectorSmtpConnectionAsync(id, createConnectorSmtpConnectionOptions);
            var model = response.Ok();
            Assert.IsType<ConnectorSmtpConnectionTestResult>(model);
        }

        /// <summary>
        /// Test TestConnectorSmtpConnectionOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestConnectorSmtpConnectionOptionsAsyncTest()
        {
            CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default;
            var response = await _instance.TestConnectorSmtpConnectionOptionsAsync(createConnectorSmtpConnectionOptions);
            var model = response.Ok();
            Assert.IsType<ConnectorSmtpConnectionTestResult>(model);
        }

        /// <summary>
        /// Test UpdateConnector
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateConnectorAsyncTest()
        {
            Guid id = default;
            CreateConnectorOptions createConnectorOptions = default;
            var response = await _instance.UpdateConnectorAsync(id, createConnectorOptions);
            var model = response.Ok();
            Assert.IsType<ConnectorDto>(model);
        }

        /// <summary>
        /// Test UpdateConnectorImapConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateConnectorImapConnectionAsyncTest()
        {
            Guid id = default;
            CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = default;
            var response = await _instance.UpdateConnectorImapConnectionAsync(id, createConnectorImapConnectionOptions);
            var model = response.Ok();
            Assert.IsType<ConnectorImapConnectionDto>(model);
        }

        /// <summary>
        /// Test UpdateConnectorSmtpConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateConnectorSmtpConnectionAsyncTest()
        {
            Guid id = default;
            CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = default;
            var response = await _instance.UpdateConnectorSmtpConnectionAsync(id, createConnectorSmtpConnectionOptions);
            var model = response.Ok();
            Assert.IsType<ConnectorSmtpConnectionDto>(model);
        }
    }
}
