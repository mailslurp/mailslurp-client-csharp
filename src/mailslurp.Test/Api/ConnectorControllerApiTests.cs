/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
// uncomment below to import models
//using mailslurp.Model;

namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing ConnectorControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ConnectorControllerApiTests : IDisposable
    {
        private ConnectorControllerApi instance;

        public ConnectorControllerApiTests()
        {
            instance = new ConnectorControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConnectorControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ConnectorControllerApi
            //Assert.IsType<ConnectorControllerApi>(instance);
        }

        /// <summary>
        /// Test CreateConnector
        /// </summary>
        [Fact]
        public void CreateConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateConnectorOptions createConnectorOptions = null;
            //Guid? inboxId = null;
            //var response = instance.CreateConnector(createConnectorOptions, inboxId);
            //Assert.IsType<ConnectorDto>(response);
        }

        /// <summary>
        /// Test CreateConnectorImapConnection
        /// </summary>
        [Fact]
        public void CreateConnectorImapConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = null;
            //var response = instance.CreateConnectorImapConnection(id, createConnectorImapConnectionOptions);
            //Assert.IsType<ConnectorImapConnectionDto>(response);
        }

        /// <summary>
        /// Test CreateConnectorSmtpConnection
        /// </summary>
        [Fact]
        public void CreateConnectorSmtpConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = null;
            //var response = instance.CreateConnectorSmtpConnection(id, createConnectorSmtpConnectionOptions);
            //Assert.IsType<ConnectorSmtpConnectionDto>(response);
        }

        /// <summary>
        /// Test CreateConnectorSyncSettings
        /// </summary>
        [Fact]
        public void CreateConnectorSyncSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions = null;
            //var response = instance.CreateConnectorSyncSettings(id, createConnectorSyncSettingsOptions);
            //Assert.IsType<ConnectorSyncSettingsDto>(response);
        }

        /// <summary>
        /// Test CreateConnectorWithOptions
        /// </summary>
        [Fact]
        public void CreateConnectorWithOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateConnectorWithOptions createConnectorWithOptions = null;
            //Guid? inboxId = null;
            //var response = instance.CreateConnectorWithOptions(createConnectorWithOptions, inboxId);
            //Assert.IsType<ConnectorDto>(response);
        }

        /// <summary>
        /// Test DeleteAllConnector
        /// </summary>
        [Fact]
        public void DeleteAllConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteAllConnector();
        }

        /// <summary>
        /// Test DeleteConnector
        /// </summary>
        [Fact]
        public void DeleteConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteConnector(id);
        }

        /// <summary>
        /// Test DeleteConnectorImapConnection
        /// </summary>
        [Fact]
        public void DeleteConnectorImapConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteConnectorImapConnection(id);
        }

        /// <summary>
        /// Test DeleteConnectorSmtpConnection
        /// </summary>
        [Fact]
        public void DeleteConnectorSmtpConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteConnectorSmtpConnection(id);
        }

        /// <summary>
        /// Test DeleteConnectorSyncSettings
        /// </summary>
        [Fact]
        public void DeleteConnectorSyncSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteConnectorSyncSettings(id);
        }

        /// <summary>
        /// Test GetAllConnectorEvents
        /// </summary>
        [Fact]
        public void GetAllConnectorEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? id = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //string eventType = null;
            //var response = instance.GetAllConnectorEvents(id, page, size, sort, since, before, eventType);
            //Assert.IsType<PageConnectorEvents>(response);
        }

        /// <summary>
        /// Test GetConnector
        /// </summary>
        [Fact]
        public void GetConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetConnector(id);
            //Assert.IsType<ConnectorDto>(response);
        }

        /// <summary>
        /// Test GetConnectorByEmailAddress
        /// </summary>
        [Fact]
        public void GetConnectorByEmailAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emailAddress = null;
            //var response = instance.GetConnectorByEmailAddress(emailAddress);
            //Assert.IsType<OptionalConnectorDto>(response);
        }

        /// <summary>
        /// Test GetConnectorByInboxId
        /// </summary>
        [Fact]
        public void GetConnectorByInboxIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //var response = instance.GetConnectorByInboxId(inboxId);
            //Assert.IsType<OptionalConnectorDto>(response);
        }

        /// <summary>
        /// Test GetConnectorByName
        /// </summary>
        [Fact]
        public void GetConnectorByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetConnectorByName(name);
            //Assert.IsType<OptionalConnectorDto>(response);
        }

        /// <summary>
        /// Test GetConnectorEvent
        /// </summary>
        [Fact]
        public void GetConnectorEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetConnectorEvent(id);
            //Assert.IsType<ConnectorEventDto>(response);
        }

        /// <summary>
        /// Test GetConnectorEvents
        /// </summary>
        [Fact]
        public void GetConnectorEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //string eventType = null;
            //var response = instance.GetConnectorEvents(id, page, size, sort, since, before, eventType);
            //Assert.IsType<PageConnectorEvents>(response);
        }

        /// <summary>
        /// Test GetConnectorImapConnection
        /// </summary>
        [Fact]
        public void GetConnectorImapConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetConnectorImapConnection(id);
            //Assert.IsType<OptionalConnectorImapConnectionDto>(response);
        }

        /// <summary>
        /// Test GetConnectorProviderSettings
        /// </summary>
        [Fact]
        public void GetConnectorProviderSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetConnectorProviderSettings();
            //Assert.IsType<ConnectorProviderSettingsDto>(response);
        }

        /// <summary>
        /// Test GetConnectorSmtpConnection
        /// </summary>
        [Fact]
        public void GetConnectorSmtpConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetConnectorSmtpConnection(id);
            //Assert.IsType<OptionalConnectorSmtpConnectionDto>(response);
        }

        /// <summary>
        /// Test GetConnectorSyncSettings
        /// </summary>
        [Fact]
        public void GetConnectorSyncSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetConnectorSyncSettings(id);
            //Assert.IsType<OptionalConnectorSyncSettingsDto>(response);
        }

        /// <summary>
        /// Test GetConnectors
        /// </summary>
        [Fact]
        public void GetConnectorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetConnectors(page, size, sort, since, before);
            //Assert.IsType<PageConnector>(response);
        }

        /// <summary>
        /// Test SendEmailFromConnector
        /// </summary>
        [Fact]
        public void SendEmailFromConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //SendEmailOptions sendEmailOptions = null;
            //bool? useFallback = null;
            //var response = instance.SendEmailFromConnector(id, sendEmailOptions, useFallback);
            //Assert.IsType<SentEmailDto>(response);
        }

        /// <summary>
        /// Test SyncConnector
        /// </summary>
        [Fact]
        public void SyncConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //DateTime? since = null;
            //string folder = null;
            //bool? logging = null;
            //var response = instance.SyncConnector(id, since, folder, logging);
            //Assert.IsType<ConnectorSyncRequestResult>(response);
        }

        /// <summary>
        /// Test TestConnectorImapConnection
        /// </summary>
        [Fact]
        public void TestConnectorImapConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = null;
            //var response = instance.TestConnectorImapConnection(id, createConnectorImapConnectionOptions);
            //Assert.IsType<ConnectorImapConnectionTestResult>(response);
        }

        /// <summary>
        /// Test TestConnectorImapConnectionOptions
        /// </summary>
        [Fact]
        public void TestConnectorImapConnectionOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = null;
            //var response = instance.TestConnectorImapConnectionOptions(createConnectorImapConnectionOptions);
            //Assert.IsType<ConnectorImapConnectionTestResult>(response);
        }

        /// <summary>
        /// Test TestConnectorSmtpConnection
        /// </summary>
        [Fact]
        public void TestConnectorSmtpConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = null;
            //var response = instance.TestConnectorSmtpConnection(id, createConnectorSmtpConnectionOptions);
            //Assert.IsType<ConnectorSmtpConnectionTestResult>(response);
        }

        /// <summary>
        /// Test TestConnectorSmtpConnectionOptions
        /// </summary>
        [Fact]
        public void TestConnectorSmtpConnectionOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = null;
            //var response = instance.TestConnectorSmtpConnectionOptions(createConnectorSmtpConnectionOptions);
            //Assert.IsType<ConnectorSmtpConnectionTestResult>(response);
        }

        /// <summary>
        /// Test UpdateConnector
        /// </summary>
        [Fact]
        public void UpdateConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateConnectorOptions createConnectorOptions = null;
            //var response = instance.UpdateConnector(id, createConnectorOptions);
            //Assert.IsType<ConnectorDto>(response);
        }

        /// <summary>
        /// Test UpdateConnectorImapConnection
        /// </summary>
        [Fact]
        public void UpdateConnectorImapConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = null;
            //var response = instance.UpdateConnectorImapConnection(id, createConnectorImapConnectionOptions);
            //Assert.IsType<ConnectorImapConnectionDto>(response);
        }

        /// <summary>
        /// Test UpdateConnectorSmtpConnection
        /// </summary>
        [Fact]
        public void UpdateConnectorSmtpConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = null;
            //var response = instance.UpdateConnectorSmtpConnection(id, createConnectorSmtpConnectionOptions);
            //Assert.IsType<ConnectorSmtpConnectionDto>(response);
        }
    }
}
