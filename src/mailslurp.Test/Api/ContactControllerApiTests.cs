/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
// uncomment below to import models
//using mailslurp.Model;

namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing ContactControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContactControllerApiTests : IDisposable
    {
        private ContactControllerApi instance;

        public ContactControllerApiTests()
        {
            instance = new ContactControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ContactControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ContactControllerApi
            //Assert.IsType<ContactControllerApi>(instance);
        }

        /// <summary>
        /// Test CreateContact
        /// </summary>
        [Fact]
        public void CreateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateContactOptions createContactOptions = null;
            //var response = instance.CreateContact(createContactOptions);
            //Assert.IsType<ContactDto>(response);
        }

        /// <summary>
        /// Test DeleteContact
        /// </summary>
        [Fact]
        public void DeleteContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid contactId = null;
            //instance.DeleteContact(contactId);
        }

        /// <summary>
        /// Test GetAllContacts
        /// </summary>
        [Fact]
        public void GetAllContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //string search = null;
            //var response = instance.GetAllContacts(page, size, sort, since, before, search);
            //Assert.IsType<PageContactProjection>(response);
        }

        /// <summary>
        /// Test GetContact
        /// </summary>
        [Fact]
        public void GetContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid contactId = null;
            //var response = instance.GetContact(contactId);
            //Assert.IsType<ContactDto>(response);
        }

        /// <summary>
        /// Test GetContactVCard
        /// </summary>
        [Fact]
        public void GetContactVCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid contactId = null;
            //instance.GetContactVCard(contactId);
        }

        /// <summary>
        /// Test GetContacts
        /// </summary>
        [Fact]
        public void GetContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetContacts();
            //Assert.IsType<List<ContactProjection>>(response);
        }
    }
}
