/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing InboxReplierControllerApi
    /// </summary>
    public sealed class InboxReplierControllerApiTests : ApiTestsBase
    {
        private readonly IInboxReplierControllerApi _instance;

        public InboxReplierControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IInboxReplierControllerApi>();
        }

        /// <summary>
        /// Test CreateNewInboxReplier
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewInboxReplierAsyncTest()
        {
            CreateInboxReplierOptions createInboxReplierOptions = default;
            var response = await _instance.CreateNewInboxReplierAsync(createInboxReplierOptions);
            var model = response.Ok();
            Assert.IsType<InboxReplierDto>(model);
        }

        /// <summary>
        /// Test DeleteInboxReplier
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteInboxReplierAsyncTest()
        {
            Guid id = default;
            await _instance.DeleteInboxReplierAsync(id);
        }

        /// <summary>
        /// Test DeleteInboxRepliers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteInboxRepliersAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            await _instance.DeleteInboxRepliersAsync(inboxId);
        }

        /// <summary>
        /// Test GetAllInboxReplierEvents
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllInboxReplierEventsAsyncTest()
        {
            Client.Option<Guid> inboxReplierId = default;
            Client.Option<Guid> inboxId = default;
            Client.Option<Guid> emailId = default;
            Client.Option<Guid> sentId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            var response = await _instance.GetAllInboxReplierEventsAsync(inboxReplierId, inboxId, emailId, sentId, page, size, sort);
            var model = response.Ok();
            Assert.IsType<PageInboxReplierEvents>(model);
        }

        /// <summary>
        /// Test GetInboxReplier
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxReplierAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetInboxReplierAsync(id);
            var model = response.Ok();
            Assert.IsType<InboxReplierDto>(model);
        }

        /// <summary>
        /// Test GetInboxReplierEvents
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxReplierEventsAsyncTest()
        {
            Guid id = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            var response = await _instance.GetInboxReplierEventsAsync(id, page, size, sort);
            var model = response.Ok();
            Assert.IsType<PageInboxReplierEvents>(model);
        }

        /// <summary>
        /// Test GetInboxRepliers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxRepliersAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetInboxRepliersAsync(inboxId, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageInboxReplierDto>(model);
        }

        /// <summary>
        /// Test UpdateInboxReplier
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateInboxReplierAsyncTest()
        {
            Guid id = default;
            UpdateInboxReplierOptions updateInboxReplierOptions = default;
            var response = await _instance.UpdateInboxReplierAsync(id, updateInboxReplierOptions);
            var model = response.Ok();
            Assert.IsType<InboxReplierDto>(model);
        }
    }
}
