/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing BounceControllerApi
    /// </summary>
    public sealed class BounceControllerApiTests : ApiTestsBase
    {
        private readonly IBounceControllerApi _instance;

        public BounceControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IBounceControllerApi>();
        }

        /// <summary>
        /// Test FilterBouncedRecipient
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task FilterBouncedRecipientAsyncTest()
        {
            FilterBouncedRecipientsOptions filterBouncedRecipientsOptions = default;
            var response = await _instance.FilterBouncedRecipientAsync(filterBouncedRecipientsOptions);
            var model = response.Ok();
            Assert.IsType<FilterBouncedRecipientsResult>(model);
        }

        /// <summary>
        /// Test GetAccountBounceBlockStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAccountBounceBlockStatusAsyncTest()
        {
            var response = await _instance.GetAccountBounceBlockStatusAsync();
            var model = response.Ok();
            Assert.IsType<AccountBounceBlockDto>(model);
        }

        /// <summary>
        /// Test GetBouncedEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBouncedEmailAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetBouncedEmailAsync(id);
            var model = response.Ok();
            Assert.IsType<BouncedEmailDto>(model);
        }

        /// <summary>
        /// Test GetBouncedEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBouncedEmailsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetBouncedEmailsAsync(page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageBouncedEmail>(model);
        }

        /// <summary>
        /// Test GetBouncedRecipient
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBouncedRecipientAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetBouncedRecipientAsync(id);
            var model = response.Ok();
            Assert.IsType<BouncedRecipientDto>(model);
        }

        /// <summary>
        /// Test GetBouncedRecipients
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBouncedRecipientsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetBouncedRecipientsAsync(page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageBouncedRecipients>(model);
        }

        /// <summary>
        /// Test GetComplaint
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetComplaintAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetComplaintAsync(id);
            var model = response.Ok();
            Assert.IsType<Complaint>(model);
        }

        /// <summary>
        /// Test GetComplaints
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetComplaintsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetComplaintsAsync(page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageComplaint>(model);
        }

        /// <summary>
        /// Test GetListUnsubscribeRecipients
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetListUnsubscribeRecipientsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<Guid> domainId = default;
            var response = await _instance.GetListUnsubscribeRecipientsAsync(page, size, sort, domainId);
            var model = response.Ok();
            Assert.IsType<PageListUnsubscribeRecipients>(model);
        }

        /// <summary>
        /// Test GetReputationItems
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReputationItemsAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetReputationItemsAsync(page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageReputationItems>(model);
        }
    }
}
