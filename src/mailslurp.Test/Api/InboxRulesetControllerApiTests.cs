/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing InboxRulesetControllerApi
    /// </summary>
    public sealed class InboxRulesetControllerApiTests : ApiTestsBase
    {
        private readonly IInboxRulesetControllerApi _instance;

        public InboxRulesetControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IInboxRulesetControllerApi>();
        }

        /// <summary>
        /// Test CreateNewInboxRuleset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewInboxRulesetAsyncTest()
        {
            CreateInboxRulesetOptions createInboxRulesetOptions = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.CreateNewInboxRulesetAsync(createInboxRulesetOptions, inboxId);
            var model = response.Ok();
            Assert.IsType<InboxRulesetDto>(model);
        }

        /// <summary>
        /// Test DeleteInboxRuleset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteInboxRulesetAsyncTest()
        {
            Guid id = default;
            await _instance.DeleteInboxRulesetAsync(id);
        }

        /// <summary>
        /// Test DeleteInboxRulesets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteInboxRulesetsAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            await _instance.DeleteInboxRulesetsAsync(inboxId);
        }

        /// <summary>
        /// Test GetInboxRuleset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxRulesetAsyncTest()
        {
            Guid id = default;
            var response = await _instance.GetInboxRulesetAsync(id);
            var model = response.Ok();
            Assert.IsType<InboxRulesetDto>(model);
        }

        /// <summary>
        /// Test GetInboxRulesets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetInboxRulesetsAsyncTest()
        {
            Client.Option<Guid> inboxId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<string> searchFilter = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetInboxRulesetsAsync(inboxId, page, size, sort, searchFilter, since, before);
            var model = response.Ok();
            Assert.IsType<PageInboxRulesetDto>(model);
        }

        /// <summary>
        /// Test TestInboxRuleset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestInboxRulesetAsyncTest()
        {
            Guid id = default;
            InboxRulesetTestOptions inboxRulesetTestOptions = default;
            var response = await _instance.TestInboxRulesetAsync(id, inboxRulesetTestOptions);
            var model = response.Ok();
            Assert.IsType<InboxRulesetTestResult>(model);
        }

        /// <summary>
        /// Test TestInboxRulesetReceiving
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestInboxRulesetReceivingAsyncTest()
        {
            TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions = default;
            var response = await _instance.TestInboxRulesetReceivingAsync(testInboxRulesetReceivingOptions);
            var model = response.Ok();
            Assert.IsType<TestInboxRulesetReceivingResult>(model);
        }

        /// <summary>
        /// Test TestInboxRulesetSending
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestInboxRulesetSendingAsyncTest()
        {
            TestInboxRulesetSendingOptions testInboxRulesetSendingOptions = default;
            var response = await _instance.TestInboxRulesetSendingAsync(testInboxRulesetSendingOptions);
            var model = response.Ok();
            Assert.IsType<TestInboxRulesetSendingResult>(model);
        }

        /// <summary>
        /// Test TestInboxRulesetsForInbox
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestInboxRulesetsForInboxAsyncTest()
        {
            Guid inboxId = default;
            InboxRulesetTestOptions inboxRulesetTestOptions = default;
            var response = await _instance.TestInboxRulesetsForInboxAsync(inboxId, inboxRulesetTestOptions);
            var model = response.Ok();
            Assert.IsType<InboxRulesetTestResult>(model);
        }

        /// <summary>
        /// Test TestNewInboxRuleset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestNewInboxRulesetAsyncTest()
        {
            TestNewInboxRulesetOptions testNewInboxRulesetOptions = default;
            var response = await _instance.TestNewInboxRulesetAsync(testNewInboxRulesetOptions);
            var model = response.Ok();
            Assert.IsType<InboxRulesetTestResult>(model);
        }
    }
}
