/* 
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
using mailslurp.Model;

namespace mailslurp.Test
{
    /// <summary>
    ///  Class for testing InboxRulesetControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InboxRulesetControllerApiTests : IDisposable
    {
        private InboxRulesetControllerApi instance;

        public InboxRulesetControllerApiTests()
        {
            instance = new InboxRulesetControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InboxRulesetControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InboxRulesetControllerApi
            //Assert.IsType(typeof(InboxRulesetControllerApi), instance, "instance is a InboxRulesetControllerApi");
        }

        
        /// <summary>
        /// Test CreateNewInboxRuleset
        /// </summary>
        [Fact]
        public void CreateNewInboxRulesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //CreateInboxRulesetOptions createInboxRulesetOptions = null;
            //var response = instance.CreateNewInboxRuleset(inboxId, createInboxRulesetOptions);
            //Assert.IsType<InboxRulesetDto> (response, "response is InboxRulesetDto");
        }
        
        /// <summary>
        /// Test DeleteInboxRuleset
        /// </summary>
        [Fact]
        public void DeleteInboxRulesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteInboxRuleset(id);
            
        }
        
        /// <summary>
        /// Test DeleteInboxRulesets
        /// </summary>
        [Fact]
        public void DeleteInboxRulesetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? inboxId = null;
            //instance.DeleteInboxRulesets(inboxId);
            
        }
        
        /// <summary>
        /// Test GetInboxRuleset
        /// </summary>
        [Fact]
        public void GetInboxRulesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.GetInboxRuleset(id);
            //Assert.IsType<InboxRulesetDto> (response, "response is InboxRulesetDto");
        }
        
        /// <summary>
        /// Test GetInboxRulesets
        /// </summary>
        [Fact]
        public void GetInboxRulesetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? inboxId = null;
            //int? page = null;
            //int? size = null;
            //string sort = null;
            //string searchFilter = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.GetInboxRulesets(inboxId, page, size, sort, searchFilter, since, before);
            //Assert.IsType<PageInboxRulesetDto> (response, "response is PageInboxRulesetDto");
        }
        
        /// <summary>
        /// Test TestInboxRuleset
        /// </summary>
        [Fact]
        public void TestInboxRulesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //InboxRulesetTestOptions inboxRulesetTestOptions = null;
            //var response = instance.TestInboxRuleset(id, inboxRulesetTestOptions);
            //Assert.IsType<InboxRulesetTestResult> (response, "response is InboxRulesetTestResult");
        }
        
        /// <summary>
        /// Test TestInboxRulesetsForInbox
        /// </summary>
        [Fact]
        public void TestInboxRulesetsForInboxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid inboxId = null;
            //InboxRulesetTestOptions inboxRulesetTestOptions = null;
            //var response = instance.TestInboxRulesetsForInbox(inboxId, inboxRulesetTestOptions);
            //Assert.IsType<InboxRulesetTestResult> (response, "response is InboxRulesetTestResult");
        }
        
        /// <summary>
        /// Test TestNewInboxRuleset
        /// </summary>
        [Fact]
        public void TestNewInboxRulesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TestNewInboxRulesetOptions testNewInboxRulesetOptions = null;
            //var response = instance.TestNewInboxRuleset(testNewInboxRulesetOptions);
            //Assert.IsType<InboxRulesetTestResult> (response, "response is InboxRulesetTestResult");
        }
        
    }

}
