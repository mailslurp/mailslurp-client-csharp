/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing AliasControllerApi
    /// </summary>
    public sealed class AliasControllerApiTests : ApiTestsBase
    {
        private readonly IAliasControllerApi _instance;

        public AliasControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAliasControllerApi>();
        }

        /// <summary>
        /// Test CreateAlias
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateAliasAsyncTest()
        {
            CreateAliasOptions createAliasOptions = default;
            var response = await _instance.CreateAliasAsync(createAliasOptions);
            var model = response.Created();
            Assert.IsType<AliasDto>(model);
        }

        /// <summary>
        /// Test DeleteAlias
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAliasAsyncTest()
        {
            Guid aliasId = default;
            await _instance.DeleteAliasAsync(aliasId);
        }

        /// <summary>
        /// Test GetAlias
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAliasAsyncTest()
        {
            Guid aliasId = default;
            var response = await _instance.GetAliasAsync(aliasId);
            var model = response.Ok();
            Assert.IsType<AliasDto>(model);
        }

        /// <summary>
        /// Test GetAliasEmails
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAliasEmailsAsyncTest()
        {
            Guid aliasId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetAliasEmailsAsync(aliasId, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageEmailProjection>(model);
        }

        /// <summary>
        /// Test GetAliasThreads
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAliasThreadsAsyncTest()
        {
            Guid aliasId = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetAliasThreadsAsync(aliasId, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageAliasThreadProjection>(model);
        }

        /// <summary>
        /// Test GetAliases
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAliasesAsyncTest()
        {
            Client.Option<string> search = default;
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetAliasesAsync(search, page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageAlias>(model);
        }

        /// <summary>
        /// Test GetThread
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetThreadAsyncTest()
        {
            Guid threadId = default;
            var response = await _instance.GetThreadAsync(threadId);
            var model = response.Ok();
            Assert.IsType<AliasThreadProjection>(model);
        }

        /// <summary>
        /// Test GetThreadsPaginated
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetThreadsPaginatedAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> size = default;
            Client.Option<string> sort = default;
            Client.Option<DateTime> since = default;
            Client.Option<DateTime> before = default;
            var response = await _instance.GetThreadsPaginatedAsync(page, size, sort, since, before);
            var model = response.Ok();
            Assert.IsType<PageAliasThreadProjection>(model);
        }

        /// <summary>
        /// Test ReplyToAliasEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ReplyToAliasEmailAsyncTest()
        {
            Guid aliasId = default;
            Guid emailId = default;
            ReplyToAliasEmailOptions replyToAliasEmailOptions = default;
            var response = await _instance.ReplyToAliasEmailAsync(aliasId, emailId, replyToAliasEmailOptions);
            var model = response.Ok();
            Assert.IsType<SentEmailDto>(model);
        }

        /// <summary>
        /// Test SendAliasEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendAliasEmailAsyncTest()
        {
            Guid aliasId = default;
            SendEmailOptions sendEmailOptions = default;
            var response = await _instance.SendAliasEmailAsync(aliasId, sendEmailOptions);
            var model = response.Ok();
            Assert.IsType<SentEmailDto>(model);
        }

        /// <summary>
        /// Test UpdateAlias
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateAliasAsyncTest()
        {
            Guid aliasId = default;
            UpdateAliasOptions updateAliasOptions = default;
            var response = await _instance.UpdateAliasAsync(aliasId, updateAliasOptions);
            var model = response.Accepted();
            Assert.IsType<AliasDto>(model);
        }
    }
}
