/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using mailslurp.Client;
using mailslurp.Api;
// uncomment below to import models
//using mailslurp.Model;

namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing ImapControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ImapControllerApiTests : IDisposable
    {
        private ImapControllerApi instance;

        public ImapControllerApiTests()
        {
            instance = new ImapControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ImapControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ImapControllerApi
            //Assert.IsType<ImapControllerApi>(instance);
        }

        /// <summary>
        /// Test ImapServerFetch
        /// </summary>
        [Fact]
        public void ImapServerFetchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long seqNum = null;
            //Guid? inboxId = null;
            //var response = instance.ImapServerFetch(seqNum, inboxId);
            //Assert.IsType<ImapServerFetchResult>(response);
        }

        /// <summary>
        /// Test ImapServerGet
        /// </summary>
        [Fact]
        public void ImapServerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid emailId = null;
            //Guid? inboxId = null;
            //var response = instance.ImapServerGet(emailId, inboxId);
            //Assert.IsType<ImapServerGetResult>(response);
        }

        /// <summary>
        /// Test ImapServerList
        /// </summary>
        [Fact]
        public void ImapServerListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ImapServerListOptions imapServerListOptions = null;
            //Guid? inboxId = null;
            //var response = instance.ImapServerList(imapServerListOptions, inboxId);
            //Assert.IsType<ImapServerListResult>(response);
        }

        /// <summary>
        /// Test ImapServerSearch
        /// </summary>
        [Fact]
        public void ImapServerSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ImapServerSearchOptions imapServerSearchOptions = null;
            //Guid? inboxId = null;
            //var response = instance.ImapServerSearch(imapServerSearchOptions, inboxId);
            //Assert.IsType<ImapServerSearchResult>(response);
        }

        /// <summary>
        /// Test ImapServerStatus
        /// </summary>
        [Fact]
        public void ImapServerStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ImapServerStatusOptions imapServerStatusOptions = null;
            //Guid? inboxId = null;
            //var response = instance.ImapServerStatus(imapServerStatusOptions, inboxId);
            //Assert.IsType<ImapServerStatusResult>(response);
        }

        /// <summary>
        /// Test ImapServerUpdateFlags
        /// </summary>
        [Fact]
        public void ImapServerUpdateFlagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ImapUpdateFlagsOptions imapUpdateFlagsOptions = null;
            //Guid? inboxId = null;
            //instance.ImapServerUpdateFlags(imapUpdateFlagsOptions, inboxId);
        }
    }
}
