/*
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using mailslurp.Api;
using mailslurp.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace mailslurp.Test.Api
{
    /// <summary>
    ///  Class for testing ImapControllerApi
    /// </summary>
    public sealed class ImapControllerApiTests : ApiTestsBase
    {
        private readonly IImapControllerApi _instance;

        public ImapControllerApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IImapControllerApi>();
        }

        /// <summary>
        /// Test ImapServerFetch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ImapServerFetchAsyncTest()
        {
            long seqNum = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.ImapServerFetchAsync(seqNum, inboxId);
            var model = response.Ok();
            Assert.IsType<ImapServerFetchResult>(model);
        }

        /// <summary>
        /// Test ImapServerGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ImapServerGetAsyncTest()
        {
            Guid emailId = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.ImapServerGetAsync(emailId, inboxId);
            var model = response.Ok();
            Assert.IsType<ImapServerGetResult>(model);
        }

        /// <summary>
        /// Test ImapServerList
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ImapServerListAsyncTest()
        {
            ImapServerListOptions imapServerListOptions = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.ImapServerListAsync(imapServerListOptions, inboxId);
            var model = response.Ok();
            Assert.IsType<ImapServerListResult>(model);
        }

        /// <summary>
        /// Test ImapServerMailbox
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ImapServerMailboxAsyncTest()
        {
            string name = default;
            var response = await _instance.ImapServerMailboxAsync(name);
            var model = response.Ok();
            Assert.IsType<ImapServerMailboxResult>(model);
        }

        /// <summary>
        /// Test ImapServerSearch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ImapServerSearchAsyncTest()
        {
            ImapServerSearchOptions imapServerSearchOptions = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.ImapServerSearchAsync(imapServerSearchOptions, inboxId);
            var model = response.Ok();
            Assert.IsType<ImapServerSearchResult>(model);
        }

        /// <summary>
        /// Test ImapServerStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ImapServerStatusAsyncTest()
        {
            ImapServerStatusOptions imapServerStatusOptions = default;
            Client.Option<Guid> inboxId = default;
            var response = await _instance.ImapServerStatusAsync(imapServerStatusOptions, inboxId);
            var model = response.Ok();
            Assert.IsType<ImapServerStatusResult>(model);
        }

        /// <summary>
        /// Test ImapServerUpdateFlags
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ImapServerUpdateFlagsAsyncTest()
        {
            ImapUpdateFlagsOptions imapUpdateFlagsOptions = default;
            Client.Option<Guid> inboxId = default;
            await _instance.ImapServerUpdateFlagsAsync(imapUpdateFlagsOptions, inboxId);
        }
    }
}
